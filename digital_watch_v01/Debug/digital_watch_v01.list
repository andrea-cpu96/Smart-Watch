
digital_watch_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010170  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08010420  08010420  00011420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ba0  08010ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010ba8  08010ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010bac  08010bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08010bb0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0006392c  24000064  08010c14  00012064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24063990  08010c14  00012990  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002183d  00000000  00000000  00012092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000476d  00000000  00000000  000338cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b20  00000000  00000000  00038040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014a8  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b31  00000000  00000000  0003b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026af2  00000000  00000000  00072b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ac72  00000000  00000000  0009962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f429d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007658  00000000  00000000  001f42e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001fb938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010408 	.word	0x08010408

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	08010408 	.word	0x08010408

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	3b04      	subs	r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e02a      	b.n	80003fe <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 80003a8:	8afb      	ldrh	r3, [r7, #22]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4413      	add	r3, r2
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d11f      	bne.n	80003f8 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3301      	adds	r3, #1
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d115      	bne.n	80003f8 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 80003cc:	8afb      	ldrh	r3, [r7, #22]
 80003ce:	3302      	adds	r3, #2
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	4413      	add	r3, r2
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3302      	adds	r3, #2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d10b      	bne.n	80003f8 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 80003e0:	8afb      	ldrh	r3, [r7, #22]
 80003e2:	3303      	adds	r3, #3
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	4413      	add	r3, r2
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3303      	adds	r3, #3
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d101      	bne.n	80003f8 <__AVI_SearchID+0x68>
            return i;  
 80003f4:	8afb      	ldrh	r3, [r7, #22]
 80003f6:	e007      	b.n	8000408 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 80003f8:	8afb      	ldrh	r3, [r7, #22]
 80003fa:	3301      	adds	r3, #1
 80003fc:	82fb      	strh	r3, [r7, #22]
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8d0      	bhi.n	80003a8 <__AVI_SearchID+0x18>
  }
  return 0;    
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	371c      	adds	r7, #28
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	3302      	adds	r3, #2
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	b21a      	sxth	r2, r3
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	3303      	adds	r3, #3
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b21b      	sxth	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b21b      	sxth	r3, r3
 8000434:	b29a      	uxth	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	3304      	adds	r3, #4
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	3305      	adds	r3, #5
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	021b      	lsls	r3, r3, #8
 800044a:	431a      	orrs	r2, r3
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	3306      	adds	r3, #6
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	041b      	lsls	r3, r3, #16
 8000454:	431a      	orrs	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	3307      	adds	r3, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	061b      	lsls	r3, r3, #24
 800045e:	4313      	orrs	r3, r2
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a1b      	ldr	r3, [r3, #32]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b00      	cmp	r3, #0
 8000470:	d004      	beq.n	800047c <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6a1b      	ldr	r3, [r3, #32]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	8bdb      	ldrh	r3, [r3, #30]
 8000480:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000484:	4293      	cmp	r3, r2
 8000486:	d005      	beq.n	8000494 <__AVI_GetStreamInfo+0x80>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	8bdb      	ldrh	r3, [r3, #30]
 800048c:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000490:	4293      	cmp	r3, r2
 8000492:	d101      	bne.n	8000498 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	e000      	b.n	800049a <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 8000498:	230b      	movs	r3, #11
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08e      	sub	sp, #56	@ 0x38
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 80004c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a87      	ldr	r2, [pc, #540]	@ (80006e4 <__AVI_Init+0x23c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d001      	beq.n	80004d0 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e170      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 80004d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a84      	ldr	r2, [pc, #528]	@ (80006e8 <__AVI_Init+0x240>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d001      	beq.n	80004de <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 80004da:	2302      	movs	r3, #2
 80004dc:	e169      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	330c      	adds	r3, #12
 80004e2:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80004e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a7f      	ldr	r2, [pc, #508]	@ (80006ec <__AVI_Init+0x244>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d001      	beq.n	80004f6 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 80004f2:	2303      	movs	r3, #3
 80004f4:	e15d      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 80004f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4a7d      	ldr	r2, [pc, #500]	@ (80006f0 <__AVI_Init+0x248>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d001      	beq.n	8000504 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000500:	2304      	movs	r3, #4
 8000502:	e156      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	330c      	adds	r3, #12
 8000508:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a78      	ldr	r2, [pc, #480]	@ (80006f4 <__AVI_Init+0x24c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d001      	beq.n	800051c <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 8000518:	2305      	movs	r3, #5
 800051a:	e14a      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800052c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3308      	adds	r3, #8
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a6a      	ldr	r2, [pc, #424]	@ (80006ec <__AVI_Init+0x244>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d001      	beq.n	800054a <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 8000546:	2303      	movs	r3, #3
 8000548:	e133      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800054a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4a6a      	ldr	r2, [pc, #424]	@ (80006f8 <__AVI_Init+0x250>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d001      	beq.n	8000558 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 8000554:	2306      	movs	r3, #6
 8000556:	e12c      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	330c      	adds	r3, #12
 800055c:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a66      	ldr	r2, [pc, #408]	@ (80006fc <__AVI_Init+0x254>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d001      	beq.n	800056c <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 8000568:	2307      	movs	r3, #7
 800056a:	e122      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a63      	ldr	r2, [pc, #396]	@ (8000700 <__AVI_Init+0x258>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d16a      	bne.n	800064c <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a62      	ldr	r2, [pc, #392]	@ (8000704 <__AVI_Init+0x25c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d001      	beq.n	8000584 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 8000580:	230a      	movs	r3, #10
 8000582:	e116      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000584:	4a60      	ldr	r2, [pc, #384]	@ (8000708 <__AVI_Init+0x260>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800058a:	4a60      	ldr	r2, [pc, #384]	@ (800070c <__AVI_Init+0x264>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	3314      	adds	r3, #20
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000710 <__AVI_Init+0x268>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 80005a6:	2308      	movs	r3, #8
 80005a8:	e103      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	691a      	ldr	r2, [r3, #16]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 80005ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	3308      	adds	r3, #8
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	4413      	add	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80005ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <__AVI_Init+0x244>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d009      	beq.n	80005e8 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	839a      	strh	r2, [r3, #28]
 80005e6:	e0b7      	b.n	8000758 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 80005e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a42      	ldr	r2, [pc, #264]	@ (80006f8 <__AVI_Init+0x250>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d001      	beq.n	80005f6 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 80005f2:	2306      	movs	r3, #6
 80005f4:	e0dd      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	330c      	adds	r3, #12
 80005fa:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a3e      	ldr	r2, [pc, #248]	@ (80006fc <__AVI_Init+0x254>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d001      	beq.n	800060a <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 8000606:	2307      	movs	r3, #7
 8000608:	e0d3      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a41      	ldr	r2, [pc, #260]	@ (8000714 <__AVI_Init+0x26c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d001      	beq.n	8000618 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000614:	230a      	movs	r3, #10
 8000616:	e0cc      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	3314      	adds	r3, #20
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a39      	ldr	r2, [pc, #228]	@ (8000710 <__AVI_Init+0x268>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d001      	beq.n	8000632 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800062e:	2308      	movs	r3, #8
 8000630:	e0bf      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	68da      	ldr	r2, [r3, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	895a      	ldrh	r2, [r3, #10]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	891a      	ldrh	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	839a      	strh	r2, [r3, #28]
 800064a:	e085      	b.n	8000758 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a30      	ldr	r2, [pc, #192]	@ (8000714 <__AVI_Init+0x26c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	f040 8080 	bne.w	8000758 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 8000658:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <__AVI_Init+0x270>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800065e:	4a2f      	ldr	r2, [pc, #188]	@ (800071c <__AVI_Init+0x274>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	3314      	adds	r3, #20
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <__AVI_Init+0x268>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d001      	beq.n	800067e <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800067a:	2308      	movs	r3, #8
 800067c:	e099      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	895a      	ldrh	r2, [r3, #10]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	891a      	ldrh	r2, [r3, #8]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 8000696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	3308      	adds	r3, #8
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80006a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <__AVI_Init+0x244>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d001      	beq.n	80006b4 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 80006b0:	2303      	movs	r3, #3
 80006b2:	e07e      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 80006b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <__AVI_Init+0x250>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d001      	beq.n	80006c2 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 80006be:	2306      	movs	r3, #6
 80006c0:	e077      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	330c      	adds	r3, #12
 80006c6:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <__AVI_Init+0x254>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d001      	beq.n	80006d6 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 80006d2:	2307      	movs	r3, #7
 80006d4:	e06d      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <__AVI_Init+0x258>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d01f      	beq.n	8000720 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 80006e0:	230a      	movs	r3, #10
 80006e2:	e066      	b.n	80007b2 <__AVI_Init+0x30a>
 80006e4:	46464952 	.word	0x46464952
 80006e8:	20495641 	.word	0x20495641
 80006ec:	5453494c 	.word	0x5453494c
 80006f0:	6c726468 	.word	0x6c726468
 80006f4:	68697661 	.word	0x68697661
 80006f8:	6c727473 	.word	0x6c727473
 80006fc:	68727473 	.word	0x68727473
 8000700:	73646976 	.word	0x73646976
 8000704:	47504a4d 	.word	0x47504a4d
 8000708:	08010420 	.word	0x08010420
 800070c:	08010438 	.word	0x08010438
 8000710:	66727473 	.word	0x66727473
 8000714:	73647561 	.word	0x73647561
 8000718:	08010428 	.word	0x08010428
 800071c:	08010430 	.word	0x08010430
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	3314      	adds	r3, #20
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4413      	add	r3, r2
 800072a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <__AVI_Init+0x314>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d001      	beq.n	800073a <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000736:	2308      	movs	r3, #8
 8000738:	e03b      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <__AVI_Init+0x318>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d001      	beq.n	8000748 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000744:	230a      	movs	r3, #10
 8000746:	e034      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000758:	4a1a      	ldr	r2, [pc, #104]	@ (80007c4 <__AVI_Init+0x31c>)
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800075e:	f7ff fe17 	bl	8000390 <__AVI_SearchID>
 8000762:	4603      	mov	r3, r0
 8000764:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000766:	8afb      	ldrh	r3, [r7, #22]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800076c:	2309      	movs	r3, #9
 800076e:	e020      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01a      	beq.n	80007ae <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000778:	8afb      	ldrh	r3, [r7, #22]
 800077a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800077c:	4413      	add	r3, r2
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000784:	461a      	mov	r2, r3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800078a:	f7ff fe01 	bl	8000390 <__AVI_SearchID>
 800078e:	4603      	mov	r3, r0
 8000790:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000798:	230b      	movs	r3, #11
 800079a:	e00a      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800079c:	8afb      	ldrh	r3, [r7, #22]
 800079e:	3304      	adds	r3, #4
 80007a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007a2:	4413      	add	r3, r2
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 80007a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a8:	881a      	ldrh	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 80007ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3738      	adds	r7, #56	@ 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	66727473 	.word	0x66727473
 80007c0:	47504a4d 	.word	0x47504a4d
 80007c4:	08010440 	.word	0x08010440

080007c8 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6a3a      	ldr	r2, [r7, #32]
 80007ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f0:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80007f2:	2100      	movs	r1, #0
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f00e fe02 	bl	800f3fe <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f00e fc13 	bl	800f030 <f_read>
  if(readSize != VideoBufferSize)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d001      	beq.n	8000816 <AVI_ParserInit+0x4e>
  {
    return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e013      	b.n	800083e <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f7ff fe42 	bl	80004a8 <__AVI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <AVI_ParserInit+0x66>
  {
    return 1;    
 800082a:	2301      	movs	r3, #1
 800082c:	e007      	b.n	800083e <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	4613      	mov	r3, r2
 8000854:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085e:	2b00      	cmp	r3, #0
 8000860:	d124      	bne.n	80008ac <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 8000862:	2100      	movs	r1, #0
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f00e fdca 	bl	800f3fe <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f00e fbda 	bl	800f030 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000884:	4a49      	ldr	r2, [pc, #292]	@ (80009ac <AVI_GetFrame+0x164>)
 8000886:	4619      	mov	r1, r3
 8000888:	f7ff fd82 	bl	8000390 <__AVI_SearchID>
 800088c:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3304      	adds	r3, #4
 8000896:	4413      	add	r3, r2
 8000898:	4619      	mov	r1, r3
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdba 	bl	8000414 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	330c      	adds	r3, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f00e fda9 	bl	800f3fe <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	8bdb      	ldrh	r3, [r3, #30]
 80008b0:	f246 4263 	movw	r2, #25699	@ 0x6463
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d158      	bne.n	800096a <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d11b      	bne.n	80008f6 <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6a1a      	ldr	r2, [r3, #32]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4413      	add	r3, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f00e fd93 	bl	800f3fe <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	2208      	movs	r2, #8
 80008e2:	68b8      	ldr	r0, [r7, #8]
 80008e4:	f00e fba4 	bl	800f030 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ec:	4619      	mov	r1, r3
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f7ff fd90 	bl	8000414 <__AVI_GetStreamInfo>
 80008f4:	e037      	b.n	8000966 <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d11c      	bne.n	8000936 <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	3b10      	subs	r3, #16
 8000908:	4619      	mov	r1, r3
 800090a:	68b8      	ldr	r0, [r7, #8]
 800090c:	f00e fd77 	bl	800f3fe <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2208      	movs	r2, #8
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f00e fb88 	bl	800f030 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000924:	4619      	mov	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fd74 	bl	8000414 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	631a      	str	r2, [r3, #48]	@ 0x30
 8000934:	e017      	b.n	8000966 <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6a1a      	ldr	r2, [r3, #32]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f103 0208 	add.w	r2, r3, #8
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	68b8      	ldr	r0, [r7, #8]
 8000950:	f00e fb6e 	bl	800f030 <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	4413      	add	r3, r2
 800095e:	4619      	mov	r1, r3
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff fd57 	bl	8000414 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 8000966:	2301      	movs	r3, #1
 8000968:	e01c      	b.n	80009a4 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	8bdb      	ldrh	r3, [r3, #30]
 800096e:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000972:	4293      	cmp	r3, r2
 8000974:	d115      	bne.n	80009a2 <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	68b8      	ldr	r0, [r7, #8]
 8000988:	f00e fb52 	bl	800f030 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4413      	add	r3, r2
 8000996:	4619      	mov	r1, r3
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fd3b 	bl	8000414 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800099e:	2302      	movs	r3, #2
 80009a0:	e000      	b.n	80009a4 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08010440 	.word	0x08010440

080009b0 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <GC9A01_set_reset+0x30>)
 80009c6:	f003 fe2b 	bl	8004620 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 80009ca:	e004      	b.n	80009d6 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <GC9A01_set_reset+0x30>)
 80009d2:	f003 fe25 	bl	8004620 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58020400 	.word	0x58020400

080009e4 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_set_data_command+0x30>)
 80009fa:	f003 fe11 	bl	8004620 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 80009fe:	e004      	b.n	8000a0a <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2102      	movs	r1, #2
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <GC9A01_set_data_command+0x30>)
 8000a06:	f003 fe0b 	bl	8004620 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	58020400 	.word	0x58020400

08000a18 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <GC9A01_set_chip_select+0x30>)
 8000a2e:	f003 fdf7 	bl	8004620 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000a32:	e004      	b.n	8000a3e <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2101      	movs	r1, #1
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <GC9A01_set_chip_select+0x30>)
 8000a3a:	f003 fdf1 	bl	8004620 <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58020400 	.word	0x58020400

08000a4c <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffc4 	bl	80009e4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ffdb 	bl	8000a18 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fac4 	bl	8000ff4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ffd3 	bl	8000a18 <GC9A01_set_chip_select>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff ffad 	bl	80009e4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffc4 	bl	8000a18 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 faac 	bl	8000ff4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff ffbb 	bl	8000a18 <GC9A01_set_chip_select>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffde 	bl	8000a7a <GC9A01_write_data>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ffa4 	bl	8000a18 <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f002 f889 	bl	8002be8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ff6a 	bl	80009b0 <GC9A01_set_reset>
    HAL_Delay(10);
 8000adc:	200a      	movs	r0, #10
 8000ade:	f002 f883 	bl	8002be8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff64 	bl	80009b0 <GC9A01_set_reset>
    HAL_Delay(120);
 8000ae8:	2078      	movs	r0, #120	@ 0x78
 8000aea:	f002 f87d 	bl	8002be8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000aee:	20ef      	movs	r0, #239	@ 0xef
 8000af0:	f7ff ffac 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000af4:	20eb      	movs	r0, #235	@ 0xeb
 8000af6:	f7ff ffa9 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000afa:	2014      	movs	r0, #20
 8000afc:	f7ff ffd5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000b00:	20fe      	movs	r0, #254	@ 0xfe
 8000b02:	f7ff ffa3 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000b06:	20ef      	movs	r0, #239	@ 0xef
 8000b08:	f7ff ffa0 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000b0c:	20eb      	movs	r0, #235	@ 0xeb
 8000b0e:	f7ff ff9d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000b12:	2014      	movs	r0, #20
 8000b14:	f7ff ffc9 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000b18:	2084      	movs	r0, #132	@ 0x84
 8000b1a:	f7ff ff97 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000b1e:	2040      	movs	r0, #64	@ 0x40
 8000b20:	f7ff ffc3 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000b24:	2085      	movs	r0, #133	@ 0x85
 8000b26:	f7ff ff91 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b2a:	20ff      	movs	r0, #255	@ 0xff
 8000b2c:	f7ff ffbd 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000b30:	2086      	movs	r0, #134	@ 0x86
 8000b32:	f7ff ff8b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	f7ff ffb7 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000b3c:	2087      	movs	r0, #135	@ 0x87
 8000b3e:	f7ff ff85 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b42:	20ff      	movs	r0, #255	@ 0xff
 8000b44:	f7ff ffb1 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000b48:	2088      	movs	r0, #136	@ 0x88
 8000b4a:	f7ff ff7f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f7ff ffab 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000b54:	2089      	movs	r0, #137	@ 0x89
 8000b56:	f7ff ff79 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000b5a:	2021      	movs	r0, #33	@ 0x21
 8000b5c:	f7ff ffa5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000b60:	208a      	movs	r0, #138	@ 0x8a
 8000b62:	f7ff ff73 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ff9f 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000b6c:	208b      	movs	r0, #139	@ 0x8b
 8000b6e:	f7ff ff6d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000b72:	2080      	movs	r0, #128	@ 0x80
 8000b74:	f7ff ff99 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000b78:	208c      	movs	r0, #140	@ 0x8c
 8000b7a:	f7ff ff67 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff93 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000b84:	208d      	movs	r0, #141	@ 0x8d
 8000b86:	f7ff ff61 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff ff8d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000b90:	208e      	movs	r0, #142	@ 0x8e
 8000b92:	f7ff ff5b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	f7ff ff87 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000b9c:	208f      	movs	r0, #143	@ 0x8f
 8000b9e:	f7ff ff55 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ba2:	20ff      	movs	r0, #255	@ 0xff
 8000ba4:	f7ff ff81 	bl	8000aaa <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ba8:	20b6      	movs	r0, #182	@ 0xb6
 8000baa:	f7ff ff4f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff7b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff78 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000bba:	2036      	movs	r0, #54	@ 0x36
 8000bbc:	f7ff ff46 	bl	8000a4c <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000bc0:	2048      	movs	r0, #72	@ 0x48
 8000bc2:	f7ff ff72 	bl	8000aaa <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000bc6:	203a      	movs	r0, #58	@ 0x3a
 8000bc8:	f7ff ff40 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f7ff ff6c 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000bd2:	2090      	movs	r0, #144	@ 0x90
 8000bd4:	f7ff ff3a 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000bd8:	2008      	movs	r0, #8
 8000bda:	f7ff ff66 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bde:	2008      	movs	r0, #8
 8000be0:	f7ff ff63 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000be4:	2008      	movs	r0, #8
 8000be6:	f7ff ff60 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bea:	2008      	movs	r0, #8
 8000bec:	f7ff ff5d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000bf0:	20bd      	movs	r0, #189	@ 0xbd
 8000bf2:	f7ff ff2b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f7ff ff57 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000bfc:	20bc      	movs	r0, #188	@ 0xbc
 8000bfe:	f7ff ff25 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff51 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000c08:	20ff      	movs	r0, #255	@ 0xff
 8000c0a:	f7ff ff1f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000c0e:	2060      	movs	r0, #96	@ 0x60
 8000c10:	f7ff ff4b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff48 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f7ff ff45 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000c20:	20c3      	movs	r0, #195	@ 0xc3
 8000c22:	f7ff ff13 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c26:	2013      	movs	r0, #19
 8000c28:	f7ff ff3f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000c2c:	20c4      	movs	r0, #196	@ 0xc4
 8000c2e:	f7ff ff0d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c32:	2013      	movs	r0, #19
 8000c34:	f7ff ff39 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000c38:	20c9      	movs	r0, #201	@ 0xc9
 8000c3a:	f7ff ff07 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000c3e:	2022      	movs	r0, #34	@ 0x22
 8000c40:	f7ff ff33 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000c44:	20be      	movs	r0, #190	@ 0xbe
 8000c46:	f7ff ff01 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000c4a:	2011      	movs	r0, #17
 8000c4c:	f7ff ff2d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000c50:	20e1      	movs	r0, #225	@ 0xe1
 8000c52:	f7ff fefb 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff ff27 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000c5c:	200e      	movs	r0, #14
 8000c5e:	f7ff ff24 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000c62:	20df      	movs	r0, #223	@ 0xdf
 8000c64:	f7ff fef2 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000c68:	2021      	movs	r0, #33	@ 0x21
 8000c6a:	f7ff ff1e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f7ff ff1b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff ff18 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000c7a:	20f0      	movs	r0, #240	@ 0xf0
 8000c7c:	f7ff fee6 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000c80:	2045      	movs	r0, #69	@ 0x45
 8000c82:	f7ff ff12 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000c86:	2009      	movs	r0, #9
 8000c88:	f7ff ff0f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c8c:	2008      	movs	r0, #8
 8000c8e:	f7ff ff0c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f7ff ff09 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000c98:	2026      	movs	r0, #38	@ 0x26
 8000c9a:	f7ff ff06 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000c9e:	202a      	movs	r0, #42	@ 0x2a
 8000ca0:	f7ff ff03 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000ca4:	20f1      	movs	r0, #241	@ 0xf1
 8000ca6:	f7ff fed1 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000caa:	2043      	movs	r0, #67	@ 0x43
 8000cac:	f7ff fefd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000cb0:	2070      	movs	r0, #112	@ 0x70
 8000cb2:	f7ff fefa 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000cb6:	2072      	movs	r0, #114	@ 0x72
 8000cb8:	f7ff fef7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000cbc:	2036      	movs	r0, #54	@ 0x36
 8000cbe:	f7ff fef4 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000cc2:	2037      	movs	r0, #55	@ 0x37
 8000cc4:	f7ff fef1 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000cc8:	206f      	movs	r0, #111	@ 0x6f
 8000cca:	f7ff feee 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000cce:	20f2      	movs	r0, #242	@ 0xf2
 8000cd0:	f7ff febc 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000cd4:	2045      	movs	r0, #69	@ 0x45
 8000cd6:	f7ff fee8 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000cda:	2009      	movs	r0, #9
 8000cdc:	f7ff fee5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ce0:	2008      	movs	r0, #8
 8000ce2:	f7ff fee2 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f7ff fedf 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000cec:	2026      	movs	r0, #38	@ 0x26
 8000cee:	f7ff fedc 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000cf2:	202a      	movs	r0, #42	@ 0x2a
 8000cf4:	f7ff fed9 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000cf8:	20f3      	movs	r0, #243	@ 0xf3
 8000cfa:	f7ff fea7 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000cfe:	2043      	movs	r0, #67	@ 0x43
 8000d00:	f7ff fed3 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000d04:	2070      	movs	r0, #112	@ 0x70
 8000d06:	f7ff fed0 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000d0a:	2072      	movs	r0, #114	@ 0x72
 8000d0c:	f7ff fecd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000d10:	2036      	movs	r0, #54	@ 0x36
 8000d12:	f7ff feca 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000d16:	2037      	movs	r0, #55	@ 0x37
 8000d18:	f7ff fec7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000d1c:	206f      	movs	r0, #111	@ 0x6f
 8000d1e:	f7ff fec4 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000d22:	20ed      	movs	r0, #237	@ 0xed
 8000d24:	f7ff fe92 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000d28:	201b      	movs	r0, #27
 8000d2a:	f7ff febe 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000d2e:	200b      	movs	r0, #11
 8000d30:	f7ff febb 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000d34:	20ae      	movs	r0, #174	@ 0xae
 8000d36:	f7ff fe89 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000d3a:	2077      	movs	r0, #119	@ 0x77
 8000d3c:	f7ff feb5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000d40:	20cd      	movs	r0, #205	@ 0xcd
 8000d42:	f7ff fe83 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000d46:	2063      	movs	r0, #99	@ 0x63
 8000d48:	f7ff feaf 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000d4c:	2070      	movs	r0, #112	@ 0x70
 8000d4e:	f7ff fe7d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f7ff fea9 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d58:	2007      	movs	r0, #7
 8000d5a:	f7ff fea6 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff fea3 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000d64:	200e      	movs	r0, #14
 8000d66:	f7ff fea0 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff fe9d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000d70:	2009      	movs	r0, #9
 8000d72:	f7ff fe9a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f7ff fe97 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f7ff fe94 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff fe91 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000d88:	20e8      	movs	r0, #232	@ 0xe8
 8000d8a:	f7ff fe5f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000d8e:	2034      	movs	r0, #52	@ 0x34
 8000d90:	f7ff fe8b 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000d94:	2062      	movs	r0, #98	@ 0x62
 8000d96:	f7ff fe59 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000d9a:	2018      	movs	r0, #24
 8000d9c:	f7ff fe85 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000da0:	200d      	movs	r0, #13
 8000da2:	f7ff fe82 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000da6:	2071      	movs	r0, #113	@ 0x71
 8000da8:	f7ff fe7f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000dac:	20ed      	movs	r0, #237	@ 0xed
 8000dae:	f7ff fe7c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000db2:	2070      	movs	r0, #112	@ 0x70
 8000db4:	f7ff fe79 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000db8:	2070      	movs	r0, #112	@ 0x70
 8000dba:	f7ff fe76 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000dbe:	2018      	movs	r0, #24
 8000dc0:	f7ff fe73 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f7ff fe70 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000dca:	2071      	movs	r0, #113	@ 0x71
 8000dcc:	f7ff fe6d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000dd0:	20ef      	movs	r0, #239	@ 0xef
 8000dd2:	f7ff fe6a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000dd6:	2070      	movs	r0, #112	@ 0x70
 8000dd8:	f7ff fe67 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000ddc:	2070      	movs	r0, #112	@ 0x70
 8000dde:	f7ff fe64 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000de2:	2063      	movs	r0, #99	@ 0x63
 8000de4:	f7ff fe32 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000de8:	2018      	movs	r0, #24
 8000dea:	f7ff fe5e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000dee:	2011      	movs	r0, #17
 8000df0:	f7ff fe5b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000df4:	2071      	movs	r0, #113	@ 0x71
 8000df6:	f7ff fe58 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000dfa:	20f1      	movs	r0, #241	@ 0xf1
 8000dfc:	f7ff fe55 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e00:	2070      	movs	r0, #112	@ 0x70
 8000e02:	f7ff fe52 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e06:	2070      	movs	r0, #112	@ 0x70
 8000e08:	f7ff fe4f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000e0c:	2018      	movs	r0, #24
 8000e0e:	f7ff fe4c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000e12:	2013      	movs	r0, #19
 8000e14:	f7ff fe49 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000e18:	2071      	movs	r0, #113	@ 0x71
 8000e1a:	f7ff fe46 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000e1e:	20f3      	movs	r0, #243	@ 0xf3
 8000e20:	f7ff fe43 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e24:	2070      	movs	r0, #112	@ 0x70
 8000e26:	f7ff fe40 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e2a:	2070      	movs	r0, #112	@ 0x70
 8000e2c:	f7ff fe3d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000e30:	2064      	movs	r0, #100	@ 0x64
 8000e32:	f7ff fe0b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000e36:	2028      	movs	r0, #40	@ 0x28
 8000e38:	f7ff fe37 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000e3c:	2029      	movs	r0, #41	@ 0x29
 8000e3e:	f7ff fe34 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e42:	20f1      	movs	r0, #241	@ 0xf1
 8000e44:	f7ff fe31 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fe2e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e4e:	20f1      	movs	r0, #241	@ 0xf1
 8000e50:	f7ff fe2b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe28 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f7ff fe25 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000e60:	2066      	movs	r0, #102	@ 0x66
 8000e62:	f7ff fdf3 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000e66:	203c      	movs	r0, #60	@ 0x3c
 8000e68:	f7ff fe1f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe1c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000e72:	20cd      	movs	r0, #205	@ 0xcd
 8000e74:	f7ff fe19 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000e78:	2067      	movs	r0, #103	@ 0x67
 8000e7a:	f7ff fe16 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e7e:	2045      	movs	r0, #69	@ 0x45
 8000e80:	f7ff fe13 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e84:	2045      	movs	r0, #69	@ 0x45
 8000e86:	f7ff fe10 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f7ff fe0d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fe0a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe07 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe04 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000ea2:	2067      	movs	r0, #103	@ 0x67
 8000ea4:	f7ff fdd2 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fdfe 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000eae:	203c      	movs	r0, #60	@ 0x3c
 8000eb0:	f7ff fdfb 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fdf8 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fdf5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fdf2 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fdef 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000ecc:	2054      	movs	r0, #84	@ 0x54
 8000ece:	f7ff fdec 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000ed2:	2010      	movs	r0, #16
 8000ed4:	f7ff fde9 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f7ff fde6 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000ede:	2098      	movs	r0, #152	@ 0x98
 8000ee0:	f7ff fde3 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000ee4:	2074      	movs	r0, #116	@ 0x74
 8000ee6:	f7ff fdb1 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000eea:	2010      	movs	r0, #16
 8000eec:	f7ff fddd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000ef0:	2085      	movs	r0, #133	@ 0x85
 8000ef2:	f7ff fdda 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000ef6:	2080      	movs	r0, #128	@ 0x80
 8000ef8:	f7ff fdd7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fdd4 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fdd1 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000f08:	204e      	movs	r0, #78	@ 0x4e
 8000f0a:	f7ff fdce 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fdcb 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000f14:	2098      	movs	r0, #152	@ 0x98
 8000f16:	f7ff fd99 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000f1a:	203e      	movs	r0, #62	@ 0x3e
 8000f1c:	f7ff fdc5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000f20:	2007      	movs	r0, #7
 8000f22:	f7ff fdc2 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000f26:	2035      	movs	r0, #53	@ 0x35
 8000f28:	f7ff fd90 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000f2c:	2021      	movs	r0, #33	@ 0x21
 8000f2e:	f7ff fd8d 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000f32:	2011      	movs	r0, #17
 8000f34:	f7ff fd8a 	bl	8000a4c <GC9A01_write_command>
    HAL_Delay(120);
 8000f38:	2078      	movs	r0, #120	@ 0x78
 8000f3a:	f001 fe55 	bl	8002be8 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000f3e:	2029      	movs	r0, #41	@ 0x29
 8000f40:	f7ff fd84 	bl	8000a4c <GC9A01_write_command>
    HAL_Delay(20);
 8000f44:	2014      	movs	r0, #20
 8000f46:	f001 fe4f 	bl	8002be8 <HAL_Delay>
    
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	463b      	mov	r3, r7
 8000f56:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 8000f5a:	202a      	movs	r0, #42	@ 0x2a
 8000f5c:	f7ff fd76 	bl	8000a4c <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 8000f6a:	883b      	ldrh	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2104      	movs	r1, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd77 	bl	8000a7a <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 8000f8c:	202b      	movs	r0, #43	@ 0x2b
 8000f8e:	f7ff fd5d 	bl	8000a4c <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd5e 	bl	8000a7a <GC9A01_write_data>
    
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <GC9A01_sleep_mode>:


void GC9A01_sleep_mode(uint8_t command)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]

	if(command)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <GC9A01_sleep_mode+0x18>
		GC9A01_write_command(SLEEP_MODE_ON);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff fd38 	bl	8000a4c <GC9A01_write_command>
 8000fdc:	e002      	b.n	8000fe4 <GC9A01_sleep_mode+0x1e>
	else
		GC9A01_write_command(SLEEP_MODE_OFF);
 8000fde:	2011      	movs	r0, #17
 8000fe0:	f7ff fd34 	bl	8000a4c <GC9A01_write_command>

	HAL_Delay(120);
 8000fe4:	2078      	movs	r0, #120	@ 0x78
 8000fe6:	f001 fdff 	bl	8002be8 <HAL_Delay>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <GC9A01_spi_tx+0x30>)
 800100a:	f00a fa9f 	bl	800b54c <HAL_SPI_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <GC9A01_spi_tx+0x34>)
 8001014:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <GC9A01_spi_tx+0x34>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
		return;

}
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	24000178 	.word	0x24000178
 8001028:	24000080 	.word	0x24000080

0800102c <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800103a:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <JPEG_Decode_DMA+0x54>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8001040:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <JPEG_Decode_DMA+0x58>)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <JPEG_Decode_DMA+0x5c>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800104c:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <JPEG_Decode_DMA+0x60>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]

  Jpeg_HWDecodingEnd = 0;
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <JPEG_Decode_DMA+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <JPEG_Decode_DMA+0x54>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <JPEG_Decode_DMA+0x58>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f003 fc06 	bl	8004882 <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 8001076:	2300      	movs	r3, #0
  
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2400008c 	.word	0x2400008c
 8001084:	24000088 	.word	0x24000088
 8001088:	24000094 	.word	0x24000094
 800108c:	24000090 	.word	0x24000090
 8001090:	24000084 	.word	0x24000084

08001094 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_JPEG_GetDataCallback+0x70>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <HAL_JPEG_GetDataCallback+0x70>)
 80010a8:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_JPEG_GetDataCallback+0x70>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_JPEG_GetDataCallback+0x74>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d218      	bcs.n	80010e8 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_JPEG_GetDataCallback+0x78>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	4a13      	ldr	r2, [pc, #76]	@ (800110c <HAL_JPEG_GetDataCallback+0x78>)
 80010c0:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_JPEG_GetDataCallback+0x74>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_JPEG_GetDataCallback+0x70>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d0:	d303      	bcc.n	80010da <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 80010d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e008      	b.n	80010ec <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_JPEG_GetDataCallback+0x74>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_JPEG_GetDataCallback+0x70>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e001      	b.n	80010ec <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_JPEG_GetDataCallback+0x78>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f003 fc27 	bl	8004948 <HAL_JPEG_ConfigInputBuffer>
  
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000094 	.word	0x24000094
 8001108:	24000090 	.word	0x24000090
 800110c:	2400008c 	.word	0x2400008c

08001110 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_JPEG_DataReadyCallback+0x30>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_JPEG_DataReadyCallback+0x30>)
 8001126:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_JPEG_DataReadyCallback+0x30>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001130:	4619      	mov	r1, r3
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f003 fc1a 	bl	800496c <HAL_JPEG_ConfigOutputBuffer>
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	24000088 	.word	0x24000088

08001144 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800114c:	f000 fb34 	bl	80017b8 <Error_Handler>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	24000084 	.word	0x24000084

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800117e:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <main+0x104>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11b      	bne.n	80011c2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
}
 800118e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001190:	f3bf 8f6f 	isb	sy
}
 8001194:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001196:	4b39      	ldr	r3, [pc, #228]	@ (800127c <main+0x104>)
 8001198:	2200      	movs	r2, #0
 800119a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800119e:	f3bf 8f4f 	dsb	sy
}
 80011a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011a4:	f3bf 8f6f 	isb	sy
}
 80011a8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <main+0x104>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a33      	ldr	r2, [pc, #204]	@ (800127c <main+0x104>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011b6:	f3bf 8f4f 	dsb	sy
}
 80011ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011bc:	f3bf 8f6f 	isb	sy
}
 80011c0:	e000      	b.n	80011c4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011c2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <main+0x104>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d138      	bne.n	8001242 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <main+0x104>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011d8:	f3bf 8f4f 	dsb	sy
}
 80011dc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011de:	4b27      	ldr	r3, [pc, #156]	@ (800127c <main+0x104>)
 80011e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011e4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	0b5b      	lsrs	r3, r3, #13
 80011ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ee:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011f8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	015a      	lsls	r2, r3, #5
 80011fe:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001202:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001208:	491c      	ldr	r1, [pc, #112]	@ (800127c <main+0x104>)
 800120a:	4313      	orrs	r3, r2
 800120c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1ef      	bne.n	80011fa <main+0x82>
    } while(sets-- != 0U);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e5      	bne.n	80011f0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001224:	f3bf 8f4f 	dsb	sy
}
 8001228:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <main+0x104>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a13      	ldr	r2, [pc, #76]	@ (800127c <main+0x104>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001234:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001236:	f3bf 8f4f 	dsb	sy
}
 800123a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800123c:	f3bf 8f6f 	isb	sy
}
 8001240:	e000      	b.n	8001244 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001242:	bf00      	nop
  SCB_EnableICache();
  SCB_EnableDCache();
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f001 fc3e 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f81a 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f000 f9fe 	bl	800164c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001250:	f000 f896 	bl	8001380 <MX_ADC1_Init>
  MX_DMA2D_Init();
 8001254:	f000 f90e 	bl	8001474 <MX_DMA2D_Init>
  MX_JPEG_Init();
 8001258:	f000 f946 	bl	80014e8 <MX_JPEG_Init>
  MX_RTC_Init();
 800125c:	f000 f958 	bl	8001510 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8001260:	f000 f980 	bl	8001564 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001264:	f000 f99c 	bl	80015a0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001268:	f00b fa12 	bl	800c690 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  GC9A01_init();
 800126c:	f7ff fc2b 	bl	8000ac6 <GC9A01_init>
  /* USER CODE END 2 */

  // Application initialization
  smart_watch_init();
 8001270:	f000 faa8 	bl	80017c4 <smart_watch_init>

  // Application process
  smart_watch_process();
 8001274:	f000 fad2 	bl	800181c <smart_watch_process>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1);
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <main+0x100>
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b09c      	sub	sp, #112	@ 0x70
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128a:	224c      	movs	r2, #76	@ 0x4c
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f00e fce8 	bl	800fc64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f00e fce2 	bl	800fc64 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <SystemClock_Config+0xf8>)
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012aa:	2002      	movs	r0, #2
 80012ac:	f004 fdec 	bl	8005e88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4b31      	ldr	r3, [pc, #196]	@ (800137c <SystemClock_Config+0xfc>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012bc:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <SystemClock_Config+0xfc>)
 80012be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <SystemClock_Config+0xfc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012d0:	bf00      	nop
 80012d2:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <SystemClock_Config+0xfc>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012de:	d1f8      	bne.n	80012d2 <SystemClock_Config+0x52>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012e0:	f004 fd8c 	bl	8005dfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012e4:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <SystemClock_Config+0xf8>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e8:	4a23      	ldr	r2, [pc, #140]	@ (8001378 <SystemClock_Config+0xf8>)
 80012ea:	f023 0318 	bic.w	r3, r3, #24
 80012ee:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80012f0:	2305      	movs	r3, #5
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fe:	2302      	movs	r3, #2
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	2302      	movs	r3, #2
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001306:	2302      	movs	r3, #2
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800130a:	2320      	movs	r3, #32
 800130c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800131a:	230c      	movs	r3, #12
 800131c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800131e:	2300      	movs	r3, #0
 8001320:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fde6 	bl	8005efc <HAL_RCC_OscConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001336:	f000 fa3f 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133a:	233f      	movs	r3, #63	@ 0x3f
 800133c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133e:	2303      	movs	r3, #3
 8001340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800134a:	2340      	movs	r3, #64	@ 0x40
 800134c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800134e:	2340      	movs	r3, #64	@ 0x40
 8001350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001356:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001358:	2340      	movs	r3, #64	@ 0x40
 800135a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2105      	movs	r1, #5
 8001360:	4618      	mov	r0, r3
 8001362:	f005 f9fd 	bl	8006760 <HAL_RCC_ClockConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800136c:	f000 fa24 	bl	80017b8 <Error_Handler>
  }
}
 8001370:	bf00      	nop
 8001372:	3770      	adds	r7, #112	@ 0x70
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	58024800 	.word	0x58024800

08001380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a4:	4b30      	ldr	r3, [pc, #192]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013a6:	4a31      	ldr	r2, [pc, #196]	@ (800146c <MX_ADC1_Init+0xec>)
 80013a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80013aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013be:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013c4:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ca:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80013d0:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <MX_ADC1_Init+0xe8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001402:	4819      	ldr	r0, [pc, #100]	@ (8001468 <MX_ADC1_Init+0xe8>)
 8001404:	f001 fdc0 	bl	8002f88 <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800140e:	f000 f9d3 	bl	80017b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	4812      	ldr	r0, [pc, #72]	@ (8001468 <MX_ADC1_Init+0xe8>)
 800141e:	f002 faeb 	bl	80039f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001428:	f000 f9c6 	bl	80017b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_ADC1_Init+0xf0>)
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001430:	2306      	movs	r3, #6
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001438:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800143c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800143e:	2304      	movs	r3, #4
 8001440:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <MX_ADC1_Init+0xe8>)
 8001450:	f001 fef4 	bl	800323c <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800145a:	f000 f9ad 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	24000098 	.word	0x24000098
 800146c:	40022000 	.word	0x40022000
 8001470:	43210000 	.word	0x43210000

08001474 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  DMA2D_Handle.Instance = DMA2D;
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 800147a:	4a1a      	ldr	r2, [pc, #104]	@ (80014e4 <MX_DMA2D_Init+0x70>)
 800147c:	601a      	str	r2, [r3, #0]
  DMA2D_Handle.Init.Mode = DMA2D_M2M;
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = 0;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.LayerCfg[1].InputOffset = 0;
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 8001498:	2200      	movs	r2, #0
 800149a:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800149c:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 80014ba:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 80014bc:	f002 fc1c 	bl	8003cf8 <HAL_DMA2D_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014c6:	f000 f977 	bl	80017b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 80014ca:	2101      	movs	r1, #1
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_DMA2D_Init+0x6c>)
 80014ce:	f002 fd8b 	bl	8003fe8 <HAL_DMA2D_ConfigLayer>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80014d8:	f000 f96e 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24000258 	.word	0x24000258
 80014e4:	52001000 	.word	0x52001000

080014e8 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  JPEG_Handle.Instance = JPEG;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_JPEG_Init+0x20>)
 80014ee:	4a07      	ldr	r2, [pc, #28]	@ (800150c <MX_JPEG_Init+0x24>)
 80014f0:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_JPEG_Init+0x20>)
 80014f4:	f003 f8ae 	bl	8004654 <HAL_JPEG_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80014fe:	f000 f95b 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	24000200 	.word	0x24000200
 800150c:	52003000 	.word	0x52003000

08001510 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_RTC_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_RTC_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_RTC_Init+0x4c>)
 800151c:	2240      	movs	r2, #64	@ 0x40
 800151e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_RTC_Init+0x4c>)
 8001522:	227f      	movs	r2, #127	@ 0x7f
 8001524:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <MX_RTC_Init+0x4c>)
 8001528:	22ff      	movs	r2, #255	@ 0xff
 800152a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_RTC_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <MX_RTC_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_RTC_Init+0x4c>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_RTC_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_RTC_Init+0x4c>)
 8001548:	f008 f88a 	bl	8009660 <HAL_RTC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 f931 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	240002d4 	.word	0x240002d4
 8001560:	58004000 	.word	0x58004000

08001564 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_SDMMC1_SD_Init+0x34>)
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <MX_SDMMC1_SD_Init+0x38>)
 800156c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <MX_SDMMC1_SD_Init+0x34>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_SDMMC1_SD_Init+0x34>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <MX_SDMMC1_SD_Init+0x34>)
 800157c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001580:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <MX_SDMMC1_SD_Init+0x34>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <MX_SDMMC1_SD_Init+0x34>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	240000fc 	.word	0x240000fc
 800159c:	52007000 	.word	0x52007000

080015a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015a6:	4a28      	ldr	r2, [pc, #160]	@ (8001648 <MX_SPI1_Init+0xa8>)
 80015a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015b4:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80015b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015bc:	2207      	movs	r2, #7
 80015be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_SPI1_Init+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MX_SPI1_Init+0xa4>)
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_SPI1_Init+0xa4>)
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <MX_SPI1_Init+0xa4>)
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_SPI1_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <MX_SPI1_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_SPI1_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <MX_SPI1_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_SPI1_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	@ (8001644 <MX_SPI1_Init+0xa4>)
 8001632:	f009 fe67 	bl	800b304 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800163c:	f000 f8bc 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24000178 	.word	0x24000178
 8001648:	40013000 	.word	0x40013000

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b51      	ldr	r3, [pc, #324]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 8001664:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001668:	4a4f      	ldr	r2, [pc, #316]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001672:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 8001674:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001680:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 8001682:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001686:	4a48      	ldr	r2, [pc, #288]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001690:	4b45      	ldr	r3, [pc, #276]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 8001692:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b42      	ldr	r3, [pc, #264]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016a4:	4a40      	ldr	r2, [pc, #256]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016c2:	4a39      	ldr	r2, [pc, #228]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016cc:	4b36      	ldr	r3, [pc, #216]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016e0:	4a31      	ldr	r2, [pc, #196]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016ea:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <MX_GPIO_Init+0x15c>)
 80016ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SET_BTN_GPIO_Port, SET_BTN_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2102      	movs	r1, #2
 80016fc:	482b      	ldr	r0, [pc, #172]	@ (80017ac <MX_GPIO_Init+0x160>)
 80016fe:	f002 ff8f 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2104      	movs	r1, #4
 8001706:	482a      	ldr	r0, [pc, #168]	@ (80017b0 <MX_GPIO_Init+0x164>)
 8001708:	f002 ff8a 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f240 4107 	movw	r1, #1031	@ 0x407
 8001712:	4828      	ldr	r0, [pc, #160]	@ (80017b4 <MX_GPIO_Init+0x168>)
 8001714:	f002 ff84 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PLUS_BTN_Pin MINUS_BTN_Pin */
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|MINUS_BTN_Pin;
 8001718:	2305      	movs	r3, #5
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4820      	ldr	r0, [pc, #128]	@ (80017ac <MX_GPIO_Init+0x160>)
 800172c:	f002 fdb0 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_BTN_Pin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 8001730:	2302      	movs	r3, #2
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4819      	ldr	r0, [pc, #100]	@ (80017ac <MX_GPIO_Init+0x160>)
 8001748:	f002 fda2 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP1_Pin */
  GPIO_InitStruct.Pin = TP1_Pin;
 800174c:	2304      	movs	r3, #4
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4813      	ldr	r0, [pc, #76]	@ (80017b0 <MX_GPIO_Init+0x164>)
 8001764:	f002 fd94 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_CS_Pin GC9A01_DC_Pin GC9A01_RST_Pin GC9A01_BL_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 8001768:	f240 4307 	movw	r3, #1031	@ 0x407
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <MX_GPIO_Init+0x168>)
 8001782:	f002 fd85 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pin : USD_DETECT_Pin */
  GPIO_InitStruct.Pin = USD_DETECT_Pin;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_GPIO_Init+0x164>)
 800179c:	f002 fd78 	bl	8004290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58024400 	.word	0x58024400
 80017ac:	58020800 	.word	0x58020800
 80017b0:	58020000 	.word	0x58020000
 80017b4:	58020400 	.word	0x58020400

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <Error_Handler+0x8>

080017c4 <smart_watch_init>:
// Output data buffer (format RGB565)
uint8_t output_data[100*1024];


void smart_watch_init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

	parameters_reset();
 80017c8:	f000 fc72 	bl	80020b0 <parameters_reset>

	// First time setting
	video.video_mode = SETTING_MODE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <smart_watch_init+0x48>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80017d4:	490e      	ldr	r1, [pc, #56]	@ (8001810 <smart_watch_init+0x4c>)
 80017d6:	480f      	ldr	r0, [pc, #60]	@ (8001814 <smart_watch_init+0x50>)
 80017d8:	f00e f866 	bl	800f8a8 <FATFS_LinkDriver>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d111      	bne.n	8001806 <smart_watch_init+0x42>
	{

		// Init the SD Card
	    SD_Initialize();
 80017e2:	f000 fe3f 	bl	8002464 <SD_Initialize>

	    if(BSP_SD_IsDetected())
 80017e6:	f00a ffed 	bl	800c7c4 <BSP_SD_IsDetected>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <smart_watch_init+0x40>
	    {

	      // Register the file system object to the FatFs module
	      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80017f0:	2200      	movs	r2, #0
 80017f2:	4907      	ldr	r1, [pc, #28]	@ (8001810 <smart_watch_init+0x4c>)
 80017f4:	4808      	ldr	r0, [pc, #32]	@ (8001818 <smart_watch_init+0x54>)
 80017f6:	f00d fa0b 	bl	800ec10 <f_mount>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <smart_watch_init+0x44>
	      {

	    	  while(1);
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <smart_watch_init+0x3c>

	    }
	    else
  		{

  			while(1);
 8001804:	e7fe      	b.n	8001804 <smart_watch_init+0x40>

  	}
	else
	{

		while(1);
 8001806:	e7fe      	b.n	8001806 <smart_watch_init+0x42>

	}

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	240187b8 	.word	0x240187b8
 8001810:	24063810 	.word	0x24063810
 8001814:	08010718 	.word	0x08010718
 8001818:	2401830c 	.word	0x2401830c

0800181c <smart_watch_process>:


void smart_watch_process(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

	while(1)
	{

		// Check if new file needs to be open
		file_handler(0);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 fb0b 	bl	8001e3c <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 8001826:	f000 f807 	bl	8001838 <mjpeg_video_processing>

		// Check for user buttons pressed
		user_buttons_handler();
 800182a:	f000 fb85 	bl	8001f38 <user_buttons_handler>

		// Battery management
		battery_management();
 800182e:	f000 fbc1 	bl	8001fb4 <battery_management>
		file_handler(0);
 8001832:	bf00      	nop
 8001834:	e7f4      	b.n	8001820 <smart_watch_process+0x4>
	...

08001838 <mjpeg_video_processing>:

////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void mjpeg_video_processing(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <mjpeg_video_processing+0x20>)
 800183e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001842:	2b01      	cmp	r3, #1
 8001844:	d002      	beq.n	800184c <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 8001846:	f000 f809 	bl	800185c <clock_setting>

			break;
 800184a:	e002      	b.n	8001852 <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 800184c:	f000 f914 	bl	8001a78 <clock_normal>

			break;
 8001850:	bf00      	nop

	}

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240187b8 	.word	0x240187b8

0800185c <clock_setting>:


static void clock_setting(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

	switch(video.set)
 8001860:	4b81      	ldr	r3, [pc, #516]	@ (8001a68 <clock_setting+0x20c>)
 8001862:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001866:	2b03      	cmp	r3, #3
 8001868:	f000 80ed 	beq.w	8001a46 <clock_setting+0x1ea>
 800186c:	2b03      	cmp	r3, #3
 800186e:	dc03      	bgt.n	8001878 <clock_setting+0x1c>
 8001870:	2b01      	cmp	r3, #1
 8001872:	d00e      	beq.n	8001892 <clock_setting+0x36>
 8001874:	2b02      	cmp	r3, #2
 8001876:	d06d      	beq.n	8001954 <clock_setting+0xf8>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 8001878:	bf00      	nop
 800187a:	2102      	movs	r1, #2
 800187c:	487b      	ldr	r0, [pc, #492]	@ (8001a6c <clock_setting+0x210>)
 800187e:	f002 feb7 	bl	80045f0 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f8      	beq.n	800187a <clock_setting+0x1e>

			video.set = SET_HOURS;
 8001888:	4b77      	ldr	r3, [pc, #476]	@ (8001a68 <clock_setting+0x20c>)
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			break;
 8001890:	e0e8      	b.n	8001a64 <clock_setting+0x208>

		case SET_HOURS:

			show_frame(0);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 fa0e 	bl	8001cb4 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 8001898:	2101      	movs	r1, #1
 800189a:	4874      	ldr	r0, [pc, #464]	@ (8001a6c <clock_setting+0x210>)
 800189c:	f002 fea8 	bl	80045f0 <HAL_GPIO_ReadPin>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d122      	bne.n	80018ec <clock_setting+0x90>
			{

				HAL_Delay(200);
 80018a6:	20c8      	movs	r0, #200	@ 0xc8
 80018a8:	f001 f99e 	bl	8002be8 <HAL_Delay>

				video.time.Hours++;
 80018ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001a68 <clock_setting+0x20c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <clock_setting+0x20c>)
 80018b6:	701a      	strb	r2, [r3, #0]
				video.time.Hours %= 12;
 80018b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a68 <clock_setting+0x20c>)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a70 <clock_setting+0x214>)
 80018be:	fba3 1302 	umull	r1, r3, r3, r2
 80018c2:	08d9      	lsrs	r1, r3, #3
 80018c4:	460b      	mov	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	440b      	add	r3, r1
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <clock_setting+0x20c>)
 80018d2:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 80018d4:	4b64      	ldr	r3, [pc, #400]	@ (8001a68 <clock_setting+0x20c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b61      	ldr	r3, [pc, #388]	@ (8001a68 <clock_setting+0x20c>)
 80018e4:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 faa8 	bl	8001e3c <file_handler>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 80018ec:	2104      	movs	r1, #4
 80018ee:	485f      	ldr	r0, [pc, #380]	@ (8001a6c <clock_setting+0x210>)
 80018f0:	f002 fe7e 	bl	80045f0 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11c      	bne.n	8001934 <clock_setting+0xd8>
			{

				HAL_Delay(200);
 80018fa:	20c8      	movs	r0, #200	@ 0xc8
 80018fc:	f001 f974 	bl	8002be8 <HAL_Delay>

				if(video.time.Hours > 0)
 8001900:	4b59      	ldr	r3, [pc, #356]	@ (8001a68 <clock_setting+0x20c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <clock_setting+0xba>
					video.time.Hours--;
 8001908:	4b57      	ldr	r3, [pc, #348]	@ (8001a68 <clock_setting+0x20c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b55      	ldr	r3, [pc, #340]	@ (8001a68 <clock_setting+0x20c>)
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e002      	b.n	800191c <clock_setting+0xc0>
				else
					video.time.Hours = 11;
 8001916:	4b54      	ldr	r3, [pc, #336]	@ (8001a68 <clock_setting+0x20c>)
 8001918:	220b      	movs	r2, #11
 800191a:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800191c:	4b52      	ldr	r3, [pc, #328]	@ (8001a68 <clock_setting+0x20c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a68 <clock_setting+0x20c>)
 800192c:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fa84 	bl	8001e3c <file_handler>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8001934:	2102      	movs	r1, #2
 8001936:	484d      	ldr	r0, [pc, #308]	@ (8001a6c <clock_setting+0x210>)
 8001938:	f002 fe5a 	bl	80045f0 <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 808d 	bne.w	8001a5e <clock_setting+0x202>
			{

				HAL_Delay(200);
 8001944:	20c8      	movs	r0, #200	@ 0xc8
 8001946:	f001 f94f 	bl	8002be8 <HAL_Delay>

				video.set = SET_MINUTES;
 800194a:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <clock_setting+0x20c>)
 800194c:	2202      	movs	r2, #2
 800194e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 8001952:	e084      	b.n	8001a5e <clock_setting+0x202>

		case SET_MINUTES:

			show_frame(0);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 f9ad 	bl	8001cb4 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 800195a:	2101      	movs	r1, #1
 800195c:	4843      	ldr	r0, [pc, #268]	@ (8001a6c <clock_setting+0x210>)
 800195e:	f002 fe47 	bl	80045f0 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d129      	bne.n	80019bc <clock_setting+0x160>
			{

				HAL_Delay(200);
 8001968:	20c8      	movs	r0, #200	@ 0xc8
 800196a:	f001 f93d 	bl	8002be8 <HAL_Delay>

				video.time.Minutes++;
 800196e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <clock_setting+0x20c>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <clock_setting+0x20c>)
 8001978:	705a      	strb	r2, [r3, #1]
				video.time.Minutes %= 60;
 800197a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <clock_setting+0x20c>)
 800197c:	785a      	ldrb	r2, [r3, #1]
 800197e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <clock_setting+0x218>)
 8001980:	fba3 1302 	umull	r1, r3, r3, r2
 8001984:	0959      	lsrs	r1, r3, #5
 8001986:	460b      	mov	r3, r1
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a5b      	subs	r3, r3, r1
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <clock_setting+0x20c>)
 8001994:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 8001996:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <clock_setting+0x20c>)
 8001998:	8a9b      	ldrh	r3, [r3, #20]
 800199a:	4a33      	ldr	r2, [pc, #204]	@ (8001a68 <clock_setting+0x20c>)
 800199c:	7852      	ldrb	r2, [r2, #1]
 800199e:	4413      	add	r3, r2
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <clock_setting+0x20c>)
 80019a4:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fa48 	bl	8001e3c <file_handler>

				video.file_idx -= video.time.Minutes;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <clock_setting+0x20c>)
 80019ae:	8a9b      	ldrh	r3, [r3, #20]
 80019b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <clock_setting+0x20c>)
 80019b2:	7852      	ldrb	r2, [r2, #1]
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <clock_setting+0x20c>)
 80019ba:	829a      	strh	r2, [r3, #20]


			}

			// If button minus
			if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 80019bc:	2104      	movs	r1, #4
 80019be:	482b      	ldr	r0, [pc, #172]	@ (8001a6c <clock_setting+0x210>)
 80019c0:	f002 fe16 	bl	80045f0 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d123      	bne.n	8001a12 <clock_setting+0x1b6>
			{

				HAL_Delay(200);
 80019ca:	20c8      	movs	r0, #200	@ 0xc8
 80019cc:	f001 f90c 	bl	8002be8 <HAL_Delay>

				if(video.time.Minutes > 0)
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <clock_setting+0x20c>)
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <clock_setting+0x18a>
					video.time.Minutes--;
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <clock_setting+0x20c>)
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <clock_setting+0x20c>)
 80019e2:	705a      	strb	r2, [r3, #1]
 80019e4:	e002      	b.n	80019ec <clock_setting+0x190>
				else
					video.time.Minutes = 59;
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <clock_setting+0x20c>)
 80019e8:	223b      	movs	r2, #59	@ 0x3b
 80019ea:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <clock_setting+0x20c>)
 80019ee:	8a9b      	ldrh	r3, [r3, #20]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <clock_setting+0x20c>)
 80019f2:	7852      	ldrb	r2, [r2, #1]
 80019f4:	4413      	add	r3, r2
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <clock_setting+0x20c>)
 80019fa:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 fa1d 	bl	8001e3c <file_handler>

				video.file_idx -= video.time.Minutes;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <clock_setting+0x20c>)
 8001a04:	8a9b      	ldrh	r3, [r3, #20]
 8001a06:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <clock_setting+0x20c>)
 8001a08:	7852      	ldrb	r2, [r2, #1]
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <clock_setting+0x20c>)
 8001a10:	829a      	strh	r2, [r3, #20]

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8001a12:	2102      	movs	r1, #2
 8001a14:	4815      	ldr	r0, [pc, #84]	@ (8001a6c <clock_setting+0x210>)
 8001a16:	f002 fdeb 	bl	80045f0 <HAL_GPIO_ReadPin>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d120      	bne.n	8001a62 <clock_setting+0x206>
			{

				HAL_Delay(200);
 8001a20:	20c8      	movs	r0, #200	@ 0xc8
 8001a22:	f001 f8e1 	bl	8002be8 <HAL_Delay>

				video.file_idx += video.time.Minutes;
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <clock_setting+0x20c>)
 8001a28:	8a9b      	ldrh	r3, [r3, #20]
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <clock_setting+0x20c>)
 8001a2c:	7852      	ldrb	r2, [r2, #1]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <clock_setting+0x20c>)
 8001a34:	829a      	strh	r2, [r3, #20]

				video.isfirstFrame = 1;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <clock_setting+0x20c>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	759a      	strb	r2, [r3, #22]

				video.set = SET_START;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <clock_setting+0x20c>)
 8001a3e:	2203      	movs	r2, #3
 8001a40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 8001a44:	e00d      	b.n	8001a62 <clock_setting+0x206>

		case SET_START:

			file_handler(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 f9f8 	bl	8001e3c <file_handler>

			video.set = SET_IDLE;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <clock_setting+0x20c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			video.video_mode = NORMAL_MODE;
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <clock_setting+0x20c>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			break;
 8001a5c:	e002      	b.n	8001a64 <clock_setting+0x208>
			break;
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <clock_setting+0x208>
			break;
 8001a62:	bf00      	nop

	}

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	240187b8 	.word	0x240187b8
 8001a6c:	58020800 	.word	0x58020800
 8001a70:	aaaaaaab 	.word	0xaaaaaaab
 8001a74:	88888889 	.word	0x88888889

08001a78 <clock_normal>:


static void clock_normal(void)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af02      	add	r7, sp, #8

	if(video.display_status == DISPLAY_OFF)
 8001a7e:	4b84      	ldr	r3, [pc, #528]	@ (8001c90 <clock_normal+0x218>)
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80fa 	beq.w	8001c7e <clock_normal+0x206>
		return;

	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4981      	ldr	r1, [pc, #516]	@ (8001c94 <clock_normal+0x21c>)
 8001a8e:	4882      	ldr	r0, [pc, #520]	@ (8001c98 <clock_normal+0x220>)
 8001a90:	f7fe feda 	bl	8000848 <AVI_GetFrame>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b7d      	ldr	r3, [pc, #500]	@ (8001c90 <clock_normal+0x218>)
 8001a9a:	75da      	strb	r2, [r3, #23]


	if(video.frameToSkip > 0)
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c90 <clock_normal+0x218>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd0f      	ble.n	8001ac4 <clock_normal+0x4c>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 8001aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8001c90 <clock_normal+0x218>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a79      	ldr	r2, [pc, #484]	@ (8001c90 <clock_normal+0x218>)
 8001aac:	6253      	str	r3, [r2, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 8001aae:	4b7a      	ldr	r3, [pc, #488]	@ (8001c98 <clock_normal+0x220>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a78      	ldr	r2, [pc, #480]	@ (8001c98 <clock_normal+0x220>)
 8001ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001ab8:	4b75      	ldr	r3, [pc, #468]	@ (8001c90 <clock_normal+0x218>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a74      	ldr	r2, [pc, #464]	@ (8001c90 <clock_normal+0x218>)
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	e08a      	b.n	8001bda <clock_normal+0x162>

	}
	else if(video.FrameType == AVI_VIDEO_FRAME)
 8001ac4:	4b72      	ldr	r3, [pc, #456]	@ (8001c90 <clock_normal+0x218>)
 8001ac6:	7ddb      	ldrb	r3, [r3, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	f040 8086 	bne.w	8001bda <clock_normal+0x162>
	{

		AVI_Handel.CurrentImage++;
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <clock_normal+0x220>)
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	4a70      	ldr	r2, [pc, #448]	@ (8001c98 <clock_normal+0x220>)
 8001ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001ad8:	4b6d      	ldr	r3, [pc, #436]	@ (8001c90 <clock_normal+0x218>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a6c      	ldr	r2, [pc, #432]	@ (8001c90 <clock_normal+0x218>)
 8001ae0:	6213      	str	r3, [r2, #32]

		// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8001ae2:	496e      	ldr	r1, [pc, #440]	@ (8001c9c <clock_normal+0x224>)
 8001ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c98 <clock_normal+0x220>)
 8001ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae8:	4b69      	ldr	r3, [pc, #420]	@ (8001c90 <clock_normal+0x218>)
 8001aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aec:	486c      	ldr	r0, [pc, #432]	@ (8001ca0 <clock_normal+0x228>)
 8001aee:	f7ff fa9d 	bl	800102c <JPEG_Decode_DMA>

		while(Jpeg_HWDecodingEnd == 0);
 8001af2:	bf00      	nop
 8001af4:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca4 <clock_normal+0x22c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0fb      	beq.n	8001af4 <clock_normal+0x7c>

		if(video.isfirstFrame == 1)
 8001afc:	4b64      	ldr	r3, [pc, #400]	@ (8001c90 <clock_normal+0x218>)
 8001afe:	7d9b      	ldrb	r3, [r3, #22]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d143      	bne.n	8001b8c <clock_normal+0x114>
		{

			video.isfirstFrame = 0;
 8001b04:	4b62      	ldr	r3, [pc, #392]	@ (8001c90 <clock_normal+0x218>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	759a      	strb	r2, [r3, #22]

			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8001b0a:	4967      	ldr	r1, [pc, #412]	@ (8001ca8 <clock_normal+0x230>)
 8001b0c:	4864      	ldr	r0, [pc, #400]	@ (8001ca0 <clock_normal+0x228>)
 8001b0e:	f002 fe23 	bl	8004758 <HAL_JPEG_GetInfo>

			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001b12:	4b65      	ldr	r3, [pc, #404]	@ (8001ca8 <clock_normal+0x230>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4a63      	ldr	r2, [pc, #396]	@ (8001ca8 <clock_normal+0x230>)
 8001b1a:	6892      	ldr	r2, [r2, #8]
 8001b1c:	b291      	uxth	r1, r2
 8001b1e:	4a62      	ldr	r2, [pc, #392]	@ (8001ca8 <clock_normal+0x230>)
 8001b20:	6852      	ldr	r2, [r2, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fbe6 	bl	80022f4 <DMA2D_Init>

			video.width = JPEG_Info.ImageWidth;
 8001b28:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca8 <clock_normal+0x230>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b58      	ldr	r3, [pc, #352]	@ (8001c90 <clock_normal+0x218>)
 8001b30:	831a      	strh	r2, [r3, #24]
			video.height = JPEG_Info.ImageHeight;
 8001b32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca8 <clock_normal+0x230>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <clock_normal+0x218>)
 8001b3a:	835a      	strh	r2, [r3, #26]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 8001b3c:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <clock_normal+0x218>)
 8001b3e:	8b1b      	ldrh	r3, [r3, #24]
 8001b40:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da00      	bge.n	8001b4a <clock_normal+0xd2>
 8001b48:	3301      	adds	r3, #1
 8001b4a:	105b      	asrs	r3, r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b50      	ldr	r3, [pc, #320]	@ (8001c90 <clock_normal+0x218>)
 8001b50:	839a      	strh	r2, [r3, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8001b52:	4b4f      	ldr	r3, [pc, #316]	@ (8001c90 <clock_normal+0x218>)
 8001b54:	8b5b      	ldrh	r3, [r3, #26]
 8001b56:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da00      	bge.n	8001b60 <clock_normal+0xe8>
 8001b5e:	3301      	adds	r3, #1
 8001b60:	105b      	asrs	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <clock_normal+0x218>)
 8001b66:	83da      	strh	r2, [r3, #30]

			video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 8001b68:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <clock_normal+0x220>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b48      	ldr	r3, [pc, #288]	@ (8001c90 <clock_normal+0x218>)
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28

			video.tick_offset = HAL_GetTick();
 8001b72:	f001 f82d 	bl	8002bd0 <HAL_GetTick>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a45      	ldr	r2, [pc, #276]	@ (8001c90 <clock_normal+0x218>)
 8001b7a:	6313      	str	r3, [r2, #48]	@ 0x30
			video.frameCount = 1;
 8001b7c:	4b44      	ldr	r3, [pc, #272]	@ (8001c90 <clock_normal+0x218>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	621a      	str	r2, [r3, #32]

			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8001b82:	2200      	movs	r2, #0
 8001b84:	4942      	ldr	r1, [pc, #264]	@ (8001c90 <clock_normal+0x218>)
 8001b86:	4849      	ldr	r0, [pc, #292]	@ (8001cac <clock_normal+0x234>)
 8001b88:	f007 fdf0 	bl	800976c <HAL_RTC_SetTime>

		}

		// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)output_data, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001b8c:	4b40      	ldr	r3, [pc, #256]	@ (8001c90 <clock_normal+0x218>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	4618      	mov	r0, r3
 8001b92:	4b45      	ldr	r3, [pc, #276]	@ (8001ca8 <clock_normal+0x230>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <clock_normal+0x230>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4944      	ldr	r1, [pc, #272]	@ (8001cb0 <clock_normal+0x238>)
 8001ba0:	f000 fc26 	bl	80023f0 <DMA2D_CopyBuffer>

		//video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;

		// Implements the data conversion from RGB888 to RGB565
		doubleFormat pOut;
		pOut.u8Arr = (uint8_t *)output_data;
 8001ba4:	4b42      	ldr	r3, [pc, #264]	@ (8001cb0 <clock_normal+0x238>)
 8001ba6:	607b      	str	r3, [r7, #4]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8001ba8:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <clock_normal+0x218>)
 8001baa:	8b1a      	ldrh	r2, [r3, #24]
 8001bac:	4b38      	ldr	r3, [pc, #224]	@ (8001c90 <clock_normal+0x218>)
 8001bae:	8b5b      	ldrh	r3, [r3, #26]
 8001bb0:	fb12 f303 	smulbb	r3, r2, r3
 8001bb4:	b299      	uxth	r1, r3
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2203      	movs	r2, #3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fabe 	bl	800213c <depth24To16>

		// Display the image
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 8001bc0:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <clock_normal+0x218>)
 8001bc2:	8b98      	ldrh	r0, [r3, #28]
 8001bc4:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <clock_normal+0x218>)
 8001bc6:	8bd9      	ldrh	r1, [r3, #30]
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <clock_normal+0x218>)
 8001bca:	8b1a      	ldrh	r2, [r3, #24]
 8001bcc:	4b30      	ldr	r3, [pc, #192]	@ (8001c90 <clock_normal+0x218>)
 8001bce:	8b5c      	ldrh	r4, [r3, #26]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	f000 fb3b 	bl	8002250 <lcd_draw>
	}

	// Synchronization

	// Obtain the number of frames to skip the next cycle
	video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8001bda:	f000 fff9 	bl	8002bd0 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c90 <clock_normal+0x218>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c90 <clock_normal+0x218>)
 8001be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	float watch_time = ( video.frameCount * ( video.frame_time / 1000.0 ) );
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <clock_normal+0x218>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <clock_normal+0x218>)
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001c02:	ed9f 4b21 	vldr	d4, [pc, #132]	@ 8001c88 <clock_normal+0x210>
 8001c06:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001c0a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c12:	edc7 7a03 	vstr	s15, [r7, #12]
	video.frameToSkip = ( ( video.actual_time - watch_time ) / ( video.frame_time / 1000.0 ) );
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <clock_normal+0x218>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <clock_normal+0x218>)
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c3a:	ed9f 4b13 	vldr	d4, [pc, #76]	@ 8001c88 <clock_normal+0x210>
 8001c3e:	ee87 6b04 	vdiv.f64	d6, d7, d4
 8001c42:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c46:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001c4a:	ee17 2a90 	vmov	r2, s15
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <clock_normal+0x218>)
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

	if(video.frameToSkip < 0)
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <clock_normal+0x218>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da02      	bge.n	8001c60 <clock_normal+0x1e8>
		video.frameToSkip = 0;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <clock_normal+0x218>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC_DateTypeDef sDate = {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8001c64:	2200      	movs	r2, #0
 8001c66:	490a      	ldr	r1, [pc, #40]	@ (8001c90 <clock_normal+0x218>)
 8001c68:	4810      	ldr	r0, [pc, #64]	@ (8001cac <clock_normal+0x234>)
 8001c6a:	f007 fe1d 	bl	80098a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	2200      	movs	r2, #0
 8001c74:	4619      	mov	r1, r3
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <clock_normal+0x234>)
 8001c78:	f007 fe72 	bl	8009960 <HAL_RTC_GetDate>
 8001c7c:	e000      	b.n	8001c80 <clock_normal+0x208>
		return;
 8001c7e:	bf00      	nop

}
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	408f4000 	.word	0x408f4000
 8001c90:	240187b8 	.word	0x240187b8
 8001c94:	24018540 	.word	0x24018540
 8001c98:	24018770 	.word	0x24018770
 8001c9c:	2400030c 	.word	0x2400030c
 8001ca0:	24000200 	.word	0x24000200
 8001ca4:	24000084 	.word	0x24000084
 8001ca8:	240002c0 	.word	0x240002c0
 8001cac:	240002d4 	.word	0x240002d4
 8001cb0:	2404a7fc 	.word	0x2404a7fc

08001cb4 <show_frame>:


static void show_frame(uint32_t frame_num)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < frame_num ; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e011      	b.n	8001ce6 <show_frame+0x32>
	{

		AVI_GetFrame(&AVI_Handel, &MJPEG_File, 1);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4955      	ldr	r1, [pc, #340]	@ (8001e1c <show_frame+0x168>)
 8001cc6:	4856      	ldr	r0, [pc, #344]	@ (8001e20 <show_frame+0x16c>)
 8001cc8:	f7fe fdbe 	bl	8000848 <AVI_GetFrame>

		AVI_Handel.CurrentImage++;
 8001ccc:	4b54      	ldr	r3, [pc, #336]	@ (8001e20 <show_frame+0x16c>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a53      	ldr	r2, [pc, #332]	@ (8001e20 <show_frame+0x16c>)
 8001cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001cd6:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <show_frame+0x170>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a51      	ldr	r2, [pc, #324]	@ (8001e24 <show_frame+0x170>)
 8001cde:	6213      	str	r3, [r2, #32]
	for(int i = 0 ; i < frame_num ; i++)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d8e9      	bhi.n	8001cc2 <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e089      	b.n	8001e08 <show_frame+0x154>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4949      	ldr	r1, [pc, #292]	@ (8001e1c <show_frame+0x168>)
 8001cf8:	4849      	ldr	r0, [pc, #292]	@ (8001e20 <show_frame+0x16c>)
 8001cfa:	f7fe fda5 	bl	8000848 <AVI_GetFrame>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b48      	ldr	r3, [pc, #288]	@ (8001e24 <show_frame+0x170>)
 8001d04:	75da      	strb	r2, [r3, #23]

		if(video.FrameType == AVI_VIDEO_FRAME)
 8001d06:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <show_frame+0x170>)
 8001d08:	7ddb      	ldrb	r3, [r3, #23]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d179      	bne.n	8001e02 <show_frame+0x14e>
		{

			AVI_Handel.CurrentImage++;
 8001d0e:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <show_frame+0x16c>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a42      	ldr	r2, [pc, #264]	@ (8001e20 <show_frame+0x16c>)
 8001d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
			video.frameCount++;
 8001d18:	4b42      	ldr	r3, [pc, #264]	@ (8001e24 <show_frame+0x170>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a41      	ldr	r2, [pc, #260]	@ (8001e24 <show_frame+0x170>)
 8001d20:	6213      	str	r3, [r2, #32]

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8001d22:	4941      	ldr	r1, [pc, #260]	@ (8001e28 <show_frame+0x174>)
 8001d24:	4b3e      	ldr	r3, [pc, #248]	@ (8001e20 <show_frame+0x16c>)
 8001d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d28:	4b3e      	ldr	r3, [pc, #248]	@ (8001e24 <show_frame+0x170>)
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2c:	483f      	ldr	r0, [pc, #252]	@ (8001e2c <show_frame+0x178>)
 8001d2e:	f7ff f97d 	bl	800102c <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 8001d32:	bf00      	nop
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <show_frame+0x17c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0fb      	beq.n	8001d34 <show_frame+0x80>

			if(video.isfirstFrame == 1)
 8001d3c:	4b39      	ldr	r3, [pc, #228]	@ (8001e24 <show_frame+0x170>)
 8001d3e:	7d9b      	ldrb	r3, [r3, #22]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d136      	bne.n	8001db2 <show_frame+0xfe>
			{

				video.isfirstFrame = 0;
 8001d44:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <show_frame+0x170>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	759a      	strb	r2, [r3, #22]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8001d4a:	493a      	ldr	r1, [pc, #232]	@ (8001e34 <show_frame+0x180>)
 8001d4c:	4837      	ldr	r0, [pc, #220]	@ (8001e2c <show_frame+0x178>)
 8001d4e:	f002 fd03 	bl	8004758 <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <show_frame+0x180>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4a36      	ldr	r2, [pc, #216]	@ (8001e34 <show_frame+0x180>)
 8001d5a:	6892      	ldr	r2, [r2, #8]
 8001d5c:	b291      	uxth	r1, r2
 8001d5e:	4a35      	ldr	r2, [pc, #212]	@ (8001e34 <show_frame+0x180>)
 8001d60:	6852      	ldr	r2, [r2, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fac6 	bl	80022f4 <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 8001d68:	4b32      	ldr	r3, [pc, #200]	@ (8001e34 <show_frame+0x180>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <show_frame+0x170>)
 8001d70:	831a      	strh	r2, [r3, #24]
				video.height = JPEG_Info.ImageHeight;
 8001d72:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <show_frame+0x180>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <show_frame+0x170>)
 8001d7a:	835a      	strh	r2, [r3, #26]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <show_frame+0x170>)
 8001d7e:	8b1b      	ldrh	r3, [r3, #24]
 8001d80:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da00      	bge.n	8001d8a <show_frame+0xd6>
 8001d88:	3301      	adds	r3, #1
 8001d8a:	105b      	asrs	r3, r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <show_frame+0x170>)
 8001d90:	839a      	strh	r2, [r3, #28]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8001d92:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <show_frame+0x170>)
 8001d94:	8b5b      	ldrh	r3, [r3, #26]
 8001d96:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da00      	bge.n	8001da0 <show_frame+0xec>
 8001d9e:	3301      	adds	r3, #1
 8001da0:	105b      	asrs	r3, r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <show_frame+0x170>)
 8001da6:	83da      	strh	r2, [r3, #30]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <show_frame+0x16c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <show_frame+0x170>)
 8001db0:	851a      	strh	r2, [r3, #40]	@ 0x28

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)output_data, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <show_frame+0x170>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	4618      	mov	r0, r3
 8001db8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <show_frame+0x180>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <show_frame+0x180>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	491c      	ldr	r1, [pc, #112]	@ (8001e38 <show_frame+0x184>)
 8001dc6:	f000 fb13 	bl	80023f0 <DMA2D_CopyBuffer>

			//video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)output_data;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <show_frame+0x184>)
 8001dcc:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <show_frame+0x170>)
 8001dd0:	8b1a      	ldrh	r2, [r3, #24]
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <show_frame+0x170>)
 8001dd4:	8b5b      	ldrh	r3, [r3, #26]
 8001dd6:	fb12 f303 	smulbb	r3, r2, r3
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2203      	movs	r2, #3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f9aa 	bl	800213c <depth24To16>

			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <show_frame+0x170>)
 8001dea:	8b98      	ldrh	r0, [r3, #28]
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <show_frame+0x170>)
 8001dee:	8bd9      	ldrh	r1, [r3, #30]
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <show_frame+0x170>)
 8001df2:	8b1a      	ldrh	r2, [r3, #24]
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <show_frame+0x170>)
 8001df6:	8b5c      	ldrh	r4, [r3, #26]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	4623      	mov	r3, r4
 8001dfe:	f000 fa27 	bl	8002250 <lcd_draw>
	for(int i = 0 ; i < 2 ; i++)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	3301      	adds	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	f77f af72 	ble.w	8001cf4 <show_frame+0x40>

		}

	}

}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24018540 	.word	0x24018540
 8001e20:	24018770 	.word	0x24018770
 8001e24:	240187b8 	.word	0x240187b8
 8001e28:	2400030c 	.word	0x2400030c
 8001e2c:	24000200 	.word	0x24000200
 8001e30:	24000084 	.word	0x24000084
 8001e34:	240002c0 	.word	0x240002c0
 8001e38:	2404a7fc 	.word	0x2404a7fc

08001e3c <file_handler>:


static void file_handler(uint8_t openFile)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 8001e46:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <file_handler+0xd0>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <file_handler+0x18>
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d033      	beq.n	8001ebc <file_handler+0x80>
     {

    	 if(openFile)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <file_handler+0x24>
    		 f_close(&MJPEG_File);
 8001e5a:	482d      	ldr	r0, [pc, #180]	@ (8001f10 <file_handler+0xd4>)
 8001e5c:	f00d faa5 	bl	800f3aa <f_close>

    	 new_file_flag = 0;
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <file_handler+0xd0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]

    	 char file_idx_str[4];
    	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <file_handler+0xd8>)
 8001e68:	8a9b      	ldrh	r3, [r3, #20]
 8001e6a:	f107 000c 	add.w	r0, r7, #12
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <file_handler+0xdc>)
 8001e70:	2104      	movs	r1, #4
 8001e72:	f00d fec3 	bl	800fbfc <sniprintf>
    	 snprintf(name, sizeof(name), "video_%s.avi", file_idx_str);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <file_handler+0xe0>)
 8001e7c:	210e      	movs	r1, #14
 8001e7e:	4828      	ldr	r0, [pc, #160]	@ (8001f20 <file_handler+0xe4>)
 8001e80:	f00d febc 	bl	800fbfc <sniprintf>

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8001e84:	2201      	movs	r2, #1
 8001e86:	4926      	ldr	r1, [pc, #152]	@ (8001f20 <file_handler+0xe4>)
 8001e88:	4821      	ldr	r0, [pc, #132]	@ (8001f10 <file_handler+0xd4>)
 8001e8a:	f00c ff07 	bl	800ec9c <f_open>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <file_handler+0x7e>
    	 {

    		 video.isfirstFrame = 1;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <file_handler+0xd8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	759a      	strb	r2, [r3, #22]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <file_handler+0xe8>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8001ea6:	4a20      	ldr	r2, [pc, #128]	@ (8001f28 <file_handler+0xec>)
 8001ea8:	4919      	ldr	r1, [pc, #100]	@ (8001f10 <file_handler+0xd4>)
 8001eaa:	4820      	ldr	r0, [pc, #128]	@ (8001f2c <file_handler+0xf0>)
 8001eac:	f7fe fc8c 	bl	80007c8 <AVI_ParserInit>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <file_handler+0x80>
    			 while(1);
 8001eb6:	bf00      	nop
 8001eb8:	e7fd      	b.n	8001eb6 <file_handler+0x7a>

    	 }
    	 else
    	 {

    		 while(1);
 8001eba:	e7fe      	b.n	8001eba <file_handler+0x7e>
    	 }

     }

     // Check for the end of the video
     if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <file_handler+0xf0>)
 8001ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <file_handler+0xf0>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d31d      	bcc.n	8001f04 <file_handler+0xc8>
     {

    	 video.file_idx++;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <file_handler+0xd8>)
 8001eca:	8a9b      	ldrh	r3, [r3, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <file_handler+0xd8>)
 8001ed2:	829a      	strh	r2, [r3, #20]
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <file_handler+0xd8>)
 8001ed6:	8a9b      	ldrh	r3, [r3, #20]
 8001ed8:	091a      	lsrs	r2, r3, #4
 8001eda:	4915      	ldr	r1, [pc, #84]	@ (8001f30 <file_handler+0xf4>)
 8001edc:	fba1 1202 	umull	r1, r2, r1, r2
 8001ee0:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001ee4:	fb01 f202 	mul.w	r2, r1, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <file_handler+0xd8>)
 8001eee:	829a      	strh	r2, [r3, #20]

		 //  wait for the Last DMA2D transfer to ends
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8001ef0:	2132      	movs	r1, #50	@ 0x32
 8001ef2:	4810      	ldr	r0, [pc, #64]	@ (8001f34 <file_handler+0xf8>)
 8001ef4:	f001 ff8f 	bl	8003e16 <HAL_DMA2D_PollForTransfer>

		 f_close(&MJPEG_File);
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <file_handler+0xd4>)
 8001efa:	f00d fa56 	bl	800f3aa <f_close>

		 new_file_flag = 1;
 8001efe:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <file_handler+0xd0>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]

     }

}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	24000000 	.word	0x24000000
 8001f10:	24018540 	.word	0x24018540
 8001f14:	240187b8 	.word	0x240187b8
 8001f18:	08010448 	.word	0x08010448
 8001f1c:	08010450 	.word	0x08010450
 8001f20:	240002fc 	.word	0x240002fc
 8001f24:	2401830c 	.word	0x2401830c
 8001f28:	2400030c 	.word	0x2400030c
 8001f2c:	24018770 	.word	0x24018770
 8001f30:	05b05b06 	.word	0x05b05b06
 8001f34:	24000258 	.word	0x24000258

08001f38 <user_buttons_handler>:


static void user_buttons_handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

	static uint8_t first = 1;
	static uint32_t button_timer = 0;


	if(video.video_mode == SETTING_MODE)
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <user_buttons_handler+0x6c>)
 8001f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02c      	beq.n	8001fa0 <user_buttons_handler+0x68>
		return;

	// Long press enters in setting mode
	if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8001f46:	2102      	movs	r1, #2
 8001f48:	4817      	ldr	r0, [pc, #92]	@ (8001fa8 <user_buttons_handler+0x70>)
 8001f4a:	f002 fb51 	bl	80045f0 <HAL_GPIO_ReadPin>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d121      	bne.n	8001f98 <user_buttons_handler+0x60>
	{

		if(first)
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <user_buttons_handler+0x74>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <user_buttons_handler+0x34>
		{

			first = 0;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <user_buttons_handler+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
			button_timer = HAL_GetTick();
 8001f62:	f000 fe35 	bl	8002bd0 <HAL_GetTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <user_buttons_handler+0x78>)
 8001f6a:	6013      	str	r3, [r2, #0]

		}

		if(abs( HAL_GetTick() - button_timer ) >= 3000)
 8001f6c:	f000 fe30 	bl	8002bd0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <user_buttons_handler+0x78>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfb8      	it	lt
 8001f7c:	425b      	neglt	r3, r3
 8001f7e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dd0d      	ble.n	8001fa2 <user_buttons_handler+0x6a>
		{

			video.video_mode = SETTING_MODE;
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <user_buttons_handler+0x6c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			video.set = SET_IDLE;
 8001f8e:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <user_buttons_handler+0x6c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001f96:	e004      	b.n	8001fa2 <user_buttons_handler+0x6a>

	}
	else
	{

		first = 1;
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <user_buttons_handler+0x74>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e000      	b.n	8001fa2 <user_buttons_handler+0x6a>
		return;
 8001fa0:	bf00      	nop

	}

}
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	240187b8 	.word	0x240187b8
 8001fa8:	58020800 	.word	0x58020800
 8001fac:	24000001 	.word	0x24000001
 8001fb0:	240637fc 	.word	0x240637fc

08001fb4 <battery_management>:


static void battery_management()
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0


	if(video.display_status == DISPLAY_ON)
 8001fba:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <battery_management+0xf0>)
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d16b      	bne.n	800209c <battery_management+0xe8>
	{

		if(TIME_ELAPSED(video.time.Seconds, video.display_ts) >= DISPLAY_STANDBY_TIMER)
 8001fc4:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <battery_management+0xf0>)
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <battery_management+0xf0>)
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d00b      	beq.n	8001fea <battery_management+0x36>
 8001fd2:	4b34      	ldr	r3, [pc, #208]	@ (80020a4 <battery_management+0xf0>)
 8001fd4:	789b      	ldrb	r3, [r3, #2]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <battery_management+0xf0>)
 8001fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fe0:	bf8c      	ite	hi
 8001fe2:	2301      	movhi	r3, #1
 8001fe4:	2300      	movls	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e009      	b.n	8001ffe <battery_management+0x4a>
 8001fea:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <battery_management+0xf0>)
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	4a2d      	ldr	r2, [pc, #180]	@ (80020a4 <battery_management+0xf0>)
 8001ff0:	7892      	ldrb	r2, [r2, #2]
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ff6:	bf8c      	ite	hi
 8001ff8:	2301      	movhi	r3, #1
 8001ffa:	2300      	movls	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d04c      	beq.n	800209c <battery_management+0xe8>
		{

			// Enable interrupts for user buttons
			//MX_GPIO_Init(1);

			parameters_reset();
 8002002:	f000 f855 	bl	80020b0 <parameters_reset>

			GC9A01_sleep_mode(ON);
 8002006:	2001      	movs	r0, #1
 8002008:	f7fe ffdd 	bl	8000fc6 <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 800200c:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <battery_management+0xf0>)
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Stop mode

			HAL_SuspendTick();
 8002014:	f000 fe0c 	bl	8002c30 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop

			__disable_irq();

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800201c:	2101      	movs	r1, #1
 800201e:	2001      	movs	r0, #1
 8002020:	f003 fefc 	bl	8005e1c <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 8002024:	b662      	cpsie	i
}
 8002026:	bf00      	nop

			// Wake up

			__enable_irq();

			HAL_ResumeTick();
 8002028:	f000 fe12 	bl	8002c50 <HAL_ResumeTick>

			SystemClock_Config();
 800202c:	f7ff f928 	bl	8001280 <SystemClock_Config>

			GC9A01_init();
 8002030:	f7fe fd49 	bl	8000ac6 <GC9A01_init>
			video.display_status = DISPLAY_ON;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <battery_management+0xf0>)
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Clock setting

			RTC_DateTypeDef sDate = {0};
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002040:	2200      	movs	r2, #0
 8002042:	4918      	ldr	r1, [pc, #96]	@ (80020a4 <battery_management+0xf0>)
 8002044:	4818      	ldr	r0, [pc, #96]	@ (80020a8 <battery_management+0xf4>)
 8002046:	f007 fc2f 	bl	80098a8 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	4619      	mov	r1, r3
 8002050:	4815      	ldr	r0, [pc, #84]	@ (80020a8 <battery_management+0xf4>)
 8002052:	f007 fc85 	bl	8009960 <HAL_RTC_GetDate>

			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 8002056:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <battery_management+0xf0>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <battery_management+0xf8>)
 800205c:	fba3 1302 	umull	r1, r3, r3, r2
 8002060:	08d9      	lsrs	r1, r3, #3
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <battery_management+0xf0>)
 800207a:	829a      	strh	r2, [r3, #20]
			video.file_idx += video.time.Minutes;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <battery_management+0xf0>)
 800207e:	8a9b      	ldrh	r3, [r3, #20]
 8002080:	4a08      	ldr	r2, [pc, #32]	@ (80020a4 <battery_management+0xf0>)
 8002082:	7852      	ldrb	r2, [r2, #1]
 8002084:	4413      	add	r3, r2
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <battery_management+0xf0>)
 800208a:	829a      	strh	r2, [r3, #20]

			file_handler(1);
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff fed5 	bl	8001e3c <file_handler>

			video.display_ts = video.time.Seconds;
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <battery_management+0xf0>)
 8002094:	789b      	ldrb	r3, [r3, #2]
 8002096:	461a      	mov	r2, r3
 8002098:	4b02      	ldr	r3, [pc, #8]	@ (80020a4 <battery_management+0xf0>)
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

	}

}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	240187b8 	.word	0x240187b8
 80020a8:	240002d4 	.word	0x240002d4
 80020ac:	aaaaaaab 	.word	0xaaaaaaab

080020b0 <parameters_reset>:


static void parameters_reset(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

	video.width = 0;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <parameters_reset+0x84>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	831a      	strh	r2, [r3, #24]
	video.height = 0;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <parameters_reset+0x84>)
 80020bc:	2200      	movs	r2, #0
 80020be:	835a      	strh	r2, [r3, #26]
	video.xPos = 0;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002134 <parameters_reset+0x84>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	839a      	strh	r2, [r3, #28]
	video.yPos = 0;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <parameters_reset+0x84>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	83da      	strh	r2, [r3, #30]

	video.time.Hours = 0;
 80020cc:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <parameters_reset+0x84>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
	video.time.Minutes = 0;
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <parameters_reset+0x84>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	705a      	strb	r2, [r3, #1]
	video.time.Seconds = 0;
 80020d8:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <parameters_reset+0x84>)
 80020da:	2200      	movs	r2, #0
 80020dc:	709a      	strb	r2, [r3, #2]

	video.file_idx = 0;
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <parameters_reset+0x84>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <parameters_reset+0x84>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	75da      	strb	r2, [r3, #23]

	video.frameToSkip = 0;
 80020ea:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <parameters_reset+0x84>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24
	video.frame_time = 0;
 80020f0:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <parameters_reset+0x84>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28
	video.actual_time = 0;
 80020f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <parameters_reset+0x84>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	video.tick_offset = 0;
 80020fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <parameters_reset+0x84>)
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002102:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <parameters_reset+0x88>)
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <parameters_reset+0x84>)
 8002106:	635a      	str	r2, [r3, #52]	@ 0x34

	video.display_ts = video.time.Seconds;
 8002108:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <parameters_reset+0x84>)
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	461a      	mov	r2, r3
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <parameters_reset+0x84>)
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c

	video.display_status = DISPLAY_ON;
 8002112:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <parameters_reset+0x84>)
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <parameters_reset+0x84>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 8002120:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <parameters_reset+0x84>)
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	240187b8 	.word	0x240187b8
 8002138:	240187fc 	.word	0x240187fc

0800213c <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]


	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 8002150:	4b3d      	ldr	r3, [pc, #244]	@ (8002248 <depth24To16+0x10c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00c      	beq.n	8002172 <depth24To16+0x36>
    {

    	swap = 0;
 8002158:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <depth24To16+0x10c>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	e05e      	b.n	8002230 <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 8002172:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <depth24To16+0x10c>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	b29b      	uxth	r3, r3
 800217e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002182:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 8002184:	e054      	b.n	8002230 <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	787a      	ldrb	r2, [r7, #1]
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	fb01 f202 	mul.w	r2, r1, r2
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	3302      	adds	r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 80021c0:	7a7b      	ldrb	r3, [r7, #9]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b21      	ldr	r3, [pc, #132]	@ (800224c <depth24To16+0x110>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	7abb      	ldrb	r3, [r7, #10]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21a      	sxth	r2, r3
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b219      	sxth	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	b28a      	uxth	r2, r1
 80021f4:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	440b      	add	r3, r1
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b21b      	sxth	r3, r3
 8002218:	4313      	orrs	r3, r2
 800221a:	b219      	sxth	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	b28a      	uxth	r2, r1
 8002228:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3301      	adds	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	dba6      	blt.n	8002186 <depth24To16+0x4a>

	}

}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	24063800 	.word	0x24063800
 800224c:	fffff800 	.word	0xfffff800

08002250 <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	4604      	mov	r4, r0
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4623      	mov	r3, r4
 8002260:	80fb      	strh	r3, [r7, #6]
 8002262:	4603      	mov	r3, r0
 8002264:	80bb      	strh	r3, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	807b      	strh	r3, [r7, #2]
 800226a:	4613      	mov	r3, r2
 800226c:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;


		// Only half of the frame is handled per time
		// Alternate the top and bottom half every cycle
	   	if(swap)
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <lcd_draw+0xa0>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <lcd_draw+0xa0>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 8002284:	23ef      	movs	r3, #239	@ 0xef
 8002286:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 8002288:	2377      	movs	r3, #119	@ 0x77
 800228a:	827b      	strh	r3, [r7, #18]
 800228c:	e00e      	b.n	80022ac <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <lcd_draw+0xa0>)
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 80022a0:	2378      	movs	r3, #120	@ 0x78
 80022a2:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 80022a4:	23ef      	movs	r3, #239	@ 0xef
 80022a6:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 80022a8:	23ef      	movs	r3, #239	@ 0xef
 80022aa:	827b      	strh	r3, [r7, #18]

	   	}

	   	// Sends the block of data in a single time

	    GC9A01_set_frame(frame);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022b4:	f7fe fe4b 	bl	8000f4e <GC9A01_set_frame>
	    GC9A01_write_command(MEM_WR);
 80022b8:	202c      	movs	r0, #44	@ 0x2c
 80022ba:	f7fe fbc7 	bl	8000a4c <GC9A01_write_command>

	    GC9A01_set_data_command(ON);
 80022be:	2001      	movs	r0, #1
 80022c0:	f7fe fb90 	bl	80009e4 <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fba7 	bl	8000a18 <GC9A01_set_chip_select>

	    uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	883a      	ldrh	r2, [r7, #0]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
	    GC9A01_spi_tx(data, total_bytes);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022dc:	f7fe fe8a 	bl	8000ff4 <GC9A01_spi_tx>

	    GC9A01_set_chip_select(ON);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7fe fb99 	bl	8000a18 <GC9A01_set_chip_select>

}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	24063801 	.word	0x24063801

080022f4 <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	603a      	str	r2, [r7, #0]
 80022fe:	80fb      	strh	r3, [r7, #6]
 8002300:	460b      	mov	r3, r1
 8002302:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002304:	2301      	movs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800230c:	4836      	ldr	r0, [pc, #216]	@ (80023e8 <DMA2D_Init+0xf4>)
 800230e:	f000 f93d 	bl	800258c <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10d      	bne.n	8002334 <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 8002318:	2302      	movs	r3, #2
 800231a:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d025      	beq.n	8002376 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f1c3 0310 	rsb	r3, r3, #16
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	e020      	b.n	8002376 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d014      	beq.n	8002376 <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f1c3 0308 	rsb	r3, r3, #8
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	e00f      	b.n	8002376 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d10c      	bne.n	8002376 <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 800235c:	2301      	movs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f1c3 0310 	rsb	r3, r3, #16
 8002374:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <DMA2D_Init+0xf4>)
 8002378:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800237c:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <DMA2D_Init+0xf4>)
 8002380:	2201      	movs	r2, #1
 8002382:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800238a:	461a      	mov	r2, r3
 800238c:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <DMA2D_Init+0xf4>)
 800238e:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <DMA2D_Init+0xf4>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <DMA2D_Init+0xf4>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <DMA2D_Init+0xf4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023aa:	22ff      	movs	r2, #255	@ 0xff
 80023ac:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023b0:	220b      	movs	r2, #11
 80023b2:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 80023b4:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 80023ba:	4a0b      	ldr	r2, [pc, #44]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023ce:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <DMA2D_Init+0xf8>)
 80023d0:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 80023d2:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023d4:	f001 fc90 	bl	8003cf8 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 80023d8:	2101      	movs	r1, #1
 80023da:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <DMA2D_Init+0xf4>)
 80023dc:	f001 fe04 	bl	8003fe8 <HAL_DMA2D_ConfigLayer>

}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	24000258 	.word	0x24000258
 80023ec:	52001000 	.word	0x52001000

080023f0 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	@ 0x28
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4611      	mov	r1, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	460b      	mov	r3, r1
 8002400:	80fb      	strh	r3, [r7, #6]
 8002402:	4613      	mov	r3, r2
 8002404:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <DMA2D_CopyBuffer+0x6c>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <DMA2D_CopyBuffer+0x6c>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	461a      	mov	r2, r3
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	009a      	lsls	r2, r3, #2
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4413      	add	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002436:	f04f 31ff 	mov.w	r1, #4294967295
 800243a:	4809      	ldr	r0, [pc, #36]	@ (8002460 <DMA2D_CopyBuffer+0x70>)
 800243c:	f001 fceb 	bl	8003e16 <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	88bb      	ldrh	r3, [r7, #4]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4804      	ldr	r0, [pc, #16]	@ (8002460 <DMA2D_CopyBuffer+0x70>)
 800244e:	f001 fcb7 	bl	8003dc0 <HAL_DMA2D_Start>

}
 8002452:	bf00      	nop
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	240002c0 	.word	0x240002c0
 8002460:	24000258 	.word	0x24000258

08002464 <SD_Initialize>:


static void SD_Initialize(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  BSP_SD_Init();
 8002468:	f00a f92c 	bl	800c6c4 <BSP_SD_Init>

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_MspInit+0x30>)
 8002478:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800247c:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_MspInit+0x30>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_MspInit+0x30>)
 8002488:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58024400 	.word	0x58024400

080024a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0ba      	sub	sp, #232	@ 0xe8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	22c0      	movs	r2, #192	@ 0xc0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00d fbcd 	bl	800fc64 <memset>
  if(hadc->Instance==ADC1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002580 <HAL_ADC_MspInit+0xdc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d150      	bne.n	8002576 <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024d4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80024e4:	230a      	movs	r3, #10
 80024e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80024e8:	2303      	movs	r3, #3
 80024ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80024f4:	23c0      	movs	r3, #192	@ 0xc0
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 1967.0;
 80024fc:	f240 73af 	movw	r3, #1967	@ 0x7af
 8002500:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	4618      	mov	r0, r3
 800250e:	f004 fc9d 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8002518:	f7ff f94e 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_ADC_MspInit+0xe0>)
 800251e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002522:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <HAL_ADC_MspInit+0xe0>)
 8002524:	f043 0320 	orr.w	r3, r3, #32
 8002528:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_ADC_MspInit+0xe0>)
 800252e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_ADC_MspInit+0xe0>)
 800253c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002540:	4a10      	ldr	r2, [pc, #64]	@ (8002584 <HAL_ADC_MspInit+0xe0>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_ADC_MspInit+0xe0>)
 800254c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002558:	2301      	movs	r3, #1
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_ADC_MspInit+0xe4>)
 8002572:	f001 fe8d 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	37e8      	adds	r7, #232	@ 0xe8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000
 8002584:	58024400 	.word	0x58024400
 8002588:	58020000 	.word	0x58020000

0800258c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_DMA2D_MspInit+0x3c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_DMA2D_MspInit+0x40>)
 80025a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80025a4:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_DMA2D_MspInit+0x40>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <HAL_DMA2D_MspInit+0x40>)
 80025b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	52001000 	.word	0x52001000
 80025cc:	58024400 	.word	0x58024400

080025d0 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0b      	ldr	r2, [pc, #44]	@ (800260c <HAL_JPEG_MspInit+0x3c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10e      	bne.n	8002600 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_JPEG_MspInit+0x40>)
 80025e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80025e8:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <HAL_JPEG_MspInit+0x40>)
 80025ea:	f043 0320 	orr.w	r3, r3, #32
 80025ee:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <HAL_JPEG_MspInit+0x40>)
 80025f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	52003000 	.word	0x52003000
 8002610:	58024400 	.word	0x58024400

08002614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0b2      	sub	sp, #200	@ 0xc8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	22c0      	movs	r2, #192	@ 0xc0
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f00d fb1d 	bl	800fc64 <memset>
  if(hrtc->Instance==RTC)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <HAL_RTC_MspInit+0x5c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d119      	bne.n	8002668 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002634:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002644:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fbfd 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002658:	f7ff f8ae 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <HAL_RTC_MspInit+0x60>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <HAL_RTC_MspInit+0x60>)
 8002662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002666:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002668:	bf00      	nop
 800266a:	37c8      	adds	r7, #200	@ 0xc8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58004000 	.word	0x58004000
 8002674:	58024400 	.word	0x58024400

08002678 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0bc      	sub	sp, #240	@ 0xf0
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002690:	f107 0318 	add.w	r3, r7, #24
 8002694:	22c0      	movs	r2, #192	@ 0xc0
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00d fae3 	bl	800fc64 <memset>
  if(hsd->Instance==SDMMC1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a4b      	ldr	r2, [pc, #300]	@ (80027d0 <HAL_SD_MspInit+0x158>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	f040 808f 	bne.w	80027c8 <HAL_SD_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80026aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ba:	f107 0318 	add.w	r3, r7, #24
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 fbc4 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80026ca:	f7ff f875 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80026ce:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 80026d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80026d4:	4a3f      	ldr	r2, [pc, #252]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026da:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80026de:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 80026e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80026e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 80026ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026f2:	4a38      	ldr	r2, [pc, #224]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026fc:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 80026fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 800270c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002710:	4a30      	ldr	r2, [pc, #192]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 800271c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002728:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 800272a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800272e:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002738:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <HAL_SD_MspInit+0x15c>)
 800273a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800274a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002760:	230c      	movs	r3, #12
 8002762:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002766:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800276a:	4619      	mov	r1, r3
 800276c:	481a      	ldr	r0, [pc, #104]	@ (80027d8 <HAL_SD_MspInit+0x160>)
 800276e:	f001 fd8f 	bl	8004290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002772:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800278c:	230c      	movs	r3, #12
 800278e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002792:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002796:	4619      	mov	r1, r3
 8002798:	4810      	ldr	r0, [pc, #64]	@ (80027dc <HAL_SD_MspInit+0x164>)
 800279a:	f001 fd79 	bl	8004290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800279e:	2304      	movs	r3, #4
 80027a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027b6:	230c      	movs	r3, #12
 80027b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027c0:	4619      	mov	r1, r3
 80027c2:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <HAL_SD_MspInit+0x168>)
 80027c4:	f001 fd64 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80027c8:	bf00      	nop
 80027ca:	37f0      	adds	r7, #240	@ 0xf0
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	52007000 	.word	0x52007000
 80027d4:	58024400 	.word	0x58024400
 80027d8:	58020400 	.word	0x58020400
 80027dc:	58020800 	.word	0x58020800
 80027e0:	58020c00 	.word	0x58020c00

080027e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0ba      	sub	sp, #232	@ 0xe8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	22c0      	movs	r2, #192	@ 0xc0
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f00d fa2d 	bl	800fc64 <memset>
  if(hspi->Instance==SPI1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a26      	ldr	r2, [pc, #152]	@ (80028a8 <HAL_SPI_MspInit+0xc4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d144      	bne.n	800289e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002814:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002820:	2300      	movs	r3, #0
 8002822:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	4618      	mov	r0, r3
 800282a:	f004 fb0f 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002834:	f7fe ffc0 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002838:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <HAL_SPI_MspInit+0xc8>)
 800283a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800283e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_SPI_MspInit+0xc8>)
 8002840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002844:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002848:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <HAL_SPI_MspInit+0xc8>)
 800284a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800284e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_SPI_MspInit+0xc8>)
 8002858:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800285c:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <HAL_SPI_MspInit+0xc8>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002866:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_SPI_MspInit+0xc8>)
 8002868:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002874:	23a0      	movs	r3, #160	@ 0xa0
 8002876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800288c:	2305      	movs	r3, #5
 800288e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <HAL_SPI_MspInit+0xcc>)
 800289a:	f001 fcf9 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	37e8      	adds	r7, #232	@ 0xe8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40013000 	.word	0x40013000
 80028ac:	58024400 	.word	0x58024400
 80028b0:	58020000 	.word	0x58020000

080028b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <NMI_Handler+0x4>

080028bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <MemManage_Handler+0x4>

080028cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <UsageFault_Handler+0x4>

080028dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290a:	f000 f94d 	bl	8002ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f00d f9a6 	bl	800fc94 <__errno>
 8002948:	4603      	mov	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <_sbrk+0x64>)
 8002964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	24100000 	.word	0x24100000
 8002974:	00000400 	.word	0x00000400
 8002978:	24063804 	.word	0x24063804
 800297c:	24063990 	.word	0x24063990

08002980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002984:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <SystemInit+0xd0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298a:	4a31      	ldr	r2, [pc, #196]	@ (8002a50 <SystemInit+0xd0>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002994:	4b2f      	ldr	r3, [pc, #188]	@ (8002a54 <SystemInit+0xd4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	2b02      	cmp	r3, #2
 800299e:	d807      	bhi.n	80029b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <SystemInit+0xd4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 030f 	bic.w	r3, r3, #15
 80029a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a54 <SystemInit+0xd4>)
 80029aa:	f043 0303 	orr.w	r3, r3, #3
 80029ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029b0:	4b29      	ldr	r3, [pc, #164]	@ (8002a58 <SystemInit+0xd8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a28      	ldr	r2, [pc, #160]	@ (8002a58 <SystemInit+0xd8>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029bc:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <SystemInit+0xd8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029c2:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <SystemInit+0xd8>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4924      	ldr	r1, [pc, #144]	@ (8002a58 <SystemInit+0xd8>)
 80029c8:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <SystemInit+0xdc>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <SystemInit+0xd4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029da:	4b1e      	ldr	r3, [pc, #120]	@ (8002a54 <SystemInit+0xd4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 030f 	bic.w	r3, r3, #15
 80029e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <SystemInit+0xd4>)
 80029e4:	f043 0303 	orr.w	r3, r3, #3
 80029e8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <SystemInit+0xd8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <SystemInit+0xd8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80029f6:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <SystemInit+0xd8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029fc:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <SystemInit+0xd8>)
 80029fe:	4a18      	ldr	r2, [pc, #96]	@ (8002a60 <SystemInit+0xe0>)
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <SystemInit+0xd8>)
 8002a04:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <SystemInit+0xe4>)
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a08:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <SystemInit+0xd8>)
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <SystemInit+0xe8>)
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <SystemInit+0xd8>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a14:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <SystemInit+0xd8>)
 8002a16:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <SystemInit+0xe8>)
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <SystemInit+0xd8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a20:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <SystemInit+0xd8>)
 8002a22:	4a11      	ldr	r2, [pc, #68]	@ (8002a68 <SystemInit+0xe8>)
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <SystemInit+0xd8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <SystemInit+0xd8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a09      	ldr	r2, [pc, #36]	@ (8002a58 <SystemInit+0xd8>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <SystemInit+0xd8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <SystemInit+0xec>)
 8002a40:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00
 8002a54:	52002000 	.word	0x52002000
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a60:	02020200 	.word	0x02020200
 8002a64:	01ff0000 	.word	0x01ff0000
 8002a68:	01010280 	.word	0x01010280
 8002a6c:	52004000 	.word	0x52004000

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a74:	f7ff ff84 	bl	8002980 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a78:	480c      	ldr	r0, [pc, #48]	@ (8002aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a7a:	490d      	ldr	r1, [pc, #52]	@ (8002ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a80:	e002      	b.n	8002a88 <LoopCopyDataInit>

08002a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a86:	3304      	adds	r3, #4

08002a88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a8c:	d3f9      	bcc.n	8002a82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a90:	4c0a      	ldr	r4, [pc, #40]	@ (8002abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a94:	e001      	b.n	8002a9a <LoopFillZerobss>

08002a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a98:	3204      	adds	r2, #4

08002a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a9c:	d3fb      	bcc.n	8002a96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f00d f8ff 	bl	800fca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7fe fb69 	bl	8001178 <main>
  bx  lr
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aa8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002aac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ab0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002ab4:	08010bb0 	.word	0x08010bb0
  ldr r2, =_sbss
 8002ab8:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8002abc:	24063990 	.word	0x24063990

08002ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aca:	2003      	movs	r0, #3
 8002acc:	f001 f8e2 	bl	8003c94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ad0:	f003 fffc 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_Init+0x68>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	4913      	ldr	r1, [pc, #76]	@ (8002b30 <HAL_Init+0x6c>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002aee:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <HAL_Init+0x68>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b30 <HAL_Init+0x6c>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_Init+0x70>)
 8002b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b08:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <HAL_Init+0x74>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0e:	200f      	movs	r0, #15
 8002b10:	f000 f814 	bl	8002b3c <HAL_InitTick>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e002      	b.n	8002b24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1e:	f7ff fca7 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	080104a8 	.word	0x080104a8
 8002b34:	24000008 	.word	0x24000008
 8002b38:	24000004 	.word	0x24000004

08002b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_InitTick+0x60>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e021      	b.n	8002b94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_InitTick+0x64>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_InitTick+0x60>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f8b9 	bl	8003cde <HAL_SYSTICK_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00e      	b.n	8002b94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d80a      	bhi.n	8002b92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f001 f891 	bl	8003caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b88:	4a06      	ldr	r2, [pc, #24]	@ (8002ba4 <HAL_InitTick+0x68>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	24000010 	.word	0x24000010
 8002ba0:	24000004 	.word	0x24000004
 8002ba4:	2400000c 	.word	0x2400000c

08002ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x20>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_IncTick+0x24>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_IncTick+0x24>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	24000010 	.word	0x24000010
 8002bcc:	24063808 	.word	0x24063808

08002bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	@ (8002be4 <HAL_GetTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	24063808 	.word	0x24063808

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff ffee 	bl	8002bd0 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <HAL_Delay+0x44>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffde 	bl	8002bd0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	24000010 	.word	0x24000010

08002c30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_SuspendTick+0x1c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <HAL_SuspendTick+0x1c>)
 8002c3a:	f023 0302 	bic.w	r3, r3, #2
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_ResumeTick+0x1c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_ResumeTick+0x1c>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3360      	adds	r3, #96	@ 0x60
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	431a      	orrs	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	611a      	str	r2, [r3, #16]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3360      	adds	r3, #96	@ 0x60
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
  }
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3330      	adds	r3, #48	@ 0x30
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	4413      	add	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	211f      	movs	r1, #31
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	f003 011f 	and.w	r1, r3, #31
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3314      	adds	r3, #20
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	0e5b      	lsrs	r3, r3, #25
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	4413      	add	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	0d1b      	lsrs	r3, r3, #20
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2107      	movs	r1, #7
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0d1b      	lsrs	r3, r3, #20
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0318 	and.w	r3, r3, #24
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e54:	40d9      	lsrs	r1, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	400b      	ands	r3, r1
 8002e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	000fffff 	.word	0x000fffff

08002e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6093      	str	r3, [r2, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	5fffffc0 	.word	0x5fffffc0

08002e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	6fffffc0 	.word	0x6fffffc0

08002eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_IsEnabled+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_IsEnabled+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d101      	bne.n	8002f78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e138      	b.n	8003214 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fa77 	bl	80024a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff67 	bl	8002e9c <LL_ADC_IsDeepPowerDownEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff4d 	bl	8002e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff82 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d114      	bne.n	8003018 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff66 	bl	8002ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff8:	4b88      	ldr	r3, [pc, #544]	@ (800321c <HAL_ADC_Init+0x294>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	4a88      	ldr	r2, [pc, #544]	@ (8003220 <HAL_ADC_Init+0x298>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	3301      	adds	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800300a:	e002      	b.n	8003012 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff65 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff76 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 800304e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80d2 	bne.w	8003202 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 80ce 	bne.w	8003202 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff4a 	bl	8002f14 <LL_ADC_IsEnabled>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d110      	bne.n	80030a8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003086:	4867      	ldr	r0, [pc, #412]	@ (8003224 <HAL_ADC_Init+0x29c>)
 8003088:	f7ff ff44 	bl	8002f14 <LL_ADC_IsEnabled>
 800308c:	4604      	mov	r4, r0
 800308e:	4866      	ldr	r0, [pc, #408]	@ (8003228 <HAL_ADC_Init+0x2a0>)
 8003090:	f7ff ff40 	bl	8002f14 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	4323      	orrs	r3, r4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4619      	mov	r1, r3
 80030a2:	4862      	ldr	r0, [pc, #392]	@ (800322c <HAL_ADC_Init+0x2a4>)
 80030a4:	f7ff fde4 	bl	8002c70 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7d5b      	ldrb	r3, [r3, #21]
 80030ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030b2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80030b8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7f1b      	ldrb	r3, [r3, #28]
 80030be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7f1b      	ldrb	r3, [r3, #28]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	045b      	lsls	r3, r3, #17
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <HAL_ADC_Init+0x2a8>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	430b      	orrs	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff13 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8003114:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff20 	bl	8002f60 <LL_ADC_INJ_IsConversionOngoing>
 8003120:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d14a      	bne.n	80031be <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d147      	bne.n	80031be <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7d1b      	ldrb	r3, [r3, #20]
 8003132:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b3c      	ldr	r3, [pc, #240]	@ (8003234 <HAL_ADC_Init+0x2ac>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	430b      	orrs	r3, r1
 800314e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003156:	2b01      	cmp	r3, #1
 8003158:	d11b      	bne.n	8003192 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_ADC_Init+0x2b0>)
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800316e:	3a01      	subs	r2, #1
 8003170:	0411      	lsls	r1, r2, #16
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	e007      	b.n	80031a2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fb29 	bl	8003810 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10c      	bne.n	80031e0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	f023 010f 	bic.w	r1, r3, #15
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80031de:	e007      	b.n	80031f0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020f 	bic.w	r2, r2, #15
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f023 0303 	bic.w	r3, r3, #3
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8003200:	e007      	b.n	8003212 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003212:	7ffb      	ldrb	r3, [r7, #31]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3724      	adds	r7, #36	@ 0x24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	24000004 	.word	0x24000004
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	40022000 	.word	0x40022000
 8003228:	40022100 	.word	0x40022100
 800322c:	40022300 	.word	0x40022300
 8003230:	fff0c003 	.word	0xfff0c003
 8003234:	ffffbffc 	.word	0xffffbffc
 8003238:	fc00f81e 	.word	0xfc00f81e

0800323c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b0a1      	sub	sp, #132	@ 0x84
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a95      	ldr	r2, [pc, #596]	@ (80034ac <HAL_ADC_ConfigChannel+0x270>)
 8003256:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x2a>
 8003262:	2302      	movs	r3, #2
 8003264:	e2c0      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x5ac>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fe61 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 82a5 	bne.w	80037ca <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db2c      	blt.n	80032e2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x6a>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	2201      	movs	r2, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	e016      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x98>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80032c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	69d1      	ldr	r1, [r2, #28]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	430b      	orrs	r3, r1
 80032e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f7ff fd46 	bl	8002d80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fe1e 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 80032fe:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe2b 	bl	8002f60 <LL_ADC_INJ_IsConversionOngoing>
 800330a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800330c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 80a0 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 809c 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	461a      	mov	r2, r3
 800332a:	f7ff fd55 	bl	8002dd8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x118>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	e00a      	b.n	800336a <HAL_ADC_ConfigChannel+0x12e>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d027      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6919      	ldr	r1, [r3, #16]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003382:	f7ff fca9 	bl	8002cd8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	7e5b      	ldrb	r3, [r3, #25]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_ADC_ConfigChannel+0x160>
 8003396:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800339a:	e000      	b.n	800339e <HAL_ADC_ConfigChannel+0x162>
 800339c:	2300      	movs	r3, #0
 800339e:	461a      	mov	r2, r3
 80033a0:	f7ff fcd3 	bl	8002d4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6919      	ldr	r1, [r3, #16]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x17e>
 80033b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033b8:	e000      	b.n	80033bc <HAL_ADC_ConfigChannel+0x180>
 80033ba:	2300      	movs	r3, #0
 80033bc:	461a      	mov	r2, r3
 80033be:	f7ff fcab 	bl	8002d18 <LL_ADC_SetDataRightShift>
 80033c2:	e047      	b.n	8003454 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033e6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	069b      	lsls	r3, r3, #26
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800340a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003412:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	069b      	lsls	r3, r3, #26
 800341c:	429a      	cmp	r2, r3
 800341e:	d107      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800342e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	069b      	lsls	r3, r3, #26
 8003440:	429a      	cmp	r2, r3
 8003442:	d107      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003452:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fd5b 	bl	8002f14 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 81bb 	bne.w	80037dc <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f7ff fcdc 	bl	8002e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <HAL_ADC_ConfigChannel+0x270>)
 800347e:	4293      	cmp	r3, r2
 8003480:	f040 8130 	bne.w	80036e4 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x274>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	bf94      	ite	ls
 80034a4:	2301      	movls	r3, #1
 80034a6:	2300      	movhi	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e01b      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x2a8>
 80034ac:	47ff0000 	.word	0x47ff0000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80034be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80034c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e003      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80034cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2b09      	cmp	r3, #9
 80034dc:	bf94      	ite	ls
 80034de:	2301      	movls	r3, #1
 80034e0:	2300      	movhi	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d079      	beq.n	80035dc <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x2c8>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	3301      	adds	r3, #1
 80034fc:	069b      	lsls	r3, r3, #26
 80034fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003502:	e015      	b.n	8003530 <HAL_ADC_ConfigChannel+0x2f4>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003514:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e003      	b.n	8003528 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8003520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	069b      	lsls	r3, r3, #26
 800352c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x314>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	3301      	adds	r3, #1
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	e017      	b.n	8003580 <HAL_ADC_ConfigChannel+0x344>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800355e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003560:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e003      	b.n	8003574 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 800356c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	ea42 0103 	orr.w	r1, r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x36a>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	f003 021f 	and.w	r2, r3, #31
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	051b      	lsls	r3, r3, #20
 80035a4:	e018      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x39c>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80035c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d8:	430b      	orrs	r3, r1
 80035da:	e07e      	b.n	80036da <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x3bc>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0e9b      	lsrs	r3, r3, #26
 80035ee:	3301      	adds	r3, #1
 80035f0:	069b      	lsls	r3, r3, #26
 80035f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f6:	e015      	b.n	8003624 <HAL_ADC_ConfigChannel+0x3e8>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8003614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3301      	adds	r3, #1
 800361e:	069b      	lsls	r3, r3, #26
 8003620:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x408>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	0e9b      	lsrs	r3, r3, #26
 8003636:	3301      	adds	r3, #1
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	e017      	b.n	8003674 <HAL_ADC_ConfigChannel+0x438>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	61bb      	str	r3, [r7, #24]
  return result;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	ea42 0103 	orr.w	r1, r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x464>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	3b1e      	subs	r3, #30
 8003698:	051b      	lsls	r3, r3, #20
 800369a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800369e:	e01b      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x49c>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	60fb      	str	r3, [r7, #12]
  return result;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 021f 	and.w	r2, r3, #31
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	3b1e      	subs	r3, #30
 80036d2:	051b      	lsls	r3, r3, #20
 80036d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d8:	430b      	orrs	r3, r1
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6892      	ldr	r2, [r2, #8]
 80036de:	4619      	mov	r1, r3
 80036e0:	f7ff fb7a 	bl	8002dd8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da77      	bge.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ec:	4840      	ldr	r0, [pc, #256]	@ (80037f0 <HAL_ADC_ConfigChannel+0x5b4>)
 80036ee:	f7ff fae5 	bl	8002cbc <LL_ADC_GetCommonPathInternalCh>
 80036f2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f4:	483f      	ldr	r0, [pc, #252]	@ (80037f4 <HAL_ADC_ConfigChannel+0x5b8>)
 80036f6:	f7ff fc0d 	bl	8002f14 <LL_ADC_IsEnabled>
 80036fa:	4604      	mov	r4, r0
 80036fc:	483e      	ldr	r0, [pc, #248]	@ (80037f8 <HAL_ADC_ConfigChannel+0x5bc>)
 80036fe:	f7ff fc09 	bl	8002f14 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	4323      	orrs	r3, r4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d155      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3b      	ldr	r2, [pc, #236]	@ (80037fc <HAL_ADC_ConfigChannel+0x5c0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d122      	bne.n	800375a <HAL_ADC_ConfigChannel+0x51e>
 8003714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11d      	bne.n	800375a <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a35      	ldr	r2, [pc, #212]	@ (80037f8 <HAL_ADC_ConfigChannel+0x5bc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d159      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800372a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800372e:	4619      	mov	r1, r3
 8003730:	482f      	ldr	r0, [pc, #188]	@ (80037f0 <HAL_ADC_ConfigChannel+0x5b4>)
 8003732:	f7ff fab0 	bl	8002c96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003736:	4b32      	ldr	r3, [pc, #200]	@ (8003800 <HAL_ADC_ConfigChannel+0x5c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	4a31      	ldr	r2, [pc, #196]	@ (8003804 <HAL_ADC_ConfigChannel+0x5c8>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	3301      	adds	r3, #1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800374a:	e002      	b.n	8003752 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3b01      	subs	r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003758:	e040      	b.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2a      	ldr	r2, [pc, #168]	@ (8003808 <HAL_ADC_ConfigChannel+0x5cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d111      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x54c>
 8003764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <HAL_ADC_ConfigChannel+0x5bc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d131      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377e:	4619      	mov	r1, r3
 8003780:	481b      	ldr	r0, [pc, #108]	@ (80037f0 <HAL_ADC_ConfigChannel+0x5b4>)
 8003782:	f7ff fa88 	bl	8002c96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003786:	e029      	b.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	@ (800380c <HAL_ADC_ConfigChannel+0x5d0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d124      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
 8003792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11f      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a15      	ldr	r2, [pc, #84]	@ (80037f8 <HAL_ADC_ConfigChannel+0x5bc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d11a      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037ac:	4619      	mov	r1, r3
 80037ae:	4810      	ldr	r0, [pc, #64]	@ (80037f0 <HAL_ADC_ConfigChannel+0x5b4>)
 80037b0:	f7ff fa71 	bl	8002c96 <LL_ADC_SetCommonPathInternalCh>
 80037b4:	e012      	b.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037c8:	e008      	b.n	80037dc <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80037e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3784      	adds	r7, #132	@ 0x84
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}
 80037f0:	40022300 	.word	0x40022300
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40022100 	.word	0x40022100
 80037fc:	cb840000 	.word	0xcb840000
 8003800:	24000004 	.word	0x24000004
 8003804:	053e2d63 	.word	0x053e2d63
 8003808:	bac04000 	.word	0xbac04000
 800380c:	cfb80000 	.word	0xcfb80000

08003810 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003818:	4b60      	ldr	r3, [pc, #384]	@ (800399c <ADC_ConfigureBoostMode+0x18c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01c      	beq.n	800385e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003824:	f003 facc 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 8003828:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003832:	d010      	beq.n	8003856 <ADC_ConfigureBoostMode+0x46>
 8003834:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003838:	d873      	bhi.n	8003922 <ADC_ConfigureBoostMode+0x112>
 800383a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383e:	d002      	beq.n	8003846 <ADC_ConfigureBoostMode+0x36>
 8003840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003844:	d16d      	bne.n	8003922 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0c1b      	lsrs	r3, r3, #16
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	60fb      	str	r3, [r7, #12]
        break;
 8003854:	e068      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	60fb      	str	r3, [r7, #12]
        break;
 800385c:	e064      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800385e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	f004 fcaf 	bl	80081c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800386a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003874:	d051      	beq.n	800391a <ADC_ConfigureBoostMode+0x10a>
 8003876:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800387a:	d854      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 800387c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003880:	d047      	beq.n	8003912 <ADC_ConfigureBoostMode+0x102>
 8003882:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003886:	d84e      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 8003888:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800388c:	d03d      	beq.n	800390a <ADC_ConfigureBoostMode+0xfa>
 800388e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003892:	d848      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 8003894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003898:	d033      	beq.n	8003902 <ADC_ConfigureBoostMode+0xf2>
 800389a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800389e:	d842      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 80038a0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80038a4:	d029      	beq.n	80038fa <ADC_ConfigureBoostMode+0xea>
 80038a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80038aa:	d83c      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 80038ac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80038b0:	d01a      	beq.n	80038e8 <ADC_ConfigureBoostMode+0xd8>
 80038b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80038b6:	d836      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 80038b8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038bc:	d014      	beq.n	80038e8 <ADC_ConfigureBoostMode+0xd8>
 80038be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038c2:	d830      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 80038c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c8:	d00e      	beq.n	80038e8 <ADC_ConfigureBoostMode+0xd8>
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ce:	d82a      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 80038d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038d4:	d008      	beq.n	80038e8 <ADC_ConfigureBoostMode+0xd8>
 80038d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038da:	d824      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x116>
 80038dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e0:	d002      	beq.n	80038e8 <ADC_ConfigureBoostMode+0xd8>
 80038e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038e6:	d11e      	bne.n	8003926 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c9b      	lsrs	r3, r3, #18
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	60fb      	str	r3, [r7, #12]
        break;
 80038f8:	e016      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
        break;
 8003900:	e012      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	60fb      	str	r3, [r7, #12]
        break;
 8003908:	e00e      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	60fb      	str	r3, [r7, #12]
        break;
 8003910:	e00a      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	09db      	lsrs	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]
        break;
 8003918:	e006      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	60fb      	str	r3, [r7, #12]
        break;
 8003920:	e002      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
        break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003926:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a1b      	ldr	r2, [pc, #108]	@ (80039a0 <ADC_ConfigureBoostMode+0x190>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d808      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003944:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003946:	e025      	b.n	8003994 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <ADC_ConfigureBoostMode+0x194>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d80a      	bhi.n	8003966 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	e016      	b.n	8003994 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a0f      	ldr	r2, [pc, #60]	@ (80039a8 <ADC_ConfigureBoostMode+0x198>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d80a      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	609a      	str	r2, [r3, #8]
}
 8003982:	e007      	b.n	8003994 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40022300 	.word	0x40022300
 80039a0:	005f5e10 	.word	0x005f5e10
 80039a4:	00bebc20 	.word	0x00bebc20
 80039a8:	017d7840 	.word	0x017d7840

080039ac <LL_ADC_IsEnabled>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <LL_ADC_IsEnabled+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_ADC_IsEnabled+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d101      	bne.n	80039ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b09f      	sub	sp, #124	@ 0x7c
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e080      	b.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d102      	bne.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a30:	4b3c      	ldr	r3, [pc, #240]	@ (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	e001      	b.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e05f      	b.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ffb9 	bl	80039d2 <LL_ADC_REG_IsConversionOngoing>
 8003a60:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ffb3 	bl	80039d2 <LL_ADC_REG_IsConversionOngoing>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d141      	bne.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d13e      	bne.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a78:	4b2b      	ldr	r3, [pc, #172]	@ (8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a96:	4822      	ldr	r0, [pc, #136]	@ (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003a98:	f7ff ff88 	bl	80039ac <LL_ADC_IsEnabled>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	4821      	ldr	r0, [pc, #132]	@ (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003aa0:	f7ff ff84 	bl	80039ac <LL_ADC_IsEnabled>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4323      	orrs	r3, r4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d12e      	bne.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac4:	e021      	b.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad2:	4813      	ldr	r0, [pc, #76]	@ (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003ad4:	f7ff ff6a 	bl	80039ac <LL_ADC_IsEnabled>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	4812      	ldr	r0, [pc, #72]	@ (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003adc:	f7ff ff66 	bl	80039ac <LL_ADC_IsEnabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4323      	orrs	r3, r4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d110      	bne.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003af2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af4:	e009      	b.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003b08:	e000      	b.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b0a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b14:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	377c      	adds	r7, #124	@ 0x7c
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd90      	pop	{r4, r7, pc}
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40022100 	.word	0x40022100
 8003b28:	40022300 	.word	0x40022300
 8003b2c:	fffff0e0 	.word	0xfffff0e0

08003b30 <__NVIC_SetPriorityGrouping>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <__NVIC_SetPriorityGrouping+0x40>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5e:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <__NVIC_SetPriorityGrouping+0x40>)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	60d3      	str	r3, [r2, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00
 8003b74:	05fa0000 	.word	0x05fa0000

08003b78 <__NVIC_GetPriorityGrouping>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_SetPriority>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db0a      	blt.n	8003bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	490c      	ldr	r1, [pc, #48]	@ (8003be0 <__NVIC_SetPriority+0x4c>)
 8003bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003bbc:	e00a      	b.n	8003bd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4908      	ldr	r1, [pc, #32]	@ (8003be4 <__NVIC_SetPriority+0x50>)
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	761a      	strb	r2, [r3, #24]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000e100 	.word	0xe000e100
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <NVIC_EncodePriority>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f1c3 0307 	rsb	r3, r3, #7
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf28      	it	cs
 8003c06:	2304      	movcs	r3, #4
 8003c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d902      	bls.n	8003c18 <NVIC_EncodePriority+0x30>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3b03      	subs	r3, #3
 8003c16:	e000      	b.n	8003c1a <NVIC_EncodePriority+0x32>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	43d9      	mvns	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	4313      	orrs	r3, r2
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	@ 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c60:	d301      	bcc.n	8003c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c62:	2301      	movs	r3, #1
 8003c64:	e00f      	b.n	8003c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c66:	4a0a      	ldr	r2, [pc, #40]	@ (8003c90 <SysTick_Config+0x40>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c6e:	210f      	movs	r1, #15
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	f7ff ff8e 	bl	8003b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <SysTick_Config+0x40>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c7e:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <SysTick_Config+0x40>)
 8003c80:	2207      	movs	r2, #7
 8003c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	e000e010 	.word	0xe000e010

08003c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff47 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb8:	f7ff ff5e 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff90 	bl	8003be8 <NVIC_EncodePriority>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff5f 	bl	8003b94 <__NVIC_SetPriority>
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffb2 	bl	8003c50 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e04f      	b.n	8003daa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe fc34 	bl	800258c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <HAL_DMA2D_Init+0xbc>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6851      	ldr	r1, [r2, #4]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	69d2      	ldr	r2, [r2, #28]
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <HAL_DMA2D_Init+0xc0>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6891      	ldr	r1, [r2, #8]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6992      	ldr	r2, [r2, #24]
 8003d5a:	4311      	orrs	r1, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <HAL_DMA2D_Init+0xc4>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68d1      	ldr	r1, [r2, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d80:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	051a      	lsls	r2, r3, #20
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	055b      	lsls	r3, r3, #21
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	fff8ffbf 	.word	0xfff8ffbf
 8003db8:	fffffef8 	.word	0xfffffef8
 8003dbc:	ffff0000 	.word	0xffff0000

08003dc0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_DMA2D_Start+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e018      	b.n	8003e0e <HAL_DMA2D_Start+0x4e>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f9a4 	bl	8004144 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d056      	beq.n	8003ee0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e32:	f7fe fecd 	bl	8002bd0 <HAL_GetTick>
 8003e36:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e38:	e04b      	b.n	8003ed2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d023      	beq.n	8003e94 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e5a:	f043 0202 	orr.w	r2, r3, #2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2221      	movs	r2, #33	@ 0x21
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2204      	movs	r2, #4
 8003e84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0a5      	b.n	8003fe0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d01a      	beq.n	8003ed2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	f7fe fe98 	bl	8002bd0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <HAL_DMA2D_PollForTransfer+0x9c>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e086      	b.n	8003fe0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ac      	beq.n	8003e3a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d061      	beq.n	8003fc6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f02:	f7fe fe65 	bl	8002bd0 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f08:	e056      	b.n	8003fb8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02e      	beq.n	8003f7a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f40:	f043 0202 	orr.w	r2, r3, #2
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f56:	f043 0201 	orr.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2229      	movs	r2, #41	@ 0x29
 8003f64:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e032      	b.n	8003fe0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d01a      	beq.n	8003fb8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe fe25 	bl	8002bd0 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <HAL_DMA2D_PollForTransfer+0x182>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10f      	bne.n	8003fb8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e013      	b.n	8003fe0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0a1      	beq.n	8003f0a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2212      	movs	r2, #18
 8003fcc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_DMA2D_ConfigLayer+0x24>
 8004008:	2302      	movs	r3, #2
 800400a:	e092      	b.n	8004132 <HAL_DMA2D_ConfigLayer+0x14a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	3328      	adds	r3, #40	@ 0x28
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004040:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800404c:	4b3c      	ldr	r3, [pc, #240]	@ (8004140 <HAL_DMA2D_ConfigLayer+0x158>)
 800404e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b0a      	cmp	r3, #10
 8004056:	d003      	beq.n	8004060 <HAL_DMA2D_ConfigLayer+0x78>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b09      	cmp	r3, #9
 800405e:	d107      	bne.n	8004070 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	e005      	b.n	800407c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d120      	bne.n	80040c4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	43db      	mvns	r3, r3
 800408c:	ea02 0103 	and.w	r1, r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	430a      	orrs	r2, r1
 8004098:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b0a      	cmp	r3, #10
 80040aa:	d003      	beq.n	80040b4 <HAL_DMA2D_ConfigLayer+0xcc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d135      	bne.n	8004120 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c2:	e02d      	b.n	8004120 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b0b      	cmp	r3, #11
 80040ca:	d109      	bne.n	80040e0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	049b      	lsls	r3, r3, #18
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80040de:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	ea02 0103 	and.w	r1, r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b0a      	cmp	r3, #10
 8004108:	d003      	beq.n	8004112 <HAL_DMA2D_ConfigLayer+0x12a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b09      	cmp	r3, #9
 8004110:	d106      	bne.n	8004120 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800411e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	ff33000f 	.word	0xff33000f

08004144 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004144:	b480      	push	{r7}
 8004146:	b08b      	sub	sp, #44	@ 0x2c
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	041a      	lsls	r2, r3, #16
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800417c:	d174      	bne.n	8004268 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004184:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800418c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004194:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	e053      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d106      	bne.n	80041cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ca:	e048      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d111      	bne.n	80041f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	0cdb      	lsrs	r3, r3, #19
 80041d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	0a9b      	lsrs	r3, r3, #10
 80041de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	08db      	lsrs	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	02db      	lsls	r3, r3, #11
 80041ee:	4313      	orrs	r3, r2
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f6:	e032      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d117      	bne.n	8004230 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	0fdb      	lsrs	r3, r3, #31
 8004204:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	0cdb      	lsrs	r3, r3, #19
 800420a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	0adb      	lsrs	r3, r3, #11
 8004210:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	029b      	lsls	r3, r3, #10
 8004220:	431a      	orrs	r2, r3
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	03db      	lsls	r3, r3, #15
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
 800422e:	e016      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	0f1b      	lsrs	r3, r3, #28
 8004234:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	0d1b      	lsrs	r3, r3, #20
 800423a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	0b1b      	lsrs	r3, r3, #12
 8004240:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	011a      	lsls	r2, r3, #4
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	431a      	orrs	r2, r3
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	4313      	orrs	r3, r2
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004266:	e00d      	b.n	8004284 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004270:	d104      	bne.n	800427c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	615a      	str	r2, [r3, #20]
}
 800427a:	e003      	b.n	8004284 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	60da      	str	r2, [r3, #12]
}
 8004284:	bf00      	nop
 8004286:	372c      	adds	r7, #44	@ 0x2c
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800429e:	4b89      	ldr	r3, [pc, #548]	@ (80044c4 <HAL_GPIO_Init+0x234>)
 80042a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042a2:	e194      	b.n	80045ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2101      	movs	r1, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8186 	beq.w	80045c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d005      	beq.n	80042d4 <HAL_GPIO_Init+0x44>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d130      	bne.n	8004336 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800430a:	2201      	movs	r2, #1
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0201 	and.w	r2, r3, #1
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b03      	cmp	r3, #3
 8004340:	d017      	beq.n	8004372 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d123      	bne.n	80043c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	08da      	lsrs	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3208      	adds	r2, #8
 8004386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	08da      	lsrs	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3208      	adds	r2, #8
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80e0 	beq.w	80045c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004408:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <HAL_GPIO_Init+0x238>)
 800440a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800440e:	4a2e      	ldr	r2, [pc, #184]	@ (80044c8 <HAL_GPIO_Init+0x238>)
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_GPIO_Init+0x238>)
 800441a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004426:	4a29      	ldr	r2, [pc, #164]	@ (80044cc <HAL_GPIO_Init+0x23c>)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a20      	ldr	r2, [pc, #128]	@ (80044d0 <HAL_GPIO_Init+0x240>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d052      	beq.n	80044f8 <HAL_GPIO_Init+0x268>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1f      	ldr	r2, [pc, #124]	@ (80044d4 <HAL_GPIO_Init+0x244>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d031      	beq.n	80044be <HAL_GPIO_Init+0x22e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <HAL_GPIO_Init+0x248>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02b      	beq.n	80044ba <HAL_GPIO_Init+0x22a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1d      	ldr	r2, [pc, #116]	@ (80044dc <HAL_GPIO_Init+0x24c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d025      	beq.n	80044b6 <HAL_GPIO_Init+0x226>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1c      	ldr	r2, [pc, #112]	@ (80044e0 <HAL_GPIO_Init+0x250>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01f      	beq.n	80044b2 <HAL_GPIO_Init+0x222>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <HAL_GPIO_Init+0x254>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d019      	beq.n	80044ae <HAL_GPIO_Init+0x21e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a1a      	ldr	r2, [pc, #104]	@ (80044e8 <HAL_GPIO_Init+0x258>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_GPIO_Init+0x21a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a19      	ldr	r2, [pc, #100]	@ (80044ec <HAL_GPIO_Init+0x25c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00d      	beq.n	80044a6 <HAL_GPIO_Init+0x216>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <HAL_GPIO_Init+0x260>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <HAL_GPIO_Init+0x212>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a17      	ldr	r2, [pc, #92]	@ (80044f4 <HAL_GPIO_Init+0x264>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_GPIO_Init+0x20e>
 800449a:	2309      	movs	r3, #9
 800449c:	e02d      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 800449e:	230a      	movs	r3, #10
 80044a0:	e02b      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044a2:	2308      	movs	r3, #8
 80044a4:	e029      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044a6:	2307      	movs	r3, #7
 80044a8:	e027      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044aa:	2306      	movs	r3, #6
 80044ac:	e025      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044ae:	2305      	movs	r3, #5
 80044b0:	e023      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044b2:	2304      	movs	r3, #4
 80044b4:	e021      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044b6:	2303      	movs	r3, #3
 80044b8:	e01f      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e01d      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044be:	2301      	movs	r3, #1
 80044c0:	e01b      	b.n	80044fa <HAL_GPIO_Init+0x26a>
 80044c2:	bf00      	nop
 80044c4:	58000080 	.word	0x58000080
 80044c8:	58024400 	.word	0x58024400
 80044cc:	58000400 	.word	0x58000400
 80044d0:	58020000 	.word	0x58020000
 80044d4:	58020400 	.word	0x58020400
 80044d8:	58020800 	.word	0x58020800
 80044dc:	58020c00 	.word	0x58020c00
 80044e0:	58021000 	.word	0x58021000
 80044e4:	58021400 	.word	0x58021400
 80044e8:	58021800 	.word	0x58021800
 80044ec:	58021c00 	.word	0x58021c00
 80044f0:	58022000 	.word	0x58022000
 80044f4:	58022400 	.word	0x58022400
 80044f8:	2300      	movs	r3, #0
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	f002 0203 	and.w	r2, r2, #3
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	4093      	lsls	r3, r2
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450a:	4938      	ldr	r1, [pc, #224]	@ (80045ec <HAL_GPIO_Init+0x35c>)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800453e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800456c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4013      	ands	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f ae63 	bne.w	80042a4 <HAL_GPIO_Init+0x14>
  }
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	3724      	adds	r7, #36	@ 0x24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	58000400 	.word	0x58000400

080045f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	887b      	ldrh	r3, [r7, #2]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	e001      	b.n	8004612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800463c:	e003      	b.n	8004646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	619a      	str	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e070      	b.n	8004748 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fd ffa8 	bl	80025d0 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_JPEG_Init+0xfc>)
 80046ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_JPEG_Init+0x100>)
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fc5d 	bl	8004fc0 <JPEG_Set_HuffEnc_Mem>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e018      	b.n	8004748 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004724:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	08010698 	.word	0x08010698
 8004754:	080106d8 	.word	0x080106d8

08004758 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_JPEG_GetInfo+0x16>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e083      	b.n	800487a <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d103      	bne.n	8004788 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e017      	b.n	80047b8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e00c      	b.n	80047b8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d103      	bne.n	80047b4 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2230      	movs	r2, #48	@ 0x30
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e001      	b.n	80047b8 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e060      	b.n	800487a <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d003      	beq.n	80047e4 <HAL_JPEG_GetInfo+0x8c>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b30      	cmp	r3, #48	@ 0x30
 80047e2:	d140      	bne.n	8004866 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d109      	bne.n	8004828 <HAL_JPEG_GetInfo+0xd0>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_JPEG_GetInfo+0xd0>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	e01d      	b.n	8004864 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_JPEG_GetInfo+0xea>
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_JPEG_GetInfo+0xea>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2200      	movs	r2, #0
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	e010      	b.n	8004864 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d109      	bne.n	800485c <HAL_JPEG_GetInfo+0x104>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_JPEG_GetInfo+0x104>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	e003      	b.n	8004864 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004862:	e003      	b.n	800486c <HAL_JPEG_GetInfo+0x114>
 8004864:	e002      	b.n	800486c <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 f975 	bl	8005b5c <JPEG_GetQuality>
 8004872:	4602      	mov	r2, r0
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_JPEG_Decode_DMA+0x20>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_JPEG_Decode_DMA+0x20>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e04c      	b.n	8004940 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_JPEG_Decode_DMA+0x32>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e045      	b.n	8004940 <HAL_JPEG_Decode_DMA+0xbe>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d134      	bne.n	8004932 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2204      	movs	r2, #4
 80048cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f023 020f 	bic.w	r2, r3, #15
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	f043 020e 	orr.w	r2, r3, #14
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fdd9 	bl	80054c4 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fe4a 	bl	80055ac <JPEG_DMA_StartProcess>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2206      	movs	r2, #6
 8004922:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e006      	b.n	8004940 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	e000      	b.n	8004940 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b08b      	sub	sp, #44	@ 0x2c
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e020      	b.n	80049fe <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	4413      	add	r3, r2
 80049cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d0:	d90f      	bls.n	80049f2 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e055      	b.n	8004a82 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	440b      	add	r3, r1
 80049e0:	3201      	adds	r2, #1
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
      p++;
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	3301      	adds	r3, #1
 80049ea:	623b      	str	r3, [r7, #32]
      i--;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	3b01      	subs	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ee      	bne.n	80049d6 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b0f      	cmp	r3, #15
 8004a02:	d9db      	bls.n	80049bc <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	4413      	add	r3, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]
  p = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8004a22:	e027      	b.n	8004a74 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	601a      	str	r2, [r3, #0]
      p++;
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	3301      	adds	r3, #1
 8004a34:	623b      	str	r3, [r7, #32]
      code++;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	4413      	add	r3, r2
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d0eb      	beq.n	8004a24 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b1f      	cmp	r3, #31
 8004a50:	d901      	bls.n	8004a56 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e015      	b.n	8004a82 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004a56:	2201      	movs	r2, #1
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d301      	bcc.n	8004a68 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e00c      	b.n	8004a82 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
    si++;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1dd      	bne.n	8004a3c <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	372c      	adds	r7, #44	@ 0x2c
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004a9a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8004a9e:	6018      	str	r0, [r3, #0]
 8004aa0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004aa4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8004aa8:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004aaa:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004aae:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	f107 0308 	add.w	r3, r7, #8
 8004ab8:	f107 020c 	add.w	r2, r7, #12
 8004abc:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8004ac0:	f7ff ff70 	bl	80049a4 <JPEG_Bits_To_SizeCodes>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8004aca:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004ad2:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8004ad6:	e075      	b.n	8004bc4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8004ade:	e067      	b.n	8004bb0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8004ae0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004ae4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8004aee:	4413      	add	r3, r2
 8004af0:	3310      	adds	r3, #16
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8004af8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004b00:	23a0      	movs	r3, #160	@ 0xa0
 8004b02:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8004b06:	e021      	b.n	8004b4c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004b08:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004b0c:	2bf0      	cmp	r3, #240	@ 0xf0
 8004b0e:	d103      	bne.n	8004b18 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8004b10:	23a1      	movs	r3, #161	@ 0xa1
 8004b12:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8004b16:	e019      	b.n	8004b4c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8004b18:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8004b26:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8004b32:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004b44:	4413      	add	r3, r2
 8004b46:	3b01      	subs	r3, #1
 8004b48:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004b4c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004b50:	2ba1      	cmp	r3, #161	@ 0xa1
 8004b52:	d901      	bls.n	8004b58 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004b54:	2301      	movs	r3, #1
 8004b56:	e035      	b.n	8004bc4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004b58:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004b5c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004b60:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8004b64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b68:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004b6c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004b76:	3328      	adds	r3, #40	@ 0x28
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004b7e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004b82:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004b86:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b2d9      	uxtb	r1, r3
 8004b92:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004b96:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8004ba0:	4413      	add	r3, r2
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	701a      	strb	r2, [r3, #0]
      k++;
 8004ba6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8004baa:	3301      	adds	r3, #1
 8004bac:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8004bb0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8004bb4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d38e      	bcc.n	8004ae0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004bda:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004bde:	6018      	str	r0, [r3, #0]
 8004be0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004be4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004be8:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004bea:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004bee:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8004bf8:	f107 0208 	add.w	r2, r7, #8
 8004bfc:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8004c00:	f7ff fed0 	bl	80049a4 <JPEG_Bits_To_SizeCodes>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8004c0a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004c12:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8004c16:	e048      	b.n	8004caa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8004c1e:	e03d      	b.n	8004c9c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8004c20:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004c24:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8004c2e:	4413      	add	r3, r2
 8004c30:	3310      	adds	r3, #16
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004c38:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004c3c:	2b0b      	cmp	r3, #11
 8004c3e:	d901      	bls.n	8004c44 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004c44:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004c48:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8004c4c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8004c50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c54:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004c58:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004c5c:	6819      	ldr	r1, [r3, #0]
 8004c5e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004c62:	3302      	adds	r3, #2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004c6a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004c6e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8004c72:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8004c76:	4413      	add	r3, r2
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b2d9      	uxtb	r1, r3
 8004c7e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004c82:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8004c8c:	4413      	add	r3, r2
 8004c8e:	460a      	mov	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]
      k++;
 8004c92:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8004c96:	3301      	adds	r3, #1
 8004c98:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8004c9c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8004ca0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d3bb      	bcc.n	8004c20 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b09a      	sub	sp, #104	@ 0x68
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d106      	bne.n	8004cdc <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8004cd6:	3318      	adds	r3, #24
 8004cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cda:	e00f      	b.n	8004cfc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d106      	bne.n	8004cf8 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf6:	e001      	b.n	8004cfc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e059      	b.n	8004db0 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d055      	beq.n	8004dae <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	4619      	mov	r1, r3
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f7ff ff60 	bl	8004bce <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8004d14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d20:	e046      	b.n	8004db0 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8004d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d24:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8004d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d28:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8004d2c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d30:	3304      	adds	r3, #4
 8004d32:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8004d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d36:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8004d3a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8004d40:	e032      	b.n	8004da8 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8004d42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d44:	3b01      	subs	r3, #1
 8004d46:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8004d48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004d4e:	f107 0214 	add.w	r2, r7, #20
 8004d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d54:	4413      	add	r3, r2
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d60:	3302      	adds	r3, #2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	3368      	adds	r3, #104	@ 0x68
 8004d66:	443b      	add	r3, r7
 8004d68:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8004d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d74:	3b01      	subs	r3, #1
 8004d76:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004d78:	f107 0214 	add.w	r2, r7, #20
 8004d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d7e:	4413      	add	r3, r2
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	3368      	adds	r3, #104	@ 0x68
 8004d90:	443b      	add	r3, r7
 8004d92:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9e:	041a      	lsls	r2, r3, #16
 8004da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004da2:	431a      	orrs	r2, r3
 8004da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da6:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d8c9      	bhi.n	8004d42 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3768      	adds	r7, #104	@ 0x68
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004dc4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004dc8:	6018      	str	r0, [r3, #0]
 8004dca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004dce:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8004dd2:	6019      	str	r1, [r3, #0]
 8004dd4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004dd8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8004ddc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004dde:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004de2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dee:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8004df2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d10c      	bne.n	8004e16 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004dfc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004e00:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e0c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004e10:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8004e14:	e01d      	b.n	8004e52 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004e16:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004e1a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8004e26:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8004e2a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10c      	bne.n	8004e4e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004e34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004e38:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8004e44:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004e48:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8004e4c:	e001      	b.n	8004e52 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0a8      	b.n	8004fa4 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8004e52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004e56:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80a0 	beq.w	8004fa2 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004e62:	f107 0214 	add.w	r2, r7, #20
 8004e66:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004e6a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8004e6e:	4611      	mov	r1, r2
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	f7ff fe0c 	bl	8004a8e <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8004e7c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8004e84:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8004e88:	e08c      	b.n	8004fa4 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004e8a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8004e8e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004e98:	e00e      	b.n	8004eb8 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8004e9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004e9e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8004ea2:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004ea4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8004eae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004eb8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d9ec      	bls.n	8004e9a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8004ec0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb0 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8004ec6:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004ec8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ecc:	3304      	adds	r3, #4
 8004ece:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8004ed2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ed6:	4a37      	ldr	r2, [pc, #220]	@ (8004fb4 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8004ed8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004eda:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ede:	3304      	adds	r3, #4
 8004ee0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8004ee4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ee8:	4a33      	ldr	r2, [pc, #204]	@ (8004fb8 <JPEG_Set_HuffAC_Mem+0x200>)
 8004eea:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004eec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8004ef6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8004efa:	4a30      	ldr	r2, [pc, #192]	@ (8004fbc <JPEG_Set_HuffAC_Mem+0x204>)
 8004efc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004efe:	23a2      	movs	r3, #162	@ 0xa2
 8004f00:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8004f04:	e049      	b.n	8004f9a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8004f06:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8004f10:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8004f14:	3b04      	subs	r3, #4
 8004f16:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004f1a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004f1e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8004f22:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004f30:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004f34:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8004f38:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f3c:	3328      	adds	r3, #40	@ 0x28
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8004f4c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004f56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004f5a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8004f5e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f62:	4413      	add	r3, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004f6c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8004f70:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8004f74:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f78:	3328      	adds	r3, #40	@ 0x28
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004f88:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8004f8c:	041a      	lsls	r2, r3, #16
 8004f8e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8004f92:	431a      	orrs	r2, r3
 8004f94:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8004f98:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004f9a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d8b1      	bhi.n	8004f06 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	0fd10fd0 	.word	0x0fd10fd0
 8004fb4:	0fd30fd2 	.word	0x0fd30fd2
 8004fb8:	0fd50fd4 	.word	0x0fd50fd4
 8004fbc:	0fd70fd6 	.word	0x0fd70fd6

08004fc0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f84d 	bl	8005068 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	491f      	ldr	r1, [pc, #124]	@ (8005058 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff feec 	bl	8004db8 <JPEG_Set_HuffAC_Mem>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	e030      	b.n	8005050 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4918      	ldr	r1, [pc, #96]	@ (800505c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fedc 	bl	8004db8 <JPEG_Set_HuffAC_Mem>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	e020      	b.n	8005050 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005016:	461a      	mov	r2, r3
 8005018:	4911      	ldr	r1, [pc, #68]	@ (8005060 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fe4a 	bl	8004cb4 <JPEG_Set_HuffDC_Mem>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	e010      	b.n	8005050 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005036:	461a      	mov	r2, r3
 8005038:	490a      	ldr	r1, [pc, #40]	@ (8005064 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe3a 	bl	8004cb4 <JPEG_Set_HuffDC_Mem>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	e000      	b.n	8005050 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	080104f0 	.word	0x080104f0
 800505c:	080105a4 	.word	0x080105a4
 8005060:	080104b8 	.word	0x080104b8
 8005064:	080104d4 	.word	0x080104d4

08005068 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005068:	b480      	push	{r7}
 800506a:	b08b      	sub	sp, #44	@ 0x2c
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005070:	4b80      	ldr	r3, [pc, #512]	@ (8005274 <JPEG_Set_Huff_DHTMem+0x20c>)
 8005072:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8005074:	4b80      	ldr	r3, [pc, #512]	@ (8005278 <JPEG_Set_Huff_DHTMem+0x210>)
 8005076:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005078:	4b80      	ldr	r3, [pc, #512]	@ (800527c <JPEG_Set_Huff_DHTMem+0x214>)
 800507a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800507c:	4b80      	ldr	r3, [pc, #512]	@ (8005280 <JPEG_Set_Huff_DHTMem+0x218>)
 800507e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005088:	330c      	adds	r3, #12
 800508a:	623b      	str	r3, [r7, #32]
  index = 16;
 800508c:	2310      	movs	r3, #16
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005090:	e01d      	b.n	80050ce <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	3b01      	subs	r3, #1
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	5cd3      	ldrb	r3, [r2, r3]
 800509a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	3b02      	subs	r3, #2
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80050a6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	3b03      	subs	r3, #3
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80050b2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80050b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b6:	3a04      	subs	r2, #4
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80050bc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	601a      	str	r2, [r3, #0]
    address--;
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	3b04      	subs	r3, #4
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d8de      	bhi.n	8005092 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80050dc:	3318      	adds	r3, #24
 80050de:	623b      	str	r3, [r7, #32]
  index = 12;
 80050e0:	230c      	movs	r3, #12
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80050e4:	e021      	b.n	800512a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	3b01      	subs	r3, #1
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	3b02      	subs	r3, #2
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	440b      	add	r3, r1
 80050fa:	7c1b      	ldrb	r3, [r3, #16]
 80050fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	3b03      	subs	r3, #3
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	440b      	add	r3, r1
 8005108:	7c1b      	ldrb	r3, [r3, #16]
 800510a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800510c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	3a04      	subs	r2, #4
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	440a      	add	r2, r1
 8005116:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005118:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	601a      	str	r2, [r3, #0]
    address--;
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	3b04      	subs	r3, #4
 8005122:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	3b04      	subs	r3, #4
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	2b03      	cmp	r3, #3
 800512e:	d8da      	bhi.n	80050e6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005138:	3328      	adds	r3, #40	@ 0x28
 800513a:	623b      	str	r3, [r7, #32]
  index = 16;
 800513c:	2310      	movs	r3, #16
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005140:	e01d      	b.n	800517e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	3b01      	subs	r3, #1
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	5cd3      	ldrb	r3, [r2, r3]
 800514a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	3b02      	subs	r3, #2
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005156:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	3b03      	subs	r3, #3
 800515c:	69f9      	ldr	r1, [r7, #28]
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005162:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005166:	3a04      	subs	r2, #4
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800516c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	601a      	str	r2, [r3, #0]
    address--;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	3b04      	subs	r3, #4
 8005176:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	3b04      	subs	r3, #4
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	2b03      	cmp	r3, #3
 8005182:	d8de      	bhi.n	8005142 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800518c:	33cc      	adds	r3, #204	@ 0xcc
 800518e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b3b      	ldr	r3, [pc, #236]	@ (8005284 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80051a0:	021a      	lsls	r2, r3, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  *address = value;
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	623b      	str	r3, [r7, #32]
  index = 160;
 80051bc:	23a0      	movs	r3, #160	@ 0xa0
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80051c0:	e021      	b.n	8005206 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	3b01      	subs	r3, #1
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	7c1b      	ldrb	r3, [r3, #16]
 80051cc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	3b02      	subs	r3, #2
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	440b      	add	r3, r1
 80051d6:	7c1b      	ldrb	r3, [r3, #16]
 80051d8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80051da:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	3b03      	subs	r3, #3
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	440b      	add	r3, r1
 80051e4:	7c1b      	ldrb	r3, [r3, #16]
 80051e6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80051e8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80051ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ec:	3a04      	subs	r2, #4
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80051f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	601a      	str	r2, [r3, #0]
    address--;
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	3b04      	subs	r3, #4
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	2b03      	cmp	r3, #3
 800520a:	d8da      	bhi.n	80051c2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005214:	33cc      	adds	r3, #204	@ 0xcc
 8005216:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	061a      	lsls	r2, r3, #24
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	431a      	orrs	r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005242:	33dc      	adds	r3, #220	@ 0xdc
 8005244:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b0e      	ldr	r3, [pc, #56]	@ (8005284 <JPEG_Set_Huff_DHTMem+0x21c>)
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	7bdb      	ldrb	r3, [r3, #15]
 8005254:	021a      	lsls	r2, r3, #8
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	7b92      	ldrb	r2, [r2, #14]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	3b04      	subs	r3, #4
 800526c:	623b      	str	r3, [r7, #32]
  index = 12;
 800526e:	230c      	movs	r3, #12
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005272:	e027      	b.n	80052c4 <JPEG_Set_Huff_DHTMem+0x25c>
 8005274:	080104f0 	.word	0x080104f0
 8005278:	080105a4 	.word	0x080105a4
 800527c:	080104b8 	.word	0x080104b8
 8005280:	080104d4 	.word	0x080104d4
 8005284:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	3301      	adds	r3, #1
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005292:	6939      	ldr	r1, [r7, #16]
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	440b      	add	r3, r1
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800529c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	3b01      	subs	r3, #1
 80052a2:	6939      	ldr	r1, [r7, #16]
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80052a8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	3a02      	subs	r2, #2
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80052b2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	601a      	str	r2, [r3, #0]
    address--;
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	3b04      	subs	r3, #4
 80052bc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	3b04      	subs	r3, #4
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d8de      	bhi.n	8005288 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80052d2:	33dc      	adds	r3, #220	@ 0xdc
 80052d4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	7c5b      	ldrb	r3, [r3, #17]
 80052e2:	061a      	lsls	r2, r3, #24
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	7c1b      	ldrb	r3, [r3, #16]
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005300:	33e8      	adds	r3, #232	@ 0xe8
 8005302:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b6d      	ldr	r3, [pc, #436]	@ (80054c0 <JPEG_Set_Huff_DHTMem+0x458>)
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	7edb      	ldrb	r3, [r3, #27]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	7e92      	ldrb	r2, [r2, #26]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	3b04      	subs	r3, #4
 800532a:	623b      	str	r3, [r7, #32]
  index = 8;
 800532c:	2308      	movs	r3, #8
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005330:	e021      	b.n	8005376 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	3301      	adds	r3, #1
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	7c1b      	ldrb	r3, [r3, #16]
 800533c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800533e:	6939      	ldr	r1, [r7, #16]
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	440b      	add	r3, r1
 8005344:	3310      	adds	r3, #16
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800534a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	3b01      	subs	r3, #1
 8005350:	6939      	ldr	r1, [r7, #16]
 8005352:	440b      	add	r3, r1
 8005354:	7c1b      	ldrb	r3, [r3, #16]
 8005356:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005358:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800535a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535c:	3a02      	subs	r2, #2
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	440a      	add	r2, r1
 8005362:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005364:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	601a      	str	r2, [r3, #0]
    address--;
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	3b04      	subs	r3, #4
 800536e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	3b04      	subs	r3, #4
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2b03      	cmp	r3, #3
 800537a:	d8da      	bhi.n	8005332 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005384:	33e8      	adds	r3, #232	@ 0xe8
 8005386:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	061a      	lsls	r2, r3, #24
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	431a      	orrs	r2, r3
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80053b2:	33f8      	adds	r3, #248	@ 0xf8
 80053b4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b41      	ldr	r3, [pc, #260]	@ (80054c0 <JPEG_Set_Huff_DHTMem+0x458>)
 80053bc:	4013      	ands	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	7bdb      	ldrb	r3, [r3, #15]
 80053c4:	021a      	lsls	r2, r3, #8
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	7b92      	ldrb	r2, [r2, #14]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	3b04      	subs	r3, #4
 80053dc:	623b      	str	r3, [r7, #32]
  index = 12;
 80053de:	230c      	movs	r3, #12
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80053e2:	e01d      	b.n	8005420 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	3301      	adds	r3, #1
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80053ee:	69b9      	ldr	r1, [r7, #24]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	440b      	add	r3, r1
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80053f8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	3b01      	subs	r3, #1
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	5ccb      	ldrb	r3, [r1, r3]
 8005402:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005404:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005408:	3a02      	subs	r2, #2
 800540a:	69b9      	ldr	r1, [r7, #24]
 800540c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800540e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	601a      	str	r2, [r3, #0]
    address--;
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	3b04      	subs	r3, #4
 8005418:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	3b04      	subs	r3, #4
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	2b03      	cmp	r3, #3
 8005424:	d8de      	bhi.n	80053e4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800542e:	33f8      	adds	r3, #248	@ 0xf8
 8005430:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	7c5b      	ldrb	r3, [r3, #17]
 800543e:	061a      	lsls	r2, r3, #24
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	431a      	orrs	r2, r3
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	7c1b      	ldrb	r3, [r3, #16]
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800545c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005460:	623b      	str	r3, [r7, #32]
  index = 160;
 8005462:	23a0      	movs	r3, #160	@ 0xa0
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8005466:	e021      	b.n	80054ac <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	3301      	adds	r3, #1
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4413      	add	r3, r2
 8005470:	7c1b      	ldrb	r3, [r3, #16]
 8005472:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	440b      	add	r3, r1
 800547a:	3310      	adds	r3, #16
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005480:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	3b01      	subs	r3, #1
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	440b      	add	r3, r1
 800548a:	7c1b      	ldrb	r3, [r3, #16]
 800548c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800548e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005492:	3a02      	subs	r2, #2
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	440a      	add	r2, r1
 8005498:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800549a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	601a      	str	r2, [r3, #0]
    address--;
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	3b04      	subs	r3, #4
 80054a4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	3b04      	subs	r3, #4
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d8da      	bhi.n	8005468 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	372c      	adds	r7, #44	@ 0x2c
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	ffff0000 	.word	0xffff0000

080054c4 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d108      	bne.n	80054f6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0208 	orr.w	r2, r2, #8
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	e007      	b.n	8005506 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0208 	bic.w	r2, r2, #8
 8005504:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005524:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b08      	cmp	r3, #8
 8005570:	d108      	bne.n	8005584 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8005582:	e00d      	b.n	80055a0 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d107      	bne.n	80055a0 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ba:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c2:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d804      	bhi.n	80055d8 <JPEG_DMA_StartProcess+0x2c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d901      	bls.n	80055dc <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e074      	b.n	80056c6 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <JPEG_DMA_StartProcess+0x124>)
 80055e2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	4a3a      	ldr	r2, [pc, #232]	@ (80056d4 <JPEG_DMA_StartProcess+0x128>)
 80055ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f0:	4a39      	ldr	r2, [pc, #228]	@ (80056d8 <JPEG_DMA_StartProcess+0x12c>)
 80055f2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f8:	4a36      	ldr	r2, [pc, #216]	@ (80056d4 <JPEG_DMA_StartProcess+0x128>)
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005600:	4a36      	ldr	r2, [pc, #216]	@ (80056dc <JPEG_DMA_StartProcess+0x130>)
 8005602:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <JPEG_DMA_StartProcess+0x64>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005614:	f043 0204 	orr.w	r2, r3, #4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e052      	b.n	80056c6 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	68f9      	ldr	r1, [r7, #12]
 800562a:	fbb3 f1f1 	udiv	r1, r3, r1
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	fb00 f101 	mul.w	r1, r0, r1
 8005634:	1a5b      	subs	r3, r3, r1
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	fbb3 f1f1 	udiv	r1, r3, r1
 800564a:	68b8      	ldr	r0, [r7, #8]
 800564c:	fb00 f101 	mul.w	r1, r0, r1
 8005650:	1a5b      	subs	r3, r3, r1
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3344      	adds	r3, #68	@ 0x44
 8005662:	4619      	mov	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	461c      	mov	r4, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	2201      	movs	r2, #1
 8005670:	9200      	str	r2, [sp, #0]
 8005672:	4622      	mov	r2, r4
 8005674:	f000 fad0 	bl	8005c18 <HAL_MDMA_Start_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005682:	f043 0204 	orr.w	r2, r3, #4
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e01b      	b.n	80056c6 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4619      	mov	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3340      	adds	r3, #64	@ 0x40
 800569e:	461c      	mov	r4, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	2201      	movs	r2, #1
 80056a6:	9200      	str	r2, [sp, #0]
 80056a8:	4622      	mov	r2, r4
 80056aa:	f000 fab5 	bl	8005c18 <HAL_MDMA_Start_IT>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	f043 0204 	orr.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd90      	pop	{r4, r7, pc}
 80056ce:	bf00      	nop
 80056d0:	080058f5 	.word	0x080058f5
 80056d4:	08005ae3 	.word	0x08005ae3
 80056d8:	08005a21 	.word	0x08005a21
 80056dc:	08005b33 	.word	0x08005b33

080056e0 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80056f8:	1ad2      	subs	r2, r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	429a      	cmp	r2, r3
 8005708:	d10a      	bne.n	8005720 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69d9      	ldr	r1, [r3, #28]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	461a      	mov	r2, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fb fcfb 	bl	8001110 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	d134      	bne.n	8005798 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69d9      	ldr	r1, [r3, #28]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	461a      	mov	r2, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fb fce5 	bl	8001110 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d103      	bne.n	8005790 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fb fce5 	bl	8001158 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800578e:	e00c      	b.n	80057aa <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff f8fd 	bl	8004990 <HAL_JPEG_EncodeCpltCallback>
}
 8005796:	e008      	b.n	80057aa <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f804 	bl	80057b2 <JPEG_DMA_PollResidualData>
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80057ba:	2310      	movs	r3, #16
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	e04f      	b.n	8005860 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d146      	bne.n	800585a <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d03f      	beq.n	800585a <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e0:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	4413      	add	r3, r2
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	0a19      	lsrs	r1, r3, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	3301      	adds	r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	b2ca      	uxtb	r2, r1
 8005804:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0c19      	lsrs	r1, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	3302      	adds	r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	b2ca      	uxtb	r2, r1
 8005818:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0e19      	lsrs	r1, r3, #24
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	3303      	adds	r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	b2ca      	uxtb	r2, r1
 800582c:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d10a      	bne.n	800585a <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69d9      	ldr	r1, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	461a      	mov	r2, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fc5e 	bl	8001110 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	3b01      	subs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ac      	bne.n	80057c0 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586a:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <JPEG_DMA_PollResidualData+0xd2>
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d133      	bne.n	80058ec <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	461a      	mov	r2, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fb fc32 	bl	8001110 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058bc:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb fc3a 	bl	8001158 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 80058e4:	e002      	b.n	80058ec <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff f852 	bl	8004990 <HAL_JPEG_EncodeCpltCallback>
}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005910:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005916:	f248 030c 	movw	r3, #32780	@ 0x800c
 800591a:	4013      	ands	r3, r2
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d17c      	bne.n	8005a1a <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4619      	mov	r1, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fb fba6 	bl	8001094 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d81f      	bhi.n	8005992 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2206      	movs	r2, #6
 8005968:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7fb fbe9 	bl	8001144 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8005972:	e052      	b.n	8005a1a <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	fbb3 f1f1 	udiv	r1, r3, r1
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	fb00 f101 	mul.w	r1, r0, r1
 8005988:	1a5b      	subs	r3, r3, r1
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005990:	e010      	b.n	80059b4 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d006      	beq.n	80059b4 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	089b      	lsrs	r3, r3, #2
 80059ac:	3301      	adds	r3, #1
 80059ae:	009a      	lsls	r2, r3, #2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d124      	bne.n	8005a0a <JPEG_MDMAInCpltCallback+0x116>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	4619      	mov	r1, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3340      	adds	r3, #64	@ 0x40
 80059d8:	461c      	mov	r4, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	2201      	movs	r2, #1
 80059e0:	9200      	str	r2, [sp, #0]
 80059e2:	4622      	mov	r2, r4
 80059e4:	f000 f918 	bl	8005c18 <HAL_MDMA_Start_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f2:	f043 0204 	orr.w	r2, r3, #4
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2206      	movs	r2, #6
 80059fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7fb fb9e 	bl	8001144 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8005a08:	e007      	b.n	8005a1a <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd90      	pop	{r4, r7, pc}

08005a20 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a42:	f248 030c 	movw	r3, #32780	@ 0x800c
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d147      	bne.n	8005adc <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d138      	bne.n	8005acc <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	69d9      	ldr	r1, [r3, #28]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	461a      	mov	r2, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7fb fb49 	bl	8001110 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d120      	bne.n	8005acc <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3344      	adds	r3, #68	@ 0x44
 8005a94:	4619      	mov	r1, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	461c      	mov	r4, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	9200      	str	r2, [sp, #0]
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	f000 f8b7 	bl	8005c18 <HAL_MDMA_Start_IT>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab4:	f043 0204 	orr.w	r2, r3, #4
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2206      	movs	r2, #6
 8005ac0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7fb fb3d 	bl	8001144 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8005aca:	e007      	b.n	8005adc <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd90      	pop	{r4, r7, pc}

08005ae2 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1c:	f043 0204 	orr.w	r2, r3, #4
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7fb fb0d 	bl	8001144 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fdc7 	bl	80056e0 <JPEG_DMA_EndProcess>
  }
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b08b      	sub	sp, #44	@ 0x2c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3350      	adds	r3, #80	@ 0x50
 8005b6e:	61bb      	str	r3, [r7, #24]

  i = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005b74:	e042      	b.n	8005bfc <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e033      	b.n	8005bea <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d103      	bne.n	8005b9e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	3364      	adds	r3, #100	@ 0x64
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9c:	e022      	b.n	8005be4 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2264      	movs	r2, #100	@ 0x64
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005baa:	6a38      	ldr	r0, [r7, #32]
 8005bac:	69f9      	ldr	r1, [r7, #28]
 8005bae:	4401      	add	r1, r0
 8005bb0:	4818      	ldr	r0, [pc, #96]	@ (8005c14 <JPEG_GetQuality+0xb8>)
 8005bb2:	5c41      	ldrb	r1, [r0, r1]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b64      	cmp	r3, #100	@ 0x64
 8005bc2:	d807      	bhi.n	8005bd4 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bce:	4413      	add	r3, r2
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd2:	e007      	b.n	8005be4 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8005bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be0:	4413      	add	r3, r2
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3301      	adds	r3, #1
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d9c8      	bls.n	8005b82 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b3c      	cmp	r3, #60	@ 0x3c
 8005c00:	d9b9      	bls.n	8005b76 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	099b      	lsrs	r3, r3, #6
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	372c      	adds	r7, #44	@ 0x2c
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	08010658 	.word	0x08010658

08005c18 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e070      	b.n	8005d12 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_MDMA_Start_IT+0x26>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e069      	b.n	8005d12 <HAL_MDMA_Start_IT+0xfa>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d158      	bne.n	8005d04 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f84e 	bl	8005d1c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0206 	orr.w	r2, r2, #6
 8005c8e:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0210 	orr.w	r2, r2, #16
 8005ca6:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0208 	orr.w	r2, r2, #8
 8005cbe:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0220 	orr.w	r2, r2, #32
 8005cd6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf0:	d10e      	bne.n	8005d10 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e005      	b.n	8005d10 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e000      	b.n	8005d12 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	4b31      	ldr	r3, [pc, #196]	@ (8005df8 <MDMA_SetConfig+0xdc>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	051a      	lsls	r2, r3, #20
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	221f      	movs	r2, #31
 8005d60:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005d78:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d80:	d002      	beq.n	8005d88 <MDMA_SetConfig+0x6c>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d108      	bne.n	8005d9a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d98:	e007      	b.n	8005daa <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005da8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005db0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005db8:	d002      	beq.n	8005dc0 <MDMA_SetConfig+0xa4>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005dce:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dd0:	e007      	b.n	8005de2 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005de0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005dec:	bf00      	nop
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	fffe0000 	.word	0xfffe0000

08005dfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a04      	ldr	r2, [pc, #16]	@ (8005e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	58024800 	.word	0x58024800

08005e1c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005e28:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <HAL_PWR_EnterSTOPMode+0x64>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f023 0201 	bic.w	r2, r3, #1
 8005e30:	4913      	ldr	r1, [pc, #76]	@ (8005e80 <HAL_PWR_EnterSTOPMode+0x64>)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <HAL_PWR_EnterSTOPMode+0x64>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	4a10      	ldr	r2, [pc, #64]	@ (8005e80 <HAL_PWR_EnterSTOPMode+0x64>)
 8005e3e:	f023 0305 	bic.w	r3, r3, #5
 8005e42:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005e44:	4b0f      	ldr	r3, [pc, #60]	@ (8005e84 <HAL_PWR_EnterSTOPMode+0x68>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	4a0e      	ldr	r2, [pc, #56]	@ (8005e84 <HAL_PWR_EnterSTOPMode+0x68>)
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e50:	f3bf 8f4f 	dsb	sy
}
 8005e54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e56:	f3bf 8f6f 	isb	sy
}
 8005e5a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_PWR_EnterSTOPMode+0x4a>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8005e62:	bf30      	wfi
 8005e64:	e000      	b.n	8005e68 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8005e66:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005e68:	4b06      	ldr	r3, [pc, #24]	@ (8005e84 <HAL_PWR_EnterSTOPMode+0x68>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4a05      	ldr	r2, [pc, #20]	@ (8005e84 <HAL_PWR_EnterSTOPMode+0x68>)
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6113      	str	r3, [r2, #16]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	58024800 	.word	0x58024800
 8005e84:	e000ed00 	.word	0xe000ed00

08005e88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e90:	4b19      	ldr	r3, [pc, #100]	@ (8005ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e9c:	4b16      	ldr	r3, [pc, #88]	@ (8005ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d001      	beq.n	8005eae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e01f      	b.n	8005eee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e01d      	b.n	8005eee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f023 0207 	bic.w	r2, r3, #7
 8005eba:	490f      	ldr	r1, [pc, #60]	@ (8005ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ec2:	f7fc fe85 	bl	8002bd0 <HAL_GetTick>
 8005ec6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ec8:	e009      	b.n	8005ede <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005eca:	f7fc fe81 	bl	8002bd0 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ed8:	d901      	bls.n	8005ede <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e007      	b.n	8005eee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ede:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eea:	d1ee      	bne.n	8005eca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	58024800 	.word	0x58024800

08005efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	@ 0x30
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f000 bc1f 	b.w	800674e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80b3 	beq.w	8006084 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f1e:	4b95      	ldr	r3, [pc, #596]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f28:	4b92      	ldr	r3, [pc, #584]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d007      	beq.n	8005f44 <HAL_RCC_OscConfig+0x48>
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	2b18      	cmp	r3, #24
 8005f38:	d112      	bne.n	8005f60 <HAL_RCC_OscConfig+0x64>
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d10d      	bne.n	8005f60 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	4b8b      	ldr	r3, [pc, #556]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8098 	beq.w	8006082 <HAL_RCC_OscConfig+0x186>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 8093 	bne.w	8006082 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e3f6      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f68:	d106      	bne.n	8005f78 <HAL_RCC_OscConfig+0x7c>
 8005f6a:	4b82      	ldr	r3, [pc, #520]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a81      	ldr	r2, [pc, #516]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e058      	b.n	800602a <HAL_RCC_OscConfig+0x12e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d112      	bne.n	8005fa6 <HAL_RCC_OscConfig+0xaa>
 8005f80:	4b7c      	ldr	r3, [pc, #496]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7b      	ldr	r2, [pc, #492]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	4b79      	ldr	r3, [pc, #484]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a78      	ldr	r2, [pc, #480]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f92:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4b76      	ldr	r3, [pc, #472]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a75      	ldr	r2, [pc, #468]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e041      	b.n	800602a <HAL_RCC_OscConfig+0x12e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fae:	d112      	bne.n	8005fd6 <HAL_RCC_OscConfig+0xda>
 8005fb0:	4b70      	ldr	r3, [pc, #448]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a6f      	ldr	r2, [pc, #444]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6c      	ldr	r2, [pc, #432]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a69      	ldr	r2, [pc, #420]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e029      	b.n	800602a <HAL_RCC_OscConfig+0x12e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005fde:	d112      	bne.n	8006006 <HAL_RCC_OscConfig+0x10a>
 8005fe0:	4b64      	ldr	r3, [pc, #400]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a63      	ldr	r2, [pc, #396]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fe6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	4b61      	ldr	r3, [pc, #388]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a60      	ldr	r2, [pc, #384]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8005ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e011      	b.n	800602a <HAL_RCC_OscConfig+0x12e>
 8006006:	4b5b      	ldr	r3, [pc, #364]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5a      	ldr	r2, [pc, #360]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4b58      	ldr	r3, [pc, #352]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a57      	ldr	r2, [pc, #348]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006018:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	4b55      	ldr	r3, [pc, #340]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a54      	ldr	r2, [pc, #336]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006024:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006028:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d013      	beq.n	800605a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fc fdcd 	bl	8002bd0 <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800603a:	f7fc fdc9 	bl	8002bd0 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b64      	cmp	r3, #100	@ 0x64
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e380      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800604c:	4b49      	ldr	r3, [pc, #292]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f0      	beq.n	800603a <HAL_RCC_OscConfig+0x13e>
 8006058:	e014      	b.n	8006084 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605a:	f7fc fdb9 	bl	8002bd0 <HAL_GetTick>
 800605e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006062:	f7fc fdb5 	bl	8002bd0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b64      	cmp	r3, #100	@ 0x64
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e36c      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006074:	4b3f      	ldr	r3, [pc, #252]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f0      	bne.n	8006062 <HAL_RCC_OscConfig+0x166>
 8006080:	e000      	b.n	8006084 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006082:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 808c 	beq.w	80061aa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006092:	4b38      	ldr	r3, [pc, #224]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800609a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800609c:	4b35      	ldr	r3, [pc, #212]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d007      	beq.n	80060b8 <HAL_RCC_OscConfig+0x1bc>
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b18      	cmp	r3, #24
 80060ac:	d137      	bne.n	800611e <HAL_RCC_OscConfig+0x222>
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d132      	bne.n	800611e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_OscConfig+0x1d4>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e33e      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060d0:	4b28      	ldr	r3, [pc, #160]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f023 0219 	bic.w	r2, r3, #25
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4925      	ldr	r1, [pc, #148]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc fd75 	bl	8002bd0 <HAL_GetTick>
 80060e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ea:	f7fc fd71 	bl	8002bd0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e328      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006108:	4b1a      	ldr	r3, [pc, #104]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	4917      	ldr	r1, [pc, #92]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006118:	4313      	orrs	r3, r2
 800611a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800611c:	e045      	b.n	80061aa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d028      	beq.n	8006178 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 0219 	bic.w	r2, r3, #25
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4910      	ldr	r1, [pc, #64]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fc fd4a 	bl	8002bd0 <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006140:	f7fc fd46 	bl	8002bd0 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e2fd      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006152:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615e:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	4901      	ldr	r1, [pc, #4]	@ (8006174 <HAL_RCC_OscConfig+0x278>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
 8006172:	e01a      	b.n	80061aa <HAL_RCC_OscConfig+0x2ae>
 8006174:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006178:	4b97      	ldr	r3, [pc, #604]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a96      	ldr	r2, [pc, #600]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800617e:	f023 0301 	bic.w	r3, r3, #1
 8006182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fc fd24 	bl	8002bd0 <HAL_GetTick>
 8006188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618c:	f7fc fd20 	bl	8002bd0 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e2d7      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800619e:	4b8e      	ldr	r3, [pc, #568]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d06a      	beq.n	800628c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b6:	4b88      	ldr	r3, [pc, #544]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061c0:	4b85      	ldr	r3, [pc, #532]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d007      	beq.n	80061dc <HAL_RCC_OscConfig+0x2e0>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b18      	cmp	r3, #24
 80061d0:	d11b      	bne.n	800620a <HAL_RCC_OscConfig+0x30e>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d116      	bne.n	800620a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061dc:	4b7e      	ldr	r3, [pc, #504]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_OscConfig+0x2f8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	2b80      	cmp	r3, #128	@ 0x80
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e2ac      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061f4:	4b78      	ldr	r3, [pc, #480]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	061b      	lsls	r3, r3, #24
 8006202:	4975      	ldr	r1, [pc, #468]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006204:	4313      	orrs	r3, r2
 8006206:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006208:	e040      	b.n	800628c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d023      	beq.n	800625a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006212:	4b71      	ldr	r3, [pc, #452]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a70      	ldr	r2, [pc, #448]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621e:	f7fc fcd7 	bl	8002bd0 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006226:	f7fc fcd3 	bl	8002bd0 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e28a      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006238:	4b67      	ldr	r3, [pc, #412]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006244:	4b64      	ldr	r3, [pc, #400]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	4961      	ldr	r1, [pc, #388]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	60cb      	str	r3, [r1, #12]
 8006258:	e018      	b.n	800628c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800625a:	4b5f      	ldr	r3, [pc, #380]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5e      	ldr	r2, [pc, #376]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fc fcb3 	bl	8002bd0 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800626e:	f7fc fcaf 	bl	8002bd0 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e266      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006280:	4b55      	ldr	r3, [pc, #340]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f0      	bne.n	800626e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d036      	beq.n	8006306 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d019      	beq.n	80062d4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062a0:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a4:	4a4c      	ldr	r2, [pc, #304]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fc fc90 	bl	8002bd0 <HAL_GetTick>
 80062b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b4:	f7fc fc8c 	bl	8002bd0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e243      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062c6:	4b44      	ldr	r3, [pc, #272]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0x3b8>
 80062d2:	e018      	b.n	8006306 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062d4:	4b40      	ldr	r3, [pc, #256]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d8:	4a3f      	ldr	r2, [pc, #252]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fc fc76 	bl	8002bd0 <HAL_GetTick>
 80062e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062e8:	f7fc fc72 	bl	8002bd0 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e229      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062fa:	4b37      	ldr	r3, [pc, #220]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d036      	beq.n	8006380 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d019      	beq.n	800634e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800631a:	4b2f      	ldr	r3, [pc, #188]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2e      	ldr	r2, [pc, #184]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006326:	f7fc fc53 	bl	8002bd0 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800632e:	f7fc fc4f 	bl	8002bd0 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e206      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006340:	4b25      	ldr	r3, [pc, #148]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x432>
 800634c:	e018      	b.n	8006380 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800634e:	4b22      	ldr	r3, [pc, #136]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006358:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800635a:	f7fc fc39 	bl	8002bd0 <HAL_GetTick>
 800635e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006362:	f7fc fc35 	bl	8002bd0 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e1ec      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006374:	4b18      	ldr	r3, [pc, #96]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1f0      	bne.n	8006362 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80af 	beq.w	80064ec <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800638e:	4b13      	ldr	r3, [pc, #76]	@ (80063dc <HAL_RCC_OscConfig+0x4e0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a12      	ldr	r2, [pc, #72]	@ (80063dc <HAL_RCC_OscConfig+0x4e0>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800639a:	f7fc fc19 	bl	8002bd0 <HAL_GetTick>
 800639e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a2:	f7fc fc15 	bl	8002bd0 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b64      	cmp	r3, #100	@ 0x64
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e1cc      	b.n	800674e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063b4:	4b09      	ldr	r3, [pc, #36]	@ (80063dc <HAL_RCC_OscConfig+0x4e0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10b      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4e4>
 80063c8:	4b03      	ldr	r3, [pc, #12]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063cc:	4a02      	ldr	r2, [pc, #8]	@ (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d4:	e05b      	b.n	800648e <HAL_RCC_OscConfig+0x592>
 80063d6:	bf00      	nop
 80063d8:	58024400 	.word	0x58024400
 80063dc:	58024800 	.word	0x58024800
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d112      	bne.n	800640e <HAL_RCC_OscConfig+0x512>
 80063e8:	4b9d      	ldr	r3, [pc, #628]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ec:	4a9c      	ldr	r2, [pc, #624]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f4:	4b9a      	ldr	r3, [pc, #616]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f8:	4a99      	ldr	r2, [pc, #612]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80063fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006400:	4b97      	ldr	r3, [pc, #604]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006404:	4a96      	ldr	r2, [pc, #600]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006406:	f023 0304 	bic.w	r3, r3, #4
 800640a:	6713      	str	r3, [r2, #112]	@ 0x70
 800640c:	e03f      	b.n	800648e <HAL_RCC_OscConfig+0x592>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b05      	cmp	r3, #5
 8006414:	d112      	bne.n	800643c <HAL_RCC_OscConfig+0x540>
 8006416:	4b92      	ldr	r3, [pc, #584]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641a:	4a91      	ldr	r2, [pc, #580]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	6713      	str	r3, [r2, #112]	@ 0x70
 8006422:	4b8f      	ldr	r3, [pc, #572]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	4a8e      	ldr	r2, [pc, #568]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642c:	6713      	str	r3, [r2, #112]	@ 0x70
 800642e:	4b8c      	ldr	r3, [pc, #560]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	4a8b      	ldr	r2, [pc, #556]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	6713      	str	r3, [r2, #112]	@ 0x70
 800643a:	e028      	b.n	800648e <HAL_RCC_OscConfig+0x592>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b85      	cmp	r3, #133	@ 0x85
 8006442:	d112      	bne.n	800646a <HAL_RCC_OscConfig+0x56e>
 8006444:	4b86      	ldr	r3, [pc, #536]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006448:	4a85      	ldr	r2, [pc, #532]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800644a:	f043 0304 	orr.w	r3, r3, #4
 800644e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006450:	4b83      	ldr	r3, [pc, #524]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006454:	4a82      	ldr	r2, [pc, #520]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645a:	6713      	str	r3, [r2, #112]	@ 0x70
 800645c:	4b80      	ldr	r3, [pc, #512]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006460:	4a7f      	ldr	r2, [pc, #508]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6713      	str	r3, [r2, #112]	@ 0x70
 8006468:	e011      	b.n	800648e <HAL_RCC_OscConfig+0x592>
 800646a:	4b7d      	ldr	r3, [pc, #500]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	4a7c      	ldr	r2, [pc, #496]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6713      	str	r3, [r2, #112]	@ 0x70
 8006476:	4b7a      	ldr	r3, [pc, #488]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	4a79      	ldr	r2, [pc, #484]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800647c:	f023 0304 	bic.w	r3, r3, #4
 8006480:	6713      	str	r3, [r2, #112]	@ 0x70
 8006482:	4b77      	ldr	r3, [pc, #476]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006486:	4a76      	ldr	r2, [pc, #472]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800648c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d015      	beq.n	80064c2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006496:	f7fc fb9b 	bl	8002bd0 <HAL_GetTick>
 800649a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800649c:	e00a      	b.n	80064b4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800649e:	f7fc fb97 	bl	8002bd0 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e14c      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0ee      	beq.n	800649e <HAL_RCC_OscConfig+0x5a2>
 80064c0:	e014      	b.n	80064ec <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c2:	f7fc fb85 	bl	8002bd0 <HAL_GetTick>
 80064c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fc fb81 	bl	8002bd0 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e136      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064e0:	4b5f      	ldr	r3, [pc, #380]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1ee      	bne.n	80064ca <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 812b 	beq.w	800674c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064fe:	2b18      	cmp	r3, #24
 8006500:	f000 80bb 	beq.w	800667a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	2b02      	cmp	r3, #2
 800650a:	f040 8095 	bne.w	8006638 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650e:	4b54      	ldr	r3, [pc, #336]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a53      	ldr	r2, [pc, #332]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006514:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651a:	f7fc fb59 	bl	8002bd0 <HAL_GetTick>
 800651e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006522:	f7fc fb55 	bl	8002bd0 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e10c      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006534:	4b4a      	ldr	r3, [pc, #296]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f0      	bne.n	8006522 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006540:	4b47      	ldr	r3, [pc, #284]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006542:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006544:	4b47      	ldr	r3, [pc, #284]	@ (8006664 <HAL_RCC_OscConfig+0x768>)
 8006546:	4013      	ands	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006550:	0112      	lsls	r2, r2, #4
 8006552:	430a      	orrs	r2, r1
 8006554:	4942      	ldr	r1, [pc, #264]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006556:	4313      	orrs	r3, r2
 8006558:	628b      	str	r3, [r1, #40]	@ 0x28
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	3b01      	subs	r3, #1
 8006560:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006568:	3b01      	subs	r3, #1
 800656a:	025b      	lsls	r3, r3, #9
 800656c:	b29b      	uxth	r3, r3
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	3b01      	subs	r3, #1
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006582:	3b01      	subs	r3, #1
 8006584:	061b      	lsls	r3, r3, #24
 8006586:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800658a:	4935      	ldr	r1, [pc, #212]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800658c:	4313      	orrs	r3, r2
 800658e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006590:	4b33      	ldr	r3, [pc, #204]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	4a32      	ldr	r2, [pc, #200]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800659c:	4b30      	ldr	r3, [pc, #192]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800659e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065a0:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <HAL_RCC_OscConfig+0x76c>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065a8:	00d2      	lsls	r2, r2, #3
 80065aa:	492d      	ldr	r1, [pc, #180]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b4:	f023 020c 	bic.w	r2, r3, #12
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065bc:	4928      	ldr	r1, [pc, #160]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065c2:	4b27      	ldr	r3, [pc, #156]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	f023 0202 	bic.w	r2, r3, #2
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	4924      	ldr	r1, [pc, #144]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065d4:	4b22      	ldr	r3, [pc, #136]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	4a21      	ldr	r2, [pc, #132]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065f8:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	4a18      	ldr	r2, [pc, #96]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006604:	4b16      	ldr	r3, [pc, #88]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a15      	ldr	r2, [pc, #84]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800660a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800660e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fc fade 	bl	8002bd0 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006618:	f7fc fada 	bl	8002bd0 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e091      	b.n	800674e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x71c>
 8006636:	e089      	b.n	800674c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006638:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a08      	ldr	r2, [pc, #32]	@ (8006660 <HAL_RCC_OscConfig+0x764>)
 800663e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7fc fac4 	bl	8002bd0 <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800664a:	e00f      	b.n	800666c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800664c:	f7fc fac0 	bl	8002bd0 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d908      	bls.n	800666c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e077      	b.n	800674e <HAL_RCC_OscConfig+0x852>
 800665e:	bf00      	nop
 8006660:	58024400 	.word	0x58024400
 8006664:	fffffc0c 	.word	0xfffffc0c
 8006668:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800666c:	4b3a      	ldr	r3, [pc, #232]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e9      	bne.n	800664c <HAL_RCC_OscConfig+0x750>
 8006678:	e068      	b.n	800674c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800667a:	4b37      	ldr	r3, [pc, #220]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006680:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 8006682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006684:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	2b01      	cmp	r3, #1
 800668c:	d031      	beq.n	80066f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f003 0203 	and.w	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d12a      	bne.n	80066f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	091b      	lsrs	r3, r3, #4
 80066a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d122      	bne.n	80066f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d11a      	bne.n	80066f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0a5b      	lsrs	r3, r3, #9
 80066c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d111      	bne.n	80066f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	0c1b      	lsrs	r3, r3, #16
 80066d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d108      	bne.n	80066f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	0e1b      	lsrs	r3, r3, #24
 80066e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d001      	beq.n	80066f6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e02b      	b.n	800674e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066f6:	4b18      	ldr	r3, [pc, #96]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 80066f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006700:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d01f      	beq.n	800674c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800670c:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006718:	f7fc fa5a 	bl	8002bd0 <HAL_GetTick>
 800671c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800671e:	bf00      	nop
 8006720:	f7fc fa56 	bl	8002bd0 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	4293      	cmp	r3, r2
 800672a:	d0f9      	beq.n	8006720 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 800672e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006730:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_RCC_OscConfig+0x860>)
 8006732:	4013      	ands	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006738:	00d2      	lsls	r2, r2, #3
 800673a:	4907      	ldr	r1, [pc, #28]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 800673c:	4313      	orrs	r3, r2
 800673e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006740:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	4a04      	ldr	r2, [pc, #16]	@ (8006758 <HAL_RCC_OscConfig+0x85c>)
 8006746:	f043 0301 	orr.w	r3, r3, #1
 800674a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3730      	adds	r7, #48	@ 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	58024400 	.word	0x58024400
 800675c:	ffff0007 	.word	0xffff0007

08006760 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e19c      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006774:	4b8a      	ldr	r3, [pc, #552]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d910      	bls.n	80067a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b87      	ldr	r3, [pc, #540]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 020f 	bic.w	r2, r3, #15
 800678a:	4985      	ldr	r1, [pc, #532]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b83      	ldr	r3, [pc, #524]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e184      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	4b7b      	ldr	r3, [pc, #492]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067bc:	429a      	cmp	r2, r3
 80067be:	d908      	bls.n	80067d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067c0:	4b78      	ldr	r3, [pc, #480]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4975      	ldr	r1, [pc, #468]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	4b70      	ldr	r3, [pc, #448]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d908      	bls.n	8006800 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ee:	4b6d      	ldr	r3, [pc, #436]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	496a      	ldr	r1, [pc, #424]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d010      	beq.n	800682e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	4b64      	ldr	r3, [pc, #400]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006818:	429a      	cmp	r2, r3
 800681a:	d908      	bls.n	800682e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800681c:	4b61      	ldr	r3, [pc, #388]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	495e      	ldr	r1, [pc, #376]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	4b59      	ldr	r3, [pc, #356]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006846:	429a      	cmp	r2, r3
 8006848:	d908      	bls.n	800685c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800684a:	4b56      	ldr	r3, [pc, #344]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	4953      	ldr	r1, [pc, #332]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006858:	4313      	orrs	r3, r2
 800685a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d010      	beq.n	800688a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	429a      	cmp	r2, r3
 8006876:	d908      	bls.n	800688a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006878:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f023 020f 	bic.w	r2, r3, #15
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4947      	ldr	r1, [pc, #284]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d055      	beq.n	8006942 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006896:	4b43      	ldr	r3, [pc, #268]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4940      	ldr	r1, [pc, #256]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068b0:	4b3c      	ldr	r3, [pc, #240]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d121      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0f6      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068c8:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d115      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0ea      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d107      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068e0:	4b30      	ldr	r3, [pc, #192]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0de      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068f0:	4b2c      	ldr	r3, [pc, #176]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0d6      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006900:	4b28      	ldr	r3, [pc, #160]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f023 0207 	bic.w	r2, r3, #7
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4925      	ldr	r1, [pc, #148]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800690e:	4313      	orrs	r3, r2
 8006910:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006912:	f7fc f95d 	bl	8002bd0 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006918:	e00a      	b.n	8006930 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800691a:	f7fc f959 	bl	8002bd0 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e0be      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006930:	4b1c      	ldr	r3, [pc, #112]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	429a      	cmp	r2, r3
 8006940:	d1eb      	bne.n	800691a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d010      	beq.n	8006970 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	429a      	cmp	r2, r3
 800695c:	d208      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800695e:	4b11      	ldr	r3, [pc, #68]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f023 020f 	bic.w	r2, r3, #15
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	490e      	ldr	r1, [pc, #56]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800696c:	4313      	orrs	r3, r2
 800696e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d214      	bcs.n	80069a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	4b08      	ldr	r3, [pc, #32]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 020f 	bic.w	r2, r3, #15
 8006986:	4906      	ldr	r1, [pc, #24]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4313      	orrs	r3, r2
 800698c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800698e:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e086      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
 80069a0:	52002000 	.word	0x52002000
 80069a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d208      	bcs.n	80069d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069c4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4939      	ldr	r1, [pc, #228]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d010      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	4b34      	ldr	r3, [pc, #208]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d208      	bcs.n	8006a04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069f2:	4b31      	ldr	r3, [pc, #196]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	492e      	ldr	r1, [pc, #184]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d010      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	4b28      	ldr	r3, [pc, #160]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d208      	bcs.n	8006a32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a20:	4b25      	ldr	r3, [pc, #148]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4922      	ldr	r1, [pc, #136]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69da      	ldr	r2, [r3, #28]
 8006a42:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d208      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	4917      	ldr	r1, [pc, #92]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006a60:	f000 f834 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	4912      	ldr	r1, [pc, #72]	@ (8006abc <HAL_RCC_ClockConfig+0x35c>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	4a0d      	ldr	r2, [pc, #52]	@ (8006abc <HAL_RCC_ClockConfig+0x35c>)
 8006a88:	5cd3      	ldrb	r3, [r2, r3]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac0 <HAL_RCC_ClockConfig+0x360>)
 8006a96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a98:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac4 <HAL_RCC_ClockConfig+0x364>)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac8 <HAL_RCC_ClockConfig+0x368>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fc f84a 	bl	8002b3c <HAL_InitTick>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	080104a8 	.word	0x080104a8
 8006ac0:	24000008 	.word	0x24000008
 8006ac4:	24000004 	.word	0x24000004
 8006ac8:	2400000c 	.word	0x2400000c

08006acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ad2:	4bb3      	ldr	r3, [pc, #716]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ada:	2b18      	cmp	r3, #24
 8006adc:	f200 8155 	bhi.w	8006d8a <HAL_RCC_GetSysClockFreq+0x2be>
 8006ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006d8b 	.word	0x08006d8b
 8006af0:	08006d8b 	.word	0x08006d8b
 8006af4:	08006d8b 	.word	0x08006d8b
 8006af8:	08006d8b 	.word	0x08006d8b
 8006afc:	08006d8b 	.word	0x08006d8b
 8006b00:	08006d8b 	.word	0x08006d8b
 8006b04:	08006d8b 	.word	0x08006d8b
 8006b08:	08006b73 	.word	0x08006b73
 8006b0c:	08006d8b 	.word	0x08006d8b
 8006b10:	08006d8b 	.word	0x08006d8b
 8006b14:	08006d8b 	.word	0x08006d8b
 8006b18:	08006d8b 	.word	0x08006d8b
 8006b1c:	08006d8b 	.word	0x08006d8b
 8006b20:	08006d8b 	.word	0x08006d8b
 8006b24:	08006d8b 	.word	0x08006d8b
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006d8b 	.word	0x08006d8b
 8006b30:	08006d8b 	.word	0x08006d8b
 8006b34:	08006d8b 	.word	0x08006d8b
 8006b38:	08006d8b 	.word	0x08006d8b
 8006b3c:	08006d8b 	.word	0x08006d8b
 8006b40:	08006d8b 	.word	0x08006d8b
 8006b44:	08006d8b 	.word	0x08006d8b
 8006b48:	08006b7f 	.word	0x08006b7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b4c:	4b94      	ldr	r3, [pc, #592]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b58:	4b91      	ldr	r3, [pc, #580]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	08db      	lsrs	r3, r3, #3
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	4a90      	ldr	r2, [pc, #576]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
 8006b68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b6a:	e111      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b6e:	61bb      	str	r3, [r7, #24]
      break;
 8006b70:	e10e      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b72:	4b8d      	ldr	r3, [pc, #564]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b74:	61bb      	str	r3, [r7, #24]
      break;
 8006b76:	e10b      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b78:	4b8c      	ldr	r3, [pc, #560]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b7a:	61bb      	str	r3, [r7, #24]
      break;
 8006b7c:	e108      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b7e:	4b88      	ldr	r3, [pc, #544]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b88:	4b85      	ldr	r3, [pc, #532]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b94:	4b82      	ldr	r3, [pc, #520]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b9e:	4b80      	ldr	r3, [pc, #512]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba2:	08db      	lsrs	r3, r3, #3
 8006ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80e1 	beq.w	8006d84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	f000 8083 	beq.w	8006cd0 <HAL_RCC_GetSysClockFreq+0x204>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	f200 80a1 	bhi.w	8006d14 <HAL_RCC_GetSysClockFreq+0x248>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x114>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d056      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bde:	e099      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be0:	4b6f      	ldr	r3, [pc, #444]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d02d      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bec:	4b6c      	ldr	r3, [pc, #432]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	08db      	lsrs	r3, r3, #3
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b62      	ldr	r3, [pc, #392]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c46:	e087      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b51      	ldr	r3, [pc, #324]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c8a:	e065      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006db8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b40      	ldr	r3, [pc, #256]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cce:	e043      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006dbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cf6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d12:	e021      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006db8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	4b1e      	ldr	r3, [pc, #120]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d58:	4b11      	ldr	r3, [pc, #68]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5c:	0a5b      	lsrs	r3, r3, #9
 8006d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d62:	3301      	adds	r3, #1
 8006d64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7c:	ee17 3a90 	vmov	r3, s15
 8006d80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d82:	e005      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
      break;
 8006d88:	e002      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d8a:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d8c:	61bb      	str	r3, [r7, #24]
      break;
 8006d8e:	bf00      	nop
  }

  return sysclockfreq;
 8006d90:	69bb      	ldr	r3, [r7, #24]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3724      	adds	r7, #36	@ 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	58024400 	.word	0x58024400
 8006da4:	03d09000 	.word	0x03d09000
 8006da8:	003d0900 	.word	0x003d0900
 8006dac:	017d7840 	.word	0x017d7840
 8006db0:	46000000 	.word	0x46000000
 8006db4:	4c742400 	.word	0x4c742400
 8006db8:	4a742400 	.word	0x4a742400
 8006dbc:	4bbebc20 	.word	0x4bbebc20

08006dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006dc6:	f7ff fe81 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b10      	ldr	r3, [pc, #64]	@ (8006e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	0a1b      	lsrs	r3, r3, #8
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	490f      	ldr	r1, [pc, #60]	@ (8006e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dd8:	5ccb      	ldrb	r3, [r1, r3]
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	4a09      	ldr	r2, [pc, #36]	@ (8006e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dee:	5cd3      	ldrb	r3, [r2, r3]
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	4a07      	ldr	r2, [pc, #28]	@ (8006e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dfe:	4a07      	ldr	r2, [pc, #28]	@ (8006e1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e04:	4b04      	ldr	r3, [pc, #16]	@ (8006e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e06:	681b      	ldr	r3, [r3, #0]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	58024400 	.word	0x58024400
 8006e14:	080104a8 	.word	0x080104a8
 8006e18:	24000008 	.word	0x24000008
 8006e1c:	24000004 	.word	0x24000004

08006e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006e24:	f7ff ffcc 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4b06      	ldr	r3, [pc, #24]	@ (8006e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	4904      	ldr	r1, [pc, #16]	@ (8006e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e36:	5ccb      	ldrb	r3, [r1, r3]
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58024400 	.word	0x58024400
 8006e48:	080104a8 	.word	0x080104a8

08006e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e50:	b0c8      	sub	sp, #288	@ 0x120
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e70:	2500      	movs	r5, #0
 8006e72:	ea54 0305 	orrs.w	r3, r4, r5
 8006e76:	d049      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e82:	d02f      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e88:	d828      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e8e:	d01a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e94:	d822      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e9e:	d007      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ea0:	e01c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea2:	4ba7      	ldr	r3, [pc, #668]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	4aa6      	ldr	r2, [pc, #664]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eae:	e01a      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f002 fa6d 	bl	8009398 <RCCEx_PLL2_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ec4:	e00f      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eca:	3328      	adds	r3, #40	@ 0x28
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 fb14 	bl	80094fc <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eda:	e004      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006eee:	4b94      	ldr	r3, [pc, #592]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efc:	4a90      	ldr	r2, [pc, #576]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006efe:	430b      	orrs	r3, r1
 8006f00:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f02:	e003      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f18:	f04f 0900 	mov.w	r9, #0
 8006f1c:	ea58 0309 	orrs.w	r3, r8, r9
 8006f20:	d047      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d82a      	bhi.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f49 	.word	0x08006f49
 8006f38:	08006f57 	.word	0x08006f57
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f8b 	.word	0x08006f8b
 8006f44:	08006f8b 	.word	0x08006f8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f48:	4b7d      	ldr	r3, [pc, #500]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	4a7c      	ldr	r2, [pc, #496]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f54:	e01a      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f002 fa1a 	bl	8009398 <RCCEx_PLL2_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f6a:	e00f      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f70:	3328      	adds	r3, #40	@ 0x28
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fac1 	bl	80094fc <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f80:	e004      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f88:	e000      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f94:	4b6a      	ldr	r3, [pc, #424]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	f023 0107 	bic.w	r1, r3, #7
 8006f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa2:	4a67      	ldr	r2, [pc, #412]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fa8:	e003      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006fbe:	f04f 0b00 	mov.w	fp, #0
 8006fc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fc6:	d054      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006fd2:	d036      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006fd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006fd8:	d82f      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fde:	d032      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe4:	d829      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe8:	d02f      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fec:	d825      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006fee:	2b80      	cmp	r3, #128	@ 0x80
 8006ff0:	d018      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006ff2:	2b80      	cmp	r3, #128	@ 0x80
 8006ff4:	d821      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006ffa:	2b40      	cmp	r3, #64	@ 0x40
 8006ffc:	d007      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006ffe:	e01c      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007000:	4b4f      	ldr	r3, [pc, #316]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	4a4e      	ldr	r2, [pc, #312]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800700c:	e01e      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007012:	3308      	adds	r3, #8
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f002 f9be 	bl	8009398 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007022:	e013      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007028:	3328      	adds	r3, #40	@ 0x28
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f002 fa65 	bl	80094fc <RCCEx_PLL3_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007038:	e008      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800704a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007054:	4b3a      	ldr	r3, [pc, #232]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007058:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800705c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007062:	4a37      	ldr	r2, [pc, #220]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6513      	str	r3, [r2, #80]	@ 0x50
 8007068:	e003      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800706e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800707e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007082:	2300      	movs	r3, #0
 8007084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007088:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800708c:	460b      	mov	r3, r1
 800708e:	4313      	orrs	r3, r2
 8007090:	d05c      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007098:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800709c:	d03b      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800709e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80070a2:	d834      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a8:	d037      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80070aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ae:	d82e      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070b4:	d033      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070ba:	d828      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c0:	d01a      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c6:	d822      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80070cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d0:	d007      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80070d2:	e01c      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	4a19      	ldr	r2, [pc, #100]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80070e0:	e01e      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070e6:	3308      	adds	r3, #8
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f002 f954 	bl	8009398 <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80070f6:	e013      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070fc:	3328      	adds	r3, #40	@ 0x28
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f002 f9fb 	bl	80094fc <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800710c:	e008      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007114:	e004      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007116:	bf00      	nop
 8007118:	e002      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800711a:	bf00      	nop
 800711c:	e000      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800711e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10d      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007128:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800712a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007136:	4a02      	ldr	r2, [pc, #8]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007138:	430b      	orrs	r3, r1
 800713a:	6513      	str	r3, [r2, #80]	@ 0x50
 800713c:	e006      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800713e:	bf00      	nop
 8007140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007148:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800715c:	2300      	movs	r3, #0
 800715e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007162:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007166:	460b      	mov	r3, r1
 8007168:	4313      	orrs	r3, r2
 800716a:	d03a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800716c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007172:	2b30      	cmp	r3, #48	@ 0x30
 8007174:	d01f      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007176:	2b30      	cmp	r3, #48	@ 0x30
 8007178:	d819      	bhi.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800717a:	2b20      	cmp	r3, #32
 800717c:	d00c      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d815      	bhi.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d019      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007186:	2b10      	cmp	r3, #16
 8007188:	d111      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718a:	4bae      	ldr	r3, [pc, #696]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	4aad      	ldr	r2, [pc, #692]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007196:	e011      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800719c:	3308      	adds	r3, #8
 800719e:	2102      	movs	r1, #2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f002 f8f9 	bl	8009398 <RCCEx_PLL2_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071b4:	e002      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80071ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80071c4:	4b9f      	ldr	r3, [pc, #636]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80071cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d2:	4a9c      	ldr	r2, [pc, #624]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071d8:	e003      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80071ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80071f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4313      	orrs	r3, r2
 8007200:	d051      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800720c:	d035      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800720e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007212:	d82e      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007218:	d031      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800721a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800721e:	d828      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007224:	d01a      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800722a:	d822      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007234:	d007      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007236:	e01c      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007238:	4b82      	ldr	r3, [pc, #520]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800723a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723c:	4a81      	ldr	r2, [pc, #516]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800723e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007244:	e01c      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800724a:	3308      	adds	r3, #8
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f002 f8a2 	bl	8009398 <RCCEx_PLL2_Config>
 8007254:	4603      	mov	r3, r0
 8007256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800725a:	e011      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800725c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007260:	3328      	adds	r3, #40	@ 0x28
 8007262:	2100      	movs	r1, #0
 8007264:	4618      	mov	r0, r3
 8007266:	f002 f949 	bl	80094fc <RCCEx_PLL3_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800727e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007288:	4b6e      	ldr	r3, [pc, #440]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800728a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007296:	4a6b      	ldr	r2, [pc, #428]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007298:	430b      	orrs	r3, r1
 800729a:	6513      	str	r3, [r2, #80]	@ 0x50
 800729c:	e003      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80072c0:	460b      	mov	r3, r1
 80072c2:	4313      	orrs	r3, r2
 80072c4:	d053      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072d0:	d033      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072d6:	d82c      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072dc:	d02f      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80072de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072e2:	d826      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072e8:	d02b      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80072ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072ee:	d820      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f4:	d012      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80072f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072fa:	d81a      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d022      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d115      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800730a:	3308      	adds	r3, #8
 800730c:	2101      	movs	r1, #1
 800730e:	4618      	mov	r0, r3
 8007310:	f002 f842 	bl	8009398 <RCCEx_PLL2_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800731a:	e015      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007320:	3328      	adds	r3, #40	@ 0x28
 8007322:	2101      	movs	r1, #1
 8007324:	4618      	mov	r0, r3
 8007326:	f002 f8e9 	bl	80094fc <RCCEx_PLL3_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007330:	e00a      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007338:	e006      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800733a:	bf00      	nop
 800733c:	e004      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800733e:	bf00      	nop
 8007340:	e002      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007350:	4b3c      	ldr	r3, [pc, #240]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007354:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800735c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800735e:	4a39      	ldr	r2, [pc, #228]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007360:	430b      	orrs	r3, r1
 8007362:	6513      	str	r3, [r2, #80]	@ 0x50
 8007364:	e003      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800736a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800736e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800737a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800737e:	2300      	movs	r3, #0
 8007380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007384:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007388:	460b      	mov	r3, r1
 800738a:	4313      	orrs	r3, r2
 800738c:	d060      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800738e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007396:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800739a:	d039      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800739c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80073a0:	d832      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a6:	d035      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ac:	d82c      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b2:	d031      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b8:	d826      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073be:	d02d      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80073c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073c4:	d820      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ca:	d012      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80073cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d0:	d81a      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d024      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073da:	d115      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e0:	3308      	adds	r3, #8
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 ffd7 	bl	8009398 <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80073f0:	e017      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f6:	3328      	adds	r3, #40	@ 0x28
 80073f8:	2101      	movs	r1, #1
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 f87e 	bl	80094fc <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007406:	e00c      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800740e:	e008      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007410:	bf00      	nop
 8007412:	e006      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007414:	bf00      	nop
 8007416:	e004      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007418:	bf00      	nop
 800741a:	e002      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800741c:	bf00      	nop
 800741e:	e000      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10e      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800743a:	4a02      	ldr	r2, [pc, #8]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800743c:	430b      	orrs	r3, r1
 800743e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007440:	e006      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800744c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800745c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007460:	2300      	movs	r3, #0
 8007462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800746a:	460b      	mov	r3, r1
 800746c:	4313      	orrs	r3, r2
 800746e:	d037      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800747a:	d00e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800747c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007480:	d816      	bhi.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800748a:	d111      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748c:	4bc4      	ldr	r3, [pc, #784]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	4ac3      	ldr	r2, [pc, #780]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007498:	e00f      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800749a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800749e:	3308      	adds	r3, #8
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 ff78 	bl	8009398 <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ae:	e004      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074c2:	4bb7      	ldr	r3, [pc, #732]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074d0:	4ab3      	ldr	r2, [pc, #716]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80074ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d039      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007506:	2b03      	cmp	r3, #3
 8007508:	d81c      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800750a:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	0800754d 	.word	0x0800754d
 8007514:	08007521 	.word	0x08007521
 8007518:	0800752f 	.word	0x0800752f
 800751c:	0800754d 	.word	0x0800754d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007520:	4b9f      	ldr	r3, [pc, #636]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a9e      	ldr	r2, [pc, #632]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800752a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800752c:	e00f      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800752e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007532:	3308      	adds	r3, #8
 8007534:	2102      	movs	r1, #2
 8007536:	4618      	mov	r0, r3
 8007538:	f001 ff2e 	bl	8009398 <RCCEx_PLL2_Config>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007542:	e004      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800754a:	e000      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800754c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007556:	4b92      	ldr	r3, [pc, #584]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755a:	f023 0103 	bic.w	r1, r3, #3
 800755e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007564:	4a8e      	ldr	r2, [pc, #568]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007566:	430b      	orrs	r3, r1
 8007568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007584:	2300      	movs	r3, #0
 8007586:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800758a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800758e:	460b      	mov	r3, r1
 8007590:	4313      	orrs	r3, r2
 8007592:	f000 8099 	beq.w	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007596:	4b83      	ldr	r3, [pc, #524]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a82      	ldr	r2, [pc, #520]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800759c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075a2:	f7fb fb15 	bl	8002bd0 <HAL_GetTick>
 80075a6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075aa:	e00b      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ac:	f7fb fb10 	bl	8002bd0 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b64      	cmp	r3, #100	@ 0x64
 80075ba:	d903      	bls.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075c2:	e005      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075c4:	4b77      	ldr	r3, [pc, #476]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0ed      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80075d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d173      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075d8:	4b71      	ldr	r3, [pc, #452]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075e4:	4053      	eors	r3, r2
 80075e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d015      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075ee:	4b6c      	ldr	r3, [pc, #432]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075fa:	4b69      	ldr	r3, [pc, #420]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fe:	4a68      	ldr	r2, [pc, #416]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007604:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007606:	4b66      	ldr	r3, [pc, #408]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760a:	4a65      	ldr	r2, [pc, #404]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800760c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007610:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007612:	4a63      	ldr	r2, [pc, #396]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800761a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800761e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007626:	d118      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fb fad2 	bl	8002bd0 <HAL_GetTick>
 800762c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007630:	e00d      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007632:	f7fb facd 	bl	8002bd0 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800763c:	1ad2      	subs	r2, r2, r3
 800763e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007642:	429a      	cmp	r2, r3
 8007644:	d903      	bls.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800764c:	e005      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800764e:	4b54      	ldr	r3, [pc, #336]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0eb      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800765a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800765e:	2b00      	cmp	r3, #0
 8007660:	d129      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800766a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007672:	d10e      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007674:	4b4a      	ldr	r3, [pc, #296]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800767c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007684:	091a      	lsrs	r2, r3, #4
 8007686:	4b48      	ldr	r3, [pc, #288]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007688:	4013      	ands	r3, r2
 800768a:	4a45      	ldr	r2, [pc, #276]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800768c:	430b      	orrs	r3, r1
 800768e:	6113      	str	r3, [r2, #16]
 8007690:	e005      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007692:	4b43      	ldr	r3, [pc, #268]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	4a42      	ldr	r2, [pc, #264]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800769c:	6113      	str	r3, [r2, #16]
 800769e:	4b40      	ldr	r3, [pc, #256]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ae:	4a3c      	ldr	r2, [pc, #240]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80076be:	e003      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f002 0301 	and.w	r3, r2, #1
 80076d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076d8:	2300      	movs	r3, #0
 80076da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f000 8090 	beq.w	800780a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80076ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f2:	2b28      	cmp	r3, #40	@ 0x28
 80076f4:	d870      	bhi.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	080077e1 	.word	0x080077e1
 8007700:	080077d9 	.word	0x080077d9
 8007704:	080077d9 	.word	0x080077d9
 8007708:	080077d9 	.word	0x080077d9
 800770c:	080077d9 	.word	0x080077d9
 8007710:	080077d9 	.word	0x080077d9
 8007714:	080077d9 	.word	0x080077d9
 8007718:	080077d9 	.word	0x080077d9
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077d9 	.word	0x080077d9
 8007724:	080077d9 	.word	0x080077d9
 8007728:	080077d9 	.word	0x080077d9
 800772c:	080077d9 	.word	0x080077d9
 8007730:	080077d9 	.word	0x080077d9
 8007734:	080077d9 	.word	0x080077d9
 8007738:	080077d9 	.word	0x080077d9
 800773c:	080077c3 	.word	0x080077c3
 8007740:	080077d9 	.word	0x080077d9
 8007744:	080077d9 	.word	0x080077d9
 8007748:	080077d9 	.word	0x080077d9
 800774c:	080077d9 	.word	0x080077d9
 8007750:	080077d9 	.word	0x080077d9
 8007754:	080077d9 	.word	0x080077d9
 8007758:	080077d9 	.word	0x080077d9
 800775c:	080077e1 	.word	0x080077e1
 8007760:	080077d9 	.word	0x080077d9
 8007764:	080077d9 	.word	0x080077d9
 8007768:	080077d9 	.word	0x080077d9
 800776c:	080077d9 	.word	0x080077d9
 8007770:	080077d9 	.word	0x080077d9
 8007774:	080077d9 	.word	0x080077d9
 8007778:	080077d9 	.word	0x080077d9
 800777c:	080077e1 	.word	0x080077e1
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077d9 	.word	0x080077d9
 8007788:	080077d9 	.word	0x080077d9
 800778c:	080077d9 	.word	0x080077d9
 8007790:	080077d9 	.word	0x080077d9
 8007794:	080077d9 	.word	0x080077d9
 8007798:	080077d9 	.word	0x080077d9
 800779c:	080077e1 	.word	0x080077e1
 80077a0:	58024400 	.word	0x58024400
 80077a4:	58024800 	.word	0x58024800
 80077a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b0:	3308      	adds	r3, #8
 80077b2:	2101      	movs	r1, #1
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fdef 	bl	8009398 <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077c0:	e00f      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077c6:	3328      	adds	r3, #40	@ 0x28
 80077c8:	2101      	movs	r1, #1
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fe96 	bl	80094fc <RCCEx_PLL3_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077d6:	e004      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80077de:	e000      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80077e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077ea:	4bc0      	ldr	r3, [pc, #768]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80077f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077fa:	4abc      	ldr	r2, [pc, #752]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007800:	e003      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007806:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800780a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f002 0302 	and.w	r3, r2, #2
 8007816:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800781a:	2300      	movs	r3, #0
 800781c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007820:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007824:	460b      	mov	r3, r1
 8007826:	4313      	orrs	r3, r2
 8007828:	d043      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800782a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800782e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007832:	2b05      	cmp	r3, #5
 8007834:	d824      	bhi.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007889 	.word	0x08007889
 8007840:	08007855 	.word	0x08007855
 8007844:	0800786b 	.word	0x0800786b
 8007848:	08007889 	.word	0x08007889
 800784c:	08007889 	.word	0x08007889
 8007850:	08007889 	.word	0x08007889
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007858:	3308      	adds	r3, #8
 800785a:	2101      	movs	r1, #1
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fd9b 	bl	8009398 <RCCEx_PLL2_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007868:	e00f      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800786a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800786e:	3328      	adds	r3, #40	@ 0x28
 8007870:	2101      	movs	r1, #1
 8007872:	4618      	mov	r0, r3
 8007874:	f001 fe42 	bl	80094fc <RCCEx_PLL3_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800787e:	e004      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007886:	e000      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800788a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007892:	4b96      	ldr	r3, [pc, #600]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	f023 0107 	bic.w	r1, r3, #7
 800789a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a2:	4a92      	ldr	r2, [pc, #584]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078a4:	430b      	orrs	r3, r1
 80078a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80078a8:	e003      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	f002 0304 	and.w	r3, r2, #4
 80078be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078c2:	2300      	movs	r3, #0
 80078c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4313      	orrs	r3, r2
 80078d0:	d043      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078da:	2b05      	cmp	r3, #5
 80078dc:	d824      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007931 	.word	0x08007931
 80078e8:	080078fd 	.word	0x080078fd
 80078ec:	08007913 	.word	0x08007913
 80078f0:	08007931 	.word	0x08007931
 80078f4:	08007931 	.word	0x08007931
 80078f8:	08007931 	.word	0x08007931
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007900:	3308      	adds	r3, #8
 8007902:	2101      	movs	r1, #1
 8007904:	4618      	mov	r0, r3
 8007906:	f001 fd47 	bl	8009398 <RCCEx_PLL2_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007910:	e00f      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007916:	3328      	adds	r3, #40	@ 0x28
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f001 fdee 	bl	80094fc <RCCEx_PLL3_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007926:	e004      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800792e:	e000      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800793a:	4b6c      	ldr	r3, [pc, #432]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800793c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793e:	f023 0107 	bic.w	r1, r3, #7
 8007942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800794a:	4a68      	ldr	r2, [pc, #416]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800794c:	430b      	orrs	r3, r1
 800794e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007950:	e003      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007952:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007956:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800795a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f002 0320 	and.w	r3, r2, #32
 8007966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800796a:	2300      	movs	r3, #0
 800796c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d055      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800797a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800797e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007986:	d033      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800798c:	d82c      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800798e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007992:	d02f      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007998:	d826      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800799a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800799e:	d02b      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079a4:	d820      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079aa:	d012      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d81a      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d022      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80079b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ba:	d115      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c0:	3308      	adds	r3, #8
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 fce7 	bl	8009398 <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079d0:	e015      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079d6:	3328      	adds	r3, #40	@ 0x28
 80079d8:	2102      	movs	r1, #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 fd8e 	bl	80094fc <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079e6:	e00a      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079ee:	e006      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80079f0:	bf00      	nop
 80079f2:	e004      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80079f4:	bf00      	nop
 80079f6:	e002      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80079f8:	bf00      	nop
 80079fa:	e000      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80079fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10b      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a06:	4b39      	ldr	r3, [pc, #228]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a16:	4a35      	ldr	r2, [pc, #212]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a1c:	e003      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4313      	orrs	r3, r2
 8007a44:	d058      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a52:	d033      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a58:	d82c      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5e:	d02f      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a64:	d826      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a6a:	d02b      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007a6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a70:	d820      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a76:	d012      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a7c:	d81a      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d022      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a86:	d115      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fc81 	bl	8009398 <RCCEx_PLL2_Config>
 8007a96:	4603      	mov	r3, r0
 8007a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a9c:	e015      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aa2:	3328      	adds	r3, #40	@ 0x28
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 fd28 	bl	80094fc <RCCEx_PLL3_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ab2:	e00a      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007aba:	e006      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007abc:	bf00      	nop
 8007abe:	e004      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ac0:	bf00      	nop
 8007ac2:	e002      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ac4:	bf00      	nop
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10e      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ad2:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ae2:	4a02      	ldr	r2, [pc, #8]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ae8:	e006      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007aea:	bf00      	nop
 8007aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007af4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b12:	460b      	mov	r3, r1
 8007b14:	4313      	orrs	r3, r2
 8007b16:	d055      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b24:	d033      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b2a:	d82c      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b30:	d02f      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b36:	d826      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b3c:	d02b      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b42:	d820      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b48:	d012      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b4e:	d81a      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d022      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b58:	d115      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b5e:	3308      	adds	r3, #8
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fc18 	bl	8009398 <RCCEx_PLL2_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b6e:	e015      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b74:	3328      	adds	r3, #40	@ 0x28
 8007b76:	2102      	movs	r1, #2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 fcbf 	bl	80094fc <RCCEx_PLL3_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b84:	e00a      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b8c:	e006      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007b8e:	bf00      	nop
 8007b90:	e004      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007b92:	bf00      	nop
 8007b94:	e002      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007b96:	bf00      	nop
 8007b98:	e000      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007bb4:	4a9d      	ldr	r2, [pc, #628]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bba:	e003      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f002 0308 	and.w	r3, r2, #8
 8007bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d01e      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf6:	3328      	adds	r3, #40	@ 0x28
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 fc7e 	bl	80094fc <RCCEx_PLL3_Config>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c0c:	4b87      	ldr	r3, [pc, #540]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c1c:	4a83      	ldr	r2, [pc, #524]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f002 0310 	and.w	r3, r2, #16
 8007c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c32:	2300      	movs	r3, #0
 8007c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	d01e      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c4e:	d10c      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c54:	3328      	adds	r3, #40	@ 0x28
 8007c56:	2102      	movs	r1, #2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fc4f 	bl	80094fc <RCCEx_PLL3_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c6a:	4b70      	ldr	r3, [pc, #448]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	d03e      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cac:	d022      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb2:	d81b      	bhi.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cbc:	d00b      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007cbe:	e015      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fb65 	bl	8009398 <RCCEx_PLL2_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cd4:	e00f      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cda:	3328      	adds	r3, #40	@ 0x28
 8007cdc:	2102      	movs	r1, #2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fc0c 	bl	80094fc <RCCEx_PLL3_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cea:	e004      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cf2:	e000      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d0e:	4a47      	ldr	r2, [pc, #284]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d14:	e003      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d03b      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d46:	d01f      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007d48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d4c:	d818      	bhi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d52:	d003      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007d54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d58:	d007      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007d5a:	e011      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5c:	4b33      	ldr	r3, [pc, #204]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	4a32      	ldr	r2, [pc, #200]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d68:	e00f      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d6e:	3328      	adds	r3, #40	@ 0x28
 8007d70:	2101      	movs	r1, #1
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fbc2 	bl	80094fc <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d7e:	e004      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d92:	4b26      	ldr	r3, [pc, #152]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	4a22      	ldr	r2, [pc, #136]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007da4:	430b      	orrs	r3, r1
 8007da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007da8:	e003      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007dc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	d034      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ddc:	d007      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007dde:	e011      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de0:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	4a11      	ldr	r2, [pc, #68]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007dec:	e00e      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df2:	3308      	adds	r3, #8
 8007df4:	2102      	movs	r1, #2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 face 	bl	8009398 <RCCEx_PLL2_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e02:	e003      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10d      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e14:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e22:	4a02      	ldr	r2, [pc, #8]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e28:	e006      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007e2a:	bf00      	nop
 8007e2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e46:	2300      	movs	r3, #0
 8007e48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	d00c      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e58:	3328      	adds	r3, #40	@ 0x28
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 fb4d 	bl	80094fc <RCCEx_PLL3_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e84:	460b      	mov	r3, r1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	d038      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e96:	d018      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e9c:	d811      	bhi.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea2:	d014      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea8:	d80b      	bhi.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d011      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb2:	d106      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb4:	4bc3      	ldr	r3, [pc, #780]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	4ac2      	ldr	r2, [pc, #776]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ec8:	e004      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007eca:	bf00      	nop
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10b      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007edc:	4bb9      	ldr	r3, [pc, #740]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eec:	4ab5      	ldr	r2, [pc, #724]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ef8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f12:	460b      	mov	r3, r1
 8007f14:	4313      	orrs	r3, r2
 8007f16:	d009      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f18:	4baa      	ldr	r3, [pc, #680]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f26:	4aa7      	ldr	r2, [pc, #668]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f42:	460b      	mov	r3, r1
 8007f44:	4313      	orrs	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f48:	4b9e      	ldr	r3, [pc, #632]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f56:	4a9b      	ldr	r2, [pc, #620]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d009      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007f78:	4b92      	ldr	r3, [pc, #584]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f86:	4a8f      	ldr	r2, [pc, #572]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fa8:	4b86      	ldr	r3, [pc, #536]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	4a85      	ldr	r2, [pc, #532]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fb2:	6113      	str	r3, [r2, #16]
 8007fb4:	4b83      	ldr	r3, [pc, #524]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fb6:	6919      	ldr	r1, [r3, #16]
 8007fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007fc0:	4a80      	ldr	r2, [pc, #512]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fe2:	4b78      	ldr	r3, [pc, #480]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff0:	4a74      	ldr	r2, [pc, #464]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008002:	633b      	str	r3, [r7, #48]	@ 0x30
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
 8008008:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800800c:	460b      	mov	r3, r1
 800800e:	4313      	orrs	r3, r2
 8008010:	d00a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008012:	4b6c      	ldr	r3, [pc, #432]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008016:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800801a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800801e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008022:	4a68      	ldr	r2, [pc, #416]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	2100      	movs	r1, #0
 8008032:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800803a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800803e:	460b      	mov	r3, r1
 8008040:	4313      	orrs	r3, r2
 8008042:	d011      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008048:	3308      	adds	r3, #8
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f9a3 	bl	8009398 <RCCEx_PLL2_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008058:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008064:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	2100      	movs	r1, #0
 8008072:	6239      	str	r1, [r7, #32]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	627b      	str	r3, [r7, #36]	@ 0x24
 800807a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	d011      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008088:	3308      	adds	r3, #8
 800808a:	2101      	movs	r1, #1
 800808c:	4618      	mov	r0, r3
 800808e:	f001 f983 	bl	8009398 <RCCEx_PLL2_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	2100      	movs	r1, #0
 80080b2:	61b9      	str	r1, [r7, #24]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080be:	460b      	mov	r3, r1
 80080c0:	4313      	orrs	r3, r2
 80080c2:	d011      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c8:	3308      	adds	r3, #8
 80080ca:	2102      	movs	r1, #2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 f963 	bl	8009398 <RCCEx_PLL2_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80080d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	2100      	movs	r1, #0
 80080f2:	6139      	str	r1, [r7, #16]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d011      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008108:	3328      	adds	r3, #40	@ 0x28
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f001 f9f5 	bl	80094fc <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	2100      	movs	r1, #0
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800813e:	460b      	mov	r3, r1
 8008140:	4313      	orrs	r3, r2
 8008142:	d011      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008148:	3328      	adds	r3, #40	@ 0x28
 800814a:	2101      	movs	r1, #1
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f9d5 	bl	80094fc <RCCEx_PLL3_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008164:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	2100      	movs	r1, #0
 8008172:	6039      	str	r1, [r7, #0]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	607b      	str	r3, [r7, #4]
 800817a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800817e:	460b      	mov	r3, r1
 8008180:	4313      	orrs	r3, r2
 8008182:	d011      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008188:	3328      	adds	r3, #40	@ 0x28
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f001 f9b5 	bl	80094fc <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80081a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e000      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80081bc:	46bd      	mov	sp, r7
 80081be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400

080081c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b090      	sub	sp, #64	@ 0x40
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80081da:	430b      	orrs	r3, r1
 80081dc:	f040 8094 	bne.w	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081e0:	4b97      	ldr	r3, [pc, #604]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	f200 8087 	bhi.w	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80081f2:	a201      	add	r2, pc, #4	@ (adr r2, 80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	0800820d 	.word	0x0800820d
 80081fc:	08008235 	.word	0x08008235
 8008200:	0800825d 	.word	0x0800825d
 8008204:	080082f9 	.word	0x080082f9
 8008208:	08008285 	.word	0x08008285
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800820c:	4b8c      	ldr	r3, [pc, #560]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008218:	d108      	bne.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800821a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800821e:	4618      	mov	r0, r3
 8008220:	f000 ff68 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008228:	f000 bc97 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008230:	f000 bc93 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008234:	4b82      	ldr	r3, [pc, #520]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800823c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008240:	d108      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fcac 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008250:	f000 bc83 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008258:	f000 bc7f 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800825c:	4b78      	ldr	r3, [pc, #480]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008268:	d108      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826a:	f107 030c 	add.w	r3, r7, #12
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fdec 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008278:	f000 bc6f 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008280:	f000 bc6b 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008284:	4b6e      	ldr	r3, [pc, #440]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800828c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800828e:	4b6c      	ldr	r3, [pc, #432]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b04      	cmp	r3, #4
 8008298:	d10c      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800829a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a0:	4b67      	ldr	r3, [pc, #412]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	08db      	lsrs	r3, r3, #3
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	4a66      	ldr	r2, [pc, #408]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80082ac:	fa22 f303 	lsr.w	r3, r2, r3
 80082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082b2:	e01f      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082b4:	4b62      	ldr	r3, [pc, #392]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c0:	d106      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082c8:	d102      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082ca:	4b5f      	ldr	r3, [pc, #380]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ce:	e011      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082d0:	4b5b      	ldr	r3, [pc, #364]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082dc:	d106      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e4:	d102      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082e6:	4b59      	ldr	r3, [pc, #356]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80082e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ea:	e003      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082f0:	f000 bc33 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80082f4:	f000 bc31 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082f8:	4b55      	ldr	r3, [pc, #340]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fc:	f000 bc2d 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008304:	f000 bc29 	b.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008310:	430b      	orrs	r3, r1
 8008312:	f040 809f 	bne.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008316:	4b4a      	ldr	r3, [pc, #296]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800831e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008326:	d04d      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800832e:	f200 8084 	bhi.w	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	2bc0      	cmp	r3, #192	@ 0xc0
 8008336:	d07d      	beq.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	2bc0      	cmp	r3, #192	@ 0xc0
 800833c:	d87d      	bhi.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	2b80      	cmp	r3, #128	@ 0x80
 8008342:	d02d      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	2b80      	cmp	r3, #128	@ 0x80
 8008348:	d877      	bhi.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d012      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008356:	e070      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008358:	4b39      	ldr	r3, [pc, #228]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008364:	d107      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fec2 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008374:	e3f1      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837a:	e3ee      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800837c:	4b30      	ldr	r3, [pc, #192]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008388:	d107      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838a:	f107 0318 	add.w	r3, r7, #24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fc08 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008398:	e3df      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800839e:	e3dc      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083a0:	4b27      	ldr	r3, [pc, #156]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ac:	d107      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fd4a 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083bc:	e3cd      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c2:	e3ca      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d10c      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80083da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d109      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083e0:	4b17      	ldr	r3, [pc, #92]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	08db      	lsrs	r3, r3, #3
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	4a16      	ldr	r2, [pc, #88]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
 80083f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083f2:	e01e      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083f4:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008400:	d106      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008408:	d102      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800840a:	4b0f      	ldr	r3, [pc, #60]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800840e:	e010      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008410:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800841c:	d106      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008424:	d102      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008426:	4b09      	ldr	r3, [pc, #36]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800842a:	e002      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008430:	e393      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008432:	e392      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008434:	4b06      	ldr	r3, [pc, #24]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008438:	e38f      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800843e:	e38c      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008440:	58024400 	.word	0x58024400
 8008444:	03d09000 	.word	0x03d09000
 8008448:	003d0900 	.word	0x003d0900
 800844c:	017d7840 	.word	0x017d7840
 8008450:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008458:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800845c:	430b      	orrs	r3, r1
 800845e:	f040 809c 	bne.w	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008462:	4b9e      	ldr	r3, [pc, #632]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008466:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800846a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008472:	d054      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847a:	f200 808b 	bhi.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008484:	f000 8083 	beq.w	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800848e:	f200 8081 	bhi.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008498:	d02f      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084a0:	d878      	bhi.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ae:	d012      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80084b0:	e070      	b.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084b2:	4b8a      	ldr	r3, [pc, #552]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084be:	d107      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fe15 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ce:	e344      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d4:	e341      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d6:	4b81      	ldr	r3, [pc, #516]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084e2:	d107      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e4:	f107 0318 	add.w	r3, r7, #24
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fb5b 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f2:	e332      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f8:	e32f      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084fa:	4b78      	ldr	r3, [pc, #480]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fc9d 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008516:	e320      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851c:	e31d      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800851e:	4b6f      	ldr	r3, [pc, #444]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008528:	4b6c      	ldr	r3, [pc, #432]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b04      	cmp	r3, #4
 8008532:	d10c      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800853a:	4b68      	ldr	r3, [pc, #416]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	4a66      	ldr	r2, [pc, #408]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008546:	fa22 f303 	lsr.w	r3, r2, r3
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854c:	e01e      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800854e:	4b63      	ldr	r3, [pc, #396]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800855a:	d106      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800855c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800855e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008562:	d102      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008564:	4b5f      	ldr	r3, [pc, #380]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008568:	e010      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800856a:	4b5c      	ldr	r3, [pc, #368]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008576:	d106      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800857e:	d102      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008580:	4b59      	ldr	r3, [pc, #356]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008584:	e002      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800858a:	e2e6      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800858c:	e2e5      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800858e:	4b57      	ldr	r3, [pc, #348]	@ (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008592:	e2e2      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008598:	e2df      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800859a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80085a2:	430b      	orrs	r3, r1
 80085a4:	f040 80a7 	bne.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80085a8:	4b4c      	ldr	r3, [pc, #304]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80085b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085b8:	d055      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80085ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085c0:	f200 8096 	bhi.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085ca:	f000 8084 	beq.w	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80085ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085d4:	f200 808c 	bhi.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085de:	d030      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e6:	f200 8083 	bhi.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f6:	d012      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80085f8:	e07a      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085fa:	4b38      	ldr	r3, [pc, #224]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008606:	d107      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fd71 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008616:	e2a0      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861c:	e29d      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800861e:	4b2f      	ldr	r3, [pc, #188]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862c:	f107 0318 	add.w	r3, r7, #24
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fab7 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800863a:	e28e      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008640:	e28b      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008642:	4b26      	ldr	r3, [pc, #152]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800864a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800864e:	d107      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008650:	f107 030c 	add.w	r3, r7, #12
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fbf9 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865e:	e27c      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008664:	e279      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008666:	4b1d      	ldr	r3, [pc, #116]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800866a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800866e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008670:	4b1a      	ldr	r3, [pc, #104]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b04      	cmp	r3, #4
 800867a:	d10c      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800867c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008682:	4b16      	ldr	r3, [pc, #88]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	4a14      	ldr	r2, [pc, #80]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800868e:	fa22 f303 	lsr.w	r3, r2, r3
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008694:	e01e      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008696:	4b11      	ldr	r3, [pc, #68]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a2:	d106      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086aa:	d102      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086ac:	4b0d      	ldr	r3, [pc, #52]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086b0:	e010      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086b2:	4b0a      	ldr	r3, [pc, #40]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086be:	d106      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086c8:	4b07      	ldr	r3, [pc, #28]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086cc:	e002      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086d2:	e242      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80086d4:	e241      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086d6:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086da:	e23e      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80086dc:	58024400 	.word	0x58024400
 80086e0:	03d09000 	.word	0x03d09000
 80086e4:	003d0900 	.word	0x003d0900
 80086e8:	017d7840 	.word	0x017d7840
 80086ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f4:	e231      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80086f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80086fe:	430b      	orrs	r3, r1
 8008700:	f040 8085 	bne.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008704:	4b9c      	ldr	r3, [pc, #624]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008708:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800870c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800870e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008714:	d06b      	beq.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800871c:	d874      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008724:	d056      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800872c:	d86c      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008730:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008734:	d03b      	beq.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800873c:	d864      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800873e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008744:	d021      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800874c:	d85c      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800874e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800875a:	d004      	beq.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800875c:	e054      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800875e:	f7fe fb5f 	bl	8006e20 <HAL_RCC_GetPCLK1Freq>
 8008762:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008764:	e1f9      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008766:	4b84      	ldr	r3, [pc, #528]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800876e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008772:	d107      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008774:	f107 0318 	add.w	r3, r7, #24
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fa13 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008782:	e1ea      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008788:	e1e7      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800878a:	4b7b      	ldr	r3, [pc, #492]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008796:	d107      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008798:	f107 030c 	add.w	r3, r7, #12
 800879c:	4618      	mov	r0, r3
 800879e:	f000 fb55 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a6:	e1d8      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ac:	e1d5      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087ae:	4b72      	ldr	r3, [pc, #456]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d109      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087ba:	4b6f      	ldr	r3, [pc, #444]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	08db      	lsrs	r3, r3, #3
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	4a6d      	ldr	r2, [pc, #436]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087c6:	fa22 f303 	lsr.w	r3, r2, r3
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087cc:	e1c5      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d2:	e1c2      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087d4:	4b68      	ldr	r3, [pc, #416]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087e0:	d102      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80087e2:	4b67      	ldr	r3, [pc, #412]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e6:	e1b8      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ec:	e1b5      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087ee:	4b62      	ldr	r3, [pc, #392]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087fa:	d102      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80087fc:	4b61      	ldr	r3, [pc, #388]	@ (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008800:	e1ab      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e1a8      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e1a5      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800880e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008812:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008816:	430b      	orrs	r3, r1
 8008818:	d173      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800881a:	4b57      	ldr	r3, [pc, #348]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800881c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800881e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008822:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800882a:	d02f      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800882c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008832:	d863      	bhi.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008840:	d012      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008842:	e05b      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008844:	4b4c      	ldr	r3, [pc, #304]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800884c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008850:	d107      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008852:	f107 0318 	add.w	r3, r7, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f9a4 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008860:	e17b      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008866:	e178      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008868:	4b43      	ldr	r3, [pc, #268]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008874:	d107      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008876:	f107 030c 	add.w	r3, r7, #12
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fae6 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008884:	e169      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888a:	e166      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800888c:	4b3a      	ldr	r3, [pc, #232]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800888e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008890:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008894:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008896:	4b38      	ldr	r3, [pc, #224]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d10c      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80088a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d109      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088a8:	4b33      	ldr	r3, [pc, #204]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	08db      	lsrs	r3, r3, #3
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	4a32      	ldr	r2, [pc, #200]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088b4:	fa22 f303 	lsr.w	r3, r2, r3
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088ba:	e01e      	b.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088c8:	d106      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80088ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088d0:	d102      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088d2:	4b2b      	ldr	r3, [pc, #172]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80088d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d6:	e010      	b.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088d8:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e4:	d106      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ec:	d102      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088ee:	4b25      	ldr	r3, [pc, #148]	@ (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80088f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f2:	e002      	b.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088f8:	e12f      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80088fa:	e12e      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008900:	e12b      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008906:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800890a:	430b      	orrs	r3, r1
 800890c:	d13c      	bne.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800890e:	4b1a      	ldr	r3, [pc, #104]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008916:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	d004      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008924:	d012      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008926:	e023      	b.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008928:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008934:	d107      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fbda 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008944:	e109      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894a:	e106      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800894c:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008958:	d107      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895a:	f107 0318 	add.w	r3, r7, #24
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f920 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008968:	e0f7      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896e:	e0f4      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008974:	e0f1      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008976:	bf00      	nop
 8008978:	58024400 	.word	0x58024400
 800897c:	03d09000 	.word	0x03d09000
 8008980:	003d0900 	.word	0x003d0900
 8008984:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008990:	430b      	orrs	r3, r1
 8008992:	f040 8091 	bne.w	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008996:	4b73      	ldr	r3, [pc, #460]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800899e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80089a6:	f000 8081 	beq.w	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80089b0:	d87f      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089b8:	d06b      	beq.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089c0:	d877      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c8:	d056      	beq.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d0:	d86f      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089d8:	d03b      	beq.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80089da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089e0:	d867      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089e8:	d021      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f0:	d85f      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d004      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089fe:	d004      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008a00:	e057      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a02:	f000 f8b9 	bl	8008b78 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a08:	e0a7      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a0a:	4b56      	ldr	r3, [pc, #344]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a16:	d107      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a18:	f107 0318 	add.w	r3, r7, #24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f8c1 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a26:	e098      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2c:	e095      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a3a:	d107      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a3c:	f107 030c 	add.w	r3, r7, #12
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fa03 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4a:	e086      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a50:	e083      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a52:	4b44      	ldr	r3, [pc, #272]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d109      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a5e:	4b41      	ldr	r3, [pc, #260]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	08db      	lsrs	r3, r3, #3
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	4a3f      	ldr	r2, [pc, #252]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a70:	e073      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a76:	e070      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a78:	4b3a      	ldr	r3, [pc, #232]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a84:	d102      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008a86:	4b39      	ldr	r3, [pc, #228]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8a:	e066      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a90:	e063      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a92:	4b34      	ldr	r3, [pc, #208]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9e:	d102      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008aa0:	4b33      	ldr	r3, [pc, #204]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa4:	e059      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aaa:	e056      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008aac:	4b31      	ldr	r3, [pc, #196]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab0:	e053      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab6:	e050      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008abc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	d148      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ac4:	4b27      	ldr	r3, [pc, #156]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008acc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ad4:	d02a      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008adc:	d838      	bhi.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aea:	d00d      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008aec:	e030      	b.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008aee:	4b1d      	ldr	r3, [pc, #116]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008afa:	d102      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008afc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b00:	e02b      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b06:	e028      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b08:	4b16      	ldr	r3, [pc, #88]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b14:	d107      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 faea 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b24:	e019      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2a:	e016      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b38:	d107      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b3a:	f107 0318 	add.w	r3, r7, #24
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f830 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b48:	e007      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b4e:	e004      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b54:	e001      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3740      	adds	r7, #64	@ 0x40
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	58024400 	.word	0x58024400
 8008b68:	03d09000 	.word	0x03d09000
 8008b6c:	003d0900 	.word	0x003d0900
 8008b70:	017d7840 	.word	0x017d7840
 8008b74:	00bb8000 	.word	0x00bb8000

08008b78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008b7c:	f7fe f920 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	091b      	lsrs	r3, r3, #4
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	4904      	ldr	r1, [pc, #16]	@ (8008ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	58024400 	.word	0x58024400
 8008ba0:	080104a8 	.word	0x080104a8

08008ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b089      	sub	sp, #36	@ 0x24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bac:	4ba1      	ldr	r3, [pc, #644]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bba:	0b1b      	lsrs	r3, r3, #12
 8008bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008bce:	4b99      	ldr	r3, [pc, #612]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd2:	08db      	lsrs	r3, r3, #3
 8008bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	fb02 f303 	mul.w	r3, r2, r3
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8111 	beq.w	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	f000 8083 	beq.w	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	f200 80a1 	bhi.w	8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d056      	beq.n	8008cbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c0e:	e099      	b.n	8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c10:	4b88      	ldr	r3, [pc, #544]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02d      	beq.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c1c:	4b85      	ldr	r3, [pc, #532]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	08db      	lsrs	r3, r3, #3
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	4a84      	ldr	r2, [pc, #528]	@ (8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c46:	4b7b      	ldr	r3, [pc, #492]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c76:	e087      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cba:	e065      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cce:	4b59      	ldr	r3, [pc, #356]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cfe:	e043      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d12:	4b48      	ldr	r3, [pc, #288]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d42:	e021      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d56:	4b37      	ldr	r3, [pc, #220]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d88:	4b2a      	ldr	r3, [pc, #168]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dae:	ee17 2a90 	vmov	r2, s15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008db6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ddc:	ee17 2a90 	vmov	r2, s15
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008de4:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de8:	0e1b      	lsrs	r3, r3, #24
 8008dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dee:	ee07 3a90 	vmov	s15, r3
 8008df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0a:	ee17 2a90 	vmov	r2, s15
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e12:	e008      	b.n	8008e26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	609a      	str	r2, [r3, #8]
}
 8008e26:	bf00      	nop
 8008e28:	3724      	adds	r7, #36	@ 0x24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	58024400 	.word	0x58024400
 8008e38:	03d09000 	.word	0x03d09000
 8008e3c:	46000000 	.word	0x46000000
 8008e40:	4c742400 	.word	0x4c742400
 8008e44:	4a742400 	.word	0x4a742400
 8008e48:	4bbebc20 	.word	0x4bbebc20

08008e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b089      	sub	sp, #36	@ 0x24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e54:	4ba1      	ldr	r3, [pc, #644]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e5e:	4b9f      	ldr	r3, [pc, #636]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e62:	0d1b      	lsrs	r3, r3, #20
 8008e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e76:	4b99      	ldr	r3, [pc, #612]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7a:	08db      	lsrs	r3, r3, #3
 8008e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8111 	beq.w	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	f000 8083 	beq.w	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	f200 80a1 	bhi.w	8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d056      	beq.n	8008f64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008eb6:	e099      	b.n	8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eb8:	4b88      	ldr	r3, [pc, #544]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02d      	beq.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec4:	4b85      	ldr	r3, [pc, #532]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	08db      	lsrs	r3, r3, #3
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	4a84      	ldr	r2, [pc, #528]	@ (80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eee:	4b7b      	ldr	r3, [pc, #492]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f1e:	e087      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f32:	4b6a      	ldr	r3, [pc, #424]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f62:	e065      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f76:	4b59      	ldr	r3, [pc, #356]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fa6:	e043      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fba:	4b48      	ldr	r3, [pc, #288]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fea:	e021      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ffe:	4b37      	ldr	r3, [pc, #220]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800900e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800901a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800901e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800902e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009030:	4b2a      	ldr	r3, [pc, #168]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009034:	0a5b      	lsrs	r3, r3, #9
 8009036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800904a:	edd7 6a07 	vldr	s13, [r7, #28]
 800904e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009056:	ee17 2a90 	vmov	r2, s15
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800905e:	4b1f      	ldr	r3, [pc, #124]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009062:	0c1b      	lsrs	r3, r3, #16
 8009064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009078:	edd7 6a07 	vldr	s13, [r7, #28]
 800907c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009084:	ee17 2a90 	vmov	r2, s15
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800908c:	4b13      	ldr	r3, [pc, #76]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009090:	0e1b      	lsrs	r3, r3, #24
 8009092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b2:	ee17 2a90 	vmov	r2, s15
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090ba:	e008      	b.n	80090ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	609a      	str	r2, [r3, #8]
}
 80090ce:	bf00      	nop
 80090d0:	3724      	adds	r7, #36	@ 0x24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	58024400 	.word	0x58024400
 80090e0:	03d09000 	.word	0x03d09000
 80090e4:	46000000 	.word	0x46000000
 80090e8:	4c742400 	.word	0x4c742400
 80090ec:	4a742400 	.word	0x4a742400
 80090f0:	4bbebc20 	.word	0x4bbebc20

080090f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b089      	sub	sp, #36	@ 0x24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090fc:	4ba0      	ldr	r3, [pc, #640]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009106:	4b9e      	ldr	r3, [pc, #632]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	091b      	lsrs	r3, r3, #4
 800910c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009110:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009112:	4b9b      	ldr	r3, [pc, #620]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800911c:	4b98      	ldr	r3, [pc, #608]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800911e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	fb02 f303 	mul.w	r3, r2, r3
 800912c:	ee07 3a90 	vmov	s15, r3
 8009130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009134:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8111 	beq.w	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b02      	cmp	r3, #2
 8009144:	f000 8083 	beq.w	800924e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b02      	cmp	r3, #2
 800914c:	f200 80a1 	bhi.w	8009292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d056      	beq.n	800920a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800915c:	e099      	b.n	8009292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800915e:	4b88      	ldr	r3, [pc, #544]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	d02d      	beq.n	80091c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800916a:	4b85      	ldr	r3, [pc, #532]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	08db      	lsrs	r3, r3, #3
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	4a83      	ldr	r2, [pc, #524]	@ (8009384 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009194:	4b7a      	ldr	r3, [pc, #488]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091c4:	e087      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800938c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d8:	4b69      	ldr	r3, [pc, #420]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009208:	e065      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	ee07 3a90 	vmov	s15, r3
 8009210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009214:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921c:	4b58      	ldr	r3, [pc, #352]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009224:	ee07 3a90 	vmov	s15, r3
 8009228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009230:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924c:	e043      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	ee07 3a90 	vmov	s15, r3
 8009254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009258:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009394 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800925c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009260:	4b47      	ldr	r3, [pc, #284]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009270:	ed97 6a03 	vldr	s12, [r7, #12]
 8009274:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009290:	e021      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800938c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a4:	4b36      	ldr	r3, [pc, #216]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80092d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092da:	0a5b      	lsrs	r3, r3, #9
 80092dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fc:	ee17 2a90 	vmov	r2, s15
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009304:	4b1e      	ldr	r3, [pc, #120]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800931a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800931e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800932a:	ee17 2a90 	vmov	r2, s15
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009332:	4b13      	ldr	r3, [pc, #76]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	0e1b      	lsrs	r3, r3, #24
 8009338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800934c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009358:	ee17 2a90 	vmov	r2, s15
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009360:	e008      	b.n	8009374 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	bf00      	nop
 8009376:	3724      	adds	r7, #36	@ 0x24
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	58024400 	.word	0x58024400
 8009384:	03d09000 	.word	0x03d09000
 8009388:	46000000 	.word	0x46000000
 800938c:	4c742400 	.word	0x4c742400
 8009390:	4a742400 	.word	0x4a742400
 8009394:	4bbebc20 	.word	0x4bbebc20

08009398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093a6:	4b53      	ldr	r3, [pc, #332]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d101      	bne.n	80093b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e099      	b.n	80094ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093b6:	4b4f      	ldr	r3, [pc, #316]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a4e      	ldr	r2, [pc, #312]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093c2:	f7f9 fc05 	bl	8002bd0 <HAL_GetTick>
 80093c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093c8:	e008      	b.n	80093dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093ca:	f7f9 fc01 	bl	8002bd0 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d901      	bls.n	80093dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e086      	b.n	80094ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093dc:	4b45      	ldr	r3, [pc, #276]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f0      	bne.n	80093ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093e8:	4b42      	ldr	r3, [pc, #264]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	493f      	ldr	r1, [pc, #252]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	3b01      	subs	r3, #1
 800940c:	025b      	lsls	r3, r3, #9
 800940e:	b29b      	uxth	r3, r3
 8009410:	431a      	orrs	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	3b01      	subs	r3, #1
 8009418:	041b      	lsls	r3, r3, #16
 800941a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	3b01      	subs	r3, #1
 8009426:	061b      	lsls	r3, r3, #24
 8009428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800942c:	4931      	ldr	r1, [pc, #196]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800942e:	4313      	orrs	r3, r2
 8009430:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009432:	4b30      	ldr	r3, [pc, #192]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009436:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	492d      	ldr	r1, [pc, #180]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009440:	4313      	orrs	r3, r2
 8009442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009444:	4b2b      	ldr	r3, [pc, #172]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	f023 0220 	bic.w	r2, r3, #32
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	4928      	ldr	r1, [pc, #160]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009452:	4313      	orrs	r3, r2
 8009454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009456:	4b27      	ldr	r3, [pc, #156]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	4a26      	ldr	r2, [pc, #152]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800945c:	f023 0310 	bic.w	r3, r3, #16
 8009460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009462:	4b24      	ldr	r3, [pc, #144]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009466:	4b24      	ldr	r3, [pc, #144]	@ (80094f8 <RCCEx_PLL2_Config+0x160>)
 8009468:	4013      	ands	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	69d2      	ldr	r2, [r2, #28]
 800946e:	00d2      	lsls	r2, r2, #3
 8009470:	4920      	ldr	r1, [pc, #128]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009472:	4313      	orrs	r3, r2
 8009474:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009476:	4b1f      	ldr	r3, [pc, #124]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	4a1e      	ldr	r2, [pc, #120]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800947c:	f043 0310 	orr.w	r3, r3, #16
 8009480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009488:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	4a19      	ldr	r2, [pc, #100]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800948e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009494:	e00f      	b.n	80094b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d106      	bne.n	80094aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800949c:	4b15      	ldr	r3, [pc, #84]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800949e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a0:	4a14      	ldr	r2, [pc, #80]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094a8:	e005      	b.n	80094b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094aa:	4b12      	ldr	r3, [pc, #72]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	4a11      	ldr	r2, [pc, #68]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094b6:	4b0f      	ldr	r3, [pc, #60]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a0e      	ldr	r2, [pc, #56]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094c2:	f7f9 fb85 	bl	8002bd0 <HAL_GetTick>
 80094c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094c8:	e008      	b.n	80094dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094ca:	f7f9 fb81 	bl	8002bd0 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d901      	bls.n	80094dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e006      	b.n	80094ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094dc:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0f0      	beq.n	80094ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	58024400 	.word	0x58024400
 80094f8:	ffff0007 	.word	0xffff0007

080094fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800950a:	4b53      	ldr	r3, [pc, #332]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b03      	cmp	r3, #3
 8009514:	d101      	bne.n	800951a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e099      	b.n	800964e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800951a:	4b4f      	ldr	r3, [pc, #316]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a4e      	ldr	r2, [pc, #312]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009526:	f7f9 fb53 	bl	8002bd0 <HAL_GetTick>
 800952a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800952c:	e008      	b.n	8009540 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800952e:	f7f9 fb4f 	bl	8002bd0 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d901      	bls.n	8009540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e086      	b.n	800964e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009540:	4b45      	ldr	r3, [pc, #276]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1f0      	bne.n	800952e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800954c:	4b42      	ldr	r3, [pc, #264]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	051b      	lsls	r3, r3, #20
 800955a:	493f      	ldr	r1, [pc, #252]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800955c:	4313      	orrs	r3, r2
 800955e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	3b01      	subs	r3, #1
 8009570:	025b      	lsls	r3, r3, #9
 8009572:	b29b      	uxth	r3, r3
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	3b01      	subs	r3, #1
 800957c:	041b      	lsls	r3, r3, #16
 800957e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	3b01      	subs	r3, #1
 800958a:	061b      	lsls	r3, r3, #24
 800958c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009590:	4931      	ldr	r1, [pc, #196]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009592:	4313      	orrs	r3, r2
 8009594:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009596:	4b30      	ldr	r3, [pc, #192]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	492d      	ldr	r1, [pc, #180]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	4928      	ldr	r1, [pc, #160]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095ba:	4b27      	ldr	r3, [pc, #156]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095be:	4a26      	ldr	r2, [pc, #152]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095c6:	4b24      	ldr	r3, [pc, #144]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ca:	4b24      	ldr	r3, [pc, #144]	@ (800965c <RCCEx_PLL3_Config+0x160>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	69d2      	ldr	r2, [r2, #28]
 80095d2:	00d2      	lsls	r2, r2, #3
 80095d4:	4920      	ldr	r1, [pc, #128]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095da:	4b1f      	ldr	r3, [pc, #124]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	4a1e      	ldr	r2, [pc, #120]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f0:	4a19      	ldr	r2, [pc, #100]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095f8:	e00f      	b.n	800961a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d106      	bne.n	800960e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009600:	4b15      	ldr	r3, [pc, #84]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	4a14      	ldr	r2, [pc, #80]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800960a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800960c:	e005      	b.n	800961a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800960e:	4b12      	ldr	r3, [pc, #72]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	4a11      	ldr	r2, [pc, #68]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800961a:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a0e      	ldr	r2, [pc, #56]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009626:	f7f9 fad3 	bl	8002bd0 <HAL_GetTick>
 800962a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800962c:	e008      	b.n	8009640 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800962e:	f7f9 facf 	bl	8002bd0 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	2b02      	cmp	r3, #2
 800963a:	d901      	bls.n	8009640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e006      	b.n	800964e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009640:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0f0      	beq.n	800962e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	58024400 	.word	0x58024400
 800965c:	ffff0007 	.word	0xffff0007

08009660 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d074      	beq.n	800975c <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7f8 ffc4 	bl	8002614 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f003 0310 	and.w	r3, r3, #16
 800969e:	2b10      	cmp	r3, #16
 80096a0:	d053      	beq.n	800974a <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	22ca      	movs	r2, #202	@ 0xca
 80096a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2253      	movs	r2, #83	@ 0x53
 80096b0:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f9c6 	bl	8009a44 <RTC_EnterInitMode>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d124      	bne.n	800970c <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6999      	ldr	r1, [r3, #24]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b26      	ldr	r3, [pc, #152]	@ (8009768 <HAL_RTC_Init+0x108>)
 80096ce:	400b      	ands	r3, r1
 80096d0:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6999      	ldr	r1, [r3, #24]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	431a      	orrs	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	0419      	lsls	r1, r3, #16
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9d4 	bl	8009ab0 <RTC_ExitInitMode>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d116      	bne.n	8009740 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699a      	ldr	r2, [r3, #24]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 8009720:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6999      	ldr	r1, [r3, #24]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a1a      	ldr	r2, [r3, #32]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	22ff      	movs	r2, #255	@ 0xff
 8009746:	625a      	str	r2, [r3, #36]	@ 0x24
 8009748:	e001      	b.n	800974e <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  /* return status */
  return status;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	fb8fffbf 	.word	0xfb8fffbf

0800976c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800976c:	b590      	push	{r4, r7, lr}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_RTC_SetTime+0x1a>
 8009782:	2302      	movs	r3, #2
 8009784:	e089      	b.n	800989a <HAL_RTC_SetTime+0x12e>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	22ca      	movs	r2, #202	@ 0xca
 800979c:	625a      	str	r2, [r3, #36]	@ 0x24
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2253      	movs	r2, #83	@ 0x53
 80097a4:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f94c 	bl	8009a44 <RTC_EnterInitMode>
 80097ac:	4603      	mov	r3, r0
 80097ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80097b0:	7cfb      	ldrb	r3, [r7, #19]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d161      	bne.n	800987a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d126      	bne.n	800980a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2200      	movs	r2, #0
 80097ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 f9a9 	bl	8009b2c <RTC_ByteToBcd2>
 80097da:	4603      	mov	r3, r0
 80097dc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	785b      	ldrb	r3, [r3, #1]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f9a2 	bl	8009b2c <RTC_ByteToBcd2>
 80097e8:	4603      	mov	r3, r0
 80097ea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097ec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	789b      	ldrb	r3, [r3, #2]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 f99a 	bl	8009b2c <RTC_ByteToBcd2>
 80097f8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097fa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	78db      	ldrb	r3, [r3, #3]
 8009802:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e018      	b.n	800983c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	785b      	ldrb	r3, [r3, #1]
 8009828:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800982a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009830:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	78db      	ldrb	r3, [r3, #3]
 8009836:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	6979      	ldr	r1, [r7, #20]
 8009842:	4b18      	ldr	r3, [pc, #96]	@ (80098a4 <HAL_RTC_SetTime+0x138>)
 8009844:	400b      	ands	r3, r1
 8009846:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699a      	ldr	r2, [r3, #24]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009856:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6999      	ldr	r1, [r3, #24]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	431a      	orrs	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f91d 	bl	8009ab0 <RTC_ExitInitMode>
 8009876:	4603      	mov	r3, r0
 8009878:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	22ff      	movs	r2, #255	@ 0xff
 8009880:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009882:	7cfb      	ldrb	r3, [r7, #19]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d103      	bne.n	8009890 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009898:	7cfb      	ldrb	r3, [r7, #19]
}
 800989a:	4618      	mov	r0, r3
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd90      	pop	{r4, r7, pc}
 80098a2:	bf00      	nop
 80098a4:	007f7f7f 	.word	0x007f7f7f

080098a8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b22      	ldr	r3, [pc, #136]	@ (800995c <HAL_RTC_GetTime+0xb4>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	0a1b      	lsrs	r3, r3, #8
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009900:	b2da      	uxtb	r2, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	0d9b      	lsrs	r3, r3, #22
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11a      	bne.n	8009952 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f923 	bl	8009b6c <RTC_Bcd2ToByte>
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f91a 	bl	8009b6c <RTC_Bcd2ToByte>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	789b      	ldrb	r3, [r3, #2]
 8009944:	4618      	mov	r0, r3
 8009946:	f000 f911 	bl	8009b6c <RTC_Bcd2ToByte>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	007f7f7f 	.word	0x007f7f7f

08009960 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <HAL_RTC_GetDate+0x98>)
 8009974:	4013      	ands	r3, r2
 8009976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	0c1b      	lsrs	r3, r3, #16
 800997c:	b2da      	uxtb	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	b2db      	uxtb	r3, r3
 8009988:	f003 031f 	and.w	r3, r3, #31
 800998c:	b2da      	uxtb	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800999a:	b2da      	uxtb	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	0b5b      	lsrs	r3, r3, #13
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d11a      	bne.n	80099ec <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	78db      	ldrb	r3, [r3, #3]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f8d6 	bl	8009b6c <RTC_Bcd2ToByte>
 80099c0:	4603      	mov	r3, r0
 80099c2:	461a      	mov	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 f8cd 	bl	8009b6c <RTC_Bcd2ToByte>
 80099d2:	4603      	mov	r3, r0
 80099d4:	461a      	mov	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	789b      	ldrb	r3, [r3, #2]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f8c4 	bl	8009b6c <RTC_Bcd2ToByte>
 80099e4:	4603      	mov	r3, r0
 80099e6:	461a      	mov	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	00ffff3f 	.word	0x00ffff3f

080099fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a0d      	ldr	r2, [pc, #52]	@ (8009a40 <HAL_RTC_WaitForSynchro+0x44>)
 8009a0a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009a0c:	f7f9 f8e0 	bl	8002bd0 <HAL_GetTick>
 8009a10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a12:	e009      	b.n	8009a28 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a14:	f7f9 f8dc 	bl	8002bd0 <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a22:	d901      	bls.n	8009a28 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e007      	b.n	8009a38 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0ee      	beq.n	8009a14 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	0001005f 	.word	0x0001005f

08009a44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d123      	bne.n	8009aa6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a6c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a6e:	f7f9 f8af 	bl	8002bd0 <HAL_GetTick>
 8009a72:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a74:	e00d      	b.n	8009a92 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a76:	f7f9 f8ab 	bl	8002bd0 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a84:	d905      	bls.n	8009a92 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <RTC_EnterInitMode+0x62>
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d1e7      	bne.n	8009a76 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009abc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4a19      	ldr	r2, [pc, #100]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ac6:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009ac8:	4b17      	ldr	r3, [pc, #92]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10c      	bne.n	8009aee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff ff91 	bl	80099fc <HAL_RTC_WaitForSynchro>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01e      	beq.n	8009b1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2203      	movs	r2, #3
 8009ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	73fb      	strb	r3, [r7, #15]
 8009aec:	e017      	b.n	8009b1e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009aee:	4b0e      	ldr	r3, [pc, #56]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	4a0d      	ldr	r2, [pc, #52]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009af4:	f023 0320 	bic.w	r3, r3, #32
 8009af8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff ff7e 	bl	80099fc <HAL_RTC_WaitForSynchro>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2203      	movs	r2, #3
 8009b0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b12:	4b05      	ldr	r3, [pc, #20]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	4a04      	ldr	r2, [pc, #16]	@ (8009b28 <RTC_ExitInitMode+0x78>)
 8009b18:	f043 0320 	orr.w	r3, r3, #32
 8009b1c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	58004000 	.word	0x58004000

08009b2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009b3e:	e005      	b.n	8009b4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	3b0a      	subs	r3, #10
 8009b4a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009b4c:	7afb      	ldrb	r3, [r7, #11]
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	d8f6      	bhi.n	8009b40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	7afb      	ldrb	r3, [r7, #11]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	b2db      	uxtb	r3, r3
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	091b      	lsrs	r3, r3, #4
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	0092      	lsls	r2, r2, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	4413      	add	r3, r2
 8009b92:	b2db      	uxtb	r3, r3
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	@ 0x28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e075      	b.n	8009c9e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7f8 fd57 	bl	8002678 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2204      	movs	r2, #4
 8009bce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f868 	bl	8009ca8 <HAL_SD_InitCard>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e05d      	b.n	8009c9e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009be2:	f107 0308 	add.w	r3, r7, #8
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fdb5 	bl	800a758 <HAL_SD_GetCardStatus>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e052      	b.n	8009c9e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009bf8:	7e3b      	ldrb	r3, [r7, #24]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009bfe:	7e7b      	ldrb	r3, [r7, #25]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d10a      	bne.n	8009c22 <HAL_SD_Init+0x82>
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d102      	bne.n	8009c18 <HAL_SD_Init+0x78>
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009c20:	e00b      	b.n	8009c3a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d104      	bne.n	8009c34 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c30:	659a      	str	r2, [r3, #88]	@ 0x58
 8009c32:	e002      	b.n	8009c3a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fe73 	bl	800a92c <HAL_SD_ConfigWideBusOperation>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e026      	b.n	8009c9e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009c50:	f7f8 ffbe 	bl	8002bd0 <HAL_GetTick>
 8009c54:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009c56:	e011      	b.n	8009c7c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c58:	f7f8 ffba 	bl	8002bd0 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c66:	d109      	bne.n	8009c7c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c6e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e010      	b.n	8009c9e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 ff67 	bl	800ab50 <HAL_SD_GetCardState>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	d1e7      	bne.n	8009c58 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3728      	adds	r7, #40	@ 0x28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b08d      	sub	sp, #52	@ 0x34
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009cc0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009cc4:	f04f 0100 	mov.w	r1, #0
 8009cc8:	f7fe fa7e 	bl	80081c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ccc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d109      	bne.n	8009ce8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009ce2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e070      	b.n	8009dca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	0a1b      	lsrs	r3, r3, #8
 8009cec:	4a39      	ldr	r2, [pc, #228]	@ (8009dd4 <HAL_SD_InitCard+0x12c>)
 8009cee:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf2:	091b      	lsrs	r3, r3, #4
 8009cf4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681c      	ldr	r4, [r3, #0]
 8009cfa:	466a      	mov	r2, sp
 8009cfc:	f107 0318 	add.w	r3, r7, #24
 8009d00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d04:	e882 0003 	stmia.w	r2, {r0, r1}
 8009d08:	f107 030c 	add.w	r3, r7, #12
 8009d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f001 fef4 	bl	800bafc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 ff37 	bl	800bb8c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d007      	beq.n	8009d46 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009d36:	4a28      	ldr	r2, [pc, #160]	@ (8009dd8 <HAL_SD_InitCard+0x130>)
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3e:	3301      	adds	r3, #1
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f8 ff51 	bl	8002be8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fff0 	bl	800ad2c <SD_PowerON>
 8009d4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00b      	beq.n	8009d6c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e02e      	b.n	8009dca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 ff0f 	bl	800ab90 <SD_InitCard>
 8009d72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00b      	beq.n	8009d92 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e01b      	b.n	8009dca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 ff8c 	bl	800bcb8 <SDMMC_CmdBlockLength>
 8009da0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00f      	beq.n	8009dc8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a0b      	ldr	r2, [pc, #44]	@ (8009ddc <HAL_SD_InitCard+0x134>)
 8009dae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e000      	b.n	8009dca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	372c      	adds	r7, #44	@ 0x2c
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd90      	pop	{r4, r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	014f8b59 	.word	0x014f8b59
 8009dd8:	00012110 	.word	0x00012110
 8009ddc:	1fe00fff 	.word	0x1fe00fff

08009de0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b092      	sub	sp, #72	@ 0x48
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009dee:	f7f8 feef 	bl	8002bd0 <HAL_GetTick>
 8009df2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d107      	bne.n	8009e12 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e167      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	f040 815a 	bne.w	800a0d4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	441a      	add	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d907      	bls.n	8009e44 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e38:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e14e      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2203      	movs	r2, #3
 8009e48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2200      	movs	r2, #0
 8009e52:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d002      	beq.n	8009e62 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	025b      	lsls	r3, r3, #9
 8009e60:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	025b      	lsls	r3, r3, #9
 8009e6c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009e6e:	2390      	movs	r3, #144	@ 0x90
 8009e70:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e72:	2302      	movs	r3, #2
 8009e74:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f107 0214 	add.w	r2, r7, #20
 8009e86:	4611      	mov	r1, r2
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 fee9 	bl	800bc60 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e9c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d90a      	bls.n	8009eba <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 ff47 	bl	800bd44 <SDMMC_CmdReadMultiBlock>
 8009eb6:	6478      	str	r0, [r7, #68]	@ 0x44
 8009eb8:	e009      	b.n	8009ece <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 ff19 	bl	800bcfe <SDMMC_CmdReadSingleBlock>
 8009ecc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d012      	beq.n	8009efa <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a84      	ldr	r2, [pc, #528]	@ (800a0ec <HAL_SD_ReadBlocks+0x30c>)
 8009eda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e0f3      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009efe:	e058      	b.n	8009fb2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d033      	beq.n	8009f76 <HAL_SD_ReadBlocks+0x196>
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f10:	2b1f      	cmp	r3, #31
 8009f12:	d930      	bls.n	8009f76 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8009f14:	2300      	movs	r3, #0
 8009f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f18:	e027      	b.n	8009f6a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 fe16 	bl	800bb50 <SDMMC_ReadFIFO>
 8009f24:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f30:	3301      	adds	r3, #1
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f40:	3301      	adds	r3, #1
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f46:	0c1b      	lsrs	r3, r3, #16
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	3301      	adds	r3, #1
 8009f52:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f56:	0e1b      	lsrs	r3, r3, #24
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f60:	3301      	adds	r3, #1
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8009f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f66:	3301      	adds	r3, #1
 8009f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f6c:	2b07      	cmp	r3, #7
 8009f6e:	d9d4      	bls.n	8009f1a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	3b20      	subs	r3, #32
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009f76:	f7f8 fe2b 	bl	8002bd0 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d902      	bls.n	8009f8c <HAL_SD_ReadBlocks+0x1ac>
 8009f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d112      	bne.n	8009fb2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a56      	ldr	r2, [pc, #344]	@ (800a0ec <HAL_SD_ReadBlocks+0x30c>)
 8009f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e097      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb8:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d09f      	beq.n	8009f00 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d022      	beq.n	800a024 <HAL_SD_ReadBlocks+0x244>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d91f      	bls.n	800a024 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d01b      	beq.n	800a024 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 ff11 	bl	800be18 <SDMMC_CmdStopTransfer>
 8009ff6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d012      	beq.n	800a024 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a3a      	ldr	r2, [pc, #232]	@ (800a0ec <HAL_SD_ReadBlocks+0x30c>)
 800a004:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a00a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a00c:	431a      	orrs	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e05e      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d012      	beq.n	800a058 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a2d      	ldr	r2, [pc, #180]	@ (800a0ec <HAL_SD_ReadBlocks+0x30c>)
 800a038:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	f043 0208 	orr.w	r2, r3, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e044      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	d012      	beq.n	800a08c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a20      	ldr	r2, [pc, #128]	@ (800a0ec <HAL_SD_ReadBlocks+0x30c>)
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	f043 0202 	orr.w	r2, r3, #2
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e02a      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d012      	beq.n	800a0c0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a13      	ldr	r2, [pc, #76]	@ (800a0ec <HAL_SD_ReadBlocks+0x30c>)
 800a0a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a6:	f043 0220 	orr.w	r2, r3, #32
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e010      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f0 <HAL_SD_ReadBlocks+0x310>)
 800a0c6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e006      	b.n	800a0e2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
  }
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3748      	adds	r7, #72	@ 0x48
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	1fe00fff 	.word	0x1fe00fff
 800a0f0:	18000f3a 	.word	0x18000f3a

0800a0f4 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b092      	sub	sp, #72	@ 0x48
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a102:	f7f8 fd65 	bl	8002bd0 <HAL_GetTick>
 800a106:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d107      	bne.n	800a126 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e16b      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b01      	cmp	r3, #1
 800a130:	f040 815e 	bne.w	800a3f0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a13a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	441a      	add	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a144:	429a      	cmp	r2, r3
 800a146:	d907      	bls.n	800a158 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a14c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e152      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2203      	movs	r2, #3
 800a15c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2200      	movs	r2, #0
 800a166:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d002      	beq.n	800a176 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a172:	025b      	lsls	r3, r3, #9
 800a174:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a176:	f04f 33ff 	mov.w	r3, #4294967295
 800a17a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	025b      	lsls	r3, r3, #9
 800a180:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a182:	2390      	movs	r3, #144	@ 0x90
 800a184:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a186:	2300      	movs	r3, #0
 800a188:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a18e:	2300      	movs	r3, #0
 800a190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f107 0218 	add.w	r2, r7, #24
 800a19a:	4611      	mov	r1, r2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fd5f 	bl	800bc60 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d90a      	bls.n	800a1ce <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 fe03 	bl	800bdd0 <SDMMC_CmdWriteMultiBlock>
 800a1ca:	6478      	str	r0, [r7, #68]	@ 0x44
 800a1cc:	e009      	b.n	800a1e2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 fdd5 	bl	800bd8a <SDMMC_CmdWriteSingleBlock>
 800a1e0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d012      	beq.n	800a20e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a86      	ldr	r2, [pc, #536]	@ (800a408 <HAL_SD_WriteBlocks+0x314>)
 800a1ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e0f7      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a212:	e05c      	b.n	800a2ce <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a21a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d037      	beq.n	800a292 <HAL_SD_WriteBlocks+0x19e>
 800a222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a224:	2b1f      	cmp	r3, #31
 800a226:	d934      	bls.n	800a292 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800a228:	2300      	movs	r3, #0
 800a22a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a22c:	e02b      	b.n	800a286 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a236:	3301      	adds	r3, #1
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	021a      	lsls	r2, r3, #8
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a248:	3301      	adds	r3, #1
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	041a      	lsls	r2, r3, #16
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25a:	3301      	adds	r3, #1
 800a25c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	061a      	lsls	r2, r3, #24
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	4313      	orrs	r3, r2
 800a268:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26c:	3301      	adds	r3, #1
 800a26e:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f107 0214 	add.w	r2, r7, #20
 800a278:	4611      	mov	r1, r2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fc75 	bl	800bb6a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800a280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a282:	3301      	adds	r3, #1
 800a284:	643b      	str	r3, [r7, #64]	@ 0x40
 800a286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a288:	2b07      	cmp	r3, #7
 800a28a:	d9d0      	bls.n	800a22e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a28e:	3b20      	subs	r3, #32
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a292:	f7f8 fc9d 	bl	8002bd0 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d902      	bls.n	800a2a8 <HAL_SD_WriteBlocks+0x1b4>
 800a2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d112      	bne.n	800a2ce <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a56      	ldr	r2, [pc, #344]	@ (800a408 <HAL_SD_WriteBlocks+0x314>)
 800a2ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e097      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d4:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d09b      	beq.n	800a214 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2ea:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d022      	beq.n	800a340 <HAL_SD_WriteBlocks+0x24c>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d91f      	bls.n	800a340 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a304:	2b03      	cmp	r3, #3
 800a306:	d01b      	beq.n	800a340 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f001 fd83 	bl	800be18 <SDMMC_CmdStopTransfer>
 800a312:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a316:	2b00      	cmp	r3, #0
 800a318:	d012      	beq.n	800a340 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a3a      	ldr	r2, [pc, #232]	@ (800a408 <HAL_SD_WriteBlocks+0x314>)
 800a320:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a328:	431a      	orrs	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e05e      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a346:	f003 0308 	and.w	r3, r3, #8
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d012      	beq.n	800a374 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a2d      	ldr	r2, [pc, #180]	@ (800a408 <HAL_SD_WriteBlocks+0x314>)
 800a354:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35a:	f043 0208 	orr.w	r2, r3, #8
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e044      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d012      	beq.n	800a3a8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a20      	ldr	r2, [pc, #128]	@ (800a408 <HAL_SD_WriteBlocks+0x314>)
 800a388:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a38e:	f043 0202 	orr.w	r2, r3, #2
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e02a      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ae:	f003 0310 	and.w	r3, r3, #16
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d012      	beq.n	800a3dc <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a13      	ldr	r2, [pc, #76]	@ (800a408 <HAL_SD_WriteBlocks+0x314>)
 800a3bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c2:	f043 0210 	orr.w	r2, r3, #16
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e010      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a0a      	ldr	r2, [pc, #40]	@ (800a40c <HAL_SD_WriteBlocks+0x318>)
 800a3e2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e006      	b.n	800a3fe <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3748      	adds	r7, #72	@ 0x48
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	1fe00fff 	.word	0x1fe00fff
 800a40c:	18000f3a 	.word	0x18000f3a

0800a410 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a41e:	0f9b      	lsrs	r3, r3, #30
 800a420:	b2da      	uxtb	r2, r3
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a42a:	0e9b      	lsrs	r3, r3, #26
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f003 030f 	and.w	r3, r3, #15
 800a432:	b2da      	uxtb	r2, r3
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a43c:	0e1b      	lsrs	r3, r3, #24
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0303 	and.w	r3, r3, #3
 800a444:	b2da      	uxtb	r2, r3
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a44e:	0c1b      	lsrs	r3, r3, #16
 800a450:	b2da      	uxtb	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a466:	b2da      	uxtb	r2, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a470:	0d1b      	lsrs	r3, r3, #20
 800a472:	b29a      	uxth	r2, r3
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a47c:	0c1b      	lsrs	r3, r3, #16
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	b2da      	uxtb	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a48e:	0bdb      	lsrs	r3, r3, #15
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	b2da      	uxtb	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4a0:	0b9b      	lsrs	r3, r3, #14
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b2:	0b5b      	lsrs	r3, r3, #13
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4c4:	0b1b      	lsrs	r3, r3, #12
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d163      	bne.n	800a5a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4e4:	009a      	lsls	r2, r3, #2
 800a4e6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a4f0:	0f92      	lsrs	r2, r2, #30
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4fc:	0edb      	lsrs	r3, r3, #27
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	f003 0307 	and.w	r3, r3, #7
 800a504:	b2da      	uxtb	r2, r3
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a50e:	0e1b      	lsrs	r3, r3, #24
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 0307 	and.w	r3, r3, #7
 800a516:	b2da      	uxtb	r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a520:	0d5b      	lsrs	r3, r3, #21
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 0307 	and.w	r3, r3, #7
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a532:	0c9b      	lsrs	r3, r3, #18
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a544:	0bdb      	lsrs	r3, r3, #15
 800a546:	b2db      	uxtb	r3, r3
 800a548:	f003 0307 	and.w	r3, r3, #7
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	7e1b      	ldrb	r3, [r3, #24]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	3302      	adds	r3, #2
 800a568:	2201      	movs	r2, #1
 800a56a:	fa02 f303 	lsl.w	r3, r2, r3
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a572:	fb03 f202 	mul.w	r2, r3, r2
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	7a1b      	ldrb	r3, [r3, #8]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	2201      	movs	r2, #1
 800a586:	409a      	lsls	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a594:	0a52      	lsrs	r2, r2, #9
 800a596:	fb03 f202 	mul.w	r2, r3, r2
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5a4:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5a6:	e031      	b.n	800a60c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d11d      	bne.n	800a5ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5b4:	041b      	lsls	r3, r3, #16
 800a5b6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	029a      	lsls	r2, r3, #10
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5ea:	e00f      	b.n	800a60c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a58      	ldr	r2, [pc, #352]	@ (800a754 <HAL_SD_GetCardCSD+0x344>)
 800a5f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e09d      	b.n	800a748 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a610:	0b9b      	lsrs	r3, r3, #14
 800a612:	b2db      	uxtb	r3, r3
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a622:	09db      	lsrs	r3, r3, #7
 800a624:	b2db      	uxtb	r3, r3
 800a626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a634:	b2db      	uxtb	r3, r3
 800a636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a644:	0fdb      	lsrs	r3, r3, #31
 800a646:	b2da      	uxtb	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a650:	0f5b      	lsrs	r3, r3, #29
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 0303 	and.w	r3, r3, #3
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a662:	0e9b      	lsrs	r3, r3, #26
 800a664:	b2db      	uxtb	r3, r3
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a674:	0d9b      	lsrs	r3, r3, #22
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 030f 	and.w	r3, r3, #15
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a686:	0d5b      	lsrs	r3, r3, #21
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6a2:	0c1b      	lsrs	r3, r3, #16
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6b6:	0bdb      	lsrs	r3, r3, #15
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6ca:	0b9b      	lsrs	r3, r3, #14
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6de:	0b5b      	lsrs	r3, r3, #13
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6f2:	0b1b      	lsrs	r3, r3, #12
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a706:	0a9b      	lsrs	r3, r3, #10
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f003 0303 	and.w	r3, r3, #3
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a71a:	0a1b      	lsrs	r3, r3, #8
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	b2da      	uxtb	r2, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a72e:	085b      	lsrs	r3, r3, #1
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a736:	b2da      	uxtb	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2201      	movs	r2, #1
 800a742:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	1fe00fff 	.word	0x1fe00fff

0800a758 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b094      	sub	sp, #80	@ 0x50
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b03      	cmp	r3, #3
 800a772:	d101      	bne.n	800a778 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e0a7      	b.n	800a8c8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fb62 	bl	800ae48 <SD_SendSDStatus>
 800a784:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d011      	beq.n	800a7b0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a4f      	ldr	r2, [pc, #316]	@ (800a8d0 <HAL_SD_GetCardStatus+0x178>)
 800a792:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a79a:	431a      	orrs	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a7ae:	e070      	b.n	800a892 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	099b      	lsrs	r3, r3, #6
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	095b      	lsrs	r3, r3, #5
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	0a1b      	lsrs	r3, r3, #8
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	0e1b      	lsrs	r3, r3, #24
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	061a      	lsls	r2, r3, #24
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7f6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a800:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	0e1b      	lsrs	r3, r3, #24
 800a806:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	0a1b      	lsrs	r3, r3, #8
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	0d1b      	lsrs	r3, r3, #20
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 030f 	and.w	r3, r3, #15
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	0c1b      	lsrs	r3, r3, #16
 800a832:	b29b      	uxth	r3, r3
 800a834:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a838:	b29a      	uxth	r2, r3
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	b29b      	uxth	r3, r3
 800a842:	4313      	orrs	r3, r2
 800a844:	b29a      	uxth	r2, r3
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	0a9b      	lsrs	r3, r3, #10
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a854:	b2da      	uxtb	r2, r3
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	0a1b      	lsrs	r3, r3, #8
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	b2da      	uxtb	r2, r3
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	091b      	lsrs	r3, r3, #4
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	f003 030f 	and.w	r3, r3, #15
 800a874:	b2da      	uxtb	r2, r3
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	b2da      	uxtb	r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	0e1b      	lsrs	r3, r3, #24
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 fa0c 	bl	800bcb8 <SDMMC_CmdBlockLength>
 800a8a0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00d      	beq.n	800a8c4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a08      	ldr	r2, [pc, #32]	@ (800a8d0 <HAL_SD_GetCardStatus+0x178>)
 800a8ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a8c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3750      	adds	r7, #80	@ 0x50
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	1fe00fff 	.word	0x1fe00fff

0800a8d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a92c:	b590      	push	{r4, r7, lr}
 800a92e:	b08d      	sub	sp, #52	@ 0x34
 800a930:	af02      	add	r7, sp, #8
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2203      	movs	r2, #3
 800a940:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d02e      	beq.n	800a9aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a952:	d106      	bne.n	800a962 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a958:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	635a      	str	r2, [r3, #52]	@ 0x34
 800a960:	e029      	b.n	800a9b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a968:	d10a      	bne.n	800a980 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fb64 	bl	800b038 <SD_WideBus_Enable>
 800a970:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	431a      	orrs	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a97e:	e01a      	b.n	800a9b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10a      	bne.n	800a99c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fba1 	bl	800b0ce <SD_WideBus_Disable>
 800a98c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	635a      	str	r2, [r3, #52]	@ 0x34
 800a99a:	e00c      	b.n	800a9b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9a8:	e005      	b.n	800a9b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d007      	beq.n	800a9ce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a5f      	ldr	r2, [pc, #380]	@ (800ab40 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a9c4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9cc:	e096      	b.n	800aafc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a9ce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a9d2:	f04f 0100 	mov.w	r1, #0
 800a9d6:	f7fd fbf7 	bl	80081c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9da:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 8083 	beq.w	800aaea <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	695a      	ldr	r2, [r3, #20]
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4950      	ldr	r1, [pc, #320]	@ (800ab44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aa02:	fba1 1303 	umull	r1, r3, r1, r3
 800aa06:	0e1b      	lsrs	r3, r3, #24
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d303      	bcc.n	800aa14 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	61bb      	str	r3, [r7, #24]
 800aa12:	e05a      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa1c:	d103      	bne.n	800aa26 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	e051      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa2e:	d126      	bne.n	800aa7e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10e      	bne.n	800aa56 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	4a43      	ldr	r2, [pc, #268]	@ (800ab48 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d906      	bls.n	800aa4e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	4a40      	ldr	r2, [pc, #256]	@ (800ab44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aa44:	fba2 2303 	umull	r2, r3, r2, r3
 800aa48:	0e5b      	lsrs	r3, r3, #25
 800aa4a:	61bb      	str	r3, [r7, #24]
 800aa4c:	e03d      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	61bb      	str	r3, [r7, #24]
 800aa54:	e039      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	69fa      	ldr	r2, [r7, #28]
 800aa5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa62:	4a39      	ldr	r2, [pc, #228]	@ (800ab48 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d906      	bls.n	800aa76 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	4a36      	ldr	r2, [pc, #216]	@ (800ab44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aa6c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa70:	0e5b      	lsrs	r3, r3, #25
 800aa72:	61bb      	str	r3, [r7, #24]
 800aa74:	e029      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	61bb      	str	r3, [r7, #24]
 800aa7c:	e025      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10e      	bne.n	800aaa4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	4a30      	ldr	r2, [pc, #192]	@ (800ab4c <HAL_SD_ConfigWideBusOperation+0x220>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d906      	bls.n	800aa9c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	4a2c      	ldr	r2, [pc, #176]	@ (800ab44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	0e1b      	lsrs	r3, r3, #24
 800aa98:	61bb      	str	r3, [r7, #24]
 800aa9a:	e016      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	61bb      	str	r3, [r7, #24]
 800aaa2:	e012      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	69fa      	ldr	r2, [r7, #28]
 800aaac:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab0:	4a26      	ldr	r2, [pc, #152]	@ (800ab4c <HAL_SD_ConfigWideBusOperation+0x220>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d906      	bls.n	800aac4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	4a22      	ldr	r2, [pc, #136]	@ (800ab44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aaba:	fba2 2303 	umull	r2, r3, r2, r3
 800aabe:	0e1b      	lsrs	r3, r3, #24
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	e002      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681c      	ldr	r4, [r3, #0]
 800aace:	466a      	mov	r2, sp
 800aad0:	f107 0314 	add.w	r3, r7, #20
 800aad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aad8:	e882 0003 	stmia.w	r2, {r0, r1}
 800aadc:	f107 0308 	add.w	r3, r7, #8
 800aae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aae2:	4620      	mov	r0, r4
 800aae4:	f001 f80a 	bl	800bafc <SDMMC_Init>
 800aae8:	e008      	b.n	800aafc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab04:	4618      	mov	r0, r3
 800ab06:	f001 f8d7 	bl	800bcb8 <SDMMC_CmdBlockLength>
 800ab0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00c      	beq.n	800ab2c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a0a      	ldr	r2, [pc, #40]	@ (800ab40 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	431a      	orrs	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800ab34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	372c      	adds	r7, #44	@ 0x2c
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd90      	pop	{r4, r7, pc}
 800ab40:	1fe00fff 	.word	0x1fe00fff
 800ab44:	55e63b89 	.word	0x55e63b89
 800ab48:	02faf080 	.word	0x02faf080
 800ab4c:	017d7840 	.word	0x017d7840

0800ab50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ab5c:	f107 030c 	add.w	r3, r7, #12
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa40 	bl	800afe8 <SD_SendStatus>
 800ab68:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	0a5b      	lsrs	r3, r3, #9
 800ab80:	f003 030f 	and.w	r3, r3, #15
 800ab84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab86:	693b      	ldr	r3, [r7, #16]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b090      	sub	sp, #64	@ 0x40
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ab9c:	f7f8 f818 	bl	8002bd0 <HAL_GetTick>
 800aba0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 f801 	bl	800bbae <SDMMC_GetPowerState>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800abb2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800abb6:	e0b5      	b.n	800ad24 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d02e      	beq.n	800ac1e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 fa4c 	bl	800c062 <SDMMC_CmdSendCID>
 800abca:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <SD_InitCard+0x46>
    {
      return errorstate;
 800abd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd4:	e0a6      	b.n	800ad24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f001 f82c 	bl	800bc3a <SDMMC_GetResponse>
 800abe2:	4602      	mov	r2, r0
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2104      	movs	r1, #4
 800abee:	4618      	mov	r0, r3
 800abf0:	f001 f823 	bl	800bc3a <SDMMC_GetResponse>
 800abf4:	4602      	mov	r2, r0
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2108      	movs	r1, #8
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 f81a 	bl	800bc3a <SDMMC_GetResponse>
 800ac06:	4602      	mov	r2, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	210c      	movs	r1, #12
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 f811 	bl	800bc3a <SDMMC_GetResponse>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d01d      	beq.n	800ac62 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ac26:	e019      	b.n	800ac5c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f107 020a 	add.w	r2, r7, #10
 800ac30:	4611      	mov	r1, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f001 fa54 	bl	800c0e0 <SDMMC_CmdSetRelAdd>
 800ac38:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ac40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac42:	e06f      	b.n	800ad24 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ac44:	f7f7 ffc4 	bl	8002bd0 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d902      	bls.n	800ac5c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ac56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac5a:	e063      	b.n	800ad24 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ac5c:	897b      	ldrh	r3, [r7, #10]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0e2      	beq.n	800ac28 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d036      	beq.n	800acd8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ac6a:	897b      	ldrh	r3, [r7, #10]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7a:	041b      	lsls	r3, r3, #16
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f001 fa0e 	bl	800c0a0 <SDMMC_CmdSendCSD>
 800ac84:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <SD_InitCard+0x100>
    {
      return errorstate;
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8e:	e049      	b.n	800ad24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2100      	movs	r1, #0
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 ffcf 	bl	800bc3a <SDMMC_GetResponse>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2104      	movs	r1, #4
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 ffc6 	bl	800bc3a <SDMMC_GetResponse>
 800acae:	4602      	mov	r2, r0
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2108      	movs	r1, #8
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 ffbd 	bl	800bc3a <SDMMC_GetResponse>
 800acc0:	4602      	mov	r2, r0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	210c      	movs	r1, #12
 800accc:	4618      	mov	r0, r3
 800acce:	f000 ffb4 	bl	800bc3a <SDMMC_GetResponse>
 800acd2:	4602      	mov	r2, r0
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2104      	movs	r1, #4
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 ffab 	bl	800bc3a <SDMMC_GetResponse>
 800ace4:	4603      	mov	r3, r0
 800ace6:	0d1a      	lsrs	r2, r3, #20
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800acec:	f107 030c 	add.w	r3, r7, #12
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7ff fb8c 	bl	800a410 <HAL_SD_GetCardCSD>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acfe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ad02:	e00f      	b.n	800ad24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad0c:	041b      	lsls	r3, r3, #16
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f001 f8bd 	bl	800be90 <SDMMC_CmdSelDesel>
 800ad16:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <SD_InitCard+0x192>
  {
    return errorstate;
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	e000      	b.n	800ad24 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3740      	adds	r7, #64	@ 0x40
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 f8c6 	bl	800bed6 <SDMMC_CmdGoIdleState>
 800ad4a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	e072      	b.n	800ae3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f001 f8d9 	bl	800bf12 <SDMMC_CmdOperCond>
 800ad60:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad68:	d10d      	bne.n	800ad86 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f001 f8ae 	bl	800bed6 <SDMMC_CmdGoIdleState>
 800ad7a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <SD_PowerON+0x60>
    {
      return errorstate;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	e05a      	b.n	800ae3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d137      	bne.n	800ae04 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f001 f8d9 	bl	800bf52 <SDMMC_CmdAppCommand>
 800ada0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d02d      	beq.n	800ae04 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ada8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800adac:	e046      	b.n	800ae3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2100      	movs	r1, #0
 800adb4:	4618      	mov	r0, r3
 800adb6:	f001 f8cc 	bl	800bf52 <SDMMC_CmdAppCommand>
 800adba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	e03a      	b.n	800ae3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	491e      	ldr	r1, [pc, #120]	@ (800ae44 <SD_PowerON+0x118>)
 800adcc:	4618      	mov	r0, r3
 800adce:	f001 f8e3 	bl	800bf98 <SDMMC_CmdAppOperCommand>
 800add2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800adde:	e02d      	b.n	800ae3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 ff27 	bl	800bc3a <SDMMC_GetResponse>
 800adec:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	0fdb      	lsrs	r3, r3, #31
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d101      	bne.n	800adfa <SD_PowerON+0xce>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <SD_PowerON+0xd0>
 800adfa:	2300      	movs	r3, #0
 800adfc:	613b      	str	r3, [r7, #16]

    count++;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	3301      	adds	r3, #1
 800ae02:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d802      	bhi.n	800ae14 <SD_PowerON+0xe8>
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0cc      	beq.n	800adae <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d902      	bls.n	800ae24 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ae1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ae22:	e00b      	b.n	800ae3c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	c1100000 	.word	0xc1100000

0800ae48 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08c      	sub	sp, #48	@ 0x30
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae52:	f7f7 febd 	bl	8002bd0 <HAL_GetTick>
 800ae56:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fee9 	bl	800bc3a <SDMMC_GetResponse>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae72:	d102      	bne.n	800ae7a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae78:	e0b0      	b.n	800afdc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2140      	movs	r1, #64	@ 0x40
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 ff19 	bl	800bcb8 <SDMMC_CmdBlockLength>
 800ae86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d005      	beq.n	800ae9a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	e0a0      	b.n	800afdc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea2:	041b      	lsls	r3, r3, #16
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f001 f853 	bl	800bf52 <SDMMC_CmdAppCommand>
 800aeac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d005      	beq.n	800aec0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	e08d      	b.n	800afdc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aec0:	f04f 33ff 	mov.w	r3, #4294967295
 800aec4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800aec6:	2340      	movs	r3, #64	@ 0x40
 800aec8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800aeca:	2360      	movs	r3, #96	@ 0x60
 800aecc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aece:	2302      	movs	r3, #2
 800aed0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aed6:	2301      	movs	r3, #1
 800aed8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f107 0208 	add.w	r2, r7, #8
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 febb 	bl	800bc60 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 f93b 	bl	800c16a <SDMMC_CmdStatusRegister>
 800aef4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d02b      	beq.n	800af54 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	e069      	b.n	800afdc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d013      	beq.n	800af3e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800af16:	2300      	movs	r3, #0
 800af18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af1a:	e00d      	b.n	800af38 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 fe15 	bl	800bb50 <SDMMC_ReadFIFO>
 800af26:	4602      	mov	r2, r0
 800af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2a:	601a      	str	r2, [r3, #0]
        pData++;
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	3304      	adds	r3, #4
 800af30:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	3301      	adds	r3, #1
 800af36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	2b07      	cmp	r3, #7
 800af3c:	d9ee      	bls.n	800af1c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af3e:	f7f7 fe47 	bl	8002bd0 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d102      	bne.n	800af54 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af52:	e043      	b.n	800afdc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af5a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0d2      	beq.n	800af08 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af68:	f003 0308 	and.w	r3, r3, #8
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800af70:	2308      	movs	r3, #8
 800af72:	e033      	b.n	800afdc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800af82:	2302      	movs	r3, #2
 800af84:	e02a      	b.n	800afdc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b00      	cmp	r3, #0
 800af92:	d017      	beq.n	800afc4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800af94:	2320      	movs	r3, #32
 800af96:	e021      	b.n	800afdc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 fdd7 	bl	800bb50 <SDMMC_ReadFIFO>
 800afa2:	4602      	mov	r2, r0
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	601a      	str	r2, [r3, #0]
    pData++;
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	3304      	adds	r3, #4
 800afac:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800afae:	f7f7 fe0f 	bl	8002bd0 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbc:	d102      	bne.n	800afc4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800afbe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afc2:	e00b      	b.n	800afdc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e2      	bne.n	800af98 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a03      	ldr	r2, [pc, #12]	@ (800afe4 <SD_SendSDStatus+0x19c>)
 800afd8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3730      	adds	r7, #48	@ 0x30
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	18000f3a 	.word	0x18000f3a

0800afe8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800aff8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800affc:	e018      	b.n	800b030 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b006:	041b      	lsls	r3, r3, #16
 800b008:	4619      	mov	r1, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	f001 f88a 	bl	800c124 <SDMMC_CmdSendStatus>
 800b010:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	e009      	b.n	800b030 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fe09 	bl	800bc3a <SDMMC_GetResponse>
 800b028:	4602      	mov	r2, r0
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	2300      	movs	r3, #0
 800b046:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fdf3 	bl	800bc3a <SDMMC_GetResponse>
 800b054:	4603      	mov	r3, r0
 800b056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b05a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b05e:	d102      	bne.n	800b066 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b060:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b064:	e02f      	b.n	800b0c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b066:	f107 030c 	add.w	r3, r7, #12
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f879 	bl	800b164 <SD_FindSCR>
 800b072:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	e023      	b.n	800b0c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01c      	beq.n	800b0c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b090:	041b      	lsls	r3, r3, #16
 800b092:	4619      	mov	r1, r3
 800b094:	4610      	mov	r0, r2
 800b096:	f000 ff5c 	bl	800bf52 <SDMMC_CmdAppCommand>
 800b09a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	e00f      	b.n	800b0c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 ff93 	bl	800bfd8 <SDMMC_CmdBusWidth>
 800b0b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	e003      	b.n	800b0c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e001      	b.n	800b0c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b086      	sub	sp, #24
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 fda8 	bl	800bc3a <SDMMC_GetResponse>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0f4:	d102      	bne.n	800b0fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b0f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b0fa:	e02f      	b.n	800b15c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b0fc:	f107 030c 	add.w	r3, r7, #12
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f82e 	bl	800b164 <SD_FindSCR>
 800b108:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	e023      	b.n	800b15c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d01c      	beq.n	800b158 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b126:	041b      	lsls	r3, r3, #16
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f000 ff11 	bl	800bf52 <SDMMC_CmdAppCommand>
 800b130:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	e00f      	b.n	800b15c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f000 ff48 	bl	800bfd8 <SDMMC_CmdBusWidth>
 800b148:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	e003      	b.n	800b15c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b154:	2300      	movs	r3, #0
 800b156:	e001      	b.n	800b15c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b158:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08e      	sub	sp, #56	@ 0x38
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b16e:	f7f7 fd2f 	bl	8002bd0 <HAL_GetTick>
 800b172:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b178:	2300      	movs	r3, #0
 800b17a:	60bb      	str	r3, [r7, #8]
 800b17c:	2300      	movs	r3, #0
 800b17e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2108      	movs	r1, #8
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fd94 	bl	800bcb8 <SDMMC_CmdBlockLength>
 800b190:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19a:	e0ad      	b.n	800b2f8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1a4:	041b      	lsls	r3, r3, #16
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	f000 fed2 	bl	800bf52 <SDMMC_CmdAppCommand>
 800b1ae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b8:	e09e      	b.n	800b2f8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b1be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b1c0:	2308      	movs	r3, #8
 800b1c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b1c4:	2330      	movs	r3, #48	@ 0x30
 800b1c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f107 0210 	add.w	r2, r7, #16
 800b1dc:	4611      	mov	r1, r2
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fd3e 	bl	800bc60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 ff18 	bl	800c01e <SDMMC_CmdSendSCR>
 800b1ee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d027      	beq.n	800b246 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f8:	e07e      	b.n	800b2f8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d113      	bne.n	800b230 <SD_FindSCR+0xcc>
 800b208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d110      	bne.n	800b230 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fc9c 	bl	800bb50 <SDMMC_ReadFIFO>
 800b218:	4603      	mov	r3, r0
 800b21a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f000 fc95 	bl	800bb50 <SDMMC_ReadFIFO>
 800b226:	4603      	mov	r3, r0
 800b228:	60fb      	str	r3, [r7, #12]
      index++;
 800b22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b22c:	3301      	adds	r3, #1
 800b22e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b230:	f7f7 fcce 	bl	8002bd0 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d102      	bne.n	800b246 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b240:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b244:	e058      	b.n	800b2f8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b24c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b250:	4013      	ands	r3, r2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0d1      	beq.n	800b1fa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b25c:	f003 0308 	and.w	r3, r3, #8
 800b260:	2b00      	cmp	r3, #0
 800b262:	d005      	beq.n	800b270 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2208      	movs	r2, #8
 800b26a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b26c:	2308      	movs	r3, #8
 800b26e:	e043      	b.n	800b2f8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d005      	beq.n	800b28a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2202      	movs	r2, #2
 800b284:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b286:	2302      	movs	r3, #2
 800b288:	e036      	b.n	800b2f8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b290:	f003 0320 	and.w	r3, r3, #32
 800b294:	2b00      	cmp	r3, #0
 800b296:	d005      	beq.n	800b2a4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2220      	movs	r2, #32
 800b29e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b2a0:	2320      	movs	r3, #32
 800b2a2:	e029      	b.n	800b2f8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a15      	ldr	r2, [pc, #84]	@ (800b300 <SD_FindSCR+0x19c>)
 800b2aa:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	061a      	lsls	r2, r3, #24
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	0a1b      	lsrs	r3, r3, #8
 800b2be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b2c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	0e1b      	lsrs	r3, r3, #24
 800b2c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2cc:	601a      	str	r2, [r3, #0]
    scr++;
 800b2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	061a      	lsls	r2, r3, #24
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	0a1b      	lsrs	r3, r3, #8
 800b2e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b2ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	0e1b      	lsrs	r3, r3, #24
 800b2f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3738      	adds	r7, #56	@ 0x38
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	18000f3a 	.word	0x18000f3a

0800b304 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e10f      	b.n	800b536 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a87      	ldr	r2, [pc, #540]	@ (800b540 <HAL_SPI_Init+0x23c>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d00f      	beq.n	800b346 <HAL_SPI_Init+0x42>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a86      	ldr	r2, [pc, #536]	@ (800b544 <HAL_SPI_Init+0x240>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d00a      	beq.n	800b346 <HAL_SPI_Init+0x42>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a84      	ldr	r2, [pc, #528]	@ (800b548 <HAL_SPI_Init+0x244>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d005      	beq.n	800b346 <HAL_SPI_Init+0x42>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	2b0f      	cmp	r3, #15
 800b340:	d901      	bls.n	800b346 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e0f7      	b.n	800b536 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fbbc 	bl	800bac4 <SPI_GetPacketSize>
 800b34c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a7b      	ldr	r2, [pc, #492]	@ (800b540 <HAL_SPI_Init+0x23c>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d00c      	beq.n	800b372 <HAL_SPI_Init+0x6e>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a79      	ldr	r2, [pc, #484]	@ (800b544 <HAL_SPI_Init+0x240>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d007      	beq.n	800b372 <HAL_SPI_Init+0x6e>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a78      	ldr	r2, [pc, #480]	@ (800b548 <HAL_SPI_Init+0x244>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d002      	beq.n	800b372 <HAL_SPI_Init+0x6e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b08      	cmp	r3, #8
 800b370:	d811      	bhi.n	800b396 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b376:	4a72      	ldr	r2, [pc, #456]	@ (800b540 <HAL_SPI_Init+0x23c>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d009      	beq.n	800b390 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a70      	ldr	r2, [pc, #448]	@ (800b544 <HAL_SPI_Init+0x240>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <HAL_SPI_Init+0x8c>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a6f      	ldr	r2, [pc, #444]	@ (800b548 <HAL_SPI_Init+0x244>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d104      	bne.n	800b39a <HAL_SPI_Init+0x96>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b10      	cmp	r3, #16
 800b394:	d901      	bls.n	800b39a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e0cd      	b.n	800b536 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7f7 fa18 	bl	80027e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0201 	bic.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b3d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3e0:	d119      	bne.n	800b416 <HAL_SPI_Init+0x112>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3ea:	d103      	bne.n	800b3f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d008      	beq.n	800b406 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10c      	bne.n	800b416 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b404:	d107      	bne.n	800b416 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b414:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00f      	beq.n	800b442 <HAL_SPI_Init+0x13e>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	2b06      	cmp	r3, #6
 800b428:	d90b      	bls.n	800b442 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	430a      	orrs	r2, r1
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	e007      	b.n	800b452 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b450:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	69da      	ldr	r2, [r3, #28]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45a:	431a      	orrs	r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b464:	ea42 0103 	orr.w	r1, r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68da      	ldr	r2, [r3, #12]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47c:	431a      	orrs	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b482:	431a      	orrs	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	431a      	orrs	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	431a      	orrs	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	431a      	orrs	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4a6:	431a      	orrs	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4b2:	ea42 0103 	orr.w	r1, r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d113      	bne.n	800b4f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b4f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f022 0201 	bic.w	r2, r2, #1
 800b500:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	40013000 	.word	0x40013000
 800b544:	40003800 	.word	0x40003800
 800b548:	40003c00 	.word	0x40003c00

0800b54c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3320      	adds	r3, #32
 800b562:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b564:	f7f7 fb34 	bl	8002bd0 <HAL_GetTick>
 800b568:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b01      	cmp	r3, #1
 800b574:	d001      	beq.n	800b57a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b576:	2302      	movs	r3, #2
 800b578:	e1d1      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <HAL_SPI_Transmit+0x3a>
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e1c9      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_SPI_Transmit+0x4c>
 800b594:	2302      	movs	r3, #2
 800b596:	e1c2      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	88fa      	ldrh	r2, [r7, #6]
 800b5c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b5f0:	d108      	bne.n	800b604 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b600:	601a      	str	r2, [r3, #0]
 800b602:	e009      	b.n	800b618 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b616:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	4b96      	ldr	r3, [pc, #600]	@ (800b878 <HAL_SPI_Transmit+0x32c>)
 800b620:	4013      	ands	r3, r2
 800b622:	88f9      	ldrh	r1, [r7, #6]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	430b      	orrs	r3, r1
 800b62a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f042 0201 	orr.w	r2, r2, #1
 800b63a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b644:	d107      	bne.n	800b656 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b654:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	2b0f      	cmp	r3, #15
 800b65c:	d947      	bls.n	800b6ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b65e:	e03f      	b.n	800b6e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d114      	bne.n	800b698 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6812      	ldr	r2, [r2, #0]
 800b678:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	3b01      	subs	r3, #1
 800b68e:	b29a      	uxth	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b696:	e023      	b.n	800b6e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b698:	f7f7 fa9a 	bl	8002bd0 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d803      	bhi.n	800b6b0 <HAL_SPI_Transmit+0x164>
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d102      	bne.n	800b6b6 <HAL_SPI_Transmit+0x16a>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d114      	bne.n	800b6e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 f936 	bl	800b928 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e11e      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1b9      	bne.n	800b660 <HAL_SPI_Transmit+0x114>
 800b6ec:	e0f1      	b.n	800b8d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	2b07      	cmp	r3, #7
 800b6f4:	f240 80e6 	bls.w	800b8c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b6f8:	e05d      	b.n	800b7b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	f003 0302 	and.w	r3, r3, #2
 800b704:	2b02      	cmp	r3, #2
 800b706:	d132      	bne.n	800b76e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b70e:	b29b      	uxth	r3, r3
 800b710:	2b01      	cmp	r3, #1
 800b712:	d918      	bls.n	800b746 <HAL_SPI_Transmit+0x1fa>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d014      	beq.n	800b746 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	6812      	ldr	r2, [r2, #0]
 800b726:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b72c:	1d1a      	adds	r2, r3, #4
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b738:	b29b      	uxth	r3, r3
 800b73a:	3b02      	subs	r3, #2
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b744:	e037      	b.n	800b7b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b74a:	881a      	ldrh	r2, [r3, #0]
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b754:	1c9a      	adds	r2, r3, #2
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b760:	b29b      	uxth	r3, r3
 800b762:	3b01      	subs	r3, #1
 800b764:	b29a      	uxth	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b76c:	e023      	b.n	800b7b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b76e:	f7f7 fa2f 	bl	8002bd0 <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d803      	bhi.n	800b786 <HAL_SPI_Transmit+0x23a>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d102      	bne.n	800b78c <HAL_SPI_Transmit+0x240>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d114      	bne.n	800b7b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 f8cb 	bl	800b928 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b798:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e0b3      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d19b      	bne.n	800b6fa <HAL_SPI_Transmit+0x1ae>
 800b7c2:	e086      	b.n	800b8d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d154      	bne.n	800b87c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d918      	bls.n	800b810 <HAL_SPI_Transmit+0x2c4>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e2:	2b40      	cmp	r3, #64	@ 0x40
 800b7e4:	d914      	bls.n	800b810 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6812      	ldr	r2, [r2, #0]
 800b7f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7f6:	1d1a      	adds	r2, r3, #4
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b802:	b29b      	uxth	r3, r3
 800b804:	3b04      	subs	r3, #4
 800b806:	b29a      	uxth	r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b80e:	e059      	b.n	800b8c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b816:	b29b      	uxth	r3, r3
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d917      	bls.n	800b84c <HAL_SPI_Transmit+0x300>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d013      	beq.n	800b84c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b828:	881a      	ldrh	r2, [r3, #0]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b832:	1c9a      	adds	r2, r3, #2
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b83e:	b29b      	uxth	r3, r3
 800b840:	3b02      	subs	r3, #2
 800b842:	b29a      	uxth	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b84a:	e03b      	b.n	800b8c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3320      	adds	r3, #32
 800b856:	7812      	ldrb	r2, [r2, #0]
 800b858:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	3b01      	subs	r3, #1
 800b86e:	b29a      	uxth	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b876:	e025      	b.n	800b8c4 <HAL_SPI_Transmit+0x378>
 800b878:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b87c:	f7f7 f9a8 	bl	8002bd0 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d803      	bhi.n	800b894 <HAL_SPI_Transmit+0x348>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b892:	d102      	bne.n	800b89a <HAL_SPI_Transmit+0x34e>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d114      	bne.n	800b8c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f844 	bl	800b928 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e02c      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f47f af79 	bne.w	800b7c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	2108      	movs	r1, #8
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f8c3 	bl	800ba68 <SPI_WaitOnFlagUntilTimeout>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8ee:	f043 0220 	orr.w	r2, r3, #32
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f000 f815 	bl	800b928 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e000      	b.n	800b91e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b91c:	2300      	movs	r3, #0
  }
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop

0800b928 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0208 	orr.w	r2, r2, #8
 800b946:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0210 	orr.w	r2, r2, #16
 800b956:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f022 0201 	bic.w	r2, r2, #1
 800b966:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6919      	ldr	r1, [r3, #16]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b3c      	ldr	r3, [pc, #240]	@ (800ba64 <SPI_CloseTransfer+0x13c>)
 800b974:	400b      	ands	r3, r1
 800b976:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b986:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b04      	cmp	r3, #4
 800b992:	d014      	beq.n	800b9be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f003 0320 	and.w	r3, r3, #32
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00f      	beq.n	800b9be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	699a      	ldr	r2, [r3, #24]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f042 0220 	orr.w	r2, r2, #32
 800b9bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d014      	beq.n	800b9f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00f      	beq.n	800b9f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9da:	f043 0204 	orr.w	r2, r3, #4
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	699a      	ldr	r2, [r3, #24]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00f      	beq.n	800ba1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba04:	f043 0201 	orr.w	r2, r3, #1
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	699a      	ldr	r2, [r3, #24]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00f      	beq.n	800ba48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba2e:	f043 0208 	orr.w	r2, r3, #8
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	699a      	ldr	r2, [r3, #24]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ba58:	bf00      	nop
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	fffffc90 	.word	0xfffffc90

0800ba68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	4613      	mov	r3, r2
 800ba76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ba78:	e010      	b.n	800ba9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba7a:	f7f7 f8a9 	bl	8002bd0 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d803      	bhi.n	800ba92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba90:	d102      	bne.n	800ba98 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e00f      	b.n	800babc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	695a      	ldr	r2, [r3, #20]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	4013      	ands	r3, r2
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	bf0c      	ite	eq
 800baac:	2301      	moveq	r3, #1
 800baae:	2300      	movne	r3, #0
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d0df      	beq.n	800ba7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bad0:	095b      	lsrs	r3, r3, #5
 800bad2:	3301      	adds	r3, #1
 800bad4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	3301      	adds	r3, #1
 800badc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	3307      	adds	r3, #7
 800bae2:	08db      	lsrs	r3, r3, #3
 800bae4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	fb02 f303 	mul.w	r3, r2, r3
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
	...

0800bafc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bafc:	b084      	sub	sp, #16
 800bafe:	b480      	push	{r7}
 800bb00:	b085      	sub	sp, #20
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	f107 001c 	add.w	r0, r7, #28
 800bb0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bb12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bb14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bb16:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bb1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bb1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bb22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <SDMMC_Init+0x50>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	431a      	orrs	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	b004      	add	sp, #16
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	ffc02c00 	.word	0xffc02c00

0800bb50 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f043 0203 	orr.w	r2, r3, #3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0303 	and.w	r3, r3, #3
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
	...

0800bbcc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bbea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bbf0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bbf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	4b06      	ldr	r3, [pc, #24]	@ (800bc1c <SDMMC_SendCommand+0x50>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	fffee0c0 	.word	0xfffee0c0

0800bc20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	b2db      	uxtb	r3, r3
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3314      	adds	r3, #20
 800bc48:	461a      	mov	r2, r3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bc86:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bc8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bc92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	431a      	orrs	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0

}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bcc6:	2310      	movs	r3, #16
 800bcc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bcce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcda:	f107 0308 	add.w	r3, r7, #8
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff ff73 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcea:	2110      	movs	r1, #16
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fa5f 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800bcf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcf4:	69fb      	ldr	r3, [r7, #28]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b088      	sub	sp, #32
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd0c:	2311      	movs	r3, #17
 800bd0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd20:	f107 0308 	add.w	r3, r7, #8
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff ff50 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd30:	2111      	movs	r1, #17
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fa3c 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800bd38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd3a:	69fb      	ldr	r3, [r7, #28]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd52:	2312      	movs	r3, #18
 800bd54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff ff2d 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bd72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd76:	2112      	movs	r1, #18
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fa19 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800bd7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd80:	69fb      	ldr	r3, [r7, #28]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3720      	adds	r7, #32
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b088      	sub	sp, #32
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bd98:	2318      	movs	r3, #24
 800bd9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bda0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bda2:	2300      	movs	r3, #0
 800bda4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bda6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bdaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdac:	f107 0308 	add.w	r3, r7, #8
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff ff0a 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bdb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdbc:	2118      	movs	r1, #24
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f9f6 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800bdc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdc6:	69fb      	ldr	r3, [r7, #28]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3720      	adds	r7, #32
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bdde:	2319      	movs	r3, #25
 800bde0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bde2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bde6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bde8:	2300      	movs	r3, #0
 800bdea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bdf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdf2:	f107 0308 	add.w	r3, r7, #8
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff fee7 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bdfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be02:	2119      	movs	r1, #25
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f9d3 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800be0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be0c:	69fb      	ldr	r3, [r7, #28]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3720      	adds	r7, #32
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be24:	230c      	movs	r3, #12
 800be26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be36:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be50:	f107 0308 	add.w	r3, r7, #8
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff feb8 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800be5c:	4a0b      	ldr	r2, [pc, #44]	@ (800be8c <SDMMC_CmdStopTransfer+0x74>)
 800be5e:	210c      	movs	r1, #12
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f9a5 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800be66:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be7a:	d101      	bne.n	800be80 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800be80:	69fb      	ldr	r3, [r7, #28]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3720      	adds	r7, #32
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	05f5e100 	.word	0x05f5e100

0800be90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800be9e:	2307      	movs	r3, #7
 800bea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800beb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb2:	f107 0308 	add.w	r3, r7, #8
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff fe87 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bec2:	2107      	movs	r1, #7
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f973 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800beca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800becc:	69fb      	ldr	r3, [r7, #28]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3720      	adds	r7, #32
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b088      	sub	sp, #32
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bede:	2300      	movs	r3, #0
 800bee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fe66 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fb97 	bl	800c634 <SDMMC_GetCmdError>
 800bf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf08:	69fb      	ldr	r3, [r7, #28]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf1a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf20:	2308      	movs	r3, #8
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf34:	f107 0308 	add.w	r3, r7, #8
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fe46 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fb29 	bl	800c598 <SDMMC_GetCmdResp7>
 800bf46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf48:	69fb      	ldr	r3, [r7, #28]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b088      	sub	sp, #32
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf60:	2337      	movs	r3, #55	@ 0x37
 800bf62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff fe26 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bf80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf84:	2137      	movs	r1, #55	@ 0x37
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f912 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800bf8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8e:	69fb      	ldr	r3, [r7, #28]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfa6:	2329      	movs	r3, #41	@ 0x29
 800bfa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfba:	f107 0308 	add.w	r3, r7, #8
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff fe03 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fa2e 	bl	800c428 <SDMMC_GetCmdResp3>
 800bfcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfce:	69fb      	ldr	r3, [r7, #28]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3720      	adds	r7, #32
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bfe6:	2306      	movs	r3, #6
 800bfe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffa:	f107 0308 	add.w	r3, r7, #8
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff fde3 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c00a:	2106      	movs	r1, #6
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f8cf 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800c012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c014:	69fb      	ldr	r3, [r7, #28]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3720      	adds	r7, #32
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b088      	sub	sp, #32
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c02a:	2333      	movs	r3, #51	@ 0x33
 800c02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c02e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c03c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff fdc1 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c04a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c04e:	2133      	movs	r1, #51	@ 0x33
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f8ad 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800c056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c058:	69fb      	ldr	r3, [r7, #28]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b088      	sub	sp, #32
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c06e:	2302      	movs	r3, #2
 800c070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c082:	f107 0308 	add.w	r3, r7, #8
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff fd9f 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f980 	bl	800c394 <SDMMC_GetCmdResp2>
 800c094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c096:	69fb      	ldr	r3, [r7, #28]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0ae:	2309      	movs	r3, #9
 800c0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c2:	f107 0308 	add.w	r3, r7, #8
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff fd7f 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f960 	bl	800c394 <SDMMC_GetCmdResp2>
 800c0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0d6:	69fb      	ldr	r3, [r7, #28]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3720      	adds	r7, #32
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c102:	f107 0308 	add.w	r3, r7, #8
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff fd5f 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	2103      	movs	r1, #3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f9c8 	bl	800c4a8 <SDMMC_GetCmdResp6>
 800c118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c11a:	69fb      	ldr	r3, [r7, #28]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c132:	230d      	movs	r3, #13
 800c134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c13c:	2300      	movs	r3, #0
 800c13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c146:	f107 0308 	add.w	r3, r7, #8
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff fd3d 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c152:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c156:	210d      	movs	r1, #13
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f829 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800c15e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c160:	69fb      	ldr	r3, [r7, #28]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3720      	adds	r7, #32
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b088      	sub	sp, #32
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c176:	230d      	movs	r3, #13
 800c178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c17a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c180:	2300      	movs	r3, #0
 800c182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c18a:	f107 0308 	add.w	r3, r7, #8
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff fd1b 	bl	800bbcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c19a:	210d      	movs	r1, #13
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f807 	bl	800c1b0 <SDMMC_GetCmdResp1>
 800c1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a4:	69fb      	ldr	r3, [r7, #28]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	607a      	str	r2, [r7, #4]
 800c1bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1be:	4b70      	ldr	r3, [pc, #448]	@ (800c380 <SDMMC_GetCmdResp1+0x1d0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a70      	ldr	r2, [pc, #448]	@ (800c384 <SDMMC_GetCmdResp1+0x1d4>)
 800c1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c8:	0a5a      	lsrs	r2, r3, #9
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	fb02 f303 	mul.w	r3, r2, r3
 800c1d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	1e5a      	subs	r2, r3, #1
 800c1d6:	61fa      	str	r2, [r7, #28]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d102      	bne.n	800c1e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c1e0:	e0c9      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1e6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	4b67      	ldr	r3, [pc, #412]	@ (800c388 <SDMMC_GetCmdResp1+0x1d8>)
 800c1ec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0ef      	beq.n	800c1d2 <SDMMC_GetCmdResp1+0x22>
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1ea      	bne.n	800c1d2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b00      	cmp	r3, #0
 800c206:	d004      	beq.n	800c212 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2204      	movs	r2, #4
 800c20c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c20e:	2304      	movs	r3, #4
 800c210:	e0b1      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d004      	beq.n	800c228 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2201      	movs	r2, #1
 800c222:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c224:	2301      	movs	r3, #1
 800c226:	e0a6      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4a58      	ldr	r2, [pc, #352]	@ (800c38c <SDMMC_GetCmdResp1+0x1dc>)
 800c22c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff fcf6 	bl	800bc20 <SDMMC_GetCommandResponse>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	7afb      	ldrb	r3, [r7, #11]
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d001      	beq.n	800c242 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c23e:	2301      	movs	r3, #1
 800c240:	e099      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c242:	2100      	movs	r1, #0
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f7ff fcf8 	bl	800bc3a <SDMMC_GetResponse>
 800c24a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	4b50      	ldr	r3, [pc, #320]	@ (800c390 <SDMMC_GetCmdResp1+0x1e0>)
 800c250:	4013      	ands	r3, r2
 800c252:	2b00      	cmp	r3, #0
 800c254:	d101      	bne.n	800c25a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c256:	2300      	movs	r3, #0
 800c258:	e08d      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da02      	bge.n	800c266 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c264:	e087      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c270:	2340      	movs	r3, #64	@ 0x40
 800c272:	e080      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c27e:	2380      	movs	r3, #128	@ 0x80
 800c280:	e079      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c28c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c290:	e071      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c29c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2a0:	e069      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2b0:	e061      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2c0:	e059      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2d0:	e051      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c2e0:	e049      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c2ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2f0:	e041      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c2fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c300:	e039      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c30c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c310:	e031      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c31c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c320:	e029      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c32c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c330:	e021      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c33c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c340:	e019      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c34c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c350:	e011      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c35c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c360:	e009      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c36c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c370:	e001      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c376:	4618      	mov	r0, r3
 800c378:	3720      	adds	r7, #32
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	24000004 	.word	0x24000004
 800c384:	10624dd3 	.word	0x10624dd3
 800c388:	00200045 	.word	0x00200045
 800c38c:	002000c5 	.word	0x002000c5
 800c390:	fdffe008 	.word	0xfdffe008

0800c394 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c39c:	4b1f      	ldr	r3, [pc, #124]	@ (800c41c <SDMMC_GetCmdResp2+0x88>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a1f      	ldr	r2, [pc, #124]	@ (800c420 <SDMMC_GetCmdResp2+0x8c>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	0a5b      	lsrs	r3, r3, #9
 800c3a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3ac:	fb02 f303 	mul.w	r3, r2, r3
 800c3b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	1e5a      	subs	r2, r3, #1
 800c3b6:	60fa      	str	r2, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c3c0:	e026      	b.n	800c410 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0ef      	beq.n	800c3b2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1ea      	bne.n	800c3b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d004      	beq.n	800c3f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2204      	movs	r2, #4
 800c3ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ee:	2304      	movs	r3, #4
 800c3f0:	e00e      	b.n	800c410 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d004      	beq.n	800c408 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c404:	2301      	movs	r3, #1
 800c406:	e003      	b.n	800c410 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a06      	ldr	r2, [pc, #24]	@ (800c424 <SDMMC_GetCmdResp2+0x90>)
 800c40c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	24000004 	.word	0x24000004
 800c420:	10624dd3 	.word	0x10624dd3
 800c424:	002000c5 	.word	0x002000c5

0800c428 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c430:	4b1a      	ldr	r3, [pc, #104]	@ (800c49c <SDMMC_GetCmdResp3+0x74>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a1a      	ldr	r2, [pc, #104]	@ (800c4a0 <SDMMC_GetCmdResp3+0x78>)
 800c436:	fba2 2303 	umull	r2, r3, r2, r3
 800c43a:	0a5b      	lsrs	r3, r3, #9
 800c43c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c440:	fb02 f303 	mul.w	r3, r2, r3
 800c444:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	1e5a      	subs	r2, r3, #1
 800c44a:	60fa      	str	r2, [r7, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c450:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c454:	e01b      	b.n	800c48e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c45a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0ef      	beq.n	800c446 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1ea      	bne.n	800c446 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c474:	f003 0304 	and.w	r3, r3, #4
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2204      	movs	r2, #4
 800c480:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c482:	2304      	movs	r3, #4
 800c484:	e003      	b.n	800c48e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a06      	ldr	r2, [pc, #24]	@ (800c4a4 <SDMMC_GetCmdResp3+0x7c>)
 800c48a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	24000004 	.word	0x24000004
 800c4a0:	10624dd3 	.word	0x10624dd3
 800c4a4:	002000c5 	.word	0x002000c5

0800c4a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4b6:	4b35      	ldr	r3, [pc, #212]	@ (800c58c <SDMMC_GetCmdResp6+0xe4>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a35      	ldr	r2, [pc, #212]	@ (800c590 <SDMMC_GetCmdResp6+0xe8>)
 800c4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c0:	0a5b      	lsrs	r3, r3, #9
 800c4c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4c6:	fb02 f303 	mul.w	r3, r2, r3
 800c4ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	1e5a      	subs	r2, r3, #1
 800c4d0:	61fa      	str	r2, [r7, #28]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d102      	bne.n	800c4dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c4da:	e052      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d0ef      	beq.n	800c4cc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1ea      	bne.n	800c4cc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4fa:	f003 0304 	and.w	r3, r3, #4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d004      	beq.n	800c50c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2204      	movs	r2, #4
 800c506:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c508:	2304      	movs	r3, #4
 800c50a:	e03a      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2201      	movs	r2, #1
 800c51c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c51e:	2301      	movs	r3, #1
 800c520:	e02f      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f7ff fb7c 	bl	800bc20 <SDMMC_GetCommandResponse>
 800c528:	4603      	mov	r3, r0
 800c52a:	461a      	mov	r2, r3
 800c52c:	7afb      	ldrb	r3, [r7, #11]
 800c52e:	4293      	cmp	r3, r2
 800c530:	d001      	beq.n	800c536 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c532:	2301      	movs	r3, #1
 800c534:	e025      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4a16      	ldr	r2, [pc, #88]	@ (800c594 <SDMMC_GetCmdResp6+0xec>)
 800c53a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c53c:	2100      	movs	r1, #0
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f7ff fb7b 	bl	800bc3a <SDMMC_GetResponse>
 800c544:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d106      	bne.n	800c55e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	0c1b      	lsrs	r3, r3, #16
 800c554:	b29a      	uxth	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e011      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c56c:	e009      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c578:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c57c:	e001      	b.n	800c582 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c57e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c582:	4618      	mov	r0, r3
 800c584:	3720      	adds	r7, #32
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	24000004 	.word	0x24000004
 800c590:	10624dd3 	.word	0x10624dd3
 800c594:	002000c5 	.word	0x002000c5

0800c598 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5a0:	4b22      	ldr	r3, [pc, #136]	@ (800c62c <SDMMC_GetCmdResp7+0x94>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a22      	ldr	r2, [pc, #136]	@ (800c630 <SDMMC_GetCmdResp7+0x98>)
 800c5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5aa:	0a5b      	lsrs	r3, r3, #9
 800c5ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5b0:	fb02 f303 	mul.w	r3, r2, r3
 800c5b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	1e5a      	subs	r2, r3, #1
 800c5ba:	60fa      	str	r2, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d102      	bne.n	800c5c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c5c4:	e02c      	b.n	800c620 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0ef      	beq.n	800c5b6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1ea      	bne.n	800c5b6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5e4:	f003 0304 	and.w	r3, r3, #4
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d004      	beq.n	800c5f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2204      	movs	r2, #4
 800c5f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5f2:	2304      	movs	r3, #4
 800c5f4:	e014      	b.n	800c620 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d004      	beq.n	800c60c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2201      	movs	r2, #1
 800c606:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c608:	2301      	movs	r3, #1
 800c60a:	e009      	b.n	800c620 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2240      	movs	r2, #64	@ 0x40
 800c61c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c61e:	2300      	movs	r3, #0

}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	24000004 	.word	0x24000004
 800c630:	10624dd3 	.word	0x10624dd3

0800c634 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c63c:	4b11      	ldr	r3, [pc, #68]	@ (800c684 <SDMMC_GetCmdError+0x50>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a11      	ldr	r2, [pc, #68]	@ (800c688 <SDMMC_GetCmdError+0x54>)
 800c642:	fba2 2303 	umull	r2, r3, r2, r3
 800c646:	0a5b      	lsrs	r3, r3, #9
 800c648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c64c:	fb02 f303 	mul.w	r3, r2, r3
 800c650:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	1e5a      	subs	r2, r3, #1
 800c656:	60fa      	str	r2, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c65c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c660:	e009      	b.n	800c676 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0f1      	beq.n	800c652 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a06      	ldr	r2, [pc, #24]	@ (800c68c <SDMMC_GetCmdError+0x58>)
 800c672:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	24000004 	.word	0x24000004
 800c688:	10624dd3 	.word	0x10624dd3
 800c68c:	002000c5 	.word	0x002000c5

0800c690 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c694:	4904      	ldr	r1, [pc, #16]	@ (800c6a8 <MX_FATFS_Init+0x18>)
 800c696:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <MX_FATFS_Init+0x1c>)
 800c698:	f003 f906 	bl	800f8a8 <FATFS_LinkDriver>
 800c69c:	4603      	mov	r3, r0
 800c69e:	461a      	mov	r2, r3
 800c6a0:	4b03      	ldr	r3, [pc, #12]	@ (800c6b0 <MX_FATFS_Init+0x20>)
 800c6a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6a4:	bf00      	nop
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	24063810 	.word	0x24063810
 800c6ac:	08010718 	.word	0x08010718
 800c6b0:	2406380c 	.word	0x2406380c

0800c6b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c6b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c6ce:	f000 f879 	bl	800c7c4 <BSP_SD_IsDetected>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d001      	beq.n	800c6dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c6d8:	2302      	movs	r3, #2
 800c6da:	e012      	b.n	800c702 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c6dc:	480b      	ldr	r0, [pc, #44]	@ (800c70c <BSP_SD_Init+0x48>)
 800c6de:	f7fd fa5f 	bl	8009ba0 <HAL_SD_Init>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d109      	bne.n	800c700 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c6ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c6f0:	4806      	ldr	r0, [pc, #24]	@ (800c70c <BSP_SD_Init+0x48>)
 800c6f2:	f7fe f91b 	bl	800a92c <HAL_SD_ConfigWideBusOperation>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c700:	79fb      	ldrb	r3, [r7, #7]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	240000fc 	.word	0x240000fc

0800c710 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af02      	add	r7, sp, #8
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	68f9      	ldr	r1, [r7, #12]
 800c72c:	4806      	ldr	r0, [pc, #24]	@ (800c748 <BSP_SD_ReadBlocks+0x38>)
 800c72e:	f7fd fb57 	bl	8009de0 <HAL_SD_ReadBlocks>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	240000fc 	.word	0x240000fc

0800c74c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af02      	add	r7, sp, #8
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	68f9      	ldr	r1, [r7, #12]
 800c768:	4806      	ldr	r0, [pc, #24]	@ (800c784 <BSP_SD_WriteBlocks+0x38>)
 800c76a:	f7fd fcc3 	bl	800a0f4 <HAL_SD_WriteBlocks>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c778:	7dfb      	ldrb	r3, [r7, #23]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	240000fc 	.word	0x240000fc

0800c788 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c78c:	4805      	ldr	r0, [pc, #20]	@ (800c7a4 <BSP_SD_GetCardState+0x1c>)
 800c78e:	f7fe f9df 	bl	800ab50 <HAL_SD_GetCardState>
 800c792:	4603      	mov	r3, r0
 800c794:	2b04      	cmp	r3, #4
 800c796:	bf14      	ite	ne
 800c798:	2301      	movne	r3, #1
 800c79a:	2300      	moveq	r3, #0
 800c79c:	b2db      	uxtb	r3, r3
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	240000fc 	.word	0x240000fc

0800c7a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	4803      	ldr	r0, [pc, #12]	@ (800c7c0 <BSP_SD_GetCardInfo+0x18>)
 800c7b4:	f7fe f88e 	bl	800a8d4 <HAL_SD_GetCardInfo>
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	240000fc 	.word	0x240000fc

0800c7c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c7ce:	f000 f80b 	bl	800c7e8 <BSP_PlatformIsDetected>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	b2db      	uxtb	r3, r3
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c7f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c7f6:	4806      	ldr	r0, [pc, #24]	@ (800c810 <BSP_PlatformIsDetected+0x28>)
 800c7f8:	f7f7 fefa 	bl	80045f0 <HAL_GPIO_ReadPin>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c802:	2300      	movs	r3, #0
 800c804:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c806:	79fb      	ldrb	r3, [r7, #7]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	58020000 	.word	0x58020000

0800c814 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c81e:	4b0b      	ldr	r3, [pc, #44]	@ (800c84c <SD_CheckStatus+0x38>)
 800c820:	2201      	movs	r2, #1
 800c822:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c824:	f7ff ffb0 	bl	800c788 <BSP_SD_GetCardState>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d107      	bne.n	800c83e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c82e:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <SD_CheckStatus+0x38>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f023 0301 	bic.w	r3, r3, #1
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	4b04      	ldr	r3, [pc, #16]	@ (800c84c <SD_CheckStatus+0x38>)
 800c83c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c83e:	4b03      	ldr	r3, [pc, #12]	@ (800c84c <SD_CheckStatus+0x38>)
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b2db      	uxtb	r3, r3
}
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	24000011 	.word	0x24000011

0800c850 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c85a:	4b0b      	ldr	r3, [pc, #44]	@ (800c888 <SD_initialize+0x38>)
 800c85c:	2201      	movs	r2, #1
 800c85e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c860:	f7ff ff30 	bl	800c6c4 <BSP_SD_Init>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d107      	bne.n	800c87a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff ffd1 	bl	800c814 <SD_CheckStatus>
 800c872:	4603      	mov	r3, r0
 800c874:	461a      	mov	r2, r3
 800c876:	4b04      	ldr	r3, [pc, #16]	@ (800c888 <SD_initialize+0x38>)
 800c878:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c87a:	4b03      	ldr	r3, [pc, #12]	@ (800c888 <SD_initialize+0x38>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	b2db      	uxtb	r3, r3
}
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	24000011 	.word	0x24000011

0800c88c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff ffbb 	bl	800c814 <SD_CheckStatus>
 800c89e:	4603      	mov	r3, r0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	603b      	str	r3, [r7, #0]
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	68b8      	ldr	r0, [r7, #8]
 800c8c6:	f7ff ff23 	bl	800c710 <BSP_SD_ReadBlocks>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d107      	bne.n	800c8e0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c8d0:	bf00      	nop
 800c8d2:	f7ff ff59 	bl	800c788 <BSP_SD_GetCardState>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1fa      	bne.n	800c8d2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3718      	adds	r7, #24
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	68b8      	ldr	r0, [r7, #8]
 800c908:	f7ff ff20 	bl	800c74c <BSP_SD_WriteBlocks>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d107      	bne.n	800c922 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c912:	bf00      	nop
 800c914:	f7ff ff38 	bl	800c788 <BSP_SD_GetCardState>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1fa      	bne.n	800c914 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c922:	7dfb      	ldrb	r3, [r7, #23]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08c      	sub	sp, #48	@ 0x30
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	603a      	str	r2, [r7, #0]
 800c936:	71fb      	strb	r3, [r7, #7]
 800c938:	460b      	mov	r3, r1
 800c93a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c942:	4b25      	ldr	r3, [pc, #148]	@ (800c9d8 <SD_ioctl+0xac>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <SD_ioctl+0x28>
 800c950:	2303      	movs	r3, #3
 800c952:	e03c      	b.n	800c9ce <SD_ioctl+0xa2>

  switch (cmd)
 800c954:	79bb      	ldrb	r3, [r7, #6]
 800c956:	2b03      	cmp	r3, #3
 800c958:	d834      	bhi.n	800c9c4 <SD_ioctl+0x98>
 800c95a:	a201      	add	r2, pc, #4	@ (adr r2, 800c960 <SD_ioctl+0x34>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c971 	.word	0x0800c971
 800c964:	0800c979 	.word	0x0800c979
 800c968:	0800c991 	.word	0x0800c991
 800c96c:	0800c9ab 	.word	0x0800c9ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c976:	e028      	b.n	800c9ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff ff13 	bl	800c7a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c982:	6a3a      	ldr	r2, [r7, #32]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c98e:	e01c      	b.n	800c9ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c990:	f107 0308 	add.w	r3, r7, #8
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff ff07 	bl	800c7a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9a8:	e00f      	b.n	800c9ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7ff fefa 	bl	800c7a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b6:	0a5a      	lsrs	r2, r3, #9
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9c2:	e002      	b.n	800c9ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c9c4:	2304      	movs	r3, #4
 800c9c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c9ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3730      	adds	r7, #48	@ 0x30
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	24000011 	.word	0x24000011

0800c9dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	4a08      	ldr	r2, [pc, #32]	@ (800ca0c <disk_status+0x30>)
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	79fa      	ldrb	r2, [r7, #7]
 800c9f4:	4905      	ldr	r1, [pc, #20]	@ (800ca0c <disk_status+0x30>)
 800c9f6:	440a      	add	r2, r1
 800c9f8:	7a12      	ldrb	r2, [r2, #8]
 800c9fa:	4610      	mov	r0, r2
 800c9fc:	4798      	blx	r3
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	2406383c 	.word	0x2406383c

0800ca10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	4a0e      	ldr	r2, [pc, #56]	@ (800ca5c <disk_initialize+0x4c>)
 800ca22:	5cd3      	ldrb	r3, [r2, r3]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d114      	bne.n	800ca52 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ca5c <disk_initialize+0x4c>)
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	79fa      	ldrb	r2, [r7, #7]
 800ca36:	4909      	ldr	r1, [pc, #36]	@ (800ca5c <disk_initialize+0x4c>)
 800ca38:	440a      	add	r2, r1
 800ca3a:	7a12      	ldrb	r2, [r2, #8]
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	4798      	blx	r3
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d103      	bne.n	800ca52 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	4a03      	ldr	r2, [pc, #12]	@ (800ca5c <disk_initialize+0x4c>)
 800ca4e:	2101      	movs	r1, #1
 800ca50:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	2406383c 	.word	0x2406383c

0800ca60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	4a0a      	ldr	r2, [pc, #40]	@ (800ca9c <disk_read+0x3c>)
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	689c      	ldr	r4, [r3, #8]
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	4a07      	ldr	r2, [pc, #28]	@ (800ca9c <disk_read+0x3c>)
 800ca80:	4413      	add	r3, r2
 800ca82:	7a18      	ldrb	r0, [r3, #8]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	47a0      	blx	r4
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ca90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	371c      	adds	r7, #28
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd90      	pop	{r4, r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	2406383c 	.word	0x2406383c

0800caa0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800caa0:	b590      	push	{r4, r7, lr}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	4a0a      	ldr	r2, [pc, #40]	@ (800cadc <disk_write+0x3c>)
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	68dc      	ldr	r4, [r3, #12]
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	4a07      	ldr	r2, [pc, #28]	@ (800cadc <disk_write+0x3c>)
 800cac0:	4413      	add	r3, r2
 800cac2:	7a18      	ldrb	r0, [r3, #8]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	68b9      	ldr	r1, [r7, #8]
 800caca:	47a0      	blx	r4
 800cacc:	4603      	mov	r3, r0
 800cace:	75fb      	strb	r3, [r7, #23]
  return res;
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd90      	pop	{r4, r7, pc}
 800cada:	bf00      	nop
 800cadc:	2406383c 	.word	0x2406383c

0800cae0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	603a      	str	r2, [r7, #0]
 800caea:	71fb      	strb	r3, [r7, #7]
 800caec:	460b      	mov	r3, r1
 800caee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	4a09      	ldr	r2, [pc, #36]	@ (800cb18 <disk_ioctl+0x38>)
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	79fa      	ldrb	r2, [r7, #7]
 800cafe:	4906      	ldr	r1, [pc, #24]	@ (800cb18 <disk_ioctl+0x38>)
 800cb00:	440a      	add	r2, r1
 800cb02:	7a10      	ldrb	r0, [r2, #8]
 800cb04:	79b9      	ldrb	r1, [r7, #6]
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	4798      	blx	r3
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	2406383c 	.word	0x2406383c

0800cb1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3301      	adds	r3, #1
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cb2c:	89fb      	ldrh	r3, [r7, #14]
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	b21a      	sxth	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	b21b      	sxth	r3, r3
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	b21b      	sxth	r3, r3
 800cb3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cb3e:	89fb      	ldrh	r3, [r7, #14]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3303      	adds	r3, #3
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	3202      	adds	r2, #2
 800cb64:	7812      	ldrb	r2, [r2, #0]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	3201      	adds	r2, #1
 800cb72:	7812      	ldrb	r2, [r2, #0]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	021b      	lsls	r3, r3, #8
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	7812      	ldrb	r2, [r2, #0]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	60fb      	str	r3, [r7, #12]
	return rv;
 800cb84:	68fb      	ldr	r3, [r7, #12]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	1c5a      	adds	r2, r3, #1
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	887a      	ldrh	r2, [r7, #2]
 800cba6:	b2d2      	uxtb	r2, r2
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	887b      	ldrh	r3, [r7, #2]
 800cbac:	0a1b      	lsrs	r3, r3, #8
 800cbae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	607a      	str	r2, [r7, #4]
 800cbb6:	887a      	ldrh	r2, [r7, #2]
 800cbb8:	b2d2      	uxtb	r2, r2
 800cbba:	701a      	strb	r2, [r3, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	b2d2      	uxtb	r2, r2
 800cbdc:	701a      	strb	r2, [r3, #0]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	0a1b      	lsrs	r3, r3, #8
 800cbe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	607a      	str	r2, [r7, #4]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	b2d2      	uxtb	r2, r2
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	0a1b      	lsrs	r3, r3, #8
 800cbf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	b2d2      	uxtb	r2, r2
 800cc00:	701a      	strb	r2, [r3, #0]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	0a1b      	lsrs	r3, r3, #8
 800cc06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	b2d2      	uxtb	r2, r2
 800cc12:	701a      	strb	r2, [r3, #0]
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cc20:	b480      	push	{r7}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00d      	beq.n	800cc56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	1c53      	adds	r3, r2, #1
 800cc3e:	613b      	str	r3, [r7, #16]
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	1c59      	adds	r1, r3, #1
 800cc44:	6179      	str	r1, [r7, #20]
 800cc46:	7812      	ldrb	r2, [r2, #0]
 800cc48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	607b      	str	r3, [r7, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1f1      	bne.n	800cc3a <mem_cpy+0x1a>
	}
}
 800cc56:	bf00      	nop
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cc62:	b480      	push	{r7}
 800cc64:	b087      	sub	sp, #28
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	60f8      	str	r0, [r7, #12]
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	617a      	str	r2, [r7, #20]
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	607b      	str	r3, [r7, #4]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1f3      	bne.n	800cc72 <mem_set+0x10>
}
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
 800cc8e:	371c      	adds	r7, #28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cc98:	b480      	push	{r7}
 800cc9a:	b089      	sub	sp, #36	@ 0x24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	61fb      	str	r3, [r7, #28]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	61fa      	str	r2, [r7, #28]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	61ba      	str	r2, [r7, #24]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	1acb      	subs	r3, r1, r3
 800ccc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <mem_cmp+0x40>
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0eb      	beq.n	800ccb0 <mem_cmp+0x18>

	return r;
 800ccd8:	697b      	ldr	r3, [r7, #20]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3724      	adds	r7, #36	@ 0x24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ccf0:	e002      	b.n	800ccf8 <chk_chr+0x12>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	607b      	str	r3, [r7, #4]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <chk_chr+0x26>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	461a      	mov	r2, r3
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d1f2      	bne.n	800ccf2 <chk_chr+0xc>
	return *str;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd26:	2300      	movs	r3, #0
 800cd28:	60bb      	str	r3, [r7, #8]
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	e029      	b.n	800cd84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cd30:	4a27      	ldr	r2, [pc, #156]	@ (800cdd0 <chk_lock+0xb4>)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	011b      	lsls	r3, r3, #4
 800cd36:	4413      	add	r3, r2
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d01d      	beq.n	800cd7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd3e:	4a24      	ldr	r2, [pc, #144]	@ (800cdd0 <chk_lock+0xb4>)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	4413      	add	r3, r2
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d116      	bne.n	800cd7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cd50:	4a1f      	ldr	r2, [pc, #124]	@ (800cdd0 <chk_lock+0xb4>)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	011b      	lsls	r3, r3, #4
 800cd56:	4413      	add	r3, r2
 800cd58:	3304      	adds	r3, #4
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d10c      	bne.n	800cd7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd64:	4a1a      	ldr	r2, [pc, #104]	@ (800cdd0 <chk_lock+0xb4>)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d102      	bne.n	800cd7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd78:	e007      	b.n	800cd8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d9d2      	bls.n	800cd30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d109      	bne.n	800cda4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <chk_lock+0x80>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d101      	bne.n	800cda0 <chk_lock+0x84>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	e010      	b.n	800cdc2 <chk_lock+0xa6>
 800cda0:	2312      	movs	r3, #18
 800cda2:	e00e      	b.n	800cdc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d108      	bne.n	800cdbc <chk_lock+0xa0>
 800cdaa:	4a09      	ldr	r2, [pc, #36]	@ (800cdd0 <chk_lock+0xb4>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	011b      	lsls	r3, r3, #4
 800cdb0:	4413      	add	r3, r2
 800cdb2:	330c      	adds	r3, #12
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdba:	d101      	bne.n	800cdc0 <chk_lock+0xa4>
 800cdbc:	2310      	movs	r3, #16
 800cdbe:	e000      	b.n	800cdc2 <chk_lock+0xa6>
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3714      	adds	r7, #20
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	2406381c 	.word	0x2406381c

0800cdd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cdda:	2300      	movs	r3, #0
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	e002      	b.n	800cde6 <enq_lock+0x12>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3301      	adds	r3, #1
 800cde4:	607b      	str	r3, [r7, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d806      	bhi.n	800cdfa <enq_lock+0x26>
 800cdec:	4a09      	ldr	r2, [pc, #36]	@ (800ce14 <enq_lock+0x40>)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	011b      	lsls	r3, r3, #4
 800cdf2:	4413      	add	r3, r2
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f2      	bne.n	800cde0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	bf14      	ite	ne
 800ce00:	2301      	movne	r3, #1
 800ce02:	2300      	moveq	r3, #0
 800ce04:	b2db      	uxtb	r3, r3
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	2406381c 	.word	0x2406381c

0800ce18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	e01f      	b.n	800ce68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ce28:	4a41      	ldr	r2, [pc, #260]	@ (800cf30 <inc_lock+0x118>)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	4413      	add	r3, r2
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d113      	bne.n	800ce62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ce3a:	4a3d      	ldr	r2, [pc, #244]	@ (800cf30 <inc_lock+0x118>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	4413      	add	r3, r2
 800ce42:	3304      	adds	r3, #4
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d109      	bne.n	800ce62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ce4e:	4a38      	ldr	r2, [pc, #224]	@ (800cf30 <inc_lock+0x118>)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	4413      	add	r3, r2
 800ce56:	3308      	adds	r3, #8
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d006      	beq.n	800ce70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d9dc      	bls.n	800ce28 <inc_lock+0x10>
 800ce6e:	e000      	b.n	800ce72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ce70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d132      	bne.n	800cede <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	e002      	b.n	800ce84 <inc_lock+0x6c>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3301      	adds	r3, #1
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d806      	bhi.n	800ce98 <inc_lock+0x80>
 800ce8a:	4a29      	ldr	r2, [pc, #164]	@ (800cf30 <inc_lock+0x118>)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	011b      	lsls	r3, r3, #4
 800ce90:	4413      	add	r3, r2
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1f2      	bne.n	800ce7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d101      	bne.n	800cea2 <inc_lock+0x8a>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e040      	b.n	800cf24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	4922      	ldr	r1, [pc, #136]	@ (800cf30 <inc_lock+0x118>)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	011b      	lsls	r3, r3, #4
 800ceac:	440b      	add	r3, r1
 800ceae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	689a      	ldr	r2, [r3, #8]
 800ceb4:	491e      	ldr	r1, [pc, #120]	@ (800cf30 <inc_lock+0x118>)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	440b      	add	r3, r1
 800cebc:	3304      	adds	r3, #4
 800cebe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	695a      	ldr	r2, [r3, #20]
 800cec4:	491a      	ldr	r1, [pc, #104]	@ (800cf30 <inc_lock+0x118>)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	011b      	lsls	r3, r3, #4
 800ceca:	440b      	add	r3, r1
 800cecc:	3308      	adds	r3, #8
 800cece:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ced0:	4a17      	ldr	r2, [pc, #92]	@ (800cf30 <inc_lock+0x118>)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	011b      	lsls	r3, r3, #4
 800ced6:	4413      	add	r3, r2
 800ced8:	330c      	adds	r3, #12
 800ceda:	2200      	movs	r2, #0
 800cedc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d009      	beq.n	800cef8 <inc_lock+0xe0>
 800cee4:	4a12      	ldr	r2, [pc, #72]	@ (800cf30 <inc_lock+0x118>)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	011b      	lsls	r3, r3, #4
 800ceea:	4413      	add	r3, r2
 800ceec:	330c      	adds	r3, #12
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <inc_lock+0xe0>
 800cef4:	2300      	movs	r3, #0
 800cef6:	e015      	b.n	800cf24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d108      	bne.n	800cf10 <inc_lock+0xf8>
 800cefe:	4a0c      	ldr	r2, [pc, #48]	@ (800cf30 <inc_lock+0x118>)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	4413      	add	r3, r2
 800cf06:	330c      	adds	r3, #12
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	e001      	b.n	800cf14 <inc_lock+0xfc>
 800cf10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf14:	4906      	ldr	r1, [pc, #24]	@ (800cf30 <inc_lock+0x118>)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	440b      	add	r3, r1
 800cf1c:	330c      	adds	r3, #12
 800cf1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3301      	adds	r3, #1
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	2406381c 	.word	0x2406381c

0800cf34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	607b      	str	r3, [r7, #4]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d825      	bhi.n	800cf94 <dec_lock+0x60>
		n = Files[i].ctr;
 800cf48:	4a17      	ldr	r2, [pc, #92]	@ (800cfa8 <dec_lock+0x74>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	4413      	add	r3, r2
 800cf50:	330c      	adds	r3, #12
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cf56:	89fb      	ldrh	r3, [r7, #14]
 800cf58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf5c:	d101      	bne.n	800cf62 <dec_lock+0x2e>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cf62:	89fb      	ldrh	r3, [r7, #14]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <dec_lock+0x3a>
 800cf68:	89fb      	ldrh	r3, [r7, #14]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cf6e:	4a0e      	ldr	r2, [pc, #56]	@ (800cfa8 <dec_lock+0x74>)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	011b      	lsls	r3, r3, #4
 800cf74:	4413      	add	r3, r2
 800cf76:	330c      	adds	r3, #12
 800cf78:	89fa      	ldrh	r2, [r7, #14]
 800cf7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cf7c:	89fb      	ldrh	r3, [r7, #14]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d105      	bne.n	800cf8e <dec_lock+0x5a>
 800cf82:	4a09      	ldr	r2, [pc, #36]	@ (800cfa8 <dec_lock+0x74>)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	011b      	lsls	r3, r3, #4
 800cf88:	4413      	add	r3, r2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	737b      	strb	r3, [r7, #13]
 800cf92:	e001      	b.n	800cf98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cf94:	2302      	movs	r3, #2
 800cf96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cf98:	7b7b      	ldrb	r3, [r7, #13]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	2406381c 	.word	0x2406381c

0800cfac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	e010      	b.n	800cfdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cfba:	4a0d      	ldr	r2, [pc, #52]	@ (800cff0 <clear_lock+0x44>)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	4413      	add	r3, r2
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d105      	bne.n	800cfd6 <clear_lock+0x2a>
 800cfca:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <clear_lock+0x44>)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	4413      	add	r3, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d9eb      	bls.n	800cfba <clear_lock+0xe>
	}
}
 800cfe2:	bf00      	nop
 800cfe4:	bf00      	nop
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	2406381c 	.word	0x2406381c

0800cff4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	78db      	ldrb	r3, [r3, #3]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d034      	beq.n	800d072 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d00c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7858      	ldrb	r0, [r3, #1]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d018:	2301      	movs	r3, #1
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	f7ff fd40 	bl	800caa0 <disk_write>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d026:	2301      	movs	r3, #1
 800d028:	73fb      	strb	r3, [r7, #15]
 800d02a:	e022      	b.n	800d072 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	1ad2      	subs	r2, r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d217      	bcs.n	800d072 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	789b      	ldrb	r3, [r3, #2]
 800d046:	613b      	str	r3, [r7, #16]
 800d048:	e010      	b.n	800d06c <sync_window+0x78>
					wsect += fs->fsize;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	4413      	add	r3, r2
 800d052:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7858      	ldrb	r0, [r3, #1]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d05e:	2301      	movs	r3, #1
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	f7ff fd1d 	bl	800caa0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	3b01      	subs	r3, #1
 800d06a:	613b      	str	r3, [r7, #16]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d8eb      	bhi.n	800d04a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d072:	7bfb      	ldrb	r3, [r7, #15]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	429a      	cmp	r2, r3
 800d092:	d01b      	beq.n	800d0cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff ffad 	bl	800cff4 <sync_window>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d113      	bne.n	800d0cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7858      	ldrb	r0, [r3, #1]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	f7ff fcd5 	bl	800ca60 <disk_read>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ff87 	bl	800cff4 <sync_window>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d158      	bne.n	800d1a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d148      	bne.n	800d18a <sync_fs+0xb2>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	791b      	ldrb	r3, [r3, #4]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d144      	bne.n	800d18a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3334      	adds	r3, #52	@ 0x34
 800d104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d108:	2100      	movs	r1, #0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7ff fda9 	bl	800cc62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3334      	adds	r3, #52	@ 0x34
 800d114:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d118:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff fd38 	bl	800cb92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3334      	adds	r3, #52	@ 0x34
 800d126:	4921      	ldr	r1, [pc, #132]	@ (800d1ac <sync_fs+0xd4>)
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fd4d 	bl	800cbc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	3334      	adds	r3, #52	@ 0x34
 800d132:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d136:	491e      	ldr	r1, [pc, #120]	@ (800d1b0 <sync_fs+0xd8>)
 800d138:	4618      	mov	r0, r3
 800d13a:	f7ff fd45 	bl	800cbc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3334      	adds	r3, #52	@ 0x34
 800d142:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f7ff fd3b 	bl	800cbc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3334      	adds	r3, #52	@ 0x34
 800d156:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7ff fd31 	bl	800cbc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7858      	ldrb	r0, [r3, #1]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d17e:	2301      	movs	r3, #1
 800d180:	f7ff fc8e 	bl	800caa0 <disk_write>
			fs->fsi_flag = 0;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	785b      	ldrb	r3, [r3, #1]
 800d18e:	2200      	movs	r2, #0
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff fca4 	bl	800cae0 <disk_ioctl>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <sync_fs+0xca>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	41615252 	.word	0x41615252
 800d1b0:	61417272 	.word	0x61417272

0800d1b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	3b02      	subs	r3, #2
 800d1c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	3b02      	subs	r3, #2
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d301      	bcc.n	800d1d4 <clust2sect+0x20>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e008      	b.n	800d1e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	895b      	ldrh	r3, [r3, #10]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	fb03 f202 	mul.w	r2, r3, r2
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e4:	4413      	add	r3, r2
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b086      	sub	sp, #24
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d904      	bls.n	800d212 <get_fat+0x20>
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d302      	bcc.n	800d218 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d212:	2301      	movs	r3, #1
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	e08e      	b.n	800d336 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d218:	f04f 33ff 	mov.w	r3, #4294967295
 800d21c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b03      	cmp	r3, #3
 800d224:	d061      	beq.n	800d2ea <get_fat+0xf8>
 800d226:	2b03      	cmp	r3, #3
 800d228:	dc7b      	bgt.n	800d322 <get_fat+0x130>
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d002      	beq.n	800d234 <get_fat+0x42>
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d041      	beq.n	800d2b6 <get_fat+0xc4>
 800d232:	e076      	b.n	800d322 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	085b      	lsrs	r3, r3, #1
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	0a5b      	lsrs	r3, r3, #9
 800d24a:	4413      	add	r3, r2
 800d24c:	4619      	mov	r1, r3
 800d24e:	6938      	ldr	r0, [r7, #16]
 800d250:	f7ff ff14 	bl	800d07c <move_window>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d166      	bne.n	800d328 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	60fa      	str	r2, [r7, #12]
 800d260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	4413      	add	r3, r2
 800d268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d26c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	0a5b      	lsrs	r3, r3, #9
 800d276:	4413      	add	r3, r2
 800d278:	4619      	mov	r1, r3
 800d27a:	6938      	ldr	r0, [r7, #16]
 800d27c:	f7ff fefe 	bl	800d07c <move_window>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d152      	bne.n	800d32c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	4413      	add	r3, r2
 800d290:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d294:	021b      	lsls	r3, r3, #8
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <get_fat+0xba>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	091b      	lsrs	r3, r3, #4
 800d2aa:	e002      	b.n	800d2b2 <get_fat+0xc0>
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2b2:	617b      	str	r3, [r7, #20]
			break;
 800d2b4:	e03f      	b.n	800d336 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	0a1b      	lsrs	r3, r3, #8
 800d2be:	4413      	add	r3, r2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6938      	ldr	r0, [r7, #16]
 800d2c4:	f7ff feda 	bl	800d07c <move_window>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d130      	bne.n	800d330 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d2dc:	4413      	add	r3, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fc1c 	bl	800cb1c <ld_word>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	617b      	str	r3, [r7, #20]
			break;
 800d2e8:	e025      	b.n	800d336 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	09db      	lsrs	r3, r3, #7
 800d2f2:	4413      	add	r3, r2
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6938      	ldr	r0, [r7, #16]
 800d2f8:	f7ff fec0 	bl	800d07c <move_window>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d118      	bne.n	800d334 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d310:	4413      	add	r3, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff fc1a 	bl	800cb4c <ld_dword>
 800d318:	4603      	mov	r3, r0
 800d31a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d31e:	617b      	str	r3, [r7, #20]
			break;
 800d320:	e009      	b.n	800d336 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d322:	2301      	movs	r3, #1
 800d324:	617b      	str	r3, [r7, #20]
 800d326:	e006      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d328:	bf00      	nop
 800d32a:	e004      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d32c:	bf00      	nop
 800d32e:	e002      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d330:	bf00      	nop
 800d332:	e000      	b.n	800d336 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d334:	bf00      	nop
		}
	}

	return val;
 800d336:	697b      	ldr	r3, [r7, #20]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d340:	b590      	push	{r4, r7, lr}
 800d342:	b089      	sub	sp, #36	@ 0x24
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d34c:	2302      	movs	r3, #2
 800d34e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2b01      	cmp	r3, #1
 800d354:	f240 80d9 	bls.w	800d50a <put_fat+0x1ca>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	429a      	cmp	r2, r3
 800d360:	f080 80d3 	bcs.w	800d50a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b03      	cmp	r3, #3
 800d36a:	f000 8096 	beq.w	800d49a <put_fat+0x15a>
 800d36e:	2b03      	cmp	r3, #3
 800d370:	f300 80cb 	bgt.w	800d50a <put_fat+0x1ca>
 800d374:	2b01      	cmp	r3, #1
 800d376:	d002      	beq.n	800d37e <put_fat+0x3e>
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d06e      	beq.n	800d45a <put_fat+0x11a>
 800d37c:	e0c5      	b.n	800d50a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	61bb      	str	r3, [r7, #24]
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	085b      	lsrs	r3, r3, #1
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	4413      	add	r3, r2
 800d38a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	0a5b      	lsrs	r3, r3, #9
 800d394:	4413      	add	r3, r2
 800d396:	4619      	mov	r1, r3
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f7ff fe6f 	bl	800d07c <move_window>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3a2:	7ffb      	ldrb	r3, [r7, #31]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f040 80a9 	bne.w	800d4fc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	1c59      	adds	r1, r3, #1
 800d3b4:	61b9      	str	r1, [r7, #24]
 800d3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ba:	4413      	add	r3, r2
 800d3bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00d      	beq.n	800d3e4 <put_fat+0xa4>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	b25b      	sxtb	r3, r3
 800d3ce:	f003 030f 	and.w	r3, r3, #15
 800d3d2:	b25a      	sxtb	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	011b      	lsls	r3, r3, #4
 800d3da:	b25b      	sxtb	r3, r3
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	b25b      	sxtb	r3, r3
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	e001      	b.n	800d3e8 <put_fat+0xa8>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	0a5b      	lsrs	r3, r3, #9
 800d3fa:	4413      	add	r3, r2
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff fe3c 	bl	800d07c <move_window>
 800d404:	4603      	mov	r3, r0
 800d406:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d408:	7ffb      	ldrb	r3, [r7, #31]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d178      	bne.n	800d500 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41a:	4413      	add	r3, r2
 800d41c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	2b00      	cmp	r3, #0
 800d426:	d003      	beq.n	800d430 <put_fat+0xf0>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	091b      	lsrs	r3, r3, #4
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	e00e      	b.n	800d44e <put_fat+0x10e>
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	b25b      	sxtb	r3, r3
 800d436:	f023 030f 	bic.w	r3, r3, #15
 800d43a:	b25a      	sxtb	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	0a1b      	lsrs	r3, r3, #8
 800d440:	b25b      	sxtb	r3, r3
 800d442:	f003 030f 	and.w	r3, r3, #15
 800d446:	b25b      	sxtb	r3, r3
 800d448:	4313      	orrs	r3, r2
 800d44a:	b25b      	sxtb	r3, r3
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2201      	movs	r2, #1
 800d456:	70da      	strb	r2, [r3, #3]
			break;
 800d458:	e057      	b.n	800d50a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	0a1b      	lsrs	r3, r3, #8
 800d462:	4413      	add	r3, r2
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7ff fe08 	bl	800d07c <move_window>
 800d46c:	4603      	mov	r3, r0
 800d46e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d470:	7ffb      	ldrb	r3, [r7, #31]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d146      	bne.n	800d504 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d484:	4413      	add	r3, r2
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	b292      	uxth	r2, r2
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff fb80 	bl	800cb92 <st_word>
			fs->wflag = 1;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2201      	movs	r2, #1
 800d496:	70da      	strb	r2, [r3, #3]
			break;
 800d498:	e037      	b.n	800d50a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	09db      	lsrs	r3, r3, #7
 800d4a2:	4413      	add	r3, r2
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fde8 	bl	800d07c <move_window>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4b0:	7ffb      	ldrb	r3, [r7, #31]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d128      	bne.n	800d508 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4ca:	4413      	add	r3, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fb3d 	bl	800cb4c <ld_dword>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d4d8:	4323      	orrs	r3, r4
 800d4da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4ea:	4413      	add	r3, r2
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fb6a 	bl	800cbc8 <st_dword>
			fs->wflag = 1;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	70da      	strb	r2, [r3, #3]
			break;
 800d4fa:	e006      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d4fc:	bf00      	nop
 800d4fe:	e004      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d500:	bf00      	nop
 800d502:	e002      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d504:	bf00      	nop
 800d506:	e000      	b.n	800d50a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d508:	bf00      	nop
		}
	}
	return res;
 800d50a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3724      	adds	r7, #36	@ 0x24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d520:	2300      	movs	r3, #0
 800d522:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d904      	bls.n	800d53a <remove_chain+0x26>
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	429a      	cmp	r2, r3
 800d538:	d301      	bcc.n	800d53e <remove_chain+0x2a>
 800d53a:	2302      	movs	r3, #2
 800d53c:	e04b      	b.n	800d5d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00c      	beq.n	800d55e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d544:	f04f 32ff 	mov.w	r2, #4294967295
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	69b8      	ldr	r0, [r7, #24]
 800d54c:	f7ff fef8 	bl	800d340 <put_fat>
 800d550:	4603      	mov	r3, r0
 800d552:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d554:	7ffb      	ldrb	r3, [r7, #31]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d001      	beq.n	800d55e <remove_chain+0x4a>
 800d55a:	7ffb      	ldrb	r3, [r7, #31]
 800d55c:	e03b      	b.n	800d5d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d55e:	68b9      	ldr	r1, [r7, #8]
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f7ff fe46 	bl	800d1f2 <get_fat>
 800d566:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d031      	beq.n	800d5d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d101      	bne.n	800d578 <remove_chain+0x64>
 800d574:	2302      	movs	r3, #2
 800d576:	e02e      	b.n	800d5d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57e:	d101      	bne.n	800d584 <remove_chain+0x70>
 800d580:	2301      	movs	r3, #1
 800d582:	e028      	b.n	800d5d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d584:	2200      	movs	r2, #0
 800d586:	68b9      	ldr	r1, [r7, #8]
 800d588:	69b8      	ldr	r0, [r7, #24]
 800d58a:	f7ff fed9 	bl	800d340 <put_fat>
 800d58e:	4603      	mov	r3, r0
 800d590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d592:	7ffb      	ldrb	r3, [r7, #31]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <remove_chain+0x88>
 800d598:	7ffb      	ldrb	r3, [r7, #31]
 800d59a:	e01c      	b.n	800d5d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	695a      	ldr	r2, [r3, #20]
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	3b02      	subs	r3, #2
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d20b      	bcs.n	800d5c2 <remove_chain+0xae>
			fs->free_clst++;
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	791b      	ldrb	r3, [r3, #4]
 800d5b8:	f043 0301 	orr.w	r3, r3, #1
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d3c6      	bcc.n	800d55e <remove_chain+0x4a>
 800d5d0:	e000      	b.n	800d5d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d5d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3720      	adds	r7, #32
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b088      	sub	sp, #32
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10d      	bne.n	800d610 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <create_chain+0x2c>
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	69ba      	ldr	r2, [r7, #24]
 800d606:	429a      	cmp	r2, r3
 800d608:	d31b      	bcc.n	800d642 <create_chain+0x64>
 800d60a:	2301      	movs	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	e018      	b.n	800d642 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff fded 	bl	800d1f2 <get_fat>
 800d618:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d801      	bhi.n	800d624 <create_chain+0x46>
 800d620:	2301      	movs	r3, #1
 800d622:	e070      	b.n	800d706 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62a:	d101      	bne.n	800d630 <create_chain+0x52>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	e06a      	b.n	800d706 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	429a      	cmp	r2, r3
 800d638:	d201      	bcs.n	800d63e <create_chain+0x60>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	e063      	b.n	800d706 <create_chain+0x128>
		scl = clst;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	3301      	adds	r3, #1
 800d64a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	429a      	cmp	r2, r3
 800d654:	d307      	bcc.n	800d666 <create_chain+0x88>
				ncl = 2;
 800d656:	2302      	movs	r3, #2
 800d658:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d901      	bls.n	800d666 <create_chain+0x88>
 800d662:	2300      	movs	r3, #0
 800d664:	e04f      	b.n	800d706 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d666:	69f9      	ldr	r1, [r7, #28]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fdc2 	bl	800d1f2 <get_fat>
 800d66e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00e      	beq.n	800d694 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d003      	beq.n	800d684 <create_chain+0xa6>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d682:	d101      	bne.n	800d688 <create_chain+0xaa>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	e03e      	b.n	800d706 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d688:	69fa      	ldr	r2, [r7, #28]
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d1da      	bne.n	800d646 <create_chain+0x68>
 800d690:	2300      	movs	r3, #0
 800d692:	e038      	b.n	800d706 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d694:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d696:	f04f 32ff 	mov.w	r2, #4294967295
 800d69a:	69f9      	ldr	r1, [r7, #28]
 800d69c:	6938      	ldr	r0, [r7, #16]
 800d69e:	f7ff fe4f 	bl	800d340 <put_fat>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d109      	bne.n	800d6c0 <create_chain+0xe2>
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d006      	beq.n	800d6c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d6b2:	69fa      	ldr	r2, [r7, #28]
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6938      	ldr	r0, [r7, #16]
 800d6b8:	f7ff fe42 	bl	800d340 <put_fat>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d116      	bne.n	800d6f4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	69fa      	ldr	r2, [r7, #28]
 800d6ca:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	695a      	ldr	r2, [r3, #20]
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	3b02      	subs	r3, #2
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d804      	bhi.n	800d6e4 <create_chain+0x106>
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	695b      	ldr	r3, [r3, #20]
 800d6de:	1e5a      	subs	r2, r3, #1
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	791b      	ldrb	r3, [r3, #4]
 800d6e8:	f043 0301 	orr.w	r3, r3, #1
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	711a      	strb	r2, [r3, #4]
 800d6f2:	e007      	b.n	800d704 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d102      	bne.n	800d700 <create_chain+0x122>
 800d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fe:	e000      	b.n	800d702 <create_chain+0x124>
 800d700:	2301      	movs	r3, #1
 800d702:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d704:	69fb      	ldr	r3, [r7, #28]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3720      	adds	r7, #32
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d70e:	b480      	push	{r7}
 800d710:	b087      	sub	sp, #28
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d722:	3304      	adds	r3, #4
 800d724:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	0a5b      	lsrs	r3, r3, #9
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	8952      	ldrh	r2, [r2, #10]
 800d72e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d732:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	613a      	str	r2, [r7, #16]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <clmt_clust+0x3a>
 800d744:	2300      	movs	r3, #0
 800d746:	e010      	b.n	800d76a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d748:	697a      	ldr	r2, [r7, #20]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d307      	bcc.n	800d760 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	3304      	adds	r3, #4
 800d75c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d75e:	e7e9      	b.n	800d734 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d760:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	4413      	add	r3, r2
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	371c      	adds	r7, #28
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b086      	sub	sp, #24
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d78c:	d204      	bcs.n	800d798 <dir_sdi+0x22>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f003 031f 	and.w	r3, r3, #31
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <dir_sdi+0x26>
		return FR_INT_ERR;
 800d798:	2302      	movs	r3, #2
 800d79a:	e063      	b.n	800d864 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <dir_sdi+0x46>
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d902      	bls.n	800d7bc <dir_sdi+0x46>
		clst = fs->dirbase;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	095b      	lsrs	r3, r3, #5
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	8912      	ldrh	r2, [r2, #8]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d301      	bcc.n	800d7d2 <dir_sdi+0x5c>
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	e048      	b.n	800d864 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	61da      	str	r2, [r3, #28]
 800d7da:	e029      	b.n	800d830 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	895b      	ldrh	r3, [r3, #10]
 800d7e0:	025b      	lsls	r3, r3, #9
 800d7e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d7e4:	e019      	b.n	800d81a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6979      	ldr	r1, [r7, #20]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fd01 	bl	800d1f2 <get_fat>
 800d7f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f8:	d101      	bne.n	800d7fe <dir_sdi+0x88>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e032      	b.n	800d864 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d904      	bls.n	800d80e <dir_sdi+0x98>
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d301      	bcc.n	800d812 <dir_sdi+0x9c>
 800d80e:	2302      	movs	r3, #2
 800d810:	e028      	b.n	800d864 <dir_sdi+0xee>
			ofs -= csz;
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d2e1      	bcs.n	800d7e6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d822:	6979      	ldr	r1, [r7, #20]
 800d824:	6938      	ldr	r0, [r7, #16]
 800d826:	f7ff fcc5 	bl	800d1b4 <clust2sect>
 800d82a:	4602      	mov	r2, r0
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d101      	bne.n	800d842 <dir_sdi+0xcc>
 800d83e:	2302      	movs	r3, #2
 800d840:	e010      	b.n	800d864 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	69da      	ldr	r2, [r3, #28]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	0a5b      	lsrs	r3, r3, #9
 800d84a:	441a      	add	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85c:	441a      	add	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	695b      	ldr	r3, [r3, #20]
 800d880:	3320      	adds	r3, #32
 800d882:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	69db      	ldr	r3, [r3, #28]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <dir_next+0x28>
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d892:	d301      	bcc.n	800d898 <dir_next+0x2c>
 800d894:	2304      	movs	r3, #4
 800d896:	e0aa      	b.n	800d9ee <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f040 8098 	bne.w	800d9d4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	69db      	ldr	r3, [r3, #28]
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	699b      	ldr	r3, [r3, #24]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10b      	bne.n	800d8ce <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	095b      	lsrs	r3, r3, #5
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	8912      	ldrh	r2, [r2, #8]
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	f0c0 8088 	bcc.w	800d9d4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	61da      	str	r2, [r3, #28]
 800d8ca:	2304      	movs	r3, #4
 800d8cc:	e08f      	b.n	800d9ee <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	0a5b      	lsrs	r3, r3, #9
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	8952      	ldrh	r2, [r2, #10]
 800d8d6:	3a01      	subs	r2, #1
 800d8d8:	4013      	ands	r3, r2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d17a      	bne.n	800d9d4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	f7ff fc83 	bl	800d1f2 <get_fat>
 800d8ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d801      	bhi.n	800d8f8 <dir_next+0x8c>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e07a      	b.n	800d9ee <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fe:	d101      	bne.n	800d904 <dir_next+0x98>
 800d900:	2301      	movs	r3, #1
 800d902:	e074      	b.n	800d9ee <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d358      	bcc.n	800d9c0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	61da      	str	r2, [r3, #28]
 800d91a:	2304      	movs	r3, #4
 800d91c:	e067      	b.n	800d9ee <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7ff fe59 	bl	800d5de <create_chain>
 800d92c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <dir_next+0xcc>
 800d934:	2307      	movs	r3, #7
 800d936:	e05a      	b.n	800d9ee <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d101      	bne.n	800d942 <dir_next+0xd6>
 800d93e:	2302      	movs	r3, #2
 800d940:	e055      	b.n	800d9ee <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d948:	d101      	bne.n	800d94e <dir_next+0xe2>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e04f      	b.n	800d9ee <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7ff fb50 	bl	800cff4 <sync_window>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <dir_next+0xf2>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e047      	b.n	800d9ee <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3334      	adds	r3, #52	@ 0x34
 800d962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff f97a 	bl	800cc62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d96e:	2300      	movs	r3, #0
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	6979      	ldr	r1, [r7, #20]
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f7ff fc1d 	bl	800d1b4 <clust2sect>
 800d97a:	4602      	mov	r2, r0
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d980:	e012      	b.n	800d9a8 <dir_next+0x13c>
						fs->wflag = 1;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2201      	movs	r2, #1
 800d986:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f7ff fb33 	bl	800cff4 <sync_window>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <dir_next+0x12c>
 800d994:	2301      	movs	r3, #1
 800d996:	e02a      	b.n	800d9ee <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	3301      	adds	r3, #1
 800d99c:	613b      	str	r3, [r7, #16]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	895b      	ldrh	r3, [r3, #10]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d3e6      	bcc.n	800d982 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	1ad2      	subs	r2, r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d9c6:	6979      	ldr	r1, [r7, #20]
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7ff fbf3 	bl	800d1b4 <clust2sect>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e6:	441a      	add	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b086      	sub	sp, #24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800da06:	2100      	movs	r1, #0
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff feb4 	bl	800d776 <dir_sdi>
 800da0e:	4603      	mov	r3, r0
 800da10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d12b      	bne.n	800da70 <dir_alloc+0x7a>
		n = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	69db      	ldr	r3, [r3, #28]
 800da20:	4619      	mov	r1, r3
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff fb2a 	bl	800d07c <move_window>
 800da28:	4603      	mov	r3, r0
 800da2a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da2c:	7dfb      	ldrb	r3, [r7, #23]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d11d      	bne.n	800da6e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2be5      	cmp	r3, #229	@ 0xe5
 800da3a:	d004      	beq.n	800da46 <dir_alloc+0x50>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a1b      	ldr	r3, [r3, #32]
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d107      	bne.n	800da56 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	3301      	adds	r3, #1
 800da4a:	613b      	str	r3, [r7, #16]
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	429a      	cmp	r2, r3
 800da52:	d102      	bne.n	800da5a <dir_alloc+0x64>
 800da54:	e00c      	b.n	800da70 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800da56:	2300      	movs	r3, #0
 800da58:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800da5a:	2101      	movs	r1, #1
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff ff05 	bl	800d86c <dir_next>
 800da62:	4603      	mov	r3, r0
 800da64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800da66:	7dfb      	ldrb	r3, [r7, #23]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0d7      	beq.n	800da1c <dir_alloc+0x26>
 800da6c:	e000      	b.n	800da70 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800da6e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	2b04      	cmp	r3, #4
 800da74:	d101      	bne.n	800da7a <dir_alloc+0x84>
 800da76:	2307      	movs	r3, #7
 800da78:	75fb      	strb	r3, [r7, #23]
	return res;
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	331a      	adds	r3, #26
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff f842 	bl	800cb1c <ld_word>
 800da98:	4603      	mov	r3, r0
 800da9a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d109      	bne.n	800dab8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	3314      	adds	r3, #20
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff f837 	bl	800cb1c <ld_word>
 800daae:	4603      	mov	r3, r0
 800dab0:	041b      	lsls	r3, r3, #16
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4313      	orrs	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dab8:	68fb      	ldr	r3, [r7, #12]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	331a      	adds	r3, #26
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	b292      	uxth	r2, r2
 800dad6:	4611      	mov	r1, r2
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff f85a 	bl	800cb92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d109      	bne.n	800dafa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f103 0214 	add.w	r2, r3, #20
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	4619      	mov	r1, r3
 800daf4:	4610      	mov	r0, r2
 800daf6:	f7ff f84c 	bl	800cb92 <st_word>
	}
}
 800dafa:	bf00      	nop
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
	...

0800db04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800db04:	b590      	push	{r4, r7, lr}
 800db06:	b087      	sub	sp, #28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	331a      	adds	r3, #26
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff f802 	bl	800cb1c <ld_word>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <cmp_lfn+0x1e>
 800db1e:	2300      	movs	r3, #0
 800db20:	e059      	b.n	800dbd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db2a:	1e5a      	subs	r2, r3, #1
 800db2c:	4613      	mov	r3, r2
 800db2e:	005b      	lsls	r3, r3, #1
 800db30:	4413      	add	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db38:	2301      	movs	r3, #1
 800db3a:	81fb      	strh	r3, [r7, #14]
 800db3c:	2300      	movs	r3, #0
 800db3e:	613b      	str	r3, [r7, #16]
 800db40:	e033      	b.n	800dbaa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800db42:	4a27      	ldr	r2, [pc, #156]	@ (800dbe0 <cmp_lfn+0xdc>)
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	4413      	add	r3, r2
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	4413      	add	r3, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe ffe3 	bl	800cb1c <ld_word>
 800db56:	4603      	mov	r3, r0
 800db58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800db5a:	89fb      	ldrh	r3, [r7, #14]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01a      	beq.n	800db96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	2bfe      	cmp	r3, #254	@ 0xfe
 800db64:	d812      	bhi.n	800db8c <cmp_lfn+0x88>
 800db66:	89bb      	ldrh	r3, [r7, #12]
 800db68:	4618      	mov	r0, r3
 800db6a:	f001 feff 	bl	800f96c <ff_wtoupper>
 800db6e:	4603      	mov	r3, r0
 800db70:	461c      	mov	r4, r3
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	1c5a      	adds	r2, r3, #1
 800db76:	617a      	str	r2, [r7, #20]
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	4413      	add	r3, r2
 800db7e:	881b      	ldrh	r3, [r3, #0]
 800db80:	4618      	mov	r0, r3
 800db82:	f001 fef3 	bl	800f96c <ff_wtoupper>
 800db86:	4603      	mov	r3, r0
 800db88:	429c      	cmp	r4, r3
 800db8a:	d001      	beq.n	800db90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800db8c:	2300      	movs	r3, #0
 800db8e:	e022      	b.n	800dbd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800db90:	89bb      	ldrh	r3, [r7, #12]
 800db92:	81fb      	strh	r3, [r7, #14]
 800db94:	e006      	b.n	800dba4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800db96:	89bb      	ldrh	r3, [r7, #12]
 800db98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d001      	beq.n	800dba4 <cmp_lfn+0xa0>
 800dba0:	2300      	movs	r3, #0
 800dba2:	e018      	b.n	800dbd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	3301      	adds	r3, #1
 800dba8:	613b      	str	r3, [r7, #16]
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	2b0c      	cmp	r3, #12
 800dbae:	d9c8      	bls.n	800db42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00b      	beq.n	800dbd4 <cmp_lfn+0xd0>
 800dbbc:	89fb      	ldrh	r3, [r7, #14]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d008      	beq.n	800dbd4 <cmp_lfn+0xd0>
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	4413      	add	r3, r2
 800dbca:	881b      	ldrh	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <cmp_lfn+0xd0>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e000      	b.n	800dbd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dbd4:	2301      	movs	r3, #1
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	371c      	adds	r7, #28
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd90      	pop	{r4, r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	080107ac 	.word	0x080107ac

0800dbe4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	4611      	mov	r1, r2
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	71fb      	strb	r3, [r7, #7]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	330d      	adds	r3, #13
 800dbfe:	79ba      	ldrb	r2, [r7, #6]
 800dc00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	330b      	adds	r3, #11
 800dc06:	220f      	movs	r2, #15
 800dc08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	2200      	movs	r2, #0
 800dc10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	331a      	adds	r3, #26
 800dc16:	2100      	movs	r1, #0
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe ffba 	bl	800cb92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	1e5a      	subs	r2, r3, #1
 800dc22:	4613      	mov	r3, r2
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4413      	add	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	82fb      	strh	r3, [r7, #22]
 800dc32:	2300      	movs	r3, #0
 800dc34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dc36:	8afb      	ldrh	r3, [r7, #22]
 800dc38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d007      	beq.n	800dc50 <put_lfn+0x6c>
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	61fa      	str	r2, [r7, #28]
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dc50:	4a17      	ldr	r2, [pc, #92]	@ (800dcb0 <put_lfn+0xcc>)
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	4413      	add	r3, r2
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	8afa      	ldrh	r2, [r7, #22]
 800dc60:	4611      	mov	r1, r2
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe ff95 	bl	800cb92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dc68:	8afb      	ldrh	r3, [r7, #22]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d102      	bne.n	800dc74 <put_lfn+0x90>
 800dc6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	3301      	adds	r3, #1
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	2b0c      	cmp	r3, #12
 800dc7e:	d9da      	bls.n	800dc36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dc80:	8afb      	ldrh	r3, [r7, #22]
 800dc82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d006      	beq.n	800dc98 <put_lfn+0xb4>
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	4413      	add	r3, r2
 800dc92:	881b      	ldrh	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d103      	bne.n	800dca0 <put_lfn+0xbc>
 800dc98:	79fb      	ldrb	r3, [r7, #7]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	79fa      	ldrb	r2, [r7, #7]
 800dca4:	701a      	strb	r2, [r3, #0]
}
 800dca6:	bf00      	nop
 800dca8:	3720      	adds	r7, #32
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	080107ac 	.word	0x080107ac

0800dcb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08c      	sub	sp, #48	@ 0x30
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dcc2:	220b      	movs	r2, #11
 800dcc4:	68b9      	ldr	r1, [r7, #8]
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7fe ffaa 	bl	800cc20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	2b05      	cmp	r3, #5
 800dcd0:	d929      	bls.n	800dd26 <gen_numname+0x72>
		sr = seq;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dcd6:	e020      	b.n	800dd1a <gen_numname+0x66>
			wc = *lfn++;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	1c9a      	adds	r2, r3, #2
 800dcdc:	607a      	str	r2, [r7, #4]
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800dce2:	2300      	movs	r3, #0
 800dce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dce6:	e015      	b.n	800dd14 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	005a      	lsls	r2, r3, #1
 800dcec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	4413      	add	r3, r2
 800dcf4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dcf6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dcf8:	085b      	lsrs	r3, r3, #1
 800dcfa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d003      	beq.n	800dd0e <gen_numname+0x5a>
 800dd06:	69fa      	ldr	r2, [r7, #28]
 800dd08:	4b30      	ldr	r3, [pc, #192]	@ (800ddcc <gen_numname+0x118>)
 800dd0a:	4053      	eors	r3, r2
 800dd0c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd10:	3301      	adds	r3, #1
 800dd12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd16:	2b0f      	cmp	r3, #15
 800dd18:	d9e6      	bls.n	800dce8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	881b      	ldrh	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1da      	bne.n	800dcd8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dd26:	2307      	movs	r3, #7
 800dd28:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 030f 	and.w	r3, r3, #15
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	3330      	adds	r3, #48	@ 0x30
 800dd36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800dd3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd3e:	2b39      	cmp	r3, #57	@ 0x39
 800dd40:	d904      	bls.n	800dd4c <gen_numname+0x98>
 800dd42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd46:	3307      	adds	r3, #7
 800dd48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4e:	1e5a      	subs	r2, r3, #1
 800dd50:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dd52:	3330      	adds	r3, #48	@ 0x30
 800dd54:	443b      	add	r3, r7
 800dd56:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800dd5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	091b      	lsrs	r3, r3, #4
 800dd62:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1df      	bne.n	800dd2a <gen_numname+0x76>
	ns[i] = '~';
 800dd6a:	f107 0214 	add.w	r2, r7, #20
 800dd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd70:	4413      	add	r3, r2
 800dd72:	227e      	movs	r2, #126	@ 0x7e
 800dd74:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dd76:	2300      	movs	r3, #0
 800dd78:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd7a:	e002      	b.n	800dd82 <gen_numname+0xce>
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7e:	3301      	adds	r3, #1
 800dd80:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d205      	bcs.n	800dd96 <gen_numname+0xe2>
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8e:	4413      	add	r3, r2
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b20      	cmp	r3, #32
 800dd94:	d1f2      	bne.n	800dd7c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd98:	2b07      	cmp	r3, #7
 800dd9a:	d807      	bhi.n	800ddac <gen_numname+0xf8>
 800dd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dda2:	3330      	adds	r3, #48	@ 0x30
 800dda4:	443b      	add	r3, r7
 800dda6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ddaa:	e000      	b.n	800ddae <gen_numname+0xfa>
 800ddac:	2120      	movs	r1, #32
 800ddae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	460a      	mov	r2, r1
 800ddba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbe:	2b07      	cmp	r3, #7
 800ddc0:	d9e9      	bls.n	800dd96 <gen_numname+0xe2>
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3730      	adds	r7, #48	@ 0x30
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	00011021 	.word	0x00011021

0800ddd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dddc:	230b      	movs	r3, #11
 800ddde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dde0:	7bfb      	ldrb	r3, [r7, #15]
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	0852      	lsrs	r2, r2, #1
 800dde6:	01db      	lsls	r3, r3, #7
 800dde8:	4313      	orrs	r3, r2
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	1c59      	adds	r1, r3, #1
 800ddf0:	6079      	str	r1, [r7, #4]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	60bb      	str	r3, [r7, #8]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1ed      	bne.n	800dde0 <sum_sfn+0x10>
	return sum;
 800de04:	7bfb      	ldrb	r3, [r7, #15]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b086      	sub	sp, #24
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800de20:	2100      	movs	r1, #0
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff fca7 	bl	800d776 <dir_sdi>
 800de28:	4603      	mov	r3, r0
 800de2a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <dir_find+0x24>
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	e0a9      	b.n	800df8a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de36:	23ff      	movs	r3, #255	@ 0xff
 800de38:	753b      	strb	r3, [r7, #20]
 800de3a:	7d3b      	ldrb	r3, [r7, #20]
 800de3c:	757b      	strb	r3, [r7, #21]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f04f 32ff 	mov.w	r2, #4294967295
 800de44:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	69db      	ldr	r3, [r3, #28]
 800de4a:	4619      	mov	r1, r3
 800de4c:	6938      	ldr	r0, [r7, #16]
 800de4e:	f7ff f915 	bl	800d07c <move_window>
 800de52:	4603      	mov	r3, r0
 800de54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f040 8090 	bne.w	800df7e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de66:	7dbb      	ldrb	r3, [r7, #22]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d102      	bne.n	800de72 <dir_find+0x60>
 800de6c:	2304      	movs	r3, #4
 800de6e:	75fb      	strb	r3, [r7, #23]
 800de70:	e08a      	b.n	800df88 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	330b      	adds	r3, #11
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de7e:	73fb      	strb	r3, [r7, #15]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	7bfa      	ldrb	r2, [r7, #15]
 800de84:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800de86:	7dbb      	ldrb	r3, [r7, #22]
 800de88:	2be5      	cmp	r3, #229	@ 0xe5
 800de8a:	d007      	beq.n	800de9c <dir_find+0x8a>
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	f003 0308 	and.w	r3, r3, #8
 800de92:	2b00      	cmp	r3, #0
 800de94:	d009      	beq.n	800deaa <dir_find+0x98>
 800de96:	7bfb      	ldrb	r3, [r7, #15]
 800de98:	2b0f      	cmp	r3, #15
 800de9a:	d006      	beq.n	800deaa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de9c:	23ff      	movs	r3, #255	@ 0xff
 800de9e:	757b      	strb	r3, [r7, #21]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f04f 32ff 	mov.w	r2, #4294967295
 800dea6:	631a      	str	r2, [r3, #48]	@ 0x30
 800dea8:	e05e      	b.n	800df68 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	2b0f      	cmp	r3, #15
 800deae:	d136      	bne.n	800df1e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800deb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deba:	2b00      	cmp	r3, #0
 800debc:	d154      	bne.n	800df68 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800debe:	7dbb      	ldrb	r3, [r7, #22]
 800dec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00d      	beq.n	800dee4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a1b      	ldr	r3, [r3, #32]
 800decc:	7b5b      	ldrb	r3, [r3, #13]
 800dece:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ded0:	7dbb      	ldrb	r3, [r7, #22]
 800ded2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ded6:	75bb      	strb	r3, [r7, #22]
 800ded8:	7dbb      	ldrb	r3, [r7, #22]
 800deda:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	695a      	ldr	r2, [r3, #20]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dee4:	7dba      	ldrb	r2, [r7, #22]
 800dee6:	7d7b      	ldrb	r3, [r7, #21]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d115      	bne.n	800df18 <dir_find+0x106>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6a1b      	ldr	r3, [r3, #32]
 800def0:	330d      	adds	r3, #13
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	7d3a      	ldrb	r2, [r7, #20]
 800def6:	429a      	cmp	r2, r3
 800def8:	d10e      	bne.n	800df18 <dir_find+0x106>
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	68da      	ldr	r2, [r3, #12]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	4619      	mov	r1, r3
 800df04:	4610      	mov	r0, r2
 800df06:	f7ff fdfd 	bl	800db04 <cmp_lfn>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d003      	beq.n	800df18 <dir_find+0x106>
 800df10:	7d7b      	ldrb	r3, [r7, #21]
 800df12:	3b01      	subs	r3, #1
 800df14:	b2db      	uxtb	r3, r3
 800df16:	e000      	b.n	800df1a <dir_find+0x108>
 800df18:	23ff      	movs	r3, #255	@ 0xff
 800df1a:	757b      	strb	r3, [r7, #21]
 800df1c:	e024      	b.n	800df68 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800df1e:	7d7b      	ldrb	r3, [r7, #21]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d109      	bne.n	800df38 <dir_find+0x126>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	4618      	mov	r0, r3
 800df2a:	f7ff ff51 	bl	800ddd0 <sum_sfn>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	7d3b      	ldrb	r3, [r7, #20]
 800df34:	4293      	cmp	r3, r2
 800df36:	d024      	beq.n	800df82 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10a      	bne.n	800df5c <dir_find+0x14a>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a18      	ldr	r0, [r3, #32]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3324      	adds	r3, #36	@ 0x24
 800df4e:	220b      	movs	r2, #11
 800df50:	4619      	mov	r1, r3
 800df52:	f7fe fea1 	bl	800cc98 <mem_cmp>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d014      	beq.n	800df86 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df5c:	23ff      	movs	r3, #255	@ 0xff
 800df5e:	757b      	strb	r3, [r7, #21]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f04f 32ff 	mov.w	r2, #4294967295
 800df66:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800df68:	2100      	movs	r1, #0
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff fc7e 	bl	800d86c <dir_next>
 800df70:	4603      	mov	r3, r0
 800df72:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800df74:	7dfb      	ldrb	r3, [r7, #23]
 800df76:	2b00      	cmp	r3, #0
 800df78:	f43f af65 	beq.w	800de46 <dir_find+0x34>
 800df7c:	e004      	b.n	800df88 <dir_find+0x176>
		if (res != FR_OK) break;
 800df7e:	bf00      	nop
 800df80:	e002      	b.n	800df88 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800df82:	bf00      	nop
 800df84:	e000      	b.n	800df88 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800df86:	bf00      	nop

	return res;
 800df88:	7dfb      	ldrb	r3, [r7, #23]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3718      	adds	r7, #24
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b08c      	sub	sp, #48	@ 0x30
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dfa8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <dir_register+0x20>
 800dfb0:	2306      	movs	r3, #6
 800dfb2:	e0e0      	b.n	800e176 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfb8:	e002      	b.n	800dfc0 <dir_register+0x2c>
 800dfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	68da      	ldr	r2, [r3, #12]
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	4413      	add	r3, r2
 800dfca:	881b      	ldrh	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d1f4      	bne.n	800dfba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800dfd6:	f107 030c 	add.w	r3, r7, #12
 800dfda:	220c      	movs	r2, #12
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fe fe1f 	bl	800cc20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	f003 0301 	and.w	r3, r3, #1
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d032      	beq.n	800e052 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2240      	movs	r2, #64	@ 0x40
 800dff0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800dff4:	2301      	movs	r3, #1
 800dff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dff8:	e016      	b.n	800e028 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	68da      	ldr	r2, [r3, #12]
 800e004:	f107 010c 	add.w	r1, r7, #12
 800e008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e00a:	f7ff fe53 	bl	800dcb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff feff 	bl	800de12 <dir_find>
 800e014:	4603      	mov	r3, r0
 800e016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e01a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d106      	bne.n	800e030 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e024:	3301      	adds	r3, #1
 800e026:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e02a:	2b63      	cmp	r3, #99	@ 0x63
 800e02c:	d9e5      	bls.n	800dffa <dir_register+0x66>
 800e02e:	e000      	b.n	800e032 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e030:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e034:	2b64      	cmp	r3, #100	@ 0x64
 800e036:	d101      	bne.n	800e03c <dir_register+0xa8>
 800e038:	2307      	movs	r3, #7
 800e03a:	e09c      	b.n	800e176 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e03c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e040:	2b04      	cmp	r3, #4
 800e042:	d002      	beq.n	800e04a <dir_register+0xb6>
 800e044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e048:	e095      	b.n	800e176 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e04a:	7dfa      	ldrb	r2, [r7, #23]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e052:	7dfb      	ldrb	r3, [r7, #23]
 800e054:	f003 0302 	and.w	r3, r3, #2
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d007      	beq.n	800e06c <dir_register+0xd8>
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05e:	330c      	adds	r3, #12
 800e060:	4a47      	ldr	r2, [pc, #284]	@ (800e180 <dir_register+0x1ec>)
 800e062:	fba2 2303 	umull	r2, r3, r2, r3
 800e066:	089b      	lsrs	r3, r3, #2
 800e068:	3301      	adds	r3, #1
 800e06a:	e000      	b.n	800e06e <dir_register+0xda>
 800e06c:	2301      	movs	r3, #1
 800e06e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e070:	6a39      	ldr	r1, [r7, #32]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fcbf 	bl	800d9f6 <dir_alloc>
 800e078:	4603      	mov	r3, r0
 800e07a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e07e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e082:	2b00      	cmp	r3, #0
 800e084:	d148      	bne.n	800e118 <dir_register+0x184>
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	3b01      	subs	r3, #1
 800e08a:	623b      	str	r3, [r7, #32]
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d042      	beq.n	800e118 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	695a      	ldr	r2, [r3, #20]
 800e096:	6a3b      	ldr	r3, [r7, #32]
 800e098:	015b      	lsls	r3, r3, #5
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff fb69 	bl	800d776 <dir_sdi>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d132      	bne.n	800e118 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3324      	adds	r3, #36	@ 0x24
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff fe8a 	bl	800ddd0 <sum_sfn>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	69db      	ldr	r3, [r3, #28]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	69f8      	ldr	r0, [r7, #28]
 800e0c8:	f7fe ffd8 	bl	800d07c <move_window>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d11d      	bne.n	800e116 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	68d8      	ldr	r0, [r3, #12]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a19      	ldr	r1, [r3, #32]
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	7efb      	ldrb	r3, [r7, #27]
 800e0e8:	f7ff fd7c 	bl	800dbe4 <put_lfn>
				fs->wflag = 1;
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff fbb9 	bl	800d86c <dir_next>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e100:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e104:	2b00      	cmp	r3, #0
 800e106:	d107      	bne.n	800e118 <dir_register+0x184>
 800e108:	6a3b      	ldr	r3, [r7, #32]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	623b      	str	r3, [r7, #32]
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1d5      	bne.n	800e0c0 <dir_register+0x12c>
 800e114:	e000      	b.n	800e118 <dir_register+0x184>
				if (res != FR_OK) break;
 800e116:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e118:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d128      	bne.n	800e172 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	4619      	mov	r1, r3
 800e126:	69f8      	ldr	r0, [r7, #28]
 800e128:	f7fe ffa8 	bl	800d07c <move_window>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e132:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e136:	2b00      	cmp	r3, #0
 800e138:	d11b      	bne.n	800e172 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	2220      	movs	r2, #32
 800e140:	2100      	movs	r1, #0
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fd8d 	bl	800cc62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a18      	ldr	r0, [r3, #32]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3324      	adds	r3, #36	@ 0x24
 800e150:	220b      	movs	r2, #11
 800e152:	4619      	mov	r1, r3
 800e154:	f7fe fd64 	bl	800cc20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	330c      	adds	r3, #12
 800e164:	f002 0218 	and.w	r2, r2, #24
 800e168:	b2d2      	uxtb	r2, r2
 800e16a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	2201      	movs	r2, #1
 800e170:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e176:	4618      	mov	r0, r3
 800e178:	3730      	adds	r7, #48	@ 0x30
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	4ec4ec4f 	.word	0x4ec4ec4f

0800e184 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08a      	sub	sp, #40	@ 0x28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	613b      	str	r3, [r7, #16]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	2300      	movs	r3, #0
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	61ba      	str	r2, [r7, #24]
 800e1aa:	693a      	ldr	r2, [r7, #16]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e1b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1b4:	2b1f      	cmp	r3, #31
 800e1b6:	d940      	bls.n	800e23a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e1b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800e1bc:	d006      	beq.n	800e1cc <create_name+0x48>
 800e1be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e1c2:	d110      	bne.n	800e1e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e1c4:	e002      	b.n	800e1cc <create_name+0x48>
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	61bb      	str	r3, [r7, #24]
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e1d6:	d0f6      	beq.n	800e1c6 <create_name+0x42>
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	4413      	add	r3, r2
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e1e2:	d0f0      	beq.n	800e1c6 <create_name+0x42>
			break;
 800e1e4:	e02a      	b.n	800e23c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e1ea:	d901      	bls.n	800e1f0 <create_name+0x6c>
 800e1ec:	2306      	movs	r3, #6
 800e1ee:	e17d      	b.n	800e4ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e1f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e1f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1f8:	2101      	movs	r1, #1
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f001 fb7a 	bl	800f8f4 <ff_convert>
 800e200:	4603      	mov	r3, r0
 800e202:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <create_name+0x8a>
 800e20a:	2306      	movs	r3, #6
 800e20c:	e16e      	b.n	800e4ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e20e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e210:	2b7f      	cmp	r3, #127	@ 0x7f
 800e212:	d809      	bhi.n	800e228 <create_name+0xa4>
 800e214:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e216:	4619      	mov	r1, r3
 800e218:	488d      	ldr	r0, [pc, #564]	@ (800e450 <create_name+0x2cc>)
 800e21a:	f7fe fd64 	bl	800cce6 <chk_chr>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <create_name+0xa4>
 800e224:	2306      	movs	r3, #6
 800e226:	e161      	b.n	800e4ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	617a      	str	r2, [r7, #20]
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	4413      	add	r3, r2
 800e234:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e236:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e238:	e7b4      	b.n	800e1a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e23a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	441a      	add	r2, r3
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e248:	2b1f      	cmp	r3, #31
 800e24a:	d801      	bhi.n	800e250 <create_name+0xcc>
 800e24c:	2304      	movs	r3, #4
 800e24e:	e000      	b.n	800e252 <create_name+0xce>
 800e250:	2300      	movs	r3, #0
 800e252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e256:	e011      	b.n	800e27c <create_name+0xf8>
		w = lfn[di - 1];
 800e258:	697a      	ldr	r2, [r7, #20]
 800e25a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e25e:	4413      	add	r3, r2
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	4413      	add	r3, r2
 800e266:	881b      	ldrh	r3, [r3, #0]
 800e268:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e26a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e26c:	2b20      	cmp	r3, #32
 800e26e:	d002      	beq.n	800e276 <create_name+0xf2>
 800e270:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e272:	2b2e      	cmp	r3, #46	@ 0x2e
 800e274:	d106      	bne.n	800e284 <create_name+0x100>
		di--;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	3b01      	subs	r3, #1
 800e27a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1ea      	bne.n	800e258 <create_name+0xd4>
 800e282:	e000      	b.n	800e286 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e284:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	68fa      	ldr	r2, [r7, #12]
 800e28c:	4413      	add	r3, r2
 800e28e:	2200      	movs	r2, #0
 800e290:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d101      	bne.n	800e29c <create_name+0x118>
 800e298:	2306      	movs	r3, #6
 800e29a:	e127      	b.n	800e4ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	3324      	adds	r3, #36	@ 0x24
 800e2a0:	220b      	movs	r2, #11
 800e2a2:	2120      	movs	r1, #32
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fe fcdc 	bl	800cc62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	61bb      	str	r3, [r7, #24]
 800e2ae:	e002      	b.n	800e2b6 <create_name+0x132>
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	61bb      	str	r3, [r7, #24]
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	4413      	add	r3, r2
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	2b20      	cmp	r3, #32
 800e2c2:	d0f5      	beq.n	800e2b0 <create_name+0x12c>
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	005b      	lsls	r3, r3, #1
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2d0:	d0ee      	beq.n	800e2b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d009      	beq.n	800e2ec <create_name+0x168>
 800e2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2dc:	f043 0303 	orr.w	r3, r3, #3
 800e2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e2e4:	e002      	b.n	800e2ec <create_name+0x168>
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d009      	beq.n	800e306 <create_name+0x182>
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e2f8:	4413      	add	r3, r2
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	2b2e      	cmp	r3, #46	@ 0x2e
 800e304:	d1ef      	bne.n	800e2e6 <create_name+0x162>

	i = b = 0; ni = 8;
 800e306:	2300      	movs	r3, #0
 800e308:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e30c:	2300      	movs	r3, #0
 800e30e:	623b      	str	r3, [r7, #32]
 800e310:	2308      	movs	r3, #8
 800e312:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	1c5a      	adds	r2, r3, #1
 800e318:	61ba      	str	r2, [r7, #24]
 800e31a:	005b      	lsls	r3, r3, #1
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	4413      	add	r3, r2
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 8090 	beq.w	800e44c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e32c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e32e:	2b20      	cmp	r3, #32
 800e330:	d006      	beq.n	800e340 <create_name+0x1bc>
 800e332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e334:	2b2e      	cmp	r3, #46	@ 0x2e
 800e336:	d10a      	bne.n	800e34e <create_name+0x1ca>
 800e338:	69ba      	ldr	r2, [r7, #24]
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d006      	beq.n	800e34e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e344:	f043 0303 	orr.w	r3, r3, #3
 800e348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e34c:	e07d      	b.n	800e44a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e34e:	6a3a      	ldr	r2, [r7, #32]
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	429a      	cmp	r2, r3
 800e354:	d203      	bcs.n	800e35e <create_name+0x1da>
 800e356:	69ba      	ldr	r2, [r7, #24]
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d123      	bne.n	800e3a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	2b0b      	cmp	r3, #11
 800e362:	d106      	bne.n	800e372 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e368:	f043 0303 	orr.w	r3, r3, #3
 800e36c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e370:	e075      	b.n	800e45e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e372:	69ba      	ldr	r2, [r7, #24]
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	429a      	cmp	r2, r3
 800e378:	d005      	beq.n	800e386 <create_name+0x202>
 800e37a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e37e:	f043 0303 	orr.w	r3, r3, #3
 800e382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d866      	bhi.n	800e45c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	61bb      	str	r3, [r7, #24]
 800e392:	2308      	movs	r3, #8
 800e394:	623b      	str	r3, [r7, #32]
 800e396:	230b      	movs	r3, #11
 800e398:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e39a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e3a4:	e051      	b.n	800e44a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e3a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800e3aa:	d914      	bls.n	800e3d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e3ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f001 fa9f 	bl	800f8f4 <ff_convert>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e3ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <create_name+0x246>
 800e3c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3c2:	3b80      	subs	r3, #128	@ 0x80
 800e3c4:	4a23      	ldr	r2, [pc, #140]	@ (800e454 <create_name+0x2d0>)
 800e3c6:	5cd3      	ldrb	r3, [r2, r3]
 800e3c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3ce:	f043 0302 	orr.w	r3, r3, #2
 800e3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e3d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d007      	beq.n	800e3ec <create_name+0x268>
 800e3dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3de:	4619      	mov	r1, r3
 800e3e0:	481d      	ldr	r0, [pc, #116]	@ (800e458 <create_name+0x2d4>)
 800e3e2:	f7fe fc80 	bl	800cce6 <chk_chr>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d008      	beq.n	800e3fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e3ec:	235f      	movs	r3, #95	@ 0x5f
 800e3ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3f4:	f043 0303 	orr.w	r3, r3, #3
 800e3f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e3fc:	e01b      	b.n	800e436 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e3fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e400:	2b40      	cmp	r3, #64	@ 0x40
 800e402:	d909      	bls.n	800e418 <create_name+0x294>
 800e404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e406:	2b5a      	cmp	r3, #90	@ 0x5a
 800e408:	d806      	bhi.n	800e418 <create_name+0x294>
					b |= 2;
 800e40a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e40e:	f043 0302 	orr.w	r3, r3, #2
 800e412:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e416:	e00e      	b.n	800e436 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e41a:	2b60      	cmp	r3, #96	@ 0x60
 800e41c:	d90b      	bls.n	800e436 <create_name+0x2b2>
 800e41e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e420:	2b7a      	cmp	r3, #122	@ 0x7a
 800e422:	d808      	bhi.n	800e436 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e428:	f043 0301 	orr.w	r3, r3, #1
 800e42c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e430:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e432:	3b20      	subs	r3, #32
 800e434:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	623a      	str	r2, [r7, #32]
 800e43c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e43e:	b2d1      	uxtb	r1, r2
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	4413      	add	r3, r2
 800e444:	460a      	mov	r2, r1
 800e446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e44a:	e763      	b.n	800e314 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e44c:	bf00      	nop
 800e44e:	e006      	b.n	800e45e <create_name+0x2da>
 800e450:	08010460 	.word	0x08010460
 800e454:	0801072c 	.word	0x0801072c
 800e458:	0801046c 	.word	0x0801046c
			if (si > di) break;			/* No extension */
 800e45c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e464:	2be5      	cmp	r3, #229	@ 0xe5
 800e466:	d103      	bne.n	800e470 <create_name+0x2ec>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2205      	movs	r2, #5
 800e46c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	2b08      	cmp	r3, #8
 800e474:	d104      	bne.n	800e480 <create_name+0x2fc>
 800e476:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e480:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e484:	f003 030c 	and.w	r3, r3, #12
 800e488:	2b0c      	cmp	r3, #12
 800e48a:	d005      	beq.n	800e498 <create_name+0x314>
 800e48c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e490:	f003 0303 	and.w	r3, r3, #3
 800e494:	2b03      	cmp	r3, #3
 800e496:	d105      	bne.n	800e4a4 <create_name+0x320>
 800e498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e49c:	f043 0302 	orr.w	r3, r3, #2
 800e4a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4a8:	f003 0302 	and.w	r3, r3, #2
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d117      	bne.n	800e4e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e4b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4b4:	f003 0303 	and.w	r3, r3, #3
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d105      	bne.n	800e4c8 <create_name+0x344>
 800e4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4c0:	f043 0310 	orr.w	r3, r3, #16
 800e4c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4cc:	f003 030c 	and.w	r3, r3, #12
 800e4d0:	2b04      	cmp	r3, #4
 800e4d2:	d105      	bne.n	800e4e0 <create_name+0x35c>
 800e4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4d8:	f043 0308 	orr.w	r3, r3, #8
 800e4dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e4e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800e4ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3728      	adds	r7, #40	@ 0x28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e508:	e002      	b.n	800e510 <follow_path+0x1c>
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	3301      	adds	r3, #1
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b2f      	cmp	r3, #47	@ 0x2f
 800e516:	d0f8      	beq.n	800e50a <follow_path+0x16>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e51e:	d0f4      	beq.n	800e50a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2200      	movs	r2, #0
 800e524:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	2b1f      	cmp	r3, #31
 800e52c:	d80a      	bhi.n	800e544 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2280      	movs	r2, #128	@ 0x80
 800e532:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e536:	2100      	movs	r1, #0
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff f91c 	bl	800d776 <dir_sdi>
 800e53e:	4603      	mov	r3, r0
 800e540:	75fb      	strb	r3, [r7, #23]
 800e542:	e043      	b.n	800e5cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e544:	463b      	mov	r3, r7
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff fe1b 	bl	800e184 <create_name>
 800e54e:	4603      	mov	r3, r0
 800e550:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d134      	bne.n	800e5c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff fc5a 	bl	800de12 <dir_find>
 800e55e:	4603      	mov	r3, r0
 800e560:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e568:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00a      	beq.n	800e586 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	2b04      	cmp	r3, #4
 800e574:	d127      	bne.n	800e5c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e576:	7afb      	ldrb	r3, [r7, #11]
 800e578:	f003 0304 	and.w	r3, r3, #4
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d122      	bne.n	800e5c6 <follow_path+0xd2>
 800e580:	2305      	movs	r3, #5
 800e582:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e584:	e01f      	b.n	800e5c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e586:	7afb      	ldrb	r3, [r7, #11]
 800e588:	f003 0304 	and.w	r3, r3, #4
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d11c      	bne.n	800e5ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	799b      	ldrb	r3, [r3, #6]
 800e594:	f003 0310 	and.w	r3, r3, #16
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d102      	bne.n	800e5a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e59c:	2305      	movs	r3, #5
 800e59e:	75fb      	strb	r3, [r7, #23]
 800e5a0:	e014      	b.n	800e5cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	695b      	ldr	r3, [r3, #20]
 800e5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b0:	4413      	add	r3, r2
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7ff fa65 	bl	800da84 <ld_clust>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e5c0:	e7c0      	b.n	800e544 <follow_path+0x50>
			if (res != FR_OK) break;
 800e5c2:	bf00      	nop
 800e5c4:	e002      	b.n	800e5cc <follow_path+0xd8>
				break;
 800e5c6:	bf00      	nop
 800e5c8:	e000      	b.n	800e5cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e5ca:	bf00      	nop
			}
		}
	}

	return res;
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b087      	sub	sp, #28
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e5de:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d031      	beq.n	800e650 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	617b      	str	r3, [r7, #20]
 800e5f2:	e002      	b.n	800e5fa <get_ldnumber+0x24>
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	617b      	str	r3, [r7, #20]
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	2b1f      	cmp	r3, #31
 800e600:	d903      	bls.n	800e60a <get_ldnumber+0x34>
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b3a      	cmp	r3, #58	@ 0x3a
 800e608:	d1f4      	bne.n	800e5f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b3a      	cmp	r3, #58	@ 0x3a
 800e610:	d11c      	bne.n	800e64c <get_ldnumber+0x76>
			tp = *path;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	60fa      	str	r2, [r7, #12]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	3b30      	subs	r3, #48	@ 0x30
 800e622:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	2b09      	cmp	r3, #9
 800e628:	d80e      	bhi.n	800e648 <get_ldnumber+0x72>
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d10a      	bne.n	800e648 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d107      	bne.n	800e648 <get_ldnumber+0x72>
					vol = (int)i;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	3301      	adds	r3, #1
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	697a      	ldr	r2, [r7, #20]
 800e646:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	e002      	b.n	800e652 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e650:	693b      	ldr	r3, [r7, #16]
}
 800e652:	4618      	mov	r0, r3
 800e654:	371c      	adds	r7, #28
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
	...

0800e660 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	70da      	strb	r2, [r3, #3]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f04f 32ff 	mov.w	r2, #4294967295
 800e676:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7fe fcfe 	bl	800d07c <move_window>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <check_fs+0x2a>
 800e686:	2304      	movs	r3, #4
 800e688:	e038      	b.n	800e6fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3334      	adds	r3, #52	@ 0x34
 800e68e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe fa42 	bl	800cb1c <ld_word>
 800e698:	4603      	mov	r3, r0
 800e69a:	461a      	mov	r2, r3
 800e69c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d001      	beq.n	800e6a8 <check_fs+0x48>
 800e6a4:	2303      	movs	r3, #3
 800e6a6:	e029      	b.n	800e6fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e6ae:	2be9      	cmp	r3, #233	@ 0xe9
 800e6b0:	d009      	beq.n	800e6c6 <check_fs+0x66>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e6b8:	2beb      	cmp	r3, #235	@ 0xeb
 800e6ba:	d11e      	bne.n	800e6fa <check_fs+0x9a>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e6c2:	2b90      	cmp	r3, #144	@ 0x90
 800e6c4:	d119      	bne.n	800e6fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3334      	adds	r3, #52	@ 0x34
 800e6ca:	3336      	adds	r3, #54	@ 0x36
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fe fa3d 	bl	800cb4c <ld_dword>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e6d8:	4a0a      	ldr	r2, [pc, #40]	@ (800e704 <check_fs+0xa4>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d101      	bne.n	800e6e2 <check_fs+0x82>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	e00c      	b.n	800e6fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3334      	adds	r3, #52	@ 0x34
 800e6e6:	3352      	adds	r3, #82	@ 0x52
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe fa2f 	bl	800cb4c <ld_dword>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	4a05      	ldr	r2, [pc, #20]	@ (800e708 <check_fs+0xa8>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d101      	bne.n	800e6fa <check_fs+0x9a>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e000      	b.n	800e6fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e6fa:	2302      	movs	r3, #2
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	00544146 	.word	0x00544146
 800e708:	33544146 	.word	0x33544146

0800e70c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b096      	sub	sp, #88	@ 0x58
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	4613      	mov	r3, r2
 800e718:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2200      	movs	r2, #0
 800e71e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f7ff ff58 	bl	800e5d6 <get_ldnumber>
 800e726:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da01      	bge.n	800e732 <find_volume+0x26>
 800e72e:	230b      	movs	r3, #11
 800e730:	e22d      	b.n	800eb8e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e732:	4aa1      	ldr	r2, [pc, #644]	@ (800e9b8 <find_volume+0x2ac>)
 800e734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e73a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d101      	bne.n	800e746 <find_volume+0x3a>
 800e742:	230c      	movs	r3, #12
 800e744:	e223      	b.n	800eb8e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e74a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	f023 0301 	bic.w	r3, r3, #1
 800e752:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d01a      	beq.n	800e792 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75e:	785b      	ldrb	r3, [r3, #1]
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe f93b 	bl	800c9dc <disk_status>
 800e766:	4603      	mov	r3, r0
 800e768:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e76c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10c      	bne.n	800e792 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d007      	beq.n	800e78e <find_volume+0x82>
 800e77e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e782:	f003 0304 	and.w	r3, r3, #4
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e78a:	230a      	movs	r3, #10
 800e78c:	e1ff      	b.n	800eb8e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e78e:	2300      	movs	r3, #0
 800e790:	e1fd      	b.n	800eb8e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e794:	2200      	movs	r2, #0
 800e796:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a2:	785b      	ldrb	r3, [r3, #1]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fe f933 	bl	800ca10 <disk_initialize>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7b4:	f003 0301 	and.w	r3, r3, #1
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e7bc:	2303      	movs	r3, #3
 800e7be:	e1e6      	b.n	800eb8e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d007      	beq.n	800e7d6 <find_volume+0xca>
 800e7c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e7ca:	f003 0304 	and.w	r3, r3, #4
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e7d2:	230a      	movs	r3, #10
 800e7d4:	e1db      	b.n	800eb8e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e7da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e7dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e7de:	f7ff ff3f 	bl	800e660 <check_fs>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e7e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d149      	bne.n	800e884 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e7f4:	e01e      	b.n	800e834 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e7fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7fe:	011b      	lsls	r3, r3, #4
 800e800:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e804:	4413      	add	r3, r2
 800e806:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	3304      	adds	r3, #4
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d006      	beq.n	800e820 <find_volume+0x114>
 800e812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e814:	3308      	adds	r3, #8
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe f998 	bl	800cb4c <ld_dword>
 800e81c:	4602      	mov	r2, r0
 800e81e:	e000      	b.n	800e822 <find_volume+0x116>
 800e820:	2200      	movs	r2, #0
 800e822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	3358      	adds	r3, #88	@ 0x58
 800e828:	443b      	add	r3, r7
 800e82a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e82e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e830:	3301      	adds	r3, #1
 800e832:	643b      	str	r3, [r7, #64]	@ 0x40
 800e834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e836:	2b03      	cmp	r3, #3
 800e838:	d9dd      	bls.n	800e7f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e83a:	2300      	movs	r3, #0
 800e83c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e83e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <find_volume+0x13e>
 800e844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e846:	3b01      	subs	r3, #1
 800e848:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	3358      	adds	r3, #88	@ 0x58
 800e850:	443b      	add	r3, r7
 800e852:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e856:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d005      	beq.n	800e86a <find_volume+0x15e>
 800e85e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e860:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e862:	f7ff fefd 	bl	800e660 <check_fs>
 800e866:	4603      	mov	r3, r0
 800e868:	e000      	b.n	800e86c <find_volume+0x160>
 800e86a:	2303      	movs	r3, #3
 800e86c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e870:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e874:	2b01      	cmp	r3, #1
 800e876:	d905      	bls.n	800e884 <find_volume+0x178>
 800e878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e87a:	3301      	adds	r3, #1
 800e87c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e87e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e880:	2b03      	cmp	r3, #3
 800e882:	d9e2      	bls.n	800e84a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e884:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e888:	2b04      	cmp	r3, #4
 800e88a:	d101      	bne.n	800e890 <find_volume+0x184>
 800e88c:	2301      	movs	r3, #1
 800e88e:	e17e      	b.n	800eb8e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e890:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e894:	2b01      	cmp	r3, #1
 800e896:	d901      	bls.n	800e89c <find_volume+0x190>
 800e898:	230d      	movs	r3, #13
 800e89a:	e178      	b.n	800eb8e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e89e:	3334      	adds	r3, #52	@ 0x34
 800e8a0:	330b      	adds	r3, #11
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fe f93a 	bl	800cb1c <ld_word>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8ae:	d001      	beq.n	800e8b4 <find_volume+0x1a8>
 800e8b0:	230d      	movs	r3, #13
 800e8b2:	e16c      	b.n	800eb8e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b6:	3334      	adds	r3, #52	@ 0x34
 800e8b8:	3316      	adds	r3, #22
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe f92e 	bl	800cb1c <ld_word>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <find_volume+0x1cc>
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8cc:	3334      	adds	r3, #52	@ 0x34
 800e8ce:	3324      	adds	r3, #36	@ 0x24
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe f93b 	bl	800cb4c <ld_dword>
 800e8d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e8dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ea:	789b      	ldrb	r3, [r3, #2]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d005      	beq.n	800e8fc <find_volume+0x1f0>
 800e8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f2:	789b      	ldrb	r3, [r3, #2]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d001      	beq.n	800e8fc <find_volume+0x1f0>
 800e8f8:	230d      	movs	r3, #13
 800e8fa:	e148      	b.n	800eb8e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8fe:	789b      	ldrb	r3, [r3, #2]
 800e900:	461a      	mov	r2, r3
 800e902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e904:	fb02 f303 	mul.w	r3, r2, r3
 800e908:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e90c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e910:	461a      	mov	r2, r3
 800e912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e914:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e918:	895b      	ldrh	r3, [r3, #10]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d008      	beq.n	800e930 <find_volume+0x224>
 800e91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e920:	895b      	ldrh	r3, [r3, #10]
 800e922:	461a      	mov	r2, r3
 800e924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e926:	895b      	ldrh	r3, [r3, #10]
 800e928:	3b01      	subs	r3, #1
 800e92a:	4013      	ands	r3, r2
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <find_volume+0x228>
 800e930:	230d      	movs	r3, #13
 800e932:	e12c      	b.n	800eb8e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e936:	3334      	adds	r3, #52	@ 0x34
 800e938:	3311      	adds	r3, #17
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe f8ee 	bl	800cb1c <ld_word>
 800e940:	4603      	mov	r3, r0
 800e942:	461a      	mov	r2, r3
 800e944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e946:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94a:	891b      	ldrh	r3, [r3, #8]
 800e94c:	f003 030f 	and.w	r3, r3, #15
 800e950:	b29b      	uxth	r3, r3
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <find_volume+0x24e>
 800e956:	230d      	movs	r3, #13
 800e958:	e119      	b.n	800eb8e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e95c:	3334      	adds	r3, #52	@ 0x34
 800e95e:	3313      	adds	r3, #19
 800e960:	4618      	mov	r0, r3
 800e962:	f7fe f8db 	bl	800cb1c <ld_word>
 800e966:	4603      	mov	r3, r0
 800e968:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e96a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d106      	bne.n	800e97e <find_volume+0x272>
 800e970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e972:	3334      	adds	r3, #52	@ 0x34
 800e974:	3320      	adds	r3, #32
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe f8e8 	bl	800cb4c <ld_dword>
 800e97c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e980:	3334      	adds	r3, #52	@ 0x34
 800e982:	330e      	adds	r3, #14
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe f8c9 	bl	800cb1c <ld_word>
 800e98a:	4603      	mov	r3, r0
 800e98c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e98e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <find_volume+0x28c>
 800e994:	230d      	movs	r3, #13
 800e996:	e0fa      	b.n	800eb8e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e998:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e99c:	4413      	add	r3, r2
 800e99e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e9a0:	8912      	ldrh	r2, [r2, #8]
 800e9a2:	0912      	lsrs	r2, r2, #4
 800e9a4:	b292      	uxth	r2, r2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e9aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d204      	bcs.n	800e9bc <find_volume+0x2b0>
 800e9b2:	230d      	movs	r3, #13
 800e9b4:	e0eb      	b.n	800eb8e <find_volume+0x482>
 800e9b6:	bf00      	nop
 800e9b8:	24063814 	.word	0x24063814
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e9bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e9c4:	8952      	ldrh	r2, [r2, #10]
 800e9c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9ca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <find_volume+0x2ca>
 800e9d2:	230d      	movs	r3, #13
 800e9d4:	e0db      	b.n	800eb8e <find_volume+0x482>
		fmt = FS_FAT32;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9de:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d802      	bhi.n	800e9ec <find_volume+0x2e0>
 800e9e6:	2302      	movs	r3, #2
 800e9e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d802      	bhi.n	800e9fc <find_volume+0x2f0>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fe:	1c9a      	adds	r2, r3, #2
 800ea00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea02:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ea04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ea08:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ea0a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ea0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea0e:	441a      	add	r2, r3
 800ea10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea12:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ea14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ea16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea18:	441a      	add	r2, r3
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea1c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800ea1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	d11e      	bne.n	800ea64 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ea26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea28:	3334      	adds	r3, #52	@ 0x34
 800ea2a:	332a      	adds	r3, #42	@ 0x2a
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe f875 	bl	800cb1c <ld_word>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d001      	beq.n	800ea3c <find_volume+0x330>
 800ea38:	230d      	movs	r3, #13
 800ea3a:	e0a8      	b.n	800eb8e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ea3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea3e:	891b      	ldrh	r3, [r3, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <find_volume+0x33c>
 800ea44:	230d      	movs	r3, #13
 800ea46:	e0a2      	b.n	800eb8e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ea48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea4a:	3334      	adds	r3, #52	@ 0x34
 800ea4c:	332c      	adds	r3, #44	@ 0x2c
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fe f87c 	bl	800cb4c <ld_dword>
 800ea54:	4602      	mov	r2, r0
 800ea56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea58:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ea5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea62:	e01f      	b.n	800eaa4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ea64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea66:	891b      	ldrh	r3, [r3, #8]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d101      	bne.n	800ea70 <find_volume+0x364>
 800ea6c:	230d      	movs	r3, #13
 800ea6e:	e08e      	b.n	800eb8e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea76:	441a      	add	r2, r3
 800ea78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea7a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ea80:	2b02      	cmp	r3, #2
 800ea82:	d103      	bne.n	800ea8c <find_volume+0x380>
 800ea84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	e00a      	b.n	800eaa2 <find_volume+0x396>
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea8e:	699a      	ldr	r2, [r3, #24]
 800ea90:	4613      	mov	r3, r2
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	4413      	add	r3, r2
 800ea96:	085a      	lsrs	r2, r3, #1
 800ea98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eaa2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaa6:	69da      	ldr	r2, [r3, #28]
 800eaa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaaa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800eaae:	0a5b      	lsrs	r3, r3, #9
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d201      	bcs.n	800eab8 <find_volume+0x3ac>
 800eab4:	230d      	movs	r3, #13
 800eab6:	e06a      	b.n	800eb8e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaba:	f04f 32ff 	mov.w	r2, #4294967295
 800eabe:	615a      	str	r2, [r3, #20]
 800eac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac2:	695a      	ldr	r2, [r3, #20]
 800eac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaca:	2280      	movs	r2, #128	@ 0x80
 800eacc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eace:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ead2:	2b03      	cmp	r3, #3
 800ead4:	d149      	bne.n	800eb6a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ead6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead8:	3334      	adds	r3, #52	@ 0x34
 800eada:	3330      	adds	r3, #48	@ 0x30
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fe f81d 	bl	800cb1c <ld_word>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d140      	bne.n	800eb6a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eaea:	3301      	adds	r3, #1
 800eaec:	4619      	mov	r1, r3
 800eaee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eaf0:	f7fe fac4 	bl	800d07c <move_window>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d137      	bne.n	800eb6a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800eafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eafc:	2200      	movs	r2, #0
 800eafe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb02:	3334      	adds	r3, #52	@ 0x34
 800eb04:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe f807 	bl	800cb1c <ld_word>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	461a      	mov	r2, r3
 800eb12:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d127      	bne.n	800eb6a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800eb1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb1c:	3334      	adds	r3, #52	@ 0x34
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe f814 	bl	800cb4c <ld_dword>
 800eb24:	4603      	mov	r3, r0
 800eb26:	4a1c      	ldr	r2, [pc, #112]	@ (800eb98 <find_volume+0x48c>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d11e      	bne.n	800eb6a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb2e:	3334      	adds	r3, #52	@ 0x34
 800eb30:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe f809 	bl	800cb4c <ld_dword>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	4a17      	ldr	r2, [pc, #92]	@ (800eb9c <find_volume+0x490>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d113      	bne.n	800eb6a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb44:	3334      	adds	r3, #52	@ 0x34
 800eb46:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fd fffe 	bl	800cb4c <ld_dword>
 800eb50:	4602      	mov	r2, r0
 800eb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb54:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb58:	3334      	adds	r3, #52	@ 0x34
 800eb5a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7fd fff4 	bl	800cb4c <ld_dword>
 800eb64:	4602      	mov	r2, r0
 800eb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb68:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb6c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800eb70:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800eb72:	4b0b      	ldr	r3, [pc, #44]	@ (800eba0 <find_volume+0x494>)
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	3301      	adds	r3, #1
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	4b09      	ldr	r3, [pc, #36]	@ (800eba0 <find_volume+0x494>)
 800eb7c:	801a      	strh	r2, [r3, #0]
 800eb7e:	4b08      	ldr	r3, [pc, #32]	@ (800eba0 <find_volume+0x494>)
 800eb80:	881a      	ldrh	r2, [r3, #0]
 800eb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb84:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800eb86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eb88:	f7fe fa10 	bl	800cfac <clear_lock>
#endif
	return FR_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3758      	adds	r7, #88	@ 0x58
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	41615252 	.word	0x41615252
 800eb9c:	61417272 	.word	0x61417272
 800eba0:	24063818 	.word	0x24063818

0800eba4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ebae:	2309      	movs	r3, #9
 800ebb0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d01c      	beq.n	800ebf2 <validate+0x4e>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d018      	beq.n	800ebf2 <validate+0x4e>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d013      	beq.n	800ebf2 <validate+0x4e>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	889a      	ldrh	r2, [r3, #4]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	88db      	ldrh	r3, [r3, #6]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d10c      	bne.n	800ebf2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	785b      	ldrb	r3, [r3, #1]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fd fefc 	bl	800c9dc <disk_status>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	f003 0301 	and.w	r3, r3, #1
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <validate+0x4e>
			res = FR_OK;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ebf2:	7bfb      	ldrb	r3, [r7, #15]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d102      	bne.n	800ebfe <validate+0x5a>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	e000      	b.n	800ec00 <validate+0x5c>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	6013      	str	r3, [r2, #0]
	return res;
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b088      	sub	sp, #32
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ec22:	f107 0310 	add.w	r3, r7, #16
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7ff fcd5 	bl	800e5d6 <get_ldnumber>
 800ec2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	da01      	bge.n	800ec38 <f_mount+0x28>
 800ec34:	230b      	movs	r3, #11
 800ec36:	e02b      	b.n	800ec90 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ec38:	4a17      	ldr	r2, [pc, #92]	@ (800ec98 <f_mount+0x88>)
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d005      	beq.n	800ec54 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ec48:	69b8      	ldr	r0, [r7, #24]
 800ec4a:	f7fe f9af 	bl	800cfac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	2200      	movs	r2, #0
 800ec52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	490d      	ldr	r1, [pc, #52]	@ (800ec98 <f_mount+0x88>)
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d002      	beq.n	800ec76 <f_mount+0x66>
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d001      	beq.n	800ec7a <f_mount+0x6a>
 800ec76:	2300      	movs	r3, #0
 800ec78:	e00a      	b.n	800ec90 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ec7a:	f107 010c 	add.w	r1, r7, #12
 800ec7e:	f107 0308 	add.w	r3, r7, #8
 800ec82:	2200      	movs	r2, #0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7ff fd41 	bl	800e70c <find_volume>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	24063814 	.word	0x24063814

0800ec9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b09a      	sub	sp, #104	@ 0x68
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <f_open+0x18>
 800ecb0:	2309      	movs	r3, #9
 800ecb2:	e1b9      	b.n	800f028 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ecba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ecbc:	79fa      	ldrb	r2, [r7, #7]
 800ecbe:	f107 0110 	add.w	r1, r7, #16
 800ecc2:	f107 0308 	add.w	r3, r7, #8
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff fd20 	bl	800e70c <find_volume>
 800eccc:	4603      	mov	r3, r0
 800ecce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800ecd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f040 819d 	bne.w	800f016 <f_open+0x37a>
		dj.obj.fs = fs;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800ece0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ece4:	f000 fdef 	bl	800f8c6 <ff_memalloc>
 800ece8:	65b8      	str	r0, [r7, #88]	@ 0x58
 800ecea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d101      	bne.n	800ecf4 <f_open+0x58>
 800ecf0:	2311      	movs	r3, #17
 800ecf2:	e199      	b.n	800f028 <f_open+0x38c>
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ecf8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	f107 0314 	add.w	r3, r7, #20
 800ed00:	4611      	mov	r1, r2
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fbf6 	bl	800e4f4 <follow_path>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ed0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d118      	bne.n	800ed48 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ed16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed1a:	b25b      	sxtb	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	da03      	bge.n	800ed28 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800ed20:	2306      	movs	r3, #6
 800ed22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ed26:	e00f      	b.n	800ed48 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed28:	79fb      	ldrb	r3, [r7, #7]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	bf8c      	ite	hi
 800ed2e:	2301      	movhi	r3, #1
 800ed30:	2300      	movls	r3, #0
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	461a      	mov	r2, r3
 800ed36:	f107 0314 	add.w	r3, r7, #20
 800ed3a:	4611      	mov	r1, r2
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fd ffed 	bl	800cd1c <chk_lock>
 800ed42:	4603      	mov	r3, r0
 800ed44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ed48:	79fb      	ldrb	r3, [r7, #7]
 800ed4a:	f003 031c 	and.w	r3, r3, #28
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d07f      	beq.n	800ee52 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800ed52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d017      	beq.n	800ed8a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ed5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d10e      	bne.n	800ed80 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ed62:	f7fe f837 	bl	800cdd4 <enq_lock>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d006      	beq.n	800ed7a <f_open+0xde>
 800ed6c:	f107 0314 	add.w	r3, r7, #20
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7ff f90f 	bl	800df94 <dir_register>
 800ed76:	4603      	mov	r3, r0
 800ed78:	e000      	b.n	800ed7c <f_open+0xe0>
 800ed7a:	2312      	movs	r3, #18
 800ed7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	f043 0308 	orr.w	r3, r3, #8
 800ed86:	71fb      	strb	r3, [r7, #7]
 800ed88:	e010      	b.n	800edac <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ed8a:	7ebb      	ldrb	r3, [r7, #26]
 800ed8c:	f003 0311 	and.w	r3, r3, #17
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d003      	beq.n	800ed9c <f_open+0x100>
					res = FR_DENIED;
 800ed94:	2307      	movs	r3, #7
 800ed96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ed9a:	e007      	b.n	800edac <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	f003 0304 	and.w	r3, r3, #4
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <f_open+0x110>
 800eda6:	2308      	movs	r3, #8
 800eda8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800edac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d168      	bne.n	800ee86 <f_open+0x1ea>
 800edb4:	79fb      	ldrb	r3, [r7, #7]
 800edb6:	f003 0308 	and.w	r3, r3, #8
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d063      	beq.n	800ee86 <f_open+0x1ea>
				dw = GET_FATTIME();
 800edbe:	f7fd fc79 	bl	800c6b4 <get_fattime>
 800edc2:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800edc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc6:	330e      	adds	r3, #14
 800edc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fd fefc 	bl	800cbc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800edd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edd2:	3316      	adds	r3, #22
 800edd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fd fef6 	bl	800cbc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edde:	330b      	adds	r3, #11
 800ede0:	2220      	movs	r2, #32
 800ede2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe fe4a 	bl	800da84 <ld_clust>
 800edf0:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800edf6:	2200      	movs	r2, #0
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fe62 	bl	800dac2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800edfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee00:	331c      	adds	r3, #28
 800ee02:	2100      	movs	r1, #0
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fd fedf 	bl	800cbc8 <st_dword>
					fs->wflag = 1;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ee10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d037      	beq.n	800ee86 <f_open+0x1ea>
						dw = fs->winsect;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee1a:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800ee1c:	f107 0314 	add.w	r3, r7, #20
 800ee20:	2200      	movs	r2, #0
 800ee22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe fb75 	bl	800d514 <remove_chain>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800ee30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d126      	bne.n	800ee86 <f_open+0x1ea>
							res = move_window(fs, dw);
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fe f91d 	bl	800d07c <move_window>
 800ee42:	4603      	mov	r3, r0
 800ee44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee4c:	3a01      	subs	r2, #1
 800ee4e:	611a      	str	r2, [r3, #16]
 800ee50:	e019      	b.n	800ee86 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ee52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d115      	bne.n	800ee86 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ee5a:	7ebb      	ldrb	r3, [r7, #26]
 800ee5c:	f003 0310 	and.w	r3, r3, #16
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d003      	beq.n	800ee6c <f_open+0x1d0>
					res = FR_NO_FILE;
 800ee64:	2304      	movs	r3, #4
 800ee66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ee6a:	e00c      	b.n	800ee86 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	f003 0302 	and.w	r3, r3, #2
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d007      	beq.n	800ee86 <f_open+0x1ea>
 800ee76:	7ebb      	ldrb	r3, [r7, #26]
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <f_open+0x1ea>
						res = FR_DENIED;
 800ee80:	2307      	movs	r3, #7
 800ee82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ee86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d126      	bne.n	800eedc <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	f003 0308 	and.w	r3, r3, #8
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d003      	beq.n	800eea0 <f_open+0x204>
				mode |= FA_MODIFIED;
 800ee98:	79fb      	ldrb	r3, [r7, #7]
 800ee9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee9e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800eea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eeae:	79fb      	ldrb	r3, [r7, #7]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	bf8c      	ite	hi
 800eeb4:	2301      	movhi	r3, #1
 800eeb6:	2300      	movls	r3, #0
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	461a      	mov	r2, r3
 800eebc:	f107 0314 	add.w	r3, r7, #20
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fd ffa8 	bl	800ce18 <inc_lock>
 800eec8:	4602      	mov	r2, r0
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <f_open+0x240>
 800eed6:	2302      	movs	r3, #2
 800eed8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eedc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f040 8095 	bne.w	800f010 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fe fdc9 	bl	800da84 <ld_clust>
 800eef2:	4602      	mov	r2, r0
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eefa:	331c      	adds	r3, #28
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fd fe25 	bl	800cb4c <ld_dword>
 800ef02:	4602      	mov	r2, r0
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	88da      	ldrh	r2, [r3, #6]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	79fa      	ldrb	r2, [r7, #7]
 800ef20:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2200      	movs	r2, #0
 800ef32:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	3330      	adds	r3, #48	@ 0x30
 800ef38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fd fe8f 	bl	800cc62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	f003 0320 	and.w	r3, r3, #32
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d060      	beq.n	800f010 <f_open+0x374>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d05c      	beq.n	800f010 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	68da      	ldr	r2, [r3, #12]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	895b      	ldrh	r3, [r3, #10]
 800ef62:	025b      	lsls	r3, r3, #9
 800ef64:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef72:	e016      	b.n	800efa2 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fe f93a 	bl	800d1f2 <get_fat>
 800ef7e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ef80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d802      	bhi.n	800ef8c <f_open+0x2f0>
 800ef86:	2302      	movs	r3, #2
 800ef88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ef8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	d102      	bne.n	800ef9a <f_open+0x2fe>
 800ef94:	2301      	movs	r3, #1
 800ef96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ef9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ef9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efa2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d103      	bne.n	800efb2 <f_open+0x316>
 800efaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800efac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efae:	429a      	cmp	r2, r3
 800efb0:	d8e0      	bhi.n	800ef74 <f_open+0x2d8>
				}
				fp->clust = clst;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800efb6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800efb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d127      	bne.n	800f010 <f_open+0x374>
 800efc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d022      	beq.n	800f010 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe f8f0 	bl	800d1b4 <clust2sect>
 800efd4:	64b8      	str	r0, [r7, #72]	@ 0x48
 800efd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d103      	bne.n	800efe4 <f_open+0x348>
						res = FR_INT_ERR;
 800efdc:	2302      	movs	r3, #2
 800efde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800efe2:	e015      	b.n	800f010 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800efe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efe6:	0a5a      	lsrs	r2, r3, #9
 800efe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efea:	441a      	add	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	7858      	ldrb	r0, [r3, #1]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a1a      	ldr	r2, [r3, #32]
 800effe:	2301      	movs	r3, #1
 800f000:	f7fd fd2e 	bl	800ca60 <disk_read>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <f_open+0x374>
 800f00a:	2301      	movs	r3, #1
 800f00c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800f010:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f012:	f000 fc64 	bl	800f8de <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f016:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <f_open+0x388>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3768      	adds	r7, #104	@ 0x68
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b08e      	sub	sp, #56	@ 0x38
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	2200      	movs	r2, #0
 800f046:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f107 0214 	add.w	r2, r7, #20
 800f04e:	4611      	mov	r1, r2
 800f050:	4618      	mov	r0, r3
 800f052:	f7ff fda7 	bl	800eba4 <validate>
 800f056:	4603      	mov	r3, r0
 800f058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f05c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f060:	2b00      	cmp	r3, #0
 800f062:	d107      	bne.n	800f074 <f_read+0x44>
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	7d5b      	ldrb	r3, [r3, #21]
 800f068:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f06c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <f_read+0x4a>
 800f074:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f078:	e115      	b.n	800f2a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	7d1b      	ldrb	r3, [r3, #20]
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b00      	cmp	r3, #0
 800f084:	d101      	bne.n	800f08a <f_read+0x5a>
 800f086:	2307      	movs	r3, #7
 800f088:	e10d      	b.n	800f2a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	68da      	ldr	r2, [r3, #12]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	f240 80fe 	bls.w	800f29c <f_read+0x26c>
 800f0a0:	6a3b      	ldr	r3, [r7, #32]
 800f0a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f0a4:	e0fa      	b.n	800f29c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f040 80c6 	bne.w	800f240 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	0a5b      	lsrs	r3, r3, #9
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	8952      	ldrh	r2, [r2, #10]
 800f0be:	3a01      	subs	r2, #1
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d12f      	bne.n	800f12a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	699b      	ldr	r3, [r3, #24]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d103      	bne.n	800f0da <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0d8:	e013      	b.n	800f102 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d007      	beq.n	800f0f2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	699b      	ldr	r3, [r3, #24]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f7fe fb10 	bl	800d70e <clmt_clust>
 800f0ee:	6338      	str	r0, [r7, #48]	@ 0x30
 800f0f0:	e007      	b.n	800f102 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	69db      	ldr	r3, [r3, #28]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	f7fe f879 	bl	800d1f2 <get_fat>
 800f100:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f104:	2b01      	cmp	r3, #1
 800f106:	d804      	bhi.n	800f112 <f_read+0xe2>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2202      	movs	r2, #2
 800f10c:	755a      	strb	r2, [r3, #21]
 800f10e:	2302      	movs	r3, #2
 800f110:	e0c9      	b.n	800f2a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f118:	d104      	bne.n	800f124 <f_read+0xf4>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2201      	movs	r2, #1
 800f11e:	755a      	strb	r2, [r3, #21]
 800f120:	2301      	movs	r3, #1
 800f122:	e0c0      	b.n	800f2a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f128:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f12a:	697a      	ldr	r2, [r7, #20]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	69db      	ldr	r3, [r3, #28]
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f7fe f83e 	bl	800d1b4 <clust2sect>
 800f138:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d104      	bne.n	800f14a <f_read+0x11a>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2202      	movs	r2, #2
 800f144:	755a      	strb	r2, [r3, #21]
 800f146:	2302      	movs	r3, #2
 800f148:	e0ad      	b.n	800f2a6 <f_read+0x276>
			sect += csect;
 800f14a:	69ba      	ldr	r2, [r7, #24]
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	4413      	add	r3, r2
 800f150:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	0a5b      	lsrs	r3, r3, #9
 800f156:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d039      	beq.n	800f1d2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f15e:	69fa      	ldr	r2, [r7, #28]
 800f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f162:	4413      	add	r3, r2
 800f164:	697a      	ldr	r2, [r7, #20]
 800f166:	8952      	ldrh	r2, [r2, #10]
 800f168:	4293      	cmp	r3, r2
 800f16a:	d905      	bls.n	800f178 <f_read+0x148>
					cc = fs->csize - csect;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	895b      	ldrh	r3, [r3, #10]
 800f170:	461a      	mov	r2, r3
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	7858      	ldrb	r0, [r3, #1]
 800f17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f17e:	69ba      	ldr	r2, [r7, #24]
 800f180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f182:	f7fd fc6d 	bl	800ca60 <disk_read>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d004      	beq.n	800f196 <f_read+0x166>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2201      	movs	r2, #1
 800f190:	755a      	strb	r2, [r3, #21]
 800f192:	2301      	movs	r3, #1
 800f194:	e087      	b.n	800f2a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	7d1b      	ldrb	r3, [r3, #20]
 800f19a:	b25b      	sxtb	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	da14      	bge.n	800f1ca <f_read+0x19a>
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6a1a      	ldr	r2, [r3, #32]
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d90d      	bls.n	800f1ca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a1a      	ldr	r2, [r3, #32]
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	025b      	lsls	r3, r3, #9
 800f1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1ba:	18d0      	adds	r0, r2, r3
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	3330      	adds	r3, #48	@ 0x30
 800f1c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	f7fd fd2b 	bl	800cc20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1cc:	025b      	lsls	r3, r3, #9
 800f1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800f1d0:	e050      	b.n	800f274 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6a1b      	ldr	r3, [r3, #32]
 800f1d6:	69ba      	ldr	r2, [r7, #24]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d02e      	beq.n	800f23a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	7d1b      	ldrb	r3, [r3, #20]
 800f1e0:	b25b      	sxtb	r3, r3
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	da18      	bge.n	800f218 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	7858      	ldrb	r0, [r3, #1]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6a1a      	ldr	r2, [r3, #32]
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f7fd fc53 	bl	800caa0 <disk_write>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d004      	beq.n	800f20a <f_read+0x1da>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2201      	movs	r2, #1
 800f204:	755a      	strb	r2, [r3, #21]
 800f206:	2301      	movs	r3, #1
 800f208:	e04d      	b.n	800f2a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	7d1b      	ldrb	r3, [r3, #20]
 800f20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f212:	b2da      	uxtb	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	7858      	ldrb	r0, [r3, #1]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f222:	2301      	movs	r3, #1
 800f224:	69ba      	ldr	r2, [r7, #24]
 800f226:	f7fd fc1b 	bl	800ca60 <disk_read>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <f_read+0x20a>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2201      	movs	r2, #1
 800f234:	755a      	strb	r2, [r3, #21]
 800f236:	2301      	movs	r3, #1
 800f238:	e035      	b.n	800f2a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	69ba      	ldr	r2, [r7, #24]
 800f23e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f248:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	429a      	cmp	r2, r3
 800f254:	d901      	bls.n	800f25a <f_read+0x22a>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f268:	4413      	add	r3, r2
 800f26a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f26c:	4619      	mov	r1, r3
 800f26e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f270:	f7fd fcd6 	bl	800cc20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f278:	4413      	add	r3, r2
 800f27a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	699a      	ldr	r2, [r3, #24]
 800f280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f282:	441a      	add	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	619a      	str	r2, [r3, #24]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f28e:	441a      	add	r2, r3
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f47f af01 	bne.w	800f0a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3738      	adds	r7, #56	@ 0x38
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b086      	sub	sp, #24
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f107 0208 	add.w	r2, r7, #8
 800f2bc:	4611      	mov	r1, r2
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff fc70 	bl	800eba4 <validate>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f2c8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d168      	bne.n	800f3a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	7d1b      	ldrb	r3, [r3, #20]
 800f2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d062      	beq.n	800f3a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	7d1b      	ldrb	r3, [r3, #20]
 800f2de:	b25b      	sxtb	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	da15      	bge.n	800f310 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	7858      	ldrb	r0, [r3, #1]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1a      	ldr	r2, [r3, #32]
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	f7fd fbd4 	bl	800caa0 <disk_write>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <f_sync+0x54>
 800f2fe:	2301      	movs	r3, #1
 800f300:	e04f      	b.n	800f3a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	7d1b      	ldrb	r3, [r3, #20]
 800f306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f30a:	b2da      	uxtb	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f310:	f7fd f9d0 	bl	800c6b4 <get_fattime>
 800f314:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f316:	68ba      	ldr	r2, [r7, #8]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f31c:	4619      	mov	r1, r3
 800f31e:	4610      	mov	r0, r2
 800f320:	f7fd feac 	bl	800d07c <move_window>
 800f324:	4603      	mov	r3, r0
 800f326:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f328:	7dfb      	ldrb	r3, [r7, #23]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d138      	bne.n	800f3a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f332:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	330b      	adds	r3, #11
 800f338:	781a      	ldrb	r2, [r3, #0]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	330b      	adds	r3, #11
 800f33e:	f042 0220 	orr.w	r2, r2, #32
 800f342:	b2d2      	uxtb	r2, r2
 800f344:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6818      	ldr	r0, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	461a      	mov	r2, r3
 800f350:	68f9      	ldr	r1, [r7, #12]
 800f352:	f7fe fbb6 	bl	800dac2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f103 021c 	add.w	r2, r3, #28
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	4619      	mov	r1, r3
 800f362:	4610      	mov	r0, r2
 800f364:	f7fd fc30 	bl	800cbc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	3316      	adds	r3, #22
 800f36c:	6939      	ldr	r1, [r7, #16]
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fd fc2a 	bl	800cbc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	3312      	adds	r3, #18
 800f378:	2100      	movs	r1, #0
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fd fc09 	bl	800cb92 <st_word>
					fs->wflag = 1;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	2201      	movs	r2, #1
 800f384:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fd fea5 	bl	800d0d8 <sync_fs>
 800f38e:	4603      	mov	r3, r0
 800f390:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7d1b      	ldrb	r3, [r3, #20]
 800f396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f39a:	b2da      	uxtb	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3718      	adds	r7, #24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff ff7b 	bl	800f2ae <f_sync>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d118      	bne.n	800f3f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f107 0208 	add.w	r2, r7, #8
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fbea 	bl	800eba4 <validate>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f3d4:	7bfb      	ldrb	r3, [r7, #15]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10c      	bne.n	800f3f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fd fda8 	bl	800cf34 <dec_lock>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f3e8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d102      	bne.n	800f3f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b090      	sub	sp, #64	@ 0x40
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f107 0208 	add.w	r2, r7, #8
 800f40e:	4611      	mov	r1, r2
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff fbc7 	bl	800eba4 <validate>
 800f416:	4603      	mov	r3, r0
 800f418:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f41c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f420:	2b00      	cmp	r3, #0
 800f422:	d103      	bne.n	800f42c <f_lseek+0x2e>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	7d5b      	ldrb	r3, [r3, #21]
 800f428:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f42c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <f_lseek+0x3c>
 800f434:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f438:	e1e6      	b.n	800f808 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 80d1 	beq.w	800f5e6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44a:	d15a      	bne.n	800f502 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f450:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f454:	1d1a      	adds	r2, r3, #4
 800f456:	627a      	str	r2, [r7, #36]	@ 0x24
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	617b      	str	r3, [r7, #20]
 800f45c:	2302      	movs	r3, #2
 800f45e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800f466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d03a      	beq.n	800f4e2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46e:	613b      	str	r3, [r7, #16]
 800f470:	2300      	movs	r3, #0
 800f472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f476:	3302      	adds	r3, #2
 800f478:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800f47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f480:	3301      	adds	r3, #1
 800f482:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fd feb2 	bl	800d1f2 <get_fat>
 800f48e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f492:	2b01      	cmp	r3, #1
 800f494:	d804      	bhi.n	800f4a0 <f_lseek+0xa2>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2202      	movs	r2, #2
 800f49a:	755a      	strb	r2, [r3, #21]
 800f49c:	2302      	movs	r3, #2
 800f49e:	e1b3      	b.n	800f808 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a6:	d104      	bne.n	800f4b2 <f_lseek+0xb4>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	755a      	strb	r2, [r3, #21]
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e1aa      	b.n	800f808 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d0de      	beq.n	800f47a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f4bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d809      	bhi.n	800f4d8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c6:	1d1a      	adds	r2, r3, #4
 800f4c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800f4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4cc:	601a      	str	r2, [r3, #0]
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d0:	1d1a      	adds	r2, r3, #4
 800f4d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d3c4      	bcc.n	800f46c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f4ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d803      	bhi.n	800f4fa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]
 800f4f8:	e184      	b.n	800f804 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f4fa:	2311      	movs	r3, #17
 800f4fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f500:	e180      	b.n	800f804 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d902      	bls.n	800f512 <f_lseek+0x114>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	683a      	ldr	r2, [r7, #0]
 800f516:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 8172 	beq.w	800f804 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	3b01      	subs	r3, #1
 800f524:	4619      	mov	r1, r3
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7fe f8f1 	bl	800d70e <clmt_clust>
 800f52c:	4602      	mov	r2, r0
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	69db      	ldr	r3, [r3, #28]
 800f538:	4619      	mov	r1, r3
 800f53a:	4610      	mov	r0, r2
 800f53c:	f7fd fe3a 	bl	800d1b4 <clust2sect>
 800f540:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d104      	bne.n	800f552 <f_lseek+0x154>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2202      	movs	r2, #2
 800f54c:	755a      	strb	r2, [r3, #21]
 800f54e:	2302      	movs	r3, #2
 800f550:	e15a      	b.n	800f808 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	3b01      	subs	r3, #1
 800f556:	0a5b      	lsrs	r3, r3, #9
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	8952      	ldrh	r2, [r2, #10]
 800f55c:	3a01      	subs	r2, #1
 800f55e:	4013      	ands	r3, r2
 800f560:	69ba      	ldr	r2, [r7, #24]
 800f562:	4413      	add	r3, r2
 800f564:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	699b      	ldr	r3, [r3, #24]
 800f56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f000 8148 	beq.w	800f804 <f_lseek+0x406>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6a1b      	ldr	r3, [r3, #32]
 800f578:	69ba      	ldr	r2, [r7, #24]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	f000 8142 	beq.w	800f804 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	7d1b      	ldrb	r3, [r3, #20]
 800f584:	b25b      	sxtb	r3, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	da18      	bge.n	800f5bc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	7858      	ldrb	r0, [r3, #1]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a1a      	ldr	r2, [r3, #32]
 800f598:	2301      	movs	r3, #1
 800f59a:	f7fd fa81 	bl	800caa0 <disk_write>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d004      	beq.n	800f5ae <f_lseek+0x1b0>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	755a      	strb	r2, [r3, #21]
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e12c      	b.n	800f808 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	7d1b      	ldrb	r3, [r3, #20]
 800f5b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5b6:	b2da      	uxtb	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	7858      	ldrb	r0, [r3, #1]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	69ba      	ldr	r2, [r7, #24]
 800f5ca:	f7fd fa49 	bl	800ca60 <disk_read>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d004      	beq.n	800f5de <f_lseek+0x1e0>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	755a      	strb	r2, [r3, #21]
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e114      	b.n	800f808 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	69ba      	ldr	r2, [r7, #24]
 800f5e2:	621a      	str	r2, [r3, #32]
 800f5e4:	e10e      	b.n	800f804 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d908      	bls.n	800f602 <f_lseek+0x204>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	7d1b      	ldrb	r3, [r3, #20]
 800f5f4:	f003 0302 	and.w	r3, r3, #2
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d102      	bne.n	800f602 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	699b      	ldr	r3, [r3, #24]
 800f606:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f610:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 80a7 	beq.w	800f768 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	895b      	ldrh	r3, [r3, #10]
 800f61e:	025b      	lsls	r3, r3, #9
 800f620:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f622:	6a3b      	ldr	r3, [r7, #32]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01b      	beq.n	800f660 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	1e5a      	subs	r2, r3, #1
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f632:	6a3b      	ldr	r3, [r7, #32]
 800f634:	1e59      	subs	r1, r3, #1
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d30f      	bcc.n	800f660 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	1e5a      	subs	r2, r3, #1
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	425b      	negs	r3, r3
 800f648:	401a      	ands	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	699b      	ldr	r3, [r3, #24]
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	69db      	ldr	r3, [r3, #28]
 800f65c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f65e:	e022      	b.n	800f6a6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d119      	bne.n	800f6a0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2100      	movs	r1, #0
 800f670:	4618      	mov	r0, r3
 800f672:	f7fd ffb4 	bl	800d5de <create_chain>
 800f676:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d104      	bne.n	800f688 <f_lseek+0x28a>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2202      	movs	r2, #2
 800f682:	755a      	strb	r2, [r3, #21]
 800f684:	2302      	movs	r3, #2
 800f686:	e0bf      	b.n	800f808 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68e:	d104      	bne.n	800f69a <f_lseek+0x29c>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	755a      	strb	r2, [r3, #21]
 800f696:	2301      	movs	r3, #1
 800f698:	e0b6      	b.n	800f808 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f69e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d05d      	beq.n	800f768 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f6ac:	e03a      	b.n	800f724 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	1ad3      	subs	r3, r2, r3
 800f6b4:	603b      	str	r3, [r7, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	699a      	ldr	r2, [r3, #24]
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	441a      	add	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	7d1b      	ldrb	r3, [r3, #20]
 800f6c6:	f003 0302 	and.w	r3, r3, #2
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00b      	beq.n	800f6e6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fd ff83 	bl	800d5de <create_chain>
 800f6d8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d108      	bne.n	800f6f2 <f_lseek+0x2f4>
							ofs = 0; break;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	603b      	str	r3, [r7, #0]
 800f6e4:	e022      	b.n	800f72c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fd fd81 	bl	800d1f2 <get_fat>
 800f6f0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f8:	d104      	bne.n	800f704 <f_lseek+0x306>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	755a      	strb	r2, [r3, #21]
 800f700:	2301      	movs	r3, #1
 800f702:	e081      	b.n	800f808 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f706:	2b01      	cmp	r3, #1
 800f708:	d904      	bls.n	800f714 <f_lseek+0x316>
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f710:	429a      	cmp	r2, r3
 800f712:	d304      	bcc.n	800f71e <f_lseek+0x320>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2202      	movs	r2, #2
 800f718:	755a      	strb	r2, [r3, #21]
 800f71a:	2302      	movs	r3, #2
 800f71c:	e074      	b.n	800f808 <f_lseek+0x40a>
					fp->clust = clst;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f722:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d8c0      	bhi.n	800f6ae <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	699a      	ldr	r2, [r3, #24]
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	441a      	add	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d012      	beq.n	800f768 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f746:	4618      	mov	r0, r3
 800f748:	f7fd fd34 	bl	800d1b4 <clust2sect>
 800f74c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f750:	2b00      	cmp	r3, #0
 800f752:	d104      	bne.n	800f75e <f_lseek+0x360>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2202      	movs	r2, #2
 800f758:	755a      	strb	r2, [r3, #21]
 800f75a:	2302      	movs	r3, #2
 800f75c:	e054      	b.n	800f808 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	0a5b      	lsrs	r3, r3, #9
 800f762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f764:	4413      	add	r3, r2
 800f766:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	699a      	ldr	r2, [r3, #24]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	429a      	cmp	r2, r3
 800f772:	d90a      	bls.n	800f78a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	699a      	ldr	r2, [r3, #24]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	7d1b      	ldrb	r3, [r3, #20]
 800f780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f784:	b2da      	uxtb	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f792:	2b00      	cmp	r3, #0
 800f794:	d036      	beq.n	800f804 <f_lseek+0x406>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a1b      	ldr	r3, [r3, #32]
 800f79a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d031      	beq.n	800f804 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	7d1b      	ldrb	r3, [r3, #20]
 800f7a4:	b25b      	sxtb	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	da18      	bge.n	800f7dc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	7858      	ldrb	r0, [r3, #1]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a1a      	ldr	r2, [r3, #32]
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	f7fd f971 	bl	800caa0 <disk_write>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d004      	beq.n	800f7ce <f_lseek+0x3d0>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	755a      	strb	r2, [r3, #21]
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	e01c      	b.n	800f808 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	7d1b      	ldrb	r3, [r3, #20]
 800f7d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7d6:	b2da      	uxtb	r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	7858      	ldrb	r0, [r3, #1]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7ea:	f7fd f939 	bl	800ca60 <disk_read>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d004      	beq.n	800f7fe <f_lseek+0x400>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	755a      	strb	r2, [r3, #21]
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e004      	b.n	800f808 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f802:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f804:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3740      	adds	r7, #64	@ 0x40
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	4613      	mov	r3, r2
 800f81c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f81e:	2301      	movs	r3, #1
 800f820:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f826:	4b1f      	ldr	r3, [pc, #124]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f828:	7a5b      	ldrb	r3, [r3, #9]
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d131      	bne.n	800f894 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f830:	4b1c      	ldr	r3, [pc, #112]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f832:	7a5b      	ldrb	r3, [r3, #9]
 800f834:	b2db      	uxtb	r3, r3
 800f836:	461a      	mov	r2, r3
 800f838:	4b1a      	ldr	r3, [pc, #104]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f83a:	2100      	movs	r1, #0
 800f83c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f83e:	4b19      	ldr	r3, [pc, #100]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f840:	7a5b      	ldrb	r3, [r3, #9]
 800f842:	b2db      	uxtb	r3, r3
 800f844:	4a17      	ldr	r2, [pc, #92]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f84e:	4b15      	ldr	r3, [pc, #84]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f850:	7a5b      	ldrb	r3, [r3, #9]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	461a      	mov	r2, r3
 800f856:	4b13      	ldr	r3, [pc, #76]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f858:	4413      	add	r3, r2
 800f85a:	79fa      	ldrb	r2, [r7, #7]
 800f85c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f85e:	4b11      	ldr	r3, [pc, #68]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f860:	7a5b      	ldrb	r3, [r3, #9]
 800f862:	b2db      	uxtb	r3, r3
 800f864:	1c5a      	adds	r2, r3, #1
 800f866:	b2d1      	uxtb	r1, r2
 800f868:	4a0e      	ldr	r2, [pc, #56]	@ (800f8a4 <FATFS_LinkDriverEx+0x94>)
 800f86a:	7251      	strb	r1, [r2, #9]
 800f86c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f86e:	7dbb      	ldrb	r3, [r7, #22]
 800f870:	3330      	adds	r3, #48	@ 0x30
 800f872:	b2da      	uxtb	r2, r3
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	3301      	adds	r3, #1
 800f87c:	223a      	movs	r2, #58	@ 0x3a
 800f87e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	3302      	adds	r3, #2
 800f884:	222f      	movs	r2, #47	@ 0x2f
 800f886:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	3303      	adds	r3, #3
 800f88c:	2200      	movs	r2, #0
 800f88e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f894:	7dfb      	ldrb	r3, [r7, #23]
}
 800f896:	4618      	mov	r0, r3
 800f898:	371c      	adds	r7, #28
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	2406383c 	.word	0x2406383c

0800f8a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	6839      	ldr	r1, [r7, #0]
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f7ff ffaa 	bl	800f810 <FATFS_LinkDriverEx>
 800f8bc:	4603      	mov	r3, r0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f8c6:	b580      	push	{r7, lr}
 800f8c8:	b082      	sub	sp, #8
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f8d6 	bl	800fa80 <malloc>
 800f8d4:	4603      	mov	r3, r0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f8d2 	bl	800fa90 <free>
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	6039      	str	r1, [r7, #0]
 800f8fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f900:	88fb      	ldrh	r3, [r7, #6]
 800f902:	2b7f      	cmp	r3, #127	@ 0x7f
 800f904:	d802      	bhi.n	800f90c <ff_convert+0x18>
		c = chr;
 800f906:	88fb      	ldrh	r3, [r7, #6]
 800f908:	81fb      	strh	r3, [r7, #14]
 800f90a:	e025      	b.n	800f958 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00b      	beq.n	800f92a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f912:	88fb      	ldrh	r3, [r7, #6]
 800f914:	2bff      	cmp	r3, #255	@ 0xff
 800f916:	d805      	bhi.n	800f924 <ff_convert+0x30>
 800f918:	88fb      	ldrh	r3, [r7, #6]
 800f91a:	3b80      	subs	r3, #128	@ 0x80
 800f91c:	4a12      	ldr	r2, [pc, #72]	@ (800f968 <ff_convert+0x74>)
 800f91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f922:	e000      	b.n	800f926 <ff_convert+0x32>
 800f924:	2300      	movs	r3, #0
 800f926:	81fb      	strh	r3, [r7, #14]
 800f928:	e016      	b.n	800f958 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f92a:	2300      	movs	r3, #0
 800f92c:	81fb      	strh	r3, [r7, #14]
 800f92e:	e009      	b.n	800f944 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f930:	89fb      	ldrh	r3, [r7, #14]
 800f932:	4a0d      	ldr	r2, [pc, #52]	@ (800f968 <ff_convert+0x74>)
 800f934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f938:	88fa      	ldrh	r2, [r7, #6]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d006      	beq.n	800f94c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f93e:	89fb      	ldrh	r3, [r7, #14]
 800f940:	3301      	adds	r3, #1
 800f942:	81fb      	strh	r3, [r7, #14]
 800f944:	89fb      	ldrh	r3, [r7, #14]
 800f946:	2b7f      	cmp	r3, #127	@ 0x7f
 800f948:	d9f2      	bls.n	800f930 <ff_convert+0x3c>
 800f94a:	e000      	b.n	800f94e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f94c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f94e:	89fb      	ldrh	r3, [r7, #14]
 800f950:	3380      	adds	r3, #128	@ 0x80
 800f952:	b29b      	uxth	r3, r3
 800f954:	b2db      	uxtb	r3, r3
 800f956:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f958:	89fb      	ldrh	r3, [r7, #14]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	080107bc 	.word	0x080107bc

0800f96c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b087      	sub	sp, #28
 800f970:	af00      	add	r7, sp, #0
 800f972:	4603      	mov	r3, r0
 800f974:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f976:	88fb      	ldrh	r3, [r7, #6]
 800f978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f97c:	d201      	bcs.n	800f982 <ff_wtoupper+0x16>
 800f97e:	4b3e      	ldr	r3, [pc, #248]	@ (800fa78 <ff_wtoupper+0x10c>)
 800f980:	e000      	b.n	800f984 <ff_wtoupper+0x18>
 800f982:	4b3e      	ldr	r3, [pc, #248]	@ (800fa7c <ff_wtoupper+0x110>)
 800f984:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	1c9a      	adds	r2, r3, #2
 800f98a:	617a      	str	r2, [r7, #20]
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f990:	8a7b      	ldrh	r3, [r7, #18]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d068      	beq.n	800fa68 <ff_wtoupper+0xfc>
 800f996:	88fa      	ldrh	r2, [r7, #6]
 800f998:	8a7b      	ldrh	r3, [r7, #18]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d364      	bcc.n	800fa68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	1c9a      	adds	r2, r3, #2
 800f9a2:	617a      	str	r2, [r7, #20]
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	823b      	strh	r3, [r7, #16]
 800f9a8:	8a3b      	ldrh	r3, [r7, #16]
 800f9aa:	0a1b      	lsrs	r3, r3, #8
 800f9ac:	81fb      	strh	r3, [r7, #14]
 800f9ae:	8a3b      	ldrh	r3, [r7, #16]
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f9b4:	88fa      	ldrh	r2, [r7, #6]
 800f9b6:	8a79      	ldrh	r1, [r7, #18]
 800f9b8:	8a3b      	ldrh	r3, [r7, #16]
 800f9ba:	440b      	add	r3, r1
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	da49      	bge.n	800fa54 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f9c0:	89fb      	ldrh	r3, [r7, #14]
 800f9c2:	2b08      	cmp	r3, #8
 800f9c4:	d84f      	bhi.n	800fa66 <ff_wtoupper+0xfa>
 800f9c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9cc <ff_wtoupper+0x60>)
 800f9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9cc:	0800f9f1 	.word	0x0800f9f1
 800f9d0:	0800fa03 	.word	0x0800fa03
 800f9d4:	0800fa19 	.word	0x0800fa19
 800f9d8:	0800fa21 	.word	0x0800fa21
 800f9dc:	0800fa29 	.word	0x0800fa29
 800f9e0:	0800fa31 	.word	0x0800fa31
 800f9e4:	0800fa39 	.word	0x0800fa39
 800f9e8:	0800fa41 	.word	0x0800fa41
 800f9ec:	0800fa49 	.word	0x0800fa49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f9f0:	88fa      	ldrh	r2, [r7, #6]
 800f9f2:	8a7b      	ldrh	r3, [r7, #18]
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	005b      	lsls	r3, r3, #1
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	80fb      	strh	r3, [r7, #6]
 800fa00:	e027      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fa02:	88fa      	ldrh	r2, [r7, #6]
 800fa04:	8a7b      	ldrh	r3, [r7, #18]
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	88fa      	ldrh	r2, [r7, #6]
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	80fb      	strh	r3, [r7, #6]
 800fa16:	e01c      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fa18:	88fb      	ldrh	r3, [r7, #6]
 800fa1a:	3b10      	subs	r3, #16
 800fa1c:	80fb      	strh	r3, [r7, #6]
 800fa1e:	e018      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fa20:	88fb      	ldrh	r3, [r7, #6]
 800fa22:	3b20      	subs	r3, #32
 800fa24:	80fb      	strh	r3, [r7, #6]
 800fa26:	e014      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fa28:	88fb      	ldrh	r3, [r7, #6]
 800fa2a:	3b30      	subs	r3, #48	@ 0x30
 800fa2c:	80fb      	strh	r3, [r7, #6]
 800fa2e:	e010      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fa30:	88fb      	ldrh	r3, [r7, #6]
 800fa32:	3b1a      	subs	r3, #26
 800fa34:	80fb      	strh	r3, [r7, #6]
 800fa36:	e00c      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fa38:	88fb      	ldrh	r3, [r7, #6]
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	80fb      	strh	r3, [r7, #6]
 800fa3e:	e008      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fa40:	88fb      	ldrh	r3, [r7, #6]
 800fa42:	3b50      	subs	r3, #80	@ 0x50
 800fa44:	80fb      	strh	r3, [r7, #6]
 800fa46:	e004      	b.n	800fa52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fa48:	88fb      	ldrh	r3, [r7, #6]
 800fa4a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800fa4e:	80fb      	strh	r3, [r7, #6]
 800fa50:	bf00      	nop
			}
			break;
 800fa52:	e008      	b.n	800fa66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fa54:	89fb      	ldrh	r3, [r7, #14]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d195      	bne.n	800f986 <ff_wtoupper+0x1a>
 800fa5a:	8a3b      	ldrh	r3, [r7, #16]
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	4413      	add	r3, r2
 800fa62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fa64:	e78f      	b.n	800f986 <ff_wtoupper+0x1a>
			break;
 800fa66:	bf00      	nop
	}

	return chr;
 800fa68:	88fb      	ldrh	r3, [r7, #6]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	371c      	adds	r7, #28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	080108bc 	.word	0x080108bc
 800fa7c:	08010ab0 	.word	0x08010ab0

0800fa80 <malloc>:
 800fa80:	4b02      	ldr	r3, [pc, #8]	@ (800fa8c <malloc+0xc>)
 800fa82:	4601      	mov	r1, r0
 800fa84:	6818      	ldr	r0, [r3, #0]
 800fa86:	f000 b82d 	b.w	800fae4 <_malloc_r>
 800fa8a:	bf00      	nop
 800fa8c:	24000014 	.word	0x24000014

0800fa90 <free>:
 800fa90:	4b02      	ldr	r3, [pc, #8]	@ (800fa9c <free+0xc>)
 800fa92:	4601      	mov	r1, r0
 800fa94:	6818      	ldr	r0, [r3, #0]
 800fa96:	f000 b929 	b.w	800fcec <_free_r>
 800fa9a:	bf00      	nop
 800fa9c:	24000014 	.word	0x24000014

0800faa0 <sbrk_aligned>:
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	4e0f      	ldr	r6, [pc, #60]	@ (800fae0 <sbrk_aligned+0x40>)
 800faa4:	460c      	mov	r4, r1
 800faa6:	6831      	ldr	r1, [r6, #0]
 800faa8:	4605      	mov	r5, r0
 800faaa:	b911      	cbnz	r1, 800fab2 <sbrk_aligned+0x12>
 800faac:	f000 f8e2 	bl	800fc74 <_sbrk_r>
 800fab0:	6030      	str	r0, [r6, #0]
 800fab2:	4621      	mov	r1, r4
 800fab4:	4628      	mov	r0, r5
 800fab6:	f000 f8dd 	bl	800fc74 <_sbrk_r>
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	d103      	bne.n	800fac6 <sbrk_aligned+0x26>
 800fabe:	f04f 34ff 	mov.w	r4, #4294967295
 800fac2:	4620      	mov	r0, r4
 800fac4:	bd70      	pop	{r4, r5, r6, pc}
 800fac6:	1cc4      	adds	r4, r0, #3
 800fac8:	f024 0403 	bic.w	r4, r4, #3
 800facc:	42a0      	cmp	r0, r4
 800face:	d0f8      	beq.n	800fac2 <sbrk_aligned+0x22>
 800fad0:	1a21      	subs	r1, r4, r0
 800fad2:	4628      	mov	r0, r5
 800fad4:	f000 f8ce 	bl	800fc74 <_sbrk_r>
 800fad8:	3001      	adds	r0, #1
 800fada:	d1f2      	bne.n	800fac2 <sbrk_aligned+0x22>
 800fadc:	e7ef      	b.n	800fabe <sbrk_aligned+0x1e>
 800fade:	bf00      	nop
 800fae0:	24063848 	.word	0x24063848

0800fae4 <_malloc_r>:
 800fae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fae8:	1ccd      	adds	r5, r1, #3
 800faea:	f025 0503 	bic.w	r5, r5, #3
 800faee:	3508      	adds	r5, #8
 800faf0:	2d0c      	cmp	r5, #12
 800faf2:	bf38      	it	cc
 800faf4:	250c      	movcc	r5, #12
 800faf6:	2d00      	cmp	r5, #0
 800faf8:	4606      	mov	r6, r0
 800fafa:	db01      	blt.n	800fb00 <_malloc_r+0x1c>
 800fafc:	42a9      	cmp	r1, r5
 800fafe:	d904      	bls.n	800fb0a <_malloc_r+0x26>
 800fb00:	230c      	movs	r3, #12
 800fb02:	6033      	str	r3, [r6, #0]
 800fb04:	2000      	movs	r0, #0
 800fb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbe0 <_malloc_r+0xfc>
 800fb0e:	f000 f869 	bl	800fbe4 <__malloc_lock>
 800fb12:	f8d8 3000 	ldr.w	r3, [r8]
 800fb16:	461c      	mov	r4, r3
 800fb18:	bb44      	cbnz	r4, 800fb6c <_malloc_r+0x88>
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f7ff ffbf 	bl	800faa0 <sbrk_aligned>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	4604      	mov	r4, r0
 800fb26:	d158      	bne.n	800fbda <_malloc_r+0xf6>
 800fb28:	f8d8 4000 	ldr.w	r4, [r8]
 800fb2c:	4627      	mov	r7, r4
 800fb2e:	2f00      	cmp	r7, #0
 800fb30:	d143      	bne.n	800fbba <_malloc_r+0xd6>
 800fb32:	2c00      	cmp	r4, #0
 800fb34:	d04b      	beq.n	800fbce <_malloc_r+0xea>
 800fb36:	6823      	ldr	r3, [r4, #0]
 800fb38:	4639      	mov	r1, r7
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	eb04 0903 	add.w	r9, r4, r3
 800fb40:	f000 f898 	bl	800fc74 <_sbrk_r>
 800fb44:	4581      	cmp	r9, r0
 800fb46:	d142      	bne.n	800fbce <_malloc_r+0xea>
 800fb48:	6821      	ldr	r1, [r4, #0]
 800fb4a:	1a6d      	subs	r5, r5, r1
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f7ff ffa6 	bl	800faa0 <sbrk_aligned>
 800fb54:	3001      	adds	r0, #1
 800fb56:	d03a      	beq.n	800fbce <_malloc_r+0xea>
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	442b      	add	r3, r5
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	bb62      	cbnz	r2, 800fbc0 <_malloc_r+0xdc>
 800fb66:	f8c8 7000 	str.w	r7, [r8]
 800fb6a:	e00f      	b.n	800fb8c <_malloc_r+0xa8>
 800fb6c:	6822      	ldr	r2, [r4, #0]
 800fb6e:	1b52      	subs	r2, r2, r5
 800fb70:	d420      	bmi.n	800fbb4 <_malloc_r+0xd0>
 800fb72:	2a0b      	cmp	r2, #11
 800fb74:	d917      	bls.n	800fba6 <_malloc_r+0xc2>
 800fb76:	1961      	adds	r1, r4, r5
 800fb78:	42a3      	cmp	r3, r4
 800fb7a:	6025      	str	r5, [r4, #0]
 800fb7c:	bf18      	it	ne
 800fb7e:	6059      	strne	r1, [r3, #4]
 800fb80:	6863      	ldr	r3, [r4, #4]
 800fb82:	bf08      	it	eq
 800fb84:	f8c8 1000 	streq.w	r1, [r8]
 800fb88:	5162      	str	r2, [r4, r5]
 800fb8a:	604b      	str	r3, [r1, #4]
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f000 f82f 	bl	800fbf0 <__malloc_unlock>
 800fb92:	f104 000b 	add.w	r0, r4, #11
 800fb96:	1d23      	adds	r3, r4, #4
 800fb98:	f020 0007 	bic.w	r0, r0, #7
 800fb9c:	1ac2      	subs	r2, r0, r3
 800fb9e:	bf1c      	itt	ne
 800fba0:	1a1b      	subne	r3, r3, r0
 800fba2:	50a3      	strne	r3, [r4, r2]
 800fba4:	e7af      	b.n	800fb06 <_malloc_r+0x22>
 800fba6:	6862      	ldr	r2, [r4, #4]
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	bf0c      	ite	eq
 800fbac:	f8c8 2000 	streq.w	r2, [r8]
 800fbb0:	605a      	strne	r2, [r3, #4]
 800fbb2:	e7eb      	b.n	800fb8c <_malloc_r+0xa8>
 800fbb4:	4623      	mov	r3, r4
 800fbb6:	6864      	ldr	r4, [r4, #4]
 800fbb8:	e7ae      	b.n	800fb18 <_malloc_r+0x34>
 800fbba:	463c      	mov	r4, r7
 800fbbc:	687f      	ldr	r7, [r7, #4]
 800fbbe:	e7b6      	b.n	800fb2e <_malloc_r+0x4a>
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	42a3      	cmp	r3, r4
 800fbc6:	d1fb      	bne.n	800fbc0 <_malloc_r+0xdc>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	6053      	str	r3, [r2, #4]
 800fbcc:	e7de      	b.n	800fb8c <_malloc_r+0xa8>
 800fbce:	230c      	movs	r3, #12
 800fbd0:	6033      	str	r3, [r6, #0]
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f000 f80c 	bl	800fbf0 <__malloc_unlock>
 800fbd8:	e794      	b.n	800fb04 <_malloc_r+0x20>
 800fbda:	6005      	str	r5, [r0, #0]
 800fbdc:	e7d6      	b.n	800fb8c <_malloc_r+0xa8>
 800fbde:	bf00      	nop
 800fbe0:	2406384c 	.word	0x2406384c

0800fbe4 <__malloc_lock>:
 800fbe4:	4801      	ldr	r0, [pc, #4]	@ (800fbec <__malloc_lock+0x8>)
 800fbe6:	f000 b87f 	b.w	800fce8 <__retarget_lock_acquire_recursive>
 800fbea:	bf00      	nop
 800fbec:	2406398c 	.word	0x2406398c

0800fbf0 <__malloc_unlock>:
 800fbf0:	4801      	ldr	r0, [pc, #4]	@ (800fbf8 <__malloc_unlock+0x8>)
 800fbf2:	f000 b87a 	b.w	800fcea <__retarget_lock_release_recursive>
 800fbf6:	bf00      	nop
 800fbf8:	2406398c 	.word	0x2406398c

0800fbfc <sniprintf>:
 800fbfc:	b40c      	push	{r2, r3}
 800fbfe:	b530      	push	{r4, r5, lr}
 800fc00:	4b17      	ldr	r3, [pc, #92]	@ (800fc60 <sniprintf+0x64>)
 800fc02:	1e0c      	subs	r4, r1, #0
 800fc04:	681d      	ldr	r5, [r3, #0]
 800fc06:	b09d      	sub	sp, #116	@ 0x74
 800fc08:	da08      	bge.n	800fc1c <sniprintf+0x20>
 800fc0a:	238b      	movs	r3, #139	@ 0x8b
 800fc0c:	602b      	str	r3, [r5, #0]
 800fc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc12:	b01d      	add	sp, #116	@ 0x74
 800fc14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc18:	b002      	add	sp, #8
 800fc1a:	4770      	bx	lr
 800fc1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc24:	bf14      	ite	ne
 800fc26:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc2a:	4623      	moveq	r3, r4
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc34:	9002      	str	r0, [sp, #8]
 800fc36:	9006      	str	r0, [sp, #24]
 800fc38:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fc3e:	ab21      	add	r3, sp, #132	@ 0x84
 800fc40:	a902      	add	r1, sp, #8
 800fc42:	4628      	mov	r0, r5
 800fc44:	9301      	str	r3, [sp, #4]
 800fc46:	f000 f8f7 	bl	800fe38 <_svfiprintf_r>
 800fc4a:	1c43      	adds	r3, r0, #1
 800fc4c:	bfbc      	itt	lt
 800fc4e:	238b      	movlt	r3, #139	@ 0x8b
 800fc50:	602b      	strlt	r3, [r5, #0]
 800fc52:	2c00      	cmp	r4, #0
 800fc54:	d0dd      	beq.n	800fc12 <sniprintf+0x16>
 800fc56:	9b02      	ldr	r3, [sp, #8]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	701a      	strb	r2, [r3, #0]
 800fc5c:	e7d9      	b.n	800fc12 <sniprintf+0x16>
 800fc5e:	bf00      	nop
 800fc60:	24000014 	.word	0x24000014

0800fc64 <memset>:
 800fc64:	4402      	add	r2, r0
 800fc66:	4603      	mov	r3, r0
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d100      	bne.n	800fc6e <memset+0xa>
 800fc6c:	4770      	bx	lr
 800fc6e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc72:	e7f9      	b.n	800fc68 <memset+0x4>

0800fc74 <_sbrk_r>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	4d06      	ldr	r5, [pc, #24]	@ (800fc90 <_sbrk_r+0x1c>)
 800fc78:	2300      	movs	r3, #0
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	4608      	mov	r0, r1
 800fc7e:	602b      	str	r3, [r5, #0]
 800fc80:	f7f2 fe48 	bl	8002914 <_sbrk>
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	d102      	bne.n	800fc8e <_sbrk_r+0x1a>
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	b103      	cbz	r3, 800fc8e <_sbrk_r+0x1a>
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
 800fc90:	24063988 	.word	0x24063988

0800fc94 <__errno>:
 800fc94:	4b01      	ldr	r3, [pc, #4]	@ (800fc9c <__errno+0x8>)
 800fc96:	6818      	ldr	r0, [r3, #0]
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	24000014 	.word	0x24000014

0800fca0 <__libc_init_array>:
 800fca0:	b570      	push	{r4, r5, r6, lr}
 800fca2:	4d0d      	ldr	r5, [pc, #52]	@ (800fcd8 <__libc_init_array+0x38>)
 800fca4:	4c0d      	ldr	r4, [pc, #52]	@ (800fcdc <__libc_init_array+0x3c>)
 800fca6:	1b64      	subs	r4, r4, r5
 800fca8:	10a4      	asrs	r4, r4, #2
 800fcaa:	2600      	movs	r6, #0
 800fcac:	42a6      	cmp	r6, r4
 800fcae:	d109      	bne.n	800fcc4 <__libc_init_array+0x24>
 800fcb0:	4d0b      	ldr	r5, [pc, #44]	@ (800fce0 <__libc_init_array+0x40>)
 800fcb2:	4c0c      	ldr	r4, [pc, #48]	@ (800fce4 <__libc_init_array+0x44>)
 800fcb4:	f000 fba8 	bl	8010408 <_init>
 800fcb8:	1b64      	subs	r4, r4, r5
 800fcba:	10a4      	asrs	r4, r4, #2
 800fcbc:	2600      	movs	r6, #0
 800fcbe:	42a6      	cmp	r6, r4
 800fcc0:	d105      	bne.n	800fcce <__libc_init_array+0x2e>
 800fcc2:	bd70      	pop	{r4, r5, r6, pc}
 800fcc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcc8:	4798      	blx	r3
 800fcca:	3601      	adds	r6, #1
 800fccc:	e7ee      	b.n	800fcac <__libc_init_array+0xc>
 800fcce:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcd2:	4798      	blx	r3
 800fcd4:	3601      	adds	r6, #1
 800fcd6:	e7f2      	b.n	800fcbe <__libc_init_array+0x1e>
 800fcd8:	08010ba8 	.word	0x08010ba8
 800fcdc:	08010ba8 	.word	0x08010ba8
 800fce0:	08010ba8 	.word	0x08010ba8
 800fce4:	08010bac 	.word	0x08010bac

0800fce8 <__retarget_lock_acquire_recursive>:
 800fce8:	4770      	bx	lr

0800fcea <__retarget_lock_release_recursive>:
 800fcea:	4770      	bx	lr

0800fcec <_free_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4605      	mov	r5, r0
 800fcf0:	2900      	cmp	r1, #0
 800fcf2:	d041      	beq.n	800fd78 <_free_r+0x8c>
 800fcf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcf8:	1f0c      	subs	r4, r1, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	bfb8      	it	lt
 800fcfe:	18e4      	addlt	r4, r4, r3
 800fd00:	f7ff ff70 	bl	800fbe4 <__malloc_lock>
 800fd04:	4a1d      	ldr	r2, [pc, #116]	@ (800fd7c <_free_r+0x90>)
 800fd06:	6813      	ldr	r3, [r2, #0]
 800fd08:	b933      	cbnz	r3, 800fd18 <_free_r+0x2c>
 800fd0a:	6063      	str	r3, [r4, #4]
 800fd0c:	6014      	str	r4, [r2, #0]
 800fd0e:	4628      	mov	r0, r5
 800fd10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd14:	f7ff bf6c 	b.w	800fbf0 <__malloc_unlock>
 800fd18:	42a3      	cmp	r3, r4
 800fd1a:	d908      	bls.n	800fd2e <_free_r+0x42>
 800fd1c:	6820      	ldr	r0, [r4, #0]
 800fd1e:	1821      	adds	r1, r4, r0
 800fd20:	428b      	cmp	r3, r1
 800fd22:	bf01      	itttt	eq
 800fd24:	6819      	ldreq	r1, [r3, #0]
 800fd26:	685b      	ldreq	r3, [r3, #4]
 800fd28:	1809      	addeq	r1, r1, r0
 800fd2a:	6021      	streq	r1, [r4, #0]
 800fd2c:	e7ed      	b.n	800fd0a <_free_r+0x1e>
 800fd2e:	461a      	mov	r2, r3
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	b10b      	cbz	r3, 800fd38 <_free_r+0x4c>
 800fd34:	42a3      	cmp	r3, r4
 800fd36:	d9fa      	bls.n	800fd2e <_free_r+0x42>
 800fd38:	6811      	ldr	r1, [r2, #0]
 800fd3a:	1850      	adds	r0, r2, r1
 800fd3c:	42a0      	cmp	r0, r4
 800fd3e:	d10b      	bne.n	800fd58 <_free_r+0x6c>
 800fd40:	6820      	ldr	r0, [r4, #0]
 800fd42:	4401      	add	r1, r0
 800fd44:	1850      	adds	r0, r2, r1
 800fd46:	4283      	cmp	r3, r0
 800fd48:	6011      	str	r1, [r2, #0]
 800fd4a:	d1e0      	bne.n	800fd0e <_free_r+0x22>
 800fd4c:	6818      	ldr	r0, [r3, #0]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	6053      	str	r3, [r2, #4]
 800fd52:	4408      	add	r0, r1
 800fd54:	6010      	str	r0, [r2, #0]
 800fd56:	e7da      	b.n	800fd0e <_free_r+0x22>
 800fd58:	d902      	bls.n	800fd60 <_free_r+0x74>
 800fd5a:	230c      	movs	r3, #12
 800fd5c:	602b      	str	r3, [r5, #0]
 800fd5e:	e7d6      	b.n	800fd0e <_free_r+0x22>
 800fd60:	6820      	ldr	r0, [r4, #0]
 800fd62:	1821      	adds	r1, r4, r0
 800fd64:	428b      	cmp	r3, r1
 800fd66:	bf04      	itt	eq
 800fd68:	6819      	ldreq	r1, [r3, #0]
 800fd6a:	685b      	ldreq	r3, [r3, #4]
 800fd6c:	6063      	str	r3, [r4, #4]
 800fd6e:	bf04      	itt	eq
 800fd70:	1809      	addeq	r1, r1, r0
 800fd72:	6021      	streq	r1, [r4, #0]
 800fd74:	6054      	str	r4, [r2, #4]
 800fd76:	e7ca      	b.n	800fd0e <_free_r+0x22>
 800fd78:	bd38      	pop	{r3, r4, r5, pc}
 800fd7a:	bf00      	nop
 800fd7c:	2406384c 	.word	0x2406384c

0800fd80 <__ssputs_r>:
 800fd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd84:	688e      	ldr	r6, [r1, #8]
 800fd86:	461f      	mov	r7, r3
 800fd88:	42be      	cmp	r6, r7
 800fd8a:	680b      	ldr	r3, [r1, #0]
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	460c      	mov	r4, r1
 800fd90:	4690      	mov	r8, r2
 800fd92:	d82d      	bhi.n	800fdf0 <__ssputs_r+0x70>
 800fd94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fd9c:	d026      	beq.n	800fdec <__ssputs_r+0x6c>
 800fd9e:	6965      	ldr	r5, [r4, #20]
 800fda0:	6909      	ldr	r1, [r1, #16]
 800fda2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fda6:	eba3 0901 	sub.w	r9, r3, r1
 800fdaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdae:	1c7b      	adds	r3, r7, #1
 800fdb0:	444b      	add	r3, r9
 800fdb2:	106d      	asrs	r5, r5, #1
 800fdb4:	429d      	cmp	r5, r3
 800fdb6:	bf38      	it	cc
 800fdb8:	461d      	movcc	r5, r3
 800fdba:	0553      	lsls	r3, r2, #21
 800fdbc:	d527      	bpl.n	800fe0e <__ssputs_r+0x8e>
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	f7ff fe90 	bl	800fae4 <_malloc_r>
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	b360      	cbz	r0, 800fe22 <__ssputs_r+0xa2>
 800fdc8:	6921      	ldr	r1, [r4, #16]
 800fdca:	464a      	mov	r2, r9
 800fdcc:	f000 fad8 	bl	8010380 <memcpy>
 800fdd0:	89a3      	ldrh	r3, [r4, #12]
 800fdd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fdd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdda:	81a3      	strh	r3, [r4, #12]
 800fddc:	6126      	str	r6, [r4, #16]
 800fdde:	6165      	str	r5, [r4, #20]
 800fde0:	444e      	add	r6, r9
 800fde2:	eba5 0509 	sub.w	r5, r5, r9
 800fde6:	6026      	str	r6, [r4, #0]
 800fde8:	60a5      	str	r5, [r4, #8]
 800fdea:	463e      	mov	r6, r7
 800fdec:	42be      	cmp	r6, r7
 800fdee:	d900      	bls.n	800fdf2 <__ssputs_r+0x72>
 800fdf0:	463e      	mov	r6, r7
 800fdf2:	6820      	ldr	r0, [r4, #0]
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	4641      	mov	r1, r8
 800fdf8:	f000 faa8 	bl	801034c <memmove>
 800fdfc:	68a3      	ldr	r3, [r4, #8]
 800fdfe:	1b9b      	subs	r3, r3, r6
 800fe00:	60a3      	str	r3, [r4, #8]
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	4433      	add	r3, r6
 800fe06:	6023      	str	r3, [r4, #0]
 800fe08:	2000      	movs	r0, #0
 800fe0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe0e:	462a      	mov	r2, r5
 800fe10:	f000 fac4 	bl	801039c <_realloc_r>
 800fe14:	4606      	mov	r6, r0
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d1e0      	bne.n	800fddc <__ssputs_r+0x5c>
 800fe1a:	6921      	ldr	r1, [r4, #16]
 800fe1c:	4650      	mov	r0, sl
 800fe1e:	f7ff ff65 	bl	800fcec <_free_r>
 800fe22:	230c      	movs	r3, #12
 800fe24:	f8ca 3000 	str.w	r3, [sl]
 800fe28:	89a3      	ldrh	r3, [r4, #12]
 800fe2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe2e:	81a3      	strh	r3, [r4, #12]
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	e7e9      	b.n	800fe0a <__ssputs_r+0x8a>
	...

0800fe38 <_svfiprintf_r>:
 800fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	4698      	mov	r8, r3
 800fe3e:	898b      	ldrh	r3, [r1, #12]
 800fe40:	061b      	lsls	r3, r3, #24
 800fe42:	b09d      	sub	sp, #116	@ 0x74
 800fe44:	4607      	mov	r7, r0
 800fe46:	460d      	mov	r5, r1
 800fe48:	4614      	mov	r4, r2
 800fe4a:	d510      	bpl.n	800fe6e <_svfiprintf_r+0x36>
 800fe4c:	690b      	ldr	r3, [r1, #16]
 800fe4e:	b973      	cbnz	r3, 800fe6e <_svfiprintf_r+0x36>
 800fe50:	2140      	movs	r1, #64	@ 0x40
 800fe52:	f7ff fe47 	bl	800fae4 <_malloc_r>
 800fe56:	6028      	str	r0, [r5, #0]
 800fe58:	6128      	str	r0, [r5, #16]
 800fe5a:	b930      	cbnz	r0, 800fe6a <_svfiprintf_r+0x32>
 800fe5c:	230c      	movs	r3, #12
 800fe5e:	603b      	str	r3, [r7, #0]
 800fe60:	f04f 30ff 	mov.w	r0, #4294967295
 800fe64:	b01d      	add	sp, #116	@ 0x74
 800fe66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6a:	2340      	movs	r3, #64	@ 0x40
 800fe6c:	616b      	str	r3, [r5, #20]
 800fe6e:	2300      	movs	r3, #0
 800fe70:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe72:	2320      	movs	r3, #32
 800fe74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe78:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe7c:	2330      	movs	r3, #48	@ 0x30
 800fe7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801001c <_svfiprintf_r+0x1e4>
 800fe82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe86:	f04f 0901 	mov.w	r9, #1
 800fe8a:	4623      	mov	r3, r4
 800fe8c:	469a      	mov	sl, r3
 800fe8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe92:	b10a      	cbz	r2, 800fe98 <_svfiprintf_r+0x60>
 800fe94:	2a25      	cmp	r2, #37	@ 0x25
 800fe96:	d1f9      	bne.n	800fe8c <_svfiprintf_r+0x54>
 800fe98:	ebba 0b04 	subs.w	fp, sl, r4
 800fe9c:	d00b      	beq.n	800feb6 <_svfiprintf_r+0x7e>
 800fe9e:	465b      	mov	r3, fp
 800fea0:	4622      	mov	r2, r4
 800fea2:	4629      	mov	r1, r5
 800fea4:	4638      	mov	r0, r7
 800fea6:	f7ff ff6b 	bl	800fd80 <__ssputs_r>
 800feaa:	3001      	adds	r0, #1
 800feac:	f000 80a7 	beq.w	800fffe <_svfiprintf_r+0x1c6>
 800feb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feb2:	445a      	add	r2, fp
 800feb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800feb6:	f89a 3000 	ldrb.w	r3, [sl]
 800feba:	2b00      	cmp	r3, #0
 800febc:	f000 809f 	beq.w	800fffe <_svfiprintf_r+0x1c6>
 800fec0:	2300      	movs	r3, #0
 800fec2:	f04f 32ff 	mov.w	r2, #4294967295
 800fec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800feca:	f10a 0a01 	add.w	sl, sl, #1
 800fece:	9304      	str	r3, [sp, #16]
 800fed0:	9307      	str	r3, [sp, #28]
 800fed2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fed6:	931a      	str	r3, [sp, #104]	@ 0x68
 800fed8:	4654      	mov	r4, sl
 800feda:	2205      	movs	r2, #5
 800fedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee0:	484e      	ldr	r0, [pc, #312]	@ (801001c <_svfiprintf_r+0x1e4>)
 800fee2:	f7f0 fa05 	bl	80002f0 <memchr>
 800fee6:	9a04      	ldr	r2, [sp, #16]
 800fee8:	b9d8      	cbnz	r0, 800ff22 <_svfiprintf_r+0xea>
 800feea:	06d0      	lsls	r0, r2, #27
 800feec:	bf44      	itt	mi
 800feee:	2320      	movmi	r3, #32
 800fef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fef4:	0711      	lsls	r1, r2, #28
 800fef6:	bf44      	itt	mi
 800fef8:	232b      	movmi	r3, #43	@ 0x2b
 800fefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fefe:	f89a 3000 	ldrb.w	r3, [sl]
 800ff02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff04:	d015      	beq.n	800ff32 <_svfiprintf_r+0xfa>
 800ff06:	9a07      	ldr	r2, [sp, #28]
 800ff08:	4654      	mov	r4, sl
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	f04f 0c0a 	mov.w	ip, #10
 800ff10:	4621      	mov	r1, r4
 800ff12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff16:	3b30      	subs	r3, #48	@ 0x30
 800ff18:	2b09      	cmp	r3, #9
 800ff1a:	d94b      	bls.n	800ffb4 <_svfiprintf_r+0x17c>
 800ff1c:	b1b0      	cbz	r0, 800ff4c <_svfiprintf_r+0x114>
 800ff1e:	9207      	str	r2, [sp, #28]
 800ff20:	e014      	b.n	800ff4c <_svfiprintf_r+0x114>
 800ff22:	eba0 0308 	sub.w	r3, r0, r8
 800ff26:	fa09 f303 	lsl.w	r3, r9, r3
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	9304      	str	r3, [sp, #16]
 800ff2e:	46a2      	mov	sl, r4
 800ff30:	e7d2      	b.n	800fed8 <_svfiprintf_r+0xa0>
 800ff32:	9b03      	ldr	r3, [sp, #12]
 800ff34:	1d19      	adds	r1, r3, #4
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	9103      	str	r1, [sp, #12]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	bfbb      	ittet	lt
 800ff3e:	425b      	neglt	r3, r3
 800ff40:	f042 0202 	orrlt.w	r2, r2, #2
 800ff44:	9307      	strge	r3, [sp, #28]
 800ff46:	9307      	strlt	r3, [sp, #28]
 800ff48:	bfb8      	it	lt
 800ff4a:	9204      	strlt	r2, [sp, #16]
 800ff4c:	7823      	ldrb	r3, [r4, #0]
 800ff4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff50:	d10a      	bne.n	800ff68 <_svfiprintf_r+0x130>
 800ff52:	7863      	ldrb	r3, [r4, #1]
 800ff54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff56:	d132      	bne.n	800ffbe <_svfiprintf_r+0x186>
 800ff58:	9b03      	ldr	r3, [sp, #12]
 800ff5a:	1d1a      	adds	r2, r3, #4
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	9203      	str	r2, [sp, #12]
 800ff60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff64:	3402      	adds	r4, #2
 800ff66:	9305      	str	r3, [sp, #20]
 800ff68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801002c <_svfiprintf_r+0x1f4>
 800ff6c:	7821      	ldrb	r1, [r4, #0]
 800ff6e:	2203      	movs	r2, #3
 800ff70:	4650      	mov	r0, sl
 800ff72:	f7f0 f9bd 	bl	80002f0 <memchr>
 800ff76:	b138      	cbz	r0, 800ff88 <_svfiprintf_r+0x150>
 800ff78:	9b04      	ldr	r3, [sp, #16]
 800ff7a:	eba0 000a 	sub.w	r0, r0, sl
 800ff7e:	2240      	movs	r2, #64	@ 0x40
 800ff80:	4082      	lsls	r2, r0
 800ff82:	4313      	orrs	r3, r2
 800ff84:	3401      	adds	r4, #1
 800ff86:	9304      	str	r3, [sp, #16]
 800ff88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8c:	4824      	ldr	r0, [pc, #144]	@ (8010020 <_svfiprintf_r+0x1e8>)
 800ff8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff92:	2206      	movs	r2, #6
 800ff94:	f7f0 f9ac 	bl	80002f0 <memchr>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d036      	beq.n	801000a <_svfiprintf_r+0x1d2>
 800ff9c:	4b21      	ldr	r3, [pc, #132]	@ (8010024 <_svfiprintf_r+0x1ec>)
 800ff9e:	bb1b      	cbnz	r3, 800ffe8 <_svfiprintf_r+0x1b0>
 800ffa0:	9b03      	ldr	r3, [sp, #12]
 800ffa2:	3307      	adds	r3, #7
 800ffa4:	f023 0307 	bic.w	r3, r3, #7
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	9303      	str	r3, [sp, #12]
 800ffac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffae:	4433      	add	r3, r6
 800ffb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffb2:	e76a      	b.n	800fe8a <_svfiprintf_r+0x52>
 800ffb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffb8:	460c      	mov	r4, r1
 800ffba:	2001      	movs	r0, #1
 800ffbc:	e7a8      	b.n	800ff10 <_svfiprintf_r+0xd8>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	3401      	adds	r4, #1
 800ffc2:	9305      	str	r3, [sp, #20]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	f04f 0c0a 	mov.w	ip, #10
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd0:	3a30      	subs	r2, #48	@ 0x30
 800ffd2:	2a09      	cmp	r2, #9
 800ffd4:	d903      	bls.n	800ffde <_svfiprintf_r+0x1a6>
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0c6      	beq.n	800ff68 <_svfiprintf_r+0x130>
 800ffda:	9105      	str	r1, [sp, #20]
 800ffdc:	e7c4      	b.n	800ff68 <_svfiprintf_r+0x130>
 800ffde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e7f0      	b.n	800ffca <_svfiprintf_r+0x192>
 800ffe8:	ab03      	add	r3, sp, #12
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	462a      	mov	r2, r5
 800ffee:	4b0e      	ldr	r3, [pc, #56]	@ (8010028 <_svfiprintf_r+0x1f0>)
 800fff0:	a904      	add	r1, sp, #16
 800fff2:	4638      	mov	r0, r7
 800fff4:	f3af 8000 	nop.w
 800fff8:	1c42      	adds	r2, r0, #1
 800fffa:	4606      	mov	r6, r0
 800fffc:	d1d6      	bne.n	800ffac <_svfiprintf_r+0x174>
 800fffe:	89ab      	ldrh	r3, [r5, #12]
 8010000:	065b      	lsls	r3, r3, #25
 8010002:	f53f af2d 	bmi.w	800fe60 <_svfiprintf_r+0x28>
 8010006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010008:	e72c      	b.n	800fe64 <_svfiprintf_r+0x2c>
 801000a:	ab03      	add	r3, sp, #12
 801000c:	9300      	str	r3, [sp, #0]
 801000e:	462a      	mov	r2, r5
 8010010:	4b05      	ldr	r3, [pc, #20]	@ (8010028 <_svfiprintf_r+0x1f0>)
 8010012:	a904      	add	r1, sp, #16
 8010014:	4638      	mov	r0, r7
 8010016:	f000 f879 	bl	801010c <_printf_i>
 801001a:	e7ed      	b.n	800fff8 <_svfiprintf_r+0x1c0>
 801001c:	08010b6c 	.word	0x08010b6c
 8010020:	08010b76 	.word	0x08010b76
 8010024:	00000000 	.word	0x00000000
 8010028:	0800fd81 	.word	0x0800fd81
 801002c:	08010b72 	.word	0x08010b72

08010030 <_printf_common>:
 8010030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010034:	4616      	mov	r6, r2
 8010036:	4698      	mov	r8, r3
 8010038:	688a      	ldr	r2, [r1, #8]
 801003a:	690b      	ldr	r3, [r1, #16]
 801003c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010040:	4293      	cmp	r3, r2
 8010042:	bfb8      	it	lt
 8010044:	4613      	movlt	r3, r2
 8010046:	6033      	str	r3, [r6, #0]
 8010048:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801004c:	4607      	mov	r7, r0
 801004e:	460c      	mov	r4, r1
 8010050:	b10a      	cbz	r2, 8010056 <_printf_common+0x26>
 8010052:	3301      	adds	r3, #1
 8010054:	6033      	str	r3, [r6, #0]
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	0699      	lsls	r1, r3, #26
 801005a:	bf42      	ittt	mi
 801005c:	6833      	ldrmi	r3, [r6, #0]
 801005e:	3302      	addmi	r3, #2
 8010060:	6033      	strmi	r3, [r6, #0]
 8010062:	6825      	ldr	r5, [r4, #0]
 8010064:	f015 0506 	ands.w	r5, r5, #6
 8010068:	d106      	bne.n	8010078 <_printf_common+0x48>
 801006a:	f104 0a19 	add.w	sl, r4, #25
 801006e:	68e3      	ldr	r3, [r4, #12]
 8010070:	6832      	ldr	r2, [r6, #0]
 8010072:	1a9b      	subs	r3, r3, r2
 8010074:	42ab      	cmp	r3, r5
 8010076:	dc26      	bgt.n	80100c6 <_printf_common+0x96>
 8010078:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801007c:	6822      	ldr	r2, [r4, #0]
 801007e:	3b00      	subs	r3, #0
 8010080:	bf18      	it	ne
 8010082:	2301      	movne	r3, #1
 8010084:	0692      	lsls	r2, r2, #26
 8010086:	d42b      	bmi.n	80100e0 <_printf_common+0xb0>
 8010088:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801008c:	4641      	mov	r1, r8
 801008e:	4638      	mov	r0, r7
 8010090:	47c8      	blx	r9
 8010092:	3001      	adds	r0, #1
 8010094:	d01e      	beq.n	80100d4 <_printf_common+0xa4>
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	6922      	ldr	r2, [r4, #16]
 801009a:	f003 0306 	and.w	r3, r3, #6
 801009e:	2b04      	cmp	r3, #4
 80100a0:	bf02      	ittt	eq
 80100a2:	68e5      	ldreq	r5, [r4, #12]
 80100a4:	6833      	ldreq	r3, [r6, #0]
 80100a6:	1aed      	subeq	r5, r5, r3
 80100a8:	68a3      	ldr	r3, [r4, #8]
 80100aa:	bf0c      	ite	eq
 80100ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100b0:	2500      	movne	r5, #0
 80100b2:	4293      	cmp	r3, r2
 80100b4:	bfc4      	itt	gt
 80100b6:	1a9b      	subgt	r3, r3, r2
 80100b8:	18ed      	addgt	r5, r5, r3
 80100ba:	2600      	movs	r6, #0
 80100bc:	341a      	adds	r4, #26
 80100be:	42b5      	cmp	r5, r6
 80100c0:	d11a      	bne.n	80100f8 <_printf_common+0xc8>
 80100c2:	2000      	movs	r0, #0
 80100c4:	e008      	b.n	80100d8 <_printf_common+0xa8>
 80100c6:	2301      	movs	r3, #1
 80100c8:	4652      	mov	r2, sl
 80100ca:	4641      	mov	r1, r8
 80100cc:	4638      	mov	r0, r7
 80100ce:	47c8      	blx	r9
 80100d0:	3001      	adds	r0, #1
 80100d2:	d103      	bne.n	80100dc <_printf_common+0xac>
 80100d4:	f04f 30ff 	mov.w	r0, #4294967295
 80100d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100dc:	3501      	adds	r5, #1
 80100de:	e7c6      	b.n	801006e <_printf_common+0x3e>
 80100e0:	18e1      	adds	r1, r4, r3
 80100e2:	1c5a      	adds	r2, r3, #1
 80100e4:	2030      	movs	r0, #48	@ 0x30
 80100e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100ea:	4422      	add	r2, r4
 80100ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100f4:	3302      	adds	r3, #2
 80100f6:	e7c7      	b.n	8010088 <_printf_common+0x58>
 80100f8:	2301      	movs	r3, #1
 80100fa:	4622      	mov	r2, r4
 80100fc:	4641      	mov	r1, r8
 80100fe:	4638      	mov	r0, r7
 8010100:	47c8      	blx	r9
 8010102:	3001      	adds	r0, #1
 8010104:	d0e6      	beq.n	80100d4 <_printf_common+0xa4>
 8010106:	3601      	adds	r6, #1
 8010108:	e7d9      	b.n	80100be <_printf_common+0x8e>
	...

0801010c <_printf_i>:
 801010c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010110:	7e0f      	ldrb	r7, [r1, #24]
 8010112:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010114:	2f78      	cmp	r7, #120	@ 0x78
 8010116:	4691      	mov	r9, r2
 8010118:	4680      	mov	r8, r0
 801011a:	460c      	mov	r4, r1
 801011c:	469a      	mov	sl, r3
 801011e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010122:	d807      	bhi.n	8010134 <_printf_i+0x28>
 8010124:	2f62      	cmp	r7, #98	@ 0x62
 8010126:	d80a      	bhi.n	801013e <_printf_i+0x32>
 8010128:	2f00      	cmp	r7, #0
 801012a:	f000 80d2 	beq.w	80102d2 <_printf_i+0x1c6>
 801012e:	2f58      	cmp	r7, #88	@ 0x58
 8010130:	f000 80b9 	beq.w	80102a6 <_printf_i+0x19a>
 8010134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010138:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801013c:	e03a      	b.n	80101b4 <_printf_i+0xa8>
 801013e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010142:	2b15      	cmp	r3, #21
 8010144:	d8f6      	bhi.n	8010134 <_printf_i+0x28>
 8010146:	a101      	add	r1, pc, #4	@ (adr r1, 801014c <_printf_i+0x40>)
 8010148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801014c:	080101a5 	.word	0x080101a5
 8010150:	080101b9 	.word	0x080101b9
 8010154:	08010135 	.word	0x08010135
 8010158:	08010135 	.word	0x08010135
 801015c:	08010135 	.word	0x08010135
 8010160:	08010135 	.word	0x08010135
 8010164:	080101b9 	.word	0x080101b9
 8010168:	08010135 	.word	0x08010135
 801016c:	08010135 	.word	0x08010135
 8010170:	08010135 	.word	0x08010135
 8010174:	08010135 	.word	0x08010135
 8010178:	080102b9 	.word	0x080102b9
 801017c:	080101e3 	.word	0x080101e3
 8010180:	08010273 	.word	0x08010273
 8010184:	08010135 	.word	0x08010135
 8010188:	08010135 	.word	0x08010135
 801018c:	080102db 	.word	0x080102db
 8010190:	08010135 	.word	0x08010135
 8010194:	080101e3 	.word	0x080101e3
 8010198:	08010135 	.word	0x08010135
 801019c:	08010135 	.word	0x08010135
 80101a0:	0801027b 	.word	0x0801027b
 80101a4:	6833      	ldr	r3, [r6, #0]
 80101a6:	1d1a      	adds	r2, r3, #4
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	6032      	str	r2, [r6, #0]
 80101ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80101b4:	2301      	movs	r3, #1
 80101b6:	e09d      	b.n	80102f4 <_printf_i+0x1e8>
 80101b8:	6833      	ldr	r3, [r6, #0]
 80101ba:	6820      	ldr	r0, [r4, #0]
 80101bc:	1d19      	adds	r1, r3, #4
 80101be:	6031      	str	r1, [r6, #0]
 80101c0:	0606      	lsls	r6, r0, #24
 80101c2:	d501      	bpl.n	80101c8 <_printf_i+0xbc>
 80101c4:	681d      	ldr	r5, [r3, #0]
 80101c6:	e003      	b.n	80101d0 <_printf_i+0xc4>
 80101c8:	0645      	lsls	r5, r0, #25
 80101ca:	d5fb      	bpl.n	80101c4 <_printf_i+0xb8>
 80101cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80101d0:	2d00      	cmp	r5, #0
 80101d2:	da03      	bge.n	80101dc <_printf_i+0xd0>
 80101d4:	232d      	movs	r3, #45	@ 0x2d
 80101d6:	426d      	negs	r5, r5
 80101d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101dc:	4859      	ldr	r0, [pc, #356]	@ (8010344 <_printf_i+0x238>)
 80101de:	230a      	movs	r3, #10
 80101e0:	e011      	b.n	8010206 <_printf_i+0xfa>
 80101e2:	6821      	ldr	r1, [r4, #0]
 80101e4:	6833      	ldr	r3, [r6, #0]
 80101e6:	0608      	lsls	r0, r1, #24
 80101e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80101ec:	d402      	bmi.n	80101f4 <_printf_i+0xe8>
 80101ee:	0649      	lsls	r1, r1, #25
 80101f0:	bf48      	it	mi
 80101f2:	b2ad      	uxthmi	r5, r5
 80101f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80101f6:	4853      	ldr	r0, [pc, #332]	@ (8010344 <_printf_i+0x238>)
 80101f8:	6033      	str	r3, [r6, #0]
 80101fa:	bf14      	ite	ne
 80101fc:	230a      	movne	r3, #10
 80101fe:	2308      	moveq	r3, #8
 8010200:	2100      	movs	r1, #0
 8010202:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010206:	6866      	ldr	r6, [r4, #4]
 8010208:	60a6      	str	r6, [r4, #8]
 801020a:	2e00      	cmp	r6, #0
 801020c:	bfa2      	ittt	ge
 801020e:	6821      	ldrge	r1, [r4, #0]
 8010210:	f021 0104 	bicge.w	r1, r1, #4
 8010214:	6021      	strge	r1, [r4, #0]
 8010216:	b90d      	cbnz	r5, 801021c <_printf_i+0x110>
 8010218:	2e00      	cmp	r6, #0
 801021a:	d04b      	beq.n	80102b4 <_printf_i+0x1a8>
 801021c:	4616      	mov	r6, r2
 801021e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010222:	fb03 5711 	mls	r7, r3, r1, r5
 8010226:	5dc7      	ldrb	r7, [r0, r7]
 8010228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801022c:	462f      	mov	r7, r5
 801022e:	42bb      	cmp	r3, r7
 8010230:	460d      	mov	r5, r1
 8010232:	d9f4      	bls.n	801021e <_printf_i+0x112>
 8010234:	2b08      	cmp	r3, #8
 8010236:	d10b      	bne.n	8010250 <_printf_i+0x144>
 8010238:	6823      	ldr	r3, [r4, #0]
 801023a:	07df      	lsls	r7, r3, #31
 801023c:	d508      	bpl.n	8010250 <_printf_i+0x144>
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	6861      	ldr	r1, [r4, #4]
 8010242:	4299      	cmp	r1, r3
 8010244:	bfde      	ittt	le
 8010246:	2330      	movle	r3, #48	@ 0x30
 8010248:	f806 3c01 	strble.w	r3, [r6, #-1]
 801024c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010250:	1b92      	subs	r2, r2, r6
 8010252:	6122      	str	r2, [r4, #16]
 8010254:	f8cd a000 	str.w	sl, [sp]
 8010258:	464b      	mov	r3, r9
 801025a:	aa03      	add	r2, sp, #12
 801025c:	4621      	mov	r1, r4
 801025e:	4640      	mov	r0, r8
 8010260:	f7ff fee6 	bl	8010030 <_printf_common>
 8010264:	3001      	adds	r0, #1
 8010266:	d14a      	bne.n	80102fe <_printf_i+0x1f2>
 8010268:	f04f 30ff 	mov.w	r0, #4294967295
 801026c:	b004      	add	sp, #16
 801026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010272:	6823      	ldr	r3, [r4, #0]
 8010274:	f043 0320 	orr.w	r3, r3, #32
 8010278:	6023      	str	r3, [r4, #0]
 801027a:	4833      	ldr	r0, [pc, #204]	@ (8010348 <_printf_i+0x23c>)
 801027c:	2778      	movs	r7, #120	@ 0x78
 801027e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	6831      	ldr	r1, [r6, #0]
 8010286:	061f      	lsls	r7, r3, #24
 8010288:	f851 5b04 	ldr.w	r5, [r1], #4
 801028c:	d402      	bmi.n	8010294 <_printf_i+0x188>
 801028e:	065f      	lsls	r7, r3, #25
 8010290:	bf48      	it	mi
 8010292:	b2ad      	uxthmi	r5, r5
 8010294:	6031      	str	r1, [r6, #0]
 8010296:	07d9      	lsls	r1, r3, #31
 8010298:	bf44      	itt	mi
 801029a:	f043 0320 	orrmi.w	r3, r3, #32
 801029e:	6023      	strmi	r3, [r4, #0]
 80102a0:	b11d      	cbz	r5, 80102aa <_printf_i+0x19e>
 80102a2:	2310      	movs	r3, #16
 80102a4:	e7ac      	b.n	8010200 <_printf_i+0xf4>
 80102a6:	4827      	ldr	r0, [pc, #156]	@ (8010344 <_printf_i+0x238>)
 80102a8:	e7e9      	b.n	801027e <_printf_i+0x172>
 80102aa:	6823      	ldr	r3, [r4, #0]
 80102ac:	f023 0320 	bic.w	r3, r3, #32
 80102b0:	6023      	str	r3, [r4, #0]
 80102b2:	e7f6      	b.n	80102a2 <_printf_i+0x196>
 80102b4:	4616      	mov	r6, r2
 80102b6:	e7bd      	b.n	8010234 <_printf_i+0x128>
 80102b8:	6833      	ldr	r3, [r6, #0]
 80102ba:	6825      	ldr	r5, [r4, #0]
 80102bc:	6961      	ldr	r1, [r4, #20]
 80102be:	1d18      	adds	r0, r3, #4
 80102c0:	6030      	str	r0, [r6, #0]
 80102c2:	062e      	lsls	r6, r5, #24
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	d501      	bpl.n	80102cc <_printf_i+0x1c0>
 80102c8:	6019      	str	r1, [r3, #0]
 80102ca:	e002      	b.n	80102d2 <_printf_i+0x1c6>
 80102cc:	0668      	lsls	r0, r5, #25
 80102ce:	d5fb      	bpl.n	80102c8 <_printf_i+0x1bc>
 80102d0:	8019      	strh	r1, [r3, #0]
 80102d2:	2300      	movs	r3, #0
 80102d4:	6123      	str	r3, [r4, #16]
 80102d6:	4616      	mov	r6, r2
 80102d8:	e7bc      	b.n	8010254 <_printf_i+0x148>
 80102da:	6833      	ldr	r3, [r6, #0]
 80102dc:	1d1a      	adds	r2, r3, #4
 80102de:	6032      	str	r2, [r6, #0]
 80102e0:	681e      	ldr	r6, [r3, #0]
 80102e2:	6862      	ldr	r2, [r4, #4]
 80102e4:	2100      	movs	r1, #0
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7f0 f802 	bl	80002f0 <memchr>
 80102ec:	b108      	cbz	r0, 80102f2 <_printf_i+0x1e6>
 80102ee:	1b80      	subs	r0, r0, r6
 80102f0:	6060      	str	r0, [r4, #4]
 80102f2:	6863      	ldr	r3, [r4, #4]
 80102f4:	6123      	str	r3, [r4, #16]
 80102f6:	2300      	movs	r3, #0
 80102f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102fc:	e7aa      	b.n	8010254 <_printf_i+0x148>
 80102fe:	6923      	ldr	r3, [r4, #16]
 8010300:	4632      	mov	r2, r6
 8010302:	4649      	mov	r1, r9
 8010304:	4640      	mov	r0, r8
 8010306:	47d0      	blx	sl
 8010308:	3001      	adds	r0, #1
 801030a:	d0ad      	beq.n	8010268 <_printf_i+0x15c>
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	079b      	lsls	r3, r3, #30
 8010310:	d413      	bmi.n	801033a <_printf_i+0x22e>
 8010312:	68e0      	ldr	r0, [r4, #12]
 8010314:	9b03      	ldr	r3, [sp, #12]
 8010316:	4298      	cmp	r0, r3
 8010318:	bfb8      	it	lt
 801031a:	4618      	movlt	r0, r3
 801031c:	e7a6      	b.n	801026c <_printf_i+0x160>
 801031e:	2301      	movs	r3, #1
 8010320:	4632      	mov	r2, r6
 8010322:	4649      	mov	r1, r9
 8010324:	4640      	mov	r0, r8
 8010326:	47d0      	blx	sl
 8010328:	3001      	adds	r0, #1
 801032a:	d09d      	beq.n	8010268 <_printf_i+0x15c>
 801032c:	3501      	adds	r5, #1
 801032e:	68e3      	ldr	r3, [r4, #12]
 8010330:	9903      	ldr	r1, [sp, #12]
 8010332:	1a5b      	subs	r3, r3, r1
 8010334:	42ab      	cmp	r3, r5
 8010336:	dcf2      	bgt.n	801031e <_printf_i+0x212>
 8010338:	e7eb      	b.n	8010312 <_printf_i+0x206>
 801033a:	2500      	movs	r5, #0
 801033c:	f104 0619 	add.w	r6, r4, #25
 8010340:	e7f5      	b.n	801032e <_printf_i+0x222>
 8010342:	bf00      	nop
 8010344:	08010b7d 	.word	0x08010b7d
 8010348:	08010b8e 	.word	0x08010b8e

0801034c <memmove>:
 801034c:	4288      	cmp	r0, r1
 801034e:	b510      	push	{r4, lr}
 8010350:	eb01 0402 	add.w	r4, r1, r2
 8010354:	d902      	bls.n	801035c <memmove+0x10>
 8010356:	4284      	cmp	r4, r0
 8010358:	4623      	mov	r3, r4
 801035a:	d807      	bhi.n	801036c <memmove+0x20>
 801035c:	1e43      	subs	r3, r0, #1
 801035e:	42a1      	cmp	r1, r4
 8010360:	d008      	beq.n	8010374 <memmove+0x28>
 8010362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010366:	f803 2f01 	strb.w	r2, [r3, #1]!
 801036a:	e7f8      	b.n	801035e <memmove+0x12>
 801036c:	4402      	add	r2, r0
 801036e:	4601      	mov	r1, r0
 8010370:	428a      	cmp	r2, r1
 8010372:	d100      	bne.n	8010376 <memmove+0x2a>
 8010374:	bd10      	pop	{r4, pc}
 8010376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801037a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801037e:	e7f7      	b.n	8010370 <memmove+0x24>

08010380 <memcpy>:
 8010380:	440a      	add	r2, r1
 8010382:	4291      	cmp	r1, r2
 8010384:	f100 33ff 	add.w	r3, r0, #4294967295
 8010388:	d100      	bne.n	801038c <memcpy+0xc>
 801038a:	4770      	bx	lr
 801038c:	b510      	push	{r4, lr}
 801038e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010396:	4291      	cmp	r1, r2
 8010398:	d1f9      	bne.n	801038e <memcpy+0xe>
 801039a:	bd10      	pop	{r4, pc}

0801039c <_realloc_r>:
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	4680      	mov	r8, r0
 80103a2:	4615      	mov	r5, r2
 80103a4:	460c      	mov	r4, r1
 80103a6:	b921      	cbnz	r1, 80103b2 <_realloc_r+0x16>
 80103a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ac:	4611      	mov	r1, r2
 80103ae:	f7ff bb99 	b.w	800fae4 <_malloc_r>
 80103b2:	b92a      	cbnz	r2, 80103c0 <_realloc_r+0x24>
 80103b4:	f7ff fc9a 	bl	800fcec <_free_r>
 80103b8:	2400      	movs	r4, #0
 80103ba:	4620      	mov	r0, r4
 80103bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c0:	f000 f81a 	bl	80103f8 <_malloc_usable_size_r>
 80103c4:	4285      	cmp	r5, r0
 80103c6:	4606      	mov	r6, r0
 80103c8:	d802      	bhi.n	80103d0 <_realloc_r+0x34>
 80103ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80103ce:	d8f4      	bhi.n	80103ba <_realloc_r+0x1e>
 80103d0:	4629      	mov	r1, r5
 80103d2:	4640      	mov	r0, r8
 80103d4:	f7ff fb86 	bl	800fae4 <_malloc_r>
 80103d8:	4607      	mov	r7, r0
 80103da:	2800      	cmp	r0, #0
 80103dc:	d0ec      	beq.n	80103b8 <_realloc_r+0x1c>
 80103de:	42b5      	cmp	r5, r6
 80103e0:	462a      	mov	r2, r5
 80103e2:	4621      	mov	r1, r4
 80103e4:	bf28      	it	cs
 80103e6:	4632      	movcs	r2, r6
 80103e8:	f7ff ffca 	bl	8010380 <memcpy>
 80103ec:	4621      	mov	r1, r4
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7ff fc7c 	bl	800fcec <_free_r>
 80103f4:	463c      	mov	r4, r7
 80103f6:	e7e0      	b.n	80103ba <_realloc_r+0x1e>

080103f8 <_malloc_usable_size_r>:
 80103f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103fc:	1f18      	subs	r0, r3, #4
 80103fe:	2b00      	cmp	r3, #0
 8010400:	bfbc      	itt	lt
 8010402:	580b      	ldrlt	r3, [r1, r0]
 8010404:	18c0      	addlt	r0, r0, r3
 8010406:	4770      	bx	lr

08010408 <_init>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	bf00      	nop
 801040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801040e:	bc08      	pop	{r3}
 8010410:	469e      	mov	lr, r3
 8010412:	4770      	bx	lr

08010414 <_fini>:
 8010414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010416:	bf00      	nop
 8010418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801041a:	bc08      	pop	{r3}
 801041c:	469e      	mov	lr, r3
 801041e:	4770      	bx	lr
