
smart-watch_20_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005934  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08105bcc  08105bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08105bdc  08105bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08105be0  08105be0  00006be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08105be4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000158  10000010  08105bf4  00007010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000168  08105bf4  00007168  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014093  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000258e  00000000  00000000  0001b0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001240  00000000  00000000  0001d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e0b  00000000  00000000  0001e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00041e69  00000000  00000000  0001f6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015e00  00000000  00000000  0006151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001ba0f7  00000000  00000000  0007731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00231413  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e4c  00000000  00000000  00231458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006d  00000000  00000000  002362a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08105bb4 	.word	0x08105bb4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08105bb4 	.word	0x08105bb4

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1e      	ldr	r3, [pc, #120]	@ (8100388 <main+0x80>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100314:	4a1c      	ldr	r2, [pc, #112]	@ (8100388 <main+0x80>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810031e:	4b1a      	ldr	r3, [pc, #104]	@ (8100388 <main+0x80>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f001 ff5f 	bl	81021f0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f001 ffe9 	bl	8102308 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f001 ff6a 	bl	8102214 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b12      	ldr	r3, [pc, #72]	@ (810038c <main+0x84>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b10      	ldr	r3, [pc, #64]	@ (8100390 <main+0x88>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100354:	4a0e      	ldr	r2, [pc, #56]	@ (8100390 <main+0x88>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0b      	ldr	r3, [pc, #44]	@ (8100390 <main+0x88>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100366:	4a0a      	ldr	r2, [pc, #40]	@ (8100390 <main+0x88>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fb22 	bl	81009b8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8100374:	f000 f80e 	bl	8100394 <MX_ADC1_Init>
  MX_ADC3_Init();
 8100378:	f000 f890 	bl	810049c <MX_ADC3_Init>
  MX_RTC_Init();
 810037c:	f000 f8fc 	bl	8100578 <MX_RTC_Init>
  MX_TIM13_Init();
 8100380:	f000 f948 	bl	8100614 <MX_TIM13_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100384:	bf00      	nop
 8100386:	e7fd      	b.n	8100384 <main+0x7c>
 8100388:	58024400 	.word	0x58024400
 810038c:	e000ed00 	.word	0xe000ed00
 8100390:	58026400 	.word	0x58026400

08100394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100394:	b580      	push	{r7, lr}
 8100396:	b08a      	sub	sp, #40	@ 0x28
 8100398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810039a:	f107 031c 	add.w	r3, r7, #28
 810039e:	2200      	movs	r2, #0
 81003a0:	601a      	str	r2, [r3, #0]
 81003a2:	605a      	str	r2, [r3, #4]
 81003a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81003a6:	463b      	mov	r3, r7
 81003a8:	2200      	movs	r2, #0
 81003aa:	601a      	str	r2, [r3, #0]
 81003ac:	605a      	str	r2, [r3, #4]
 81003ae:	609a      	str	r2, [r3, #8]
 81003b0:	60da      	str	r2, [r3, #12]
 81003b2:	611a      	str	r2, [r3, #16]
 81003b4:	615a      	str	r2, [r3, #20]
 81003b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81003b8:	4b35      	ldr	r3, [pc, #212]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003ba:	4a36      	ldr	r2, [pc, #216]	@ (8100494 <MX_ADC1_Init+0x100>)
 81003bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81003be:	4b34      	ldr	r3, [pc, #208]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003c0:	2200      	movs	r2, #0
 81003c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81003c4:	4b32      	ldr	r3, [pc, #200]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003c6:	2204      	movs	r2, #4
 81003c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81003ca:	4b31      	ldr	r3, [pc, #196]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003cc:	2200      	movs	r2, #0
 81003ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81003d0:	4b2f      	ldr	r3, [pc, #188]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003d2:	2200      	movs	r2, #0
 81003d4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81003d6:	4b2e      	ldr	r3, [pc, #184]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003d8:	2201      	movs	r2, #1
 81003da:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81003dc:	4b2c      	ldr	r3, [pc, #176]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003de:	2200      	movs	r2, #0
 81003e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81003e2:	4b2b      	ldr	r3, [pc, #172]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003e4:	2200      	movs	r2, #0
 81003e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81003e8:	4b29      	ldr	r3, [pc, #164]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003ea:	2200      	movs	r2, #0
 81003ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81003ee:	4b28      	ldr	r3, [pc, #160]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003f0:	2200      	movs	r2, #0
 81003f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81003f4:	4b26      	ldr	r3, [pc, #152]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003f6:	2200      	movs	r2, #0
 81003f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81003fa:	4b25      	ldr	r3, [pc, #148]	@ (8100490 <MX_ADC1_Init+0xfc>)
 81003fc:	2200      	movs	r2, #0
 81003fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100400:	4b23      	ldr	r3, [pc, #140]	@ (8100490 <MX_ADC1_Init+0xfc>)
 8100402:	2200      	movs	r2, #0
 8100404:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8100408:	4b21      	ldr	r3, [pc, #132]	@ (8100490 <MX_ADC1_Init+0xfc>)
 810040a:	2201      	movs	r2, #1
 810040c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810040e:	4820      	ldr	r0, [pc, #128]	@ (8100490 <MX_ADC1_Init+0xfc>)
 8100410:	f000 fd34 	bl	8100e7c <HAL_ADC_Init>
 8100414:	4603      	mov	r3, r0
 8100416:	2b00      	cmp	r3, #0
 8100418:	d001      	beq.n	810041e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 810041a:	f000 f943 	bl	81006a4 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810041e:	4b1c      	ldr	r3, [pc, #112]	@ (8100490 <MX_ADC1_Init+0xfc>)
 8100420:	2200      	movs	r2, #0
 8100422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100424:	4b1a      	ldr	r3, [pc, #104]	@ (8100490 <MX_ADC1_Init+0xfc>)
 8100426:	2200      	movs	r2, #0
 8100428:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810042a:	4819      	ldr	r0, [pc, #100]	@ (8100490 <MX_ADC1_Init+0xfc>)
 810042c:	f000 fd26 	bl	8100e7c <HAL_ADC_Init>
 8100430:	4603      	mov	r3, r0
 8100432:	2b00      	cmp	r3, #0
 8100434:	d001      	beq.n	810043a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8100436:	f000 f935 	bl	81006a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810043a:	2300      	movs	r3, #0
 810043c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810043e:	f107 031c 	add.w	r3, r7, #28
 8100442:	4619      	mov	r1, r3
 8100444:	4812      	ldr	r0, [pc, #72]	@ (8100490 <MX_ADC1_Init+0xfc>)
 8100446:	f001 fb49 	bl	8101adc <HAL_ADCEx_MultiModeConfigChannel>
 810044a:	4603      	mov	r3, r0
 810044c:	2b00      	cmp	r3, #0
 810044e:	d001      	beq.n	8100454 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8100450:	f000 f928 	bl	81006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100454:	4b10      	ldr	r3, [pc, #64]	@ (8100498 <MX_ADC1_Init+0x104>)
 8100456:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100458:	2306      	movs	r3, #6
 810045a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810045c:	2300      	movs	r3, #0
 810045e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100460:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100464:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100466:	2304      	movs	r3, #4
 8100468:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810046a:	2300      	movs	r3, #0
 810046c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810046e:	2300      	movs	r3, #0
 8100470:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100472:	463b      	mov	r3, r7
 8100474:	4619      	mov	r1, r3
 8100476:	4806      	ldr	r0, [pc, #24]	@ (8100490 <MX_ADC1_Init+0xfc>)
 8100478:	f000 fea2 	bl	81011c0 <HAL_ADC_ConfigChannel>
 810047c:	4603      	mov	r3, r0
 810047e:	2b00      	cmp	r3, #0
 8100480:	d001      	beq.n	8100486 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8100482:	f000 f90f 	bl	81006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100486:	bf00      	nop
 8100488:	3728      	adds	r7, #40	@ 0x28
 810048a:	46bd      	mov	sp, r7
 810048c:	bd80      	pop	{r7, pc}
 810048e:	bf00      	nop
 8100490:	1000002c 	.word	0x1000002c
 8100494:	40022000 	.word	0x40022000
 8100498:	04300002 	.word	0x04300002

0810049c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 810049c:	b580      	push	{r7, lr}
 810049e:	b088      	sub	sp, #32
 81004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81004a2:	1d3b      	adds	r3, r7, #4
 81004a4:	2200      	movs	r2, #0
 81004a6:	601a      	str	r2, [r3, #0]
 81004a8:	605a      	str	r2, [r3, #4]
 81004aa:	609a      	str	r2, [r3, #8]
 81004ac:	60da      	str	r2, [r3, #12]
 81004ae:	611a      	str	r2, [r3, #16]
 81004b0:	615a      	str	r2, [r3, #20]
 81004b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 81004b4:	4b2e      	ldr	r3, [pc, #184]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004b6:	4a2f      	ldr	r2, [pc, #188]	@ (8100574 <MX_ADC3_Init+0xd8>)
 81004b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81004ba:	4b2d      	ldr	r3, [pc, #180]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004bc:	2200      	movs	r2, #0
 81004be:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81004c0:	4b2b      	ldr	r3, [pc, #172]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004c2:	2200      	movs	r2, #0
 81004c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81004c6:	4b2a      	ldr	r3, [pc, #168]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004c8:	2204      	movs	r2, #4
 81004ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 81004cc:	4b28      	ldr	r3, [pc, #160]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004ce:	2200      	movs	r2, #0
 81004d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 81004d2:	4b27      	ldr	r3, [pc, #156]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004d4:	2200      	movs	r2, #0
 81004d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 81004d8:	4b25      	ldr	r3, [pc, #148]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004da:	2201      	movs	r2, #1
 81004dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 81004de:	4b24      	ldr	r3, [pc, #144]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004e0:	2200      	movs	r2, #0
 81004e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81004e4:	4b22      	ldr	r3, [pc, #136]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004e6:	2200      	movs	r2, #0
 81004e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81004ea:	4b21      	ldr	r3, [pc, #132]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004ec:	2200      	movs	r2, #0
 81004ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004f2:	2200      	movs	r2, #0
 81004f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81004f6:	4b1e      	ldr	r3, [pc, #120]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004f8:	2200      	movs	r2, #0
 81004fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81004fc:	4b1c      	ldr	r3, [pc, #112]	@ (8100570 <MX_ADC3_Init+0xd4>)
 81004fe:	2200      	movs	r2, #0
 8100500:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100502:	4b1b      	ldr	r3, [pc, #108]	@ (8100570 <MX_ADC3_Init+0xd4>)
 8100504:	2200      	movs	r2, #0
 8100506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 810050a:	4b19      	ldr	r3, [pc, #100]	@ (8100570 <MX_ADC3_Init+0xd4>)
 810050c:	2201      	movs	r2, #1
 810050e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100510:	4817      	ldr	r0, [pc, #92]	@ (8100570 <MX_ADC3_Init+0xd4>)
 8100512:	f000 fcb3 	bl	8100e7c <HAL_ADC_Init>
 8100516:	4603      	mov	r3, r0
 8100518:	2b00      	cmp	r3, #0
 810051a:	d001      	beq.n	8100520 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 810051c:	f000 f8c2 	bl	81006a4 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8100520:	4b13      	ldr	r3, [pc, #76]	@ (8100570 <MX_ADC3_Init+0xd4>)
 8100522:	2200      	movs	r2, #0
 8100524:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100526:	4812      	ldr	r0, [pc, #72]	@ (8100570 <MX_ADC3_Init+0xd4>)
 8100528:	f000 fca8 	bl	8100e7c <HAL_ADC_Init>
 810052c:	4603      	mov	r3, r0
 810052e:	2b00      	cmp	r3, #0
 8100530:	d001      	beq.n	8100536 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8100532:	f000 f8b7 	bl	81006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100536:	2301      	movs	r3, #1
 8100538:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810053a:	2306      	movs	r3, #6
 810053c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810053e:	2300      	movs	r3, #0
 8100540:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100542:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100546:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100548:	2304      	movs	r3, #4
 810054a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 810054c:	2300      	movs	r3, #0
 810054e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100550:	2300      	movs	r3, #0
 8100552:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8100554:	1d3b      	adds	r3, r7, #4
 8100556:	4619      	mov	r1, r3
 8100558:	4805      	ldr	r0, [pc, #20]	@ (8100570 <MX_ADC3_Init+0xd4>)
 810055a:	f000 fe31 	bl	81011c0 <HAL_ADC_ConfigChannel>
 810055e:	4603      	mov	r3, r0
 8100560:	2b00      	cmp	r3, #0
 8100562:	d001      	beq.n	8100568 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8100564:	f000 f89e 	bl	81006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8100568:	bf00      	nop
 810056a:	3720      	adds	r7, #32
 810056c:	46bd      	mov	sp, r7
 810056e:	bd80      	pop	{r7, pc}
 8100570:	10000090 	.word	0x10000090
 8100574:	58026000 	.word	0x58026000

08100578 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100578:	b580      	push	{r7, lr}
 810057a:	b08a      	sub	sp, #40	@ 0x28
 810057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 810057e:	463b      	mov	r3, r7
 8100580:	2228      	movs	r2, #40	@ 0x28
 8100582:	2100      	movs	r1, #0
 8100584:	4618      	mov	r0, r3
 8100586:	f005 fae9 	bl	8105b5c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 810058a:	4b20      	ldr	r3, [pc, #128]	@ (810060c <MX_RTC_Init+0x94>)
 810058c:	4a20      	ldr	r2, [pc, #128]	@ (8100610 <MX_RTC_Init+0x98>)
 810058e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100590:	4b1e      	ldr	r3, [pc, #120]	@ (810060c <MX_RTC_Init+0x94>)
 8100592:	2200      	movs	r2, #0
 8100594:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100596:	4b1d      	ldr	r3, [pc, #116]	@ (810060c <MX_RTC_Init+0x94>)
 8100598:	227f      	movs	r2, #127	@ 0x7f
 810059a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 810059c:	4b1b      	ldr	r3, [pc, #108]	@ (810060c <MX_RTC_Init+0x94>)
 810059e:	22ff      	movs	r2, #255	@ 0xff
 81005a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 81005a2:	4b1a      	ldr	r3, [pc, #104]	@ (810060c <MX_RTC_Init+0x94>)
 81005a4:	2200      	movs	r2, #0
 81005a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 81005a8:	4b18      	ldr	r3, [pc, #96]	@ (810060c <MX_RTC_Init+0x94>)
 81005aa:	2200      	movs	r2, #0
 81005ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 81005ae:	4b17      	ldr	r3, [pc, #92]	@ (810060c <MX_RTC_Init+0x94>)
 81005b0:	2200      	movs	r2, #0
 81005b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81005b4:	4b15      	ldr	r3, [pc, #84]	@ (810060c <MX_RTC_Init+0x94>)
 81005b6:	2200      	movs	r2, #0
 81005b8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 81005ba:	4814      	ldr	r0, [pc, #80]	@ (810060c <MX_RTC_Init+0x94>)
 81005bc:	f004 fdb2 	bl	8105124 <HAL_RTC_Init>
 81005c0:	4603      	mov	r3, r0
 81005c2:	2b00      	cmp	r3, #0
 81005c4:	d001      	beq.n	81005ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 81005c6:	f000 f86d 	bl	81006a4 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 81005ca:	2301      	movs	r3, #1
 81005cc:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 81005ce:	2301      	movs	r3, #1
 81005d0:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 81005d2:	2300      	movs	r3, #0
 81005d4:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 81005d6:	2300      	movs	r3, #0
 81005d8:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 81005da:	2300      	movs	r3, #0
 81005dc:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 81005de:	2300      	movs	r3, #0
 81005e0:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 81005e2:	2300      	movs	r3, #0
 81005e4:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 81005e6:	2300      	movs	r3, #0
 81005e8:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 81005ea:	2380      	movs	r3, #128	@ 0x80
 81005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 81005ee:	463b      	mov	r3, r7
 81005f0:	4619      	mov	r1, r3
 81005f2:	4806      	ldr	r0, [pc, #24]	@ (810060c <MX_RTC_Init+0x94>)
 81005f4:	f004 feae 	bl	8105354 <HAL_RTCEx_SetTamper>
 81005f8:	4603      	mov	r3, r0
 81005fa:	2b00      	cmp	r3, #0
 81005fc:	d001      	beq.n	8100602 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 81005fe:	f000 f851 	bl	81006a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100602:	bf00      	nop
 8100604:	3728      	adds	r7, #40	@ 0x28
 8100606:	46bd      	mov	sp, r7
 8100608:	bd80      	pop	{r7, pc}
 810060a:	bf00      	nop
 810060c:	100000f4 	.word	0x100000f4
 8100610:	58004000 	.word	0x58004000

08100614 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100614:	b580      	push	{r7, lr}
 8100616:	b084      	sub	sp, #16
 8100618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 810061a:	463b      	mov	r3, r7
 810061c:	2200      	movs	r2, #0
 810061e:	601a      	str	r2, [r3, #0]
 8100620:	605a      	str	r2, [r3, #4]
 8100622:	609a      	str	r2, [r3, #8]
 8100624:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100626:	4b1d      	ldr	r3, [pc, #116]	@ (810069c <MX_TIM13_Init+0x88>)
 8100628:	4a1d      	ldr	r2, [pc, #116]	@ (81006a0 <MX_TIM13_Init+0x8c>)
 810062a:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 810062c:	4b1b      	ldr	r3, [pc, #108]	@ (810069c <MX_TIM13_Init+0x88>)
 810062e:	2200      	movs	r2, #0
 8100630:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100632:	4b1a      	ldr	r3, [pc, #104]	@ (810069c <MX_TIM13_Init+0x88>)
 8100634:	2200      	movs	r2, #0
 8100636:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100638:	4b18      	ldr	r3, [pc, #96]	@ (810069c <MX_TIM13_Init+0x88>)
 810063a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810063e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100640:	4b16      	ldr	r3, [pc, #88]	@ (810069c <MX_TIM13_Init+0x88>)
 8100642:	2200      	movs	r2, #0
 8100644:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100646:	4b15      	ldr	r3, [pc, #84]	@ (810069c <MX_TIM13_Init+0x88>)
 8100648:	2200      	movs	r2, #0
 810064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 810064c:	4813      	ldr	r0, [pc, #76]	@ (810069c <MX_TIM13_Init+0x88>)
 810064e:	f004 ff60 	bl	8105512 <HAL_TIM_Base_Init>
 8100652:	4603      	mov	r3, r0
 8100654:	2b00      	cmp	r3, #0
 8100656:	d001      	beq.n	810065c <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8100658:	f000 f824 	bl	81006a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 810065c:	480f      	ldr	r0, [pc, #60]	@ (810069c <MX_TIM13_Init+0x88>)
 810065e:	f004 ffaf 	bl	81055c0 <HAL_TIM_IC_Init>
 8100662:	4603      	mov	r3, r0
 8100664:	2b00      	cmp	r3, #0
 8100666:	d001      	beq.n	810066c <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8100668:	f000 f81c 	bl	81006a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 810066c:	2300      	movs	r3, #0
 810066e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100670:	2301      	movs	r3, #1
 8100672:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100674:	2300      	movs	r3, #0
 8100676:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100678:	2300      	movs	r3, #0
 810067a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 810067c:	463b      	mov	r3, r7
 810067e:	2200      	movs	r2, #0
 8100680:	4619      	mov	r1, r3
 8100682:	4806      	ldr	r0, [pc, #24]	@ (810069c <MX_TIM13_Init+0x88>)
 8100684:	f004 fffd 	bl	8105682 <HAL_TIM_IC_ConfigChannel>
 8100688:	4603      	mov	r3, r0
 810068a:	2b00      	cmp	r3, #0
 810068c:	d001      	beq.n	8100692 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 810068e:	f000 f809 	bl	81006a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100692:	bf00      	nop
 8100694:	3710      	adds	r7, #16
 8100696:	46bd      	mov	sp, r7
 8100698:	bd80      	pop	{r7, pc}
 810069a:	bf00      	nop
 810069c:	10000118 	.word	0x10000118
 81006a0:	40001c00 	.word	0x40001c00

081006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81006a4:	b480      	push	{r7}
 81006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81006a8:	b672      	cpsid	i
}
 81006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81006ac:	bf00      	nop
 81006ae:	e7fd      	b.n	81006ac <Error_Handler+0x8>

081006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81006b0:	b480      	push	{r7}
 81006b2:	b083      	sub	sp, #12
 81006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81006b6:	4b0a      	ldr	r3, [pc, #40]	@ (81006e0 <HAL_MspInit+0x30>)
 81006b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81006bc:	4a08      	ldr	r2, [pc, #32]	@ (81006e0 <HAL_MspInit+0x30>)
 81006be:	f043 0302 	orr.w	r3, r3, #2
 81006c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81006c6:	4b06      	ldr	r3, [pc, #24]	@ (81006e0 <HAL_MspInit+0x30>)
 81006c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81006cc:	f003 0302 	and.w	r3, r3, #2
 81006d0:	607b      	str	r3, [r7, #4]
 81006d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81006d4:	bf00      	nop
 81006d6:	370c      	adds	r7, #12
 81006d8:	46bd      	mov	sp, r7
 81006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006de:	4770      	bx	lr
 81006e0:	58024400 	.word	0x58024400

081006e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81006e4:	b580      	push	{r7, lr}
 81006e6:	b08c      	sub	sp, #48	@ 0x30
 81006e8:	af00      	add	r7, sp, #0
 81006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81006ec:	f107 031c 	add.w	r3, r7, #28
 81006f0:	2200      	movs	r2, #0
 81006f2:	601a      	str	r2, [r3, #0]
 81006f4:	605a      	str	r2, [r3, #4]
 81006f6:	609a      	str	r2, [r3, #8]
 81006f8:	60da      	str	r2, [r3, #12]
 81006fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 81006fc:	687b      	ldr	r3, [r7, #4]
 81006fe:	681b      	ldr	r3, [r3, #0]
 8100700:	4a3e      	ldr	r2, [pc, #248]	@ (81007fc <HAL_ADC_MspInit+0x118>)
 8100702:	4293      	cmp	r3, r2
 8100704:	d12a      	bne.n	810075c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100706:	4b3e      	ldr	r3, [pc, #248]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810070c:	4a3c      	ldr	r2, [pc, #240]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 810070e:	f043 0320 	orr.w	r3, r3, #32
 8100712:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100716:	4b3a      	ldr	r3, [pc, #232]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810071c:	f003 0320 	and.w	r3, r3, #32
 8100720:	61bb      	str	r3, [r7, #24]
 8100722:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100724:	4b36      	ldr	r3, [pc, #216]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810072a:	4a35      	ldr	r2, [pc, #212]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 810072c:	f043 0301 	orr.w	r3, r3, #1
 8100730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100734:	4b32      	ldr	r3, [pc, #200]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810073a:	f003 0301 	and.w	r3, r3, #1
 810073e:	617b      	str	r3, [r7, #20]
 8100740:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100742:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8100746:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 810074a:	f000 f9f5 	bl	8100b38 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810074e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8100752:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8100756:	f000 f9ef 	bl	8100b38 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 810075a:	e04a      	b.n	81007f2 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 810075c:	687b      	ldr	r3, [r7, #4]
 810075e:	681b      	ldr	r3, [r3, #0]
 8100760:	4a28      	ldr	r2, [pc, #160]	@ (8100804 <HAL_ADC_MspInit+0x120>)
 8100762:	4293      	cmp	r3, r2
 8100764:	d145      	bne.n	81007f2 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8100766:	4b26      	ldr	r3, [pc, #152]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810076c:	4a24      	ldr	r2, [pc, #144]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 810076e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8100772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100776:	4b22      	ldr	r3, [pc, #136]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810077c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8100780:	613b      	str	r3, [r7, #16]
 8100782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100784:	4b1e      	ldr	r3, [pc, #120]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810078a:	4a1d      	ldr	r2, [pc, #116]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 810078c:	f043 0320 	orr.w	r3, r3, #32
 8100790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100794:	4b1a      	ldr	r3, [pc, #104]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 8100796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810079a:	f003 0320 	and.w	r3, r3, #32
 810079e:	60fb      	str	r3, [r7, #12]
 81007a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81007a2:	4b17      	ldr	r3, [pc, #92]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 81007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007a8:	4a15      	ldr	r2, [pc, #84]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 81007aa:	f043 0304 	orr.w	r3, r3, #4
 81007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007b2:	4b13      	ldr	r3, [pc, #76]	@ (8100800 <HAL_ADC_MspInit+0x11c>)
 81007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007b8:	f003 0304 	and.w	r3, r3, #4
 81007bc:	60bb      	str	r3, [r7, #8]
 81007be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81007c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81007c6:	2303      	movs	r3, #3
 81007c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007ca:	2300      	movs	r3, #0
 81007cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81007ce:	f107 031c 	add.w	r3, r7, #28
 81007d2:	4619      	mov	r1, r3
 81007d4:	480c      	ldr	r0, [pc, #48]	@ (8100808 <HAL_ADC_MspInit+0x124>)
 81007d6:	f001 fb5b 	bl	8101e90 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81007da:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81007de:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81007e2:	f000 f9a9 	bl	8100b38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81007e6:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81007ea:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81007ee:	f000 f9a3 	bl	8100b38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 81007f2:	bf00      	nop
 81007f4:	3730      	adds	r7, #48	@ 0x30
 81007f6:	46bd      	mov	sp, r7
 81007f8:	bd80      	pop	{r7, pc}
 81007fa:	bf00      	nop
 81007fc:	40022000 	.word	0x40022000
 8100800:	58024400 	.word	0x58024400
 8100804:	58026000 	.word	0x58026000
 8100808:	58021400 	.word	0x58021400

0810080c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 810080c:	b580      	push	{r7, lr}
 810080e:	b0b4      	sub	sp, #208	@ 0xd0
 8100810:	af00      	add	r7, sp, #0
 8100812:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100814:	f107 0308 	add.w	r3, r7, #8
 8100818:	22c8      	movs	r2, #200	@ 0xc8
 810081a:	2100      	movs	r1, #0
 810081c:	4618      	mov	r0, r3
 810081e:	f005 f99d 	bl	8105b5c <memset>
  if(hrtc->Instance==RTC)
 8100822:	687b      	ldr	r3, [r7, #4]
 8100824:	681b      	ldr	r3, [r3, #0]
 8100826:	4a10      	ldr	r2, [pc, #64]	@ (8100868 <HAL_RTC_MspInit+0x5c>)
 8100828:	4293      	cmp	r3, r2
 810082a:	d119      	bne.n	8100860 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 810082c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100830:	f04f 0300 	mov.w	r3, #0
 8100834:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100838:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810083c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100840:	f107 0308 	add.w	r3, r7, #8
 8100844:	4618      	mov	r0, r3
 8100846:	f001 ff2f 	bl	81026a8 <HAL_RCCEx_PeriphCLKConfig>
 810084a:	4603      	mov	r3, r0
 810084c:	2b00      	cmp	r3, #0
 810084e:	d001      	beq.n	8100854 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8100850:	f7ff ff28 	bl	81006a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100854:	4b05      	ldr	r3, [pc, #20]	@ (810086c <HAL_RTC_MspInit+0x60>)
 8100856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8100858:	4a04      	ldr	r2, [pc, #16]	@ (810086c <HAL_RTC_MspInit+0x60>)
 810085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810085e:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8100860:	bf00      	nop
 8100862:	37d0      	adds	r7, #208	@ 0xd0
 8100864:	46bd      	mov	sp, r7
 8100866:	bd80      	pop	{r7, pc}
 8100868:	58004000 	.word	0x58004000
 810086c:	58024400 	.word	0x58024400

08100870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100870:	b580      	push	{r7, lr}
 8100872:	b08a      	sub	sp, #40	@ 0x28
 8100874:	af00      	add	r7, sp, #0
 8100876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100878:	f107 0314 	add.w	r3, r7, #20
 810087c:	2200      	movs	r2, #0
 810087e:	601a      	str	r2, [r3, #0]
 8100880:	605a      	str	r2, [r3, #4]
 8100882:	609a      	str	r2, [r3, #8]
 8100884:	60da      	str	r2, [r3, #12]
 8100886:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8100888:	687b      	ldr	r3, [r7, #4]
 810088a:	681b      	ldr	r3, [r3, #0]
 810088c:	4a1a      	ldr	r2, [pc, #104]	@ (81008f8 <HAL_TIM_Base_MspInit+0x88>)
 810088e:	4293      	cmp	r3, r2
 8100890:	d12e      	bne.n	81008f0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8100892:	4b1a      	ldr	r3, [pc, #104]	@ (81008fc <HAL_TIM_Base_MspInit+0x8c>)
 8100894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100898:	4a18      	ldr	r2, [pc, #96]	@ (81008fc <HAL_TIM_Base_MspInit+0x8c>)
 810089a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810089e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81008a2:	4b16      	ldr	r3, [pc, #88]	@ (81008fc <HAL_TIM_Base_MspInit+0x8c>)
 81008a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81008a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81008ac:	613b      	str	r3, [r7, #16]
 81008ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81008b0:	4b12      	ldr	r3, [pc, #72]	@ (81008fc <HAL_TIM_Base_MspInit+0x8c>)
 81008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008b6:	4a11      	ldr	r2, [pc, #68]	@ (81008fc <HAL_TIM_Base_MspInit+0x8c>)
 81008b8:	f043 0320 	orr.w	r3, r3, #32
 81008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008c0:	4b0e      	ldr	r3, [pc, #56]	@ (81008fc <HAL_TIM_Base_MspInit+0x8c>)
 81008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008c6:	f003 0320 	and.w	r3, r3, #32
 81008ca:	60fb      	str	r3, [r7, #12]
 81008cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 81008ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008d4:	2302      	movs	r3, #2
 81008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008d8:	2300      	movs	r3, #0
 81008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008dc:	2300      	movs	r3, #0
 81008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 81008e0:	2309      	movs	r3, #9
 81008e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 81008e4:	f107 0314 	add.w	r3, r7, #20
 81008e8:	4619      	mov	r1, r3
 81008ea:	4805      	ldr	r0, [pc, #20]	@ (8100900 <HAL_TIM_Base_MspInit+0x90>)
 81008ec:	f001 fad0 	bl	8101e90 <HAL_GPIO_Init>

  /* USER CODE END TIM13_MspInit 1 */

  }

}
 81008f0:	bf00      	nop
 81008f2:	3728      	adds	r7, #40	@ 0x28
 81008f4:	46bd      	mov	sp, r7
 81008f6:	bd80      	pop	{r7, pc}
 81008f8:	40001c00 	.word	0x40001c00
 81008fc:	58024400 	.word	0x58024400
 8100900:	58021400 	.word	0x58021400

08100904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100904:	b480      	push	{r7}
 8100906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100908:	bf00      	nop
 810090a:	e7fd      	b.n	8100908 <NMI_Handler+0x4>

0810090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810090c:	b480      	push	{r7}
 810090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100910:	bf00      	nop
 8100912:	e7fd      	b.n	8100910 <HardFault_Handler+0x4>

08100914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100914:	b480      	push	{r7}
 8100916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100918:	bf00      	nop
 810091a:	e7fd      	b.n	8100918 <MemManage_Handler+0x4>

0810091c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810091c:	b480      	push	{r7}
 810091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100920:	bf00      	nop
 8100922:	e7fd      	b.n	8100920 <BusFault_Handler+0x4>

08100924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100924:	b480      	push	{r7}
 8100926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100928:	bf00      	nop
 810092a:	e7fd      	b.n	8100928 <UsageFault_Handler+0x4>

0810092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810092c:	b480      	push	{r7}
 810092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100930:	bf00      	nop
 8100932:	46bd      	mov	sp, r7
 8100934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100938:	4770      	bx	lr

0810093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810093a:	b480      	push	{r7}
 810093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810093e:	bf00      	nop
 8100940:	46bd      	mov	sp, r7
 8100942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100946:	4770      	bx	lr

08100948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100948:	b480      	push	{r7}
 810094a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810094c:	bf00      	nop
 810094e:	46bd      	mov	sp, r7
 8100950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100954:	4770      	bx	lr

08100956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100956:	b580      	push	{r7, lr}
 8100958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810095a:	f000 f8c1 	bl	8100ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810095e:	bf00      	nop
 8100960:	bd80      	pop	{r7, pc}
	...

08100964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810099c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100968:	f7ff fcb6 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810096c:	480c      	ldr	r0, [pc, #48]	@ (81009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810096e:	490d      	ldr	r1, [pc, #52]	@ (81009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100970:	4a0d      	ldr	r2, [pc, #52]	@ (81009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100974:	e002      	b.n	810097c <LoopCopyDataInit>

08100976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810097a:	3304      	adds	r3, #4

0810097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100980:	d3f9      	bcc.n	8100976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100982:	4a0a      	ldr	r2, [pc, #40]	@ (81009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100984:	4c0a      	ldr	r4, [pc, #40]	@ (81009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100988:	e001      	b.n	810098e <LoopFillZerobss>

0810098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810098c:	3204      	adds	r2, #4

0810098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100990:	d3fb      	bcc.n	810098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100992:	f005 f8eb 	bl	8105b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100996:	f7ff fcb7 	bl	8100308 <main>
  bx  lr
 810099a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810099c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81009a0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81009a4:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81009a8:	08105be4 	.word	0x08105be4
  ldr r2, =_sbss
 81009ac:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81009b0:	10000168 	.word	0x10000168

081009b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81009b4:	e7fe      	b.n	81009b4 <ADC3_IRQHandler>
	...

081009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81009b8:	b580      	push	{r7, lr}
 81009ba:	b082      	sub	sp, #8
 81009bc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81009be:	4b28      	ldr	r3, [pc, #160]	@ (8100a60 <HAL_Init+0xa8>)
 81009c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009c4:	4a26      	ldr	r2, [pc, #152]	@ (8100a60 <HAL_Init+0xa8>)
 81009c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81009ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81009ce:	4b24      	ldr	r3, [pc, #144]	@ (8100a60 <HAL_Init+0xa8>)
 81009d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81009d8:	603b      	str	r3, [r7, #0]
 81009da:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81009dc:	4b21      	ldr	r3, [pc, #132]	@ (8100a64 <HAL_Init+0xac>)
 81009de:	681b      	ldr	r3, [r3, #0]
 81009e0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81009e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81009e8:	4a1e      	ldr	r2, [pc, #120]	@ (8100a64 <HAL_Init+0xac>)
 81009ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81009ee:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8100a64 <HAL_Init+0xac>)
 81009f2:	681b      	ldr	r3, [r3, #0]
 81009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8100a64 <HAL_Init+0xac>)
 81009f6:	f043 0301 	orr.w	r3, r3, #1
 81009fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009fc:	2003      	movs	r0, #3
 81009fe:	f001 fa01 	bl	8101e04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100a02:	f001 fc8f 	bl	8102324 <HAL_RCC_GetSysClockFreq>
 8100a06:	4602      	mov	r2, r0
 8100a08:	4b15      	ldr	r3, [pc, #84]	@ (8100a60 <HAL_Init+0xa8>)
 8100a0a:	699b      	ldr	r3, [r3, #24]
 8100a0c:	0a1b      	lsrs	r3, r3, #8
 8100a0e:	f003 030f 	and.w	r3, r3, #15
 8100a12:	4915      	ldr	r1, [pc, #84]	@ (8100a68 <HAL_Init+0xb0>)
 8100a14:	5ccb      	ldrb	r3, [r1, r3]
 8100a16:	f003 031f 	and.w	r3, r3, #31
 8100a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8100a1e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a20:	4b0f      	ldr	r3, [pc, #60]	@ (8100a60 <HAL_Init+0xa8>)
 8100a22:	699b      	ldr	r3, [r3, #24]
 8100a24:	f003 030f 	and.w	r3, r3, #15
 8100a28:	4a0f      	ldr	r2, [pc, #60]	@ (8100a68 <HAL_Init+0xb0>)
 8100a2a:	5cd3      	ldrb	r3, [r2, r3]
 8100a2c:	f003 031f 	and.w	r3, r3, #31
 8100a30:	687a      	ldr	r2, [r7, #4]
 8100a32:	fa22 f303 	lsr.w	r3, r2, r3
 8100a36:	4a0d      	ldr	r2, [pc, #52]	@ (8100a6c <HAL_Init+0xb4>)
 8100a38:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8100a6c <HAL_Init+0xb4>)
 8100a3c:	681b      	ldr	r3, [r3, #0]
 8100a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8100a70 <HAL_Init+0xb8>)
 8100a40:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a42:	2000      	movs	r0, #0
 8100a44:	f000 f816 	bl	8100a74 <HAL_InitTick>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d001      	beq.n	8100a52 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a4e:	2301      	movs	r3, #1
 8100a50:	e002      	b.n	8100a58 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a52:	f7ff fe2d 	bl	81006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a56:	2300      	movs	r3, #0
}
 8100a58:	4618      	mov	r0, r3
 8100a5a:	3708      	adds	r7, #8
 8100a5c:	46bd      	mov	sp, r7
 8100a5e:	bd80      	pop	{r7, pc}
 8100a60:	58024400 	.word	0x58024400
 8100a64:	40024400 	.word	0x40024400
 8100a68:	08105bcc 	.word	0x08105bcc
 8100a6c:	10000004 	.word	0x10000004
 8100a70:	10000000 	.word	0x10000000

08100a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a74:	b580      	push	{r7, lr}
 8100a76:	b082      	sub	sp, #8
 8100a78:	af00      	add	r7, sp, #0
 8100a7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a7c:	4b15      	ldr	r3, [pc, #84]	@ (8100ad4 <HAL_InitTick+0x60>)
 8100a7e:	781b      	ldrb	r3, [r3, #0]
 8100a80:	2b00      	cmp	r3, #0
 8100a82:	d101      	bne.n	8100a88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a84:	2301      	movs	r3, #1
 8100a86:	e021      	b.n	8100acc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a88:	4b13      	ldr	r3, [pc, #76]	@ (8100ad8 <HAL_InitTick+0x64>)
 8100a8a:	681a      	ldr	r2, [r3, #0]
 8100a8c:	4b11      	ldr	r3, [pc, #68]	@ (8100ad4 <HAL_InitTick+0x60>)
 8100a8e:	781b      	ldrb	r3, [r3, #0]
 8100a90:	4619      	mov	r1, r3
 8100a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a9e:	4618      	mov	r0, r3
 8100aa0:	f001 f9d5 	bl	8101e4e <HAL_SYSTICK_Config>
 8100aa4:	4603      	mov	r3, r0
 8100aa6:	2b00      	cmp	r3, #0
 8100aa8:	d001      	beq.n	8100aae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100aaa:	2301      	movs	r3, #1
 8100aac:	e00e      	b.n	8100acc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	2b0f      	cmp	r3, #15
 8100ab2:	d80a      	bhi.n	8100aca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100ab4:	2200      	movs	r2, #0
 8100ab6:	6879      	ldr	r1, [r7, #4]
 8100ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8100abc:	f001 f9ad 	bl	8101e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ac0:	4a06      	ldr	r2, [pc, #24]	@ (8100adc <HAL_InitTick+0x68>)
 8100ac2:	687b      	ldr	r3, [r7, #4]
 8100ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100ac6:	2300      	movs	r3, #0
 8100ac8:	e000      	b.n	8100acc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100aca:	2301      	movs	r3, #1
}
 8100acc:	4618      	mov	r0, r3
 8100ace:	3708      	adds	r7, #8
 8100ad0:	46bd      	mov	sp, r7
 8100ad2:	bd80      	pop	{r7, pc}
 8100ad4:	1000000c 	.word	0x1000000c
 8100ad8:	10000000 	.word	0x10000000
 8100adc:	10000008 	.word	0x10000008

08100ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ae0:	b480      	push	{r7}
 8100ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100ae4:	4b06      	ldr	r3, [pc, #24]	@ (8100b00 <HAL_IncTick+0x20>)
 8100ae6:	781b      	ldrb	r3, [r3, #0]
 8100ae8:	461a      	mov	r2, r3
 8100aea:	4b06      	ldr	r3, [pc, #24]	@ (8100b04 <HAL_IncTick+0x24>)
 8100aec:	681b      	ldr	r3, [r3, #0]
 8100aee:	4413      	add	r3, r2
 8100af0:	4a04      	ldr	r2, [pc, #16]	@ (8100b04 <HAL_IncTick+0x24>)
 8100af2:	6013      	str	r3, [r2, #0]
}
 8100af4:	bf00      	nop
 8100af6:	46bd      	mov	sp, r7
 8100af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop
 8100b00:	1000000c 	.word	0x1000000c
 8100b04:	10000164 	.word	0x10000164

08100b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b08:	b480      	push	{r7}
 8100b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8100b0c:	4b03      	ldr	r3, [pc, #12]	@ (8100b1c <HAL_GetTick+0x14>)
 8100b0e:	681b      	ldr	r3, [r3, #0]
}
 8100b10:	4618      	mov	r0, r3
 8100b12:	46bd      	mov	sp, r7
 8100b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b18:	4770      	bx	lr
 8100b1a:	bf00      	nop
 8100b1c:	10000164 	.word	0x10000164

08100b20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8100b20:	b480      	push	{r7}
 8100b22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8100b24:	4b03      	ldr	r3, [pc, #12]	@ (8100b34 <HAL_GetREVID+0x14>)
 8100b26:	681b      	ldr	r3, [r3, #0]
 8100b28:	0c1b      	lsrs	r3, r3, #16
}
 8100b2a:	4618      	mov	r0, r3
 8100b2c:	46bd      	mov	sp, r7
 8100b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b32:	4770      	bx	lr
 8100b34:	5c001000 	.word	0x5c001000

08100b38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8100b38:	b480      	push	{r7}
 8100b3a:	b083      	sub	sp, #12
 8100b3c:	af00      	add	r7, sp, #0
 8100b3e:	6078      	str	r0, [r7, #4]
 8100b40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8100b42:	4b07      	ldr	r3, [pc, #28]	@ (8100b60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8100b44:	685a      	ldr	r2, [r3, #4]
 8100b46:	687b      	ldr	r3, [r7, #4]
 8100b48:	43db      	mvns	r3, r3
 8100b4a:	401a      	ands	r2, r3
 8100b4c:	4904      	ldr	r1, [pc, #16]	@ (8100b60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8100b4e:	683b      	ldr	r3, [r7, #0]
 8100b50:	4313      	orrs	r3, r2
 8100b52:	604b      	str	r3, [r1, #4]
}
 8100b54:	bf00      	nop
 8100b56:	370c      	adds	r7, #12
 8100b58:	46bd      	mov	sp, r7
 8100b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b5e:	4770      	bx	lr
 8100b60:	58000400 	.word	0x58000400

08100b64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8100b64:	b480      	push	{r7}
 8100b66:	b083      	sub	sp, #12
 8100b68:	af00      	add	r7, sp, #0
 8100b6a:	6078      	str	r0, [r7, #4]
 8100b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8100b6e:	687b      	ldr	r3, [r7, #4]
 8100b70:	689b      	ldr	r3, [r3, #8]
 8100b72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8100b76:	683b      	ldr	r3, [r7, #0]
 8100b78:	431a      	orrs	r2, r3
 8100b7a:	687b      	ldr	r3, [r7, #4]
 8100b7c:	609a      	str	r2, [r3, #8]
}
 8100b7e:	bf00      	nop
 8100b80:	370c      	adds	r7, #12
 8100b82:	46bd      	mov	sp, r7
 8100b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b88:	4770      	bx	lr

08100b8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8100b8a:	b480      	push	{r7}
 8100b8c:	b083      	sub	sp, #12
 8100b8e:	af00      	add	r7, sp, #0
 8100b90:	6078      	str	r0, [r7, #4]
 8100b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8100b94:	687b      	ldr	r3, [r7, #4]
 8100b96:	689b      	ldr	r3, [r3, #8]
 8100b98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8100b9c:	683b      	ldr	r3, [r7, #0]
 8100b9e:	431a      	orrs	r2, r3
 8100ba0:	687b      	ldr	r3, [r7, #4]
 8100ba2:	609a      	str	r2, [r3, #8]
}
 8100ba4:	bf00      	nop
 8100ba6:	370c      	adds	r7, #12
 8100ba8:	46bd      	mov	sp, r7
 8100baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bae:	4770      	bx	lr

08100bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8100bb0:	b480      	push	{r7}
 8100bb2:	b083      	sub	sp, #12
 8100bb4:	af00      	add	r7, sp, #0
 8100bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8100bb8:	687b      	ldr	r3, [r7, #4]
 8100bba:	689b      	ldr	r3, [r3, #8]
 8100bbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8100bc0:	4618      	mov	r0, r3
 8100bc2:	370c      	adds	r7, #12
 8100bc4:	46bd      	mov	sp, r7
 8100bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bca:	4770      	bx	lr

08100bcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8100bcc:	b480      	push	{r7}
 8100bce:	b087      	sub	sp, #28
 8100bd0:	af00      	add	r7, sp, #0
 8100bd2:	60f8      	str	r0, [r7, #12]
 8100bd4:	60b9      	str	r1, [r7, #8]
 8100bd6:	607a      	str	r2, [r7, #4]
 8100bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100bda:	68fb      	ldr	r3, [r7, #12]
 8100bdc:	3360      	adds	r3, #96	@ 0x60
 8100bde:	461a      	mov	r2, r3
 8100be0:	68bb      	ldr	r3, [r7, #8]
 8100be2:	009b      	lsls	r3, r3, #2
 8100be4:	4413      	add	r3, r2
 8100be6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8100be8:	697b      	ldr	r3, [r7, #20]
 8100bea:	681b      	ldr	r3, [r3, #0]
 8100bec:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8100bf6:	683b      	ldr	r3, [r7, #0]
 8100bf8:	430b      	orrs	r3, r1
 8100bfa:	431a      	orrs	r2, r3
 8100bfc:	697b      	ldr	r3, [r7, #20]
 8100bfe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8100c00:	bf00      	nop
 8100c02:	371c      	adds	r7, #28
 8100c04:	46bd      	mov	sp, r7
 8100c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c0a:	4770      	bx	lr

08100c0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8100c0c:	b480      	push	{r7}
 8100c0e:	b085      	sub	sp, #20
 8100c10:	af00      	add	r7, sp, #0
 8100c12:	60f8      	str	r0, [r7, #12]
 8100c14:	60b9      	str	r1, [r7, #8]
 8100c16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8100c18:	68fb      	ldr	r3, [r7, #12]
 8100c1a:	691b      	ldr	r3, [r3, #16]
 8100c1c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8100c20:	68bb      	ldr	r3, [r7, #8]
 8100c22:	f003 031f 	and.w	r3, r3, #31
 8100c26:	6879      	ldr	r1, [r7, #4]
 8100c28:	fa01 f303 	lsl.w	r3, r1, r3
 8100c2c:	431a      	orrs	r2, r3
 8100c2e:	68fb      	ldr	r3, [r7, #12]
 8100c30:	611a      	str	r2, [r3, #16]
}
 8100c32:	bf00      	nop
 8100c34:	3714      	adds	r7, #20
 8100c36:	46bd      	mov	sp, r7
 8100c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c3c:	4770      	bx	lr

08100c3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8100c3e:	b480      	push	{r7}
 8100c40:	b087      	sub	sp, #28
 8100c42:	af00      	add	r7, sp, #0
 8100c44:	60f8      	str	r0, [r7, #12]
 8100c46:	60b9      	str	r1, [r7, #8]
 8100c48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100c4a:	68fb      	ldr	r3, [r7, #12]
 8100c4c:	3360      	adds	r3, #96	@ 0x60
 8100c4e:	461a      	mov	r2, r3
 8100c50:	68bb      	ldr	r3, [r7, #8]
 8100c52:	009b      	lsls	r3, r3, #2
 8100c54:	4413      	add	r3, r2
 8100c56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8100c58:	697b      	ldr	r3, [r7, #20]
 8100c5a:	681b      	ldr	r3, [r3, #0]
 8100c5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8100c60:	687b      	ldr	r3, [r7, #4]
 8100c62:	431a      	orrs	r2, r3
 8100c64:	697b      	ldr	r3, [r7, #20]
 8100c66:	601a      	str	r2, [r3, #0]
  }
}
 8100c68:	bf00      	nop
 8100c6a:	371c      	adds	r7, #28
 8100c6c:	46bd      	mov	sp, r7
 8100c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c72:	4770      	bx	lr

08100c74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8100c74:	b480      	push	{r7}
 8100c76:	b087      	sub	sp, #28
 8100c78:	af00      	add	r7, sp, #0
 8100c7a:	60f8      	str	r0, [r7, #12]
 8100c7c:	60b9      	str	r1, [r7, #8]
 8100c7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8100c80:	68fb      	ldr	r3, [r7, #12]
 8100c82:	3330      	adds	r3, #48	@ 0x30
 8100c84:	461a      	mov	r2, r3
 8100c86:	68bb      	ldr	r3, [r7, #8]
 8100c88:	0a1b      	lsrs	r3, r3, #8
 8100c8a:	009b      	lsls	r3, r3, #2
 8100c8c:	f003 030c 	and.w	r3, r3, #12
 8100c90:	4413      	add	r3, r2
 8100c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8100c94:	697b      	ldr	r3, [r7, #20]
 8100c96:	681a      	ldr	r2, [r3, #0]
 8100c98:	68bb      	ldr	r3, [r7, #8]
 8100c9a:	f003 031f 	and.w	r3, r3, #31
 8100c9e:	211f      	movs	r1, #31
 8100ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8100ca4:	43db      	mvns	r3, r3
 8100ca6:	401a      	ands	r2, r3
 8100ca8:	687b      	ldr	r3, [r7, #4]
 8100caa:	0e9b      	lsrs	r3, r3, #26
 8100cac:	f003 011f 	and.w	r1, r3, #31
 8100cb0:	68bb      	ldr	r3, [r7, #8]
 8100cb2:	f003 031f 	and.w	r3, r3, #31
 8100cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8100cba:	431a      	orrs	r2, r3
 8100cbc:	697b      	ldr	r3, [r7, #20]
 8100cbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8100cc0:	bf00      	nop
 8100cc2:	371c      	adds	r7, #28
 8100cc4:	46bd      	mov	sp, r7
 8100cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cca:	4770      	bx	lr

08100ccc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8100ccc:	b480      	push	{r7}
 8100cce:	b087      	sub	sp, #28
 8100cd0:	af00      	add	r7, sp, #0
 8100cd2:	60f8      	str	r0, [r7, #12]
 8100cd4:	60b9      	str	r1, [r7, #8]
 8100cd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8100cd8:	68fb      	ldr	r3, [r7, #12]
 8100cda:	3314      	adds	r3, #20
 8100cdc:	461a      	mov	r2, r3
 8100cde:	68bb      	ldr	r3, [r7, #8]
 8100ce0:	0e5b      	lsrs	r3, r3, #25
 8100ce2:	009b      	lsls	r3, r3, #2
 8100ce4:	f003 0304 	and.w	r3, r3, #4
 8100ce8:	4413      	add	r3, r2
 8100cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8100cec:	697b      	ldr	r3, [r7, #20]
 8100cee:	681a      	ldr	r2, [r3, #0]
 8100cf0:	68bb      	ldr	r3, [r7, #8]
 8100cf2:	0d1b      	lsrs	r3, r3, #20
 8100cf4:	f003 031f 	and.w	r3, r3, #31
 8100cf8:	2107      	movs	r1, #7
 8100cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8100cfe:	43db      	mvns	r3, r3
 8100d00:	401a      	ands	r2, r3
 8100d02:	68bb      	ldr	r3, [r7, #8]
 8100d04:	0d1b      	lsrs	r3, r3, #20
 8100d06:	f003 031f 	and.w	r3, r3, #31
 8100d0a:	6879      	ldr	r1, [r7, #4]
 8100d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8100d10:	431a      	orrs	r2, r3
 8100d12:	697b      	ldr	r3, [r7, #20]
 8100d14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8100d16:	bf00      	nop
 8100d18:	371c      	adds	r7, #28
 8100d1a:	46bd      	mov	sp, r7
 8100d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d20:	4770      	bx	lr
	...

08100d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8100d24:	b480      	push	{r7}
 8100d26:	b085      	sub	sp, #20
 8100d28:	af00      	add	r7, sp, #0
 8100d2a:	60f8      	str	r0, [r7, #12]
 8100d2c:	60b9      	str	r1, [r7, #8]
 8100d2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8100d30:	68fb      	ldr	r3, [r7, #12]
 8100d32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8100d36:	68bb      	ldr	r3, [r7, #8]
 8100d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100d3c:	43db      	mvns	r3, r3
 8100d3e:	401a      	ands	r2, r3
 8100d40:	687b      	ldr	r3, [r7, #4]
 8100d42:	f003 0318 	and.w	r3, r3, #24
 8100d46:	4908      	ldr	r1, [pc, #32]	@ (8100d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8100d48:	40d9      	lsrs	r1, r3
 8100d4a:	68bb      	ldr	r3, [r7, #8]
 8100d4c:	400b      	ands	r3, r1
 8100d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100d52:	431a      	orrs	r2, r3
 8100d54:	68fb      	ldr	r3, [r7, #12]
 8100d56:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8100d5a:	bf00      	nop
 8100d5c:	3714      	adds	r7, #20
 8100d5e:	46bd      	mov	sp, r7
 8100d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d64:	4770      	bx	lr
 8100d66:	bf00      	nop
 8100d68:	000fffff 	.word	0x000fffff

08100d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8100d6c:	b480      	push	{r7}
 8100d6e:	b083      	sub	sp, #12
 8100d70:	af00      	add	r7, sp, #0
 8100d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	689b      	ldr	r3, [r3, #8]
 8100d78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8100d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8100d80:	687a      	ldr	r2, [r7, #4]
 8100d82:	6093      	str	r3, [r2, #8]
}
 8100d84:	bf00      	nop
 8100d86:	370c      	adds	r7, #12
 8100d88:	46bd      	mov	sp, r7
 8100d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d8e:	4770      	bx	lr

08100d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8100d90:	b480      	push	{r7}
 8100d92:	b083      	sub	sp, #12
 8100d94:	af00      	add	r7, sp, #0
 8100d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8100d98:	687b      	ldr	r3, [r7, #4]
 8100d9a:	689b      	ldr	r3, [r3, #8]
 8100d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8100da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8100da4:	d101      	bne.n	8100daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8100da6:	2301      	movs	r3, #1
 8100da8:	e000      	b.n	8100dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8100daa:	2300      	movs	r3, #0
}
 8100dac:	4618      	mov	r0, r3
 8100dae:	370c      	adds	r7, #12
 8100db0:	46bd      	mov	sp, r7
 8100db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db6:	4770      	bx	lr

08100db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8100db8:	b480      	push	{r7}
 8100dba:	b083      	sub	sp, #12
 8100dbc:	af00      	add	r7, sp, #0
 8100dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8100dc0:	687b      	ldr	r3, [r7, #4]
 8100dc2:	689b      	ldr	r3, [r3, #8]
 8100dc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8100dc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8100dcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8100dd4:	bf00      	nop
 8100dd6:	370c      	adds	r7, #12
 8100dd8:	46bd      	mov	sp, r7
 8100dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dde:	4770      	bx	lr

08100de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8100de0:	b480      	push	{r7}
 8100de2:	b083      	sub	sp, #12
 8100de4:	af00      	add	r7, sp, #0
 8100de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8100de8:	687b      	ldr	r3, [r7, #4]
 8100dea:	689b      	ldr	r3, [r3, #8]
 8100dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8100df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8100df4:	d101      	bne.n	8100dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8100df6:	2301      	movs	r3, #1
 8100df8:	e000      	b.n	8100dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8100dfa:	2300      	movs	r3, #0
}
 8100dfc:	4618      	mov	r0, r3
 8100dfe:	370c      	adds	r7, #12
 8100e00:	46bd      	mov	sp, r7
 8100e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e06:	4770      	bx	lr

08100e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8100e08:	b480      	push	{r7}
 8100e0a:	b083      	sub	sp, #12
 8100e0c:	af00      	add	r7, sp, #0
 8100e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8100e10:	687b      	ldr	r3, [r7, #4]
 8100e12:	689b      	ldr	r3, [r3, #8]
 8100e14:	f003 0301 	and.w	r3, r3, #1
 8100e18:	2b01      	cmp	r3, #1
 8100e1a:	d101      	bne.n	8100e20 <LL_ADC_IsEnabled+0x18>
 8100e1c:	2301      	movs	r3, #1
 8100e1e:	e000      	b.n	8100e22 <LL_ADC_IsEnabled+0x1a>
 8100e20:	2300      	movs	r3, #0
}
 8100e22:	4618      	mov	r0, r3
 8100e24:	370c      	adds	r7, #12
 8100e26:	46bd      	mov	sp, r7
 8100e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2c:	4770      	bx	lr

08100e2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8100e2e:	b480      	push	{r7}
 8100e30:	b083      	sub	sp, #12
 8100e32:	af00      	add	r7, sp, #0
 8100e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8100e36:	687b      	ldr	r3, [r7, #4]
 8100e38:	689b      	ldr	r3, [r3, #8]
 8100e3a:	f003 0304 	and.w	r3, r3, #4
 8100e3e:	2b04      	cmp	r3, #4
 8100e40:	d101      	bne.n	8100e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8100e42:	2301      	movs	r3, #1
 8100e44:	e000      	b.n	8100e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8100e46:	2300      	movs	r3, #0
}
 8100e48:	4618      	mov	r0, r3
 8100e4a:	370c      	adds	r7, #12
 8100e4c:	46bd      	mov	sp, r7
 8100e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e52:	4770      	bx	lr

08100e54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8100e54:	b480      	push	{r7}
 8100e56:	b083      	sub	sp, #12
 8100e58:	af00      	add	r7, sp, #0
 8100e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8100e5c:	687b      	ldr	r3, [r7, #4]
 8100e5e:	689b      	ldr	r3, [r3, #8]
 8100e60:	f003 0308 	and.w	r3, r3, #8
 8100e64:	2b08      	cmp	r3, #8
 8100e66:	d101      	bne.n	8100e6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8100e68:	2301      	movs	r3, #1
 8100e6a:	e000      	b.n	8100e6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8100e6c:	2300      	movs	r3, #0
}
 8100e6e:	4618      	mov	r0, r3
 8100e70:	370c      	adds	r7, #12
 8100e72:	46bd      	mov	sp, r7
 8100e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e78:	4770      	bx	lr
	...

08100e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8100e7c:	b590      	push	{r4, r7, lr}
 8100e7e:	b089      	sub	sp, #36	@ 0x24
 8100e80:	af00      	add	r7, sp, #0
 8100e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8100e84:	2300      	movs	r3, #0
 8100e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8100e88:	2300      	movs	r3, #0
 8100e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8100e8c:	687b      	ldr	r3, [r7, #4]
 8100e8e:	2b00      	cmp	r3, #0
 8100e90:	d101      	bne.n	8100e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8100e92:	2301      	movs	r3, #1
 8100e94:	e18f      	b.n	81011b6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8100e96:	687b      	ldr	r3, [r7, #4]
 8100e98:	68db      	ldr	r3, [r3, #12]
 8100e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100ea0:	2b00      	cmp	r3, #0
 8100ea2:	d109      	bne.n	8100eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8100ea4:	6878      	ldr	r0, [r7, #4]
 8100ea6:	f7ff fc1d 	bl	81006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8100eaa:	687b      	ldr	r3, [r7, #4]
 8100eac:	2200      	movs	r2, #0
 8100eae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	2200      	movs	r2, #0
 8100eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8100eb8:	687b      	ldr	r3, [r7, #4]
 8100eba:	681b      	ldr	r3, [r3, #0]
 8100ebc:	4618      	mov	r0, r3
 8100ebe:	f7ff ff67 	bl	8100d90 <LL_ADC_IsDeepPowerDownEnabled>
 8100ec2:	4603      	mov	r3, r0
 8100ec4:	2b00      	cmp	r3, #0
 8100ec6:	d004      	beq.n	8100ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8100ec8:	687b      	ldr	r3, [r7, #4]
 8100eca:	681b      	ldr	r3, [r3, #0]
 8100ecc:	4618      	mov	r0, r3
 8100ece:	f7ff ff4d 	bl	8100d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	681b      	ldr	r3, [r3, #0]
 8100ed6:	4618      	mov	r0, r3
 8100ed8:	f7ff ff82 	bl	8100de0 <LL_ADC_IsInternalRegulatorEnabled>
 8100edc:	4603      	mov	r3, r0
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	d114      	bne.n	8100f0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	681b      	ldr	r3, [r3, #0]
 8100ee6:	4618      	mov	r0, r3
 8100ee8:	f7ff ff66 	bl	8100db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8100eec:	4b88      	ldr	r3, [pc, #544]	@ (8101110 <HAL_ADC_Init+0x294>)
 8100eee:	681b      	ldr	r3, [r3, #0]
 8100ef0:	099b      	lsrs	r3, r3, #6
 8100ef2:	4a88      	ldr	r2, [pc, #544]	@ (8101114 <HAL_ADC_Init+0x298>)
 8100ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8100ef8:	099b      	lsrs	r3, r3, #6
 8100efa:	3301      	adds	r3, #1
 8100efc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8100efe:	e002      	b.n	8100f06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8100f00:	68bb      	ldr	r3, [r7, #8]
 8100f02:	3b01      	subs	r3, #1
 8100f04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8100f06:	68bb      	ldr	r3, [r7, #8]
 8100f08:	2b00      	cmp	r3, #0
 8100f0a:	d1f9      	bne.n	8100f00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8100f0c:	687b      	ldr	r3, [r7, #4]
 8100f0e:	681b      	ldr	r3, [r3, #0]
 8100f10:	4618      	mov	r0, r3
 8100f12:	f7ff ff65 	bl	8100de0 <LL_ADC_IsInternalRegulatorEnabled>
 8100f16:	4603      	mov	r3, r0
 8100f18:	2b00      	cmp	r3, #0
 8100f1a:	d10d      	bne.n	8100f38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100f20:	f043 0210 	orr.w	r2, r3, #16
 8100f24:	687b      	ldr	r3, [r7, #4]
 8100f26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8100f28:	687b      	ldr	r3, [r7, #4]
 8100f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8100f2c:	f043 0201 	orr.w	r2, r3, #1
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8100f34:	2301      	movs	r3, #1
 8100f36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	4618      	mov	r0, r3
 8100f3e:	f7ff ff76 	bl	8100e2e <LL_ADC_REG_IsConversionOngoing>
 8100f42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8100f44:	687b      	ldr	r3, [r7, #4]
 8100f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100f48:	f003 0310 	and.w	r3, r3, #16
 8100f4c:	2b00      	cmp	r3, #0
 8100f4e:	f040 8129 	bne.w	81011a4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8100f52:	697b      	ldr	r3, [r7, #20]
 8100f54:	2b00      	cmp	r3, #0
 8100f56:	f040 8125 	bne.w	81011a4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8100f5a:	687b      	ldr	r3, [r7, #4]
 8100f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100f5e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8100f62:	f043 0202 	orr.w	r2, r3, #2
 8100f66:	687b      	ldr	r3, [r7, #4]
 8100f68:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8100f6a:	687b      	ldr	r3, [r7, #4]
 8100f6c:	681b      	ldr	r3, [r3, #0]
 8100f6e:	4618      	mov	r0, r3
 8100f70:	f7ff ff4a 	bl	8100e08 <LL_ADC_IsEnabled>
 8100f74:	4603      	mov	r3, r0
 8100f76:	2b00      	cmp	r3, #0
 8100f78:	d136      	bne.n	8100fe8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	681b      	ldr	r3, [r3, #0]
 8100f7e:	4a66      	ldr	r2, [pc, #408]	@ (8101118 <HAL_ADC_Init+0x29c>)
 8100f80:	4293      	cmp	r3, r2
 8100f82:	d004      	beq.n	8100f8e <HAL_ADC_Init+0x112>
 8100f84:	687b      	ldr	r3, [r7, #4]
 8100f86:	681b      	ldr	r3, [r3, #0]
 8100f88:	4a64      	ldr	r2, [pc, #400]	@ (810111c <HAL_ADC_Init+0x2a0>)
 8100f8a:	4293      	cmp	r3, r2
 8100f8c:	d10e      	bne.n	8100fac <HAL_ADC_Init+0x130>
 8100f8e:	4862      	ldr	r0, [pc, #392]	@ (8101118 <HAL_ADC_Init+0x29c>)
 8100f90:	f7ff ff3a 	bl	8100e08 <LL_ADC_IsEnabled>
 8100f94:	4604      	mov	r4, r0
 8100f96:	4861      	ldr	r0, [pc, #388]	@ (810111c <HAL_ADC_Init+0x2a0>)
 8100f98:	f7ff ff36 	bl	8100e08 <LL_ADC_IsEnabled>
 8100f9c:	4603      	mov	r3, r0
 8100f9e:	4323      	orrs	r3, r4
 8100fa0:	2b00      	cmp	r3, #0
 8100fa2:	bf0c      	ite	eq
 8100fa4:	2301      	moveq	r3, #1
 8100fa6:	2300      	movne	r3, #0
 8100fa8:	b2db      	uxtb	r3, r3
 8100faa:	e008      	b.n	8100fbe <HAL_ADC_Init+0x142>
 8100fac:	485c      	ldr	r0, [pc, #368]	@ (8101120 <HAL_ADC_Init+0x2a4>)
 8100fae:	f7ff ff2b 	bl	8100e08 <LL_ADC_IsEnabled>
 8100fb2:	4603      	mov	r3, r0
 8100fb4:	2b00      	cmp	r3, #0
 8100fb6:	bf0c      	ite	eq
 8100fb8:	2301      	moveq	r3, #1
 8100fba:	2300      	movne	r3, #0
 8100fbc:	b2db      	uxtb	r3, r3
 8100fbe:	2b00      	cmp	r3, #0
 8100fc0:	d012      	beq.n	8100fe8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8100fc2:	687b      	ldr	r3, [r7, #4]
 8100fc4:	681b      	ldr	r3, [r3, #0]
 8100fc6:	4a54      	ldr	r2, [pc, #336]	@ (8101118 <HAL_ADC_Init+0x29c>)
 8100fc8:	4293      	cmp	r3, r2
 8100fca:	d004      	beq.n	8100fd6 <HAL_ADC_Init+0x15a>
 8100fcc:	687b      	ldr	r3, [r7, #4]
 8100fce:	681b      	ldr	r3, [r3, #0]
 8100fd0:	4a52      	ldr	r2, [pc, #328]	@ (810111c <HAL_ADC_Init+0x2a0>)
 8100fd2:	4293      	cmp	r3, r2
 8100fd4:	d101      	bne.n	8100fda <HAL_ADC_Init+0x15e>
 8100fd6:	4a53      	ldr	r2, [pc, #332]	@ (8101124 <HAL_ADC_Init+0x2a8>)
 8100fd8:	e000      	b.n	8100fdc <HAL_ADC_Init+0x160>
 8100fda:	4a53      	ldr	r2, [pc, #332]	@ (8101128 <HAL_ADC_Init+0x2ac>)
 8100fdc:	687b      	ldr	r3, [r7, #4]
 8100fde:	685b      	ldr	r3, [r3, #4]
 8100fe0:	4619      	mov	r1, r3
 8100fe2:	4610      	mov	r0, r2
 8100fe4:	f7ff fdbe 	bl	8100b64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8100fe8:	f7ff fd9a 	bl	8100b20 <HAL_GetREVID>
 8100fec:	4603      	mov	r3, r0
 8100fee:	f241 0203 	movw	r2, #4099	@ 0x1003
 8100ff2:	4293      	cmp	r3, r2
 8100ff4:	d914      	bls.n	8101020 <HAL_ADC_Init+0x1a4>
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	689b      	ldr	r3, [r3, #8]
 8100ffa:	2b10      	cmp	r3, #16
 8100ffc:	d110      	bne.n	8101020 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	7d5b      	ldrb	r3, [r3, #21]
 8101002:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101008:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810100a:	687b      	ldr	r3, [r7, #4]
 810100c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810100e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101010:	687b      	ldr	r3, [r7, #4]
 8101012:	7f1b      	ldrb	r3, [r3, #28]
 8101014:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101016:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101018:	f043 030c 	orr.w	r3, r3, #12
 810101c:	61bb      	str	r3, [r7, #24]
 810101e:	e00d      	b.n	810103c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	7d5b      	ldrb	r3, [r3, #21]
 8101024:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101026:	687b      	ldr	r3, [r7, #4]
 8101028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810102a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810102c:	687b      	ldr	r3, [r7, #4]
 810102e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101030:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	7f1b      	ldrb	r3, [r3, #28]
 8101036:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101038:	4313      	orrs	r3, r2
 810103a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810103c:	687b      	ldr	r3, [r7, #4]
 810103e:	7f1b      	ldrb	r3, [r3, #28]
 8101040:	2b01      	cmp	r3, #1
 8101042:	d106      	bne.n	8101052 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	6a1b      	ldr	r3, [r3, #32]
 8101048:	3b01      	subs	r3, #1
 810104a:	045b      	lsls	r3, r3, #17
 810104c:	69ba      	ldr	r2, [r7, #24]
 810104e:	4313      	orrs	r3, r2
 8101050:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101052:	687b      	ldr	r3, [r7, #4]
 8101054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101056:	2b00      	cmp	r3, #0
 8101058:	d009      	beq.n	810106e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810105a:	687b      	ldr	r3, [r7, #4]
 810105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810105e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101066:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101068:	69ba      	ldr	r2, [r7, #24]
 810106a:	4313      	orrs	r3, r2
 810106c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	68da      	ldr	r2, [r3, #12]
 8101074:	4b2d      	ldr	r3, [pc, #180]	@ (810112c <HAL_ADC_Init+0x2b0>)
 8101076:	4013      	ands	r3, r2
 8101078:	687a      	ldr	r2, [r7, #4]
 810107a:	6812      	ldr	r2, [r2, #0]
 810107c:	69b9      	ldr	r1, [r7, #24]
 810107e:	430b      	orrs	r3, r1
 8101080:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101082:	687b      	ldr	r3, [r7, #4]
 8101084:	681b      	ldr	r3, [r3, #0]
 8101086:	4618      	mov	r0, r3
 8101088:	f7ff fed1 	bl	8100e2e <LL_ADC_REG_IsConversionOngoing>
 810108c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810108e:	687b      	ldr	r3, [r7, #4]
 8101090:	681b      	ldr	r3, [r3, #0]
 8101092:	4618      	mov	r0, r3
 8101094:	f7ff fede 	bl	8100e54 <LL_ADC_INJ_IsConversionOngoing>
 8101098:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810109a:	693b      	ldr	r3, [r7, #16]
 810109c:	2b00      	cmp	r3, #0
 810109e:	d15f      	bne.n	8101160 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81010a0:	68fb      	ldr	r3, [r7, #12]
 81010a2:	2b00      	cmp	r3, #0
 81010a4:	d15c      	bne.n	8101160 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	7d1b      	ldrb	r3, [r3, #20]
 81010aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81010ac:	687b      	ldr	r3, [r7, #4]
 81010ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 81010b0:	4313      	orrs	r3, r2
 81010b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81010b4:	687b      	ldr	r3, [r7, #4]
 81010b6:	681b      	ldr	r3, [r3, #0]
 81010b8:	68db      	ldr	r3, [r3, #12]
 81010ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81010be:	f023 0303 	bic.w	r3, r3, #3
 81010c2:	687a      	ldr	r2, [r7, #4]
 81010c4:	6812      	ldr	r2, [r2, #0]
 81010c6:	69b9      	ldr	r1, [r7, #24]
 81010c8:	430b      	orrs	r3, r1
 81010ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81010cc:	687b      	ldr	r3, [r7, #4]
 81010ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81010d2:	2b01      	cmp	r3, #1
 81010d4:	d12e      	bne.n	8101134 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81010da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81010dc:	687b      	ldr	r3, [r7, #4]
 81010de:	681b      	ldr	r3, [r3, #0]
 81010e0:	691a      	ldr	r2, [r3, #16]
 81010e2:	4b13      	ldr	r3, [pc, #76]	@ (8101130 <HAL_ADC_Init+0x2b4>)
 81010e4:	4013      	ands	r3, r2
 81010e6:	687a      	ldr	r2, [r7, #4]
 81010e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 81010ea:	3a01      	subs	r2, #1
 81010ec:	0411      	lsls	r1, r2, #16
 81010ee:	687a      	ldr	r2, [r7, #4]
 81010f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 81010f2:	4311      	orrs	r1, r2
 81010f4:	687a      	ldr	r2, [r7, #4]
 81010f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 81010f8:	4311      	orrs	r1, r2
 81010fa:	687a      	ldr	r2, [r7, #4]
 81010fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 81010fe:	430a      	orrs	r2, r1
 8101100:	431a      	orrs	r2, r3
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	681b      	ldr	r3, [r3, #0]
 8101106:	f042 0201 	orr.w	r2, r2, #1
 810110a:	611a      	str	r2, [r3, #16]
 810110c:	e01a      	b.n	8101144 <HAL_ADC_Init+0x2c8>
 810110e:	bf00      	nop
 8101110:	10000000 	.word	0x10000000
 8101114:	053e2d63 	.word	0x053e2d63
 8101118:	40022000 	.word	0x40022000
 810111c:	40022100 	.word	0x40022100
 8101120:	58026000 	.word	0x58026000
 8101124:	40022300 	.word	0x40022300
 8101128:	58026300 	.word	0x58026300
 810112c:	fff0c003 	.word	0xfff0c003
 8101130:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	681b      	ldr	r3, [r3, #0]
 8101138:	691a      	ldr	r2, [r3, #16]
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	681b      	ldr	r3, [r3, #0]
 810113e:	f022 0201 	bic.w	r2, r2, #1
 8101142:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101144:	687b      	ldr	r3, [r7, #4]
 8101146:	681b      	ldr	r3, [r3, #0]
 8101148:	691b      	ldr	r3, [r3, #16]
 810114a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101152:	687b      	ldr	r3, [r7, #4]
 8101154:	681b      	ldr	r3, [r3, #0]
 8101156:	430a      	orrs	r2, r1
 8101158:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810115a:	6878      	ldr	r0, [r7, #4]
 810115c:	f000 fb8c 	bl	8101878 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101160:	687b      	ldr	r3, [r7, #4]
 8101162:	68db      	ldr	r3, [r3, #12]
 8101164:	2b01      	cmp	r3, #1
 8101166:	d10c      	bne.n	8101182 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101168:	687b      	ldr	r3, [r7, #4]
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810116e:	f023 010f 	bic.w	r1, r3, #15
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	699b      	ldr	r3, [r3, #24]
 8101176:	1e5a      	subs	r2, r3, #1
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	681b      	ldr	r3, [r3, #0]
 810117c:	430a      	orrs	r2, r1
 810117e:	631a      	str	r2, [r3, #48]	@ 0x30
 8101180:	e007      	b.n	8101192 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8101188:	687b      	ldr	r3, [r7, #4]
 810118a:	681b      	ldr	r3, [r3, #0]
 810118c:	f022 020f 	bic.w	r2, r2, #15
 8101190:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101192:	687b      	ldr	r3, [r7, #4]
 8101194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101196:	f023 0303 	bic.w	r3, r3, #3
 810119a:	f043 0201 	orr.w	r2, r3, #1
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	655a      	str	r2, [r3, #84]	@ 0x54
 81011a2:	e007      	b.n	81011b4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81011a8:	f043 0210 	orr.w	r2, r3, #16
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81011b0:	2301      	movs	r3, #1
 81011b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81011b4:	7ffb      	ldrb	r3, [r7, #31]
}
 81011b6:	4618      	mov	r0, r3
 81011b8:	3724      	adds	r7, #36	@ 0x24
 81011ba:	46bd      	mov	sp, r7
 81011bc:	bd90      	pop	{r4, r7, pc}
 81011be:	bf00      	nop

081011c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81011c0:	b590      	push	{r4, r7, lr}
 81011c2:	b0a1      	sub	sp, #132	@ 0x84
 81011c4:	af00      	add	r7, sp, #0
 81011c6:	6078      	str	r0, [r7, #4]
 81011c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81011ca:	2300      	movs	r3, #0
 81011cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81011d0:	2300      	movs	r3, #0
 81011d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81011d4:	683b      	ldr	r3, [r7, #0]
 81011d6:	68db      	ldr	r3, [r3, #12]
 81011d8:	4a65      	ldr	r2, [pc, #404]	@ (8101370 <HAL_ADC_ConfigChannel+0x1b0>)
 81011da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81011dc:	687b      	ldr	r3, [r7, #4]
 81011de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81011e2:	2b01      	cmp	r3, #1
 81011e4:	d101      	bne.n	81011ea <HAL_ADC_ConfigChannel+0x2a>
 81011e6:	2302      	movs	r3, #2
 81011e8:	e32e      	b.n	8101848 <HAL_ADC_ConfigChannel+0x688>
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	2201      	movs	r2, #1
 81011ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	681b      	ldr	r3, [r3, #0]
 81011f6:	4618      	mov	r0, r3
 81011f8:	f7ff fe19 	bl	8100e2e <LL_ADC_REG_IsConversionOngoing>
 81011fc:	4603      	mov	r3, r0
 81011fe:	2b00      	cmp	r3, #0
 8101200:	f040 8313 	bne.w	810182a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8101204:	683b      	ldr	r3, [r7, #0]
 8101206:	681b      	ldr	r3, [r3, #0]
 8101208:	2b00      	cmp	r3, #0
 810120a:	db2c      	blt.n	8101266 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810120c:	683b      	ldr	r3, [r7, #0]
 810120e:	681b      	ldr	r3, [r3, #0]
 8101210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101214:	2b00      	cmp	r3, #0
 8101216:	d108      	bne.n	810122a <HAL_ADC_ConfigChannel+0x6a>
 8101218:	683b      	ldr	r3, [r7, #0]
 810121a:	681b      	ldr	r3, [r3, #0]
 810121c:	0e9b      	lsrs	r3, r3, #26
 810121e:	f003 031f 	and.w	r3, r3, #31
 8101222:	2201      	movs	r2, #1
 8101224:	fa02 f303 	lsl.w	r3, r2, r3
 8101228:	e016      	b.n	8101258 <HAL_ADC_ConfigChannel+0x98>
 810122a:	683b      	ldr	r3, [r7, #0]
 810122c:	681b      	ldr	r3, [r3, #0]
 810122e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101232:	fa93 f3a3 	rbit	r3, r3
 8101236:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810123a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 810123c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810123e:	2b00      	cmp	r3, #0
 8101240:	d101      	bne.n	8101246 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8101242:	2320      	movs	r3, #32
 8101244:	e003      	b.n	810124e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8101246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8101248:	fab3 f383 	clz	r3, r3
 810124c:	b2db      	uxtb	r3, r3
 810124e:	f003 031f 	and.w	r3, r3, #31
 8101252:	2201      	movs	r2, #1
 8101254:	fa02 f303 	lsl.w	r3, r2, r3
 8101258:	687a      	ldr	r2, [r7, #4]
 810125a:	6812      	ldr	r2, [r2, #0]
 810125c:	69d1      	ldr	r1, [r2, #28]
 810125e:	687a      	ldr	r2, [r7, #4]
 8101260:	6812      	ldr	r2, [r2, #0]
 8101262:	430b      	orrs	r3, r1
 8101264:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	6818      	ldr	r0, [r3, #0]
 810126a:	683b      	ldr	r3, [r7, #0]
 810126c:	6859      	ldr	r1, [r3, #4]
 810126e:	683b      	ldr	r3, [r7, #0]
 8101270:	681b      	ldr	r3, [r3, #0]
 8101272:	461a      	mov	r2, r3
 8101274:	f7ff fcfe 	bl	8100c74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	681b      	ldr	r3, [r3, #0]
 810127c:	4618      	mov	r0, r3
 810127e:	f7ff fdd6 	bl	8100e2e <LL_ADC_REG_IsConversionOngoing>
 8101282:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	4618      	mov	r0, r3
 810128a:	f7ff fde3 	bl	8100e54 <LL_ADC_INJ_IsConversionOngoing>
 810128e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101292:	2b00      	cmp	r3, #0
 8101294:	f040 80b8 	bne.w	8101408 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810129a:	2b00      	cmp	r3, #0
 810129c:	f040 80b4 	bne.w	8101408 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81012a0:	687b      	ldr	r3, [r7, #4]
 81012a2:	6818      	ldr	r0, [r3, #0]
 81012a4:	683b      	ldr	r3, [r7, #0]
 81012a6:	6819      	ldr	r1, [r3, #0]
 81012a8:	683b      	ldr	r3, [r7, #0]
 81012aa:	689b      	ldr	r3, [r3, #8]
 81012ac:	461a      	mov	r2, r3
 81012ae:	f7ff fd0d 	bl	8100ccc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81012b2:	4b30      	ldr	r3, [pc, #192]	@ (8101374 <HAL_ADC_ConfigChannel+0x1b4>)
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 81012ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81012be:	d10b      	bne.n	81012d8 <HAL_ADC_ConfigChannel+0x118>
 81012c0:	683b      	ldr	r3, [r7, #0]
 81012c2:	695a      	ldr	r2, [r3, #20]
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	681b      	ldr	r3, [r3, #0]
 81012c8:	68db      	ldr	r3, [r3, #12]
 81012ca:	089b      	lsrs	r3, r3, #2
 81012cc:	f003 0307 	and.w	r3, r3, #7
 81012d0:	005b      	lsls	r3, r3, #1
 81012d2:	fa02 f303 	lsl.w	r3, r2, r3
 81012d6:	e01d      	b.n	8101314 <HAL_ADC_ConfigChannel+0x154>
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	681b      	ldr	r3, [r3, #0]
 81012dc:	68db      	ldr	r3, [r3, #12]
 81012de:	f003 0310 	and.w	r3, r3, #16
 81012e2:	2b00      	cmp	r3, #0
 81012e4:	d10b      	bne.n	81012fe <HAL_ADC_ConfigChannel+0x13e>
 81012e6:	683b      	ldr	r3, [r7, #0]
 81012e8:	695a      	ldr	r2, [r3, #20]
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	681b      	ldr	r3, [r3, #0]
 81012ee:	68db      	ldr	r3, [r3, #12]
 81012f0:	089b      	lsrs	r3, r3, #2
 81012f2:	f003 0307 	and.w	r3, r3, #7
 81012f6:	005b      	lsls	r3, r3, #1
 81012f8:	fa02 f303 	lsl.w	r3, r2, r3
 81012fc:	e00a      	b.n	8101314 <HAL_ADC_ConfigChannel+0x154>
 81012fe:	683b      	ldr	r3, [r7, #0]
 8101300:	695a      	ldr	r2, [r3, #20]
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	681b      	ldr	r3, [r3, #0]
 8101306:	68db      	ldr	r3, [r3, #12]
 8101308:	089b      	lsrs	r3, r3, #2
 810130a:	f003 0304 	and.w	r3, r3, #4
 810130e:	005b      	lsls	r3, r3, #1
 8101310:	fa02 f303 	lsl.w	r3, r2, r3
 8101314:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101316:	683b      	ldr	r3, [r7, #0]
 8101318:	691b      	ldr	r3, [r3, #16]
 810131a:	2b04      	cmp	r3, #4
 810131c:	d02c      	beq.n	8101378 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	6818      	ldr	r0, [r3, #0]
 8101322:	683b      	ldr	r3, [r7, #0]
 8101324:	6919      	ldr	r1, [r3, #16]
 8101326:	683b      	ldr	r3, [r7, #0]
 8101328:	681a      	ldr	r2, [r3, #0]
 810132a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810132c:	f7ff fc4e 	bl	8100bcc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	6818      	ldr	r0, [r3, #0]
 8101334:	683b      	ldr	r3, [r7, #0]
 8101336:	6919      	ldr	r1, [r3, #16]
 8101338:	683b      	ldr	r3, [r7, #0]
 810133a:	7e5b      	ldrb	r3, [r3, #25]
 810133c:	2b01      	cmp	r3, #1
 810133e:	d102      	bne.n	8101346 <HAL_ADC_ConfigChannel+0x186>
 8101340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8101344:	e000      	b.n	8101348 <HAL_ADC_ConfigChannel+0x188>
 8101346:	2300      	movs	r3, #0
 8101348:	461a      	mov	r2, r3
 810134a:	f7ff fc78 	bl	8100c3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	6818      	ldr	r0, [r3, #0]
 8101352:	683b      	ldr	r3, [r7, #0]
 8101354:	6919      	ldr	r1, [r3, #16]
 8101356:	683b      	ldr	r3, [r7, #0]
 8101358:	7e1b      	ldrb	r3, [r3, #24]
 810135a:	2b01      	cmp	r3, #1
 810135c:	d102      	bne.n	8101364 <HAL_ADC_ConfigChannel+0x1a4>
 810135e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101362:	e000      	b.n	8101366 <HAL_ADC_ConfigChannel+0x1a6>
 8101364:	2300      	movs	r3, #0
 8101366:	461a      	mov	r2, r3
 8101368:	f7ff fc50 	bl	8100c0c <LL_ADC_SetDataRightShift>
 810136c:	e04c      	b.n	8101408 <HAL_ADC_ConfigChannel+0x248>
 810136e:	bf00      	nop
 8101370:	47ff0000 	.word	0x47ff0000
 8101374:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	681b      	ldr	r3, [r3, #0]
 810137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810137e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101382:	683b      	ldr	r3, [r7, #0]
 8101384:	681b      	ldr	r3, [r3, #0]
 8101386:	069b      	lsls	r3, r3, #26
 8101388:	429a      	cmp	r2, r3
 810138a:	d107      	bne.n	810139c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	681b      	ldr	r3, [r3, #0]
 8101390:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	681b      	ldr	r3, [r3, #0]
 8101396:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810139a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	681b      	ldr	r3, [r3, #0]
 81013a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81013a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81013a6:	683b      	ldr	r3, [r7, #0]
 81013a8:	681b      	ldr	r3, [r3, #0]
 81013aa:	069b      	lsls	r3, r3, #26
 81013ac:	429a      	cmp	r2, r3
 81013ae:	d107      	bne.n	81013c0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	681b      	ldr	r3, [r3, #0]
 81013ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81013be:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81013c0:	687b      	ldr	r3, [r7, #4]
 81013c2:	681b      	ldr	r3, [r3, #0]
 81013c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81013c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81013ca:	683b      	ldr	r3, [r7, #0]
 81013cc:	681b      	ldr	r3, [r3, #0]
 81013ce:	069b      	lsls	r3, r3, #26
 81013d0:	429a      	cmp	r2, r3
 81013d2:	d107      	bne.n	81013e4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	681b      	ldr	r3, [r3, #0]
 81013d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 81013da:	687b      	ldr	r3, [r7, #4]
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81013e2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81013ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81013ee:	683b      	ldr	r3, [r7, #0]
 81013f0:	681b      	ldr	r3, [r3, #0]
 81013f2:	069b      	lsls	r3, r3, #26
 81013f4:	429a      	cmp	r2, r3
 81013f6:	d107      	bne.n	8101408 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	681b      	ldr	r3, [r3, #0]
 81013fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	681b      	ldr	r3, [r3, #0]
 8101402:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8101406:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101408:	687b      	ldr	r3, [r7, #4]
 810140a:	681b      	ldr	r3, [r3, #0]
 810140c:	4618      	mov	r0, r3
 810140e:	f7ff fcfb 	bl	8100e08 <LL_ADC_IsEnabled>
 8101412:	4603      	mov	r3, r0
 8101414:	2b00      	cmp	r3, #0
 8101416:	f040 8211 	bne.w	810183c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	6818      	ldr	r0, [r3, #0]
 810141e:	683b      	ldr	r3, [r7, #0]
 8101420:	6819      	ldr	r1, [r3, #0]
 8101422:	683b      	ldr	r3, [r7, #0]
 8101424:	68db      	ldr	r3, [r3, #12]
 8101426:	461a      	mov	r2, r3
 8101428:	f7ff fc7c 	bl	8100d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810142c:	683b      	ldr	r3, [r7, #0]
 810142e:	68db      	ldr	r3, [r3, #12]
 8101430:	4aa1      	ldr	r2, [pc, #644]	@ (81016b8 <HAL_ADC_ConfigChannel+0x4f8>)
 8101432:	4293      	cmp	r3, r2
 8101434:	f040 812e 	bne.w	8101694 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101438:	687b      	ldr	r3, [r7, #4]
 810143a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810143c:	683b      	ldr	r3, [r7, #0]
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101444:	2b00      	cmp	r3, #0
 8101446:	d10b      	bne.n	8101460 <HAL_ADC_ConfigChannel+0x2a0>
 8101448:	683b      	ldr	r3, [r7, #0]
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	0e9b      	lsrs	r3, r3, #26
 810144e:	3301      	adds	r3, #1
 8101450:	f003 031f 	and.w	r3, r3, #31
 8101454:	2b09      	cmp	r3, #9
 8101456:	bf94      	ite	ls
 8101458:	2301      	movls	r3, #1
 810145a:	2300      	movhi	r3, #0
 810145c:	b2db      	uxtb	r3, r3
 810145e:	e019      	b.n	8101494 <HAL_ADC_ConfigChannel+0x2d4>
 8101460:	683b      	ldr	r3, [r7, #0]
 8101462:	681b      	ldr	r3, [r3, #0]
 8101464:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8101468:	fa93 f3a3 	rbit	r3, r3
 810146c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 810146e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8101470:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8101472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8101474:	2b00      	cmp	r3, #0
 8101476:	d101      	bne.n	810147c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8101478:	2320      	movs	r3, #32
 810147a:	e003      	b.n	8101484 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 810147c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810147e:	fab3 f383 	clz	r3, r3
 8101482:	b2db      	uxtb	r3, r3
 8101484:	3301      	adds	r3, #1
 8101486:	f003 031f 	and.w	r3, r3, #31
 810148a:	2b09      	cmp	r3, #9
 810148c:	bf94      	ite	ls
 810148e:	2301      	movls	r3, #1
 8101490:	2300      	movhi	r3, #0
 8101492:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101494:	2b00      	cmp	r3, #0
 8101496:	d079      	beq.n	810158c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101498:	683b      	ldr	r3, [r7, #0]
 810149a:	681b      	ldr	r3, [r3, #0]
 810149c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81014a0:	2b00      	cmp	r3, #0
 81014a2:	d107      	bne.n	81014b4 <HAL_ADC_ConfigChannel+0x2f4>
 81014a4:	683b      	ldr	r3, [r7, #0]
 81014a6:	681b      	ldr	r3, [r3, #0]
 81014a8:	0e9b      	lsrs	r3, r3, #26
 81014aa:	3301      	adds	r3, #1
 81014ac:	069b      	lsls	r3, r3, #26
 81014ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81014b2:	e015      	b.n	81014e0 <HAL_ADC_ConfigChannel+0x320>
 81014b4:	683b      	ldr	r3, [r7, #0]
 81014b6:	681b      	ldr	r3, [r3, #0]
 81014b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81014ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81014bc:	fa93 f3a3 	rbit	r3, r3
 81014c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 81014c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81014c4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 81014c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	d101      	bne.n	81014d0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 81014cc:	2320      	movs	r3, #32
 81014ce:	e003      	b.n	81014d8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 81014d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81014d2:	fab3 f383 	clz	r3, r3
 81014d6:	b2db      	uxtb	r3, r3
 81014d8:	3301      	adds	r3, #1
 81014da:	069b      	lsls	r3, r3, #26
 81014dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81014e0:	683b      	ldr	r3, [r7, #0]
 81014e2:	681b      	ldr	r3, [r3, #0]
 81014e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	d109      	bne.n	8101500 <HAL_ADC_ConfigChannel+0x340>
 81014ec:	683b      	ldr	r3, [r7, #0]
 81014ee:	681b      	ldr	r3, [r3, #0]
 81014f0:	0e9b      	lsrs	r3, r3, #26
 81014f2:	3301      	adds	r3, #1
 81014f4:	f003 031f 	and.w	r3, r3, #31
 81014f8:	2101      	movs	r1, #1
 81014fa:	fa01 f303 	lsl.w	r3, r1, r3
 81014fe:	e017      	b.n	8101530 <HAL_ADC_ConfigChannel+0x370>
 8101500:	683b      	ldr	r3, [r7, #0]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8101508:	fa93 f3a3 	rbit	r3, r3
 810150c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 810150e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101510:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8101512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101514:	2b00      	cmp	r3, #0
 8101516:	d101      	bne.n	810151c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8101518:	2320      	movs	r3, #32
 810151a:	e003      	b.n	8101524 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 810151c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810151e:	fab3 f383 	clz	r3, r3
 8101522:	b2db      	uxtb	r3, r3
 8101524:	3301      	adds	r3, #1
 8101526:	f003 031f 	and.w	r3, r3, #31
 810152a:	2101      	movs	r1, #1
 810152c:	fa01 f303 	lsl.w	r3, r1, r3
 8101530:	ea42 0103 	orr.w	r1, r2, r3
 8101534:	683b      	ldr	r3, [r7, #0]
 8101536:	681b      	ldr	r3, [r3, #0]
 8101538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810153c:	2b00      	cmp	r3, #0
 810153e:	d10a      	bne.n	8101556 <HAL_ADC_ConfigChannel+0x396>
 8101540:	683b      	ldr	r3, [r7, #0]
 8101542:	681b      	ldr	r3, [r3, #0]
 8101544:	0e9b      	lsrs	r3, r3, #26
 8101546:	3301      	adds	r3, #1
 8101548:	f003 021f 	and.w	r2, r3, #31
 810154c:	4613      	mov	r3, r2
 810154e:	005b      	lsls	r3, r3, #1
 8101550:	4413      	add	r3, r2
 8101552:	051b      	lsls	r3, r3, #20
 8101554:	e018      	b.n	8101588 <HAL_ADC_ConfigChannel+0x3c8>
 8101556:	683b      	ldr	r3, [r7, #0]
 8101558:	681b      	ldr	r3, [r3, #0]
 810155a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810155e:	fa93 f3a3 	rbit	r3, r3
 8101562:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8101564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101566:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8101568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810156a:	2b00      	cmp	r3, #0
 810156c:	d101      	bne.n	8101572 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 810156e:	2320      	movs	r3, #32
 8101570:	e003      	b.n	810157a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8101572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101574:	fab3 f383 	clz	r3, r3
 8101578:	b2db      	uxtb	r3, r3
 810157a:	3301      	adds	r3, #1
 810157c:	f003 021f 	and.w	r2, r3, #31
 8101580:	4613      	mov	r3, r2
 8101582:	005b      	lsls	r3, r3, #1
 8101584:	4413      	add	r3, r2
 8101586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101588:	430b      	orrs	r3, r1
 810158a:	e07e      	b.n	810168a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810158c:	683b      	ldr	r3, [r7, #0]
 810158e:	681b      	ldr	r3, [r3, #0]
 8101590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101594:	2b00      	cmp	r3, #0
 8101596:	d107      	bne.n	81015a8 <HAL_ADC_ConfigChannel+0x3e8>
 8101598:	683b      	ldr	r3, [r7, #0]
 810159a:	681b      	ldr	r3, [r3, #0]
 810159c:	0e9b      	lsrs	r3, r3, #26
 810159e:	3301      	adds	r3, #1
 81015a0:	069b      	lsls	r3, r3, #26
 81015a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81015a6:	e015      	b.n	81015d4 <HAL_ADC_ConfigChannel+0x414>
 81015a8:	683b      	ldr	r3, [r7, #0]
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81015ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81015b0:	fa93 f3a3 	rbit	r3, r3
 81015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 81015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 81015ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81015bc:	2b00      	cmp	r3, #0
 81015be:	d101      	bne.n	81015c4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 81015c0:	2320      	movs	r3, #32
 81015c2:	e003      	b.n	81015cc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 81015c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81015c6:	fab3 f383 	clz	r3, r3
 81015ca:	b2db      	uxtb	r3, r3
 81015cc:	3301      	adds	r3, #1
 81015ce:	069b      	lsls	r3, r3, #26
 81015d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81015d4:	683b      	ldr	r3, [r7, #0]
 81015d6:	681b      	ldr	r3, [r3, #0]
 81015d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81015dc:	2b00      	cmp	r3, #0
 81015de:	d109      	bne.n	81015f4 <HAL_ADC_ConfigChannel+0x434>
 81015e0:	683b      	ldr	r3, [r7, #0]
 81015e2:	681b      	ldr	r3, [r3, #0]
 81015e4:	0e9b      	lsrs	r3, r3, #26
 81015e6:	3301      	adds	r3, #1
 81015e8:	f003 031f 	and.w	r3, r3, #31
 81015ec:	2101      	movs	r1, #1
 81015ee:	fa01 f303 	lsl.w	r3, r1, r3
 81015f2:	e017      	b.n	8101624 <HAL_ADC_ConfigChannel+0x464>
 81015f4:	683b      	ldr	r3, [r7, #0]
 81015f6:	681b      	ldr	r3, [r3, #0]
 81015f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81015fa:	69fb      	ldr	r3, [r7, #28]
 81015fc:	fa93 f3a3 	rbit	r3, r3
 8101600:	61bb      	str	r3, [r7, #24]
  return result;
 8101602:	69bb      	ldr	r3, [r7, #24]
 8101604:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8101606:	6a3b      	ldr	r3, [r7, #32]
 8101608:	2b00      	cmp	r3, #0
 810160a:	d101      	bne.n	8101610 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 810160c:	2320      	movs	r3, #32
 810160e:	e003      	b.n	8101618 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8101610:	6a3b      	ldr	r3, [r7, #32]
 8101612:	fab3 f383 	clz	r3, r3
 8101616:	b2db      	uxtb	r3, r3
 8101618:	3301      	adds	r3, #1
 810161a:	f003 031f 	and.w	r3, r3, #31
 810161e:	2101      	movs	r1, #1
 8101620:	fa01 f303 	lsl.w	r3, r1, r3
 8101624:	ea42 0103 	orr.w	r1, r2, r3
 8101628:	683b      	ldr	r3, [r7, #0]
 810162a:	681b      	ldr	r3, [r3, #0]
 810162c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101630:	2b00      	cmp	r3, #0
 8101632:	d10d      	bne.n	8101650 <HAL_ADC_ConfigChannel+0x490>
 8101634:	683b      	ldr	r3, [r7, #0]
 8101636:	681b      	ldr	r3, [r3, #0]
 8101638:	0e9b      	lsrs	r3, r3, #26
 810163a:	3301      	adds	r3, #1
 810163c:	f003 021f 	and.w	r2, r3, #31
 8101640:	4613      	mov	r3, r2
 8101642:	005b      	lsls	r3, r3, #1
 8101644:	4413      	add	r3, r2
 8101646:	3b1e      	subs	r3, #30
 8101648:	051b      	lsls	r3, r3, #20
 810164a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810164e:	e01b      	b.n	8101688 <HAL_ADC_ConfigChannel+0x4c8>
 8101650:	683b      	ldr	r3, [r7, #0]
 8101652:	681b      	ldr	r3, [r3, #0]
 8101654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101656:	693b      	ldr	r3, [r7, #16]
 8101658:	fa93 f3a3 	rbit	r3, r3
 810165c:	60fb      	str	r3, [r7, #12]
  return result;
 810165e:	68fb      	ldr	r3, [r7, #12]
 8101660:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8101662:	697b      	ldr	r3, [r7, #20]
 8101664:	2b00      	cmp	r3, #0
 8101666:	d101      	bne.n	810166c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8101668:	2320      	movs	r3, #32
 810166a:	e003      	b.n	8101674 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 810166c:	697b      	ldr	r3, [r7, #20]
 810166e:	fab3 f383 	clz	r3, r3
 8101672:	b2db      	uxtb	r3, r3
 8101674:	3301      	adds	r3, #1
 8101676:	f003 021f 	and.w	r2, r3, #31
 810167a:	4613      	mov	r3, r2
 810167c:	005b      	lsls	r3, r3, #1
 810167e:	4413      	add	r3, r2
 8101680:	3b1e      	subs	r3, #30
 8101682:	051b      	lsls	r3, r3, #20
 8101684:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101688:	430b      	orrs	r3, r1
 810168a:	683a      	ldr	r2, [r7, #0]
 810168c:	6892      	ldr	r2, [r2, #8]
 810168e:	4619      	mov	r1, r3
 8101690:	f7ff fb1c 	bl	8100ccc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8101694:	683b      	ldr	r3, [r7, #0]
 8101696:	681b      	ldr	r3, [r3, #0]
 8101698:	2b00      	cmp	r3, #0
 810169a:	f280 80cf 	bge.w	810183c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	4a06      	ldr	r2, [pc, #24]	@ (81016bc <HAL_ADC_ConfigChannel+0x4fc>)
 81016a4:	4293      	cmp	r3, r2
 81016a6:	d004      	beq.n	81016b2 <HAL_ADC_ConfigChannel+0x4f2>
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	4a04      	ldr	r2, [pc, #16]	@ (81016c0 <HAL_ADC_ConfigChannel+0x500>)
 81016ae:	4293      	cmp	r3, r2
 81016b0:	d10a      	bne.n	81016c8 <HAL_ADC_ConfigChannel+0x508>
 81016b2:	4b04      	ldr	r3, [pc, #16]	@ (81016c4 <HAL_ADC_ConfigChannel+0x504>)
 81016b4:	e009      	b.n	81016ca <HAL_ADC_ConfigChannel+0x50a>
 81016b6:	bf00      	nop
 81016b8:	47ff0000 	.word	0x47ff0000
 81016bc:	40022000 	.word	0x40022000
 81016c0:	40022100 	.word	0x40022100
 81016c4:	40022300 	.word	0x40022300
 81016c8:	4b61      	ldr	r3, [pc, #388]	@ (8101850 <HAL_ADC_ConfigChannel+0x690>)
 81016ca:	4618      	mov	r0, r3
 81016cc:	f7ff fa70 	bl	8100bb0 <LL_ADC_GetCommonPathInternalCh>
 81016d0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	681b      	ldr	r3, [r3, #0]
 81016d6:	4a5f      	ldr	r2, [pc, #380]	@ (8101854 <HAL_ADC_ConfigChannel+0x694>)
 81016d8:	4293      	cmp	r3, r2
 81016da:	d004      	beq.n	81016e6 <HAL_ADC_ConfigChannel+0x526>
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	681b      	ldr	r3, [r3, #0]
 81016e0:	4a5d      	ldr	r2, [pc, #372]	@ (8101858 <HAL_ADC_ConfigChannel+0x698>)
 81016e2:	4293      	cmp	r3, r2
 81016e4:	d10e      	bne.n	8101704 <HAL_ADC_ConfigChannel+0x544>
 81016e6:	485b      	ldr	r0, [pc, #364]	@ (8101854 <HAL_ADC_ConfigChannel+0x694>)
 81016e8:	f7ff fb8e 	bl	8100e08 <LL_ADC_IsEnabled>
 81016ec:	4604      	mov	r4, r0
 81016ee:	485a      	ldr	r0, [pc, #360]	@ (8101858 <HAL_ADC_ConfigChannel+0x698>)
 81016f0:	f7ff fb8a 	bl	8100e08 <LL_ADC_IsEnabled>
 81016f4:	4603      	mov	r3, r0
 81016f6:	4323      	orrs	r3, r4
 81016f8:	2b00      	cmp	r3, #0
 81016fa:	bf0c      	ite	eq
 81016fc:	2301      	moveq	r3, #1
 81016fe:	2300      	movne	r3, #0
 8101700:	b2db      	uxtb	r3, r3
 8101702:	e008      	b.n	8101716 <HAL_ADC_ConfigChannel+0x556>
 8101704:	4855      	ldr	r0, [pc, #340]	@ (810185c <HAL_ADC_ConfigChannel+0x69c>)
 8101706:	f7ff fb7f 	bl	8100e08 <LL_ADC_IsEnabled>
 810170a:	4603      	mov	r3, r0
 810170c:	2b00      	cmp	r3, #0
 810170e:	bf0c      	ite	eq
 8101710:	2301      	moveq	r3, #1
 8101712:	2300      	movne	r3, #0
 8101714:	b2db      	uxtb	r3, r3
 8101716:	2b00      	cmp	r3, #0
 8101718:	d07d      	beq.n	8101816 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810171a:	683b      	ldr	r3, [r7, #0]
 810171c:	681b      	ldr	r3, [r3, #0]
 810171e:	4a50      	ldr	r2, [pc, #320]	@ (8101860 <HAL_ADC_ConfigChannel+0x6a0>)
 8101720:	4293      	cmp	r3, r2
 8101722:	d130      	bne.n	8101786 <HAL_ADC_ConfigChannel+0x5c6>
 8101724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810172a:	2b00      	cmp	r3, #0
 810172c:	d12b      	bne.n	8101786 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810172e:	687b      	ldr	r3, [r7, #4]
 8101730:	681b      	ldr	r3, [r3, #0]
 8101732:	4a4a      	ldr	r2, [pc, #296]	@ (810185c <HAL_ADC_ConfigChannel+0x69c>)
 8101734:	4293      	cmp	r3, r2
 8101736:	f040 8081 	bne.w	810183c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	681b      	ldr	r3, [r3, #0]
 810173e:	4a45      	ldr	r2, [pc, #276]	@ (8101854 <HAL_ADC_ConfigChannel+0x694>)
 8101740:	4293      	cmp	r3, r2
 8101742:	d004      	beq.n	810174e <HAL_ADC_ConfigChannel+0x58e>
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	681b      	ldr	r3, [r3, #0]
 8101748:	4a43      	ldr	r2, [pc, #268]	@ (8101858 <HAL_ADC_ConfigChannel+0x698>)
 810174a:	4293      	cmp	r3, r2
 810174c:	d101      	bne.n	8101752 <HAL_ADC_ConfigChannel+0x592>
 810174e:	4a45      	ldr	r2, [pc, #276]	@ (8101864 <HAL_ADC_ConfigChannel+0x6a4>)
 8101750:	e000      	b.n	8101754 <HAL_ADC_ConfigChannel+0x594>
 8101752:	4a3f      	ldr	r2, [pc, #252]	@ (8101850 <HAL_ADC_ConfigChannel+0x690>)
 8101754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101756:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810175a:	4619      	mov	r1, r3
 810175c:	4610      	mov	r0, r2
 810175e:	f7ff fa14 	bl	8100b8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101762:	4b41      	ldr	r3, [pc, #260]	@ (8101868 <HAL_ADC_ConfigChannel+0x6a8>)
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	099b      	lsrs	r3, r3, #6
 8101768:	4a40      	ldr	r2, [pc, #256]	@ (810186c <HAL_ADC_ConfigChannel+0x6ac>)
 810176a:	fba2 2303 	umull	r2, r3, r2, r3
 810176e:	099b      	lsrs	r3, r3, #6
 8101770:	3301      	adds	r3, #1
 8101772:	005b      	lsls	r3, r3, #1
 8101774:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101776:	e002      	b.n	810177e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8101778:	68bb      	ldr	r3, [r7, #8]
 810177a:	3b01      	subs	r3, #1
 810177c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810177e:	68bb      	ldr	r3, [r7, #8]
 8101780:	2b00      	cmp	r3, #0
 8101782:	d1f9      	bne.n	8101778 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101784:	e05a      	b.n	810183c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101786:	683b      	ldr	r3, [r7, #0]
 8101788:	681b      	ldr	r3, [r3, #0]
 810178a:	4a39      	ldr	r2, [pc, #228]	@ (8101870 <HAL_ADC_ConfigChannel+0x6b0>)
 810178c:	4293      	cmp	r3, r2
 810178e:	d11e      	bne.n	81017ce <HAL_ADC_ConfigChannel+0x60e>
 8101790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101796:	2b00      	cmp	r3, #0
 8101798:	d119      	bne.n	81017ce <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810179a:	687b      	ldr	r3, [r7, #4]
 810179c:	681b      	ldr	r3, [r3, #0]
 810179e:	4a2f      	ldr	r2, [pc, #188]	@ (810185c <HAL_ADC_ConfigChannel+0x69c>)
 81017a0:	4293      	cmp	r3, r2
 81017a2:	d14b      	bne.n	810183c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	681b      	ldr	r3, [r3, #0]
 81017a8:	4a2a      	ldr	r2, [pc, #168]	@ (8101854 <HAL_ADC_ConfigChannel+0x694>)
 81017aa:	4293      	cmp	r3, r2
 81017ac:	d004      	beq.n	81017b8 <HAL_ADC_ConfigChannel+0x5f8>
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	681b      	ldr	r3, [r3, #0]
 81017b2:	4a29      	ldr	r2, [pc, #164]	@ (8101858 <HAL_ADC_ConfigChannel+0x698>)
 81017b4:	4293      	cmp	r3, r2
 81017b6:	d101      	bne.n	81017bc <HAL_ADC_ConfigChannel+0x5fc>
 81017b8:	4a2a      	ldr	r2, [pc, #168]	@ (8101864 <HAL_ADC_ConfigChannel+0x6a4>)
 81017ba:	e000      	b.n	81017be <HAL_ADC_ConfigChannel+0x5fe>
 81017bc:	4a24      	ldr	r2, [pc, #144]	@ (8101850 <HAL_ADC_ConfigChannel+0x690>)
 81017be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81017c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81017c4:	4619      	mov	r1, r3
 81017c6:	4610      	mov	r0, r2
 81017c8:	f7ff f9df 	bl	8100b8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81017cc:	e036      	b.n	810183c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81017ce:	683b      	ldr	r3, [r7, #0]
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	4a28      	ldr	r2, [pc, #160]	@ (8101874 <HAL_ADC_ConfigChannel+0x6b4>)
 81017d4:	4293      	cmp	r3, r2
 81017d6:	d131      	bne.n	810183c <HAL_ADC_ConfigChannel+0x67c>
 81017d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81017da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81017de:	2b00      	cmp	r3, #0
 81017e0:	d12c      	bne.n	810183c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81017e2:	687b      	ldr	r3, [r7, #4]
 81017e4:	681b      	ldr	r3, [r3, #0]
 81017e6:	4a1d      	ldr	r2, [pc, #116]	@ (810185c <HAL_ADC_ConfigChannel+0x69c>)
 81017e8:	4293      	cmp	r3, r2
 81017ea:	d127      	bne.n	810183c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81017ec:	687b      	ldr	r3, [r7, #4]
 81017ee:	681b      	ldr	r3, [r3, #0]
 81017f0:	4a18      	ldr	r2, [pc, #96]	@ (8101854 <HAL_ADC_ConfigChannel+0x694>)
 81017f2:	4293      	cmp	r3, r2
 81017f4:	d004      	beq.n	8101800 <HAL_ADC_ConfigChannel+0x640>
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	681b      	ldr	r3, [r3, #0]
 81017fa:	4a17      	ldr	r2, [pc, #92]	@ (8101858 <HAL_ADC_ConfigChannel+0x698>)
 81017fc:	4293      	cmp	r3, r2
 81017fe:	d101      	bne.n	8101804 <HAL_ADC_ConfigChannel+0x644>
 8101800:	4a18      	ldr	r2, [pc, #96]	@ (8101864 <HAL_ADC_ConfigChannel+0x6a4>)
 8101802:	e000      	b.n	8101806 <HAL_ADC_ConfigChannel+0x646>
 8101804:	4a12      	ldr	r2, [pc, #72]	@ (8101850 <HAL_ADC_ConfigChannel+0x690>)
 8101806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101808:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810180c:	4619      	mov	r1, r3
 810180e:	4610      	mov	r0, r2
 8101810:	f7ff f9bb 	bl	8100b8a <LL_ADC_SetCommonPathInternalCh>
 8101814:	e012      	b.n	810183c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810181a:	f043 0220 	orr.w	r2, r3, #32
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8101822:	2301      	movs	r3, #1
 8101824:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8101828:	e008      	b.n	810183c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810182e:	f043 0220 	orr.w	r2, r3, #32
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101836:	2301      	movs	r3, #1
 8101838:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	2200      	movs	r2, #0
 8101840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8101844:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8101848:	4618      	mov	r0, r3
 810184a:	3784      	adds	r7, #132	@ 0x84
 810184c:	46bd      	mov	sp, r7
 810184e:	bd90      	pop	{r4, r7, pc}
 8101850:	58026300 	.word	0x58026300
 8101854:	40022000 	.word	0x40022000
 8101858:	40022100 	.word	0x40022100
 810185c:	58026000 	.word	0x58026000
 8101860:	cb840000 	.word	0xcb840000
 8101864:	40022300 	.word	0x40022300
 8101868:	10000000 	.word	0x10000000
 810186c:	053e2d63 	.word	0x053e2d63
 8101870:	c7520000 	.word	0xc7520000
 8101874:	cfb80000 	.word	0xcfb80000

08101878 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8101878:	b580      	push	{r7, lr}
 810187a:	b084      	sub	sp, #16
 810187c:	af00      	add	r7, sp, #0
 810187e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	4a7a      	ldr	r2, [pc, #488]	@ (8101a70 <ADC_ConfigureBoostMode+0x1f8>)
 8101886:	4293      	cmp	r3, r2
 8101888:	d004      	beq.n	8101894 <ADC_ConfigureBoostMode+0x1c>
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	681b      	ldr	r3, [r3, #0]
 810188e:	4a79      	ldr	r2, [pc, #484]	@ (8101a74 <ADC_ConfigureBoostMode+0x1fc>)
 8101890:	4293      	cmp	r3, r2
 8101892:	d109      	bne.n	81018a8 <ADC_ConfigureBoostMode+0x30>
 8101894:	4b78      	ldr	r3, [pc, #480]	@ (8101a78 <ADC_ConfigureBoostMode+0x200>)
 8101896:	689b      	ldr	r3, [r3, #8]
 8101898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810189c:	2b00      	cmp	r3, #0
 810189e:	bf14      	ite	ne
 81018a0:	2301      	movne	r3, #1
 81018a2:	2300      	moveq	r3, #0
 81018a4:	b2db      	uxtb	r3, r3
 81018a6:	e008      	b.n	81018ba <ADC_ConfigureBoostMode+0x42>
 81018a8:	4b74      	ldr	r3, [pc, #464]	@ (8101a7c <ADC_ConfigureBoostMode+0x204>)
 81018aa:	689b      	ldr	r3, [r3, #8]
 81018ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81018b0:	2b00      	cmp	r3, #0
 81018b2:	bf14      	ite	ne
 81018b4:	2301      	movne	r3, #1
 81018b6:	2300      	moveq	r3, #0
 81018b8:	b2db      	uxtb	r3, r3
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	d01c      	beq.n	81018f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81018be:	f000 feab 	bl	8102618 <HAL_RCC_GetHCLKFreq>
 81018c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81018c4:	687b      	ldr	r3, [r7, #4]
 81018c6:	685b      	ldr	r3, [r3, #4]
 81018c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81018cc:	d010      	beq.n	81018f0 <ADC_ConfigureBoostMode+0x78>
 81018ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81018d2:	d873      	bhi.n	81019bc <ADC_ConfigureBoostMode+0x144>
 81018d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81018d8:	d002      	beq.n	81018e0 <ADC_ConfigureBoostMode+0x68>
 81018da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81018de:	d16d      	bne.n	81019bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	685b      	ldr	r3, [r3, #4]
 81018e4:	0c1b      	lsrs	r3, r3, #16
 81018e6:	68fa      	ldr	r2, [r7, #12]
 81018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 81018ec:	60fb      	str	r3, [r7, #12]
        break;
 81018ee:	e068      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	089b      	lsrs	r3, r3, #2
 81018f4:	60fb      	str	r3, [r7, #12]
        break;
 81018f6:	e064      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81018f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81018fc:	f04f 0100 	mov.w	r1, #0
 8101900:	f002 f91c 	bl	8103b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8101904:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	685b      	ldr	r3, [r3, #4]
 810190a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 810190e:	d051      	beq.n	81019b4 <ADC_ConfigureBoostMode+0x13c>
 8101910:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8101914:	d854      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 8101916:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 810191a:	d047      	beq.n	81019ac <ADC_ConfigureBoostMode+0x134>
 810191c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8101920:	d84e      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 8101922:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8101926:	d03d      	beq.n	81019a4 <ADC_ConfigureBoostMode+0x12c>
 8101928:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 810192c:	d848      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 810192e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101932:	d033      	beq.n	810199c <ADC_ConfigureBoostMode+0x124>
 8101934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101938:	d842      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 810193a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 810193e:	d029      	beq.n	8101994 <ADC_ConfigureBoostMode+0x11c>
 8101940:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8101944:	d83c      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 8101946:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 810194a:	d01a      	beq.n	8101982 <ADC_ConfigureBoostMode+0x10a>
 810194c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101950:	d836      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 8101952:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8101956:	d014      	beq.n	8101982 <ADC_ConfigureBoostMode+0x10a>
 8101958:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810195c:	d830      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 810195e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101962:	d00e      	beq.n	8101982 <ADC_ConfigureBoostMode+0x10a>
 8101964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101968:	d82a      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 810196a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810196e:	d008      	beq.n	8101982 <ADC_ConfigureBoostMode+0x10a>
 8101970:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8101974:	d824      	bhi.n	81019c0 <ADC_ConfigureBoostMode+0x148>
 8101976:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810197a:	d002      	beq.n	8101982 <ADC_ConfigureBoostMode+0x10a>
 810197c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8101980:	d11e      	bne.n	81019c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8101982:	687b      	ldr	r3, [r7, #4]
 8101984:	685b      	ldr	r3, [r3, #4]
 8101986:	0c9b      	lsrs	r3, r3, #18
 8101988:	005b      	lsls	r3, r3, #1
 810198a:	68fa      	ldr	r2, [r7, #12]
 810198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8101990:	60fb      	str	r3, [r7, #12]
        break;
 8101992:	e016      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8101994:	68fb      	ldr	r3, [r7, #12]
 8101996:	091b      	lsrs	r3, r3, #4
 8101998:	60fb      	str	r3, [r7, #12]
        break;
 810199a:	e012      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 810199c:	68fb      	ldr	r3, [r7, #12]
 810199e:	095b      	lsrs	r3, r3, #5
 81019a0:	60fb      	str	r3, [r7, #12]
        break;
 81019a2:	e00e      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81019a4:	68fb      	ldr	r3, [r7, #12]
 81019a6:	099b      	lsrs	r3, r3, #6
 81019a8:	60fb      	str	r3, [r7, #12]
        break;
 81019aa:	e00a      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81019ac:	68fb      	ldr	r3, [r7, #12]
 81019ae:	09db      	lsrs	r3, r3, #7
 81019b0:	60fb      	str	r3, [r7, #12]
        break;
 81019b2:	e006      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81019b4:	68fb      	ldr	r3, [r7, #12]
 81019b6:	0a1b      	lsrs	r3, r3, #8
 81019b8:	60fb      	str	r3, [r7, #12]
        break;
 81019ba:	e002      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 81019bc:	bf00      	nop
 81019be:	e000      	b.n	81019c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 81019c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81019c2:	f7ff f8ad 	bl	8100b20 <HAL_GetREVID>
 81019c6:	4603      	mov	r3, r0
 81019c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 81019cc:	4293      	cmp	r3, r2
 81019ce:	d815      	bhi.n	81019fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81019d0:	68fb      	ldr	r3, [r7, #12]
 81019d2:	4a2b      	ldr	r2, [pc, #172]	@ (8101a80 <ADC_ConfigureBoostMode+0x208>)
 81019d4:	4293      	cmp	r3, r2
 81019d6:	d908      	bls.n	81019ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	681b      	ldr	r3, [r3, #0]
 81019dc:	689a      	ldr	r2, [r3, #8]
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	681b      	ldr	r3, [r3, #0]
 81019e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81019e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81019e8:	e03e      	b.n	8101a68 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81019ea:	687b      	ldr	r3, [r7, #4]
 81019ec:	681b      	ldr	r3, [r3, #0]
 81019ee:	689a      	ldr	r2, [r3, #8]
 81019f0:	687b      	ldr	r3, [r7, #4]
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81019f8:	609a      	str	r2, [r3, #8]
}
 81019fa:	e035      	b.n	8101a68 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81019fc:	68fb      	ldr	r3, [r7, #12]
 81019fe:	085b      	lsrs	r3, r3, #1
 8101a00:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8101a02:	68fb      	ldr	r3, [r7, #12]
 8101a04:	4a1f      	ldr	r2, [pc, #124]	@ (8101a84 <ADC_ConfigureBoostMode+0x20c>)
 8101a06:	4293      	cmp	r3, r2
 8101a08:	d808      	bhi.n	8101a1c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8101a0a:	687b      	ldr	r3, [r7, #4]
 8101a0c:	681b      	ldr	r3, [r3, #0]
 8101a0e:	689a      	ldr	r2, [r3, #8]
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8101a18:	609a      	str	r2, [r3, #8]
}
 8101a1a:	e025      	b.n	8101a68 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8101a1c:	68fb      	ldr	r3, [r7, #12]
 8101a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8101a88 <ADC_ConfigureBoostMode+0x210>)
 8101a20:	4293      	cmp	r3, r2
 8101a22:	d80a      	bhi.n	8101a3a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	689b      	ldr	r3, [r3, #8]
 8101a2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101a36:	609a      	str	r2, [r3, #8]
}
 8101a38:	e016      	b.n	8101a68 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8101a3a:	68fb      	ldr	r3, [r7, #12]
 8101a3c:	4a13      	ldr	r2, [pc, #76]	@ (8101a8c <ADC_ConfigureBoostMode+0x214>)
 8101a3e:	4293      	cmp	r3, r2
 8101a40:	d80a      	bhi.n	8101a58 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	681b      	ldr	r3, [r3, #0]
 8101a46:	689b      	ldr	r3, [r3, #8]
 8101a48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8101a54:	609a      	str	r2, [r3, #8]
}
 8101a56:	e007      	b.n	8101a68 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	681b      	ldr	r3, [r3, #0]
 8101a5c:	689a      	ldr	r2, [r3, #8]
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8101a66:	609a      	str	r2, [r3, #8]
}
 8101a68:	bf00      	nop
 8101a6a:	3710      	adds	r7, #16
 8101a6c:	46bd      	mov	sp, r7
 8101a6e:	bd80      	pop	{r7, pc}
 8101a70:	40022000 	.word	0x40022000
 8101a74:	40022100 	.word	0x40022100
 8101a78:	40022300 	.word	0x40022300
 8101a7c:	58026300 	.word	0x58026300
 8101a80:	01312d00 	.word	0x01312d00
 8101a84:	005f5e10 	.word	0x005f5e10
 8101a88:	00bebc20 	.word	0x00bebc20
 8101a8c:	017d7840 	.word	0x017d7840

08101a90 <LL_ADC_IsEnabled>:
{
 8101a90:	b480      	push	{r7}
 8101a92:	b083      	sub	sp, #12
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	689b      	ldr	r3, [r3, #8]
 8101a9c:	f003 0301 	and.w	r3, r3, #1
 8101aa0:	2b01      	cmp	r3, #1
 8101aa2:	d101      	bne.n	8101aa8 <LL_ADC_IsEnabled+0x18>
 8101aa4:	2301      	movs	r3, #1
 8101aa6:	e000      	b.n	8101aaa <LL_ADC_IsEnabled+0x1a>
 8101aa8:	2300      	movs	r3, #0
}
 8101aaa:	4618      	mov	r0, r3
 8101aac:	370c      	adds	r7, #12
 8101aae:	46bd      	mov	sp, r7
 8101ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab4:	4770      	bx	lr

08101ab6 <LL_ADC_REG_IsConversionOngoing>:
{
 8101ab6:	b480      	push	{r7}
 8101ab8:	b083      	sub	sp, #12
 8101aba:	af00      	add	r7, sp, #0
 8101abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	689b      	ldr	r3, [r3, #8]
 8101ac2:	f003 0304 	and.w	r3, r3, #4
 8101ac6:	2b04      	cmp	r3, #4
 8101ac8:	d101      	bne.n	8101ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8101aca:	2301      	movs	r3, #1
 8101acc:	e000      	b.n	8101ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101ace:	2300      	movs	r3, #0
}
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	370c      	adds	r7, #12
 8101ad4:	46bd      	mov	sp, r7
 8101ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ada:	4770      	bx	lr

08101adc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8101adc:	b590      	push	{r4, r7, lr}
 8101ade:	b09f      	sub	sp, #124	@ 0x7c
 8101ae0:	af00      	add	r7, sp, #0
 8101ae2:	6078      	str	r0, [r7, #4]
 8101ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8101af2:	2b01      	cmp	r3, #1
 8101af4:	d101      	bne.n	8101afa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8101af6:	2302      	movs	r3, #2
 8101af8:	e0c4      	b.n	8101c84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	2201      	movs	r2, #1
 8101afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8101b02:	2300      	movs	r3, #0
 8101b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8101b06:	2300      	movs	r3, #0
 8101b08:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	681b      	ldr	r3, [r3, #0]
 8101b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8101c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101b10:	4293      	cmp	r3, r2
 8101b12:	d102      	bne.n	8101b1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8101b14:	4b5e      	ldr	r3, [pc, #376]	@ (8101c90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101b16:	60bb      	str	r3, [r7, #8]
 8101b18:	e001      	b.n	8101b1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8101b1a:	2300      	movs	r3, #0
 8101b1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8101b1e:	68bb      	ldr	r3, [r7, #8]
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d10b      	bne.n	8101b3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101b28:	f043 0220 	orr.w	r2, r3, #32
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	2200      	movs	r2, #0
 8101b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8101b38:	2301      	movs	r3, #1
 8101b3a:	e0a3      	b.n	8101c84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8101b3c:	68bb      	ldr	r3, [r7, #8]
 8101b3e:	4618      	mov	r0, r3
 8101b40:	f7ff ffb9 	bl	8101ab6 <LL_ADC_REG_IsConversionOngoing>
 8101b44:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	681b      	ldr	r3, [r3, #0]
 8101b4a:	4618      	mov	r0, r3
 8101b4c:	f7ff ffb3 	bl	8101ab6 <LL_ADC_REG_IsConversionOngoing>
 8101b50:	4603      	mov	r3, r0
 8101b52:	2b00      	cmp	r3, #0
 8101b54:	f040 8085 	bne.w	8101c62 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8101b58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8101b5a:	2b00      	cmp	r3, #0
 8101b5c:	f040 8081 	bne.w	8101c62 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	681b      	ldr	r3, [r3, #0]
 8101b64:	4a49      	ldr	r2, [pc, #292]	@ (8101c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101b66:	4293      	cmp	r3, r2
 8101b68:	d004      	beq.n	8101b74 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	4a48      	ldr	r2, [pc, #288]	@ (8101c90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101b70:	4293      	cmp	r3, r2
 8101b72:	d101      	bne.n	8101b78 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8101b74:	4b47      	ldr	r3, [pc, #284]	@ (8101c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8101b76:	e000      	b.n	8101b7a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8101b78:	4b47      	ldr	r3, [pc, #284]	@ (8101c98 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8101b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101b7c:	683b      	ldr	r3, [r7, #0]
 8101b7e:	681b      	ldr	r3, [r3, #0]
 8101b80:	2b00      	cmp	r3, #0
 8101b82:	d03b      	beq.n	8101bfc <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8101b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101b86:	689b      	ldr	r3, [r3, #8]
 8101b88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8101b8c:	683b      	ldr	r3, [r7, #0]
 8101b8e:	685b      	ldr	r3, [r3, #4]
 8101b90:	431a      	orrs	r2, r3
 8101b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101b94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	4a3c      	ldr	r2, [pc, #240]	@ (8101c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101b9c:	4293      	cmp	r3, r2
 8101b9e:	d004      	beq.n	8101baa <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	681b      	ldr	r3, [r3, #0]
 8101ba4:	4a3a      	ldr	r2, [pc, #232]	@ (8101c90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101ba6:	4293      	cmp	r3, r2
 8101ba8:	d10e      	bne.n	8101bc8 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8101baa:	4838      	ldr	r0, [pc, #224]	@ (8101c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101bac:	f7ff ff70 	bl	8101a90 <LL_ADC_IsEnabled>
 8101bb0:	4604      	mov	r4, r0
 8101bb2:	4837      	ldr	r0, [pc, #220]	@ (8101c90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101bb4:	f7ff ff6c 	bl	8101a90 <LL_ADC_IsEnabled>
 8101bb8:	4603      	mov	r3, r0
 8101bba:	4323      	orrs	r3, r4
 8101bbc:	2b00      	cmp	r3, #0
 8101bbe:	bf0c      	ite	eq
 8101bc0:	2301      	moveq	r3, #1
 8101bc2:	2300      	movne	r3, #0
 8101bc4:	b2db      	uxtb	r3, r3
 8101bc6:	e008      	b.n	8101bda <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8101bc8:	4834      	ldr	r0, [pc, #208]	@ (8101c9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8101bca:	f7ff ff61 	bl	8101a90 <LL_ADC_IsEnabled>
 8101bce:	4603      	mov	r3, r0
 8101bd0:	2b00      	cmp	r3, #0
 8101bd2:	bf0c      	ite	eq
 8101bd4:	2301      	moveq	r3, #1
 8101bd6:	2300      	movne	r3, #0
 8101bd8:	b2db      	uxtb	r3, r3
 8101bda:	2b00      	cmp	r3, #0
 8101bdc:	d04b      	beq.n	8101c76 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8101bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101be0:	689b      	ldr	r3, [r3, #8]
 8101be2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8101be6:	f023 030f 	bic.w	r3, r3, #15
 8101bea:	683a      	ldr	r2, [r7, #0]
 8101bec:	6811      	ldr	r1, [r2, #0]
 8101bee:	683a      	ldr	r2, [r7, #0]
 8101bf0:	6892      	ldr	r2, [r2, #8]
 8101bf2:	430a      	orrs	r2, r1
 8101bf4:	431a      	orrs	r2, r3
 8101bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101bf8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101bfa:	e03c      	b.n	8101c76 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8101bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101bfe:	689b      	ldr	r3, [r3, #8]
 8101c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8101c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101c06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8101c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101c0e:	4293      	cmp	r3, r2
 8101c10:	d004      	beq.n	8101c1c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	4a1e      	ldr	r2, [pc, #120]	@ (8101c90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101c18:	4293      	cmp	r3, r2
 8101c1a:	d10e      	bne.n	8101c3a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8101c1c:	481b      	ldr	r0, [pc, #108]	@ (8101c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101c1e:	f7ff ff37 	bl	8101a90 <LL_ADC_IsEnabled>
 8101c22:	4604      	mov	r4, r0
 8101c24:	481a      	ldr	r0, [pc, #104]	@ (8101c90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101c26:	f7ff ff33 	bl	8101a90 <LL_ADC_IsEnabled>
 8101c2a:	4603      	mov	r3, r0
 8101c2c:	4323      	orrs	r3, r4
 8101c2e:	2b00      	cmp	r3, #0
 8101c30:	bf0c      	ite	eq
 8101c32:	2301      	moveq	r3, #1
 8101c34:	2300      	movne	r3, #0
 8101c36:	b2db      	uxtb	r3, r3
 8101c38:	e008      	b.n	8101c4c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8101c3a:	4818      	ldr	r0, [pc, #96]	@ (8101c9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8101c3c:	f7ff ff28 	bl	8101a90 <LL_ADC_IsEnabled>
 8101c40:	4603      	mov	r3, r0
 8101c42:	2b00      	cmp	r3, #0
 8101c44:	bf0c      	ite	eq
 8101c46:	2301      	moveq	r3, #1
 8101c48:	2300      	movne	r3, #0
 8101c4a:	b2db      	uxtb	r3, r3
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d012      	beq.n	8101c76 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8101c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101c52:	689b      	ldr	r3, [r3, #8]
 8101c54:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8101c58:	f023 030f 	bic.w	r3, r3, #15
 8101c5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8101c5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101c60:	e009      	b.n	8101c76 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101c66:	f043 0220 	orr.w	r2, r3, #32
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101c6e:	2301      	movs	r3, #1
 8101c70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8101c74:	e000      	b.n	8101c78 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101c76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	2200      	movs	r2, #0
 8101c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8101c80:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8101c84:	4618      	mov	r0, r3
 8101c86:	377c      	adds	r7, #124	@ 0x7c
 8101c88:	46bd      	mov	sp, r7
 8101c8a:	bd90      	pop	{r4, r7, pc}
 8101c8c:	40022000 	.word	0x40022000
 8101c90:	40022100 	.word	0x40022100
 8101c94:	40022300 	.word	0x40022300
 8101c98:	58026300 	.word	0x58026300
 8101c9c:	58026000 	.word	0x58026000

08101ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ca0:	b480      	push	{r7}
 8101ca2:	b085      	sub	sp, #20
 8101ca4:	af00      	add	r7, sp, #0
 8101ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	f003 0307 	and.w	r3, r3, #7
 8101cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8101ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8101cb2:	68db      	ldr	r3, [r3, #12]
 8101cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101cb6:	68ba      	ldr	r2, [r7, #8]
 8101cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101cbc:	4013      	ands	r3, r2
 8101cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101cc0:	68fb      	ldr	r3, [r7, #12]
 8101cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101cc4:	68bb      	ldr	r3, [r7, #8]
 8101cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101cd2:	4a04      	ldr	r2, [pc, #16]	@ (8101ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8101cd4:	68bb      	ldr	r3, [r7, #8]
 8101cd6:	60d3      	str	r3, [r2, #12]
}
 8101cd8:	bf00      	nop
 8101cda:	3714      	adds	r7, #20
 8101cdc:	46bd      	mov	sp, r7
 8101cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce2:	4770      	bx	lr
 8101ce4:	e000ed00 	.word	0xe000ed00

08101ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101ce8:	b480      	push	{r7}
 8101cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101cec:	4b04      	ldr	r3, [pc, #16]	@ (8101d00 <__NVIC_GetPriorityGrouping+0x18>)
 8101cee:	68db      	ldr	r3, [r3, #12]
 8101cf0:	0a1b      	lsrs	r3, r3, #8
 8101cf2:	f003 0307 	and.w	r3, r3, #7
}
 8101cf6:	4618      	mov	r0, r3
 8101cf8:	46bd      	mov	sp, r7
 8101cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cfe:	4770      	bx	lr
 8101d00:	e000ed00 	.word	0xe000ed00

08101d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101d04:	b480      	push	{r7}
 8101d06:	b083      	sub	sp, #12
 8101d08:	af00      	add	r7, sp, #0
 8101d0a:	4603      	mov	r3, r0
 8101d0c:	6039      	str	r1, [r7, #0]
 8101d0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d14:	2b00      	cmp	r3, #0
 8101d16:	db0a      	blt.n	8101d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d18:	683b      	ldr	r3, [r7, #0]
 8101d1a:	b2da      	uxtb	r2, r3
 8101d1c:	490c      	ldr	r1, [pc, #48]	@ (8101d50 <__NVIC_SetPriority+0x4c>)
 8101d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d22:	0112      	lsls	r2, r2, #4
 8101d24:	b2d2      	uxtb	r2, r2
 8101d26:	440b      	add	r3, r1
 8101d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101d2c:	e00a      	b.n	8101d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d2e:	683b      	ldr	r3, [r7, #0]
 8101d30:	b2da      	uxtb	r2, r3
 8101d32:	4908      	ldr	r1, [pc, #32]	@ (8101d54 <__NVIC_SetPriority+0x50>)
 8101d34:	88fb      	ldrh	r3, [r7, #6]
 8101d36:	f003 030f 	and.w	r3, r3, #15
 8101d3a:	3b04      	subs	r3, #4
 8101d3c:	0112      	lsls	r2, r2, #4
 8101d3e:	b2d2      	uxtb	r2, r2
 8101d40:	440b      	add	r3, r1
 8101d42:	761a      	strb	r2, [r3, #24]
}
 8101d44:	bf00      	nop
 8101d46:	370c      	adds	r7, #12
 8101d48:	46bd      	mov	sp, r7
 8101d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d4e:	4770      	bx	lr
 8101d50:	e000e100 	.word	0xe000e100
 8101d54:	e000ed00 	.word	0xe000ed00

08101d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d58:	b480      	push	{r7}
 8101d5a:	b089      	sub	sp, #36	@ 0x24
 8101d5c:	af00      	add	r7, sp, #0
 8101d5e:	60f8      	str	r0, [r7, #12]
 8101d60:	60b9      	str	r1, [r7, #8]
 8101d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101d64:	68fb      	ldr	r3, [r7, #12]
 8101d66:	f003 0307 	and.w	r3, r3, #7
 8101d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d6c:	69fb      	ldr	r3, [r7, #28]
 8101d6e:	f1c3 0307 	rsb	r3, r3, #7
 8101d72:	2b04      	cmp	r3, #4
 8101d74:	bf28      	it	cs
 8101d76:	2304      	movcs	r3, #4
 8101d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d7a:	69fb      	ldr	r3, [r7, #28]
 8101d7c:	3304      	adds	r3, #4
 8101d7e:	2b06      	cmp	r3, #6
 8101d80:	d902      	bls.n	8101d88 <NVIC_EncodePriority+0x30>
 8101d82:	69fb      	ldr	r3, [r7, #28]
 8101d84:	3b03      	subs	r3, #3
 8101d86:	e000      	b.n	8101d8a <NVIC_EncodePriority+0x32>
 8101d88:	2300      	movs	r3, #0
 8101d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8101d90:	69bb      	ldr	r3, [r7, #24]
 8101d92:	fa02 f303 	lsl.w	r3, r2, r3
 8101d96:	43da      	mvns	r2, r3
 8101d98:	68bb      	ldr	r3, [r7, #8]
 8101d9a:	401a      	ands	r2, r3
 8101d9c:	697b      	ldr	r3, [r7, #20]
 8101d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101da0:	f04f 31ff 	mov.w	r1, #4294967295
 8101da4:	697b      	ldr	r3, [r7, #20]
 8101da6:	fa01 f303 	lsl.w	r3, r1, r3
 8101daa:	43d9      	mvns	r1, r3
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101db0:	4313      	orrs	r3, r2
         );
}
 8101db2:	4618      	mov	r0, r3
 8101db4:	3724      	adds	r7, #36	@ 0x24
 8101db6:	46bd      	mov	sp, r7
 8101db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dbc:	4770      	bx	lr
	...

08101dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101dc0:	b580      	push	{r7, lr}
 8101dc2:	b082      	sub	sp, #8
 8101dc4:	af00      	add	r7, sp, #0
 8101dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	3b01      	subs	r3, #1
 8101dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101dd0:	d301      	bcc.n	8101dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101dd2:	2301      	movs	r3, #1
 8101dd4:	e00f      	b.n	8101df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8101e00 <SysTick_Config+0x40>)
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	3b01      	subs	r3, #1
 8101ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101dde:	210f      	movs	r1, #15
 8101de0:	f04f 30ff 	mov.w	r0, #4294967295
 8101de4:	f7ff ff8e 	bl	8101d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101de8:	4b05      	ldr	r3, [pc, #20]	@ (8101e00 <SysTick_Config+0x40>)
 8101dea:	2200      	movs	r2, #0
 8101dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101dee:	4b04      	ldr	r3, [pc, #16]	@ (8101e00 <SysTick_Config+0x40>)
 8101df0:	2207      	movs	r2, #7
 8101df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101df4:	2300      	movs	r3, #0
}
 8101df6:	4618      	mov	r0, r3
 8101df8:	3708      	adds	r7, #8
 8101dfa:	46bd      	mov	sp, r7
 8101dfc:	bd80      	pop	{r7, pc}
 8101dfe:	bf00      	nop
 8101e00:	e000e010 	.word	0xe000e010

08101e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e04:	b580      	push	{r7, lr}
 8101e06:	b082      	sub	sp, #8
 8101e08:	af00      	add	r7, sp, #0
 8101e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101e0c:	6878      	ldr	r0, [r7, #4]
 8101e0e:	f7ff ff47 	bl	8101ca0 <__NVIC_SetPriorityGrouping>
}
 8101e12:	bf00      	nop
 8101e14:	3708      	adds	r7, #8
 8101e16:	46bd      	mov	sp, r7
 8101e18:	bd80      	pop	{r7, pc}

08101e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e1a:	b580      	push	{r7, lr}
 8101e1c:	b086      	sub	sp, #24
 8101e1e:	af00      	add	r7, sp, #0
 8101e20:	4603      	mov	r3, r0
 8101e22:	60b9      	str	r1, [r7, #8]
 8101e24:	607a      	str	r2, [r7, #4]
 8101e26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101e28:	f7ff ff5e 	bl	8101ce8 <__NVIC_GetPriorityGrouping>
 8101e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101e2e:	687a      	ldr	r2, [r7, #4]
 8101e30:	68b9      	ldr	r1, [r7, #8]
 8101e32:	6978      	ldr	r0, [r7, #20]
 8101e34:	f7ff ff90 	bl	8101d58 <NVIC_EncodePriority>
 8101e38:	4602      	mov	r2, r0
 8101e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101e3e:	4611      	mov	r1, r2
 8101e40:	4618      	mov	r0, r3
 8101e42:	f7ff ff5f 	bl	8101d04 <__NVIC_SetPriority>
}
 8101e46:	bf00      	nop
 8101e48:	3718      	adds	r7, #24
 8101e4a:	46bd      	mov	sp, r7
 8101e4c:	bd80      	pop	{r7, pc}

08101e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101e4e:	b580      	push	{r7, lr}
 8101e50:	b082      	sub	sp, #8
 8101e52:	af00      	add	r7, sp, #0
 8101e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101e56:	6878      	ldr	r0, [r7, #4]
 8101e58:	f7ff ffb2 	bl	8101dc0 <SysTick_Config>
 8101e5c:	4603      	mov	r3, r0
}
 8101e5e:	4618      	mov	r0, r3
 8101e60:	3708      	adds	r7, #8
 8101e62:	46bd      	mov	sp, r7
 8101e64:	bd80      	pop	{r7, pc}
	...

08101e68 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101e68:	b480      	push	{r7}
 8101e6a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101e6c:	4b07      	ldr	r3, [pc, #28]	@ (8101e8c <HAL_GetCurrentCPUID+0x24>)
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	091b      	lsrs	r3, r3, #4
 8101e72:	f003 030f 	and.w	r3, r3, #15
 8101e76:	2b07      	cmp	r3, #7
 8101e78:	d101      	bne.n	8101e7e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101e7a:	2303      	movs	r3, #3
 8101e7c:	e000      	b.n	8101e80 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101e7e:	2301      	movs	r3, #1
  }
}
 8101e80:	4618      	mov	r0, r3
 8101e82:	46bd      	mov	sp, r7
 8101e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e88:	4770      	bx	lr
 8101e8a:	bf00      	nop
 8101e8c:	e000ed00 	.word	0xe000ed00

08101e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101e90:	b480      	push	{r7}
 8101e92:	b089      	sub	sp, #36	@ 0x24
 8101e94:	af00      	add	r7, sp, #0
 8101e96:	6078      	str	r0, [r7, #4]
 8101e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101e9a:	2300      	movs	r3, #0
 8101e9c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101e9e:	4b89      	ldr	r3, [pc, #548]	@ (81020c4 <HAL_GPIO_Init+0x234>)
 8101ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101ea2:	e194      	b.n	81021ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101ea4:	683b      	ldr	r3, [r7, #0]
 8101ea6:	681a      	ldr	r2, [r3, #0]
 8101ea8:	2101      	movs	r1, #1
 8101eaa:	69fb      	ldr	r3, [r7, #28]
 8101eac:	fa01 f303 	lsl.w	r3, r1, r3
 8101eb0:	4013      	ands	r3, r2
 8101eb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101eb4:	693b      	ldr	r3, [r7, #16]
 8101eb6:	2b00      	cmp	r3, #0
 8101eb8:	f000 8186 	beq.w	81021c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101ebc:	683b      	ldr	r3, [r7, #0]
 8101ebe:	685b      	ldr	r3, [r3, #4]
 8101ec0:	f003 0303 	and.w	r3, r3, #3
 8101ec4:	2b01      	cmp	r3, #1
 8101ec6:	d005      	beq.n	8101ed4 <HAL_GPIO_Init+0x44>
 8101ec8:	683b      	ldr	r3, [r7, #0]
 8101eca:	685b      	ldr	r3, [r3, #4]
 8101ecc:	f003 0303 	and.w	r3, r3, #3
 8101ed0:	2b02      	cmp	r3, #2
 8101ed2:	d130      	bne.n	8101f36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	689b      	ldr	r3, [r3, #8]
 8101ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101eda:	69fb      	ldr	r3, [r7, #28]
 8101edc:	005b      	lsls	r3, r3, #1
 8101ede:	2203      	movs	r2, #3
 8101ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8101ee4:	43db      	mvns	r3, r3
 8101ee6:	69ba      	ldr	r2, [r7, #24]
 8101ee8:	4013      	ands	r3, r2
 8101eea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101eec:	683b      	ldr	r3, [r7, #0]
 8101eee:	68da      	ldr	r2, [r3, #12]
 8101ef0:	69fb      	ldr	r3, [r7, #28]
 8101ef2:	005b      	lsls	r3, r3, #1
 8101ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8101ef8:	69ba      	ldr	r2, [r7, #24]
 8101efa:	4313      	orrs	r3, r2
 8101efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	69ba      	ldr	r2, [r7, #24]
 8101f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	685b      	ldr	r3, [r3, #4]
 8101f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101f0a:	2201      	movs	r2, #1
 8101f0c:	69fb      	ldr	r3, [r7, #28]
 8101f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8101f12:	43db      	mvns	r3, r3
 8101f14:	69ba      	ldr	r2, [r7, #24]
 8101f16:	4013      	ands	r3, r2
 8101f18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	685b      	ldr	r3, [r3, #4]
 8101f1e:	091b      	lsrs	r3, r3, #4
 8101f20:	f003 0201 	and.w	r2, r3, #1
 8101f24:	69fb      	ldr	r3, [r7, #28]
 8101f26:	fa02 f303 	lsl.w	r3, r2, r3
 8101f2a:	69ba      	ldr	r2, [r7, #24]
 8101f2c:	4313      	orrs	r3, r2
 8101f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	69ba      	ldr	r2, [r7, #24]
 8101f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101f36:	683b      	ldr	r3, [r7, #0]
 8101f38:	685b      	ldr	r3, [r3, #4]
 8101f3a:	f003 0303 	and.w	r3, r3, #3
 8101f3e:	2b03      	cmp	r3, #3
 8101f40:	d017      	beq.n	8101f72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	68db      	ldr	r3, [r3, #12]
 8101f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101f48:	69fb      	ldr	r3, [r7, #28]
 8101f4a:	005b      	lsls	r3, r3, #1
 8101f4c:	2203      	movs	r2, #3
 8101f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8101f52:	43db      	mvns	r3, r3
 8101f54:	69ba      	ldr	r2, [r7, #24]
 8101f56:	4013      	ands	r3, r2
 8101f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101f5a:	683b      	ldr	r3, [r7, #0]
 8101f5c:	689a      	ldr	r2, [r3, #8]
 8101f5e:	69fb      	ldr	r3, [r7, #28]
 8101f60:	005b      	lsls	r3, r3, #1
 8101f62:	fa02 f303 	lsl.w	r3, r2, r3
 8101f66:	69ba      	ldr	r2, [r7, #24]
 8101f68:	4313      	orrs	r3, r2
 8101f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	69ba      	ldr	r2, [r7, #24]
 8101f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101f72:	683b      	ldr	r3, [r7, #0]
 8101f74:	685b      	ldr	r3, [r3, #4]
 8101f76:	f003 0303 	and.w	r3, r3, #3
 8101f7a:	2b02      	cmp	r3, #2
 8101f7c:	d123      	bne.n	8101fc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101f7e:	69fb      	ldr	r3, [r7, #28]
 8101f80:	08da      	lsrs	r2, r3, #3
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	3208      	adds	r2, #8
 8101f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101f8c:	69fb      	ldr	r3, [r7, #28]
 8101f8e:	f003 0307 	and.w	r3, r3, #7
 8101f92:	009b      	lsls	r3, r3, #2
 8101f94:	220f      	movs	r2, #15
 8101f96:	fa02 f303 	lsl.w	r3, r2, r3
 8101f9a:	43db      	mvns	r3, r3
 8101f9c:	69ba      	ldr	r2, [r7, #24]
 8101f9e:	4013      	ands	r3, r2
 8101fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101fa2:	683b      	ldr	r3, [r7, #0]
 8101fa4:	691a      	ldr	r2, [r3, #16]
 8101fa6:	69fb      	ldr	r3, [r7, #28]
 8101fa8:	f003 0307 	and.w	r3, r3, #7
 8101fac:	009b      	lsls	r3, r3, #2
 8101fae:	fa02 f303 	lsl.w	r3, r2, r3
 8101fb2:	69ba      	ldr	r2, [r7, #24]
 8101fb4:	4313      	orrs	r3, r2
 8101fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101fb8:	69fb      	ldr	r3, [r7, #28]
 8101fba:	08da      	lsrs	r2, r3, #3
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	3208      	adds	r2, #8
 8101fc0:	69b9      	ldr	r1, [r7, #24]
 8101fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101fcc:	69fb      	ldr	r3, [r7, #28]
 8101fce:	005b      	lsls	r3, r3, #1
 8101fd0:	2203      	movs	r2, #3
 8101fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8101fd6:	43db      	mvns	r3, r3
 8101fd8:	69ba      	ldr	r2, [r7, #24]
 8101fda:	4013      	ands	r3, r2
 8101fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101fde:	683b      	ldr	r3, [r7, #0]
 8101fe0:	685b      	ldr	r3, [r3, #4]
 8101fe2:	f003 0203 	and.w	r2, r3, #3
 8101fe6:	69fb      	ldr	r3, [r7, #28]
 8101fe8:	005b      	lsls	r3, r3, #1
 8101fea:	fa02 f303 	lsl.w	r3, r2, r3
 8101fee:	69ba      	ldr	r2, [r7, #24]
 8101ff0:	4313      	orrs	r3, r2
 8101ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	69ba      	ldr	r2, [r7, #24]
 8101ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101ffa:	683b      	ldr	r3, [r7, #0]
 8101ffc:	685b      	ldr	r3, [r3, #4]
 8101ffe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102002:	2b00      	cmp	r3, #0
 8102004:	f000 80e0 	beq.w	81021c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102008:	4b2f      	ldr	r3, [pc, #188]	@ (81020c8 <HAL_GPIO_Init+0x238>)
 810200a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810200e:	4a2e      	ldr	r2, [pc, #184]	@ (81020c8 <HAL_GPIO_Init+0x238>)
 8102010:	f043 0302 	orr.w	r3, r3, #2
 8102014:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102018:	4b2b      	ldr	r3, [pc, #172]	@ (81020c8 <HAL_GPIO_Init+0x238>)
 810201a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810201e:	f003 0302 	and.w	r3, r3, #2
 8102022:	60fb      	str	r3, [r7, #12]
 8102024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102026:	4a29      	ldr	r2, [pc, #164]	@ (81020cc <HAL_GPIO_Init+0x23c>)
 8102028:	69fb      	ldr	r3, [r7, #28]
 810202a:	089b      	lsrs	r3, r3, #2
 810202c:	3302      	adds	r3, #2
 810202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102034:	69fb      	ldr	r3, [r7, #28]
 8102036:	f003 0303 	and.w	r3, r3, #3
 810203a:	009b      	lsls	r3, r3, #2
 810203c:	220f      	movs	r2, #15
 810203e:	fa02 f303 	lsl.w	r3, r2, r3
 8102042:	43db      	mvns	r3, r3
 8102044:	69ba      	ldr	r2, [r7, #24]
 8102046:	4013      	ands	r3, r2
 8102048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	4a20      	ldr	r2, [pc, #128]	@ (81020d0 <HAL_GPIO_Init+0x240>)
 810204e:	4293      	cmp	r3, r2
 8102050:	d052      	beq.n	81020f8 <HAL_GPIO_Init+0x268>
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	4a1f      	ldr	r2, [pc, #124]	@ (81020d4 <HAL_GPIO_Init+0x244>)
 8102056:	4293      	cmp	r3, r2
 8102058:	d031      	beq.n	81020be <HAL_GPIO_Init+0x22e>
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	4a1e      	ldr	r2, [pc, #120]	@ (81020d8 <HAL_GPIO_Init+0x248>)
 810205e:	4293      	cmp	r3, r2
 8102060:	d02b      	beq.n	81020ba <HAL_GPIO_Init+0x22a>
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	4a1d      	ldr	r2, [pc, #116]	@ (81020dc <HAL_GPIO_Init+0x24c>)
 8102066:	4293      	cmp	r3, r2
 8102068:	d025      	beq.n	81020b6 <HAL_GPIO_Init+0x226>
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	4a1c      	ldr	r2, [pc, #112]	@ (81020e0 <HAL_GPIO_Init+0x250>)
 810206e:	4293      	cmp	r3, r2
 8102070:	d01f      	beq.n	81020b2 <HAL_GPIO_Init+0x222>
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	4a1b      	ldr	r2, [pc, #108]	@ (81020e4 <HAL_GPIO_Init+0x254>)
 8102076:	4293      	cmp	r3, r2
 8102078:	d019      	beq.n	81020ae <HAL_GPIO_Init+0x21e>
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	4a1a      	ldr	r2, [pc, #104]	@ (81020e8 <HAL_GPIO_Init+0x258>)
 810207e:	4293      	cmp	r3, r2
 8102080:	d013      	beq.n	81020aa <HAL_GPIO_Init+0x21a>
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	4a19      	ldr	r2, [pc, #100]	@ (81020ec <HAL_GPIO_Init+0x25c>)
 8102086:	4293      	cmp	r3, r2
 8102088:	d00d      	beq.n	81020a6 <HAL_GPIO_Init+0x216>
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	4a18      	ldr	r2, [pc, #96]	@ (81020f0 <HAL_GPIO_Init+0x260>)
 810208e:	4293      	cmp	r3, r2
 8102090:	d007      	beq.n	81020a2 <HAL_GPIO_Init+0x212>
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	4a17      	ldr	r2, [pc, #92]	@ (81020f4 <HAL_GPIO_Init+0x264>)
 8102096:	4293      	cmp	r3, r2
 8102098:	d101      	bne.n	810209e <HAL_GPIO_Init+0x20e>
 810209a:	2309      	movs	r3, #9
 810209c:	e02d      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 810209e:	230a      	movs	r3, #10
 81020a0:	e02b      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020a2:	2308      	movs	r3, #8
 81020a4:	e029      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020a6:	2307      	movs	r3, #7
 81020a8:	e027      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020aa:	2306      	movs	r3, #6
 81020ac:	e025      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020ae:	2305      	movs	r3, #5
 81020b0:	e023      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020b2:	2304      	movs	r3, #4
 81020b4:	e021      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020b6:	2303      	movs	r3, #3
 81020b8:	e01f      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020ba:	2302      	movs	r3, #2
 81020bc:	e01d      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020be:	2301      	movs	r3, #1
 81020c0:	e01b      	b.n	81020fa <HAL_GPIO_Init+0x26a>
 81020c2:	bf00      	nop
 81020c4:	580000c0 	.word	0x580000c0
 81020c8:	58024400 	.word	0x58024400
 81020cc:	58000400 	.word	0x58000400
 81020d0:	58020000 	.word	0x58020000
 81020d4:	58020400 	.word	0x58020400
 81020d8:	58020800 	.word	0x58020800
 81020dc:	58020c00 	.word	0x58020c00
 81020e0:	58021000 	.word	0x58021000
 81020e4:	58021400 	.word	0x58021400
 81020e8:	58021800 	.word	0x58021800
 81020ec:	58021c00 	.word	0x58021c00
 81020f0:	58022000 	.word	0x58022000
 81020f4:	58022400 	.word	0x58022400
 81020f8:	2300      	movs	r3, #0
 81020fa:	69fa      	ldr	r2, [r7, #28]
 81020fc:	f002 0203 	and.w	r2, r2, #3
 8102100:	0092      	lsls	r2, r2, #2
 8102102:	4093      	lsls	r3, r2
 8102104:	69ba      	ldr	r2, [r7, #24]
 8102106:	4313      	orrs	r3, r2
 8102108:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810210a:	4938      	ldr	r1, [pc, #224]	@ (81021ec <HAL_GPIO_Init+0x35c>)
 810210c:	69fb      	ldr	r3, [r7, #28]
 810210e:	089b      	lsrs	r3, r3, #2
 8102110:	3302      	adds	r3, #2
 8102112:	69ba      	ldr	r2, [r7, #24]
 8102114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102120:	693b      	ldr	r3, [r7, #16]
 8102122:	43db      	mvns	r3, r3
 8102124:	69ba      	ldr	r2, [r7, #24]
 8102126:	4013      	ands	r3, r2
 8102128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810212a:	683b      	ldr	r3, [r7, #0]
 810212c:	685b      	ldr	r3, [r3, #4]
 810212e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102132:	2b00      	cmp	r3, #0
 8102134:	d003      	beq.n	810213e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102136:	69ba      	ldr	r2, [r7, #24]
 8102138:	693b      	ldr	r3, [r7, #16]
 810213a:	4313      	orrs	r3, r2
 810213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810213e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102142:	69bb      	ldr	r3, [r7, #24]
 8102144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810214a:	685b      	ldr	r3, [r3, #4]
 810214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810214e:	693b      	ldr	r3, [r7, #16]
 8102150:	43db      	mvns	r3, r3
 8102152:	69ba      	ldr	r2, [r7, #24]
 8102154:	4013      	ands	r3, r2
 8102156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102158:	683b      	ldr	r3, [r7, #0]
 810215a:	685b      	ldr	r3, [r3, #4]
 810215c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102160:	2b00      	cmp	r3, #0
 8102162:	d003      	beq.n	810216c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102164:	69ba      	ldr	r2, [r7, #24]
 8102166:	693b      	ldr	r3, [r7, #16]
 8102168:	4313      	orrs	r3, r2
 810216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810216c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102170:	69bb      	ldr	r3, [r7, #24]
 8102172:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102174:	697b      	ldr	r3, [r7, #20]
 8102176:	685b      	ldr	r3, [r3, #4]
 8102178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810217a:	693b      	ldr	r3, [r7, #16]
 810217c:	43db      	mvns	r3, r3
 810217e:	69ba      	ldr	r2, [r7, #24]
 8102180:	4013      	ands	r3, r2
 8102182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102184:	683b      	ldr	r3, [r7, #0]
 8102186:	685b      	ldr	r3, [r3, #4]
 8102188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810218c:	2b00      	cmp	r3, #0
 810218e:	d003      	beq.n	8102198 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102190:	69ba      	ldr	r2, [r7, #24]
 8102192:	693b      	ldr	r3, [r7, #16]
 8102194:	4313      	orrs	r3, r2
 8102196:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102198:	697b      	ldr	r3, [r7, #20]
 810219a:	69ba      	ldr	r2, [r7, #24]
 810219c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810219e:	697b      	ldr	r3, [r7, #20]
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81021a4:	693b      	ldr	r3, [r7, #16]
 81021a6:	43db      	mvns	r3, r3
 81021a8:	69ba      	ldr	r2, [r7, #24]
 81021aa:	4013      	ands	r3, r2
 81021ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81021ae:	683b      	ldr	r3, [r7, #0]
 81021b0:	685b      	ldr	r3, [r3, #4]
 81021b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81021b6:	2b00      	cmp	r3, #0
 81021b8:	d003      	beq.n	81021c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81021ba:	69ba      	ldr	r2, [r7, #24]
 81021bc:	693b      	ldr	r3, [r7, #16]
 81021be:	4313      	orrs	r3, r2
 81021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81021c2:	697b      	ldr	r3, [r7, #20]
 81021c4:	69ba      	ldr	r2, [r7, #24]
 81021c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81021c8:	69fb      	ldr	r3, [r7, #28]
 81021ca:	3301      	adds	r3, #1
 81021cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81021ce:	683b      	ldr	r3, [r7, #0]
 81021d0:	681a      	ldr	r2, [r3, #0]
 81021d2:	69fb      	ldr	r3, [r7, #28]
 81021d4:	fa22 f303 	lsr.w	r3, r2, r3
 81021d8:	2b00      	cmp	r3, #0
 81021da:	f47f ae63 	bne.w	8101ea4 <HAL_GPIO_Init+0x14>
  }
}
 81021de:	bf00      	nop
 81021e0:	bf00      	nop
 81021e2:	3724      	adds	r7, #36	@ 0x24
 81021e4:	46bd      	mov	sp, r7
 81021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ea:	4770      	bx	lr
 81021ec:	58000400 	.word	0x58000400

081021f0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81021f0:	b480      	push	{r7}
 81021f2:	b083      	sub	sp, #12
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81021f8:	4b05      	ldr	r3, [pc, #20]	@ (8102210 <HAL_HSEM_ActivateNotification+0x20>)
 81021fa:	681a      	ldr	r2, [r3, #0]
 81021fc:	4904      	ldr	r1, [pc, #16]	@ (8102210 <HAL_HSEM_ActivateNotification+0x20>)
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	4313      	orrs	r3, r2
 8102202:	600b      	str	r3, [r1, #0]
#endif
}
 8102204:	bf00      	nop
 8102206:	370c      	adds	r7, #12
 8102208:	46bd      	mov	sp, r7
 810220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220e:	4770      	bx	lr
 8102210:	58026510 	.word	0x58026510

08102214 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102214:	b580      	push	{r7, lr}
 8102216:	b084      	sub	sp, #16
 8102218:	af00      	add	r7, sp, #0
 810221a:	60f8      	str	r0, [r7, #12]
 810221c:	460b      	mov	r3, r1
 810221e:	607a      	str	r2, [r7, #4]
 8102220:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102222:	4b37      	ldr	r3, [pc, #220]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	f023 0201 	bic.w	r2, r3, #1
 810222a:	4935      	ldr	r1, [pc, #212]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 810222c:	68fb      	ldr	r3, [r7, #12]
 810222e:	4313      	orrs	r3, r2
 8102230:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	2b00      	cmp	r3, #0
 8102236:	d123      	bne.n	8102280 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102238:	f7ff fe16 	bl	8101e68 <HAL_GetCurrentCPUID>
 810223c:	4603      	mov	r3, r0
 810223e:	2b03      	cmp	r3, #3
 8102240:	d158      	bne.n	81022f4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102242:	4b2f      	ldr	r3, [pc, #188]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102244:	691b      	ldr	r3, [r3, #16]
 8102246:	4a2e      	ldr	r2, [pc, #184]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102248:	f023 0301 	bic.w	r3, r3, #1
 810224c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810224e:	4b2d      	ldr	r3, [pc, #180]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102250:	691b      	ldr	r3, [r3, #16]
 8102252:	4a2c      	ldr	r2, [pc, #176]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102254:	f043 0304 	orr.w	r3, r3, #4
 8102258:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810225a:	f3bf 8f4f 	dsb	sy
}
 810225e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102260:	f3bf 8f6f 	isb	sy
}
 8102264:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102266:	7afb      	ldrb	r3, [r7, #11]
 8102268:	2b01      	cmp	r3, #1
 810226a:	d101      	bne.n	8102270 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810226c:	bf30      	wfi
 810226e:	e000      	b.n	8102272 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102270:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102272:	4b24      	ldr	r3, [pc, #144]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102274:	691b      	ldr	r3, [r3, #16]
 8102276:	4a23      	ldr	r2, [pc, #140]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102278:	f023 0304 	bic.w	r3, r3, #4
 810227c:	6113      	str	r3, [r2, #16]
 810227e:	e03c      	b.n	81022fa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	2b01      	cmp	r3, #1
 8102284:	d123      	bne.n	81022ce <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102286:	f7ff fdef 	bl	8101e68 <HAL_GetCurrentCPUID>
 810228a:	4603      	mov	r3, r0
 810228c:	2b01      	cmp	r3, #1
 810228e:	d133      	bne.n	81022f8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102290:	4b1b      	ldr	r3, [pc, #108]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102292:	695b      	ldr	r3, [r3, #20]
 8102294:	4a1a      	ldr	r2, [pc, #104]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102296:	f023 0302 	bic.w	r3, r3, #2
 810229a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810229c:	4b19      	ldr	r3, [pc, #100]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810229e:	691b      	ldr	r3, [r3, #16]
 81022a0:	4a18      	ldr	r2, [pc, #96]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81022a2:	f043 0304 	orr.w	r3, r3, #4
 81022a6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81022a8:	f3bf 8f4f 	dsb	sy
}
 81022ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81022ae:	f3bf 8f6f 	isb	sy
}
 81022b2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81022b4:	7afb      	ldrb	r3, [r7, #11]
 81022b6:	2b01      	cmp	r3, #1
 81022b8:	d101      	bne.n	81022be <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81022ba:	bf30      	wfi
 81022bc:	e000      	b.n	81022c0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81022be:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81022c0:	4b10      	ldr	r3, [pc, #64]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81022c2:	691b      	ldr	r3, [r3, #16]
 81022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8102304 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81022c6:	f023 0304 	bic.w	r3, r3, #4
 81022ca:	6113      	str	r3, [r2, #16]
 81022cc:	e015      	b.n	81022fa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81022ce:	f7ff fdcb 	bl	8101e68 <HAL_GetCurrentCPUID>
 81022d2:	4603      	mov	r3, r0
 81022d4:	2b03      	cmp	r3, #3
 81022d6:	d106      	bne.n	81022e6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81022d8:	4b09      	ldr	r3, [pc, #36]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 81022da:	691b      	ldr	r3, [r3, #16]
 81022dc:	4a08      	ldr	r2, [pc, #32]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 81022de:	f023 0304 	bic.w	r3, r3, #4
 81022e2:	6113      	str	r3, [r2, #16]
 81022e4:	e009      	b.n	81022fa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81022e6:	4b06      	ldr	r3, [pc, #24]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 81022e8:	695b      	ldr	r3, [r3, #20]
 81022ea:	4a05      	ldr	r2, [pc, #20]	@ (8102300 <HAL_PWREx_EnterSTOPMode+0xec>)
 81022ec:	f023 0304 	bic.w	r3, r3, #4
 81022f0:	6153      	str	r3, [r2, #20]
 81022f2:	e002      	b.n	81022fa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81022f4:	bf00      	nop
 81022f6:	e000      	b.n	81022fa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81022f8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81022fa:	3710      	adds	r7, #16
 81022fc:	46bd      	mov	sp, r7
 81022fe:	bd80      	pop	{r7, pc}
 8102300:	58024800 	.word	0x58024800
 8102304:	e000ed00 	.word	0xe000ed00

08102308 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102308:	b580      	push	{r7, lr}
 810230a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810230c:	f7ff fdac 	bl	8101e68 <HAL_GetCurrentCPUID>
 8102310:	4603      	mov	r3, r0
 8102312:	2b03      	cmp	r3, #3
 8102314:	d101      	bne.n	810231a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102316:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102318:	e001      	b.n	810231e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810231a:	bf40      	sev
    __WFE ();
 810231c:	bf20      	wfe
}
 810231e:	bf00      	nop
 8102320:	bd80      	pop	{r7, pc}
	...

08102324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102324:	b480      	push	{r7}
 8102326:	b089      	sub	sp, #36	@ 0x24
 8102328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810232a:	4bb3      	ldr	r3, [pc, #716]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810232c:	691b      	ldr	r3, [r3, #16]
 810232e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102332:	2b18      	cmp	r3, #24
 8102334:	f200 8155 	bhi.w	81025e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8102338:	a201      	add	r2, pc, #4	@ (adr r2, 8102340 <HAL_RCC_GetSysClockFreq+0x1c>)
 810233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810233e:	bf00      	nop
 8102340:	081023a5 	.word	0x081023a5
 8102344:	081025e3 	.word	0x081025e3
 8102348:	081025e3 	.word	0x081025e3
 810234c:	081025e3 	.word	0x081025e3
 8102350:	081025e3 	.word	0x081025e3
 8102354:	081025e3 	.word	0x081025e3
 8102358:	081025e3 	.word	0x081025e3
 810235c:	081025e3 	.word	0x081025e3
 8102360:	081023cb 	.word	0x081023cb
 8102364:	081025e3 	.word	0x081025e3
 8102368:	081025e3 	.word	0x081025e3
 810236c:	081025e3 	.word	0x081025e3
 8102370:	081025e3 	.word	0x081025e3
 8102374:	081025e3 	.word	0x081025e3
 8102378:	081025e3 	.word	0x081025e3
 810237c:	081025e3 	.word	0x081025e3
 8102380:	081023d1 	.word	0x081023d1
 8102384:	081025e3 	.word	0x081025e3
 8102388:	081025e3 	.word	0x081025e3
 810238c:	081025e3 	.word	0x081025e3
 8102390:	081025e3 	.word	0x081025e3
 8102394:	081025e3 	.word	0x081025e3
 8102398:	081025e3 	.word	0x081025e3
 810239c:	081025e3 	.word	0x081025e3
 81023a0:	081023d7 	.word	0x081023d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81023a4:	4b94      	ldr	r3, [pc, #592]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	f003 0320 	and.w	r3, r3, #32
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d009      	beq.n	81023c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81023b0:	4b91      	ldr	r3, [pc, #580]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	08db      	lsrs	r3, r3, #3
 81023b6:	f003 0303 	and.w	r3, r3, #3
 81023ba:	4a90      	ldr	r2, [pc, #576]	@ (81025fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81023bc:	fa22 f303 	lsr.w	r3, r2, r3
 81023c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81023c2:	e111      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81023c4:	4b8d      	ldr	r3, [pc, #564]	@ (81025fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81023c6:	61bb      	str	r3, [r7, #24]
      break;
 81023c8:	e10e      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81023ca:	4b8d      	ldr	r3, [pc, #564]	@ (8102600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81023cc:	61bb      	str	r3, [r7, #24]
      break;
 81023ce:	e10b      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81023d0:	4b8c      	ldr	r3, [pc, #560]	@ (8102604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81023d2:	61bb      	str	r3, [r7, #24]
      break;
 81023d4:	e108      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81023d6:	4b88      	ldr	r3, [pc, #544]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81023da:	f003 0303 	and.w	r3, r3, #3
 81023de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81023e0:	4b85      	ldr	r3, [pc, #532]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81023e4:	091b      	lsrs	r3, r3, #4
 81023e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81023ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81023ec:	4b82      	ldr	r3, [pc, #520]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81023f0:	f003 0301 	and.w	r3, r3, #1
 81023f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81023f6:	4b80      	ldr	r3, [pc, #512]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81023fa:	08db      	lsrs	r3, r3, #3
 81023fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102400:	68fa      	ldr	r2, [r7, #12]
 8102402:	fb02 f303 	mul.w	r3, r2, r3
 8102406:	ee07 3a90 	vmov	s15, r3
 810240a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810240e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102412:	693b      	ldr	r3, [r7, #16]
 8102414:	2b00      	cmp	r3, #0
 8102416:	f000 80e1 	beq.w	81025dc <HAL_RCC_GetSysClockFreq+0x2b8>
 810241a:	697b      	ldr	r3, [r7, #20]
 810241c:	2b02      	cmp	r3, #2
 810241e:	f000 8083 	beq.w	8102528 <HAL_RCC_GetSysClockFreq+0x204>
 8102422:	697b      	ldr	r3, [r7, #20]
 8102424:	2b02      	cmp	r3, #2
 8102426:	f200 80a1 	bhi.w	810256c <HAL_RCC_GetSysClockFreq+0x248>
 810242a:	697b      	ldr	r3, [r7, #20]
 810242c:	2b00      	cmp	r3, #0
 810242e:	d003      	beq.n	8102438 <HAL_RCC_GetSysClockFreq+0x114>
 8102430:	697b      	ldr	r3, [r7, #20]
 8102432:	2b01      	cmp	r3, #1
 8102434:	d056      	beq.n	81024e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102436:	e099      	b.n	810256c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102438:	4b6f      	ldr	r3, [pc, #444]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810243a:	681b      	ldr	r3, [r3, #0]
 810243c:	f003 0320 	and.w	r3, r3, #32
 8102440:	2b00      	cmp	r3, #0
 8102442:	d02d      	beq.n	81024a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102444:	4b6c      	ldr	r3, [pc, #432]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	08db      	lsrs	r3, r3, #3
 810244a:	f003 0303 	and.w	r3, r3, #3
 810244e:	4a6b      	ldr	r2, [pc, #428]	@ (81025fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102450:	fa22 f303 	lsr.w	r3, r2, r3
 8102454:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	ee07 3a90 	vmov	s15, r3
 810245c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102460:	693b      	ldr	r3, [r7, #16]
 8102462:	ee07 3a90 	vmov	s15, r3
 8102466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810246a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810246e:	4b62      	ldr	r3, [pc, #392]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102476:	ee07 3a90 	vmov	s15, r3
 810247a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810247e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102482:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810248a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810248e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102496:	ee67 7a27 	vmul.f32	s15, s14, s15
 810249a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810249e:	e087      	b.n	81025b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81024a0:	693b      	ldr	r3, [r7, #16]
 81024a2:	ee07 3a90 	vmov	s15, r3
 81024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81024aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810260c <HAL_RCC_GetSysClockFreq+0x2e8>
 81024ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81024b2:	4b51      	ldr	r3, [pc, #324]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81024b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81024ba:	ee07 3a90 	vmov	s15, r3
 81024be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81024c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81024c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102608 <HAL_RCC_GetSysClockFreq+0x2e4>
 81024ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81024ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81024d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81024d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81024de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81024e2:	e065      	b.n	81025b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81024e4:	693b      	ldr	r3, [r7, #16]
 81024e6:	ee07 3a90 	vmov	s15, r3
 81024ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81024ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102610 <HAL_RCC_GetSysClockFreq+0x2ec>
 81024f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81024f6:	4b40      	ldr	r3, [pc, #256]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81024fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81024fe:	ee07 3a90 	vmov	s15, r3
 8102502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102506:	ed97 6a02 	vldr	s12, [r7, #8]
 810250a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102608 <HAL_RCC_GetSysClockFreq+0x2e4>
 810250e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810251a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102526:	e043      	b.n	81025b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102528:	693b      	ldr	r3, [r7, #16]
 810252a:	ee07 3a90 	vmov	s15, r3
 810252e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102532:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810253a:	4b2f      	ldr	r3, [pc, #188]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810253e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102542:	ee07 3a90 	vmov	s15, r3
 8102546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810254a:	ed97 6a02 	vldr	s12, [r7, #8]
 810254e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810255a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810255e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810256a:	e021      	b.n	81025b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810256c:	693b      	ldr	r3, [r7, #16]
 810256e:	ee07 3a90 	vmov	s15, r3
 8102572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102576:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102610 <HAL_RCC_GetSysClockFreq+0x2ec>
 810257a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810257e:	4b1e      	ldr	r3, [pc, #120]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102586:	ee07 3a90 	vmov	s15, r3
 810258a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810258e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102592:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810259a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810259e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81025a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81025aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81025ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81025b0:	4b11      	ldr	r3, [pc, #68]	@ (81025f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81025b4:	0a5b      	lsrs	r3, r3, #9
 81025b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81025ba:	3301      	adds	r3, #1
 81025bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81025be:	683b      	ldr	r3, [r7, #0]
 81025c0:	ee07 3a90 	vmov	s15, r3
 81025c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81025c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81025cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81025d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81025d4:	ee17 3a90 	vmov	r3, s15
 81025d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81025da:	e005      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81025dc:	2300      	movs	r3, #0
 81025de:	61bb      	str	r3, [r7, #24]
      break;
 81025e0:	e002      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81025e2:	4b07      	ldr	r3, [pc, #28]	@ (8102600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81025e4:	61bb      	str	r3, [r7, #24]
      break;
 81025e6:	bf00      	nop
  }

  return sysclockfreq;
 81025e8:	69bb      	ldr	r3, [r7, #24]
}
 81025ea:	4618      	mov	r0, r3
 81025ec:	3724      	adds	r7, #36	@ 0x24
 81025ee:	46bd      	mov	sp, r7
 81025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f4:	4770      	bx	lr
 81025f6:	bf00      	nop
 81025f8:	58024400 	.word	0x58024400
 81025fc:	03d09000 	.word	0x03d09000
 8102600:	003d0900 	.word	0x003d0900
 8102604:	017d7840 	.word	0x017d7840
 8102608:	46000000 	.word	0x46000000
 810260c:	4c742400 	.word	0x4c742400
 8102610:	4a742400 	.word	0x4a742400
 8102614:	4bbebc20 	.word	0x4bbebc20

08102618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102618:	b580      	push	{r7, lr}
 810261a:	b082      	sub	sp, #8
 810261c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810261e:	f7ff fe81 	bl	8102324 <HAL_RCC_GetSysClockFreq>
 8102622:	4602      	mov	r2, r0
 8102624:	4b11      	ldr	r3, [pc, #68]	@ (810266c <HAL_RCC_GetHCLKFreq+0x54>)
 8102626:	699b      	ldr	r3, [r3, #24]
 8102628:	0a1b      	lsrs	r3, r3, #8
 810262a:	f003 030f 	and.w	r3, r3, #15
 810262e:	4910      	ldr	r1, [pc, #64]	@ (8102670 <HAL_RCC_GetHCLKFreq+0x58>)
 8102630:	5ccb      	ldrb	r3, [r1, r3]
 8102632:	f003 031f 	and.w	r3, r3, #31
 8102636:	fa22 f303 	lsr.w	r3, r2, r3
 810263a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810263c:	4b0b      	ldr	r3, [pc, #44]	@ (810266c <HAL_RCC_GetHCLKFreq+0x54>)
 810263e:	699b      	ldr	r3, [r3, #24]
 8102640:	f003 030f 	and.w	r3, r3, #15
 8102644:	4a0a      	ldr	r2, [pc, #40]	@ (8102670 <HAL_RCC_GetHCLKFreq+0x58>)
 8102646:	5cd3      	ldrb	r3, [r2, r3]
 8102648:	f003 031f 	and.w	r3, r3, #31
 810264c:	687a      	ldr	r2, [r7, #4]
 810264e:	fa22 f303 	lsr.w	r3, r2, r3
 8102652:	4a08      	ldr	r2, [pc, #32]	@ (8102674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102654:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102656:	4b07      	ldr	r3, [pc, #28]	@ (8102674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	4a07      	ldr	r2, [pc, #28]	@ (8102678 <HAL_RCC_GetHCLKFreq+0x60>)
 810265c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810265e:	4b05      	ldr	r3, [pc, #20]	@ (8102674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102660:	681b      	ldr	r3, [r3, #0]
}
 8102662:	4618      	mov	r0, r3
 8102664:	3708      	adds	r7, #8
 8102666:	46bd      	mov	sp, r7
 8102668:	bd80      	pop	{r7, pc}
 810266a:	bf00      	nop
 810266c:	58024400 	.word	0x58024400
 8102670:	08105bcc 	.word	0x08105bcc
 8102674:	10000004 	.word	0x10000004
 8102678:	10000000 	.word	0x10000000

0810267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810267c:	b580      	push	{r7, lr}
 810267e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102680:	f7ff ffca 	bl	8102618 <HAL_RCC_GetHCLKFreq>
 8102684:	4602      	mov	r2, r0
 8102686:	4b06      	ldr	r3, [pc, #24]	@ (81026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102688:	69db      	ldr	r3, [r3, #28]
 810268a:	091b      	lsrs	r3, r3, #4
 810268c:	f003 0307 	and.w	r3, r3, #7
 8102690:	4904      	ldr	r1, [pc, #16]	@ (81026a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102692:	5ccb      	ldrb	r3, [r1, r3]
 8102694:	f003 031f 	and.w	r3, r3, #31
 8102698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810269c:	4618      	mov	r0, r3
 810269e:	bd80      	pop	{r7, pc}
 81026a0:	58024400 	.word	0x58024400
 81026a4:	08105bcc 	.word	0x08105bcc

081026a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81026a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81026ac:	b0cc      	sub	sp, #304	@ 0x130
 81026ae:	af00      	add	r7, sp, #0
 81026b0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81026b4:	2300      	movs	r3, #0
 81026b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81026ba:	2300      	movs	r3, #0
 81026bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81026c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81026cc:	2500      	movs	r5, #0
 81026ce:	ea54 0305 	orrs.w	r3, r4, r5
 81026d2:	d049      	beq.n	8102768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81026d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81026da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81026de:	d02f      	beq.n	8102740 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81026e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81026e4:	d828      	bhi.n	8102738 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81026e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81026ea:	d01a      	beq.n	8102722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81026ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81026f0:	d822      	bhi.n	8102738 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81026f2:	2b00      	cmp	r3, #0
 81026f4:	d003      	beq.n	81026fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 81026f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81026fa:	d007      	beq.n	810270c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81026fc:	e01c      	b.n	8102738 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026fe:	4bb8      	ldr	r3, [pc, #736]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102702:	4ab7      	ldr	r2, [pc, #732]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810270a:	e01a      	b.n	8102742 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810270c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102710:	3308      	adds	r3, #8
 8102712:	2102      	movs	r1, #2
 8102714:	4618      	mov	r0, r3
 8102716:	f002 fba1 	bl	8104e5c <RCCEx_PLL2_Config>
 810271a:	4603      	mov	r3, r0
 810271c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102720:	e00f      	b.n	8102742 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102726:	3328      	adds	r3, #40	@ 0x28
 8102728:	2102      	movs	r1, #2
 810272a:	4618      	mov	r0, r3
 810272c:	f002 fc48 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102730:	4603      	mov	r3, r0
 8102732:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102736:	e004      	b.n	8102742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102738:	2301      	movs	r3, #1
 810273a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810273e:	e000      	b.n	8102742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102746:	2b00      	cmp	r3, #0
 8102748:	d10a      	bne.n	8102760 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810274a:	4ba5      	ldr	r3, [pc, #660]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810274c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810274e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102758:	4aa1      	ldr	r2, [pc, #644]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810275a:	430b      	orrs	r3, r1
 810275c:	6513      	str	r3, [r2, #80]	@ 0x50
 810275e:	e003      	b.n	8102768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102760:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102764:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102770:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102774:	f04f 0900 	mov.w	r9, #0
 8102778:	ea58 0309 	orrs.w	r3, r8, r9
 810277c:	d047      	beq.n	810280e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810277e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102784:	2b04      	cmp	r3, #4
 8102786:	d82a      	bhi.n	81027de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102788:	a201      	add	r2, pc, #4	@ (adr r2, 8102790 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810278e:	bf00      	nop
 8102790:	081027a5 	.word	0x081027a5
 8102794:	081027b3 	.word	0x081027b3
 8102798:	081027c9 	.word	0x081027c9
 810279c:	081027e7 	.word	0x081027e7
 81027a0:	081027e7 	.word	0x081027e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027a4:	4b8e      	ldr	r3, [pc, #568]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81027a8:	4a8d      	ldr	r2, [pc, #564]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81027aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81027ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81027b0:	e01a      	b.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81027b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027b6:	3308      	adds	r3, #8
 81027b8:	2100      	movs	r1, #0
 81027ba:	4618      	mov	r0, r3
 81027bc:	f002 fb4e 	bl	8104e5c <RCCEx_PLL2_Config>
 81027c0:	4603      	mov	r3, r0
 81027c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81027c6:	e00f      	b.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81027c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027cc:	3328      	adds	r3, #40	@ 0x28
 81027ce:	2100      	movs	r1, #0
 81027d0:	4618      	mov	r0, r3
 81027d2:	f002 fbf5 	bl	8104fc0 <RCCEx_PLL3_Config>
 81027d6:	4603      	mov	r3, r0
 81027d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81027dc:	e004      	b.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81027de:	2301      	movs	r3, #1
 81027e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81027e4:	e000      	b.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81027e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81027e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	d10a      	bne.n	8102806 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81027f0:	4b7b      	ldr	r3, [pc, #492]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81027f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027f4:	f023 0107 	bic.w	r1, r3, #7
 81027f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81027fe:	4a78      	ldr	r2, [pc, #480]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102800:	430b      	orrs	r3, r1
 8102802:	6513      	str	r3, [r2, #80]	@ 0x50
 8102804:	e003      	b.n	810280e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102806:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810280a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810280e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102816:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810281a:	f04f 0b00 	mov.w	fp, #0
 810281e:	ea5a 030b 	orrs.w	r3, sl, fp
 8102822:	d04c      	beq.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810282a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810282e:	d030      	beq.n	8102892 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102834:	d829      	bhi.n	810288a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102836:	2bc0      	cmp	r3, #192	@ 0xc0
 8102838:	d02d      	beq.n	8102896 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810283a:	2bc0      	cmp	r3, #192	@ 0xc0
 810283c:	d825      	bhi.n	810288a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810283e:	2b80      	cmp	r3, #128	@ 0x80
 8102840:	d018      	beq.n	8102874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102842:	2b80      	cmp	r3, #128	@ 0x80
 8102844:	d821      	bhi.n	810288a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102846:	2b00      	cmp	r3, #0
 8102848:	d002      	beq.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810284a:	2b40      	cmp	r3, #64	@ 0x40
 810284c:	d007      	beq.n	810285e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810284e:	e01c      	b.n	810288a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102850:	4b63      	ldr	r3, [pc, #396]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102854:	4a62      	ldr	r2, [pc, #392]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810285a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810285c:	e01c      	b.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810285e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102862:	3308      	adds	r3, #8
 8102864:	2100      	movs	r1, #0
 8102866:	4618      	mov	r0, r3
 8102868:	f002 faf8 	bl	8104e5c <RCCEx_PLL2_Config>
 810286c:	4603      	mov	r3, r0
 810286e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102872:	e011      	b.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102878:	3328      	adds	r3, #40	@ 0x28
 810287a:	2100      	movs	r1, #0
 810287c:	4618      	mov	r0, r3
 810287e:	f002 fb9f 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102882:	4603      	mov	r3, r0
 8102884:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102888:	e006      	b.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810288a:	2301      	movs	r3, #1
 810288c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102890:	e002      	b.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102892:	bf00      	nop
 8102894:	e000      	b.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102898:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810289c:	2b00      	cmp	r3, #0
 810289e:	d10a      	bne.n	81028b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81028a0:	4b4f      	ldr	r3, [pc, #316]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81028a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81028a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81028a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81028ae:	4a4c      	ldr	r2, [pc, #304]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81028b0:	430b      	orrs	r3, r1
 81028b2:	6513      	str	r3, [r2, #80]	@ 0x50
 81028b4:	e003      	b.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81028ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81028be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81028ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81028ce:	2300      	movs	r3, #0
 81028d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 81028d4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 81028d8:	460b      	mov	r3, r1
 81028da:	4313      	orrs	r3, r2
 81028dc:	d053      	beq.n	8102986 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81028de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81028e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81028ea:	d035      	beq.n	8102958 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81028ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81028f0:	d82e      	bhi.n	8102950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81028f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81028f6:	d031      	beq.n	810295c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81028f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81028fc:	d828      	bhi.n	8102950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81028fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102902:	d01a      	beq.n	810293a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102908:	d822      	bhi.n	8102950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810290a:	2b00      	cmp	r3, #0
 810290c:	d003      	beq.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810290e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102912:	d007      	beq.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102914:	e01c      	b.n	8102950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102916:	4b32      	ldr	r3, [pc, #200]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810291a:	4a31      	ldr	r2, [pc, #196]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810291c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102922:	e01c      	b.n	810295e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102928:	3308      	adds	r3, #8
 810292a:	2100      	movs	r1, #0
 810292c:	4618      	mov	r0, r3
 810292e:	f002 fa95 	bl	8104e5c <RCCEx_PLL2_Config>
 8102932:	4603      	mov	r3, r0
 8102934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102938:	e011      	b.n	810295e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810293a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810293e:	3328      	adds	r3, #40	@ 0x28
 8102940:	2100      	movs	r1, #0
 8102942:	4618      	mov	r0, r3
 8102944:	f002 fb3c 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102948:	4603      	mov	r3, r0
 810294a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810294e:	e006      	b.n	810295e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102950:	2301      	movs	r3, #1
 8102952:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102956:	e002      	b.n	810295e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102958:	bf00      	nop
 810295a:	e000      	b.n	810295e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810295c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810295e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102962:	2b00      	cmp	r3, #0
 8102964:	d10b      	bne.n	810297e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102966:	4b1e      	ldr	r3, [pc, #120]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810296a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810296e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102976:	4a1a      	ldr	r2, [pc, #104]	@ (81029e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102978:	430b      	orrs	r3, r1
 810297a:	6593      	str	r3, [r2, #88]	@ 0x58
 810297c:	e003      	b.n	8102986 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810297e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102982:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102986:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810298e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8102992:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102996:	2300      	movs	r3, #0
 8102998:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810299c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81029a0:	460b      	mov	r3, r1
 81029a2:	4313      	orrs	r3, r2
 81029a4:	d056      	beq.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81029a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81029ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81029b2:	d038      	beq.n	8102a26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81029b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81029b8:	d831      	bhi.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 81029ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81029be:	d034      	beq.n	8102a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 81029c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81029c4:	d82b      	bhi.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 81029c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81029ca:	d01d      	beq.n	8102a08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81029cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81029d0:	d825      	bhi.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 81029d2:	2b00      	cmp	r3, #0
 81029d4:	d006      	beq.n	81029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81029d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81029da:	d00a      	beq.n	81029f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81029dc:	e01f      	b.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 81029de:	bf00      	nop
 81029e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81029e4:	4ba2      	ldr	r3, [pc, #648]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029e8:	4aa1      	ldr	r2, [pc, #644]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81029ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81029ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81029f0:	e01c      	b.n	8102a2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81029f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029f6:	3308      	adds	r3, #8
 81029f8:	2100      	movs	r1, #0
 81029fa:	4618      	mov	r0, r3
 81029fc:	f002 fa2e 	bl	8104e5c <RCCEx_PLL2_Config>
 8102a00:	4603      	mov	r3, r0
 8102a02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102a06:	e011      	b.n	8102a2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a0c:	3328      	adds	r3, #40	@ 0x28
 8102a0e:	2100      	movs	r1, #0
 8102a10:	4618      	mov	r0, r3
 8102a12:	f002 fad5 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102a16:	4603      	mov	r3, r0
 8102a18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102a1c:	e006      	b.n	8102a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102a1e:	2301      	movs	r3, #1
 8102a20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102a24:	e002      	b.n	8102a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102a26:	bf00      	nop
 8102a28:	e000      	b.n	8102a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a30:	2b00      	cmp	r3, #0
 8102a32:	d10b      	bne.n	8102a4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102a34:	4b8e      	ldr	r3, [pc, #568]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102a44:	4a8a      	ldr	r2, [pc, #552]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a46:	430b      	orrs	r3, r1
 8102a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8102a4a:	e003      	b.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102a60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8102a64:	2300      	movs	r3, #0
 8102a66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102a6a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102a6e:	460b      	mov	r3, r1
 8102a70:	4313      	orrs	r3, r2
 8102a72:	d03a      	beq.n	8102aea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102a7a:	2b30      	cmp	r3, #48	@ 0x30
 8102a7c:	d01f      	beq.n	8102abe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102a7e:	2b30      	cmp	r3, #48	@ 0x30
 8102a80:	d819      	bhi.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102a82:	2b20      	cmp	r3, #32
 8102a84:	d00c      	beq.n	8102aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102a86:	2b20      	cmp	r3, #32
 8102a88:	d815      	bhi.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d019      	beq.n	8102ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102a8e:	2b10      	cmp	r3, #16
 8102a90:	d111      	bne.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a92:	4b77      	ldr	r3, [pc, #476]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a96:	4a76      	ldr	r2, [pc, #472]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102a9e:	e011      	b.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102aa4:	3308      	adds	r3, #8
 8102aa6:	2102      	movs	r1, #2
 8102aa8:	4618      	mov	r0, r3
 8102aaa:	f002 f9d7 	bl	8104e5c <RCCEx_PLL2_Config>
 8102aae:	4603      	mov	r3, r0
 8102ab0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102ab4:	e006      	b.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102ab6:	2301      	movs	r3, #1
 8102ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102abc:	e002      	b.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102abe:	bf00      	nop
 8102ac0:	e000      	b.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d10a      	bne.n	8102ae2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102acc:	4b68      	ldr	r3, [pc, #416]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102ad0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102ada:	4a65      	ldr	r2, [pc, #404]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102adc:	430b      	orrs	r3, r1
 8102ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102ae0:	e003      	b.n	8102aea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ae2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ae6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102af2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102af6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102afa:	2300      	movs	r3, #0
 8102afc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102b00:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102b04:	460b      	mov	r3, r1
 8102b06:	4313      	orrs	r3, r2
 8102b08:	d051      	beq.n	8102bae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102b14:	d035      	beq.n	8102b82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102b1a:	d82e      	bhi.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102b1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102b20:	d031      	beq.n	8102b86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102b26:	d828      	bhi.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102b2c:	d01a      	beq.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102b32:	d822      	bhi.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102b34:	2b00      	cmp	r3, #0
 8102b36:	d003      	beq.n	8102b40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102b3c:	d007      	beq.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102b3e:	e01c      	b.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b40:	4b4b      	ldr	r3, [pc, #300]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b44:	4a4a      	ldr	r2, [pc, #296]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102b4c:	e01c      	b.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b52:	3308      	adds	r3, #8
 8102b54:	2100      	movs	r1, #0
 8102b56:	4618      	mov	r0, r3
 8102b58:	f002 f980 	bl	8104e5c <RCCEx_PLL2_Config>
 8102b5c:	4603      	mov	r3, r0
 8102b5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102b62:	e011      	b.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b68:	3328      	adds	r3, #40	@ 0x28
 8102b6a:	2100      	movs	r1, #0
 8102b6c:	4618      	mov	r0, r3
 8102b6e:	f002 fa27 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102b72:	4603      	mov	r3, r0
 8102b74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102b78:	e006      	b.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b7a:	2301      	movs	r3, #1
 8102b7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102b80:	e002      	b.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102b82:	bf00      	nop
 8102b84:	e000      	b.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b8c:	2b00      	cmp	r3, #0
 8102b8e:	d10a      	bne.n	8102ba6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102b90:	4b37      	ldr	r3, [pc, #220]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b9e:	4a34      	ldr	r2, [pc, #208]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ba0:	430b      	orrs	r3, r1
 8102ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8102ba4:	e003      	b.n	8102bae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ba6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102baa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102bba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102bbe:	2300      	movs	r3, #0
 8102bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102bc8:	460b      	mov	r3, r1
 8102bca:	4313      	orrs	r3, r2
 8102bcc:	d056      	beq.n	8102c7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102bd8:	d033      	beq.n	8102c42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102bde:	d82c      	bhi.n	8102c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102be0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102be4:	d02f      	beq.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102be6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102bea:	d826      	bhi.n	8102c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102bf0:	d02b      	beq.n	8102c4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102bf6:	d820      	bhi.n	8102c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102bfc:	d012      	beq.n	8102c24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102c02:	d81a      	bhi.n	8102c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d022      	beq.n	8102c4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102c0c:	d115      	bne.n	8102c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c12:	3308      	adds	r3, #8
 8102c14:	2101      	movs	r1, #1
 8102c16:	4618      	mov	r0, r3
 8102c18:	f002 f920 	bl	8104e5c <RCCEx_PLL2_Config>
 8102c1c:	4603      	mov	r3, r0
 8102c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102c22:	e015      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c28:	3328      	adds	r3, #40	@ 0x28
 8102c2a:	2101      	movs	r1, #1
 8102c2c:	4618      	mov	r0, r3
 8102c2e:	f002 f9c7 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102c32:	4603      	mov	r3, r0
 8102c34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102c38:	e00a      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c3a:	2301      	movs	r3, #1
 8102c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102c40:	e006      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102c42:	bf00      	nop
 8102c44:	e004      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102c46:	bf00      	nop
 8102c48:	e002      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102c4a:	bf00      	nop
 8102c4c:	e000      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102c54:	2b00      	cmp	r3, #0
 8102c56:	d10d      	bne.n	8102c74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102c58:	4b05      	ldr	r3, [pc, #20]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102c66:	4a02      	ldr	r2, [pc, #8]	@ (8102c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102c68:	430b      	orrs	r3, r1
 8102c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8102c6c:	e006      	b.n	8102c7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8102c6e:	bf00      	nop
 8102c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102c78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8102c88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102c8c:	2300      	movs	r3, #0
 8102c8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102c92:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102c96:	460b      	mov	r3, r1
 8102c98:	4313      	orrs	r3, r2
 8102c9a:	d055      	beq.n	8102d48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102ca8:	d033      	beq.n	8102d12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102cae:	d82c      	bhi.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102cb4:	d02f      	beq.n	8102d16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102cba:	d826      	bhi.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102cbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102cc0:	d02b      	beq.n	8102d1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8102cc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102cc6:	d820      	bhi.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102ccc:	d012      	beq.n	8102cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102cd2:	d81a      	bhi.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d022      	beq.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102cdc:	d115      	bne.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ce2:	3308      	adds	r3, #8
 8102ce4:	2101      	movs	r1, #1
 8102ce6:	4618      	mov	r0, r3
 8102ce8:	f002 f8b8 	bl	8104e5c <RCCEx_PLL2_Config>
 8102cec:	4603      	mov	r3, r0
 8102cee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102cf2:	e015      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102cf8:	3328      	adds	r3, #40	@ 0x28
 8102cfa:	2101      	movs	r1, #1
 8102cfc:	4618      	mov	r0, r3
 8102cfe:	f002 f95f 	bl	8104fc0 <RCCEx_PLL3_Config>
 8102d02:	4603      	mov	r3, r0
 8102d04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102d08:	e00a      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8102d0a:	2301      	movs	r3, #1
 8102d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102d10:	e006      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102d12:	bf00      	nop
 8102d14:	e004      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102d16:	bf00      	nop
 8102d18:	e002      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102d1a:	bf00      	nop
 8102d1c:	e000      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102d24:	2b00      	cmp	r3, #0
 8102d26:	d10b      	bne.n	8102d40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102d28:	4bb7      	ldr	r3, [pc, #732]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d2c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102d38:	4ab3      	ldr	r2, [pc, #716]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102d3a:	430b      	orrs	r3, r1
 8102d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8102d3e:	e003      	b.n	8102d48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102d44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8102d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d50:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8102d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102d58:	2300      	movs	r3, #0
 8102d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8102d5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8102d62:	460b      	mov	r3, r1
 8102d64:	4313      	orrs	r3, r2
 8102d66:	d02a      	beq.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8102d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102d6e:	2b00      	cmp	r3, #0
 8102d70:	d011      	beq.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8102d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102d76:	d10a      	bne.n	8102d8e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d7c:	3308      	adds	r3, #8
 8102d7e:	2101      	movs	r1, #1
 8102d80:	4618      	mov	r0, r3
 8102d82:	f002 f86b 	bl	8104e5c <RCCEx_PLL2_Config>
 8102d86:	4603      	mov	r3, r0
 8102d88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8102d8c:	e004      	b.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102d8e:	2301      	movs	r3, #1
 8102d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102d94:	e000      	b.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8102d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d10a      	bne.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8102da0:	4b99      	ldr	r3, [pc, #612]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102da4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8102da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102dae:	4a96      	ldr	r2, [pc, #600]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102db0:	430b      	orrs	r3, r1
 8102db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102db4:	e003      	b.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102db6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102dba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dc6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102dce:	2300      	movs	r3, #0
 8102dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102dd4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102dd8:	460b      	mov	r3, r1
 8102dda:	4313      	orrs	r3, r2
 8102ddc:	d037      	beq.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102de8:	d00e      	beq.n	8102e08 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8102dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102dee:	d816      	bhi.n	8102e1e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8102df0:	2b00      	cmp	r3, #0
 8102df2:	d018      	beq.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8102df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102df8:	d111      	bne.n	8102e1e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102dfa:	4b83      	ldr	r3, [pc, #524]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102dfe:	4a82      	ldr	r2, [pc, #520]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102e06:	e00f      	b.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e0c:	3308      	adds	r3, #8
 8102e0e:	2101      	movs	r1, #1
 8102e10:	4618      	mov	r0, r3
 8102e12:	f002 f823 	bl	8104e5c <RCCEx_PLL2_Config>
 8102e16:	4603      	mov	r3, r0
 8102e18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102e1c:	e004      	b.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e1e:	2301      	movs	r3, #1
 8102e20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102e24:	e000      	b.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8102e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e2c:	2b00      	cmp	r3, #0
 8102e2e:	d10a      	bne.n	8102e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102e30:	4b75      	ldr	r3, [pc, #468]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102e34:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102e3e:	4a72      	ldr	r2, [pc, #456]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102e40:	430b      	orrs	r3, r1
 8102e42:	6513      	str	r3, [r2, #80]	@ 0x50
 8102e44:	e003      	b.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e56:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102e5e:	2300      	movs	r3, #0
 8102e60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8102e64:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8102e68:	460b      	mov	r3, r1
 8102e6a:	4313      	orrs	r3, r2
 8102e6c:	d03a      	beq.n	8102ee4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102e74:	2b03      	cmp	r3, #3
 8102e76:	d81d      	bhi.n	8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8102e78:	a201      	add	r2, pc, #4	@ (adr r2, 8102e80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8102e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e7e:	bf00      	nop
 8102e80:	08102ebd 	.word	0x08102ebd
 8102e84:	08102e91 	.word	0x08102e91
 8102e88:	08102e9f 	.word	0x08102e9f
 8102e8c:	08102ebd 	.word	0x08102ebd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e90:	4b5d      	ldr	r3, [pc, #372]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102e94:	4a5c      	ldr	r2, [pc, #368]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102e9c:	e00f      	b.n	8102ebe <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ea2:	3308      	adds	r3, #8
 8102ea4:	2102      	movs	r1, #2
 8102ea6:	4618      	mov	r0, r3
 8102ea8:	f001 ffd8 	bl	8104e5c <RCCEx_PLL2_Config>
 8102eac:	4603      	mov	r3, r0
 8102eae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102eb2:	e004      	b.n	8102ebe <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102eb4:	2301      	movs	r3, #1
 8102eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102eba:	e000      	b.n	8102ebe <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8102ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ebe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ec2:	2b00      	cmp	r3, #0
 8102ec4:	d10a      	bne.n	8102edc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102ec6:	4b50      	ldr	r3, [pc, #320]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102eca:	f023 0103 	bic.w	r1, r3, #3
 8102ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102ed6:	430b      	orrs	r3, r1
 8102ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102eda:	e003      	b.n	8102ee4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102edc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ee0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102eec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102ef4:	2300      	movs	r3, #0
 8102ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8102efa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8102efe:	460b      	mov	r3, r1
 8102f00:	4313      	orrs	r3, r2
 8102f02:	f000 80a0 	beq.w	8103046 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102f06:	4b41      	ldr	r3, [pc, #260]	@ (810300c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a40      	ldr	r2, [pc, #256]	@ (810300c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8102f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102f10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102f12:	f7fd fdf9 	bl	8100b08 <HAL_GetTick>
 8102f16:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102f1a:	e00b      	b.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102f1c:	f7fd fdf4 	bl	8100b08 <HAL_GetTick>
 8102f20:	4602      	mov	r2, r0
 8102f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8102f26:	1ad3      	subs	r3, r2, r3
 8102f28:	2b64      	cmp	r3, #100	@ 0x64
 8102f2a:	d903      	bls.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8102f2c:	2303      	movs	r3, #3
 8102f2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102f32:	e005      	b.n	8102f40 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102f34:	4b35      	ldr	r3, [pc, #212]	@ (810300c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102f3c:	2b00      	cmp	r3, #0
 8102f3e:	d0ed      	beq.n	8102f1c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8102f40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102f44:	2b00      	cmp	r3, #0
 8102f46:	d17a      	bne.n	810303e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102f48:	4b2f      	ldr	r3, [pc, #188]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102f54:	4053      	eors	r3, r2
 8102f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102f5a:	2b00      	cmp	r3, #0
 8102f5c:	d015      	beq.n	8102f8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102f66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102f6a:	4b27      	ldr	r3, [pc, #156]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102f6e:	4a26      	ldr	r2, [pc, #152]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102f74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102f76:	4b24      	ldr	r3, [pc, #144]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102f7a:	4a23      	ldr	r2, [pc, #140]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102f80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102f82:	4a21      	ldr	r2, [pc, #132]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102f84:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8102f88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f96:	d118      	bne.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102f98:	f7fd fdb6 	bl	8100b08 <HAL_GetTick>
 8102f9c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102fa0:	e00d      	b.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102fa2:	f7fd fdb1 	bl	8100b08 <HAL_GetTick>
 8102fa6:	4602      	mov	r2, r0
 8102fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8102fac:	1ad2      	subs	r2, r2, r3
 8102fae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102fb2:	429a      	cmp	r2, r3
 8102fb4:	d903      	bls.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8102fb6:	2303      	movs	r3, #3
 8102fb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8102fbc:	e005      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102fbe:	4b12      	ldr	r3, [pc, #72]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102fc2:	f003 0302 	and.w	r3, r3, #2
 8102fc6:	2b00      	cmp	r3, #0
 8102fc8:	d0eb      	beq.n	8102fa2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8102fca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102fce:	2b00      	cmp	r3, #0
 8102fd0:	d130      	bne.n	8103034 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102fe2:	d115      	bne.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8102fe4:	4b08      	ldr	r3, [pc, #32]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102fe6:	691b      	ldr	r3, [r3, #16]
 8102fe8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102ff4:	091b      	lsrs	r3, r3, #4
 8102ff6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102ffa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102ffe:	4a02      	ldr	r2, [pc, #8]	@ (8103008 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103000:	430b      	orrs	r3, r1
 8103002:	6113      	str	r3, [r2, #16]
 8103004:	e00a      	b.n	810301c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103006:	bf00      	nop
 8103008:	58024400 	.word	0x58024400
 810300c:	58024800 	.word	0x58024800
 8103010:	4bd4      	ldr	r3, [pc, #848]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103012:	691b      	ldr	r3, [r3, #16]
 8103014:	4ad3      	ldr	r2, [pc, #844]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103016:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810301a:	6113      	str	r3, [r2, #16]
 810301c:	4bd1      	ldr	r3, [pc, #836]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810301e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8103020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103024:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810302c:	4acd      	ldr	r2, [pc, #820]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810302e:	430b      	orrs	r3, r1
 8103030:	6713      	str	r3, [r2, #112]	@ 0x70
 8103032:	e008      	b.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103034:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103038:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810303c:	e003      	b.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810303e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103042:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810304e:	f002 0301 	and.w	r3, r2, #1
 8103052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103056:	2300      	movs	r3, #0
 8103058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810305c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8103060:	460b      	mov	r3, r1
 8103062:	4313      	orrs	r3, r2
 8103064:	f000 808b 	beq.w	810317e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103070:	2b28      	cmp	r3, #40	@ 0x28
 8103072:	d86b      	bhi.n	810314c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103074:	a201      	add	r2, pc, #4	@ (adr r2, 810307c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810307a:	bf00      	nop
 810307c:	08103155 	.word	0x08103155
 8103080:	0810314d 	.word	0x0810314d
 8103084:	0810314d 	.word	0x0810314d
 8103088:	0810314d 	.word	0x0810314d
 810308c:	0810314d 	.word	0x0810314d
 8103090:	0810314d 	.word	0x0810314d
 8103094:	0810314d 	.word	0x0810314d
 8103098:	0810314d 	.word	0x0810314d
 810309c:	08103121 	.word	0x08103121
 81030a0:	0810314d 	.word	0x0810314d
 81030a4:	0810314d 	.word	0x0810314d
 81030a8:	0810314d 	.word	0x0810314d
 81030ac:	0810314d 	.word	0x0810314d
 81030b0:	0810314d 	.word	0x0810314d
 81030b4:	0810314d 	.word	0x0810314d
 81030b8:	0810314d 	.word	0x0810314d
 81030bc:	08103137 	.word	0x08103137
 81030c0:	0810314d 	.word	0x0810314d
 81030c4:	0810314d 	.word	0x0810314d
 81030c8:	0810314d 	.word	0x0810314d
 81030cc:	0810314d 	.word	0x0810314d
 81030d0:	0810314d 	.word	0x0810314d
 81030d4:	0810314d 	.word	0x0810314d
 81030d8:	0810314d 	.word	0x0810314d
 81030dc:	08103155 	.word	0x08103155
 81030e0:	0810314d 	.word	0x0810314d
 81030e4:	0810314d 	.word	0x0810314d
 81030e8:	0810314d 	.word	0x0810314d
 81030ec:	0810314d 	.word	0x0810314d
 81030f0:	0810314d 	.word	0x0810314d
 81030f4:	0810314d 	.word	0x0810314d
 81030f8:	0810314d 	.word	0x0810314d
 81030fc:	08103155 	.word	0x08103155
 8103100:	0810314d 	.word	0x0810314d
 8103104:	0810314d 	.word	0x0810314d
 8103108:	0810314d 	.word	0x0810314d
 810310c:	0810314d 	.word	0x0810314d
 8103110:	0810314d 	.word	0x0810314d
 8103114:	0810314d 	.word	0x0810314d
 8103118:	0810314d 	.word	0x0810314d
 810311c:	08103155 	.word	0x08103155
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103124:	3308      	adds	r3, #8
 8103126:	2101      	movs	r1, #1
 8103128:	4618      	mov	r0, r3
 810312a:	f001 fe97 	bl	8104e5c <RCCEx_PLL2_Config>
 810312e:	4603      	mov	r3, r0
 8103130:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103134:	e00f      	b.n	8103156 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810313a:	3328      	adds	r3, #40	@ 0x28
 810313c:	2101      	movs	r1, #1
 810313e:	4618      	mov	r0, r3
 8103140:	f001 ff3e 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103144:	4603      	mov	r3, r0
 8103146:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810314a:	e004      	b.n	8103156 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810314c:	2301      	movs	r3, #1
 810314e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103152:	e000      	b.n	8103156 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810315a:	2b00      	cmp	r3, #0
 810315c:	d10b      	bne.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810315e:	4b81      	ldr	r3, [pc, #516]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103162:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810316e:	4a7d      	ldr	r2, [pc, #500]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103170:	430b      	orrs	r3, r1
 8103172:	6553      	str	r3, [r2, #84]	@ 0x54
 8103174:	e003      	b.n	810317e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103176:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810317a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810317e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103186:	f002 0302 	and.w	r3, r2, #2
 810318a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810318e:	2300      	movs	r3, #0
 8103190:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103194:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103198:	460b      	mov	r3, r1
 810319a:	4313      	orrs	r3, r2
 810319c:	d042      	beq.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810319e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81031a4:	2b05      	cmp	r3, #5
 81031a6:	d825      	bhi.n	81031f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81031a8:	a201      	add	r2, pc, #4	@ (adr r2, 81031b0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031ae:	bf00      	nop
 81031b0:	081031fd 	.word	0x081031fd
 81031b4:	081031c9 	.word	0x081031c9
 81031b8:	081031df 	.word	0x081031df
 81031bc:	081031fd 	.word	0x081031fd
 81031c0:	081031fd 	.word	0x081031fd
 81031c4:	081031fd 	.word	0x081031fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81031c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031cc:	3308      	adds	r3, #8
 81031ce:	2101      	movs	r1, #1
 81031d0:	4618      	mov	r0, r3
 81031d2:	f001 fe43 	bl	8104e5c <RCCEx_PLL2_Config>
 81031d6:	4603      	mov	r3, r0
 81031d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81031dc:	e00f      	b.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81031de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031e2:	3328      	adds	r3, #40	@ 0x28
 81031e4:	2101      	movs	r1, #1
 81031e6:	4618      	mov	r0, r3
 81031e8:	f001 feea 	bl	8104fc0 <RCCEx_PLL3_Config>
 81031ec:	4603      	mov	r3, r0
 81031ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81031f2:	e004      	b.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81031f4:	2301      	movs	r3, #1
 81031f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81031fa:	e000      	b.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 81031fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103202:	2b00      	cmp	r3, #0
 8103204:	d10a      	bne.n	810321c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103206:	4b57      	ldr	r3, [pc, #348]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810320a:	f023 0107 	bic.w	r1, r3, #7
 810320e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103214:	4a53      	ldr	r2, [pc, #332]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103216:	430b      	orrs	r3, r1
 8103218:	6553      	str	r3, [r2, #84]	@ 0x54
 810321a:	e003      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810321c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103220:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103228:	e9d3 2300 	ldrd	r2, r3, [r3]
 810322c:	f002 0304 	and.w	r3, r2, #4
 8103230:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103234:	2300      	movs	r3, #0
 8103236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810323a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810323e:	460b      	mov	r3, r1
 8103240:	4313      	orrs	r3, r2
 8103242:	d044      	beq.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810324c:	2b05      	cmp	r3, #5
 810324e:	d825      	bhi.n	810329c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103250:	a201      	add	r2, pc, #4	@ (adr r2, 8103258 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103256:	bf00      	nop
 8103258:	081032a5 	.word	0x081032a5
 810325c:	08103271 	.word	0x08103271
 8103260:	08103287 	.word	0x08103287
 8103264:	081032a5 	.word	0x081032a5
 8103268:	081032a5 	.word	0x081032a5
 810326c:	081032a5 	.word	0x081032a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103270:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103274:	3308      	adds	r3, #8
 8103276:	2101      	movs	r1, #1
 8103278:	4618      	mov	r0, r3
 810327a:	f001 fdef 	bl	8104e5c <RCCEx_PLL2_Config>
 810327e:	4603      	mov	r3, r0
 8103280:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103284:	e00f      	b.n	81032a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810328a:	3328      	adds	r3, #40	@ 0x28
 810328c:	2101      	movs	r1, #1
 810328e:	4618      	mov	r0, r3
 8103290:	f001 fe96 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103294:	4603      	mov	r3, r0
 8103296:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810329a:	e004      	b.n	81032a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810329c:	2301      	movs	r3, #1
 810329e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81032a2:	e000      	b.n	81032a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81032aa:	2b00      	cmp	r3, #0
 81032ac:	d10b      	bne.n	81032c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81032ae:	4b2d      	ldr	r3, [pc, #180]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81032b2:	f023 0107 	bic.w	r1, r3, #7
 81032b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81032be:	4a29      	ldr	r2, [pc, #164]	@ (8103364 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81032c0:	430b      	orrs	r3, r1
 81032c2:	6593      	str	r3, [r2, #88]	@ 0x58
 81032c4:	e003      	b.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81032ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81032ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032d6:	f002 0320 	and.w	r3, r2, #32
 81032da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81032de:	2300      	movs	r3, #0
 81032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81032e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81032e8:	460b      	mov	r3, r1
 81032ea:	4313      	orrs	r3, r2
 81032ec:	d057      	beq.n	810339e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81032ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81032f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81032fa:	d035      	beq.n	8103368 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 81032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103300:	d82c      	bhi.n	810335c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103306:	d031      	beq.n	810336c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810330c:	d826      	bhi.n	810335c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810330e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103312:	d02d      	beq.n	8103370 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103318:	d820      	bhi.n	810335c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810331a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810331e:	d012      	beq.n	8103346 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103324:	d81a      	bhi.n	810335c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103326:	2b00      	cmp	r3, #0
 8103328:	d024      	beq.n	8103374 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810332a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810332e:	d115      	bne.n	810335c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103334:	3308      	adds	r3, #8
 8103336:	2100      	movs	r1, #0
 8103338:	4618      	mov	r0, r3
 810333a:	f001 fd8f 	bl	8104e5c <RCCEx_PLL2_Config>
 810333e:	4603      	mov	r3, r0
 8103340:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103344:	e017      	b.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810334a:	3328      	adds	r3, #40	@ 0x28
 810334c:	2102      	movs	r1, #2
 810334e:	4618      	mov	r0, r3
 8103350:	f001 fe36 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103354:	4603      	mov	r3, r0
 8103356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810335a:	e00c      	b.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810335c:	2301      	movs	r3, #1
 810335e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103362:	e008      	b.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103364:	58024400 	.word	0x58024400
        break;
 8103368:	bf00      	nop
 810336a:	e004      	b.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810336c:	bf00      	nop
 810336e:	e002      	b.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103370:	bf00      	nop
 8103372:	e000      	b.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810337a:	2b00      	cmp	r3, #0
 810337c:	d10b      	bne.n	8103396 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810337e:	4bc2      	ldr	r3, [pc, #776]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103382:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810338e:	4abe      	ldr	r2, [pc, #760]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103390:	430b      	orrs	r3, r1
 8103392:	6553      	str	r3, [r2, #84]	@ 0x54
 8103394:	e003      	b.n	810339e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810339a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810339e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81033aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81033ae:	2300      	movs	r3, #0
 81033b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81033b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81033b8:	460b      	mov	r3, r1
 81033ba:	4313      	orrs	r3, r2
 81033bc:	d055      	beq.n	810346a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81033be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81033c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81033ca:	d033      	beq.n	8103434 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 81033cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81033d0:	d82c      	bhi.n	810342c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81033d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81033d6:	d02f      	beq.n	8103438 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 81033d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81033dc:	d826      	bhi.n	810342c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81033de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81033e2:	d02b      	beq.n	810343c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 81033e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81033e8:	d820      	bhi.n	810342c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81033ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81033ee:	d012      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 81033f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81033f4:	d81a      	bhi.n	810342c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	d022      	beq.n	8103440 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 81033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81033fe:	d115      	bne.n	810342c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103404:	3308      	adds	r3, #8
 8103406:	2100      	movs	r1, #0
 8103408:	4618      	mov	r0, r3
 810340a:	f001 fd27 	bl	8104e5c <RCCEx_PLL2_Config>
 810340e:	4603      	mov	r3, r0
 8103410:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103414:	e015      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810341a:	3328      	adds	r3, #40	@ 0x28
 810341c:	2102      	movs	r1, #2
 810341e:	4618      	mov	r0, r3
 8103420:	f001 fdce 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103424:	4603      	mov	r3, r0
 8103426:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810342a:	e00a      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810342c:	2301      	movs	r3, #1
 810342e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103432:	e006      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103434:	bf00      	nop
 8103436:	e004      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103438:	bf00      	nop
 810343a:	e002      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810343c:	bf00      	nop
 810343e:	e000      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103446:	2b00      	cmp	r3, #0
 8103448:	d10b      	bne.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810344a:	4b8f      	ldr	r3, [pc, #572]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810344e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103456:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810345a:	4a8b      	ldr	r2, [pc, #556]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810345c:	430b      	orrs	r3, r1
 810345e:	6593      	str	r3, [r2, #88]	@ 0x58
 8103460:	e003      	b.n	810346a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103462:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103466:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810346a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103472:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103476:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810347a:	2300      	movs	r3, #0
 810347c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8103480:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8103484:	460b      	mov	r3, r1
 8103486:	4313      	orrs	r3, r2
 8103488:	d055      	beq.n	8103536 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810348a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810348e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103492:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103496:	d033      	beq.n	8103500 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103498:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810349c:	d82c      	bhi.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810349e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81034a2:	d02f      	beq.n	8103504 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81034a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81034a8:	d826      	bhi.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81034aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81034ae:	d02b      	beq.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81034b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81034b4:	d820      	bhi.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81034b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81034ba:	d012      	beq.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81034bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81034c0:	d81a      	bhi.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	d022      	beq.n	810350c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81034c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81034ca:	d115      	bne.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034d0:	3308      	adds	r3, #8
 81034d2:	2100      	movs	r1, #0
 81034d4:	4618      	mov	r0, r3
 81034d6:	f001 fcc1 	bl	8104e5c <RCCEx_PLL2_Config>
 81034da:	4603      	mov	r3, r0
 81034dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81034e0:	e015      	b.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034e6:	3328      	adds	r3, #40	@ 0x28
 81034e8:	2102      	movs	r1, #2
 81034ea:	4618      	mov	r0, r3
 81034ec:	f001 fd68 	bl	8104fc0 <RCCEx_PLL3_Config>
 81034f0:	4603      	mov	r3, r0
 81034f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81034f6:	e00a      	b.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034f8:	2301      	movs	r3, #1
 81034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81034fe:	e006      	b.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103500:	bf00      	nop
 8103502:	e004      	b.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103504:	bf00      	nop
 8103506:	e002      	b.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103508:	bf00      	nop
 810350a:	e000      	b.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810350e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103512:	2b00      	cmp	r3, #0
 8103514:	d10b      	bne.n	810352e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103516:	4b5c      	ldr	r3, [pc, #368]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810351a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810351e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103526:	4a58      	ldr	r2, [pc, #352]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103528:	430b      	orrs	r3, r1
 810352a:	6593      	str	r3, [r2, #88]	@ 0x58
 810352c:	e003      	b.n	8103536 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810352e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810353e:	f002 0308 	and.w	r3, r2, #8
 8103542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103546:	2300      	movs	r3, #0
 8103548:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810354c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103550:	460b      	mov	r3, r1
 8103552:	4313      	orrs	r3, r2
 8103554:	d01e      	beq.n	8103594 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810355e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103562:	d10c      	bne.n	810357e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103564:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103568:	3328      	adds	r3, #40	@ 0x28
 810356a:	2102      	movs	r1, #2
 810356c:	4618      	mov	r0, r3
 810356e:	f001 fd27 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103572:	4603      	mov	r3, r0
 8103574:	2b00      	cmp	r3, #0
 8103576:	d002      	beq.n	810357e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103578:	2301      	movs	r3, #1
 810357a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810357e:	4b42      	ldr	r3, [pc, #264]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810358e:	4a3e      	ldr	r2, [pc, #248]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103590:	430b      	orrs	r3, r1
 8103592:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103598:	e9d3 2300 	ldrd	r2, r3, [r3]
 810359c:	f002 0310 	and.w	r3, r2, #16
 81035a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81035a4:	2300      	movs	r3, #0
 81035a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81035aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81035ae:	460b      	mov	r3, r1
 81035b0:	4313      	orrs	r3, r2
 81035b2:	d01e      	beq.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81035b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81035bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81035c0:	d10c      	bne.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81035c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035c6:	3328      	adds	r3, #40	@ 0x28
 81035c8:	2102      	movs	r1, #2
 81035ca:	4618      	mov	r0, r3
 81035cc:	f001 fcf8 	bl	8104fc0 <RCCEx_PLL3_Config>
 81035d0:	4603      	mov	r3, r0
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d002      	beq.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 81035d6:	2301      	movs	r3, #1
 81035d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81035e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81035e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81035ec:	4a26      	ldr	r2, [pc, #152]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81035ee:	430b      	orrs	r3, r1
 81035f0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81035f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035fa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81035fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103602:	2300      	movs	r3, #0
 8103604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103608:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810360c:	460b      	mov	r3, r1
 810360e:	4313      	orrs	r3, r2
 8103610:	d040      	beq.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810361a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810361e:	d022      	beq.n	8103666 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103624:	d81b      	bhi.n	810365e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103626:	2b00      	cmp	r3, #0
 8103628:	d003      	beq.n	8103632 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810362a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810362e:	d00b      	beq.n	8103648 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103630:	e015      	b.n	810365e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103636:	3308      	adds	r3, #8
 8103638:	2100      	movs	r1, #0
 810363a:	4618      	mov	r0, r3
 810363c:	f001 fc0e 	bl	8104e5c <RCCEx_PLL2_Config>
 8103640:	4603      	mov	r3, r0
 8103642:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103646:	e00f      	b.n	8103668 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810364c:	3328      	adds	r3, #40	@ 0x28
 810364e:	2102      	movs	r1, #2
 8103650:	4618      	mov	r0, r3
 8103652:	f001 fcb5 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103656:	4603      	mov	r3, r0
 8103658:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810365c:	e004      	b.n	8103668 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810365e:	2301      	movs	r3, #1
 8103660:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103664:	e000      	b.n	8103668 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103668:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810366c:	2b00      	cmp	r3, #0
 810366e:	d10d      	bne.n	810368c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103670:	4b05      	ldr	r3, [pc, #20]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103674:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103678:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810367c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103680:	4a01      	ldr	r2, [pc, #4]	@ (8103688 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103682:	430b      	orrs	r3, r1
 8103684:	6593      	str	r3, [r2, #88]	@ 0x58
 8103686:	e005      	b.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8103688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810368c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103690:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103698:	e9d3 2300 	ldrd	r2, r3, [r3]
 810369c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81036a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 81036a2:	2300      	movs	r3, #0
 81036a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81036a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81036aa:	460b      	mov	r3, r1
 81036ac:	4313      	orrs	r3, r2
 81036ae:	d03b      	beq.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81036b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81036b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81036bc:	d01f      	beq.n	81036fe <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81036be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81036c2:	d818      	bhi.n	81036f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81036c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81036c8:	d003      	beq.n	81036d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 81036ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81036ce:	d007      	beq.n	81036e0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 81036d0:	e011      	b.n	81036f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036d2:	4b64      	ldr	r3, [pc, #400]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036d6:	4a63      	ldr	r2, [pc, #396]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81036d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81036dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81036de:	e00f      	b.n	8103700 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81036e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036e4:	3328      	adds	r3, #40	@ 0x28
 81036e6:	2101      	movs	r1, #1
 81036e8:	4618      	mov	r0, r3
 81036ea:	f001 fc69 	bl	8104fc0 <RCCEx_PLL3_Config>
 81036ee:	4603      	mov	r3, r0
 81036f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 81036f4:	e004      	b.n	8103700 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036f6:	2301      	movs	r3, #1
 81036f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81036fc:	e000      	b.n	8103700 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 81036fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103700:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103704:	2b00      	cmp	r3, #0
 8103706:	d10b      	bne.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103708:	4b56      	ldr	r3, [pc, #344]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810370a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810370c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103718:	4a52      	ldr	r2, [pc, #328]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810371a:	430b      	orrs	r3, r1
 810371c:	6553      	str	r3, [r2, #84]	@ 0x54
 810371e:	e003      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103720:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103724:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103730:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103734:	673b      	str	r3, [r7, #112]	@ 0x70
 8103736:	2300      	movs	r3, #0
 8103738:	677b      	str	r3, [r7, #116]	@ 0x74
 810373a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810373e:	460b      	mov	r3, r1
 8103740:	4313      	orrs	r3, r2
 8103742:	d031      	beq.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103744:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810374a:	2b00      	cmp	r3, #0
 810374c:	d003      	beq.n	8103756 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810374e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103752:	d007      	beq.n	8103764 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8103754:	e011      	b.n	810377a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103756:	4b43      	ldr	r3, [pc, #268]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810375a:	4a42      	ldr	r2, [pc, #264]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810375c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103762:	e00e      	b.n	8103782 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103768:	3308      	adds	r3, #8
 810376a:	2102      	movs	r1, #2
 810376c:	4618      	mov	r0, r3
 810376e:	f001 fb75 	bl	8104e5c <RCCEx_PLL2_Config>
 8103772:	4603      	mov	r3, r0
 8103774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103778:	e003      	b.n	8103782 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810377a:	2301      	movs	r3, #1
 810377c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103782:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103786:	2b00      	cmp	r3, #0
 8103788:	d10a      	bne.n	81037a0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810378a:	4b36      	ldr	r3, [pc, #216]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810378c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810378e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103798:	4a32      	ldr	r2, [pc, #200]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810379a:	430b      	orrs	r3, r1
 810379c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810379e:	e003      	b.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81037a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81037b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 81037b6:	2300      	movs	r3, #0
 81037b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81037ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81037be:	460b      	mov	r3, r1
 81037c0:	4313      	orrs	r3, r2
 81037c2:	d00c      	beq.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81037c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037c8:	3328      	adds	r3, #40	@ 0x28
 81037ca:	2102      	movs	r1, #2
 81037cc:	4618      	mov	r0, r3
 81037ce:	f001 fbf7 	bl	8104fc0 <RCCEx_PLL3_Config>
 81037d2:	4603      	mov	r3, r0
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d002      	beq.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 81037d8:	2301      	movs	r3, #1
 81037da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81037de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81037ea:	663b      	str	r3, [r7, #96]	@ 0x60
 81037ec:	2300      	movs	r3, #0
 81037ee:	667b      	str	r3, [r7, #100]	@ 0x64
 81037f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81037f4:	460b      	mov	r3, r1
 81037f6:	4313      	orrs	r3, r2
 81037f8:	d03a      	beq.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81037fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103806:	d018      	beq.n	810383a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8103808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810380c:	d811      	bhi.n	8103832 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810380e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103812:	d014      	beq.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8103814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103818:	d80b      	bhi.n	8103832 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810381a:	2b00      	cmp	r3, #0
 810381c:	d011      	beq.n	8103842 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810381e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103822:	d106      	bne.n	8103832 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103824:	4b0f      	ldr	r3, [pc, #60]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103828:	4a0e      	ldr	r2, [pc, #56]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810382a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810382e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103830:	e008      	b.n	8103844 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103832:	2301      	movs	r3, #1
 8103834:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103838:	e004      	b.n	8103844 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810383a:	bf00      	nop
 810383c:	e002      	b.n	8103844 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810383e:	bf00      	nop
 8103840:	e000      	b.n	8103844 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103844:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103848:	2b00      	cmp	r3, #0
 810384a:	d10d      	bne.n	8103868 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810384c:	4b05      	ldr	r3, [pc, #20]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103850:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810385c:	4a01      	ldr	r2, [pc, #4]	@ (8103864 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810385e:	430b      	orrs	r3, r1
 8103860:	6553      	str	r3, [r2, #84]	@ 0x54
 8103862:	e005      	b.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8103864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103868:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810386c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103878:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810387c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810387e:	2300      	movs	r3, #0
 8103880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103882:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103886:	460b      	mov	r3, r1
 8103888:	4313      	orrs	r3, r2
 810388a:	d009      	beq.n	81038a0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810388c:	4baa      	ldr	r3, [pc, #680]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103890:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810389a:	4aa7      	ldr	r2, [pc, #668]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810389c:	430b      	orrs	r3, r1
 810389e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81038a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81038ac:	653b      	str	r3, [r7, #80]	@ 0x50
 81038ae:	2300      	movs	r3, #0
 81038b0:	657b      	str	r3, [r7, #84]	@ 0x54
 81038b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81038b6:	460b      	mov	r3, r1
 81038b8:	4313      	orrs	r3, r2
 81038ba:	d00a      	beq.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81038bc:	4b9e      	ldr	r3, [pc, #632]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81038be:	691b      	ldr	r3, [r3, #16]
 81038c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81038c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81038cc:	4a9a      	ldr	r2, [pc, #616]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81038ce:	430b      	orrs	r3, r1
 81038d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81038d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81038de:	64bb      	str	r3, [r7, #72]	@ 0x48
 81038e0:	2300      	movs	r3, #0
 81038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81038e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81038e8:	460b      	mov	r3, r1
 81038ea:	4313      	orrs	r3, r2
 81038ec:	d009      	beq.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81038ee:	4b92      	ldr	r3, [pc, #584]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81038f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81038f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81038f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81038fc:	4a8e      	ldr	r2, [pc, #568]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81038fe:	430b      	orrs	r3, r1
 8103900:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103906:	e9d3 2300 	ldrd	r2, r3, [r3]
 810390a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810390e:	643b      	str	r3, [r7, #64]	@ 0x40
 8103910:	2300      	movs	r3, #0
 8103912:	647b      	str	r3, [r7, #68]	@ 0x44
 8103914:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103918:	460b      	mov	r3, r1
 810391a:	4313      	orrs	r3, r2
 810391c:	d00e      	beq.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810391e:	4b86      	ldr	r3, [pc, #536]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103920:	691b      	ldr	r3, [r3, #16]
 8103922:	4a85      	ldr	r2, [pc, #532]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103924:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103928:	6113      	str	r3, [r2, #16]
 810392a:	4b83      	ldr	r3, [pc, #524]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810392c:	6919      	ldr	r1, [r3, #16]
 810392e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103932:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8103936:	4a80      	ldr	r2, [pc, #512]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103938:	430b      	orrs	r3, r1
 810393a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810393c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103944:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8103948:	63bb      	str	r3, [r7, #56]	@ 0x38
 810394a:	2300      	movs	r3, #0
 810394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810394e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103952:	460b      	mov	r3, r1
 8103954:	4313      	orrs	r3, r2
 8103956:	d009      	beq.n	810396c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103958:	4b77      	ldr	r3, [pc, #476]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810395a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810395c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103966:	4a74      	ldr	r2, [pc, #464]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103968:	430b      	orrs	r3, r1
 810396a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810396c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103974:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8103978:	633b      	str	r3, [r7, #48]	@ 0x30
 810397a:	2300      	movs	r3, #0
 810397c:	637b      	str	r3, [r7, #52]	@ 0x34
 810397e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103982:	460b      	mov	r3, r1
 8103984:	4313      	orrs	r3, r2
 8103986:	d00a      	beq.n	810399e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103988:	4b6b      	ldr	r3, [pc, #428]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810398a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810398c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103998:	4a67      	ldr	r2, [pc, #412]	@ (8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810399a:	430b      	orrs	r3, r1
 810399c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810399e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039a6:	2100      	movs	r1, #0
 81039a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 81039aa:	f003 0301 	and.w	r3, r3, #1
 81039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81039b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81039b4:	460b      	mov	r3, r1
 81039b6:	4313      	orrs	r3, r2
 81039b8:	d011      	beq.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81039ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039be:	3308      	adds	r3, #8
 81039c0:	2100      	movs	r1, #0
 81039c2:	4618      	mov	r0, r3
 81039c4:	f001 fa4a 	bl	8104e5c <RCCEx_PLL2_Config>
 81039c8:	4603      	mov	r3, r0
 81039ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81039ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	d003      	beq.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81039da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81039de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039e6:	2100      	movs	r1, #0
 81039e8:	6239      	str	r1, [r7, #32]
 81039ea:	f003 0302 	and.w	r3, r3, #2
 81039ee:	627b      	str	r3, [r7, #36]	@ 0x24
 81039f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81039f4:	460b      	mov	r3, r1
 81039f6:	4313      	orrs	r3, r2
 81039f8:	d011      	beq.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81039fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039fe:	3308      	adds	r3, #8
 8103a00:	2101      	movs	r1, #1
 8103a02:	4618      	mov	r0, r3
 8103a04:	f001 fa2a 	bl	8104e5c <RCCEx_PLL2_Config>
 8103a08:	4603      	mov	r3, r0
 8103a0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d003      	beq.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a26:	2100      	movs	r1, #0
 8103a28:	61b9      	str	r1, [r7, #24]
 8103a2a:	f003 0304 	and.w	r3, r3, #4
 8103a2e:	61fb      	str	r3, [r7, #28]
 8103a30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103a34:	460b      	mov	r3, r1
 8103a36:	4313      	orrs	r3, r2
 8103a38:	d011      	beq.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a3e:	3308      	adds	r3, #8
 8103a40:	2102      	movs	r1, #2
 8103a42:	4618      	mov	r0, r3
 8103a44:	f001 fa0a 	bl	8104e5c <RCCEx_PLL2_Config>
 8103a48:	4603      	mov	r3, r0
 8103a4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103a4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a52:	2b00      	cmp	r3, #0
 8103a54:	d003      	beq.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a66:	2100      	movs	r1, #0
 8103a68:	6139      	str	r1, [r7, #16]
 8103a6a:	f003 0308 	and.w	r3, r3, #8
 8103a6e:	617b      	str	r3, [r7, #20]
 8103a70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103a74:	460b      	mov	r3, r1
 8103a76:	4313      	orrs	r3, r2
 8103a78:	d011      	beq.n	8103a9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a7e:	3328      	adds	r3, #40	@ 0x28
 8103a80:	2100      	movs	r1, #0
 8103a82:	4618      	mov	r0, r3
 8103a84:	f001 fa9c 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103a88:	4603      	mov	r3, r0
 8103a8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8103a8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d003      	beq.n	8103a9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103aa6:	2100      	movs	r1, #0
 8103aa8:	60b9      	str	r1, [r7, #8]
 8103aaa:	f003 0310 	and.w	r3, r3, #16
 8103aae:	60fb      	str	r3, [r7, #12]
 8103ab0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103ab4:	460b      	mov	r3, r1
 8103ab6:	4313      	orrs	r3, r2
 8103ab8:	d011      	beq.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103abe:	3328      	adds	r3, #40	@ 0x28
 8103ac0:	2101      	movs	r1, #1
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	f001 fa7c 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103ac8:	4603      	mov	r3, r0
 8103aca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103ace:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	d003      	beq.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ada:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ae6:	2100      	movs	r1, #0
 8103ae8:	6039      	str	r1, [r7, #0]
 8103aea:	f003 0320 	and.w	r3, r3, #32
 8103aee:	607b      	str	r3, [r7, #4]
 8103af0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103af4:	460b      	mov	r3, r1
 8103af6:	4313      	orrs	r3, r2
 8103af8:	d011      	beq.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103afe:	3328      	adds	r3, #40	@ 0x28
 8103b00:	2102      	movs	r1, #2
 8103b02:	4618      	mov	r0, r3
 8103b04:	f001 fa5c 	bl	8104fc0 <RCCEx_PLL3_Config>
 8103b08:	4603      	mov	r3, r0
 8103b0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103b0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d003      	beq.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8103b1e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d101      	bne.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8103b26:	2300      	movs	r3, #0
 8103b28:	e000      	b.n	8103b2c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8103b2a:	2301      	movs	r3, #1
}
 8103b2c:	4618      	mov	r0, r3
 8103b2e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8103b32:	46bd      	mov	sp, r7
 8103b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103b38:	58024400 	.word	0x58024400

08103b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8103b3c:	b580      	push	{r7, lr}
 8103b3e:	b090      	sub	sp, #64	@ 0x40
 8103b40:	af00      	add	r7, sp, #0
 8103b42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8103b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103b4a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8103b4e:	430b      	orrs	r3, r1
 8103b50:	f040 8094 	bne.w	8103c7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8103b54:	4b9e      	ldr	r3, [pc, #632]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b58:	f003 0307 	and.w	r3, r3, #7
 8103b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8103b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103b60:	2b04      	cmp	r3, #4
 8103b62:	f200 8087 	bhi.w	8103c74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8103b66:	a201      	add	r2, pc, #4	@ (adr r2, 8103b6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8103b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b6c:	08103b81 	.word	0x08103b81
 8103b70:	08103ba9 	.word	0x08103ba9
 8103b74:	08103bd1 	.word	0x08103bd1
 8103b78:	08103c6d 	.word	0x08103c6d
 8103b7c:	08103bf9 	.word	0x08103bf9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103b80:	4b93      	ldr	r3, [pc, #588]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103b8c:	d108      	bne.n	8103ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103b92:	4618      	mov	r0, r3
 8103b94:	f001 f810 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103b9c:	f000 bd45 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103ba0:	2300      	movs	r3, #0
 8103ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ba4:	f000 bd41 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103ba8:	4b89      	ldr	r3, [pc, #548]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103bb4:	d108      	bne.n	8103bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103bb6:	f107 0318 	add.w	r3, r7, #24
 8103bba:	4618      	mov	r0, r3
 8103bbc:	f000 fd54 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103bc0:	69bb      	ldr	r3, [r7, #24]
 8103bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103bc4:	f000 bd31 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103bc8:	2300      	movs	r3, #0
 8103bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103bcc:	f000 bd2d 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bdc:	d108      	bne.n	8103bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103bde:	f107 030c 	add.w	r3, r7, #12
 8103be2:	4618      	mov	r0, r3
 8103be4:	f000 fe94 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103be8:	68fb      	ldr	r3, [r7, #12]
 8103bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103bec:	f000 bd1d 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103bf0:	2300      	movs	r3, #0
 8103bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103bf4:	f000 bd19 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103bf8:	4b75      	ldr	r3, [pc, #468]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103bfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103c00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103c02:	4b73      	ldr	r3, [pc, #460]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	f003 0304 	and.w	r3, r3, #4
 8103c0a:	2b04      	cmp	r3, #4
 8103c0c:	d10c      	bne.n	8103c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8103c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d109      	bne.n	8103c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103c14:	4b6e      	ldr	r3, [pc, #440]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	08db      	lsrs	r3, r3, #3
 8103c1a:	f003 0303 	and.w	r3, r3, #3
 8103c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8103dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8103c20:	fa22 f303 	lsr.w	r3, r2, r3
 8103c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103c26:	e01f      	b.n	8103c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103c28:	4b69      	ldr	r3, [pc, #420]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103c34:	d106      	bne.n	8103c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8103c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103c3c:	d102      	bne.n	8103c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103c3e:	4b66      	ldr	r3, [pc, #408]	@ (8103dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8103c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103c42:	e011      	b.n	8103c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8103c44:	4b62      	ldr	r3, [pc, #392]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103c46:	681b      	ldr	r3, [r3, #0]
 8103c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c50:	d106      	bne.n	8103c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8103c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103c58:	d102      	bne.n	8103c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103c5a:	4b60      	ldr	r3, [pc, #384]	@ (8103ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8103c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103c5e:	e003      	b.n	8103c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8103c60:	2300      	movs	r3, #0
 8103c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8103c64:	f000 bce1 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103c68:	f000 bcdf 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8103c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8103de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8103c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c70:	f000 bcdb 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103c74:	2300      	movs	r3, #0
 8103c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c78:	f000 bcd7 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8103c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103c80:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8103c84:	430b      	orrs	r3, r1
 8103c86:	f040 80ad 	bne.w	8103de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8103c8a:	4b51      	ldr	r3, [pc, #324]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103c8e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8103c92:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8103c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103c9a:	d056      	beq.n	8103d4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8103c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103ca2:	f200 8090 	bhi.w	8103dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8103ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103ca8:	2bc0      	cmp	r3, #192	@ 0xc0
 8103caa:	f000 8088 	beq.w	8103dbe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8103cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103cb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8103cb2:	f200 8088 	bhi.w	8103dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8103cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103cb8:	2b80      	cmp	r3, #128	@ 0x80
 8103cba:	d032      	beq.n	8103d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8103cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103cbe:	2b80      	cmp	r3, #128	@ 0x80
 8103cc0:	f200 8081 	bhi.w	8103dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8103cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	d003      	beq.n	8103cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8103cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103ccc:	2b40      	cmp	r3, #64	@ 0x40
 8103cce:	d014      	beq.n	8103cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8103cd0:	e079      	b.n	8103dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103cde:	d108      	bne.n	8103cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103ce4:	4618      	mov	r0, r3
 8103ce6:	f000 ff67 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103cee:	f000 bc9c 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103cf2:	2300      	movs	r3, #0
 8103cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103cf6:	f000 bc98 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103cfa:	4b35      	ldr	r3, [pc, #212]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103d06:	d108      	bne.n	8103d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103d08:	f107 0318 	add.w	r3, r7, #24
 8103d0c:	4618      	mov	r0, r3
 8103d0e:	f000 fcab 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103d12:	69bb      	ldr	r3, [r7, #24]
 8103d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103d16:	f000 bc88 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103d1a:	2300      	movs	r3, #0
 8103d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d1e:	f000 bc84 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103d22:	4b2b      	ldr	r3, [pc, #172]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103d2e:	d108      	bne.n	8103d42 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103d30:	f107 030c 	add.w	r3, r7, #12
 8103d34:	4618      	mov	r0, r3
 8103d36:	f000 fdeb 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103d3a:	68fb      	ldr	r3, [r7, #12]
 8103d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103d3e:	f000 bc74 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103d42:	2300      	movs	r3, #0
 8103d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d46:	f000 bc70 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103d4a:	4b21      	ldr	r3, [pc, #132]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103d52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103d54:	4b1e      	ldr	r3, [pc, #120]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103d56:	681b      	ldr	r3, [r3, #0]
 8103d58:	f003 0304 	and.w	r3, r3, #4
 8103d5c:	2b04      	cmp	r3, #4
 8103d5e:	d10c      	bne.n	8103d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8103d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d109      	bne.n	8103d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103d66:	4b1a      	ldr	r3, [pc, #104]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	08db      	lsrs	r3, r3, #3
 8103d6c:	f003 0303 	and.w	r3, r3, #3
 8103d70:	4a18      	ldr	r2, [pc, #96]	@ (8103dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8103d72:	fa22 f303 	lsr.w	r3, r2, r3
 8103d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d78:	e01f      	b.n	8103dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103d7a:	4b15      	ldr	r3, [pc, #84]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103d86:	d106      	bne.n	8103d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8103d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103d8e:	d102      	bne.n	8103d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103d90:	4b11      	ldr	r3, [pc, #68]	@ (8103dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8103d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d94:	e011      	b.n	8103dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8103d96:	4b0e      	ldr	r3, [pc, #56]	@ (8103dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103da2:	d106      	bne.n	8103db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8103da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103daa:	d102      	bne.n	8103db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103dac:	4b0b      	ldr	r3, [pc, #44]	@ (8103ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8103dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103db0:	e003      	b.n	8103dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8103db2:	2300      	movs	r3, #0
 8103db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8103db6:	f000 bc38 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103dba:	f000 bc36 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8103dbe:	4b08      	ldr	r3, [pc, #32]	@ (8103de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8103dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dc2:	f000 bc32 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103dc6:	2300      	movs	r3, #0
 8103dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dca:	f000 bc2e 	b.w	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103dce:	bf00      	nop
 8103dd0:	58024400 	.word	0x58024400
 8103dd4:	03d09000 	.word	0x03d09000
 8103dd8:	003d0900 	.word	0x003d0900
 8103ddc:	017d7840 	.word	0x017d7840
 8103de0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8103de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103de8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8103dec:	430b      	orrs	r3, r1
 8103dee:	f040 809c 	bne.w	8103f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8103df2:	4b9e      	ldr	r3, [pc, #632]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103df6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8103dfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8103dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103dfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103e02:	d054      	beq.n	8103eae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8103e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103e0a:	f200 808b 	bhi.w	8103f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8103e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103e14:	f000 8083 	beq.w	8103f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8103e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103e1e:	f200 8081 	bhi.w	8103f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8103e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103e28:	d02f      	beq.n	8103e8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8103e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103e30:	d878      	bhi.n	8103f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8103e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e34:	2b00      	cmp	r3, #0
 8103e36:	d004      	beq.n	8103e42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8103e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103e3e:	d012      	beq.n	8103e66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8103e40:	e070      	b.n	8103f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103e42:	4b8a      	ldr	r3, [pc, #552]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103e4e:	d107      	bne.n	8103e60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103e54:	4618      	mov	r0, r3
 8103e56:	f000 feaf 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103e5e:	e3e4      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103e60:	2300      	movs	r3, #0
 8103e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e64:	e3e1      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103e66:	4b81      	ldr	r3, [pc, #516]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103e72:	d107      	bne.n	8103e84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103e74:	f107 0318 	add.w	r3, r7, #24
 8103e78:	4618      	mov	r0, r3
 8103e7a:	f000 fbf5 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103e7e:	69bb      	ldr	r3, [r7, #24]
 8103e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103e82:	e3d2      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103e84:	2300      	movs	r3, #0
 8103e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e88:	e3cf      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103e8a:	4b78      	ldr	r3, [pc, #480]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e96:	d107      	bne.n	8103ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103e98:	f107 030c 	add.w	r3, r7, #12
 8103e9c:	4618      	mov	r0, r3
 8103e9e:	f000 fd37 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103ea2:	68fb      	ldr	r3, [r7, #12]
 8103ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103ea6:	e3c0      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103ea8:	2300      	movs	r3, #0
 8103eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103eac:	e3bd      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103eae:	4b6f      	ldr	r3, [pc, #444]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103eb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103eb8:	4b6c      	ldr	r3, [pc, #432]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	f003 0304 	and.w	r3, r3, #4
 8103ec0:	2b04      	cmp	r3, #4
 8103ec2:	d10c      	bne.n	8103ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8103ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103ec6:	2b00      	cmp	r3, #0
 8103ec8:	d109      	bne.n	8103ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103eca:	4b68      	ldr	r3, [pc, #416]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	08db      	lsrs	r3, r3, #3
 8103ed0:	f003 0303 	and.w	r3, r3, #3
 8103ed4:	4a66      	ldr	r2, [pc, #408]	@ (8104070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8103ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8103eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103edc:	e01e      	b.n	8103f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103ede:	4b63      	ldr	r3, [pc, #396]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103eea:	d106      	bne.n	8103efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8103eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103ef2:	d102      	bne.n	8103efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8104074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8103ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103ef8:	e010      	b.n	8103f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8103efa:	4b5c      	ldr	r3, [pc, #368]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103f06:	d106      	bne.n	8103f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8103f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103f0e:	d102      	bne.n	8103f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103f10:	4b59      	ldr	r3, [pc, #356]	@ (8104078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8103f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103f14:	e002      	b.n	8103f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8103f16:	2300      	movs	r3, #0
 8103f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8103f1a:	e386      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103f1c:	e385      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8103f1e:	4b57      	ldr	r3, [pc, #348]	@ (810407c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8103f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103f22:	e382      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8103f24:	2300      	movs	r3, #0
 8103f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103f28:	e37f      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8103f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103f2e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8103f32:	430b      	orrs	r3, r1
 8103f34:	f040 80a7 	bne.w	8104086 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8103f38:	4b4c      	ldr	r3, [pc, #304]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103f3c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8103f40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8103f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103f48:	d055      	beq.n	8103ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8103f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103f50:	f200 8096 	bhi.w	8104080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8103f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103f5a:	f000 8084 	beq.w	8104066 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8103f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103f64:	f200 808c 	bhi.w	8104080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8103f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103f6e:	d030      	beq.n	8103fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8103f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103f76:	f200 8083 	bhi.w	8104080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8103f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d004      	beq.n	8103f8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8103f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103f86:	d012      	beq.n	8103fae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8103f88:	e07a      	b.n	8104080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103f8a:	4b38      	ldr	r3, [pc, #224]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103f96:	d107      	bne.n	8103fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103f9c:	4618      	mov	r0, r3
 8103f9e:	f000 fe0b 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fa6:	e340      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103fa8:	2300      	movs	r3, #0
 8103faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103fac:	e33d      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103fae:	4b2f      	ldr	r3, [pc, #188]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103fba:	d107      	bne.n	8103fcc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103fbc:	f107 0318 	add.w	r3, r7, #24
 8103fc0:	4618      	mov	r0, r3
 8103fc2:	f000 fb51 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103fc6:	69bb      	ldr	r3, [r7, #24]
 8103fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fca:	e32e      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103fcc:	2300      	movs	r3, #0
 8103fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103fd0:	e32b      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103fd2:	4b26      	ldr	r3, [pc, #152]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103fde:	d107      	bne.n	8103ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103fe0:	f107 030c 	add.w	r3, r7, #12
 8103fe4:	4618      	mov	r0, r3
 8103fe6:	f000 fc93 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103fea:	68fb      	ldr	r3, [r7, #12]
 8103fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fee:	e31c      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103ff0:	2300      	movs	r3, #0
 8103ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ff4:	e319      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103ff6:	4b1d      	ldr	r3, [pc, #116]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103ffe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104000:	4b1a      	ldr	r3, [pc, #104]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	f003 0304 	and.w	r3, r3, #4
 8104008:	2b04      	cmp	r3, #4
 810400a:	d10c      	bne.n	8104026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810400e:	2b00      	cmp	r3, #0
 8104010:	d109      	bne.n	8104026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104012:	4b16      	ldr	r3, [pc, #88]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104014:	681b      	ldr	r3, [r3, #0]
 8104016:	08db      	lsrs	r3, r3, #3
 8104018:	f003 0303 	and.w	r3, r3, #3
 810401c:	4a14      	ldr	r2, [pc, #80]	@ (8104070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810401e:	fa22 f303 	lsr.w	r3, r2, r3
 8104022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104024:	e01e      	b.n	8104064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104026:	4b11      	ldr	r3, [pc, #68]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810402e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104032:	d106      	bne.n	8104042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810403a:	d102      	bne.n	8104042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810403c:	4b0d      	ldr	r3, [pc, #52]	@ (8104074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104040:	e010      	b.n	8104064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104042:	4b0a      	ldr	r3, [pc, #40]	@ (810406c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810404a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810404e:	d106      	bne.n	810405e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104056:	d102      	bne.n	810405e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104058:	4b07      	ldr	r3, [pc, #28]	@ (8104078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810405c:	e002      	b.n	8104064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810405e:	2300      	movs	r3, #0
 8104060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104062:	e2e2      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104064:	e2e1      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104066:	4b05      	ldr	r3, [pc, #20]	@ (810407c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810406a:	e2de      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810406c:	58024400 	.word	0x58024400
 8104070:	03d09000 	.word	0x03d09000
 8104074:	003d0900 	.word	0x003d0900
 8104078:	017d7840 	.word	0x017d7840
 810407c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104080:	2300      	movs	r3, #0
 8104082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104084:	e2d1      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104086:	e9d7 2300 	ldrd	r2, r3, [r7]
 810408a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810408e:	430b      	orrs	r3, r1
 8104090:	f040 809c 	bne.w	81041cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104094:	4b93      	ldr	r3, [pc, #588]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104098:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810409c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81040a4:	d054      	beq.n	8104150 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81040a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81040ac:	f200 808b 	bhi.w	81041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81040b6:	f000 8083 	beq.w	81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81040c0:	f200 8081 	bhi.w	81041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81040c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81040ca:	d02f      	beq.n	810412c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81040d2:	d878      	bhi.n	81041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040d6:	2b00      	cmp	r3, #0
 81040d8:	d004      	beq.n	81040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81040e0:	d012      	beq.n	8104108 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81040e2:	e070      	b.n	81041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81040e4:	4b7f      	ldr	r3, [pc, #508]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81040e6:	681b      	ldr	r3, [r3, #0]
 81040e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81040ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81040f0:	d107      	bne.n	8104102 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81040f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81040f6:	4618      	mov	r0, r3
 81040f8:	f000 fd5e 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104100:	e293      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104102:	2300      	movs	r3, #0
 8104104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104106:	e290      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104108:	4b76      	ldr	r3, [pc, #472]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810410a:	681b      	ldr	r3, [r3, #0]
 810410c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104114:	d107      	bne.n	8104126 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104116:	f107 0318 	add.w	r3, r7, #24
 810411a:	4618      	mov	r0, r3
 810411c:	f000 faa4 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104120:	69bb      	ldr	r3, [r7, #24]
 8104122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104124:	e281      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104126:	2300      	movs	r3, #0
 8104128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810412a:	e27e      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810412c:	4b6d      	ldr	r3, [pc, #436]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104138:	d107      	bne.n	810414a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810413a:	f107 030c 	add.w	r3, r7, #12
 810413e:	4618      	mov	r0, r3
 8104140:	f000 fbe6 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104144:	68fb      	ldr	r3, [r7, #12]
 8104146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104148:	e26f      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810414a:	2300      	movs	r3, #0
 810414c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810414e:	e26c      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104150:	4b64      	ldr	r3, [pc, #400]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104158:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810415a:	4b62      	ldr	r3, [pc, #392]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	f003 0304 	and.w	r3, r3, #4
 8104162:	2b04      	cmp	r3, #4
 8104164:	d10c      	bne.n	8104180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104168:	2b00      	cmp	r3, #0
 810416a:	d109      	bne.n	8104180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810416c:	4b5d      	ldr	r3, [pc, #372]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	08db      	lsrs	r3, r3, #3
 8104172:	f003 0303 	and.w	r3, r3, #3
 8104176:	4a5c      	ldr	r2, [pc, #368]	@ (81042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104178:	fa22 f303 	lsr.w	r3, r2, r3
 810417c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810417e:	e01e      	b.n	81041be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104180:	4b58      	ldr	r3, [pc, #352]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810418c:	d106      	bne.n	810419c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104194:	d102      	bne.n	810419c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104196:	4b55      	ldr	r3, [pc, #340]	@ (81042ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810419a:	e010      	b.n	81041be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810419c:	4b51      	ldr	r3, [pc, #324]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81041a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81041a8:	d106      	bne.n	81041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81041aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81041ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81041b0:	d102      	bne.n	81041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81041b2:	4b4f      	ldr	r3, [pc, #316]	@ (81042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81041b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81041b6:	e002      	b.n	81041be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81041b8:	2300      	movs	r3, #0
 81041ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81041bc:	e235      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81041be:	e234      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81041c0:	4b4c      	ldr	r3, [pc, #304]	@ (81042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041c4:	e231      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81041c6:	2300      	movs	r3, #0
 81041c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041ca:	e22e      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81041cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81041d0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81041d4:	430b      	orrs	r3, r1
 81041d6:	f040 808f 	bne.w	81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81041da:	4b42      	ldr	r3, [pc, #264]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81041dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81041de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81041e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81041e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81041e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81041ea:	d06b      	beq.n	81042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81041ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81041f2:	d874      	bhi.n	81042de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81041f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81041f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81041fa:	d056      	beq.n	81042aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81041fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104202:	d86c      	bhi.n	81042de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810420a:	d03b      	beq.n	8104284 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810420e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104212:	d864      	bhi.n	81042de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810421a:	d021      	beq.n	8104260 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810421e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104222:	d85c      	bhi.n	81042de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104226:	2b00      	cmp	r3, #0
 8104228:	d004      	beq.n	8104234 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104230:	d004      	beq.n	810423c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104232:	e054      	b.n	81042de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104234:	f7fe fa22 	bl	810267c <HAL_RCC_GetPCLK1Freq>
 8104238:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810423a:	e1f6      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810423c:	4b29      	ldr	r3, [pc, #164]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104248:	d107      	bne.n	810425a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810424a:	f107 0318 	add.w	r3, r7, #24
 810424e:	4618      	mov	r0, r3
 8104250:	f000 fa0a 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104254:	69fb      	ldr	r3, [r7, #28]
 8104256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104258:	e1e7      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810425a:	2300      	movs	r3, #0
 810425c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810425e:	e1e4      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104260:	4b20      	ldr	r3, [pc, #128]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810426c:	d107      	bne.n	810427e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810426e:	f107 030c 	add.w	r3, r7, #12
 8104272:	4618      	mov	r0, r3
 8104274:	f000 fb4c 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104278:	693b      	ldr	r3, [r7, #16]
 810427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810427c:	e1d5      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810427e:	2300      	movs	r3, #0
 8104280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104282:	e1d2      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104284:	4b17      	ldr	r3, [pc, #92]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	f003 0304 	and.w	r3, r3, #4
 810428c:	2b04      	cmp	r3, #4
 810428e:	d109      	bne.n	81042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104290:	4b14      	ldr	r3, [pc, #80]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	08db      	lsrs	r3, r3, #3
 8104296:	f003 0303 	and.w	r3, r3, #3
 810429a:	4a13      	ldr	r2, [pc, #76]	@ (81042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810429c:	fa22 f303 	lsr.w	r3, r2, r3
 81042a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042a2:	e1c2      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042a4:	2300      	movs	r3, #0
 81042a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042a8:	e1bf      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81042aa:	4b0e      	ldr	r3, [pc, #56]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81042b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81042b6:	d102      	bne.n	81042be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81042b8:	4b0c      	ldr	r3, [pc, #48]	@ (81042ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81042ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042bc:	e1b5      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042be:	2300      	movs	r3, #0
 81042c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042c2:	e1b2      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81042c4:	4b07      	ldr	r3, [pc, #28]	@ (81042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81042cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81042d0:	d102      	bne.n	81042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81042d2:	4b07      	ldr	r3, [pc, #28]	@ (81042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81042d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042d6:	e1a8      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042d8:	2300      	movs	r3, #0
 81042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042dc:	e1a5      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81042de:	2300      	movs	r3, #0
 81042e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042e2:	e1a2      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81042e4:	58024400 	.word	0x58024400
 81042e8:	03d09000 	.word	0x03d09000
 81042ec:	003d0900 	.word	0x003d0900
 81042f0:	017d7840 	.word	0x017d7840
 81042f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81042f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81042fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8104300:	430b      	orrs	r3, r1
 8104302:	d173      	bne.n	81043ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104304:	4b9c      	ldr	r3, [pc, #624]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810430c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104314:	d02f      	beq.n	8104376 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810431c:	d863      	bhi.n	81043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104320:	2b00      	cmp	r3, #0
 8104322:	d004      	beq.n	810432e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810432a:	d012      	beq.n	8104352 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810432c:	e05b      	b.n	81043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810432e:	4b92      	ldr	r3, [pc, #584]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810433a:	d107      	bne.n	810434c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810433c:	f107 0318 	add.w	r3, r7, #24
 8104340:	4618      	mov	r0, r3
 8104342:	f000 f991 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104346:	69bb      	ldr	r3, [r7, #24]
 8104348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810434a:	e16e      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810434c:	2300      	movs	r3, #0
 810434e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104350:	e16b      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104352:	4b89      	ldr	r3, [pc, #548]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810435a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810435e:	d107      	bne.n	8104370 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104360:	f107 030c 	add.w	r3, r7, #12
 8104364:	4618      	mov	r0, r3
 8104366:	f000 fad3 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810436a:	697b      	ldr	r3, [r7, #20]
 810436c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810436e:	e15c      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104370:	2300      	movs	r3, #0
 8104372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104374:	e159      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104376:	4b80      	ldr	r3, [pc, #512]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810437a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810437e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104380:	4b7d      	ldr	r3, [pc, #500]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	f003 0304 	and.w	r3, r3, #4
 8104388:	2b04      	cmp	r3, #4
 810438a:	d10c      	bne.n	81043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810438c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810438e:	2b00      	cmp	r3, #0
 8104390:	d109      	bne.n	81043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104392:	4b79      	ldr	r3, [pc, #484]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	08db      	lsrs	r3, r3, #3
 8104398:	f003 0303 	and.w	r3, r3, #3
 810439c:	4a77      	ldr	r2, [pc, #476]	@ (810457c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810439e:	fa22 f303 	lsr.w	r3, r2, r3
 81043a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81043a4:	e01e      	b.n	81043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81043a6:	4b74      	ldr	r3, [pc, #464]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81043ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81043b2:	d106      	bne.n	81043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81043ba:	d102      	bne.n	81043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81043bc:	4b70      	ldr	r3, [pc, #448]	@ (8104580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81043be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81043c0:	e010      	b.n	81043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81043c2:	4b6d      	ldr	r3, [pc, #436]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81043ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81043ce:	d106      	bne.n	81043de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81043d6:	d102      	bne.n	81043de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81043d8:	4b6a      	ldr	r3, [pc, #424]	@ (8104584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81043da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81043dc:	e002      	b.n	81043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81043de:	2300      	movs	r3, #0
 81043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81043e2:	e122      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81043e4:	e121      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81043e6:	2300      	movs	r3, #0
 81043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81043ea:	e11e      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81043ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 81043f0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 81043f4:	430b      	orrs	r3, r1
 81043f6:	d133      	bne.n	8104460 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81043f8:	4b5f      	ldr	r3, [pc, #380]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81043fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81043fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104400:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104404:	2b00      	cmp	r3, #0
 8104406:	d004      	beq.n	8104412 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810440a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810440e:	d012      	beq.n	8104436 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104410:	e023      	b.n	810445a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104412:	4b59      	ldr	r3, [pc, #356]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810441a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810441e:	d107      	bne.n	8104430 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104424:	4618      	mov	r0, r3
 8104426:	f000 fbc7 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810442c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810442e:	e0fc      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104430:	2300      	movs	r3, #0
 8104432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104434:	e0f9      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104436:	4b50      	ldr	r3, [pc, #320]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810443e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104442:	d107      	bne.n	8104454 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104444:	f107 0318 	add.w	r3, r7, #24
 8104448:	4618      	mov	r0, r3
 810444a:	f000 f90d 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810444e:	6a3b      	ldr	r3, [r7, #32]
 8104450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104452:	e0ea      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104454:	2300      	movs	r3, #0
 8104456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104458:	e0e7      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810445a:	2300      	movs	r3, #0
 810445c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810445e:	e0e4      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104464:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8104468:	430b      	orrs	r3, r1
 810446a:	f040 808d 	bne.w	8104588 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810446e:	4b42      	ldr	r3, [pc, #264]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104472:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8104476:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810447a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810447e:	d06b      	beq.n	8104558 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104486:	d874      	bhi.n	8104572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810448a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810448e:	d056      	beq.n	810453e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104496:	d86c      	bhi.n	8104572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810449a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810449e:	d03b      	beq.n	8104518 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81044a6:	d864      	bhi.n	8104572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81044ae:	d021      	beq.n	81044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81044b6:	d85c      	bhi.n	8104572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044ba:	2b00      	cmp	r3, #0
 81044bc:	d004      	beq.n	81044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81044c4:	d004      	beq.n	81044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81044c6:	e054      	b.n	8104572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81044c8:	f000 f8b8 	bl	810463c <HAL_RCCEx_GetD3PCLK1Freq>
 81044cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81044ce:	e0ac      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81044d0:	4b29      	ldr	r3, [pc, #164]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81044d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81044dc:	d107      	bne.n	81044ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81044de:	f107 0318 	add.w	r3, r7, #24
 81044e2:	4618      	mov	r0, r3
 81044e4:	f000 f8c0 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81044e8:	69fb      	ldr	r3, [r7, #28]
 81044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81044ec:	e09d      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81044ee:	2300      	movs	r3, #0
 81044f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044f2:	e09a      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81044f4:	4b20      	ldr	r3, [pc, #128]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81044fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104500:	d107      	bne.n	8104512 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104502:	f107 030c 	add.w	r3, r7, #12
 8104506:	4618      	mov	r0, r3
 8104508:	f000 fa02 	bl	8104910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810450c:	693b      	ldr	r3, [r7, #16]
 810450e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104510:	e08b      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104512:	2300      	movs	r3, #0
 8104514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104516:	e088      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104518:	4b17      	ldr	r3, [pc, #92]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	f003 0304 	and.w	r3, r3, #4
 8104520:	2b04      	cmp	r3, #4
 8104522:	d109      	bne.n	8104538 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104524:	4b14      	ldr	r3, [pc, #80]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	08db      	lsrs	r3, r3, #3
 810452a:	f003 0303 	and.w	r3, r3, #3
 810452e:	4a13      	ldr	r2, [pc, #76]	@ (810457c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104530:	fa22 f303 	lsr.w	r3, r2, r3
 8104534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104536:	e078      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104538:	2300      	movs	r3, #0
 810453a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810453c:	e075      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810453e:	4b0e      	ldr	r3, [pc, #56]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810454a:	d102      	bne.n	8104552 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810454c:	4b0c      	ldr	r3, [pc, #48]	@ (8104580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104550:	e06b      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104552:	2300      	movs	r3, #0
 8104554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104556:	e068      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104558:	4b07      	ldr	r3, [pc, #28]	@ (8104578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104564:	d102      	bne.n	810456c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104566:	4b07      	ldr	r3, [pc, #28]	@ (8104584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810456a:	e05e      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810456c:	2300      	movs	r3, #0
 810456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104570:	e05b      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104572:	2300      	movs	r3, #0
 8104574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104576:	e058      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104578:	58024400 	.word	0x58024400
 810457c:	03d09000 	.word	0x03d09000
 8104580:	003d0900 	.word	0x003d0900
 8104584:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104588:	e9d7 2300 	ldrd	r2, r3, [r7]
 810458c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8104590:	430b      	orrs	r3, r1
 8104592:	d148      	bne.n	8104626 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104594:	4b27      	ldr	r3, [pc, #156]	@ (8104634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810459c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81045a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81045a4:	d02a      	beq.n	81045fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81045a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81045ac:	d838      	bhi.n	8104620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d004      	beq.n	81045be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81045b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81045ba:	d00d      	beq.n	81045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81045bc:	e030      	b.n	8104620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81045be:	4b1d      	ldr	r3, [pc, #116]	@ (8104634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81045c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81045ca:	d102      	bne.n	81045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81045cc:	4b1a      	ldr	r3, [pc, #104]	@ (8104638 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045d0:	e02b      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045d2:	2300      	movs	r3, #0
 81045d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045d6:	e028      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81045d8:	4b16      	ldr	r3, [pc, #88]	@ (8104634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81045e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81045e4:	d107      	bne.n	81045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81045e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81045ea:	4618      	mov	r0, r3
 81045ec:	f000 fae4 	bl	8104bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81045f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045f4:	e019      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045f6:	2300      	movs	r3, #0
 81045f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045fa:	e016      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81045fc:	4b0d      	ldr	r3, [pc, #52]	@ (8104634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104608:	d107      	bne.n	810461a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810460a:	f107 0318 	add.w	r3, r7, #24
 810460e:	4618      	mov	r0, r3
 8104610:	f000 f82a 	bl	8104668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104614:	69fb      	ldr	r3, [r7, #28]
 8104616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104618:	e007      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810461a:	2300      	movs	r3, #0
 810461c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810461e:	e004      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104620:	2300      	movs	r3, #0
 8104622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104624:	e001      	b.n	810462a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104626:	2300      	movs	r3, #0
 8104628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810462c:	4618      	mov	r0, r3
 810462e:	3740      	adds	r7, #64	@ 0x40
 8104630:	46bd      	mov	sp, r7
 8104632:	bd80      	pop	{r7, pc}
 8104634:	58024400 	.word	0x58024400
 8104638:	017d7840 	.word	0x017d7840

0810463c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810463c:	b580      	push	{r7, lr}
 810463e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104640:	f7fd ffea 	bl	8102618 <HAL_RCC_GetHCLKFreq>
 8104644:	4602      	mov	r2, r0
 8104646:	4b06      	ldr	r3, [pc, #24]	@ (8104660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104648:	6a1b      	ldr	r3, [r3, #32]
 810464a:	091b      	lsrs	r3, r3, #4
 810464c:	f003 0307 	and.w	r3, r3, #7
 8104650:	4904      	ldr	r1, [pc, #16]	@ (8104664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104652:	5ccb      	ldrb	r3, [r1, r3]
 8104654:	f003 031f 	and.w	r3, r3, #31
 8104658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810465c:	4618      	mov	r0, r3
 810465e:	bd80      	pop	{r7, pc}
 8104660:	58024400 	.word	0x58024400
 8104664:	08105bcc 	.word	0x08105bcc

08104668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104668:	b480      	push	{r7}
 810466a:	b089      	sub	sp, #36	@ 0x24
 810466c:	af00      	add	r7, sp, #0
 810466e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104670:	4ba1      	ldr	r3, [pc, #644]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104674:	f003 0303 	and.w	r3, r3, #3
 8104678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810467a:	4b9f      	ldr	r3, [pc, #636]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810467e:	0b1b      	lsrs	r3, r3, #12
 8104680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104686:	4b9c      	ldr	r3, [pc, #624]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810468a:	091b      	lsrs	r3, r3, #4
 810468c:	f003 0301 	and.w	r3, r3, #1
 8104690:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104692:	4b99      	ldr	r3, [pc, #612]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104696:	08db      	lsrs	r3, r3, #3
 8104698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810469c:	693a      	ldr	r2, [r7, #16]
 810469e:	fb02 f303 	mul.w	r3, r2, r3
 81046a2:	ee07 3a90 	vmov	s15, r3
 81046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81046ae:	697b      	ldr	r3, [r7, #20]
 81046b0:	2b00      	cmp	r3, #0
 81046b2:	f000 8111 	beq.w	81048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81046b6:	69bb      	ldr	r3, [r7, #24]
 81046b8:	2b02      	cmp	r3, #2
 81046ba:	f000 8083 	beq.w	81047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81046be:	69bb      	ldr	r3, [r7, #24]
 81046c0:	2b02      	cmp	r3, #2
 81046c2:	f200 80a1 	bhi.w	8104808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81046c6:	69bb      	ldr	r3, [r7, #24]
 81046c8:	2b00      	cmp	r3, #0
 81046ca:	d003      	beq.n	81046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81046cc:	69bb      	ldr	r3, [r7, #24]
 81046ce:	2b01      	cmp	r3, #1
 81046d0:	d056      	beq.n	8104780 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81046d2:	e099      	b.n	8104808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81046d4:	4b88      	ldr	r3, [pc, #544]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	f003 0320 	and.w	r3, r3, #32
 81046dc:	2b00      	cmp	r3, #0
 81046de:	d02d      	beq.n	810473c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81046e0:	4b85      	ldr	r3, [pc, #532]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	08db      	lsrs	r3, r3, #3
 81046e6:	f003 0303 	and.w	r3, r3, #3
 81046ea:	4a84      	ldr	r2, [pc, #528]	@ (81048fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81046ec:	fa22 f303 	lsr.w	r3, r2, r3
 81046f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81046f2:	68bb      	ldr	r3, [r7, #8]
 81046f4:	ee07 3a90 	vmov	s15, r3
 81046f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046fc:	697b      	ldr	r3, [r7, #20]
 81046fe:	ee07 3a90 	vmov	s15, r3
 8104702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810470a:	4b7b      	ldr	r3, [pc, #492]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810470c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104712:	ee07 3a90 	vmov	s15, r3
 8104716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810471a:	ed97 6a03 	vldr	s12, [r7, #12]
 810471e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810472a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810473a:	e087      	b.n	810484c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810473c:	697b      	ldr	r3, [r7, #20]
 810473e:	ee07 3a90 	vmov	s15, r3
 8104742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104746:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104904 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810474e:	4b6a      	ldr	r3, [pc, #424]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104756:	ee07 3a90 	vmov	s15, r3
 810475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104762:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810476e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104776:	ee67 7a27 	vmul.f32	s15, s14, s15
 810477a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810477e:	e065      	b.n	810484c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104780:	697b      	ldr	r3, [r7, #20]
 8104782:	ee07 3a90 	vmov	s15, r3
 8104786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810478a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104792:	4b59      	ldr	r3, [pc, #356]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810479a:	ee07 3a90 	vmov	s15, r3
 810479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81047a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81047b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81047be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81047c2:	e043      	b.n	810484c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81047c4:	697b      	ldr	r3, [r7, #20]
 81047c6:	ee07 3a90 	vmov	s15, r3
 81047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810490c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81047d6:	4b48      	ldr	r3, [pc, #288]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81047de:	ee07 3a90 	vmov	s15, r3
 81047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81047ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81047f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104806:	e021      	b.n	810484c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104808:	697b      	ldr	r3, [r7, #20]
 810480a:	ee07 3a90 	vmov	s15, r3
 810480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104812:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810481a:	4b37      	ldr	r3, [pc, #220]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104822:	ee07 3a90 	vmov	s15, r3
 8104826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810482a:	ed97 6a03 	vldr	s12, [r7, #12]
 810482e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810483a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810484a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810484c:	4b2a      	ldr	r3, [pc, #168]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104850:	0a5b      	lsrs	r3, r3, #9
 8104852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104856:	ee07 3a90 	vmov	s15, r3
 810485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810485e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104866:	edd7 6a07 	vldr	s13, [r7, #28]
 810486a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810486e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104872:	ee17 2a90 	vmov	r2, s15
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810487a:	4b1f      	ldr	r3, [pc, #124]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810487e:	0c1b      	lsrs	r3, r3, #16
 8104880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104884:	ee07 3a90 	vmov	s15, r3
 8104888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810488c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104894:	edd7 6a07 	vldr	s13, [r7, #28]
 8104898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81048a0:	ee17 2a90 	vmov	r2, s15
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81048a8:	4b13      	ldr	r3, [pc, #76]	@ (81048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81048ac:	0e1b      	lsrs	r3, r3, #24
 81048ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81048b2:	ee07 3a90 	vmov	s15, r3
 81048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81048be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81048c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81048c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81048ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81048ce:	ee17 2a90 	vmov	r2, s15
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81048d6:	e008      	b.n	81048ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	2200      	movs	r2, #0
 81048dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	2200      	movs	r2, #0
 81048e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	2200      	movs	r2, #0
 81048e8:	609a      	str	r2, [r3, #8]
}
 81048ea:	bf00      	nop
 81048ec:	3724      	adds	r7, #36	@ 0x24
 81048ee:	46bd      	mov	sp, r7
 81048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048f4:	4770      	bx	lr
 81048f6:	bf00      	nop
 81048f8:	58024400 	.word	0x58024400
 81048fc:	03d09000 	.word	0x03d09000
 8104900:	46000000 	.word	0x46000000
 8104904:	4c742400 	.word	0x4c742400
 8104908:	4a742400 	.word	0x4a742400
 810490c:	4bbebc20 	.word	0x4bbebc20

08104910 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104910:	b480      	push	{r7}
 8104912:	b089      	sub	sp, #36	@ 0x24
 8104914:	af00      	add	r7, sp, #0
 8104916:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104918:	4ba1      	ldr	r3, [pc, #644]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810491c:	f003 0303 	and.w	r3, r3, #3
 8104920:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8104922:	4b9f      	ldr	r3, [pc, #636]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104926:	0d1b      	lsrs	r3, r3, #20
 8104928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810492c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810492e:	4b9c      	ldr	r3, [pc, #624]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104932:	0a1b      	lsrs	r3, r3, #8
 8104934:	f003 0301 	and.w	r3, r3, #1
 8104938:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810493a:	4b99      	ldr	r3, [pc, #612]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810493e:	08db      	lsrs	r3, r3, #3
 8104940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104944:	693a      	ldr	r2, [r7, #16]
 8104946:	fb02 f303 	mul.w	r3, r2, r3
 810494a:	ee07 3a90 	vmov	s15, r3
 810494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104956:	697b      	ldr	r3, [r7, #20]
 8104958:	2b00      	cmp	r3, #0
 810495a:	f000 8111 	beq.w	8104b80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810495e:	69bb      	ldr	r3, [r7, #24]
 8104960:	2b02      	cmp	r3, #2
 8104962:	f000 8083 	beq.w	8104a6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104966:	69bb      	ldr	r3, [r7, #24]
 8104968:	2b02      	cmp	r3, #2
 810496a:	f200 80a1 	bhi.w	8104ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810496e:	69bb      	ldr	r3, [r7, #24]
 8104970:	2b00      	cmp	r3, #0
 8104972:	d003      	beq.n	810497c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104974:	69bb      	ldr	r3, [r7, #24]
 8104976:	2b01      	cmp	r3, #1
 8104978:	d056      	beq.n	8104a28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810497a:	e099      	b.n	8104ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810497c:	4b88      	ldr	r3, [pc, #544]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	f003 0320 	and.w	r3, r3, #32
 8104984:	2b00      	cmp	r3, #0
 8104986:	d02d      	beq.n	81049e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104988:	4b85      	ldr	r3, [pc, #532]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	08db      	lsrs	r3, r3, #3
 810498e:	f003 0303 	and.w	r3, r3, #3
 8104992:	4a84      	ldr	r2, [pc, #528]	@ (8104ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104994:	fa22 f303 	lsr.w	r3, r2, r3
 8104998:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810499a:	68bb      	ldr	r3, [r7, #8]
 810499c:	ee07 3a90 	vmov	s15, r3
 81049a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049a4:	697b      	ldr	r3, [r7, #20]
 81049a6:	ee07 3a90 	vmov	s15, r3
 81049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049b2:	4b7b      	ldr	r3, [pc, #492]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049ba:	ee07 3a90 	vmov	s15, r3
 81049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81049c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81049e2:	e087      	b.n	8104af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81049e4:	697b      	ldr	r3, [r7, #20]
 81049e6:	ee07 3a90 	vmov	s15, r3
 81049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104bac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049f6:	4b6a      	ldr	r3, [pc, #424]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049fe:	ee07 3a90 	vmov	s15, r3
 8104a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a26:	e065      	b.n	8104af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104a28:	697b      	ldr	r3, [r7, #20]
 8104a2a:	ee07 3a90 	vmov	s15, r3
 8104a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a3a:	4b59      	ldr	r3, [pc, #356]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a42:	ee07 3a90 	vmov	s15, r3
 8104a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a6a:	e043      	b.n	8104af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104a6c:	697b      	ldr	r3, [r7, #20]
 8104a6e:	ee07 3a90 	vmov	s15, r3
 8104a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8104bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a7e:	4b48      	ldr	r3, [pc, #288]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a86:	ee07 3a90 	vmov	s15, r3
 8104a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104aae:	e021      	b.n	8104af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104ab0:	697b      	ldr	r3, [r7, #20]
 8104ab2:	ee07 3a90 	vmov	s15, r3
 8104ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ac2:	4b37      	ldr	r3, [pc, #220]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104aca:	ee07 3a90 	vmov	s15, r3
 8104ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ad6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104af2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8104af4:	4b2a      	ldr	r3, [pc, #168]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104af8:	0a5b      	lsrs	r3, r3, #9
 8104afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104afe:	ee07 3a90 	vmov	s15, r3
 8104b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b1a:	ee17 2a90 	vmov	r2, s15
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8104b22:	4b1f      	ldr	r3, [pc, #124]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104b26:	0c1b      	lsrs	r3, r3, #16
 8104b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104b2c:	ee07 3a90 	vmov	s15, r3
 8104b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b48:	ee17 2a90 	vmov	r2, s15
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8104b50:	4b13      	ldr	r3, [pc, #76]	@ (8104ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104b54:	0e1b      	lsrs	r3, r3, #24
 8104b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104b5a:	ee07 3a90 	vmov	s15, r3
 8104b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b76:	ee17 2a90 	vmov	r2, s15
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104b7e:	e008      	b.n	8104b92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	2200      	movs	r2, #0
 8104b84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	2200      	movs	r2, #0
 8104b8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	2200      	movs	r2, #0
 8104b90:	609a      	str	r2, [r3, #8]
}
 8104b92:	bf00      	nop
 8104b94:	3724      	adds	r7, #36	@ 0x24
 8104b96:	46bd      	mov	sp, r7
 8104b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b9c:	4770      	bx	lr
 8104b9e:	bf00      	nop
 8104ba0:	58024400 	.word	0x58024400
 8104ba4:	03d09000 	.word	0x03d09000
 8104ba8:	46000000 	.word	0x46000000
 8104bac:	4c742400 	.word	0x4c742400
 8104bb0:	4a742400 	.word	0x4a742400
 8104bb4:	4bbebc20 	.word	0x4bbebc20

08104bb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8104bb8:	b480      	push	{r7}
 8104bba:	b089      	sub	sp, #36	@ 0x24
 8104bbc:	af00      	add	r7, sp, #0
 8104bbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104bc4:	f003 0303 	and.w	r3, r3, #3
 8104bc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8104bca:	4b9e      	ldr	r3, [pc, #632]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104bce:	091b      	lsrs	r3, r3, #4
 8104bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104bd4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8104bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bda:	f003 0301 	and.w	r3, r3, #1
 8104bde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104be0:	4b98      	ldr	r3, [pc, #608]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104be4:	08db      	lsrs	r3, r3, #3
 8104be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104bea:	693a      	ldr	r2, [r7, #16]
 8104bec:	fb02 f303 	mul.w	r3, r2, r3
 8104bf0:	ee07 3a90 	vmov	s15, r3
 8104bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8104bfc:	697b      	ldr	r3, [r7, #20]
 8104bfe:	2b00      	cmp	r3, #0
 8104c00:	f000 8111 	beq.w	8104e26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8104c04:	69bb      	ldr	r3, [r7, #24]
 8104c06:	2b02      	cmp	r3, #2
 8104c08:	f000 8083 	beq.w	8104d12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8104c0c:	69bb      	ldr	r3, [r7, #24]
 8104c0e:	2b02      	cmp	r3, #2
 8104c10:	f200 80a1 	bhi.w	8104d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8104c14:	69bb      	ldr	r3, [r7, #24]
 8104c16:	2b00      	cmp	r3, #0
 8104c18:	d003      	beq.n	8104c22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8104c1a:	69bb      	ldr	r3, [r7, #24]
 8104c1c:	2b01      	cmp	r3, #1
 8104c1e:	d056      	beq.n	8104cce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8104c20:	e099      	b.n	8104d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104c22:	4b88      	ldr	r3, [pc, #544]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	f003 0320 	and.w	r3, r3, #32
 8104c2a:	2b00      	cmp	r3, #0
 8104c2c:	d02d      	beq.n	8104c8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c2e:	4b85      	ldr	r3, [pc, #532]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	08db      	lsrs	r3, r3, #3
 8104c34:	f003 0303 	and.w	r3, r3, #3
 8104c38:	4a83      	ldr	r2, [pc, #524]	@ (8104e48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8104c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8104c3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104c40:	68bb      	ldr	r3, [r7, #8]
 8104c42:	ee07 3a90 	vmov	s15, r3
 8104c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c4a:	697b      	ldr	r3, [r7, #20]
 8104c4c:	ee07 3a90 	vmov	s15, r3
 8104c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c58:	4b7a      	ldr	r3, [pc, #488]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c60:	ee07 3a90 	vmov	s15, r3
 8104c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c6c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8104e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104c88:	e087      	b.n	8104d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104c8a:	697b      	ldr	r3, [r7, #20]
 8104c8c:	ee07 3a90 	vmov	s15, r3
 8104c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c94:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8104e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8104c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c9c:	4b69      	ldr	r3, [pc, #420]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ca4:	ee07 3a90 	vmov	s15, r3
 8104ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cb0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8104e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ccc:	e065      	b.n	8104d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104cce:	697b      	ldr	r3, [r7, #20]
 8104cd0:	ee07 3a90 	vmov	s15, r3
 8104cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cd8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8104e54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8104cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ce0:	4b58      	ldr	r3, [pc, #352]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ce8:	ee07 3a90 	vmov	s15, r3
 8104cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cf4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8104e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104d10:	e043      	b.n	8104d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104d12:	697b      	ldr	r3, [r7, #20]
 8104d14:	ee07 3a90 	vmov	s15, r3
 8104d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d1c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8104e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8104d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d24:	4b47      	ldr	r3, [pc, #284]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d2c:	ee07 3a90 	vmov	s15, r3
 8104d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d38:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8104e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104d54:	e021      	b.n	8104d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104d56:	697b      	ldr	r3, [r7, #20]
 8104d58:	ee07 3a90 	vmov	s15, r3
 8104d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d60:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8104e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8104d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d68:	4b36      	ldr	r3, [pc, #216]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d70:	ee07 3a90 	vmov	s15, r3
 8104d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d7c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8104e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104d98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8104d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104d9e:	0a5b      	lsrs	r3, r3, #9
 8104da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104da4:	ee07 3a90 	vmov	s15, r3
 8104da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8104db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104dc0:	ee17 2a90 	vmov	r2, s15
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8104dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104dcc:	0c1b      	lsrs	r3, r3, #16
 8104dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104dd2:	ee07 3a90 	vmov	s15, r3
 8104dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8104de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104dee:	ee17 2a90 	vmov	r2, s15
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8104df6:	4b13      	ldr	r3, [pc, #76]	@ (8104e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104dfa:	0e1b      	lsrs	r3, r3, #24
 8104dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104e00:	ee07 3a90 	vmov	s15, r3
 8104e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8104e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104e1c:	ee17 2a90 	vmov	r2, s15
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8104e24:	e008      	b.n	8104e38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	2200      	movs	r2, #0
 8104e2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	2200      	movs	r2, #0
 8104e30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	2200      	movs	r2, #0
 8104e36:	609a      	str	r2, [r3, #8]
}
 8104e38:	bf00      	nop
 8104e3a:	3724      	adds	r7, #36	@ 0x24
 8104e3c:	46bd      	mov	sp, r7
 8104e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e42:	4770      	bx	lr
 8104e44:	58024400 	.word	0x58024400
 8104e48:	03d09000 	.word	0x03d09000
 8104e4c:	46000000 	.word	0x46000000
 8104e50:	4c742400 	.word	0x4c742400
 8104e54:	4a742400 	.word	0x4a742400
 8104e58:	4bbebc20 	.word	0x4bbebc20

08104e5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104e5c:	b580      	push	{r7, lr}
 8104e5e:	b084      	sub	sp, #16
 8104e60:	af00      	add	r7, sp, #0
 8104e62:	6078      	str	r0, [r7, #4]
 8104e64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104e66:	2300      	movs	r3, #0
 8104e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104e6a:	4b54      	ldr	r3, [pc, #336]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104e6e:	f003 0303 	and.w	r3, r3, #3
 8104e72:	2b03      	cmp	r3, #3
 8104e74:	d101      	bne.n	8104e7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104e76:	2301      	movs	r3, #1
 8104e78:	e09b      	b.n	8104fb2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104e7a:	4b50      	ldr	r3, [pc, #320]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	4a4f      	ldr	r2, [pc, #316]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104e80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8104e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e86:	f7fb fe3f 	bl	8100b08 <HAL_GetTick>
 8104e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e8c:	e008      	b.n	8104ea0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104e8e:	f7fb fe3b 	bl	8100b08 <HAL_GetTick>
 8104e92:	4602      	mov	r2, r0
 8104e94:	68bb      	ldr	r3, [r7, #8]
 8104e96:	1ad3      	subs	r3, r2, r3
 8104e98:	2b02      	cmp	r3, #2
 8104e9a:	d901      	bls.n	8104ea0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104e9c:	2303      	movs	r3, #3
 8104e9e:	e088      	b.n	8104fb2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104ea0:	4b46      	ldr	r3, [pc, #280]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d1f0      	bne.n	8104e8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104eac:	4b43      	ldr	r3, [pc, #268]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104eb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	031b      	lsls	r3, r3, #12
 8104eba:	4940      	ldr	r1, [pc, #256]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104ebc:	4313      	orrs	r3, r2
 8104ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	685b      	ldr	r3, [r3, #4]
 8104ec4:	3b01      	subs	r3, #1
 8104ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	689b      	ldr	r3, [r3, #8]
 8104ece:	3b01      	subs	r3, #1
 8104ed0:	025b      	lsls	r3, r3, #9
 8104ed2:	b29b      	uxth	r3, r3
 8104ed4:	431a      	orrs	r2, r3
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	68db      	ldr	r3, [r3, #12]
 8104eda:	3b01      	subs	r3, #1
 8104edc:	041b      	lsls	r3, r3, #16
 8104ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104ee2:	431a      	orrs	r2, r3
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	691b      	ldr	r3, [r3, #16]
 8104ee8:	3b01      	subs	r3, #1
 8104eea:	061b      	lsls	r3, r3, #24
 8104eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104ef0:	4932      	ldr	r1, [pc, #200]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104ef2:	4313      	orrs	r3, r2
 8104ef4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104ef6:	4b31      	ldr	r3, [pc, #196]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104efa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	695b      	ldr	r3, [r3, #20]
 8104f02:	492e      	ldr	r1, [pc, #184]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f04:	4313      	orrs	r3, r2
 8104f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104f08:	4b2c      	ldr	r3, [pc, #176]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f0c:	f023 0220 	bic.w	r2, r3, #32
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	699b      	ldr	r3, [r3, #24]
 8104f14:	4929      	ldr	r1, [pc, #164]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f16:	4313      	orrs	r3, r2
 8104f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104f1a:	4b28      	ldr	r3, [pc, #160]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f1e:	4a27      	ldr	r2, [pc, #156]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f20:	f023 0310 	bic.w	r3, r3, #16
 8104f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104f26:	4b25      	ldr	r3, [pc, #148]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104f2e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104f32:	687a      	ldr	r2, [r7, #4]
 8104f34:	69d2      	ldr	r2, [r2, #28]
 8104f36:	00d2      	lsls	r2, r2, #3
 8104f38:	4920      	ldr	r1, [pc, #128]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f3a:	4313      	orrs	r3, r2
 8104f3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f42:	4a1e      	ldr	r2, [pc, #120]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f44:	f043 0310 	orr.w	r3, r3, #16
 8104f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104f4a:	683b      	ldr	r3, [r7, #0]
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	d106      	bne.n	8104f5e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104f50:	4b1a      	ldr	r3, [pc, #104]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f54:	4a19      	ldr	r2, [pc, #100]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104f5c:	e00f      	b.n	8104f7e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104f5e:	683b      	ldr	r3, [r7, #0]
 8104f60:	2b01      	cmp	r3, #1
 8104f62:	d106      	bne.n	8104f72 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104f64:	4b15      	ldr	r3, [pc, #84]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f68:	4a14      	ldr	r2, [pc, #80]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104f70:	e005      	b.n	8104f7e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104f72:	4b12      	ldr	r3, [pc, #72]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f76:	4a11      	ldr	r2, [pc, #68]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f80:	681b      	ldr	r3, [r3, #0]
 8104f82:	4a0e      	ldr	r2, [pc, #56]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8104f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f8a:	f7fb fdbd 	bl	8100b08 <HAL_GetTick>
 8104f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f90:	e008      	b.n	8104fa4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104f92:	f7fb fdb9 	bl	8100b08 <HAL_GetTick>
 8104f96:	4602      	mov	r2, r0
 8104f98:	68bb      	ldr	r3, [r7, #8]
 8104f9a:	1ad3      	subs	r3, r2, r3
 8104f9c:	2b02      	cmp	r3, #2
 8104f9e:	d901      	bls.n	8104fa4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104fa0:	2303      	movs	r3, #3
 8104fa2:	e006      	b.n	8104fb2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104fa4:	4b05      	ldr	r3, [pc, #20]	@ (8104fbc <RCCEx_PLL2_Config+0x160>)
 8104fa6:	681b      	ldr	r3, [r3, #0]
 8104fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104fac:	2b00      	cmp	r3, #0
 8104fae:	d0f0      	beq.n	8104f92 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8104fb2:	4618      	mov	r0, r3
 8104fb4:	3710      	adds	r7, #16
 8104fb6:	46bd      	mov	sp, r7
 8104fb8:	bd80      	pop	{r7, pc}
 8104fba:	bf00      	nop
 8104fbc:	58024400 	.word	0x58024400

08104fc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104fc0:	b580      	push	{r7, lr}
 8104fc2:	b084      	sub	sp, #16
 8104fc4:	af00      	add	r7, sp, #0
 8104fc6:	6078      	str	r0, [r7, #4]
 8104fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104fca:	2300      	movs	r3, #0
 8104fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104fce:	4b54      	ldr	r3, [pc, #336]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8104fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104fd2:	f003 0303 	and.w	r3, r3, #3
 8104fd6:	2b03      	cmp	r3, #3
 8104fd8:	d101      	bne.n	8104fde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104fda:	2301      	movs	r3, #1
 8104fdc:	e09b      	b.n	8105116 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104fde:	4b50      	ldr	r3, [pc, #320]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4a4f      	ldr	r2, [pc, #316]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8104fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104fea:	f7fb fd8d 	bl	8100b08 <HAL_GetTick>
 8104fee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104ff0:	e008      	b.n	8105004 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104ff2:	f7fb fd89 	bl	8100b08 <HAL_GetTick>
 8104ff6:	4602      	mov	r2, r0
 8104ff8:	68bb      	ldr	r3, [r7, #8]
 8104ffa:	1ad3      	subs	r3, r2, r3
 8104ffc:	2b02      	cmp	r3, #2
 8104ffe:	d901      	bls.n	8105004 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105000:	2303      	movs	r3, #3
 8105002:	e088      	b.n	8105116 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105004:	4b46      	ldr	r3, [pc, #280]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810500c:	2b00      	cmp	r3, #0
 810500e:	d1f0      	bne.n	8104ff2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105010:	4b43      	ldr	r3, [pc, #268]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105014:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	051b      	lsls	r3, r3, #20
 810501e:	4940      	ldr	r1, [pc, #256]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105020:	4313      	orrs	r3, r2
 8105022:	628b      	str	r3, [r1, #40]	@ 0x28
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	685b      	ldr	r3, [r3, #4]
 8105028:	3b01      	subs	r3, #1
 810502a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	689b      	ldr	r3, [r3, #8]
 8105032:	3b01      	subs	r3, #1
 8105034:	025b      	lsls	r3, r3, #9
 8105036:	b29b      	uxth	r3, r3
 8105038:	431a      	orrs	r2, r3
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	68db      	ldr	r3, [r3, #12]
 810503e:	3b01      	subs	r3, #1
 8105040:	041b      	lsls	r3, r3, #16
 8105042:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105046:	431a      	orrs	r2, r3
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	691b      	ldr	r3, [r3, #16]
 810504c:	3b01      	subs	r3, #1
 810504e:	061b      	lsls	r3, r3, #24
 8105050:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105054:	4932      	ldr	r1, [pc, #200]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105056:	4313      	orrs	r3, r2
 8105058:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810505a:	4b31      	ldr	r3, [pc, #196]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 810505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810505e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	695b      	ldr	r3, [r3, #20]
 8105066:	492e      	ldr	r1, [pc, #184]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105068:	4313      	orrs	r3, r2
 810506a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810506c:	4b2c      	ldr	r3, [pc, #176]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 810506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105070:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	699b      	ldr	r3, [r3, #24]
 8105078:	4929      	ldr	r1, [pc, #164]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 810507a:	4313      	orrs	r3, r2
 810507c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810507e:	4b28      	ldr	r3, [pc, #160]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105082:	4a27      	ldr	r2, [pc, #156]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 8105084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810508a:	4b25      	ldr	r3, [pc, #148]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 810508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810508e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105092:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105096:	687a      	ldr	r2, [r7, #4]
 8105098:	69d2      	ldr	r2, [r2, #28]
 810509a:	00d2      	lsls	r2, r2, #3
 810509c:	4920      	ldr	r1, [pc, #128]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 810509e:	4313      	orrs	r3, r2
 81050a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81050a2:	4b1f      	ldr	r3, [pc, #124]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050a6:	4a1e      	ldr	r2, [pc, #120]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81050ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81050ae:	683b      	ldr	r3, [r7, #0]
 81050b0:	2b00      	cmp	r3, #0
 81050b2:	d106      	bne.n	81050c2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81050b4:	4b1a      	ldr	r3, [pc, #104]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050b8:	4a19      	ldr	r2, [pc, #100]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81050be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81050c0:	e00f      	b.n	81050e2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81050c2:	683b      	ldr	r3, [r7, #0]
 81050c4:	2b01      	cmp	r3, #1
 81050c6:	d106      	bne.n	81050d6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81050c8:	4b15      	ldr	r3, [pc, #84]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050cc:	4a14      	ldr	r2, [pc, #80]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81050d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81050d4:	e005      	b.n	81050e2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81050d6:	4b12      	ldr	r3, [pc, #72]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050da:	4a11      	ldr	r2, [pc, #68]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81050e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81050e2:	4b0f      	ldr	r3, [pc, #60]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	4a0e      	ldr	r2, [pc, #56]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 81050e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81050ee:	f7fb fd0b 	bl	8100b08 <HAL_GetTick>
 81050f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81050f4:	e008      	b.n	8105108 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81050f6:	f7fb fd07 	bl	8100b08 <HAL_GetTick>
 81050fa:	4602      	mov	r2, r0
 81050fc:	68bb      	ldr	r3, [r7, #8]
 81050fe:	1ad3      	subs	r3, r2, r3
 8105100:	2b02      	cmp	r3, #2
 8105102:	d901      	bls.n	8105108 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105104:	2303      	movs	r3, #3
 8105106:	e006      	b.n	8105116 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105108:	4b05      	ldr	r3, [pc, #20]	@ (8105120 <RCCEx_PLL3_Config+0x160>)
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105110:	2b00      	cmp	r3, #0
 8105112:	d0f0      	beq.n	81050f6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105114:	7bfb      	ldrb	r3, [r7, #15]
}
 8105116:	4618      	mov	r0, r3
 8105118:	3710      	adds	r7, #16
 810511a:	46bd      	mov	sp, r7
 810511c:	bd80      	pop	{r7, pc}
 810511e:	bf00      	nop
 8105120:	58024400 	.word	0x58024400

08105124 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105124:	b580      	push	{r7, lr}
 8105126:	b084      	sub	sp, #16
 8105128:	af00      	add	r7, sp, #0
 810512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 810512c:	2301      	movs	r3, #1
 810512e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105130:	687b      	ldr	r3, [r7, #4]
 8105132:	2b00      	cmp	r3, #0
 8105134:	d073      	beq.n	810521e <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 810513c:	b2db      	uxtb	r3, r3
 810513e:	2b00      	cmp	r3, #0
 8105140:	d106      	bne.n	8105150 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	2200      	movs	r2, #0
 8105146:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810514a:	6878      	ldr	r0, [r7, #4]
 810514c:	f7fb fb5e 	bl	810080c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	2202      	movs	r2, #2
 8105154:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	68db      	ldr	r3, [r3, #12]
 810515e:	f003 0310 	and.w	r3, r3, #16
 8105162:	2b10      	cmp	r3, #16
 8105164:	d052      	beq.n	810520c <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	22ca      	movs	r2, #202	@ 0xca
 810516c:	625a      	str	r2, [r3, #36]	@ 0x24
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	2253      	movs	r2, #83	@ 0x53
 8105174:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105176:	6878      	ldr	r0, [r7, #4]
 8105178:	f000 f87a 	bl	8105270 <RTC_EnterInitMode>
 810517c:	4603      	mov	r3, r0
 810517e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105180:	7bfb      	ldrb	r3, [r7, #15]
 8105182:	2b00      	cmp	r3, #0
 8105184:	d126      	bne.n	81051d4 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	689b      	ldr	r3, [r3, #8]
 810518c:	687a      	ldr	r2, [r7, #4]
 810518e:	6812      	ldr	r2, [r2, #0]
 8105190:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8105194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8105198:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	6899      	ldr	r1, [r3, #8]
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	685a      	ldr	r2, [r3, #4]
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	691b      	ldr	r3, [r3, #16]
 81051a8:	431a      	orrs	r2, r3
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	699b      	ldr	r3, [r3, #24]
 81051ae:	431a      	orrs	r2, r3
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	681b      	ldr	r3, [r3, #0]
 81051b4:	430a      	orrs	r2, r1
 81051b6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	689b      	ldr	r3, [r3, #8]
 81051bc:	0419      	lsls	r1, r3, #16
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	68da      	ldr	r2, [r3, #12]
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	430a      	orrs	r2, r1
 81051c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 81051ca:	6878      	ldr	r0, [r7, #4]
 81051cc:	f000 f884 	bl	81052d8 <RTC_ExitInitMode>
 81051d0:	4603      	mov	r3, r0
 81051d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81051d4:	7bfb      	ldrb	r3, [r7, #15]
 81051d6:	2b00      	cmp	r3, #0
 81051d8:	d113      	bne.n	8105202 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	f022 0203 	bic.w	r2, r2, #3
 81051e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	69da      	ldr	r2, [r3, #28]
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	695b      	ldr	r3, [r3, #20]
 81051f8:	431a      	orrs	r2, r3
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	430a      	orrs	r2, r1
 8105200:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	22ff      	movs	r2, #255	@ 0xff
 8105208:	625a      	str	r2, [r3, #36]	@ 0x24
 810520a:	e001      	b.n	8105210 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 810520c:	2300      	movs	r3, #0
 810520e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105210:	7bfb      	ldrb	r3, [r7, #15]
 8105212:	2b00      	cmp	r3, #0
 8105214:	d103      	bne.n	810521e <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	2201      	movs	r2, #1
 810521a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 810521e:	7bfb      	ldrb	r3, [r7, #15]
}
 8105220:	4618      	mov	r0, r3
 8105222:	3710      	adds	r7, #16
 8105224:	46bd      	mov	sp, r7
 8105226:	bd80      	pop	{r7, pc}

08105228 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105228:	b580      	push	{r7, lr}
 810522a:	b084      	sub	sp, #16
 810522c:	af00      	add	r7, sp, #0
 810522e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	4a0d      	ldr	r2, [pc, #52]	@ (810526c <HAL_RTC_WaitForSynchro+0x44>)
 8105236:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105238:	f7fb fc66 	bl	8100b08 <HAL_GetTick>
 810523c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810523e:	e009      	b.n	8105254 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105240:	f7fb fc62 	bl	8100b08 <HAL_GetTick>
 8105244:	4602      	mov	r2, r0
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	1ad3      	subs	r3, r2, r3
 810524a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810524e:	d901      	bls.n	8105254 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105250:	2303      	movs	r3, #3
 8105252:	e007      	b.n	8105264 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	68db      	ldr	r3, [r3, #12]
 810525a:	f003 0320 	and.w	r3, r3, #32
 810525e:	2b00      	cmp	r3, #0
 8105260:	d0ee      	beq.n	8105240 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105262:	2300      	movs	r3, #0
}
 8105264:	4618      	mov	r0, r3
 8105266:	3710      	adds	r7, #16
 8105268:	46bd      	mov	sp, r7
 810526a:	bd80      	pop	{r7, pc}
 810526c:	0003ff5f 	.word	0x0003ff5f

08105270 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105270:	b580      	push	{r7, lr}
 8105272:	b084      	sub	sp, #16
 8105274:	af00      	add	r7, sp, #0
 8105276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105278:	2300      	movs	r3, #0
 810527a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	68db      	ldr	r3, [r3, #12]
 8105282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105286:	2b00      	cmp	r3, #0
 8105288:	d120      	bne.n	81052cc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	f04f 32ff 	mov.w	r2, #4294967295
 8105292:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105294:	f7fb fc38 	bl	8100b08 <HAL_GetTick>
 8105298:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810529a:	e00d      	b.n	81052b8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810529c:	f7fb fc34 	bl	8100b08 <HAL_GetTick>
 81052a0:	4602      	mov	r2, r0
 81052a2:	68bb      	ldr	r3, [r7, #8]
 81052a4:	1ad3      	subs	r3, r2, r3
 81052a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81052aa:	d905      	bls.n	81052b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81052ac:	2303      	movs	r3, #3
 81052ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	2203      	movs	r2, #3
 81052b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	68db      	ldr	r3, [r3, #12]
 81052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81052c2:	2b00      	cmp	r3, #0
 81052c4:	d102      	bne.n	81052cc <RTC_EnterInitMode+0x5c>
 81052c6:	7bfb      	ldrb	r3, [r7, #15]
 81052c8:	2b03      	cmp	r3, #3
 81052ca:	d1e7      	bne.n	810529c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81052ce:	4618      	mov	r0, r3
 81052d0:	3710      	adds	r7, #16
 81052d2:	46bd      	mov	sp, r7
 81052d4:	bd80      	pop	{r7, pc}
	...

081052d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81052d8:	b580      	push	{r7, lr}
 81052da:	b084      	sub	sp, #16
 81052dc:	af00      	add	r7, sp, #0
 81052de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81052e0:	2300      	movs	r3, #0
 81052e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 81052e4:	4b1a      	ldr	r3, [pc, #104]	@ (8105350 <RTC_ExitInitMode+0x78>)
 81052e6:	68db      	ldr	r3, [r3, #12]
 81052e8:	4a19      	ldr	r2, [pc, #100]	@ (8105350 <RTC_ExitInitMode+0x78>)
 81052ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81052ee:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81052f0:	4b17      	ldr	r3, [pc, #92]	@ (8105350 <RTC_ExitInitMode+0x78>)
 81052f2:	689b      	ldr	r3, [r3, #8]
 81052f4:	f003 0320 	and.w	r3, r3, #32
 81052f8:	2b00      	cmp	r3, #0
 81052fa:	d10c      	bne.n	8105316 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81052fc:	6878      	ldr	r0, [r7, #4]
 81052fe:	f7ff ff93 	bl	8105228 <HAL_RTC_WaitForSynchro>
 8105302:	4603      	mov	r3, r0
 8105304:	2b00      	cmp	r3, #0
 8105306:	d01e      	beq.n	8105346 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	2203      	movs	r2, #3
 810530c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105310:	2303      	movs	r3, #3
 8105312:	73fb      	strb	r3, [r7, #15]
 8105314:	e017      	b.n	8105346 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105316:	4b0e      	ldr	r3, [pc, #56]	@ (8105350 <RTC_ExitInitMode+0x78>)
 8105318:	689b      	ldr	r3, [r3, #8]
 810531a:	4a0d      	ldr	r2, [pc, #52]	@ (8105350 <RTC_ExitInitMode+0x78>)
 810531c:	f023 0320 	bic.w	r3, r3, #32
 8105320:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105322:	6878      	ldr	r0, [r7, #4]
 8105324:	f7ff ff80 	bl	8105228 <HAL_RTC_WaitForSynchro>
 8105328:	4603      	mov	r3, r0
 810532a:	2b00      	cmp	r3, #0
 810532c:	d005      	beq.n	810533a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	2203      	movs	r2, #3
 8105332:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105336:	2303      	movs	r3, #3
 8105338:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810533a:	4b05      	ldr	r3, [pc, #20]	@ (8105350 <RTC_ExitInitMode+0x78>)
 810533c:	689b      	ldr	r3, [r3, #8]
 810533e:	4a04      	ldr	r2, [pc, #16]	@ (8105350 <RTC_ExitInitMode+0x78>)
 8105340:	f043 0320 	orr.w	r3, r3, #32
 8105344:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105346:	7bfb      	ldrb	r3, [r7, #15]
}
 8105348:	4618      	mov	r0, r3
 810534a:	3710      	adds	r7, #16
 810534c:	46bd      	mov	sp, r7
 810534e:	bd80      	pop	{r7, pc}
 8105350:	58004000 	.word	0x58004000

08105354 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8105354:	b480      	push	{r7}
 8105356:	b085      	sub	sp, #20
 8105358:	af00      	add	r7, sp, #0
 810535a:	6078      	str	r0, [r7, #4]
 810535c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105364:	2b01      	cmp	r3, #1
 8105366:	d101      	bne.n	810536c <HAL_RTCEx_SetTamper+0x18>
 8105368:	2302      	movs	r3, #2
 810536a:	e0cc      	b.n	8105506 <HAL_RTCEx_SetTamper+0x1b2>
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	2201      	movs	r2, #1
 8105370:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	2202      	movs	r2, #2
 8105378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105382:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105384:	683b      	ldr	r3, [r7, #0]
 8105386:	681b      	ldr	r3, [r3, #0]
 8105388:	68fa      	ldr	r2, [r7, #12]
 810538a:	4313      	orrs	r3, r2
 810538c:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 810538e:	683b      	ldr	r3, [r7, #0]
 8105390:	689b      	ldr	r3, [r3, #8]
 8105392:	2b08      	cmp	r3, #8
 8105394:	d003      	beq.n	810539e <HAL_RTCEx_SetTamper+0x4a>
 8105396:	683b      	ldr	r3, [r7, #0]
 8105398:	689b      	ldr	r3, [r3, #8]
 810539a:	2b02      	cmp	r3, #2
 810539c:	d106      	bne.n	81053ac <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 810539e:	683b      	ldr	r3, [r7, #0]
 81053a0:	681b      	ldr	r3, [r3, #0]
 81053a2:	005b      	lsls	r3, r3, #1
 81053a4:	68fa      	ldr	r2, [r7, #12]
 81053a6:	4313      	orrs	r3, r2
 81053a8:	60fb      	str	r3, [r7, #12]
 81053aa:	e006      	b.n	81053ba <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 81053ac:	683b      	ldr	r3, [r7, #0]
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	005b      	lsls	r3, r3, #1
 81053b2:	43db      	mvns	r3, r3
 81053b4:	68fa      	ldr	r2, [r7, #12]
 81053b6:	4013      	ands	r3, r2
 81053b8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 81053ba:	683b      	ldr	r3, [r7, #0]
 81053bc:	68db      	ldr	r3, [r3, #12]
 81053be:	2b00      	cmp	r3, #0
 81053c0:	d01e      	beq.n	8105400 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81053c2:	683b      	ldr	r3, [r7, #0]
 81053c4:	681b      	ldr	r3, [r3, #0]
 81053c6:	f003 0301 	and.w	r3, r3, #1
 81053ca:	2b00      	cmp	r3, #0
 81053cc:	d003      	beq.n	81053d6 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 81053ce:	68fb      	ldr	r3, [r7, #12]
 81053d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81053d4:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81053d6:	683b      	ldr	r3, [r7, #0]
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	f003 0308 	and.w	r3, r3, #8
 81053de:	2b00      	cmp	r3, #0
 81053e0:	d003      	beq.n	81053ea <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 81053e2:	68fb      	ldr	r3, [r7, #12]
 81053e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81053e8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	681b      	ldr	r3, [r3, #0]
 81053ee:	f003 0320 	and.w	r3, r3, #32
 81053f2:	2b00      	cmp	r3, #0
 81053f4:	d022      	beq.n	810543c <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 81053f6:	68fb      	ldr	r3, [r7, #12]
 81053f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81053fc:	60fb      	str	r3, [r7, #12]
 81053fe:	e01d      	b.n	810543c <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105400:	683b      	ldr	r3, [r7, #0]
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	f003 0301 	and.w	r3, r3, #1
 8105408:	2b00      	cmp	r3, #0
 810540a:	d003      	beq.n	8105414 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 810540c:	68fb      	ldr	r3, [r7, #12]
 810540e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8105412:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105414:	683b      	ldr	r3, [r7, #0]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	f003 0308 	and.w	r3, r3, #8
 810541c:	2b00      	cmp	r3, #0
 810541e:	d003      	beq.n	8105428 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105420:	68fb      	ldr	r3, [r7, #12]
 8105422:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105426:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105428:	683b      	ldr	r3, [r7, #0]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	f003 0320 	and.w	r3, r3, #32
 8105430:	2b00      	cmp	r3, #0
 8105432:	d003      	beq.n	810543c <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105434:	68fb      	ldr	r3, [r7, #12]
 8105436:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810543a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 810543c:	683b      	ldr	r3, [r7, #0]
 810543e:	691b      	ldr	r3, [r3, #16]
 8105440:	2b00      	cmp	r3, #0
 8105442:	d01e      	beq.n	8105482 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105444:	683b      	ldr	r3, [r7, #0]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	f003 0301 	and.w	r3, r3, #1
 810544c:	2b00      	cmp	r3, #0
 810544e:	d003      	beq.n	8105458 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105456:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105458:	683b      	ldr	r3, [r7, #0]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	f003 0308 	and.w	r3, r3, #8
 8105460:	2b00      	cmp	r3, #0
 8105462:	d003      	beq.n	810546c <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810546a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810546c:	683b      	ldr	r3, [r7, #0]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	f003 0320 	and.w	r3, r3, #32
 8105474:	2b00      	cmp	r3, #0
 8105476:	d022      	beq.n	81054be <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105478:	68fb      	ldr	r3, [r7, #12]
 810547a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810547e:	60fb      	str	r3, [r7, #12]
 8105480:	e01d      	b.n	81054be <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105482:	683b      	ldr	r3, [r7, #0]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	f003 0301 	and.w	r3, r3, #1
 810548a:	2b00      	cmp	r3, #0
 810548c:	d003      	beq.n	8105496 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 810548e:	68fb      	ldr	r3, [r7, #12]
 8105490:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8105494:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105496:	683b      	ldr	r3, [r7, #0]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	f003 0308 	and.w	r3, r3, #8
 810549e:	2b00      	cmp	r3, #0
 81054a0:	d003      	beq.n	81054aa <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 81054a8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81054aa:	683b      	ldr	r3, [r7, #0]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	f003 0320 	and.w	r3, r3, #32
 81054b2:	2b00      	cmp	r3, #0
 81054b4:	d003      	beq.n	81054be <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 81054b6:	68fb      	ldr	r3, [r7, #12]
 81054b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 81054bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 81054be:	68fb      	ldr	r3, [r7, #12]
 81054c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81054c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81054c8:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81054ca:	683b      	ldr	r3, [r7, #0]
 81054cc:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 81054ce:	683b      	ldr	r3, [r7, #0]
 81054d0:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81054d2:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 81054d4:	683b      	ldr	r3, [r7, #0]
 81054d6:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 81054d8:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 81054da:	683b      	ldr	r3, [r7, #0]
 81054dc:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 81054de:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 81054e0:	683b      	ldr	r3, [r7, #0]
 81054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 81054e4:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81054e6:	68fa      	ldr	r2, [r7, #12]
 81054e8:	4313      	orrs	r3, r2
 81054ea:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	68fa      	ldr	r2, [r7, #12]
 81054f2:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	2201      	movs	r2, #1
 81054f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	2200      	movs	r2, #0
 8105500:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105504:	2300      	movs	r3, #0
}
 8105506:	4618      	mov	r0, r3
 8105508:	3714      	adds	r7, #20
 810550a:	46bd      	mov	sp, r7
 810550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105510:	4770      	bx	lr

08105512 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105512:	b580      	push	{r7, lr}
 8105514:	b082      	sub	sp, #8
 8105516:	af00      	add	r7, sp, #0
 8105518:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	2b00      	cmp	r3, #0
 810551e:	d101      	bne.n	8105524 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105520:	2301      	movs	r3, #1
 8105522:	e049      	b.n	81055b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810552a:	b2db      	uxtb	r3, r3
 810552c:	2b00      	cmp	r3, #0
 810552e:	d106      	bne.n	810553e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	2200      	movs	r2, #0
 8105534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105538:	6878      	ldr	r0, [r7, #4]
 810553a:	f7fb f999 	bl	8100870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	2202      	movs	r2, #2
 8105542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	681a      	ldr	r2, [r3, #0]
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	3304      	adds	r3, #4
 810554e:	4619      	mov	r1, r3
 8105550:	4610      	mov	r0, r2
 8105552:	f000 f933 	bl	81057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	2201      	movs	r2, #1
 810555a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	2201      	movs	r2, #1
 8105562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	2201      	movs	r2, #1
 810556a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	2201      	movs	r2, #1
 8105572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	2201      	movs	r2, #1
 810557a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2201      	movs	r2, #1
 8105582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2201      	movs	r2, #1
 810558a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	2201      	movs	r2, #1
 8105592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	2201      	movs	r2, #1
 810559a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	2201      	movs	r2, #1
 81055a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	2201      	movs	r2, #1
 81055aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	2201      	movs	r2, #1
 81055b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81055b6:	2300      	movs	r3, #0
}
 81055b8:	4618      	mov	r0, r3
 81055ba:	3708      	adds	r7, #8
 81055bc:	46bd      	mov	sp, r7
 81055be:	bd80      	pop	{r7, pc}

081055c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 81055c0:	b580      	push	{r7, lr}
 81055c2:	b082      	sub	sp, #8
 81055c4:	af00      	add	r7, sp, #0
 81055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	2b00      	cmp	r3, #0
 81055cc:	d101      	bne.n	81055d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 81055ce:	2301      	movs	r3, #1
 81055d0:	e049      	b.n	8105666 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81055d8:	b2db      	uxtb	r3, r3
 81055da:	2b00      	cmp	r3, #0
 81055dc:	d106      	bne.n	81055ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	2200      	movs	r2, #0
 81055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 81055e6:	6878      	ldr	r0, [r7, #4]
 81055e8:	f000 f841 	bl	810566e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	2202      	movs	r2, #2
 81055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	681a      	ldr	r2, [r3, #0]
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	3304      	adds	r3, #4
 81055fc:	4619      	mov	r1, r3
 81055fe:	4610      	mov	r0, r2
 8105600:	f000 f8dc 	bl	81057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	2201      	movs	r2, #1
 8105608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	2201      	movs	r2, #1
 8105610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	2201      	movs	r2, #1
 8105618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	2201      	movs	r2, #1
 8105620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	2201      	movs	r2, #1
 8105628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	2201      	movs	r2, #1
 8105630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	2201      	movs	r2, #1
 8105638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	2201      	movs	r2, #1
 8105640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	2201      	movs	r2, #1
 8105648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	2201      	movs	r2, #1
 8105650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	2201      	movs	r2, #1
 8105658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	2201      	movs	r2, #1
 8105660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8105664:	2300      	movs	r3, #0
}
 8105666:	4618      	mov	r0, r3
 8105668:	3708      	adds	r7, #8
 810566a:	46bd      	mov	sp, r7
 810566c:	bd80      	pop	{r7, pc}

0810566e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810566e:	b480      	push	{r7}
 8105670:	b083      	sub	sp, #12
 8105672:	af00      	add	r7, sp, #0
 8105674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8105676:	bf00      	nop
 8105678:	370c      	adds	r7, #12
 810567a:	46bd      	mov	sp, r7
 810567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105680:	4770      	bx	lr

08105682 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8105682:	b580      	push	{r7, lr}
 8105684:	b086      	sub	sp, #24
 8105686:	af00      	add	r7, sp, #0
 8105688:	60f8      	str	r0, [r7, #12]
 810568a:	60b9      	str	r1, [r7, #8]
 810568c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810568e:	2300      	movs	r3, #0
 8105690:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105692:	68fb      	ldr	r3, [r7, #12]
 8105694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105698:	2b01      	cmp	r3, #1
 810569a:	d101      	bne.n	81056a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 810569c:	2302      	movs	r3, #2
 810569e:	e088      	b.n	81057b2 <HAL_TIM_IC_ConfigChannel+0x130>
 81056a0:	68fb      	ldr	r3, [r7, #12]
 81056a2:	2201      	movs	r2, #1
 81056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	2b00      	cmp	r3, #0
 81056ac:	d11b      	bne.n	81056e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 81056ae:	68fb      	ldr	r3, [r7, #12]
 81056b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81056b2:	68bb      	ldr	r3, [r7, #8]
 81056b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81056b6:	68bb      	ldr	r3, [r7, #8]
 81056b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81056ba:	68bb      	ldr	r3, [r7, #8]
 81056bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 81056be:	f000 f923 	bl	8105908 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 81056c2:	68fb      	ldr	r3, [r7, #12]
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	699a      	ldr	r2, [r3, #24]
 81056c8:	68fb      	ldr	r3, [r7, #12]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	f022 020c 	bic.w	r2, r2, #12
 81056d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 81056d2:	68fb      	ldr	r3, [r7, #12]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	6999      	ldr	r1, [r3, #24]
 81056d8:	68bb      	ldr	r3, [r7, #8]
 81056da:	689a      	ldr	r2, [r3, #8]
 81056dc:	68fb      	ldr	r3, [r7, #12]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	430a      	orrs	r2, r1
 81056e2:	619a      	str	r2, [r3, #24]
 81056e4:	e060      	b.n	81057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	2b04      	cmp	r3, #4
 81056ea:	d11c      	bne.n	8105726 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 81056ec:	68fb      	ldr	r3, [r7, #12]
 81056ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81056f0:	68bb      	ldr	r3, [r7, #8]
 81056f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81056f4:	68bb      	ldr	r3, [r7, #8]
 81056f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81056f8:	68bb      	ldr	r3, [r7, #8]
 81056fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 81056fc:	f000 f978 	bl	81059f0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8105700:	68fb      	ldr	r3, [r7, #12]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	699a      	ldr	r2, [r3, #24]
 8105706:	68fb      	ldr	r3, [r7, #12]
 8105708:	681b      	ldr	r3, [r3, #0]
 810570a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810570e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8105710:	68fb      	ldr	r3, [r7, #12]
 8105712:	681b      	ldr	r3, [r3, #0]
 8105714:	6999      	ldr	r1, [r3, #24]
 8105716:	68bb      	ldr	r3, [r7, #8]
 8105718:	689b      	ldr	r3, [r3, #8]
 810571a:	021a      	lsls	r2, r3, #8
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	430a      	orrs	r2, r1
 8105722:	619a      	str	r2, [r3, #24]
 8105724:	e040      	b.n	81057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	2b08      	cmp	r3, #8
 810572a:	d11b      	bne.n	8105764 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8105730:	68bb      	ldr	r3, [r7, #8]
 8105732:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8105734:	68bb      	ldr	r3, [r7, #8]
 8105736:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8105738:	68bb      	ldr	r3, [r7, #8]
 810573a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 810573c:	f000 f995 	bl	8105a6a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8105740:	68fb      	ldr	r3, [r7, #12]
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	69da      	ldr	r2, [r3, #28]
 8105746:	68fb      	ldr	r3, [r7, #12]
 8105748:	681b      	ldr	r3, [r3, #0]
 810574a:	f022 020c 	bic.w	r2, r2, #12
 810574e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	69d9      	ldr	r1, [r3, #28]
 8105756:	68bb      	ldr	r3, [r7, #8]
 8105758:	689a      	ldr	r2, [r3, #8]
 810575a:	68fb      	ldr	r3, [r7, #12]
 810575c:	681b      	ldr	r3, [r3, #0]
 810575e:	430a      	orrs	r2, r1
 8105760:	61da      	str	r2, [r3, #28]
 8105762:	e021      	b.n	81057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	2b0c      	cmp	r3, #12
 8105768:	d11c      	bne.n	81057a4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 810576a:	68fb      	ldr	r3, [r7, #12]
 810576c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810576e:	68bb      	ldr	r3, [r7, #8]
 8105770:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8105772:	68bb      	ldr	r3, [r7, #8]
 8105774:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8105776:	68bb      	ldr	r3, [r7, #8]
 8105778:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810577a:	f000 f9b2 	bl	8105ae2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	681b      	ldr	r3, [r3, #0]
 8105782:	69da      	ldr	r2, [r3, #28]
 8105784:	68fb      	ldr	r3, [r7, #12]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810578c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810578e:	68fb      	ldr	r3, [r7, #12]
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	69d9      	ldr	r1, [r3, #28]
 8105794:	68bb      	ldr	r3, [r7, #8]
 8105796:	689b      	ldr	r3, [r3, #8]
 8105798:	021a      	lsls	r2, r3, #8
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	681b      	ldr	r3, [r3, #0]
 810579e:	430a      	orrs	r2, r1
 81057a0:	61da      	str	r2, [r3, #28]
 81057a2:	e001      	b.n	81057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 81057a4:	2301      	movs	r3, #1
 81057a6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 81057a8:	68fb      	ldr	r3, [r7, #12]
 81057aa:	2200      	movs	r2, #0
 81057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 81057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 81057b2:	4618      	mov	r0, r3
 81057b4:	3718      	adds	r7, #24
 81057b6:	46bd      	mov	sp, r7
 81057b8:	bd80      	pop	{r7, pc}
	...

081057bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81057bc:	b480      	push	{r7}
 81057be:	b085      	sub	sp, #20
 81057c0:	af00      	add	r7, sp, #0
 81057c2:	6078      	str	r0, [r7, #4]
 81057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	681b      	ldr	r3, [r3, #0]
 81057ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	4a46      	ldr	r2, [pc, #280]	@ (81058e8 <TIM_Base_SetConfig+0x12c>)
 81057d0:	4293      	cmp	r3, r2
 81057d2:	d013      	beq.n	81057fc <TIM_Base_SetConfig+0x40>
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81057da:	d00f      	beq.n	81057fc <TIM_Base_SetConfig+0x40>
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	4a43      	ldr	r2, [pc, #268]	@ (81058ec <TIM_Base_SetConfig+0x130>)
 81057e0:	4293      	cmp	r3, r2
 81057e2:	d00b      	beq.n	81057fc <TIM_Base_SetConfig+0x40>
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	4a42      	ldr	r2, [pc, #264]	@ (81058f0 <TIM_Base_SetConfig+0x134>)
 81057e8:	4293      	cmp	r3, r2
 81057ea:	d007      	beq.n	81057fc <TIM_Base_SetConfig+0x40>
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	4a41      	ldr	r2, [pc, #260]	@ (81058f4 <TIM_Base_SetConfig+0x138>)
 81057f0:	4293      	cmp	r3, r2
 81057f2:	d003      	beq.n	81057fc <TIM_Base_SetConfig+0x40>
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	4a40      	ldr	r2, [pc, #256]	@ (81058f8 <TIM_Base_SetConfig+0x13c>)
 81057f8:	4293      	cmp	r3, r2
 81057fa:	d108      	bne.n	810580e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81057fc:	68fb      	ldr	r3, [r7, #12]
 81057fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105804:	683b      	ldr	r3, [r7, #0]
 8105806:	685b      	ldr	r3, [r3, #4]
 8105808:	68fa      	ldr	r2, [r7, #12]
 810580a:	4313      	orrs	r3, r2
 810580c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	4a35      	ldr	r2, [pc, #212]	@ (81058e8 <TIM_Base_SetConfig+0x12c>)
 8105812:	4293      	cmp	r3, r2
 8105814:	d01f      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 8105816:	687b      	ldr	r3, [r7, #4]
 8105818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810581c:	d01b      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	4a32      	ldr	r2, [pc, #200]	@ (81058ec <TIM_Base_SetConfig+0x130>)
 8105822:	4293      	cmp	r3, r2
 8105824:	d017      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	4a31      	ldr	r2, [pc, #196]	@ (81058f0 <TIM_Base_SetConfig+0x134>)
 810582a:	4293      	cmp	r3, r2
 810582c:	d013      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	4a30      	ldr	r2, [pc, #192]	@ (81058f4 <TIM_Base_SetConfig+0x138>)
 8105832:	4293      	cmp	r3, r2
 8105834:	d00f      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	4a2f      	ldr	r2, [pc, #188]	@ (81058f8 <TIM_Base_SetConfig+0x13c>)
 810583a:	4293      	cmp	r3, r2
 810583c:	d00b      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	4a2e      	ldr	r2, [pc, #184]	@ (81058fc <TIM_Base_SetConfig+0x140>)
 8105842:	4293      	cmp	r3, r2
 8105844:	d007      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	4a2d      	ldr	r2, [pc, #180]	@ (8105900 <TIM_Base_SetConfig+0x144>)
 810584a:	4293      	cmp	r3, r2
 810584c:	d003      	beq.n	8105856 <TIM_Base_SetConfig+0x9a>
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	4a2c      	ldr	r2, [pc, #176]	@ (8105904 <TIM_Base_SetConfig+0x148>)
 8105852:	4293      	cmp	r3, r2
 8105854:	d108      	bne.n	8105868 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810585c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810585e:	683b      	ldr	r3, [r7, #0]
 8105860:	68db      	ldr	r3, [r3, #12]
 8105862:	68fa      	ldr	r2, [r7, #12]
 8105864:	4313      	orrs	r3, r2
 8105866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810586e:	683b      	ldr	r3, [r7, #0]
 8105870:	695b      	ldr	r3, [r3, #20]
 8105872:	4313      	orrs	r3, r2
 8105874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	68fa      	ldr	r2, [r7, #12]
 810587a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810587c:	683b      	ldr	r3, [r7, #0]
 810587e:	689a      	ldr	r2, [r3, #8]
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105884:	683b      	ldr	r3, [r7, #0]
 8105886:	681a      	ldr	r2, [r3, #0]
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	4a16      	ldr	r2, [pc, #88]	@ (81058e8 <TIM_Base_SetConfig+0x12c>)
 8105890:	4293      	cmp	r3, r2
 8105892:	d00f      	beq.n	81058b4 <TIM_Base_SetConfig+0xf8>
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	4a18      	ldr	r2, [pc, #96]	@ (81058f8 <TIM_Base_SetConfig+0x13c>)
 8105898:	4293      	cmp	r3, r2
 810589a:	d00b      	beq.n	81058b4 <TIM_Base_SetConfig+0xf8>
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	4a17      	ldr	r2, [pc, #92]	@ (81058fc <TIM_Base_SetConfig+0x140>)
 81058a0:	4293      	cmp	r3, r2
 81058a2:	d007      	beq.n	81058b4 <TIM_Base_SetConfig+0xf8>
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	4a16      	ldr	r2, [pc, #88]	@ (8105900 <TIM_Base_SetConfig+0x144>)
 81058a8:	4293      	cmp	r3, r2
 81058aa:	d003      	beq.n	81058b4 <TIM_Base_SetConfig+0xf8>
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	4a15      	ldr	r2, [pc, #84]	@ (8105904 <TIM_Base_SetConfig+0x148>)
 81058b0:	4293      	cmp	r3, r2
 81058b2:	d103      	bne.n	81058bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81058b4:	683b      	ldr	r3, [r7, #0]
 81058b6:	691a      	ldr	r2, [r3, #16]
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	2201      	movs	r2, #1
 81058c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	691b      	ldr	r3, [r3, #16]
 81058c6:	f003 0301 	and.w	r3, r3, #1
 81058ca:	2b01      	cmp	r3, #1
 81058cc:	d105      	bne.n	81058da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	691b      	ldr	r3, [r3, #16]
 81058d2:	f023 0201 	bic.w	r2, r3, #1
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	611a      	str	r2, [r3, #16]
  }
}
 81058da:	bf00      	nop
 81058dc:	3714      	adds	r7, #20
 81058de:	46bd      	mov	sp, r7
 81058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058e4:	4770      	bx	lr
 81058e6:	bf00      	nop
 81058e8:	40010000 	.word	0x40010000
 81058ec:	40000400 	.word	0x40000400
 81058f0:	40000800 	.word	0x40000800
 81058f4:	40000c00 	.word	0x40000c00
 81058f8:	40010400 	.word	0x40010400
 81058fc:	40014000 	.word	0x40014000
 8105900:	40014400 	.word	0x40014400
 8105904:	40014800 	.word	0x40014800

08105908 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8105908:	b480      	push	{r7}
 810590a:	b087      	sub	sp, #28
 810590c:	af00      	add	r7, sp, #0
 810590e:	60f8      	str	r0, [r7, #12]
 8105910:	60b9      	str	r1, [r7, #8]
 8105912:	607a      	str	r2, [r7, #4]
 8105914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8105916:	68fb      	ldr	r3, [r7, #12]
 8105918:	6a1b      	ldr	r3, [r3, #32]
 810591a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810591c:	68fb      	ldr	r3, [r7, #12]
 810591e:	6a1b      	ldr	r3, [r3, #32]
 8105920:	f023 0201 	bic.w	r2, r3, #1
 8105924:	68fb      	ldr	r3, [r7, #12]
 8105926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105928:	68fb      	ldr	r3, [r7, #12]
 810592a:	699b      	ldr	r3, [r3, #24]
 810592c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	4a28      	ldr	r2, [pc, #160]	@ (81059d4 <TIM_TI1_SetConfig+0xcc>)
 8105932:	4293      	cmp	r3, r2
 8105934:	d01b      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 8105936:	68fb      	ldr	r3, [r7, #12]
 8105938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810593c:	d017      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 810593e:	68fb      	ldr	r3, [r7, #12]
 8105940:	4a25      	ldr	r2, [pc, #148]	@ (81059d8 <TIM_TI1_SetConfig+0xd0>)
 8105942:	4293      	cmp	r3, r2
 8105944:	d013      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	4a24      	ldr	r2, [pc, #144]	@ (81059dc <TIM_TI1_SetConfig+0xd4>)
 810594a:	4293      	cmp	r3, r2
 810594c:	d00f      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	4a23      	ldr	r2, [pc, #140]	@ (81059e0 <TIM_TI1_SetConfig+0xd8>)
 8105952:	4293      	cmp	r3, r2
 8105954:	d00b      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	4a22      	ldr	r2, [pc, #136]	@ (81059e4 <TIM_TI1_SetConfig+0xdc>)
 810595a:	4293      	cmp	r3, r2
 810595c:	d007      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	4a21      	ldr	r2, [pc, #132]	@ (81059e8 <TIM_TI1_SetConfig+0xe0>)
 8105962:	4293      	cmp	r3, r2
 8105964:	d003      	beq.n	810596e <TIM_TI1_SetConfig+0x66>
 8105966:	68fb      	ldr	r3, [r7, #12]
 8105968:	4a20      	ldr	r2, [pc, #128]	@ (81059ec <TIM_TI1_SetConfig+0xe4>)
 810596a:	4293      	cmp	r3, r2
 810596c:	d101      	bne.n	8105972 <TIM_TI1_SetConfig+0x6a>
 810596e:	2301      	movs	r3, #1
 8105970:	e000      	b.n	8105974 <TIM_TI1_SetConfig+0x6c>
 8105972:	2300      	movs	r3, #0
 8105974:	2b00      	cmp	r3, #0
 8105976:	d008      	beq.n	810598a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8105978:	697b      	ldr	r3, [r7, #20]
 810597a:	f023 0303 	bic.w	r3, r3, #3
 810597e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8105980:	697a      	ldr	r2, [r7, #20]
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	4313      	orrs	r3, r2
 8105986:	617b      	str	r3, [r7, #20]
 8105988:	e003      	b.n	8105992 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810598a:	697b      	ldr	r3, [r7, #20]
 810598c:	f043 0301 	orr.w	r3, r3, #1
 8105990:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105992:	697b      	ldr	r3, [r7, #20]
 8105994:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8105998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810599a:	683b      	ldr	r3, [r7, #0]
 810599c:	011b      	lsls	r3, r3, #4
 810599e:	b2db      	uxtb	r3, r3
 81059a0:	697a      	ldr	r2, [r7, #20]
 81059a2:	4313      	orrs	r3, r2
 81059a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81059a6:	693b      	ldr	r3, [r7, #16]
 81059a8:	f023 030a 	bic.w	r3, r3, #10
 81059ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81059ae:	68bb      	ldr	r3, [r7, #8]
 81059b0:	f003 030a 	and.w	r3, r3, #10
 81059b4:	693a      	ldr	r2, [r7, #16]
 81059b6:	4313      	orrs	r3, r2
 81059b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81059ba:	68fb      	ldr	r3, [r7, #12]
 81059bc:	697a      	ldr	r2, [r7, #20]
 81059be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81059c0:	68fb      	ldr	r3, [r7, #12]
 81059c2:	693a      	ldr	r2, [r7, #16]
 81059c4:	621a      	str	r2, [r3, #32]
}
 81059c6:	bf00      	nop
 81059c8:	371c      	adds	r7, #28
 81059ca:	46bd      	mov	sp, r7
 81059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059d0:	4770      	bx	lr
 81059d2:	bf00      	nop
 81059d4:	40010000 	.word	0x40010000
 81059d8:	40000400 	.word	0x40000400
 81059dc:	40000800 	.word	0x40000800
 81059e0:	40000c00 	.word	0x40000c00
 81059e4:	40010400 	.word	0x40010400
 81059e8:	40001800 	.word	0x40001800
 81059ec:	40014000 	.word	0x40014000

081059f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81059f0:	b480      	push	{r7}
 81059f2:	b087      	sub	sp, #28
 81059f4:	af00      	add	r7, sp, #0
 81059f6:	60f8      	str	r0, [r7, #12]
 81059f8:	60b9      	str	r1, [r7, #8]
 81059fa:	607a      	str	r2, [r7, #4]
 81059fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 81059fe:	68fb      	ldr	r3, [r7, #12]
 8105a00:	6a1b      	ldr	r3, [r3, #32]
 8105a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105a04:	68fb      	ldr	r3, [r7, #12]
 8105a06:	6a1b      	ldr	r3, [r3, #32]
 8105a08:	f023 0210 	bic.w	r2, r3, #16
 8105a0c:	68fb      	ldr	r3, [r7, #12]
 8105a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105a10:	68fb      	ldr	r3, [r7, #12]
 8105a12:	699b      	ldr	r3, [r3, #24]
 8105a14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8105a16:	693b      	ldr	r3, [r7, #16]
 8105a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	021b      	lsls	r3, r3, #8
 8105a22:	693a      	ldr	r2, [r7, #16]
 8105a24:	4313      	orrs	r3, r2
 8105a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8105a28:	693b      	ldr	r3, [r7, #16]
 8105a2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8105a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8105a30:	683b      	ldr	r3, [r7, #0]
 8105a32:	031b      	lsls	r3, r3, #12
 8105a34:	b29b      	uxth	r3, r3
 8105a36:	693a      	ldr	r2, [r7, #16]
 8105a38:	4313      	orrs	r3, r2
 8105a3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105a3c:	697b      	ldr	r3, [r7, #20]
 8105a3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8105a42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8105a44:	68bb      	ldr	r3, [r7, #8]
 8105a46:	011b      	lsls	r3, r3, #4
 8105a48:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8105a4c:	697a      	ldr	r2, [r7, #20]
 8105a4e:	4313      	orrs	r3, r2
 8105a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8105a52:	68fb      	ldr	r3, [r7, #12]
 8105a54:	693a      	ldr	r2, [r7, #16]
 8105a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105a58:	68fb      	ldr	r3, [r7, #12]
 8105a5a:	697a      	ldr	r2, [r7, #20]
 8105a5c:	621a      	str	r2, [r3, #32]
}
 8105a5e:	bf00      	nop
 8105a60:	371c      	adds	r7, #28
 8105a62:	46bd      	mov	sp, r7
 8105a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a68:	4770      	bx	lr

08105a6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8105a6a:	b480      	push	{r7}
 8105a6c:	b087      	sub	sp, #28
 8105a6e:	af00      	add	r7, sp, #0
 8105a70:	60f8      	str	r0, [r7, #12]
 8105a72:	60b9      	str	r1, [r7, #8]
 8105a74:	607a      	str	r2, [r7, #4]
 8105a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8105a78:	68fb      	ldr	r3, [r7, #12]
 8105a7a:	6a1b      	ldr	r3, [r3, #32]
 8105a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105a7e:	68fb      	ldr	r3, [r7, #12]
 8105a80:	6a1b      	ldr	r3, [r3, #32]
 8105a82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8105a86:	68fb      	ldr	r3, [r7, #12]
 8105a88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8105a8a:	68fb      	ldr	r3, [r7, #12]
 8105a8c:	69db      	ldr	r3, [r3, #28]
 8105a8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8105a90:	693b      	ldr	r3, [r7, #16]
 8105a92:	f023 0303 	bic.w	r3, r3, #3
 8105a96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8105a98:	693a      	ldr	r2, [r7, #16]
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	4313      	orrs	r3, r2
 8105a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8105aa0:	693b      	ldr	r3, [r7, #16]
 8105aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8105aa6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8105aa8:	683b      	ldr	r3, [r7, #0]
 8105aaa:	011b      	lsls	r3, r3, #4
 8105aac:	b2db      	uxtb	r3, r3
 8105aae:	693a      	ldr	r2, [r7, #16]
 8105ab0:	4313      	orrs	r3, r2
 8105ab2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8105ab4:	697b      	ldr	r3, [r7, #20]
 8105ab6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8105aba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8105abc:	68bb      	ldr	r3, [r7, #8]
 8105abe:	021b      	lsls	r3, r3, #8
 8105ac0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8105ac4:	697a      	ldr	r2, [r7, #20]
 8105ac6:	4313      	orrs	r3, r2
 8105ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8105aca:	68fb      	ldr	r3, [r7, #12]
 8105acc:	693a      	ldr	r2, [r7, #16]
 8105ace:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8105ad0:	68fb      	ldr	r3, [r7, #12]
 8105ad2:	697a      	ldr	r2, [r7, #20]
 8105ad4:	621a      	str	r2, [r3, #32]
}
 8105ad6:	bf00      	nop
 8105ad8:	371c      	adds	r7, #28
 8105ada:	46bd      	mov	sp, r7
 8105adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ae0:	4770      	bx	lr

08105ae2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8105ae2:	b480      	push	{r7}
 8105ae4:	b087      	sub	sp, #28
 8105ae6:	af00      	add	r7, sp, #0
 8105ae8:	60f8      	str	r0, [r7, #12]
 8105aea:	60b9      	str	r1, [r7, #8]
 8105aec:	607a      	str	r2, [r7, #4]
 8105aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8105af0:	68fb      	ldr	r3, [r7, #12]
 8105af2:	6a1b      	ldr	r3, [r3, #32]
 8105af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	6a1b      	ldr	r3, [r3, #32]
 8105afa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8105b02:	68fb      	ldr	r3, [r7, #12]
 8105b04:	69db      	ldr	r3, [r3, #28]
 8105b06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8105b08:	693b      	ldr	r3, [r7, #16]
 8105b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105b0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	021b      	lsls	r3, r3, #8
 8105b14:	693a      	ldr	r2, [r7, #16]
 8105b16:	4313      	orrs	r3, r2
 8105b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8105b1a:	693b      	ldr	r3, [r7, #16]
 8105b1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8105b20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8105b22:	683b      	ldr	r3, [r7, #0]
 8105b24:	031b      	lsls	r3, r3, #12
 8105b26:	b29b      	uxth	r3, r3
 8105b28:	693a      	ldr	r2, [r7, #16]
 8105b2a:	4313      	orrs	r3, r2
 8105b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8105b2e:	697b      	ldr	r3, [r7, #20]
 8105b30:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8105b34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8105b36:	68bb      	ldr	r3, [r7, #8]
 8105b38:	031b      	lsls	r3, r3, #12
 8105b3a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8105b3e:	697a      	ldr	r2, [r7, #20]
 8105b40:	4313      	orrs	r3, r2
 8105b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8105b44:	68fb      	ldr	r3, [r7, #12]
 8105b46:	693a      	ldr	r2, [r7, #16]
 8105b48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8105b4a:	68fb      	ldr	r3, [r7, #12]
 8105b4c:	697a      	ldr	r2, [r7, #20]
 8105b4e:	621a      	str	r2, [r3, #32]
}
 8105b50:	bf00      	nop
 8105b52:	371c      	adds	r7, #28
 8105b54:	46bd      	mov	sp, r7
 8105b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b5a:	4770      	bx	lr

08105b5c <memset>:
 8105b5c:	4402      	add	r2, r0
 8105b5e:	4603      	mov	r3, r0
 8105b60:	4293      	cmp	r3, r2
 8105b62:	d100      	bne.n	8105b66 <memset+0xa>
 8105b64:	4770      	bx	lr
 8105b66:	f803 1b01 	strb.w	r1, [r3], #1
 8105b6a:	e7f9      	b.n	8105b60 <memset+0x4>

08105b6c <__libc_init_array>:
 8105b6c:	b570      	push	{r4, r5, r6, lr}
 8105b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8105ba4 <__libc_init_array+0x38>)
 8105b70:	4c0d      	ldr	r4, [pc, #52]	@ (8105ba8 <__libc_init_array+0x3c>)
 8105b72:	1b64      	subs	r4, r4, r5
 8105b74:	10a4      	asrs	r4, r4, #2
 8105b76:	2600      	movs	r6, #0
 8105b78:	42a6      	cmp	r6, r4
 8105b7a:	d109      	bne.n	8105b90 <__libc_init_array+0x24>
 8105b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8105bac <__libc_init_array+0x40>)
 8105b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8105bb0 <__libc_init_array+0x44>)
 8105b80:	f000 f818 	bl	8105bb4 <_init>
 8105b84:	1b64      	subs	r4, r4, r5
 8105b86:	10a4      	asrs	r4, r4, #2
 8105b88:	2600      	movs	r6, #0
 8105b8a:	42a6      	cmp	r6, r4
 8105b8c:	d105      	bne.n	8105b9a <__libc_init_array+0x2e>
 8105b8e:	bd70      	pop	{r4, r5, r6, pc}
 8105b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8105b94:	4798      	blx	r3
 8105b96:	3601      	adds	r6, #1
 8105b98:	e7ee      	b.n	8105b78 <__libc_init_array+0xc>
 8105b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8105b9e:	4798      	blx	r3
 8105ba0:	3601      	adds	r6, #1
 8105ba2:	e7f2      	b.n	8105b8a <__libc_init_array+0x1e>
 8105ba4:	08105bdc 	.word	0x08105bdc
 8105ba8:	08105bdc 	.word	0x08105bdc
 8105bac:	08105bdc 	.word	0x08105bdc
 8105bb0:	08105be0 	.word	0x08105be0

08105bb4 <_init>:
 8105bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105bb6:	bf00      	nop
 8105bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105bba:	bc08      	pop	{r3}
 8105bbc:	469e      	mov	lr, r3
 8105bbe:	4770      	bx	lr

08105bc0 <_fini>:
 8105bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105bc2:	bf00      	nop
 8105bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105bc6:	bc08      	pop	{r3}
 8105bc8:	469e      	mov	lr, r3
 8105bca:	4770      	bx	lr
