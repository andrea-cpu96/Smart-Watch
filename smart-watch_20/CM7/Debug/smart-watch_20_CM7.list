
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f184  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800f41c  0800f41c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7c4  0800f7c4  00011014  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7c4  0800f7c4  000107c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7cc  0800f7cc  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7cc  0800f7cc  000107cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7d0  0800f7d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  0800f7d4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00071e00  24000014  0800f7e8  00011014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24071e14  0800f7e8  00011e14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023625  00000000  00000000  00011042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f2  00000000  00000000  00034667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00038d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b7  00000000  00000000  0003a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044823  00000000  00000000  0003bab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279e1  00000000  00000000  000802da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a63c1  00000000  00000000  000a7cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024e07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a78  00000000  00000000  0024e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00254b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f404 	.word	0x0800f404

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800f404 	.word	0x0800f404

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b04      	subs	r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e02a      	b.n	8000762 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d11f      	bne.n	800075c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d115      	bne.n	800075c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	3302      	adds	r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d10b      	bne.n	800075c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3303      	adds	r3, #3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3303      	adds	r3, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <__AVI_SearchID+0x68>
            return i;  
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	e007      	b.n	800076c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8d0      	bhi.n	800070c <__AVI_SearchID+0x18>
  }
  return 0;    
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3303      	adds	r3, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	431a      	orrs	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3306      	adds	r3, #6
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3307      	adds	r3, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	4313      	orrs	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8bdb      	ldrh	r3, [r3, #30]
 80007e4:	f246 4263 	movw	r2, #25699	@ 0x6463
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d005      	beq.n	80007f8 <__AVI_GetStreamInfo+0x80>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8bdb      	ldrh	r3, [r3, #30]
 80007f0:	f247 7262 	movw	r2, #30562	@ 0x7762
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d101      	bne.n	80007fc <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80007fc:	230b      	movs	r3, #11
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <__AVI_Init+0x23c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d001      	beq.n	8000834 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 8000830:	2301      	movs	r3, #1
 8000832:	e170      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a84      	ldr	r2, [pc, #528]	@ (8000a4c <__AVI_Init+0x240>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d001      	beq.n	8000842 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800083e:	2302      	movs	r3, #2
 8000840:	e169      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330c      	adds	r3, #12
 8000846:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <__AVI_Init+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d001      	beq.n	800085a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000856:	2303      	movs	r3, #3
 8000858:	e15d      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a54 <__AVI_Init+0x248>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d001      	beq.n	8000868 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000864:	2304      	movs	r3, #4
 8000866:	e156      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a78      	ldr	r2, [pc, #480]	@ (8000a58 <__AVI_Init+0x24c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d001      	beq.n	8000880 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800087c:	2305      	movs	r3, #5
 800087e:	e14a      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	3308      	adds	r3, #8
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80008a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <__AVI_Init+0x244>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d001      	beq.n	80008ae <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e133      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <__AVI_Init+0x250>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 80008b8:	2306      	movs	r3, #6
 80008ba:	e12c      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	330c      	adds	r3, #12
 80008c0:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a66      	ldr	r2, [pc, #408]	@ (8000a60 <__AVI_Init+0x254>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d001      	beq.n	80008d0 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 80008cc:	2307      	movs	r3, #7
 80008ce:	e122      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	@ (8000a64 <__AVI_Init+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <__AVI_Init+0x25c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d001      	beq.n	80008e8 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 80008e4:	230a      	movs	r3, #10
 80008e6:	e116      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <__AVI_Init+0x260>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80008ee:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <__AVI_Init+0x264>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	3314      	adds	r3, #20
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a5b      	ldr	r2, [pc, #364]	@ (8000a74 <__AVI_Init+0x268>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d001      	beq.n	800090e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800090a:	2308      	movs	r3, #8
 800090c:	e103      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3308      	adds	r3, #8
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <__AVI_Init+0x244>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d009      	beq.n	800094c <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	839a      	strh	r2, [r3, #28]
 800094a:	e0b7      	b.n	8000abc <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <__AVI_Init+0x250>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d001      	beq.n	800095a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000956:	2306      	movs	r3, #6
 8000958:	e0dd      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <__AVI_Init+0x254>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d001      	beq.n	800096e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800096a:	2307      	movs	r3, #7
 800096c:	e0d3      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <__AVI_Init+0x26c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d001      	beq.n	800097c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000978:	230a      	movs	r3, #10
 800097a:	e0cc      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	3314      	adds	r3, #20
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <__AVI_Init+0x268>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d001      	beq.n	8000996 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 8000992:	2308      	movs	r3, #8
 8000994:	e0bf      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	895a      	ldrh	r2, [r3, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	891a      	ldrh	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	839a      	strh	r2, [r3, #28]
 80009ae:	e085      	b.n	8000abc <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <__AVI_Init+0x26c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 8080 	bne.w	8000abc <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <__AVI_Init+0x270>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <__AVI_Init+0x274>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3314      	adds	r3, #20
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <__AVI_Init+0x268>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d001      	beq.n	80009e2 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 80009de:	2308      	movs	r3, #8
 80009e0:	e099      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	895a      	ldrh	r2, [r3, #10]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	891a      	ldrh	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	3308      	adds	r3, #8
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <__AVI_Init+0x244>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d001      	beq.n	8000a18 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 8000a14:	2303      	movs	r3, #3
 8000a16:	e07e      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <__AVI_Init+0x250>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d001      	beq.n	8000a26 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 8000a22:	2306      	movs	r3, #6
 8000a24:	e077      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <__AVI_Init+0x254>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d001      	beq.n	8000a3a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 8000a36:	2307      	movs	r3, #7
 8000a38:	e06d      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <__AVI_Init+0x258>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 8000a44:	230a      	movs	r3, #10
 8000a46:	e066      	b.n	8000b16 <__AVI_Init+0x30a>
 8000a48:	46464952 	.word	0x46464952
 8000a4c:	20495641 	.word	0x20495641
 8000a50:	5453494c 	.word	0x5453494c
 8000a54:	6c726468 	.word	0x6c726468
 8000a58:	68697661 	.word	0x68697661
 8000a5c:	6c727473 	.word	0x6c727473
 8000a60:	68727473 	.word	0x68727473
 8000a64:	73646976 	.word	0x73646976
 8000a68:	47504a4d 	.word	0x47504a4d
 8000a6c:	0800f41c 	.word	0x0800f41c
 8000a70:	0800f434 	.word	0x0800f434
 8000a74:	66727473 	.word	0x66727473
 8000a78:	73647561 	.word	0x73647561
 8000a7c:	0800f424 	.word	0x0800f424
 8000a80:	0800f42c 	.word	0x0800f42c
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	3314      	adds	r3, #20
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <__AVI_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d001      	beq.n	8000a9e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	e03b      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <__AVI_Init+0x318>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d001      	beq.n	8000aac <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	e034      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <__AVI_Init+0x31c>)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac2:	f7ff fe17 	bl	80006f4 <__AVI_SearchID>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	e020      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01a      	beq.n	8000b12 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aee:	f7ff fe01 	bl	80006f4 <__AVI_SearchID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000afc:	230b      	movs	r3, #11
 8000afe:	e00a      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3304      	adds	r3, #4
 8000b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	@ 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	66727473 	.word	0x66727473
 8000b24:	47504a4d 	.word	0x47504a4d
 8000b28:	0800f43c 	.word	0x0800f43c

08000b2c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT *pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]

  UINT readSize= 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  

  // Initialize some parameters for the AVI file handler
  pavi->pVideoBuffer = pVideoBuffer;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38
  pavi->pAudioBuffer = pAudioBuffer;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
  
  // Go to the beginning of the file
  f_lseek(file, 0 );
 8000b56:	2100      	movs	r1, #0
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f00e f970 	bl	800ee3e <f_lseek>
  
  // Fill the videoBuffer with the first 96kB of the file
  f_read(file, pavi->pVideoBuffer, VideoBufferSize, &readSize);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f00d ff81 	bl	800ea70 <f_read>

  // Manage the error if present
  if(readSize != VideoBufferSize)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d001      	beq.n	8000b7a <AVI_ParserInit+0x4e>
    return 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e013      	b.n	8000ba2 <AVI_ParserInit+0x76>
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe42 	bl	800080c <__AVI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <AVI_ParserInit+0x66>
    return 1;    
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e007      	b.n	8000ba2 <AVI_ParserInit+0x76>

  // Initialize other parameters for the AVI file handler
  pavi->FileSize= f_size(file);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 8000ba0:	2300      	movs	r3, #0

}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT *pavi, FIL *file)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]

  uint32_t  offset ;
  uint32_t readSize = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  

  if(pavi->CurrentImage== 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d124      	bne.n	8000c0c <AVI_GetFrame+0x60>
  {
    
	// Go to the beginning of the file
    f_lseek(file, 0 );
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f00e f93a 	bl	800ee3e <f_lseek>

    // File the videoBuffer with the first 96kB of file data
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00d ff4a 	bl	800ea70 <f_read>
    
    // Check for "movi" tag
    offset = __AVI_SearchID(pavi->pVideoBuffer, pavi->VideoBufferSize, (uint8_t*)"movi");
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <AVI_GetFrame+0xe4>)
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__AVI_SearchID>
 8000bec:	60f8      	str	r0, [r7, #12]

    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdbc 	bl	8000778 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	330c      	adds	r3, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f00e f919 	bl	800ee3e <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8bdb      	ldrh	r3, [r3, #30]
 8000c18:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d115      	bne.n	8000c4c <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f103 0208 	add.w	r2, r3, #8
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f00d ff1d 	bl	800ea70 <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fd98 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e01c      	b.n	8000c86 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8bdb      	ldrh	r3, [r3, #30]
 8000c50:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d115      	bne.n	8000c84 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f103 0208 	add.w	r2, r3, #8
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f00d ff01 	bl	800ea70 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	4413      	add	r3, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fd7c 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 8000c80:	2302      	movs	r3, #2
 8000c82:	e000      	b.n	8000c86 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800f43c 	.word	0x0800f43c

08000c94 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000caa:	f002 fb13 	bl	80032d4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 8000cae:	e004      	b.n	8000cba <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000cb6:	f002 fb0d 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58022400 	.word	0x58022400

08000cc8 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cde:	f002 faf9 	bl	80032d4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000ce2:	e004      	b.n	8000cee <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cea:	f002 faf3 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58022400 	.word	0x58022400

08000cfc <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d12:	f002 fadf 	bl	80032d4 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000d16:	e004      	b.n	8000d22 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d1e:	f002 fad9 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58022800 	.word	0x58022800

08000d30 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffc4 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ffdb 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa92 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffd3 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffad 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffc4 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa7a 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ffbb 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffde 	bl	8000d5e <GC9A01_write_data>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000db4:	202c      	movs	r0, #44	@ 0x2c
 8000db6:	f7ff ffbb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffce 	bl	8000d5e <GC9A01_write_data>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000dd4:	203c      	movs	r0, #60	@ 0x3c
 8000dd6:	f7ff ffab 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffbe 	bl	8000d5e <GC9A01_write_data>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <GC9A01_init>:

void GC9A01_init(void) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff84 	bl	8000cfc <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f001 fb89 	bl	800250c <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ff4a 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(10);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 fb83 	bl	800250c <HAL_Delay>
    GC9A01_set_reset(ON);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff ff44 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(120);
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f001 fb7d 	bl	800250c <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000e12:	20ef      	movs	r0, #239	@ 0xef
 8000e14:	f7ff ff8c 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e18:	20eb      	movs	r0, #235	@ 0xeb
 8000e1a:	f7ff ff89 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f7ff ffb5 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000e24:	20fe      	movs	r0, #254	@ 0xfe
 8000e26:	f7ff ff83 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000e2a:	20ef      	movs	r0, #239	@ 0xef
 8000e2c:	f7ff ff80 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e30:	20eb      	movs	r0, #235	@ 0xeb
 8000e32:	f7ff ff7d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ffa9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000e3c:	2084      	movs	r0, #132	@ 0x84
 8000e3e:	f7ff ff77 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e42:	2040      	movs	r0, #64	@ 0x40
 8000e44:	f7ff ffa3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000e48:	2085      	movs	r0, #133	@ 0x85
 8000e4a:	f7ff ff71 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	f7ff ff9d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000e54:	2086      	movs	r0, #134	@ 0x86
 8000e56:	f7ff ff6b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	f7ff ff97 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000e60:	2087      	movs	r0, #135	@ 0x87
 8000e62:	f7ff ff65 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e66:	20ff      	movs	r0, #255	@ 0xff
 8000e68:	f7ff ff91 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000e6c:	2088      	movs	r0, #136	@ 0x88
 8000e6e:	f7ff ff5f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff8b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000e78:	2089      	movs	r0, #137	@ 0x89
 8000e7a:	f7ff ff59 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000e7e:	2021      	movs	r0, #33	@ 0x21
 8000e80:	f7ff ff85 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000e84:	208a      	movs	r0, #138	@ 0x8a
 8000e86:	f7ff ff53 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff7f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000e90:	208b      	movs	r0, #139	@ 0x8b
 8000e92:	f7ff ff4d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e96:	2080      	movs	r0, #128	@ 0x80
 8000e98:	f7ff ff79 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000e9c:	208c      	movs	r0, #140	@ 0x8c
 8000e9e:	f7ff ff47 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ff73 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000ea8:	208d      	movs	r0, #141	@ 0x8d
 8000eaa:	f7ff ff41 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff6d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000eb4:	208e      	movs	r0, #142	@ 0x8e
 8000eb6:	f7ff ff3b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000eba:	20ff      	movs	r0, #255	@ 0xff
 8000ebc:	f7ff ff67 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000ec0:	208f      	movs	r0, #143	@ 0x8f
 8000ec2:	f7ff ff35 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	f7ff ff61 	bl	8000d8e <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ecc:	20b6      	movs	r0, #182	@ 0xb6
 8000ece:	f7ff ff2f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff5b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff ff58 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000ede:	2036      	movs	r0, #54	@ 0x36
 8000ee0:	f7ff ff26 	bl	8000d30 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000ee4:	2048      	movs	r0, #72	@ 0x48
 8000ee6:	f7ff ff52 	bl	8000d8e <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000eea:	203a      	movs	r0, #58	@ 0x3a
 8000eec:	f7ff ff20 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f7ff ff4c 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000ef6:	2090      	movs	r0, #144	@ 0x90
 8000ef8:	f7ff ff1a 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff ff46 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f02:	2008      	movs	r0, #8
 8000f04:	f7ff ff43 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f08:	2008      	movs	r0, #8
 8000f0a:	f7ff ff40 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f7ff ff3d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000f14:	20bd      	movs	r0, #189	@ 0xbd
 8000f16:	f7ff ff0b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f7ff ff37 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000f20:	20bc      	movs	r0, #188	@ 0xbc
 8000f22:	f7ff ff05 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ff31 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000f2c:	20ff      	movs	r0, #255	@ 0xff
 8000f2e:	f7ff feff 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f32:	2060      	movs	r0, #96	@ 0x60
 8000f34:	f7ff ff2b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff28 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff25 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000f44:	20c3      	movs	r0, #195	@ 0xc3
 8000f46:	f7ff fef3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f7ff ff1f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000f50:	20c4      	movs	r0, #196	@ 0xc4
 8000f52:	f7ff feed 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f7ff ff19 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000f5c:	20c9      	movs	r0, #201	@ 0xc9
 8000f5e:	f7ff fee7 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f62:	2022      	movs	r0, #34	@ 0x22
 8000f64:	f7ff ff13 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000f68:	20be      	movs	r0, #190	@ 0xbe
 8000f6a:	f7ff fee1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f7ff ff0d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000f74:	20e1      	movs	r0, #225	@ 0xe1
 8000f76:	f7ff fedb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff07 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f7ff ff04 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000f86:	20df      	movs	r0, #223	@ 0xdf
 8000f88:	f7ff fed2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000f8c:	2021      	movs	r0, #33	@ 0x21
 8000f8e:	f7ff fefe 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fefb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fef8 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000f9e:	20f0      	movs	r0, #240	@ 0xf0
 8000fa0:	f7ff fec6 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f7ff fef2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000faa:	2009      	movs	r0, #9
 8000fac:	f7ff feef 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff feec 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff fee9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000fbc:	2026      	movs	r0, #38	@ 0x26
 8000fbe:	f7ff fee6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000fc2:	202a      	movs	r0, #42	@ 0x2a
 8000fc4:	f7ff fee3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000fc8:	20f1      	movs	r0, #241	@ 0xf1
 8000fca:	f7ff feb1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000fce:	2043      	movs	r0, #67	@ 0x43
 8000fd0:	f7ff fedd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000fd4:	2070      	movs	r0, #112	@ 0x70
 8000fd6:	f7ff feda 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000fda:	2072      	movs	r0, #114	@ 0x72
 8000fdc:	f7ff fed7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000fe0:	2036      	movs	r0, #54	@ 0x36
 8000fe2:	f7ff fed4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000fe6:	2037      	movs	r0, #55	@ 0x37
 8000fe8:	f7ff fed1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000fec:	206f      	movs	r0, #111	@ 0x6f
 8000fee:	f7ff fece 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000ff2:	20f2      	movs	r0, #242	@ 0xf2
 8000ff4:	f7ff fe9c 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000ff8:	2045      	movs	r0, #69	@ 0x45
 8000ffa:	f7ff fec8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000ffe:	2009      	movs	r0, #9
 8001000:	f7ff fec5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff fec2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800100a:	2008      	movs	r0, #8
 800100c:	f7ff febf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8001010:	2026      	movs	r0, #38	@ 0x26
 8001012:	f7ff febc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8001016:	202a      	movs	r0, #42	@ 0x2a
 8001018:	f7ff feb9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800101c:	20f3      	movs	r0, #243	@ 0xf3
 800101e:	f7ff fe87 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001022:	2043      	movs	r0, #67	@ 0x43
 8001024:	f7ff feb3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001028:	2070      	movs	r0, #112	@ 0x70
 800102a:	f7ff feb0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800102e:	2072      	movs	r0, #114	@ 0x72
 8001030:	f7ff fead 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8001034:	2036      	movs	r0, #54	@ 0x36
 8001036:	f7ff feaa 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fea7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8001040:	206f      	movs	r0, #111	@ 0x6f
 8001042:	f7ff fea4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8001046:	20ed      	movs	r0, #237	@ 0xed
 8001048:	f7ff fe72 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800104c:	201b      	movs	r0, #27
 800104e:	f7ff fe9e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fe9b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8001058:	20ae      	movs	r0, #174	@ 0xae
 800105a:	f7ff fe69 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800105e:	2077      	movs	r0, #119	@ 0x77
 8001060:	f7ff fe95 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8001064:	20cd      	movs	r0, #205	@ 0xcd
 8001066:	f7ff fe63 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800106a:	2063      	movs	r0, #99	@ 0x63
 800106c:	f7ff fe8f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8001070:	2070      	movs	r0, #112	@ 0x70
 8001072:	f7ff fe5d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fe89 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800107c:	2007      	movs	r0, #7
 800107e:	f7ff fe86 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff fe83 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8001088:	200e      	movs	r0, #14
 800108a:	f7ff fe80 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800108e:	200f      	movs	r0, #15
 8001090:	f7ff fe7d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fe7a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800109a:	2007      	movs	r0, #7
 800109c:	f7ff fe77 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe74 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fe71 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80010ac:	20e8      	movs	r0, #232	@ 0xe8
 80010ae:	f7ff fe3f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80010b2:	2034      	movs	r0, #52	@ 0x34
 80010b4:	f7ff fe6b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80010b8:	2062      	movs	r0, #98	@ 0x62
 80010ba:	f7ff fe39 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80010be:	2018      	movs	r0, #24
 80010c0:	f7ff fe65 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80010c4:	200d      	movs	r0, #13
 80010c6:	f7ff fe62 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ca:	2071      	movs	r0, #113	@ 0x71
 80010cc:	f7ff fe5f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 80010d0:	20ed      	movs	r0, #237	@ 0xed
 80010d2:	f7ff fe5c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010d6:	2070      	movs	r0, #112	@ 0x70
 80010d8:	f7ff fe59 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010dc:	2070      	movs	r0, #112	@ 0x70
 80010de:	f7ff fe56 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f7ff fe53 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f7ff fe50 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ee:	2071      	movs	r0, #113	@ 0x71
 80010f0:	f7ff fe4d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 80010f4:	20ef      	movs	r0, #239	@ 0xef
 80010f6:	f7ff fe4a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010fa:	2070      	movs	r0, #112	@ 0x70
 80010fc:	f7ff fe47 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001100:	2070      	movs	r0, #112	@ 0x70
 8001102:	f7ff fe44 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8001106:	2063      	movs	r0, #99	@ 0x63
 8001108:	f7ff fe12 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800110c:	2018      	movs	r0, #24
 800110e:	f7ff fe3e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8001112:	2011      	movs	r0, #17
 8001114:	f7ff fe3b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001118:	2071      	movs	r0, #113	@ 0x71
 800111a:	f7ff fe38 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800111e:	20f1      	movs	r0, #241	@ 0xf1
 8001120:	f7ff fe35 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001124:	2070      	movs	r0, #112	@ 0x70
 8001126:	f7ff fe32 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800112a:	2070      	movs	r0, #112	@ 0x70
 800112c:	f7ff fe2f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8001130:	2018      	movs	r0, #24
 8001132:	f7ff fe2c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8001136:	2013      	movs	r0, #19
 8001138:	f7ff fe29 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800113c:	2071      	movs	r0, #113	@ 0x71
 800113e:	f7ff fe26 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8001142:	20f3      	movs	r0, #243	@ 0xf3
 8001144:	f7ff fe23 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001148:	2070      	movs	r0, #112	@ 0x70
 800114a:	f7ff fe20 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800114e:	2070      	movs	r0, #112	@ 0x70
 8001150:	f7ff fe1d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f7ff fdeb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800115a:	2028      	movs	r0, #40	@ 0x28
 800115c:	f7ff fe17 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8001160:	2029      	movs	r0, #41	@ 0x29
 8001162:	f7ff fe14 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001166:	20f1      	movs	r0, #241	@ 0xf1
 8001168:	f7ff fe11 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fe0e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001172:	20f1      	movs	r0, #241	@ 0xf1
 8001174:	f7ff fe0b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe08 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800117e:	2007      	movs	r0, #7
 8001180:	f7ff fe05 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8001184:	2066      	movs	r0, #102	@ 0x66
 8001186:	f7ff fdd3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800118a:	203c      	movs	r0, #60	@ 0x3c
 800118c:	f7ff fdff 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fdfc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8001196:	20cd      	movs	r0, #205	@ 0xcd
 8001198:	f7ff fdf9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800119c:	2067      	movs	r0, #103	@ 0x67
 800119e:	f7ff fdf6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a2:	2045      	movs	r0, #69	@ 0x45
 80011a4:	f7ff fdf3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a8:	2045      	movs	r0, #69	@ 0x45
 80011aa:	f7ff fdf0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fded 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fdea 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fde7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fde4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80011c6:	2067      	movs	r0, #103	@ 0x67
 80011c8:	f7ff fdb2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdde 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 80011d2:	203c      	movs	r0, #60	@ 0x3c
 80011d4:	f7ff fddb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fdd8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fdd5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fdd2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fdcf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 80011f0:	2054      	movs	r0, #84	@ 0x54
 80011f2:	f7ff fdcc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff fdc9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f7ff fdc6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8001202:	2098      	movs	r0, #152	@ 0x98
 8001204:	f7ff fdc3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8001208:	2074      	movs	r0, #116	@ 0x74
 800120a:	f7ff fd91 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff fdbd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8001214:	2085      	movs	r0, #133	@ 0x85
 8001216:	f7ff fdba 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	f7ff fdb7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdb4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fdb1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800122c:	204e      	movs	r0, #78	@ 0x4e
 800122e:	f7ff fdae 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fdab 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8001238:	2098      	movs	r0, #152	@ 0x98
 800123a:	f7ff fd79 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800123e:	203e      	movs	r0, #62	@ 0x3e
 8001240:	f7ff fda5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fda2 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800124a:	2035      	movs	r0, #53	@ 0x35
 800124c:	f7ff fd70 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001250:	2021      	movs	r0, #33	@ 0x21
 8001252:	f7ff fd6d 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fd6a 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(120);
 800125c:	2078      	movs	r0, #120	@ 0x78
 800125e:	f001 f955 	bl	800250c <HAL_Delay>
    GC9A01_write_command(0x29);
 8001262:	2029      	movs	r0, #41	@ 0x29
 8001264:	f7ff fd64 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(20);
 8001268:	2014      	movs	r0, #20
 800126a:	f001 f94f 	bl	800250c <HAL_Delay>
    
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <GC9A01_spi_tx+0x30>)
 800128a:	f009 f8df 	bl	800a44c <HAL_SPI_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001294:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
		return;

}
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24070cb0 	.word	0x24070cb0
 80012a8:	24000030 	.word	0x24000030

080012ac <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <JPEG_Decode_DMA+0x5c>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <JPEG_Decode_DMA+0x60>)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <JPEG_Decode_DMA+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 80012cc:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <JPEG_Decode_DMA+0x68>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <JPEG_Decode_DMA+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  //HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
  HAL_JPEG_Decode(hjpeg, (uint8_t *)JPEGSourceAddress, CHUNK_SIZE_IN, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT, HAL_MAX_DELAY);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <JPEG_Decode_DMA+0x5c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <JPEG_Decode_DMA+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f002 f94b 	bl	8003592 <HAL_JPEG_Decode>
  
  return 0;
 80012fc:	2300      	movs	r3, #0
  
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2400003c 	.word	0x2400003c
 800130c:	24000038 	.word	0x24000038
 8001310:	24000044 	.word	0x24000044
 8001314:	24000040 	.word	0x24000040
 8001318:	24000034 	.word	0x24000034

0800131c <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001348:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d218      	bcs.n	8001388 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 8001360:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001370:	d303      	bcc.n	800137a <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e008      	b.n	800138c <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e001      	b.n	800138c <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f002 f9dc 	bl	8003752 <HAL_JPEG_ConfigInputBuffer>
  
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000044 	.word	0x24000044
 80013a8:	24000040 	.word	0x24000040
 80013ac:	2400003c 	.word	0x2400003c

080013b0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013c6:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f002 f9cf 	bl	8003776 <HAL_JPEG_ConfigOutputBuffer>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24000038 	.word	0x24000038

080013e4 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	24000034 	.word	0x24000034

08001404 <lcd_init>:




void lcd_init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8001408:	f000 f94e 	bl	80016a8 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 800140c:	f00d ffc8 	bl	800f3a0 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8001410:	f7ff fceb 	bl	8000dea <GC9A01_init>

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <lcd_process>:


void lcd_process(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	//jpeg_demo();

	mjpeg_demo();
 800141c:	f000 f842 	bl	80014a4 <mjpeg_demo>

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e022      	b.n	800148e <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e016      	b.n	800147c <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d108      	bne.n	8001468 <lcd_draw+0x44>
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d104      	bne.n	8001468 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	6a38      	ldr	r0, [r7, #32]
 8001462:	f7ff fca2 	bl	8000daa <GC9A01_write>
 8001466:	e003      	b.n	8001470 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001468:	2102      	movs	r1, #2
 800146a:	6a38      	ldr	r0, [r7, #32]
 800146c:	f7ff fcad 	bl	8000dca <GC9A01_write_continue>

			}

			data += 2;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	3302      	adds	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	883a      	ldrh	r2, [r7, #0]
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbe2      	blt.n	800144e <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbd6      	blt.n	8001448 <lcd_draw+0x24>

		}

	}

}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <mjpeg_demo>:
uint8_t MJPEG_AudioBuffer[MJPEG_AUD_BUFFER_SIZE];
uint8_t JPEG_OutputBuffer_0[MAX_BUFFER_SIZE];
uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];

void mjpeg_demo(void)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af02      	add	r7, sp, #8
					// RAW buffer 0
	//uint8_t JPEG_OutputBuffer_1[MAX_BUFFER_SIZE]; 				// RAW buffer 1

	uint32_t jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <mjpeg_demo+0x1c4>)
 80014ac:	617b      	str	r3, [r7, #20]
	uint32_t FrameType = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]

	memset(MJPEG_VideoBuffer, 255, MJPEG_VID_BUFFER_SIZE*sizeof(uint8_t));
 80014b2:	f44f 32c0 	mov.w	r2, #98304	@ 0x18000
 80014b6:	21ff      	movs	r1, #255	@ 0xff
 80014b8:	486c      	ldr	r0, [pc, #432]	@ (800166c <mjpeg_demo+0x1c8>)
 80014ba:	f00d ff77 	bl	800f3ac <memset>
	memset(MJPEG_AudioBuffer, 255, MJPEG_AUD_BUFFER_SIZE*sizeof(uint8_t));
 80014be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c2:	21ff      	movs	r1, #255	@ 0xff
 80014c4:	486a      	ldr	r0, [pc, #424]	@ (8001670 <mjpeg_demo+0x1cc>)
 80014c6:	f00d ff71 	bl	800f3ac <memset>
	memset(JPEG_OutputBuffer_0, 255, MAX_BUFFER_SIZE*sizeof(uint8_t));
 80014ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001674 <mjpeg_demo+0x1d0>)
 80014cc:	21ff      	movs	r1, #255	@ 0xff
 80014ce:	4866      	ldr	r0, [pc, #408]	@ (8001668 <mjpeg_demo+0x1c4>)
 80014d0:	f00d ff6c 	bl	800f3ac <memset>

	// Open the MJPEG avi file with read access
    if(f_open(&file, FILE_NAME, FA_READ) == FR_OK)
 80014d4:	2201      	movs	r2, #1
 80014d6:	4968      	ldr	r1, [pc, #416]	@ (8001678 <mjpeg_demo+0x1d4>)
 80014d8:	4868      	ldr	r0, [pc, #416]	@ (800167c <mjpeg_demo+0x1d8>)
 80014da:	f00d f90f 	bl	800e6fc <f_open>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 80bd 	bne.w	8001660 <mjpeg_demo+0x1bc>
    {

    	isfirstFrame = 1; // First frame flag
 80014e6:	4b66      	ldr	r3, [pc, #408]	@ (8001680 <mjpeg_demo+0x1dc>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
    	FrameRate = 0;
 80014ec:	4b65      	ldr	r3, [pc, #404]	@ (8001684 <mjpeg_demo+0x1e0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]

    	// Parse the AVI file Header
    	if(AVI_ParserInit(&AVI_Handel, &file, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 80014f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <mjpeg_demo+0x1cc>)
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8001500:	4a5a      	ldr	r2, [pc, #360]	@ (800166c <mjpeg_demo+0x1c8>)
 8001502:	495e      	ldr	r1, [pc, #376]	@ (800167c <mjpeg_demo+0x1d8>)
 8001504:	4860      	ldr	r0, [pc, #384]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001506:	f7ff fb11 	bl	8000b2c <AVI_ParserInit>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <mjpeg_demo+0x70>
    		while(1);
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <mjpeg_demo+0x6c>

    	// Get current tick to track the frame time
    	startTime = HAL_GetTick();
 8001514:	f000 ffee 	bl	80024f4 <HAL_GetTick>
 8001518:	4603      	mov	r3, r0
 800151a:	4a5c      	ldr	r2, [pc, #368]	@ (800168c <mjpeg_demo+0x1e8>)
 800151c:	6013      	str	r3, [r2, #0]

    	do
    	{

    		FrameType = AVI_GetFrame(&AVI_Handel, &file);
 800151e:	4957      	ldr	r1, [pc, #348]	@ (800167c <mjpeg_demo+0x1d8>)
 8001520:	4859      	ldr	r0, [pc, #356]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001522:	f7ff fb43 	bl	8000bac <AVI_GetFrame>
 8001526:	6138      	str	r0, [r7, #16]

    		if(FrameType == AVI_VIDEO_FRAME)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d15d      	bne.n	80015ea <mjpeg_demo+0x146>
    		{

    			AVI_Handel.CurrentImage ++;
 800152e:	4b56      	ldr	r3, [pc, #344]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	3301      	adds	r3, #1
 8001534:	4a54      	ldr	r2, [pc, #336]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001536:	62d3      	str	r3, [r2, #44]	@ 0x2c

    			// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
    			JPEG_Decode_DMA(&hjpeg,(uint32_t) MJPEG_VideoBuffer ,AVI_Handel.FrameSize, jpegOutDataAdreess );
 8001538:	494c      	ldr	r1, [pc, #304]	@ (800166c <mjpeg_demo+0x1c8>)
 800153a:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <mjpeg_demo+0x1e4>)
 800153c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	4853      	ldr	r0, [pc, #332]	@ (8001690 <mjpeg_demo+0x1ec>)
 8001542:	f7ff feb3 	bl	80012ac <JPEG_Decode_DMA>

    			// Wait till end of JPEG decoding
    			while(Jpeg_HWDecodingEnd == 0);
 8001546:	bf00      	nop
 8001548:	4b52      	ldr	r3, [pc, #328]	@ (8001694 <mjpeg_demo+0x1f0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0fb      	beq.n	8001548 <mjpeg_demo+0xa4>

    			if(isfirstFrame == 1)
 8001550:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <mjpeg_demo+0x1dc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d111      	bne.n	800157c <mjpeg_demo+0xd8>
    			{

    				// First time

    				isfirstFrame = 0;
 8001558:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <mjpeg_demo+0x1dc>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]

    				// Get JPEG Info
    				HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 800155e:	494e      	ldr	r1, [pc, #312]	@ (8001698 <mjpeg_demo+0x1f4>)
 8001560:	484b      	ldr	r0, [pc, #300]	@ (8001690 <mjpeg_demo+0x1ec>)
 8001562:	f001 ff81 	bl	8003468 <HAL_JPEG_GetInfo>

    				// Initialize the DMA2D
    				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001566:	4b4c      	ldr	r3, [pc, #304]	@ (8001698 <mjpeg_demo+0x1f4>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4a4a      	ldr	r2, [pc, #296]	@ (8001698 <mjpeg_demo+0x1f4>)
 800156e:	6892      	ldr	r2, [r2, #8]
 8001570:	b291      	uxth	r1, r2
 8001572:	4a49      	ldr	r2, [pc, #292]	@ (8001698 <mjpeg_demo+0x1f4>)
 8001574:	6852      	ldr	r2, [r2, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f91a 	bl	80017b0 <DMA2D_Init>

    			}


    			// Copy the Decoded frame to the display frame buffer using the DMA2D
    			DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)DECODED_OutputBuffer, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	4b46      	ldr	r3, [pc, #280]	@ (8001698 <mjpeg_demo+0x1f4>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <mjpeg_demo+0x1f4>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4944      	ldr	r1, [pc, #272]	@ (800169c <mjpeg_demo+0x1f8>)
 800158c:	f000 f98c 	bl	80018a8 <DMA2D_CopyBuffer>

    			// Change frame buffer
    			//jpegOutDataAdreess = (jpegOutDataAdreess == (uint32_t)JPEG_OutputBuffer_0) ? (uint32_t)JPEG_OutputBuffer_1 : (uint32_t)JPEG_OutputBuffer_0;
    			jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 8001590:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <mjpeg_demo+0x1c4>)
 8001592:	617b      	str	r3, [r7, #20]

//
    		    uint16_t width = JPEG_Info.ImageWidth;
 8001594:	4b40      	ldr	r3, [pc, #256]	@ (8001698 <mjpeg_demo+0x1f4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	81fb      	strh	r3, [r7, #14]
    			uint16_t height = JPEG_Info.ImageHeight;
 800159a:	4b3f      	ldr	r3, [pc, #252]	@ (8001698 <mjpeg_demo+0x1f4>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	81bb      	strh	r3, [r7, #12]

    		    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 80015a0:	89fb      	ldrh	r3, [r7, #14]
 80015a2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da00      	bge.n	80015ac <mjpeg_demo+0x108>
 80015aa:	3301      	adds	r3, #1
 80015ac:	105b      	asrs	r3, r3, #1
 80015ae:	817b      	strh	r3, [r7, #10]
    		    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 80015b0:	89bb      	ldrh	r3, [r7, #12]
 80015b2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da00      	bge.n	80015bc <mjpeg_demo+0x118>
 80015ba:	3301      	adds	r3, #1
 80015bc:	105b      	asrs	r3, r3, #1
 80015be:	813b      	strh	r3, [r7, #8]

    		    doubleFormat pOut;
    		    pOut.u8Arr = DECODED_OutputBuffer;
 80015c0:	4b36      	ldr	r3, [pc, #216]	@ (800169c <mjpeg_demo+0x1f8>)
 80015c2:	607b      	str	r3, [r7, #4]

    		    depth24To16(&pOut, width*height, 3);
 80015c4:	89fa      	ldrh	r2, [r7, #14]
 80015c6:	89bb      	ldrh	r3, [r7, #12]
 80015c8:	fb12 f303 	smulbb	r3, r2, r3
 80015cc:	b299      	uxth	r1, r3
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2203      	movs	r2, #3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f87e 	bl	80016d4 <depth24To16>

    		    // Display the image
    		    lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	89bc      	ldrh	r4, [r7, #12]
 80015dc:	89fa      	ldrh	r2, [r7, #14]
 80015de:	8939      	ldrh	r1, [r7, #8]
 80015e0:	8978      	ldrh	r0, [r7, #10]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4623      	mov	r3, r4
 80015e6:	f7ff ff1d 	bl	8001424 <lcd_draw>
    		}

#ifdef USE_FRAMERATE_REGULATION

              // Regulate the frame rate to the video native frame rate by inserting delays
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 80015ea:	f000 ff83 	bl	80024f4 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <mjpeg_demo+0x1e8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <mjpeg_demo+0x1e0>)
 8001602:	701a      	strb	r2, [r3, #0]

              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <mjpeg_demo+0x1e0>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <mjpeg_demo+0x1e4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <mjpeg_demo+0x1fc>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001618:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4299      	cmp	r1, r3
 8001620:	d20f      	bcs.n	8001642 <mjpeg_demo+0x19e>
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <mjpeg_demo+0x1fc>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	4a16      	ldr	r2, [pc, #88]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001630:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a13      	ldr	r2, [pc, #76]	@ (8001684 <mjpeg_demo+0x1e0>)
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f000 ff65 	bl	800250c <HAL_Delay>

#endif /* USE_FRAMERATE_REGULATION */

    	}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <mjpeg_demo+0x1e4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	f4ff af67 	bcc.w	800151e <mjpeg_demo+0x7a>

    	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8001650:	2132      	movs	r1, #50	@ 0x32
 8001652:	4814      	ldr	r0, [pc, #80]	@ (80016a4 <mjpeg_demo+0x200>)
 8001654:	f001 f929 	bl	80028aa <HAL_DMA2D_PollForTransfer>


      f_close(&file);
 8001658:	4808      	ldr	r0, [pc, #32]	@ (800167c <mjpeg_demo+0x1d8>)
 800165a:	f00d fbc6 	bl	800edea <f_close>

      while(1);

    }

}
 800165e:	e000      	b.n	8001662 <mjpeg_demo+0x1be>
      while(1);
 8001660:	e7fe      	b.n	8001660 <mjpeg_demo+0x1bc>
}
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	2401c574 	.word	0x2401c574
 800166c:	24000574 	.word	0x24000574
 8001670:	24018574 	.word	0x24018574
 8001674:	0002a300 	.word	0x0002a300
 8001678:	0800f444 	.word	0x0800f444
 800167c:	24000278 	.word	0x24000278
 8001680:	24000008 	.word	0x24000008
 8001684:	2400056c 	.word	0x2400056c
 8001688:	24000524 	.word	0x24000524
 800168c:	24000570 	.word	0x24000570
 8001690:	24070bdc 	.word	0x24070bdc
 8001694:	24000034 	.word	0x24000034
 8001698:	24000510 	.word	0x24000510
 800169c:	24046874 	.word	0x24046874
 80016a0:	10624dd3 	.word	0x10624dd3
 80016a4:	240004a8 	.word	0x240004a8

080016a8 <sd_init>:


// SD

static void sd_init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 80016ac:	2201      	movs	r2, #1
 80016ae:	4905      	ldr	r1, [pc, #20]	@ (80016c4 <sd_init+0x1c>)
 80016b0:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <sd_init+0x20>)
 80016b2:	f00c ffdd 	bl	800e670 <f_mount>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <sd_init+0x18>
    	sd_error_handler();
 80016bc:	f000 f806 	bl	80016cc <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	0800f450 	.word	0x0800f450
 80016c8:	24000048 	.word	0x24000048

080016cc <sd_error_handler>:


static void sd_error_handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

	while(1);
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <sd_error_handler+0x4>

080016d4 <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e054      	b.n	8001794 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	787a      	ldrb	r2, [r7, #1]
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	fb01 f202 	mul.w	r2, r1, r2
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	3301      	adds	r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	3302      	adds	r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 8001724:	7a7b      	ldrb	r3, [r7, #9]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <depth24To16+0xd8>)
 800172c:	4013      	ands	r3, r2
 800172e:	b21a      	sxth	r2, r3
 8001730:	7abb      	ldrb	r3, [r7, #10]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	b21b      	sxth	r3, r3
 8001736:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21a      	sxth	r2, r3
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b219      	sxth	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	b28a      	uxth	r2, r1
 8001758:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	440b      	add	r3, r1
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	b29b      	uxth	r3, r3
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b219      	sxth	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	b28a      	uxth	r2, r1
 800178c:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	dba6      	blt.n	80016ea <depth24To16+0x16>

	}

}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	fffff800 	.word	0xfffff800

080017b0 <DMA2D_Init>:
  * @param  xSize: image width
  * @param  ysize: image Height
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	603a      	str	r2, [r7, #0]
 80017ba:	80fb      	strh	r3, [r7, #6]
 80017bc:	460b      	mov	r3, r1
 80017be:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 80017c0:	2302      	movs	r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]


  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10d      	bne.n	80017ea <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 80017ce:	2302      	movs	r3, #2
 80017d0:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d025      	beq.n	800182c <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f1c3 0310 	rsb	r3, r3, #16
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	e020      	b.n	800182c <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d014      	beq.n	800182c <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f1c3 0308 	rsb	r3, r3, #8
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	e00f      	b.n	800182c <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d10c      	bne.n	800182c <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 8001812:	2301      	movs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f1c3 0310 	rsb	r3, r3, #16
 800182a:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <DMA2D_Init+0xf0>)
 800182e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001832:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001836:	2201      	movs	r2, #1
 8001838:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001840:	461a      	mov	r2, r3
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001844:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <DMA2D_Init+0xf0>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <DMA2D_Init+0xf0>)
 800185a:	2200      	movs	r2, #0
 800185c:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001860:	22ff      	movs	r2, #255	@ 0xff
 8001862:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001866:	220b      	movs	r2, #11
 8001868:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800186a:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <DMA2D_Init+0xf0>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001870:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001878:	2200      	movs	r2, #0
 800187a:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <DMA2D_Init+0xf0>)
 800187e:	2200      	movs	r2, #0
 8001880:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <DMA2D_Init+0xf4>)
 8001886:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <DMA2D_Init+0xf0>)
 800188a:	f000 ff7f 	bl	800278c <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800188e:	2101      	movs	r1, #1
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <DMA2D_Init+0xf0>)
 8001892:	f001 fa03 	bl	8002c9c <HAL_DMA2D_ConfigLayer>

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	240004a8 	.word	0x240004a8
 80018a4:	52001000 	.word	0x52001000

080018a8 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t xsize, uint16_t ysize)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	460b      	mov	r3, r1
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]


  uint16_t x =  ( (LCD_WIDTH - xsize) / 2 );
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <DMA2D_CopyBuffer+0x26>
 80018cc:	3301      	adds	r3, #1
 80018ce:	105b      	asrs	r3, r3, #1
 80018d0:	827b      	strh	r3, [r7, #18]
  uint16_t y = ( (LCD_HEIGHT - ysize) / 2 );
 80018d2:	88bb      	ldrh	r3, [r7, #4]
 80018d4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da00      	bge.n	80018de <DMA2D_CopyBuffer+0x36>
 80018dc:	3301      	adds	r3, #1
 80018de:	105b      	asrs	r3, r3, #1
 80018e0:	823b      	strh	r3, [r7, #16]

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 80018e2:	8a3a      	ldrh	r2, [r7, #16]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	461a      	mov	r2, r3
 80018ee:	8a7b      	ldrh	r3, [r7, #18]
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <DMA2D_CopyBuffer+0x78>)
 800190a:	f000 ffa3 	bl	8002854 <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 800190e:	2119      	movs	r1, #25
 8001910:	4803      	ldr	r0, [pc, #12]	@ (8001920 <DMA2D_CopyBuffer+0x78>)
 8001912:	f000 ffca 	bl	80028aa <HAL_DMA2D_PollForTransfer>

}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	240004a8 	.word	0x240004a8

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800192a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800192e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001930:	bf00      	nop
 8001932:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <main+0xb8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <main+0x24>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	dcf4      	bgt.n	8001932 <main+0xe>
  if ( timeout < 0 )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	da01      	bge.n	8001952 <main+0x2e>
  {
  Error_Handler();
 800194e:	f000 fad3 	bl	8001ef8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001952:	f000 fd49 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001956:	f000 f843 	bl	80019e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800195a:	f000 f8c5 	bl	8001ae8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <main+0xb8>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <main+0xb8>)
 8001966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196e:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <main+0xb8>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800197c:	2000      	movs	r0, #0
 800197e:	f001 fcc3 	bl	8003308 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f001 fcd9 	bl	800333c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800198a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800198e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001990:	bf00      	nop
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <main+0xb8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <main+0x84>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dcf4      	bgt.n	8001992 <main+0x6e>
if ( timeout < 0 )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da01      	bge.n	80019b2 <main+0x8e>
{
Error_Handler();
 80019ae:	f000 faa3 	bl	8001ef8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f000 f9db 	bl	8001d6c <MX_GPIO_Init>
  MX_DMA2D_Init();
 80019b6:	f000 f8c7 	bl	8001b48 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 80019ba:	f000 f913 	bl	8001be4 <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 80019be:	f000 f935 	bl	8001c2c <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80019c2:	f000 f987 	bl	8001cd4 <MX_USART1_UART_Init>
  MX_JPEG_Init();
 80019c6:	f000 f8f9 	bl	8001bbc <MX_JPEG_Init>
  MX_FATFS_Init();
 80019ca:	f00a febd 	bl	800c748 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 80019ce:	f00b f90b 	bl	800cbe8 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80019d2:	f7ff fd17 	bl	8001404 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 80019d6:	f7ff fd1f 	bl	8001418 <lcd_process>
 80019da:	e7fc      	b.n	80019d6 <main+0xb2>
 80019dc:	58024400 	.word	0x58024400

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09c      	sub	sp, #112	@ 0x70
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ea:	224c      	movs	r2, #76	@ 0x4c
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00d fcdc 	bl	800f3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2220      	movs	r2, #32
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00d fcd6 	bl	800f3ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001a00:	2004      	movs	r0, #4
 8001a02:	f003 f9b3 	bl	8004d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <SystemClock_Config+0x100>)
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	4a34      	ldr	r2, [pc, #208]	@ (8001ae0 <SystemClock_Config+0x100>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001a16:	4b32      	ldr	r3, [pc, #200]	@ (8001ae0 <SystemClock_Config+0x100>)
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <SystemClock_Config+0x104>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae4 <SystemClock_Config+0x104>)
 8001a26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <SystemClock_Config+0x104>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a38:	bf00      	nop
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <SystemClock_Config+0x104>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a46:	d1f8      	bne.n	8001a3a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a48:	230a      	movs	r3, #10
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a50:	2340      	movs	r3, #64	@ 0x40
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a60:	2304      	movs	r3, #4
 8001a62:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a64:	230c      	movs	r3, #12
 8001a66:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a74:	230c      	movs	r3, #12
 8001a76:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f9ca 	bl	8004e20 <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a92:	f000 fa31 	bl	8001ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	233f      	movs	r3, #63	@ 0x3f
 8001a98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001aa6:	2340      	movs	r3, #64	@ 0x40
 8001aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001aaa:	2340      	movs	r3, #64	@ 0x40
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ab4:	2340      	movs	r3, #64	@ 0x40
 8001ab6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fe09 	bl	80056d4 <HAL_RCC_ClockConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001ac8:	f000 fa16 	bl	8001ef8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001acc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f003 ffb4 	bl	8005a40 <HAL_RCC_MCOConfig>
}
 8001ad8:	bf00      	nop
 8001ada:	3770      	adds	r7, #112	@ 0x70
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58000400 	.word	0x58000400
 8001ae4:	58024800 	.word	0x58024800

08001ae8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0b2      	sub	sp, #200	@ 0xc8
 8001aec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aee:	463b      	mov	r3, r7
 8001af0:	22c8      	movs	r2, #200	@ 0xc8
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00d fc59 	bl	800f3ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001afa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b06:	2304      	movs	r3, #4
 8001b08:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001b0a:	2309      	movs	r3, #9
 8001b0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b1a:	23c0      	movs	r3, #192	@ 0xc0
 8001b1c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001b22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f9c5 	bl	8005ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001b3c:	f000 f9dc 	bl	8001ef8 <Error_Handler>
  }
}
 8001b40:	bf00      	nop
 8001b42:	37c8      	adds	r7, #200	@ 0xc8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb8 <MX_DMA2D_Init+0x70>)
 8001b50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b8e:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001b90:	f000 fdfc 	bl	800278c <HAL_DMA2D_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b9a:	f000 f9ad 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MX_DMA2D_Init+0x6c>)
 8001ba2:	f001 f87b 	bl	8002c9c <HAL_DMA2D_ConfigLayer>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001bac:	f000 f9a4 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	24070b74 	.word	0x24070b74
 8001bb8:	52001000 	.word	0x52001000

08001bbc <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <MX_JPEG_Init+0x20>)
 8001bc2:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <MX_JPEG_Init+0x24>)
 8001bc4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <MX_JPEG_Init+0x20>)
 8001bc8:	f001 fbcc 	bl	8003364 <HAL_JPEG_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001bd2:	f000 f991 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	24070bdc 	.word	0x24070bdc
 8001be0:	52003000 	.word	0x52003000

08001be4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001bea:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <MX_SDMMC1_SD_Init+0x44>)
 8001bec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001bfc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c00:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_SDMMC1_SD_Init+0x40>)
 8001c10:	f006 fe94 	bl	800893c <HAL_SD_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001c1a:	f000 f96d 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	24070c34 	.word	0x24070c34
 8001c28:	52007000 	.word	0x52007000

08001c2c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c30:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c32:	4a27      	ldr	r2, [pc, #156]	@ (8001cd0 <MX_SPI5_Init+0xa4>)
 8001c34:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c36:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c3c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c44:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c46:	2207      	movs	r2, #7
 8001c48:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c5c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <MX_SPI5_Init+0xa0>)
 8001cba:	f008 faa3 	bl	800a204 <HAL_SPI_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001cc4:	f000 f918 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	24070cb0 	.word	0x24070cb0
 8001cd0:	40015000 	.word	0x40015000

08001cd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cda:	4a23      	ldr	r2, [pc, #140]	@ (8001d68 <MX_USART1_UART_Init+0x94>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d1c:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d1e:	f008 fe6c 	bl	800a9fa <HAL_UART_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d28:	f000 f8e6 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d30:	f009 fe75 	bl	800ba1e <HAL_UARTEx_SetTxFifoThreshold>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d3a:	f000 f8dd 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d42:	f009 feaa 	bl	800ba9a <HAL_UARTEx_SetRxFifoThreshold>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d4c:	f000 f8d4 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d52:	f009 fe2b 	bl	800b9ac <HAL_UARTEx_DisableFifoMode>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d5c:	f000 f8cc 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	24070d38 	.word	0x24070d38
 8001d68:	40011000 	.word	0x40011000

08001d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	4b58      	ldr	r3, [pc, #352]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d88:	4a56      	ldr	r2, [pc, #344]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d92:	4b54      	ldr	r3, [pc, #336]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da0:	4b50      	ldr	r3, [pc, #320]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc4:	4a47      	ldr	r2, [pc, #284]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dce:	4b45      	ldr	r3, [pc, #276]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ddc:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de2:	4a40      	ldr	r2, [pc, #256]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e00:	4a38      	ldr	r2, [pc, #224]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3c:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e46:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <MX_GPIO_Init+0x178>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2102      	movs	r1, #2
 8001e58:	4823      	ldr	r0, [pc, #140]	@ (8001ee8 <MX_GPIO_Init+0x17c>)
 8001e5a:	f001 fa3b 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2161      	movs	r1, #97	@ 0x61
 8001e62:	4822      	ldr	r0, [pc, #136]	@ (8001eec <MX_GPIO_Init+0x180>)
 8001e64:	f001 fa36 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481c      	ldr	r0, [pc, #112]	@ (8001ef0 <MX_GPIO_Init+0x184>)
 8001e7e:	f001 f861 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4815      	ldr	r0, [pc, #84]	@ (8001ef4 <MX_GPIO_Init+0x188>)
 8001ea0:	f001 f850 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <MX_GPIO_Init+0x17c>)
 8001ebc:	f001 f842 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001ec0:	2361      	movs	r3, #97	@ 0x61
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_GPIO_Init+0x180>)
 8001ed8:	f001 f834 	bl	8002f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	@ 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	58022800 	.word	0x58022800
 8001eec:	58022400 	.word	0x58022400
 8001ef0:	58022000 	.word	0x58022000
 8001ef4:	58020000 	.word	0x58020000

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <Error_Handler+0x8>

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_MspInit+0x30>)
 8001f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f10:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_MspInit+0x30>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_MspInit+0x30>)
 8001f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	58024400 	.word	0x58024400

08001f38 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <HAL_DMA2D_MspInit+0x48>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d116      	bne.n	8001f78 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_DMA2D_MspInit+0x4c>)
 8001f4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <HAL_DMA2D_MspInit+0x4c>)
 8001f52:	f043 0310 	orr.w	r3, r3, #16
 8001f56:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_DMA2D_MspInit+0x4c>)
 8001f5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	205a      	movs	r0, #90	@ 0x5a
 8001f6e:	f000 fbd8 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f72:	205a      	movs	r0, #90	@ 0x5a
 8001f74:	f000 fbef 	bl	8002756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	52001000 	.word	0x52001000
 8001f84:	58024400 	.word	0x58024400

08001f88 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <HAL_JPEG_MspInit+0x48>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d116      	bne.n	8001fc8 <HAL_JPEG_MspInit+0x40>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_JPEG_MspInit+0x4c>)
 8001f9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <HAL_JPEG_MspInit+0x4c>)
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_JPEG_MspInit+0x4c>)
 8001fac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2079      	movs	r0, #121	@ 0x79
 8001fbe:	f000 fbb0 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001fc2:	2079      	movs	r0, #121	@ 0x79
 8001fc4:	f000 fbc7 	bl	8002756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	52003000 	.word	0x52003000
 8001fd4:	58024400 	.word	0x58024400

08001fd8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0be      	sub	sp, #248	@ 0xf8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	22c8      	movs	r2, #200	@ 0xc8
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00d f9d7 	bl	800f3ac <memset>
  if(hsd->Instance==SDMMC1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a3c      	ldr	r2, [pc, #240]	@ (80020f4 <HAL_SD_MspInit+0x11c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d171      	bne.n	80020ec <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002008:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002014:	2300      	movs	r3, #0
 8002016:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f003 ff4f 	bl	8005ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002028:	f7ff ff66 	bl	8001ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800202c:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 800202e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002032:	4a31      	ldr	r2, [pc, #196]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800203c:	4b2e      	ldr	r3, [pc, #184]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 800203e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	4a29      	ldr	r2, [pc, #164]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205a:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	4b23      	ldr	r3, [pc, #140]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206e:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <HAL_SD_MspInit+0x120>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8002086:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800208a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80020a0:	230c      	movs	r3, #12
 80020a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4813      	ldr	r0, [pc, #76]	@ (80020fc <HAL_SD_MspInit+0x124>)
 80020ae:	f000 ff49 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80020b2:	2304      	movs	r3, #4
 80020b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80020ca:	230c      	movs	r3, #12
 80020cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020d4:	4619      	mov	r1, r3
 80020d6:	480a      	ldr	r0, [pc, #40]	@ (8002100 <HAL_SD_MspInit+0x128>)
 80020d8:	f000 ff34 	bl	8002f44 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2031      	movs	r0, #49	@ 0x31
 80020e2:	f000 fb1e 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80020e6:	2031      	movs	r0, #49	@ 0x31
 80020e8:	f000 fb35 	bl	8002756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80020ec:	bf00      	nop
 80020ee:	37f8      	adds	r7, #248	@ 0xf8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	52007000 	.word	0x52007000
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58020800 	.word	0x58020800
 8002100:	58020c00 	.word	0x58020c00

08002104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0be      	sub	sp, #248	@ 0xf8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	22c8      	movs	r2, #200	@ 0xc8
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f00d f941 	bl	800f3ac <memset>
  if(hspi->Instance==SPI5)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a39      	ldr	r2, [pc, #228]	@ (8002214 <HAL_SPI_MspInit+0x110>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d16a      	bne.n	800220a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	4618      	mov	r0, r3
 800214c:	f003 feb8 	bl	8005ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002156:	f7ff fecf 	bl	8001ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800215a:	4b2f      	ldr	r3, [pc, #188]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 800215c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002160:	4a2d      	ldr	r2, [pc, #180]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002166:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800216a:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 800216c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217e:	4a26      	ldr	r2, [pc, #152]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 8002180:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002188:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 800219e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <HAL_SPI_MspInit+0x114>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021cc:	2305      	movs	r3, #5
 80021ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4810      	ldr	r0, [pc, #64]	@ (800221c <HAL_SPI_MspInit+0x118>)
 80021da:	f000 feb3 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80021de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021f8:	2305      	movs	r3, #5
 80021fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021fe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002202:	4619      	mov	r1, r3
 8002204:	4806      	ldr	r0, [pc, #24]	@ (8002220 <HAL_SPI_MspInit+0x11c>)
 8002206:	f000 fe9d 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800220a:	bf00      	nop
 800220c:	37f8      	adds	r7, #248	@ 0xf8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40015000 	.word	0x40015000
 8002218:	58024400 	.word	0x58024400
 800221c:	58022800 	.word	0x58022800
 8002220:	58022400 	.word	0x58022400

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0bc      	sub	sp, #240	@ 0xf0
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	22c8      	movs	r2, #200	@ 0xc8
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00d f8b1 	bl	800f3ac <memset>
  if(huart->Instance==USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_UART_MspInit+0xc8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d146      	bne.n	80022e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002254:	f04f 0201 	mov.w	r2, #1
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fe28 	bl	8005ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002276:	f7ff fe3f 	bl	8001ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 800227c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 800228c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229e:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80022b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d0:	2307      	movs	r3, #7
 80022d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_UART_MspInit+0xd0>)
 80022de:	f000 fe31 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80022e2:	bf00      	nop
 80022e4:	37f0      	adds	r7, #240	@ 0xf0
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40011000 	.word	0x40011000
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58020000 	.word	0x58020000

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <NMI_Handler+0x4>

08002300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <MemManage_Handler+0x4>

08002310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <UsageFault_Handler+0x4>

08002320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 f8bd 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <SDMMC1_IRQHandler+0x10>)
 800235e:	f006 fd5d 	bl	8008e1c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	24070c34 	.word	0x24070c34

0800236c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <DMA2D_IRQHandler+0x10>)
 8002372:	f000 fb83 	bl	8002a7c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24070b74 	.word	0x24070b74

08002380 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <JPEG_IRQHandler+0x10>)
 8002386:	f001 fa12 	bl	80037ae <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	24070bdc 	.word	0x24070bdc

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002398:	f7fe f916 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800239e:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b4:	4c0a      	ldr	r4, [pc, #40]	@ (80023e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c2:	f00c fffb 	bl	800f3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7ff faad 	bl	8001924 <main>
  bx  lr
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023d4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80023d8:	0800f7d4 	.word	0x0800f7d4
  ldr r2, =_sbss
 80023dc:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80023e0:	24071e14 	.word	0x24071e14

080023e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC3_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f000 f98c 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f4:	f003 fb8e 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_Init+0x68>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	4913      	ldr	r1, [pc, #76]	@ (8002454 <HAL_Init+0x6c>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_Init+0x68>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <HAL_Init+0x6c>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <HAL_Init+0x70>)
 800242a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800242c:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_Init+0x74>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f814 	bl	8002460 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e002      	b.n	8002448 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002442:	f7ff fd5f 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024400 	.word	0x58024400
 8002454:	0800f498 	.word	0x0800f498
 8002458:	24000004 	.word	0x24000004
 800245c:	24000000 	.word	0x24000000

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_InitTick+0x60>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e021      	b.n	80024b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_InitTick+0x64>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_InitTick+0x60>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f971 	bl	8002772 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f93b 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	@ (80024c8 <HAL_InitTick+0x68>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	24000010 	.word	0x24000010
 80024c4:	24000000 	.word	0x24000000
 80024c8:	2400000c 	.word	0x2400000c

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	24000010 	.word	0x24000010
 80024f0:	24070dcc 	.word	0x24070dcc

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	24070dcc 	.word	0x24070dcc

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24000010 	.word	0x24000010

08002554 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002558:	4b03      	ldr	r3, [pc, #12]	@ (8002568 <HAL_GetREVID+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0c1b      	lsrs	r3, r3, #16
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	5c001000 	.word	0x5c001000

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <__NVIC_SetPriorityGrouping+0x40>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <__NVIC_SetPriorityGrouping+0x40>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00
 80025b0:	05fa0000 	.word	0x05fa0000

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	@ (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	@ (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	@ (800265c <__NVIC_SetPriority+0x50>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	@ 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff40 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff90 	bl	8002660 <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5f 	bl	800260c <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff33 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa4 	bl	80026c8 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e04f      	b.n	800283e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fbc0 	bl	8001f38 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <HAL_DMA2D_Init+0xbc>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6851      	ldr	r1, [r2, #4]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	69d2      	ldr	r2, [r2, #28]
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e2:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <HAL_DMA2D_Init+0xc0>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6891      	ldr	r1, [r2, #8]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6992      	ldr	r2, [r2, #24]
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HAL_DMA2D_Init+0xc4>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d1      	ldr	r1, [r2, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	430b      	orrs	r3, r1
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002814:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	051a      	lsls	r2, r3, #20
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	055b      	lsls	r3, r3, #21
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	fff8ffbf 	.word	0xfff8ffbf
 800284c:	fffffef8 	.word	0xfffffef8
 8002850:	ffff0000 	.word	0xffff0000

08002854 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DMA2D_Start+0x1c>
 800286c:	2302      	movs	r3, #2
 800286e:	e018      	b.n	80028a2 <HAL_DMA2D_Start+0x4e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fab4 	bl	8002df8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d056      	beq.n	8002974 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80028c6:	f7ff fe15 	bl	80024f4 <HAL_GetTick>
 80028ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80028cc:	e04b      	b.n	8002966 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d023      	beq.n	8002928 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2221      	movs	r2, #33	@ 0x21
 8002912:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0a5      	b.n	8002a74 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d01a      	beq.n	8002966 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7ff fde0 	bl	80024f4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d302      	bcc.n	8002946 <HAL_DMA2D_PollForTransfer+0x9c>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e086      	b.n	8002a74 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ac      	beq.n	80028ce <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d061      	beq.n	8002a5a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002996:	f7ff fdad 	bl	80024f4 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800299c:	e056      	b.n	8002a4c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02e      	beq.n	8002a0e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d4:	f043 0202 	orr.w	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2229      	movs	r2, #41	@ 0x29
 80029f8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e032      	b.n	8002a74 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d01a      	beq.n	8002a4c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7ff fd6d 	bl	80024f4 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <HAL_DMA2D_PollForTransfer+0x182>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e013      	b.n	8002a74 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0a1      	beq.n	800299e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2212      	movs	r2, #18
 8002a60:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d026      	beq.n	8002aec <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d021      	beq.n	8002aec <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d026      	beq.n	8002b44 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d021      	beq.n	8002b44 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b1c:	f043 0202 	orr.w	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2204      	movs	r2, #4
 8002b28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d026      	beq.n	8002b9c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d021      	beq.n	8002b9c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f853 	bl	8002c74 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d024      	beq.n	8002c22 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01f      	beq.n	8002c22 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01f      	beq.n	8002c6c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01a      	beq.n	8002c6c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c44:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f80e 	bl	8002c88 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_DMA2D_ConfigLayer+0x24>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e092      	b.n	8002de6 <HAL_DMA2D_ConfigLayer+0x14a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	3328      	adds	r3, #40	@ 0x28
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cf4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002d00:	4b3c      	ldr	r3, [pc, #240]	@ (8002df4 <HAL_DMA2D_ConfigLayer+0x158>)
 8002d02:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b0a      	cmp	r3, #10
 8002d0a:	d003      	beq.n	8002d14 <HAL_DMA2D_ConfigLayer+0x78>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e005      	b.n	8002d30 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d120      	bne.n	8002d78 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	ea02 0103 	and.w	r1, r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b0a      	cmp	r3, #10
 8002d5e:	d003      	beq.n	8002d68 <HAL_DMA2D_ConfigLayer+0xcc>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b09      	cmp	r3, #9
 8002d66:	d135      	bne.n	8002dd4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d76:	e02d      	b.n	8002dd4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b0b      	cmp	r3, #11
 8002d7e:	d109      	bne.n	8002d94 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	049b      	lsls	r3, r3, #18
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002d92:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	ea02 0103 	and.w	r1, r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d003      	beq.n	8002dc6 <HAL_DMA2D_ConfigLayer+0x12a>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d106      	bne.n	8002dd4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002dd2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	ff33000f 	.word	0xff33000f

08002df8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b08b      	sub	sp, #44	@ 0x2c
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	041a      	lsls	r2, r3, #16
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e30:	d174      	bne.n	8002f1c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e38:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e40:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002e48:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e68:	e053      	b.n	8002f12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7e:	e048      	b.n	8002f12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d111      	bne.n	8002eac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	0cdb      	lsrs	r3, r3, #19
 8002e8c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	0a9b      	lsrs	r3, r3, #10
 8002e92:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	02db      	lsls	r3, r3, #11
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eaa:	e032      	b.n	8002f12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d117      	bne.n	8002ee4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	0fdb      	lsrs	r3, r3, #31
 8002eb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	0cdb      	lsrs	r3, r3, #19
 8002ebe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	0adb      	lsrs	r3, r3, #11
 8002ec4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	029b      	lsls	r3, r3, #10
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	03db      	lsls	r3, r3, #15
 8002eda:	4313      	orrs	r3, r2
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	e016      	b.n	8002f12 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	0f1b      	lsrs	r3, r3, #28
 8002ee8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	0d1b      	lsrs	r3, r3, #20
 8002eee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	0b1b      	lsrs	r3, r3, #12
 8002ef4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	011a      	lsls	r2, r3, #4
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	431a      	orrs	r2, r3
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	031b      	lsls	r3, r3, #12
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f18:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f1a:	e00d      	b.n	8002f38 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f24:	d104      	bne.n	8002f30 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	e003      	b.n	8002f38 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	372c      	adds	r7, #44	@ 0x2c
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	@ 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f52:	4b89      	ldr	r3, [pc, #548]	@ (8003178 <HAL_GPIO_Init+0x234>)
 8002f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f56:	e194      	b.n	8003282 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8186 	beq.w	800327c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d005      	beq.n	8002f88 <HAL_GPIO_Init+0x44>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d130      	bne.n	8002fea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0201 	and.w	r2, r3, #1
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d017      	beq.n	8003026 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d123      	bne.n	800307a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	220f      	movs	r2, #15
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	69b9      	ldr	r1, [r7, #24]
 8003076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0203 	and.w	r2, r3, #3
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80e0 	beq.w	800327c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030bc:	4b2f      	ldr	r3, [pc, #188]	@ (800317c <HAL_GPIO_Init+0x238>)
 80030be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030c2:	4a2e      	ldr	r2, [pc, #184]	@ (800317c <HAL_GPIO_Init+0x238>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80030cc:	4b2b      	ldr	r3, [pc, #172]	@ (800317c <HAL_GPIO_Init+0x238>)
 80030ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030da:	4a29      	ldr	r2, [pc, #164]	@ (8003180 <HAL_GPIO_Init+0x23c>)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	3302      	adds	r3, #2
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a20      	ldr	r2, [pc, #128]	@ (8003184 <HAL_GPIO_Init+0x240>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d052      	beq.n	80031ac <HAL_GPIO_Init+0x268>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1f      	ldr	r2, [pc, #124]	@ (8003188 <HAL_GPIO_Init+0x244>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d031      	beq.n	8003172 <HAL_GPIO_Init+0x22e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_GPIO_Init+0x248>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d02b      	beq.n	800316e <HAL_GPIO_Init+0x22a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <HAL_GPIO_Init+0x24c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d025      	beq.n	800316a <HAL_GPIO_Init+0x226>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <HAL_GPIO_Init+0x250>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01f      	beq.n	8003166 <HAL_GPIO_Init+0x222>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <HAL_GPIO_Init+0x254>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d019      	beq.n	8003162 <HAL_GPIO_Init+0x21e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1a      	ldr	r2, [pc, #104]	@ (800319c <HAL_GPIO_Init+0x258>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_GPIO_Init+0x21a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <HAL_GPIO_Init+0x25c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00d      	beq.n	800315a <HAL_GPIO_Init+0x216>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_GPIO_Init+0x260>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <HAL_GPIO_Init+0x212>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_GPIO_Init+0x264>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_GPIO_Init+0x20e>
 800314e:	2309      	movs	r3, #9
 8003150:	e02d      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 8003152:	230a      	movs	r3, #10
 8003154:	e02b      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 8003156:	2308      	movs	r3, #8
 8003158:	e029      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 800315a:	2307      	movs	r3, #7
 800315c:	e027      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 800315e:	2306      	movs	r3, #6
 8003160:	e025      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 8003162:	2305      	movs	r3, #5
 8003164:	e023      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 8003166:	2304      	movs	r3, #4
 8003168:	e021      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 800316a:	2303      	movs	r3, #3
 800316c:	e01f      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 800316e:	2302      	movs	r3, #2
 8003170:	e01d      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 8003172:	2301      	movs	r3, #1
 8003174:	e01b      	b.n	80031ae <HAL_GPIO_Init+0x26a>
 8003176:	bf00      	nop
 8003178:	58000080 	.word	0x58000080
 800317c:	58024400 	.word	0x58024400
 8003180:	58000400 	.word	0x58000400
 8003184:	58020000 	.word	0x58020000
 8003188:	58020400 	.word	0x58020400
 800318c:	58020800 	.word	0x58020800
 8003190:	58020c00 	.word	0x58020c00
 8003194:	58021000 	.word	0x58021000
 8003198:	58021400 	.word	0x58021400
 800319c:	58021800 	.word	0x58021800
 80031a0:	58021c00 	.word	0x58021c00
 80031a4:	58022000 	.word	0x58022000
 80031a8:	58022400 	.word	0x58022400
 80031ac:	2300      	movs	r3, #0
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	f002 0203 	and.w	r2, r2, #3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	4093      	lsls	r3, r2
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031be:	4938      	ldr	r1, [pc, #224]	@ (80032a0 <HAL_GPIO_Init+0x35c>)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f ae63 	bne.w	8002f58 <HAL_GPIO_Init+0x14>
  }
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	3724      	adds	r7, #36	@ 0x24
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	58000400 	.word	0x58000400

080032a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e001      	b.n	80032c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032f0:	e003      	b.n	80032fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003310:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <HAL_HSEM_FastTake+0x2c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3320      	adds	r3, #32
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	4a07      	ldr	r2, [pc, #28]	@ (8003338 <HAL_HSEM_FastTake+0x30>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	58026400 	.word	0x58026400
 8003338:	80000300 	.word	0x80000300

0800333c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003346:	4906      	ldr	r1, [pc, #24]	@ (8003360 <HAL_HSEM_Release+0x24>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	58026400 	.word	0x58026400

08003364 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e070      	b.n	8003458 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe fdfc 	bl	8001f88 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80033f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a19      	ldr	r2, [pc, #100]	@ (8003460 <HAL_JPEG_Init+0xfc>)
 80033fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a18      	ldr	r2, [pc, #96]	@ (8003464 <HAL_JPEG_Init+0x100>)
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fd01 	bl	8003e18 <JPEG_Set_HuffEnc_Mem>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e018      	b.n	8003458 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003434:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	0800f688 	.word	0x0800f688
 8003464:	0800f6c8 	.word	0x0800f6c8

08003468 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_JPEG_GetInfo+0x16>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e083      	b.n	800358a <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d103      	bne.n	8003498 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2210      	movs	r2, #16
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e017      	b.n	80034c8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e00c      	b.n	80034c8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d103      	bne.n	80034c4 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2230      	movs	r2, #48	@ 0x30
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e001      	b.n	80034c8 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e060      	b.n	800358a <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	b29a      	uxth	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d003      	beq.n	80034f4 <HAL_JPEG_GetInfo+0x8c>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b30      	cmp	r3, #48	@ 0x30
 80034f2:	d140      	bne.n	8003576 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d109      	bne.n	8003538 <HAL_JPEG_GetInfo+0xd0>
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_JPEG_GetInfo+0xd0>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2202      	movs	r2, #2
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e01d      	b.n	8003574 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_JPEG_GetInfo+0xea>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_JPEG_GetInfo+0xea>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2200      	movs	r2, #0
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	e010      	b.n	8003574 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d109      	bne.n	800356c <HAL_JPEG_GetInfo+0x104>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_JPEG_GetInfo+0x104>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	e003      	b.n	8003574 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003572:	e003      	b.n	800357c <HAL_JPEG_GetInfo+0x114>
 8003574:	e002      	b.n	800357c <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f001 fb6f 	bl	8004c60 <JPEG_GetQuality>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_JPEG_Decode+0x20>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_JPEG_Decode+0x20>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e071      	b.n	800369a <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_JPEG_Decode+0x32>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e06a      	b.n	800369a <HAL_JPEG_Decode+0x108>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 80035cc:	f7fe ff92 	bl	80024f4 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d158      	bne.n	8003690 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2204      	movs	r2, #4
 80035e2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f023 020f 	bic.w	r2, r3, #15
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f6:	f043 0206 	orr.w	r2, r3, #6
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fe76 	bl	800431c <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8003630:	e01e      	b.n	8003670 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d01a      	beq.n	8003670 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800363a:	f7fe ff5b 	bl	80024f4 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <HAL_JPEG_Decode+0xbe>
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	f043 0208 	orr.w	r2, r3, #8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e014      	b.n	800369a <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fec7 	bl	8004404 <JPEG_Process>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0da      	beq.n	8003632 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e004      	b.n	800369a <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d116      	bne.n	80036ea <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d033      	beq.n	8003744 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80036e8:	e02c      	b.n	8003744 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d126      	bne.n	8003744 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f043 0306 	orr.w	r3, r3, #6
 8003712:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003730:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43da      	mvns	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	400a      	ands	r2, r1
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3b03      	subs	r3, #3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d813      	bhi.n	80037ec <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d103      	bne.n	80037d8 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fe17 	bl	8004404 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80037d6:	e00b      	b.n	80037f0 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d105      	bne.n	80037f0 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 f8bc 	bl	8004962 <JPEG_DMA_ContinueProcess>
      break;
 80037ea:	e001      	b.n	80037f0 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_JPEG_IRQHandler+0x44>
      break;
 80037f0:	bf00      	nop
  }
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b08b      	sub	sp, #44	@ 0x2c
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e020      	b.n	8003854 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	4413      	add	r3, r2
 8003822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003826:	d90f      	bls.n	8003848 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e055      	b.n	80038d8 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	440b      	add	r3, r1
 8003836:	3201      	adds	r2, #1
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]
      p++;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	3301      	adds	r3, #1
 8003840:	623b      	str	r3, [r7, #32]
      i--;
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	3b01      	subs	r3, #1
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	d9db      	bls.n	8003812 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	4413      	add	r3, r2
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6a3a      	ldr	r2, [r7, #32]
 8003868:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
  p = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8003878:	e027      	b.n	80038ca <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	601a      	str	r2, [r3, #0]
      p++;
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	3301      	adds	r3, #1
 800388a:	623b      	str	r3, [r7, #32]
      code++;
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3301      	adds	r3, #1
 8003890:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	4413      	add	r3, r2
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4293      	cmp	r3, r2
 80038a0:	d0eb      	beq.n	800387a <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b1f      	cmp	r3, #31
 80038a6:	d901      	bls.n	80038ac <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e015      	b.n	80038d8 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80038ac:	2201      	movs	r2, #1
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d301      	bcc.n	80038be <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00c      	b.n	80038d8 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	61bb      	str	r3, [r7, #24]
    si++;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3301      	adds	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1dd      	bne.n	8003892 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	372c      	adds	r7, #44	@ 0x2c
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80038f0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80038f4:	6018      	str	r0, [r3, #0]
 80038f6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80038fa:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80038fe:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003900:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003904:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	f107 020c 	add.w	r2, r7, #12
 8003912:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8003916:	f7ff ff70 	bl	80037fa <JPEG_Bits_To_SizeCodes>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8003920:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003928:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800392c:	e075      	b.n	8003a1a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8003934:	e067      	b.n	8003a06 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8003936:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800393a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003944:	4413      	add	r3, r2
 8003946:	3310      	adds	r3, #16
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800394e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8003956:	23a0      	movs	r3, #160	@ 0xa0
 8003958:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800395c:	e021      	b.n	80039a2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800395e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003962:	2bf0      	cmp	r3, #240	@ 0xf0
 8003964:	d103      	bne.n	800396e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8003966:	23a1      	movs	r3, #161	@ 0xa1
 8003968:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800396c:	e019      	b.n	80039a2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800396e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800397c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8003988:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	461a      	mov	r2, r3
 8003996:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800399a:	4413      	add	r3, r2
 800399c:	3b01      	subs	r3, #1
 800399e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80039a2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80039a6:	2ba1      	cmp	r3, #161	@ 0xa1
 80039a8:	d901      	bls.n	80039ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80039aa:	2301      	movs	r3, #1
 80039ac:	e035      	b.n	8003a1a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80039ae:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039b2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80039b6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80039ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039be:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039c2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80039cc:	3328      	adds	r3, #40	@ 0x28
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80039d4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039d8:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80039dc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b2d9      	uxtb	r1, r3
 80039e8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039ec:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80039f6:	4413      	add	r3, r2
 80039f8:	460a      	mov	r2, r1
 80039fa:	701a      	strb	r2, [r3, #0]
      k++;
 80039fc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003a00:	3301      	adds	r3, #1
 8003a02:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8003a06:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a0a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d38e      	bcc.n	8003936 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a30:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003a34:	6018      	str	r0, [r3, #0]
 8003a36:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a3a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003a3e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003a40:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a44:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003a4e:	f107 0208 	add.w	r2, r7, #8
 8003a52:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8003a56:	f7ff fed0 	bl	80037fa <JPEG_Bits_To_SizeCodes>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8003a60:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003a68:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003a6c:	e048      	b.n	8003b00 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8003a74:	e03d      	b.n	8003af2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8003a76:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a7a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003a84:	4413      	add	r3, r2
 8003a86:	3310      	adds	r3, #16
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8003a8e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a92:	2b0b      	cmp	r3, #11
 8003a94:	d901      	bls.n	8003a9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003a96:	2301      	movs	r3, #1
 8003a98:	e032      	b.n	8003b00 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003a9a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a9e:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8003aa2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003aaa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003aae:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003ab8:	3302      	adds	r3, #2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003ac0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003ac4:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003ac8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b2d9      	uxtb	r1, r3
 8003ad4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003ad8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003ae2:	4413      	add	r3, r2
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
      k++;
 8003ae8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003aec:	3301      	adds	r3, #1
 8003aee:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8003af2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003af6:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3bb      	bcc.n	8003a76 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b09a      	sub	sp, #104	@ 0x68
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d106      	bne.n	8003b32 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003b2c:	3318      	adds	r3, #24
 8003b2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b30:	e00f      	b.n	8003b52 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d106      	bne.n	8003b4e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003b48:	3318      	adds	r3, #24
 8003b4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b4c:	e001      	b.n	8003b52 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e059      	b.n	8003c06 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d055      	beq.n	8003c04 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7ff ff60 	bl	8003a24 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8003b72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003b76:	e046      	b.n	8003c06 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8003b78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b7e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003b82:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b86:	3304      	adds	r3, #4
 8003b88:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b8c:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003b90:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8003b92:	230c      	movs	r3, #12
 8003b94:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8003b96:	e032      	b.n	8003bfe <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8003b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8003b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ba0:	3b04      	subs	r3, #4
 8003ba2:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003ba4:	f107 0214 	add.w	r2, r7, #20
 8003ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	3368      	adds	r3, #104	@ 0x68
 8003bbc:	443b      	add	r3, r7
 8003bbe:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003bce:	f107 0214 	add.w	r2, r7, #20
 8003bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003be0:	3302      	adds	r3, #2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	3368      	adds	r3, #104	@ 0x68
 8003be6:	443b      	add	r3, r7
 8003be8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf4:	041a      	lsls	r2, r3, #16
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bfc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003bfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d8c9      	bhi.n	8003b98 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3768      	adds	r7, #104	@ 0x68
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c1c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003c20:	6018      	str	r0, [r3, #0]
 8003c22:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c26:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003c2a:	6019      	str	r1, [r3, #0]
 8003c2c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c30:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003c34:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003c36:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c3a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c46:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003c4a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d10c      	bne.n	8003c6e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003c54:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c58:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c64:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003c68:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003c6c:	e01d      	b.n	8003caa <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003c6e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c72:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003c7e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003c82:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d10c      	bne.n	8003ca6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003c8c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c90:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003c9c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003ca0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003ca4:	e001      	b.n	8003caa <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0a8      	b.n	8003dfc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8003caa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cae:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a0 	beq.w	8003dfa <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003cba:	f107 0214 	add.w	r2, r7, #20
 8003cbe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cc2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f7ff fe0b 	bl	80038e4 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003cd4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003cdc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003ce0:	e08c      	b.n	8003dfc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003ce2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003ce6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003cf0:	e00e      	b.n	8003d10 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8003cf2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003cf6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003cfa:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003cfc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d00:	3304      	adds	r3, #4
 8003d02:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003d06:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003d10:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d9ec      	bls.n	8003cf2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003d18:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e08 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003d1e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003d20:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d24:	3304      	adds	r3, #4
 8003d26:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003d2a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d2e:	4a37      	ldr	r2, [pc, #220]	@ (8003e0c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003d30:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003d32:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d36:	3304      	adds	r3, #4
 8003d38:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003d3c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d40:	4a33      	ldr	r2, [pc, #204]	@ (8003e10 <JPEG_Set_HuffAC_Mem+0x200>)
 8003d42:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003d44:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d48:	3304      	adds	r3, #4
 8003d4a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003d4e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d52:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <JPEG_Set_HuffAC_Mem+0x204>)
 8003d54:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003d56:	23a2      	movs	r3, #162	@ 0xa2
 8003d58:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003d5c:	e049      	b.n	8003df2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003d5e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003d68:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003d6c:	3b04      	subs	r3, #4
 8003d6e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003d72:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d76:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003d7a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d7e:	4413      	add	r3, r2
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003d88:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d8c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003d90:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d94:	3328      	adds	r3, #40	@ 0x28
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8003da4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003da8:	3b01      	subs	r3, #1
 8003daa:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003dae:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003db2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003db6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dba:	4413      	add	r3, r2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003dc4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003dc8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003dcc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dd0:	3328      	adds	r3, #40	@ 0x28
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003de0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003de4:	041a      	lsls	r2, r3, #16
 8003de6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003dea:	431a      	orrs	r2, r3
 8003dec:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003df0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003df2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d8b1      	bhi.n	8003d5e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	0fd10fd0 	.word	0x0fd10fd0
 8003e0c:	0fd30fd2 	.word	0x0fd30fd2
 8003e10:	0fd50fd4 	.word	0x0fd50fd4
 8003e14:	0fd70fd6 	.word	0x0fd70fd6

08003e18 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f84d 	bl	8003ec0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003e2e:	461a      	mov	r2, r3
 8003e30:	491f      	ldr	r1, [pc, #124]	@ (8003eb0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff feec 	bl	8003c10 <JPEG_Set_HuffAC_Mem>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	e030      	b.n	8003ea8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4918      	ldr	r1, [pc, #96]	@ (8003eb4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fedc 	bl	8003c10 <JPEG_Set_HuffAC_Mem>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	e020      	b.n	8003ea8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4911      	ldr	r1, [pc, #68]	@ (8003eb8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fe49 	bl	8003b0a <JPEG_Set_HuffDC_Mem>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	e010      	b.n	8003ea8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003e8e:	461a      	mov	r2, r3
 8003e90:	490a      	ldr	r1, [pc, #40]	@ (8003ebc <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe39 	bl	8003b0a <JPEG_Set_HuffDC_Mem>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	e000      	b.n	8003ea8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	0800f4e0 	.word	0x0800f4e0
 8003eb4:	0800f594 	.word	0x0800f594
 8003eb8:	0800f4a8 	.word	0x0800f4a8
 8003ebc:	0800f4c4 	.word	0x0800f4c4

08003ec0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b08b      	sub	sp, #44	@ 0x2c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <JPEG_Set_Huff_DHTMem+0x20c>)
 8003eca:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003ecc:	4b80      	ldr	r3, [pc, #512]	@ (80040d0 <JPEG_Set_Huff_DHTMem+0x210>)
 8003ece:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003ed0:	4b80      	ldr	r3, [pc, #512]	@ (80040d4 <JPEG_Set_Huff_DHTMem+0x214>)
 8003ed2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003ed4:	4b80      	ldr	r3, [pc, #512]	@ (80040d8 <JPEG_Set_Huff_DHTMem+0x218>)
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	623b      	str	r3, [r7, #32]
  index = 16;
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003ee8:	e01d      	b.n	8003f26 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	3b01      	subs	r3, #1
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
 8003ef2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	3b02      	subs	r3, #2
 8003ef8:	6979      	ldr	r1, [r7, #20]
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003efe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	3b03      	subs	r3, #3
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003f0a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0e:	3a04      	subs	r2, #4
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003f14:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	601a      	str	r2, [r3, #0]
    address--;
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	3b04      	subs	r3, #4
 8003f1e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	3b04      	subs	r3, #4
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d8de      	bhi.n	8003eea <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f34:	3318      	adds	r3, #24
 8003f36:	623b      	str	r3, [r7, #32]
  index = 12;
 8003f38:	230c      	movs	r3, #12
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f3c:	e021      	b.n	8003f82 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	3b01      	subs	r3, #1
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4413      	add	r3, r2
 8003f46:	7c1b      	ldrb	r3, [r3, #16]
 8003f48:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	3b02      	subs	r3, #2
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	440b      	add	r3, r1
 8003f52:	7c1b      	ldrb	r3, [r3, #16]
 8003f54:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003f56:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	3b03      	subs	r3, #3
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	440b      	add	r3, r1
 8003f60:	7c1b      	ldrb	r3, [r3, #16]
 8003f62:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003f64:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8003f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f68:	3a04      	subs	r2, #4
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003f70:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	601a      	str	r2, [r3, #0]
    address--;
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	3b04      	subs	r3, #4
 8003f7a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	3b04      	subs	r3, #4
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d8da      	bhi.n	8003f3e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f90:	3328      	adds	r3, #40	@ 0x28
 8003f92:	623b      	str	r3, [r7, #32]
  index = 16;
 8003f94:	2310      	movs	r3, #16
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f98:	e01d      	b.n	8003fd6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	3b02      	subs	r3, #2
 8003fa8:	69f9      	ldr	r1, [r7, #28]
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	3b03      	subs	r3, #3
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbe:	3a04      	subs	r2, #4
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fc4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	601a      	str	r2, [r3, #0]
    address--;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	3b04      	subs	r3, #4
 8003fce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d8de      	bhi.n	8003f9a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003fe4:	33cc      	adds	r3, #204	@ 0xcc
 8003fe6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <JPEG_Set_Huff_DHTMem+0x21c>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	3b04      	subs	r3, #4
 8004012:	623b      	str	r3, [r7, #32]
  index = 160;
 8004014:	23a0      	movs	r3, #160	@ 0xa0
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004018:	e021      	b.n	800405e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	3b01      	subs	r3, #1
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	7c1b      	ldrb	r3, [r3, #16]
 8004024:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	3b02      	subs	r3, #2
 800402a:	69f9      	ldr	r1, [r7, #28]
 800402c:	440b      	add	r3, r1
 800402e:	7c1b      	ldrb	r3, [r3, #16]
 8004030:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004032:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	3b03      	subs	r3, #3
 8004038:	69f9      	ldr	r1, [r7, #28]
 800403a:	440b      	add	r3, r1
 800403c:	7c1b      	ldrb	r3, [r3, #16]
 800403e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004040:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004044:	3a04      	subs	r2, #4
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	440a      	add	r2, r1
 800404a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800404c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	601a      	str	r2, [r3, #0]
    address--;
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	3b04      	subs	r3, #4
 8004056:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	3b04      	subs	r3, #4
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	2b03      	cmp	r3, #3
 8004062:	d8da      	bhi.n	800401a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800406c:	33cc      	adds	r3, #204	@ 0xcc
 800406e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	061a      	lsls	r2, r3, #24
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	431a      	orrs	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800409a:	33dc      	adds	r3, #220	@ 0xdc
 800409c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <JPEG_Set_Huff_DHTMem+0x21c>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	7bdb      	ldrb	r3, [r3, #15]
 80040ac:	021a      	lsls	r2, r3, #8
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	7b92      	ldrb	r2, [r2, #14]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	3b04      	subs	r3, #4
 80040c4:	623b      	str	r3, [r7, #32]
  index = 12;
 80040c6:	230c      	movs	r3, #12
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040ca:	e027      	b.n	800411c <JPEG_Set_Huff_DHTMem+0x25c>
 80040cc:	0800f4e0 	.word	0x0800f4e0
 80040d0:	0800f594 	.word	0x0800f594
 80040d4:	0800f4a8 	.word	0x0800f4a8
 80040d8:	0800f4c4 	.word	0x0800f4c4
 80040dc:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	3301      	adds	r3, #1
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80040ea:	6939      	ldr	r1, [r7, #16]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	440b      	add	r3, r1
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80040f4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	3b01      	subs	r3, #1
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	5ccb      	ldrb	r3, [r1, r3]
 80040fe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004100:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004104:	3a02      	subs	r2, #2
 8004106:	6939      	ldr	r1, [r7, #16]
 8004108:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800410a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	601a      	str	r2, [r3, #0]
    address--;
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	3b04      	subs	r3, #4
 8004114:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	3b04      	subs	r3, #4
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	2b03      	cmp	r3, #3
 8004120:	d8de      	bhi.n	80040e0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800412a:	33dc      	adds	r3, #220	@ 0xdc
 800412c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	7c5b      	ldrb	r3, [r3, #17]
 800413a:	061a      	lsls	r2, r3, #24
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	431a      	orrs	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	7c1b      	ldrb	r3, [r3, #16]
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004158:	33e8      	adds	r3, #232	@ 0xe8
 800415a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b6d      	ldr	r3, [pc, #436]	@ (8004318 <JPEG_Set_Huff_DHTMem+0x458>)
 8004162:	4013      	ands	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	7edb      	ldrb	r3, [r3, #27]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	7e92      	ldrb	r2, [r2, #26]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	3b04      	subs	r3, #4
 8004182:	623b      	str	r3, [r7, #32]
  index = 8;
 8004184:	2308      	movs	r3, #8
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004188:	e021      	b.n	80041ce <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	3301      	adds	r3, #1
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	7c1b      	ldrb	r3, [r3, #16]
 8004194:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	440b      	add	r3, r1
 800419c:	3310      	adds	r3, #16
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80041a2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	3b01      	subs	r3, #1
 80041a8:	6939      	ldr	r1, [r7, #16]
 80041aa:	440b      	add	r3, r1
 80041ac:	7c1b      	ldrb	r3, [r3, #16]
 80041ae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80041b0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	3a02      	subs	r2, #2
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	440a      	add	r2, r1
 80041ba:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80041bc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	601a      	str	r2, [r3, #0]
    address--;
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	3b04      	subs	r3, #4
 80041c6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	3b04      	subs	r3, #4
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d8da      	bhi.n	800418a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041dc:	33e8      	adds	r3, #232	@ 0xe8
 80041de:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	061a      	lsls	r2, r3, #24
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800420a:	33f8      	adds	r3, #248	@ 0xf8
 800420c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b41      	ldr	r3, [pc, #260]	@ (8004318 <JPEG_Set_Huff_DHTMem+0x458>)
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	7bdb      	ldrb	r3, [r3, #15]
 800421c:	021a      	lsls	r2, r3, #8
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	7b92      	ldrb	r2, [r2, #14]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  *address = value;
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	3b04      	subs	r3, #4
 8004234:	623b      	str	r3, [r7, #32]
  index = 12;
 8004236:	230c      	movs	r3, #12
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800423a:	e01d      	b.n	8004278 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	3301      	adds	r3, #1
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	440b      	add	r3, r1
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004250:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	3b01      	subs	r3, #1
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800425c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800425e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004260:	3a02      	subs	r2, #2
 8004262:	69b9      	ldr	r1, [r7, #24]
 8004264:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004266:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	601a      	str	r2, [r3, #0]
    address--;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	3b04      	subs	r3, #4
 8004270:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	3b04      	subs	r3, #4
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	2b03      	cmp	r3, #3
 800427c:	d8de      	bhi.n	800423c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004286:	33f8      	adds	r3, #248	@ 0xf8
 8004288:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	7c5b      	ldrb	r3, [r3, #17]
 8004296:	061a      	lsls	r2, r3, #24
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	431a      	orrs	r2, r3
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	7c1b      	ldrb	r3, [r3, #16]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80042b4:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80042b8:	623b      	str	r3, [r7, #32]
  index = 160;
 80042ba:	23a0      	movs	r3, #160	@ 0xa0
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80042be:	e021      	b.n	8004304 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	3301      	adds	r3, #1
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	7c1b      	ldrb	r3, [r3, #16]
 80042ca:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	440b      	add	r3, r1
 80042d2:	3310      	adds	r3, #16
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80042d8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	3b01      	subs	r3, #1
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	440b      	add	r3, r1
 80042e2:	7c1b      	ldrb	r3, [r3, #16]
 80042e4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80042e6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	3a02      	subs	r2, #2
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	440a      	add	r2, r1
 80042f0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80042f2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	601a      	str	r2, [r3, #0]
    address--;
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	3b04      	subs	r3, #4
 80042fc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	3b04      	subs	r3, #4
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2b03      	cmp	r3, #3
 8004308:	d8da      	bhi.n	80042c0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	372c      	adds	r7, #44	@ 0x2c
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	ffff0000 	.word	0xffff0000

0800431c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d108      	bne.n	800434e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0208 	orr.w	r2, r2, #8
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	e007      	b.n	800435e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0208 	bic.w	r2, r2, #8
 800435c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80043ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d108      	bne.n	80043dc <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80043da:	e00d      	b.n	80043f8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d107      	bne.n	80043f8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d125      	bne.n	8004464 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01e      	beq.n	8004464 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff f81b 	bl	8003468 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc ff6c 	bl	800131c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004462:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800447e:	2108      	movs	r1, #8
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f988 	bl	8004796 <JPEG_ReadInputData>
 8004486:	e00a      	b.n	800449e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8004496:	2101      	movs	r1, #1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f97c 	bl	8004796 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80044b8:	2108      	movs	r1, #8
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f864 	bl	8004588 <JPEG_StoreOutputData>
 80044c0:	e00a      	b.n	80044d8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80044d0:	2101      	movs	r1, #1
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f858 	bl	8004588 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d14b      	bne.n	800457e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d107      	bne.n	8004512 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69d9      	ldr	r1, [r3, #28]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	461a      	mov	r2, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fc ff3b 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d103      	bne.n	8004574 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fc ff39 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
 8004572:	e002      	b.n	800457a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff f910 	bl	800379a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d34b      	bcc.n	800463c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e031      	b.n	800460e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	4413      	add	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	0a19      	lsrs	r1, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	3301      	adds	r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	b2ca      	uxtb	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c19      	lsrs	r1, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	3302      	adds	r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	b2ca      	uxtb	r2, r1
 80045e8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	0e19      	lsrs	r1, r3, #24
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	3303      	adds	r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	b2ca      	uxtb	r2, r1
 80045fc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3301      	adds	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3c9      	bcc.n	80045aa <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	429a      	cmp	r2, r3
 8004620:	f040 80b5 	bne.w	800478e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69d9      	ldr	r1, [r3, #28]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	461a      	mov	r2, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc febe 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800463a:	e0a8      	b.n	800478e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	429a      	cmp	r2, r3
 8004646:	f240 80a2 	bls.w	800478e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e031      	b.n	80046c2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004664:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	4413      	add	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	0a19      	lsrs	r1, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	3301      	adds	r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	b2ca      	uxtb	r2, r1
 8004688:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	0c19      	lsrs	r1, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	3302      	adds	r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	b2ca      	uxtb	r2, r1
 800469c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	0e19      	lsrs	r1, r3, #24
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	3303      	adds	r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	b2ca      	uxtb	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3301      	adds	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3c9      	bcc.n	800465e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d10b      	bne.n	80046ee <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69d9      	ldr	r1, [r3, #28]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	461a      	mov	r2, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fe65 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80046ec:	e04f      	b.n	800478e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e015      	b.n	8004734 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	fa22 f103 	lsr.w	r1, r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	4413      	add	r3, r2
 8004720:	b2ca      	uxtb	r2, r1
 8004722:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	3301      	adds	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	429a      	cmp	r2, r3
 800473a:	d3e5      	bcc.n	8004708 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	461a      	mov	r2, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fe32 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f1c3 0304 	rsb	r3, r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	e013      	b.n	8004788 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	fa22 f103 	lsr.w	r1, r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	4413      	add	r3, r2
 8004774:	b2ca      	uxtb	r2, r1
 8004776:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3301      	adds	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d9e8      	bls.n	8004760 <JPEG_StoreOutputData+0x1d8>
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b088      	sub	sp, #32
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <JPEG_ReadInputData+0x1c>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80047b2:	2101      	movs	r1, #1
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fe ff74 	bl	80036a2 <HAL_JPEG_Pause>
 80047ba:	e028      	b.n	800480e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d906      	bls.n	80047d6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	e01b      	b.n	800480e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d115      	bne.n	800480e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fc fda3 	bl	8001334 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d905      	bls.n	8004802 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 809f 	bne.w	800495a <JPEG_ReadInputData+0x1c4>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 809b 	beq.w	800495a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d335      	bcc.n	800489e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e02d      	b.n	8004894 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004858:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6999      	ldr	r1, [r3, #24]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3302      	adds	r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800486a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3303      	adds	r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004880:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	3301      	adds	r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d3cd      	bcc.n	8004838 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800489c:	e05d      	b.n	800495a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d035      	beq.n	8004910 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e02d      	b.n	8004906 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048ca:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3302      	adds	r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80048dc:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3303      	adds	r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80048f2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	3301      	adds	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3cd      	bcc.n	80048aa <JPEG_ReadInputData+0x114>
}
 800490e:	e024      	b.n	800495a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	e017      	b.n	800494a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4413      	add	r3, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	3301      	adds	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	429a      	cmp	r2, r3
 8004950:	d3e3      	bcc.n	800491a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800495a:	bf00      	nop
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d125      	bne.n	80049c2 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01e      	beq.n	80049c2 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fe fd6c 	bl	8003468 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fc fcbd 	bl	800131c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d039      	beq.n	8004a44 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004a0a:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d104      	bne.n	8004a24 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f97c 	bl	8004d1c <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d105      	bne.n	8004a3e <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f970 	bl	8004d1c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8004a3c:	e002      	b.n	8004a44 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f804 	bl	8004a4c <JPEG_DMA_EndProcess>
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d10a      	bne.n	8004a8c <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69d9      	ldr	r1, [r3, #28]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fc95 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d134      	bne.n	8004b04 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69d9      	ldr	r1, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fc fc7f 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d103      	bne.n	8004afc <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc fc75 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8004afa:	e00c      	b.n	8004b16 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fe fe4c 	bl	800379a <HAL_JPEG_EncodeCpltCallback>
}
 8004b02:	e008      	b.n	8004b16 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f804 	bl	8004b1e <JPEG_DMA_PollResidualData>
}
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004b26:	2310      	movs	r3, #16
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e04f      	b.n	8004bcc <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d146      	bne.n	8004bc6 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d03f      	beq.n	8004bc6 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4c:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	4413      	add	r3, r2
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0a19      	lsrs	r1, r3, #8
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	b2ca      	uxtb	r2, r1
 8004b70:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	0c19      	lsrs	r1, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	3302      	adds	r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	b2ca      	uxtb	r2, r1
 8004b84:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0e19      	lsrs	r1, r3, #24
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	3303      	adds	r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	b2ca      	uxtb	r2, r1
 8004b98:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	1d1a      	adds	r2, r3, #4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d10a      	bne.n	8004bc6 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fbf8 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1ac      	bne.n	8004b2c <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <JPEG_DMA_PollResidualData+0xd2>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d133      	bne.n	8004c58 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	461a      	mov	r2, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fbcc 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d103      	bne.n	8004c52 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc fbca 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8004c50:	e002      	b.n	8004c58 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fe fda1 	bl	800379a <HAL_JPEG_EncodeCpltCallback>
}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b08b      	sub	sp, #44	@ 0x2c
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3350      	adds	r3, #80	@ 0x50
 8004c72:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004c78:	e042      	b.n	8004d00 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e033      	b.n	8004cee <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d103      	bne.n	8004ca2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	3364      	adds	r3, #100	@ 0x64
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca0:	e022      	b.n	8004ce8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2264      	movs	r2, #100	@ 0x64
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cae:	6a38      	ldr	r0, [r7, #32]
 8004cb0:	69f9      	ldr	r1, [r7, #28]
 8004cb2:	4401      	add	r1, r0
 8004cb4:	4818      	ldr	r0, [pc, #96]	@ (8004d18 <JPEG_GetQuality+0xb8>)
 8004cb6:	5c41      	ldrb	r1, [r0, r1]
 8004cb8:	440a      	add	r2, r1
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b64      	cmp	r3, #100	@ 0x64
 8004cc6:	d807      	bhi.n	8004cd8 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	4413      	add	r3, r2
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd6:	e007      	b.n	8004ce8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce4:	4413      	add	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d9c8      	bls.n	8004c86 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b3c      	cmp	r3, #60	@ 0x3c
 8004d04:	d9b9      	bls.n	8004c7a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	099b      	lsrs	r3, r3, #6
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	372c      	adds	r7, #44	@ 0x2c
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	0800f648 	.word	0x0800f648

08004d1c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e017      	b.n	8004d5e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d004      	beq.n	8004d44 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2280      	movs	r2, #128	@ 0x80
 8004d3e:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e00c      	b.n	8004d5e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004d74:	4b29      	ldr	r3, [pc, #164]	@ (8004e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d00a      	beq.n	8004d96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d80:	4b26      	ldr	r3, [pc, #152]	@ (8004e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d001      	beq.n	8004d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e040      	b.n	8004e14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e03e      	b.n	8004e14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d96:	4b21      	ldr	r3, [pc, #132]	@ (8004e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004d9e:	491f      	ldr	r1, [pc, #124]	@ (8004e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004da6:	f7fd fba5 	bl	80024f4 <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dac:	e009      	b.n	8004dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dae:	f7fd fba1 	bl	80024f4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dbc:	d901      	bls.n	8004dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e028      	b.n	8004e14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dc2:	4b16      	ldr	r3, [pc, #88]	@ (8004e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dce:	d1ee      	bne.n	8004dae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b1e      	cmp	r3, #30
 8004dd4:	d008      	beq.n	8004de8 <HAL_PWREx_ConfigSupply+0x7c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dda:	d005      	beq.n	8004de8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b1d      	cmp	r3, #29
 8004de0:	d002      	beq.n	8004de8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b2d      	cmp	r3, #45	@ 0x2d
 8004de6:	d114      	bne.n	8004e12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004de8:	f7fd fb84 	bl	80024f4 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004dee:	e009      	b.n	8004e04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004df0:	f7fd fb80 	bl	80024f4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dfe:	d901      	bls.n	8004e04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e007      	b.n	8004e14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e10:	d1ee      	bne.n	8004df0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	58024800 	.word	0x58024800

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	@ 0x30
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f000 bc48 	b.w	80056c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8088 	beq.w	8004f52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e42:	4b99      	ldr	r3, [pc, #612]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e4c:	4b96      	ldr	r3, [pc, #600]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d007      	beq.n	8004e68 <HAL_RCC_OscConfig+0x48>
 8004e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5a:	2b18      	cmp	r3, #24
 8004e5c:	d111      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62>
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d10c      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	4b8f      	ldr	r3, [pc, #572]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d06d      	beq.n	8004f50 <HAL_RCC_OscConfig+0x130>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d169      	bne.n	8004f50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f000 bc21 	b.w	80056c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x7a>
 8004e8c:	4b86      	ldr	r3, [pc, #536]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a85      	ldr	r2, [pc, #532]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e02e      	b.n	8004ef8 <HAL_RCC_OscConfig+0xd8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x9c>
 8004ea2:	4b81      	ldr	r3, [pc, #516]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a80      	ldr	r2, [pc, #512]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4b7e      	ldr	r3, [pc, #504]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e01d      	b.n	8004ef8 <HAL_RCC_OscConfig+0xd8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0xc0>
 8004ec6:	4b78      	ldr	r3, [pc, #480]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a77      	ldr	r2, [pc, #476]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b75      	ldr	r3, [pc, #468]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a74      	ldr	r2, [pc, #464]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0xd8>
 8004ee0:	4b71      	ldr	r3, [pc, #452]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a70      	ldr	r2, [pc, #448]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b6e      	ldr	r3, [pc, #440]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6d      	ldr	r2, [pc, #436]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fd faf8 	bl	80024f4 <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fd faf4 	bl	80024f4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	@ 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e3d4      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f1a:	4b63      	ldr	r3, [pc, #396]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xe8>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd fae4 	bl	80024f4 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fd fae0 	bl	80024f4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e3c0      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f42:	4b59      	ldr	r3, [pc, #356]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x110>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80ca 	beq.w	80050f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f60:	4b51      	ldr	r3, [pc, #324]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_RCC_OscConfig+0x166>
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	2b18      	cmp	r3, #24
 8004f7a:	d156      	bne.n	800502a <HAL_RCC_OscConfig+0x20a>
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d151      	bne.n	800502a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f86:	4b48      	ldr	r3, [pc, #288]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_RCC_OscConfig+0x17e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e392      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f9e:	4b42      	ldr	r3, [pc, #264]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 0219 	bic.w	r2, r3, #25
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	493f      	ldr	r1, [pc, #252]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd faa0 	bl	80024f4 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb8:	f7fd fa9c 	bl	80024f4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e37c      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fca:	4b37      	ldr	r3, [pc, #220]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd6:	f7fd fabd 	bl	8002554 <HAL_GetREVID>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d817      	bhi.n	8005014 <HAL_RCC_OscConfig+0x1f4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d108      	bne.n	8004ffe <HAL_RCC_OscConfig+0x1de>
 8004fec:	4b2e      	ldr	r3, [pc, #184]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ffc:	e07a      	b.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	031b      	lsls	r3, r3, #12
 800500c:	4926      	ldr	r1, [pc, #152]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 800500e:	4313      	orrs	r3, r2
 8005010:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005012:	e06f      	b.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005014:	4b24      	ldr	r3, [pc, #144]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	4921      	ldr	r1, [pc, #132]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005028:	e064      	b.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d047      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005032:	4b1d      	ldr	r3, [pc, #116]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0219 	bic.w	r2, r3, #25
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	491a      	ldr	r1, [pc, #104]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fa56 	bl	80024f4 <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7fd fa52 	bl	80024f4 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e332      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800505e:	4b12      	ldr	r3, [pc, #72]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506a:	f7fd fa73 	bl	8002554 <HAL_GetREVID>
 800506e:	4603      	mov	r3, r0
 8005070:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005074:	4293      	cmp	r3, r2
 8005076:	d819      	bhi.n	80050ac <HAL_RCC_OscConfig+0x28c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d108      	bne.n	8005092 <HAL_RCC_OscConfig+0x272>
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005088:	4a07      	ldr	r2, [pc, #28]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508e:	6053      	str	r3, [r2, #4]
 8005090:	e030      	b.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
 8005092:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	031b      	lsls	r3, r3, #12
 80050a0:	4901      	ldr	r1, [pc, #4]	@ (80050a8 <HAL_RCC_OscConfig+0x288>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
 80050a6:	e025      	b.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
 80050a8:	58024400 	.word	0x58024400
 80050ac:	4b9a      	ldr	r3, [pc, #616]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	4997      	ldr	r1, [pc, #604]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
 80050c0:	e018      	b.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c2:	4b95      	ldr	r3, [pc, #596]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a94      	ldr	r2, [pc, #592]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fd fa11 	bl	80024f4 <HAL_GetTick>
 80050d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d6:	f7fd fa0d 	bl	80024f4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e2ed      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050e8:	4b8b      	ldr	r3, [pc, #556]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a9 	beq.w	8005254 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005102:	4b85      	ldr	r3, [pc, #532]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800510a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800510c:	4b82      	ldr	r3, [pc, #520]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d007      	beq.n	8005128 <HAL_RCC_OscConfig+0x308>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b18      	cmp	r3, #24
 800511c:	d13a      	bne.n	8005194 <HAL_RCC_OscConfig+0x374>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d135      	bne.n	8005194 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005128:	4b7b      	ldr	r3, [pc, #492]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_OscConfig+0x320>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e2c1      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005140:	f7fd fa08 	bl	8002554 <HAL_GetREVID>
 8005144:	4603      	mov	r3, r0
 8005146:	f241 0203 	movw	r2, #4099	@ 0x1003
 800514a:	4293      	cmp	r3, r2
 800514c:	d817      	bhi.n	800517e <HAL_RCC_OscConfig+0x35e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	2b20      	cmp	r3, #32
 8005154:	d108      	bne.n	8005168 <HAL_RCC_OscConfig+0x348>
 8005156:	4b70      	ldr	r3, [pc, #448]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800515e:	4a6e      	ldr	r2, [pc, #440]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005160:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005164:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005166:	e075      	b.n	8005254 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005168:	4b6b      	ldr	r3, [pc, #428]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	069b      	lsls	r3, r3, #26
 8005176:	4968      	ldr	r1, [pc, #416]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800517c:	e06a      	b.n	8005254 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800517e:	4b66      	ldr	r3, [pc, #408]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	4962      	ldr	r1, [pc, #392]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005192:	e05f      	b.n	8005254 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d042      	beq.n	8005222 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800519c:	4b5e      	ldr	r3, [pc, #376]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80051a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd f9a4 	bl	80024f4 <HAL_GetTick>
 80051ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051b0:	f7fd f9a0 	bl	80024f4 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e280      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051c2:	4b55      	ldr	r3, [pc, #340]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ce:	f7fd f9c1 	bl	8002554 <HAL_GetREVID>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051d8:	4293      	cmp	r3, r2
 80051da:	d817      	bhi.n	800520c <HAL_RCC_OscConfig+0x3ec>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d108      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3d6>
 80051e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80051ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80051ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051f2:	6053      	str	r3, [r2, #4]
 80051f4:	e02e      	b.n	8005254 <HAL_RCC_OscConfig+0x434>
 80051f6:	4b48      	ldr	r3, [pc, #288]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	069b      	lsls	r3, r3, #26
 8005204:	4944      	ldr	r1, [pc, #272]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]
 800520a:	e023      	b.n	8005254 <HAL_RCC_OscConfig+0x434>
 800520c:	4b42      	ldr	r3, [pc, #264]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	493f      	ldr	r1, [pc, #252]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
 8005220:	e018      	b.n	8005254 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005222:	4b3d      	ldr	r3, [pc, #244]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a3c      	ldr	r2, [pc, #240]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800522c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd f961 	bl	80024f4 <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005236:	f7fd f95d 	bl	80024f4 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e23d      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005248:	4b33      	ldr	r3, [pc, #204]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d036      	beq.n	80052ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d019      	beq.n	800529c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005268:	4b2b      	ldr	r3, [pc, #172]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800526a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526c:	4a2a      	ldr	r2, [pc, #168]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fd f93e 	bl	80024f4 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800527c:	f7fd f93a 	bl	80024f4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e21a      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800528e:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 8005290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x45c>
 800529a:	e018      	b.n	80052ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529c:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800529e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fd f924 	bl	80024f4 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b0:	f7fd f920 	bl	80024f4 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e200      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052c2:	4b15      	ldr	r3, [pc, #84]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80052c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d039      	beq.n	800534e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01c      	beq.n	800531c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 80052e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052ee:	f7fd f901 	bl	80024f4 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f6:	f7fd f8fd 	bl	80024f4 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e1dd      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005308:	4b03      	ldr	r3, [pc, #12]	@ (8005318 <HAL_RCC_OscConfig+0x4f8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x4d6>
 8005314:	e01b      	b.n	800534e <HAL_RCC_OscConfig+0x52e>
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800531c:	4b9b      	ldr	r3, [pc, #620]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a9a      	ldr	r2, [pc, #616]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005326:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005328:	f7fd f8e4 	bl	80024f4 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005330:	f7fd f8e0 	bl	80024f4 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1c0      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005342:	4b92      	ldr	r3, [pc, #584]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8081 	beq.w	800545e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800535c:	4b8c      	ldr	r3, [pc, #560]	@ (8005590 <HAL_RCC_OscConfig+0x770>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a8b      	ldr	r2, [pc, #556]	@ (8005590 <HAL_RCC_OscConfig+0x770>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005368:	f7fd f8c4 	bl	80024f4 <HAL_GetTick>
 800536c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fd f8c0 	bl	80024f4 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	@ 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e1a0      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005382:	4b83      	ldr	r3, [pc, #524]	@ (8005590 <HAL_RCC_OscConfig+0x770>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_OscConfig+0x584>
 8005396:	4b7d      	ldr	r3, [pc, #500]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539a:	4a7c      	ldr	r2, [pc, #496]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a2:	e02d      	b.n	8005400 <HAL_RCC_OscConfig+0x5e0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCC_OscConfig+0x5a6>
 80053ac:	4b77      	ldr	r3, [pc, #476]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a76      	ldr	r2, [pc, #472]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	4b74      	ldr	r3, [pc, #464]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053bc:	4a73      	ldr	r2, [pc, #460]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053be:	f023 0304 	bic.w	r3, r3, #4
 80053c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c4:	e01c      	b.n	8005400 <HAL_RCC_OscConfig+0x5e0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c8>
 80053ce:	4b6f      	ldr	r3, [pc, #444]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	4a6e      	ldr	r2, [pc, #440]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053da:	4b6c      	ldr	r3, [pc, #432]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	4a6b      	ldr	r2, [pc, #428]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0x5e0>
 80053e8:	4b68      	ldr	r3, [pc, #416]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a67      	ldr	r2, [pc, #412]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f4:	4b65      	ldr	r3, [pc, #404]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f8:	4a64      	ldr	r2, [pc, #400]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fd f874 	bl	80024f4 <HAL_GetTick>
 800540c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fd f870 	bl	80024f4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e14e      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005426:	4b59      	ldr	r3, [pc, #356]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ee      	beq.n	8005410 <HAL_RCC_OscConfig+0x5f0>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fd f85e 	bl	80024f4 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fd f85a 	bl	80024f4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e138      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005452:	4b4e      	ldr	r3, [pc, #312]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ee      	bne.n	800543c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 812d 	beq.w	80056c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005468:	4b48      	ldr	r3, [pc, #288]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005470:	2b18      	cmp	r3, #24
 8005472:	f000 80bd 	beq.w	80055f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	2b02      	cmp	r3, #2
 800547c:	f040 809e 	bne.w	80055bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005480:	4b42      	ldr	r3, [pc, #264]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a41      	ldr	r2, [pc, #260]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800548a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fd f832 	bl	80024f4 <HAL_GetTick>
 8005490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd f82e 	bl	80024f4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e10e      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054a6:	4b39      	ldr	r3, [pc, #228]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054b2:	4b36      	ldr	r3, [pc, #216]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80054b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054b6:	4b37      	ldr	r3, [pc, #220]	@ (8005594 <HAL_RCC_OscConfig+0x774>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054c2:	0112      	lsls	r2, r2, #4
 80054c4:	430a      	orrs	r2, r1
 80054c6:	4931      	ldr	r1, [pc, #196]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054da:	3b01      	subs	r3, #1
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	b29b      	uxth	r3, r3
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	3b01      	subs	r3, #1
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	3b01      	subs	r3, #1
 80054f6:	061b      	lsls	r3, r3, #24
 80054f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054fc:	4923      	ldr	r1, [pc, #140]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005502:	4b22      	ldr	r3, [pc, #136]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	4a21      	ldr	r2, [pc, #132]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800550e:	4b1f      	ldr	r3, [pc, #124]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005512:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800551a:	00d2      	lsls	r2, r2, #3
 800551c:	491b      	ldr	r1, [pc, #108]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005522:	4b1a      	ldr	r3, [pc, #104]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	f023 020c 	bic.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	4917      	ldr	r1, [pc, #92]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005534:	4b15      	ldr	r3, [pc, #84]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	f023 0202 	bic.w	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005540:	4912      	ldr	r1, [pc, #72]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005546:	4b11      	ldr	r3, [pc, #68]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	4a10      	ldr	r2, [pc, #64]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800554c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005552:	4b0e      	ldr	r3, [pc, #56]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	4a0d      	ldr	r2, [pc, #52]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800555e:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800556a:	4b08      	ldr	r3, [pc, #32]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a07      	ldr	r2, [pc, #28]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a04      	ldr	r2, [pc, #16]	@ (800558c <HAL_RCC_OscConfig+0x76c>)
 800557c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fc ffb7 	bl	80024f4 <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005588:	e011      	b.n	80055ae <HAL_RCC_OscConfig+0x78e>
 800558a:	bf00      	nop
 800558c:	58024400 	.word	0x58024400
 8005590:	58024800 	.word	0x58024800
 8005594:	fffffc0c 	.word	0xfffffc0c
 8005598:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fc ffaa 	bl	80024f4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e08a      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055ae:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x77c>
 80055ba:	e082      	b.n	80056c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055bc:	4b43      	ldr	r3, [pc, #268]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a42      	ldr	r2, [pc, #264]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80055c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fc ff94 	bl	80024f4 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fc ff90 	bl	80024f4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e070      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055e2:	4b3a      	ldr	r3, [pc, #232]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x7b0>
 80055ee:	e068      	b.n	80056c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055f0:	4b36      	ldr	r3, [pc, #216]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055f6:	4b35      	ldr	r3, [pc, #212]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	2b01      	cmp	r3, #1
 8005602:	d031      	beq.n	8005668 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f003 0203 	and.w	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d12a      	bne.n	8005668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561e:	429a      	cmp	r2, r3
 8005620:	d122      	bne.n	8005668 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d11a      	bne.n	8005668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	0a5b      	lsrs	r3, r3, #9
 8005636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d111      	bne.n	8005668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d108      	bne.n	8005668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e02b      	b.n	80056c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800566c:	4b17      	ldr	r3, [pc, #92]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 800566e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005670:	08db      	lsrs	r3, r3, #3
 8005672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005676:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d01f      	beq.n	80056c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	4a11      	ldr	r2, [pc, #68]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800568e:	f7fc ff31 	bl	80024f4 <HAL_GetTick>
 8005692:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005694:	bf00      	nop
 8005696:	f7fc ff2d 	bl	80024f4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	4293      	cmp	r3, r2
 80056a0:	d0f9      	beq.n	8005696 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056a2:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80056a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a6:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <HAL_RCC_OscConfig+0x8b0>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056ae:	00d2      	lsls	r2, r2, #3
 80056b0:	4906      	ldr	r1, [pc, #24]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056b6:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	4a04      	ldr	r2, [pc, #16]	@ (80056cc <HAL_RCC_OscConfig+0x8ac>)
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3730      	adds	r7, #48	@ 0x30
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	58024400 	.word	0x58024400
 80056d0:	ffff0007 	.word	0xffff0007

080056d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e19c      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d910      	bls.n	8005718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b87      	ldr	r3, [pc, #540]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 020f 	bic.w	r2, r3, #15
 80056fe:	4985      	ldr	r1, [pc, #532]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	4313      	orrs	r3, r2
 8005704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b83      	ldr	r3, [pc, #524]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e184      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	4b7b      	ldr	r3, [pc, #492]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005730:	429a      	cmp	r2, r3
 8005732:	d908      	bls.n	8005746 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005734:	4b78      	ldr	r3, [pc, #480]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	4975      	ldr	r1, [pc, #468]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005742:	4313      	orrs	r3, r2
 8005744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d010      	beq.n	8005774 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	4b70      	ldr	r3, [pc, #448]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800575e:	429a      	cmp	r2, r3
 8005760:	d908      	bls.n	8005774 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005762:	4b6d      	ldr	r3, [pc, #436]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	496a      	ldr	r1, [pc, #424]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005770:	4313      	orrs	r3, r2
 8005772:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d010      	beq.n	80057a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	4b64      	ldr	r3, [pc, #400]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800578c:	429a      	cmp	r2, r3
 800578e:	d908      	bls.n	80057a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005790:	4b61      	ldr	r3, [pc, #388]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	495e      	ldr	r1, [pc, #376]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	4b59      	ldr	r3, [pc, #356]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d908      	bls.n	80057d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057be:	4b56      	ldr	r3, [pc, #344]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	4953      	ldr	r1, [pc, #332]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d010      	beq.n	80057fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d908      	bls.n	80057fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f023 020f 	bic.w	r2, r3, #15
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4947      	ldr	r1, [pc, #284]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d055      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	4940      	ldr	r1, [pc, #256]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005818:	4313      	orrs	r3, r2
 800581a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d107      	bne.n	8005834 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005824:	4b3c      	ldr	r3, [pc, #240]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d121      	bne.n	8005874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0f6      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d107      	bne.n	800584c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800583c:	4b36      	ldr	r3, [pc, #216]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d115      	bne.n	8005874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0ea      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d107      	bne.n	8005864 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005854:	4b30      	ldr	r3, [pc, #192]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0de      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005864:	4b2c      	ldr	r3, [pc, #176]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0d6      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005874:	4b28      	ldr	r3, [pc, #160]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f023 0207 	bic.w	r2, r3, #7
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4925      	ldr	r1, [pc, #148]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005886:	f7fc fe35 	bl	80024f4 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588e:	f7fc fe31 	bl	80024f4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0be      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d1eb      	bne.n	800588e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d010      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d208      	bcs.n	80058e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d2:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f023 020f 	bic.w	r2, r3, #15
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	490e      	ldr	r1, [pc, #56]	@ (8005918 <HAL_RCC_ClockConfig+0x244>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d214      	bcs.n	800591c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 020f 	bic.w	r2, r3, #15
 80058fa:	4906      	ldr	r1, [pc, #24]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <HAL_RCC_ClockConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e086      	b.n	8005a22 <HAL_RCC_ClockConfig+0x34e>
 8005914:	52002000 	.word	0x52002000
 8005918:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d010      	beq.n	800594a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005934:	429a      	cmp	r2, r3
 8005936:	d208      	bcs.n	800594a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005938:	4b3c      	ldr	r3, [pc, #240]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	4939      	ldr	r1, [pc, #228]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 8005946:	4313      	orrs	r3, r2
 8005948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d010      	beq.n	8005978 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	4b34      	ldr	r3, [pc, #208]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005962:	429a      	cmp	r2, r3
 8005964:	d208      	bcs.n	8005978 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005966:	4b31      	ldr	r3, [pc, #196]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	492e      	ldr	r1, [pc, #184]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 8005974:	4313      	orrs	r3, r2
 8005976:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d010      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	4b28      	ldr	r3, [pc, #160]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005990:	429a      	cmp	r2, r3
 8005992:	d208      	bcs.n	80059a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005994:	4b25      	ldr	r3, [pc, #148]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	4922      	ldr	r1, [pc, #136]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d010      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059be:	429a      	cmp	r2, r3
 80059c0:	d208      	bcs.n	80059d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059c2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	4917      	ldr	r1, [pc, #92]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059d4:	f000 f89e 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 80059d8:	4602      	mov	r2, r0
 80059da:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	4912      	ldr	r1, [pc, #72]	@ (8005a30 <HAL_RCC_ClockConfig+0x35c>)
 80059e6:	5ccb      	ldrb	r3, [r1, r3]
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059f2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a2c <HAL_RCC_ClockConfig+0x358>)
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005a30 <HAL_RCC_ClockConfig+0x35c>)
 80059fc:	5cd3      	ldrb	r3, [r2, r3]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	4a0a      	ldr	r2, [pc, #40]	@ (8005a34 <HAL_RCC_ClockConfig+0x360>)
 8005a0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a38 <HAL_RCC_ClockConfig+0x364>)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a12:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <HAL_RCC_ClockConfig+0x368>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc fd22 	bl	8002460 <HAL_InitTick>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	0800f498 	.word	0x0800f498
 8005a34:	24000004 	.word	0x24000004
 8005a38:	24000000 	.word	0x24000000
 8005a3c:	2400000c 	.word	0x2400000c

08005a40 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	@ 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d12a      	bne.n	8005aa8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005a52:	4b2d      	ldr	r3, [pc, #180]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a58:	4a2b      	ldr	r2, [pc, #172]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a62:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a76:	2302      	movs	r3, #2
 8005a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a82:	2300      	movs	r3, #0
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005a86:	f107 031c 	add.w	r3, r7, #28
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	481f      	ldr	r0, [pc, #124]	@ (8005b0c <HAL_RCC_MCOConfig+0xcc>)
 8005a8e:	f7fd fa59 	bl	8002f44 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a92:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	4919      	ldr	r1, [pc, #100]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005aa6:	e02a      	b.n	8005afe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005aa8:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005aae:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005ab0:	f043 0304 	orr.w	r3, r3, #4
 8005ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ab8:	4b13      	ldr	r3, [pc, #76]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005acc:	2302      	movs	r3, #2
 8005ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005adc:	f107 031c 	add.w	r3, r7, #28
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	480b      	ldr	r0, [pc, #44]	@ (8005b10 <HAL_RCC_MCOConfig+0xd0>)
 8005ae4:	f7fd fa2e 	bl	8002f44 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005ae8:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	01d9      	lsls	r1, r3, #7
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	430b      	orrs	r3, r1
 8005af8:	4903      	ldr	r1, [pc, #12]	@ (8005b08 <HAL_RCC_MCOConfig+0xc8>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	610b      	str	r3, [r1, #16]
}
 8005afe:	bf00      	nop
 8005b00:	3730      	adds	r7, #48	@ 0x30
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	58020000 	.word	0x58020000
 8005b10:	58020800 	.word	0x58020800

08005b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	@ 0x24
 8005b18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b1a:	4bb3      	ldr	r3, [pc, #716]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b22:	2b18      	cmp	r3, #24
 8005b24:	f200 8155 	bhi.w	8005dd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b28:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b95 	.word	0x08005b95
 8005b34:	08005dd3 	.word	0x08005dd3
 8005b38:	08005dd3 	.word	0x08005dd3
 8005b3c:	08005dd3 	.word	0x08005dd3
 8005b40:	08005dd3 	.word	0x08005dd3
 8005b44:	08005dd3 	.word	0x08005dd3
 8005b48:	08005dd3 	.word	0x08005dd3
 8005b4c:	08005dd3 	.word	0x08005dd3
 8005b50:	08005bbb 	.word	0x08005bbb
 8005b54:	08005dd3 	.word	0x08005dd3
 8005b58:	08005dd3 	.word	0x08005dd3
 8005b5c:	08005dd3 	.word	0x08005dd3
 8005b60:	08005dd3 	.word	0x08005dd3
 8005b64:	08005dd3 	.word	0x08005dd3
 8005b68:	08005dd3 	.word	0x08005dd3
 8005b6c:	08005dd3 	.word	0x08005dd3
 8005b70:	08005bc1 	.word	0x08005bc1
 8005b74:	08005dd3 	.word	0x08005dd3
 8005b78:	08005dd3 	.word	0x08005dd3
 8005b7c:	08005dd3 	.word	0x08005dd3
 8005b80:	08005dd3 	.word	0x08005dd3
 8005b84:	08005dd3 	.word	0x08005dd3
 8005b88:	08005dd3 	.word	0x08005dd3
 8005b8c:	08005dd3 	.word	0x08005dd3
 8005b90:	08005bc7 	.word	0x08005bc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b94:	4b94      	ldr	r3, [pc, #592]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba0:	4b91      	ldr	r3, [pc, #580]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	08db      	lsrs	r3, r3, #3
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	4a90      	ldr	r2, [pc, #576]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005bb2:	e111      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bb6:	61bb      	str	r3, [r7, #24]
      break;
 8005bb8:	e10e      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005bba:	4b8d      	ldr	r3, [pc, #564]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bbc:	61bb      	str	r3, [r7, #24]
      break;
 8005bbe:	e10b      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8005df4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005bc2:	61bb      	str	r3, [r7, #24]
      break;
 8005bc4:	e108      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bc6:	4b88      	ldr	r3, [pc, #544]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005bd0:	4b85      	ldr	r3, [pc, #532]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bdc:	4b82      	ldr	r3, [pc, #520]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005be6:	4b80      	ldr	r3, [pc, #512]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	08db      	lsrs	r3, r3, #3
 8005bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80e1 	beq.w	8005dcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f000 8083 	beq.w	8005d18 <HAL_RCC_GetSysClockFreq+0x204>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	f200 80a1 	bhi.w	8005d5c <HAL_RCC_GetSysClockFreq+0x248>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x114>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d056      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c26:	e099      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c28:	4b6f      	ldr	r3, [pc, #444]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02d      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c34:	4b6c      	ldr	r3, [pc, #432]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	08db      	lsrs	r3, r3, #3
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	4a6b      	ldr	r2, [pc, #428]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b62      	ldr	r3, [pc, #392]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c8e:	e087      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005dfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b51      	ldr	r3, [pc, #324]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cd2:	e065      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b40      	ldr	r3, [pc, #256]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cfa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d16:	e043      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005e04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d3e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d5a:	e021      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d82:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005da0:	4b11      	ldr	r3, [pc, #68]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	0a5b      	lsrs	r3, r3, #9
 8005da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005daa:	3301      	adds	r3, #1
 8005dac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc4:	ee17 3a90 	vmov	r3, s15
 8005dc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005dca:	e005      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
      break;
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005dd2:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dd4:	61bb      	str	r3, [r7, #24]
      break;
 8005dd6:	bf00      	nop
  }

  return sysclockfreq;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3724      	adds	r7, #36	@ 0x24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	58024400 	.word	0x58024400
 8005dec:	03d09000 	.word	0x03d09000
 8005df0:	003d0900 	.word	0x003d0900
 8005df4:	017d7840 	.word	0x017d7840
 8005df8:	46000000 	.word	0x46000000
 8005dfc:	4c742400 	.word	0x4c742400
 8005e00:	4a742400 	.word	0x4a742400
 8005e04:	4bbebc20 	.word	0x4bbebc20

08005e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e0e:	f7ff fe81 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8005e12:	4602      	mov	r2, r0
 8005e14:	4b10      	ldr	r3, [pc, #64]	@ (8005e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	490f      	ldr	r1, [pc, #60]	@ (8005e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e20:	5ccb      	ldrb	r3, [r1, r3]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	4a09      	ldr	r2, [pc, #36]	@ (8005e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e36:	5cd3      	ldrb	r3, [r2, r3]
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e42:	4a07      	ldr	r2, [pc, #28]	@ (8005e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e46:	4a07      	ldr	r2, [pc, #28]	@ (8005e64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e4c:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	0800f498 	.word	0x0800f498
 8005e60:	24000004 	.word	0x24000004
 8005e64:	24000000 	.word	0x24000000

08005e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e6c:	f7ff ffcc 	bl	8005e08 <HAL_RCC_GetHCLKFreq>
 8005e70:	4602      	mov	r2, r0
 8005e72:	4b06      	ldr	r3, [pc, #24]	@ (8005e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	4904      	ldr	r1, [pc, #16]	@ (8005e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e7e:	5ccb      	ldrb	r3, [r1, r3]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	0800f498 	.word	0x0800f498

08005e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e98:	f7ff ffb6 	bl	8005e08 <HAL_RCC_GetHCLKFreq>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4904      	ldr	r1, [pc, #16]	@ (8005ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005eaa:	5ccb      	ldrb	r3, [r1, r3]
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	0800f498 	.word	0x0800f498

08005ec0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec4:	b0cc      	sub	sp, #304	@ 0x130
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	ea54 0305 	orrs.w	r3, r4, r5
 8005eea:	d049      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ef6:	d02f      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ef8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005efc:	d828      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f02:	d01a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f08:	d822      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f12:	d007      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f14:	e01c      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f16:	4bb8      	ldr	r3, [pc, #736]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	4ab7      	ldr	r2, [pc, #732]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f22:	e01a      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f28:	3308      	adds	r3, #8
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f002 fba1 	bl	8008674 <RCCEx_PLL2_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f38:	e00f      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3e:	3328      	adds	r3, #40	@ 0x28
 8005f40:	2102      	movs	r1, #2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f002 fc48 	bl	80087d8 <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f4e:	e004      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f56:	e000      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f62:	4ba5      	ldr	r3, [pc, #660]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f70:	4aa1      	ldr	r2, [pc, #644]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f72:	430b      	orrs	r3, r1
 8005f74:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f76:	e003      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f8c:	f04f 0900 	mov.w	r9, #0
 8005f90:	ea58 0309 	orrs.w	r3, r8, r9
 8005f94:	d047      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d82a      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fbd 	.word	0x08005fbd
 8005fac:	08005fcb 	.word	0x08005fcb
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fff 	.word	0x08005fff
 8005fb8:	08005fff 	.word	0x08005fff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fbc:	4b8e      	ldr	r3, [pc, #568]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	4a8d      	ldr	r2, [pc, #564]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e01a      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fce:	3308      	adds	r3, #8
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 fb4e 	bl	8008674 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fde:	e00f      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe4:	3328      	adds	r3, #40	@ 0x28
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 fbf5 	bl	80087d8 <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e004      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ffc:	e000      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006000:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006008:	4b7b      	ldr	r3, [pc, #492]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800600a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600c:	f023 0107 	bic.w	r1, r3, #7
 8006010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006016:	4a78      	ldr	r2, [pc, #480]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006018:	430b      	orrs	r3, r1
 800601a:	6513      	str	r3, [r2, #80]	@ 0x50
 800601c:	e003      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006022:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006032:	f04f 0b00 	mov.w	fp, #0
 8006036:	ea5a 030b 	orrs.w	r3, sl, fp
 800603a:	d04c      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800603c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006046:	d030      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800604c:	d829      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800604e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006050:	d02d      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006052:	2bc0      	cmp	r3, #192	@ 0xc0
 8006054:	d825      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006056:	2b80      	cmp	r3, #128	@ 0x80
 8006058:	d018      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800605a:	2b80      	cmp	r3, #128	@ 0x80
 800605c:	d821      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	d007      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006066:	e01c      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006068:	4b63      	ldr	r3, [pc, #396]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	4a62      	ldr	r2, [pc, #392]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800606e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006074:	e01c      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800607a:	3308      	adds	r3, #8
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f002 faf8 	bl	8008674 <RCCEx_PLL2_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800608a:	e011      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800608c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006090:	3328      	adds	r3, #40	@ 0x28
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f002 fb9f 	bl	80087d8 <RCCEx_PLL3_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060a8:	e002      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80060aa:	bf00      	nop
 80060ac:	e000      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80060ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060b8:	4b4f      	ldr	r3, [pc, #316]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80060c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	4a4c      	ldr	r2, [pc, #304]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80060e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80060ec:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d053      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80060f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006102:	d035      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006108:	d82e      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800610a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800610e:	d031      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006110:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006114:	d828      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800611a:	d01a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800611c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006120:	d822      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800612a:	d007      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800612c:	e01c      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612e:	4b32      	ldr	r3, [pc, #200]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	4a31      	ldr	r2, [pc, #196]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800613a:	e01c      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800613c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006140:	3308      	adds	r3, #8
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f002 fa95 	bl	8008674 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006150:	e011      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006156:	3328      	adds	r3, #40	@ 0x28
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f002 fb3c 	bl	80087d8 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006166:	e006      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800616e:	e002      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006176:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800617e:	4b1e      	ldr	r3, [pc, #120]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006182:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800618a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800618e:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006190:	430b      	orrs	r3, r1
 8006192:	6593      	str	r3, [r2, #88]	@ 0x58
 8006194:	e003      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006196:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800619a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800619e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80061aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80061b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d056      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80061be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061ca:	d038      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80061cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061d0:	d831      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061d6:	d034      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80061d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061dc:	d82b      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061e2:	d01d      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80061e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061e8:	d825      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80061ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061f2:	d00a      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80061f4:	e01f      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061fc:	4ba2      	ldr	r3, [pc, #648]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	4aa1      	ldr	r2, [pc, #644]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006208:	e01c      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800620a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620e:	3308      	adds	r3, #8
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f002 fa2e 	bl	8008674 <RCCEx_PLL2_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800621e:	e011      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006224:	3328      	adds	r3, #40	@ 0x28
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f002 fad5 	bl	80087d8 <RCCEx_PLL3_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800623c:	e002      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006244:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800624c:	4b8e      	ldr	r3, [pc, #568]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800625c:	4a8a      	ldr	r2, [pc, #552]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800625e:	430b      	orrs	r3, r1
 8006260:	6593      	str	r3, [r2, #88]	@ 0x58
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006268:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800626c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006278:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006282:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006286:	460b      	mov	r3, r1
 8006288:	4313      	orrs	r3, r2
 800628a:	d03a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800628c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006292:	2b30      	cmp	r3, #48	@ 0x30
 8006294:	d01f      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006296:	2b30      	cmp	r3, #48	@ 0x30
 8006298:	d819      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800629a:	2b20      	cmp	r3, #32
 800629c:	d00c      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d815      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d019      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80062a6:	2b10      	cmp	r3, #16
 80062a8:	d111      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062aa:	4b77      	ldr	r3, [pc, #476]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	4a76      	ldr	r2, [pc, #472]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80062b6:	e011      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062bc:	3308      	adds	r3, #8
 80062be:	2102      	movs	r1, #2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f002 f9d7 	bl	8008674 <RCCEx_PLL2_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80062cc:	e006      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062d4:	e002      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80062da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062e4:	4b68      	ldr	r3, [pc, #416]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80062ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f2:	4a65      	ldr	r2, [pc, #404]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062f8:	e003      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800630e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006318:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800631c:	460b      	mov	r3, r1
 800631e:	4313      	orrs	r3, r2
 8006320:	d051      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800632c:	d035      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800632e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006332:	d82e      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006334:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006338:	d031      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800633a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800633e:	d828      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006344:	d01a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634a:	d822      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006354:	d007      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006356:	e01c      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006358:	4b4b      	ldr	r3, [pc, #300]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	4a4a      	ldr	r2, [pc, #296]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800635e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006364:	e01c      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800636a:	3308      	adds	r3, #8
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f002 f980 	bl	8008674 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800637a:	e011      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800637c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006380:	3328      	adds	r3, #40	@ 0x28
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f002 fa27 	bl	80087d8 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006390:	e006      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006398:	e002      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800639e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063a8:	4b37      	ldr	r3, [pc, #220]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b6:	4a34      	ldr	r2, [pc, #208]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80063bc:	e003      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80063d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4313      	orrs	r3, r2
 80063e4:	d056      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80063e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063f0:	d033      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80063f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063f6:	d82c      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063fc:	d02f      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80063fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006402:	d826      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006404:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006408:	d02b      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800640a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800640e:	d820      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006414:	d012      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800641a:	d81a      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d022      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006424:	d115      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800642a:	3308      	adds	r3, #8
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f002 f920 	bl	8008674 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800643a:	e015      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800643c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006440:	3328      	adds	r3, #40	@ 0x28
 8006442:	2101      	movs	r1, #1
 8006444:	4618      	mov	r0, r3
 8006446:	f002 f9c7 	bl	80087d8 <RCCEx_PLL3_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006450:	e00a      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800645a:	bf00      	nop
 800645c:	e004      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006468:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006470:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800647c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800647e:	4a02      	ldr	r2, [pc, #8]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006480:	430b      	orrs	r3, r1
 8006482:	6513      	str	r3, [r2, #80]	@ 0x50
 8006484:	e006      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006486:	bf00      	nop
 8006488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006490:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80064a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064a4:	2300      	movs	r3, #0
 80064a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064aa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	d055      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80064b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064c0:	d033      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80064c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064c6:	d82c      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d02f      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d2:	d826      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064d8:	d02b      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80064da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064de:	d820      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e4:	d012      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80064e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ea:	d81a      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d022      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80064f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064f4:	d115      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fa:	3308      	adds	r3, #8
 80064fc:	2101      	movs	r1, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	f002 f8b8 	bl	8008674 <RCCEx_PLL2_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800650a:	e015      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800650c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006510:	3328      	adds	r3, #40	@ 0x28
 8006512:	2101      	movs	r1, #1
 8006514:	4618      	mov	r0, r3
 8006516:	f002 f95f 	bl	80087d8 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006520:	e00a      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006528:	e006      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800652a:	bf00      	nop
 800652c:	e004      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006538:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006540:	4bb6      	ldr	r3, [pc, #728]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006544:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800654c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006550:	4ab2      	ldr	r2, [pc, #712]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006552:	430b      	orrs	r3, r1
 8006554:	6593      	str	r3, [r2, #88]	@ 0x58
 8006556:	e003      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006558:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800655c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006560:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800656c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006576:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800657a:	460b      	mov	r3, r1
 800657c:	4313      	orrs	r3, r2
 800657e:	d02a      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006586:	2b00      	cmp	r3, #0
 8006588:	d011      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800658a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658e:	d10a      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006594:	3308      	adds	r3, #8
 8006596:	2101      	movs	r1, #1
 8006598:	4618      	mov	r0, r3
 800659a:	f002 f86b 	bl	8008674 <RCCEx_PLL2_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80065a4:	e004      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80065ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80065b8:	4b98      	ldr	r3, [pc, #608]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80065c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c6:	4a95      	ldr	r2, [pc, #596]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065cc:	e003      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80065e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065f0:	460b      	mov	r3, r1
 80065f2:	4313      	orrs	r3, r2
 80065f4:	d037      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80065f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006600:	d00e      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006606:	d816      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d018      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800660c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006610:	d111      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006612:	4b82      	ldr	r3, [pc, #520]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006616:	4a81      	ldr	r2, [pc, #516]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800661e:	e00f      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006624:	3308      	adds	r3, #8
 8006626:	2101      	movs	r1, #1
 8006628:	4618      	mov	r0, r3
 800662a:	f002 f823 	bl	8008674 <RCCEx_PLL2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006634:	e004      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800663c:	e000      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800663e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006640:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006648:	4b74      	ldr	r3, [pc, #464]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800664a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006656:	4a71      	ldr	r2, [pc, #452]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6513      	str	r3, [r2, #80]	@ 0x50
 800665c:	e003      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006662:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006672:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800667c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006680:	460b      	mov	r3, r1
 8006682:	4313      	orrs	r3, r2
 8006684:	d03a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668c:	2b03      	cmp	r3, #3
 800668e:	d81d      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006690:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066a9 	.word	0x080066a9
 80066a0:	080066b7 	.word	0x080066b7
 80066a4:	080066d5 	.word	0x080066d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4b5c      	ldr	r3, [pc, #368]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	4a5b      	ldr	r2, [pc, #364]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ba:	3308      	adds	r3, #8
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 ffd8 	bl	8008674 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066ca:	e004      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066de:	4b4f      	ldr	r3, [pc, #316]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e2:	f023 0103 	bic.w	r1, r3, #3
 80066e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ec:	4a4b      	ldr	r2, [pc, #300]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006712:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	f000 80a0 	beq.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800671e:	4b40      	ldr	r3, [pc, #256]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a3f      	ldr	r2, [pc, #252]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800672a:	f7fb fee3 	bl	80024f4 <HAL_GetTick>
 800672e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006732:	e00b      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006734:	f7fb fede 	bl	80024f4 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b64      	cmp	r3, #100	@ 0x64
 8006742:	d903      	bls.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800674a:	e005      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800674c:	4b34      	ldr	r3, [pc, #208]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ed      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006758:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d17a      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006760:	4b2e      	ldr	r3, [pc, #184]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006762:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006768:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800676c:	4053      	eors	r3, r2
 800676e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d015      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006776:	4b29      	ldr	r3, [pc, #164]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006782:	4b26      	ldr	r3, [pc, #152]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006786:	4a25      	ldr	r2, [pc, #148]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800678c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800678e:	4b23      	ldr	r3, [pc, #140]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	4a22      	ldr	r2, [pc, #136]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006798:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800679a:	4a20      	ldr	r2, [pc, #128]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800679c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80067a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ae:	d118      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b0:	f7fb fea0 	bl	80024f4 <HAL_GetTick>
 80067b4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067b8:	e00d      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ba:	f7fb fe9b 	bl	80024f4 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d903      	bls.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80067d4:	e005      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067d6:	4b11      	ldr	r3, [pc, #68]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0eb      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80067e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d130      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067fa:	d115      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80067fc:	4b07      	ldr	r3, [pc, #28]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006808:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800680c:	091a      	lsrs	r2, r3, #4
 800680e:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006810:	4013      	ands	r3, r2
 8006812:	4a02      	ldr	r2, [pc, #8]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006814:	430b      	orrs	r3, r1
 8006816:	6113      	str	r3, [r2, #16]
 8006818:	e00c      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800681a:	bf00      	nop
 800681c:	58024400 	.word	0x58024400
 8006820:	58024800 	.word	0x58024800
 8006824:	00ffffcf 	.word	0x00ffffcf
 8006828:	4bd4      	ldr	r3, [pc, #848]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	4ad3      	ldr	r2, [pc, #844]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800682e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006832:	6113      	str	r3, [r2, #16]
 8006834:	4bd1      	ldr	r3, [pc, #836]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006836:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800683c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006844:	4acd      	ldr	r2, [pc, #820]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006846:	430b      	orrs	r3, r1
 8006848:	6713      	str	r3, [r2, #112]	@ 0x70
 800684a:	e008      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800684c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006850:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800685a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800685e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f002 0301 	and.w	r3, r2, #1
 800686a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	f000 808b 	beq.w	8006996 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006880:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006888:	2b28      	cmp	r3, #40	@ 0x28
 800688a:	d86b      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800688c:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	0800696d 	.word	0x0800696d
 8006898:	08006965 	.word	0x08006965
 800689c:	08006965 	.word	0x08006965
 80068a0:	08006965 	.word	0x08006965
 80068a4:	08006965 	.word	0x08006965
 80068a8:	08006965 	.word	0x08006965
 80068ac:	08006965 	.word	0x08006965
 80068b0:	08006965 	.word	0x08006965
 80068b4:	08006939 	.word	0x08006939
 80068b8:	08006965 	.word	0x08006965
 80068bc:	08006965 	.word	0x08006965
 80068c0:	08006965 	.word	0x08006965
 80068c4:	08006965 	.word	0x08006965
 80068c8:	08006965 	.word	0x08006965
 80068cc:	08006965 	.word	0x08006965
 80068d0:	08006965 	.word	0x08006965
 80068d4:	0800694f 	.word	0x0800694f
 80068d8:	08006965 	.word	0x08006965
 80068dc:	08006965 	.word	0x08006965
 80068e0:	08006965 	.word	0x08006965
 80068e4:	08006965 	.word	0x08006965
 80068e8:	08006965 	.word	0x08006965
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006965 	.word	0x08006965
 80068f4:	0800696d 	.word	0x0800696d
 80068f8:	08006965 	.word	0x08006965
 80068fc:	08006965 	.word	0x08006965
 8006900:	08006965 	.word	0x08006965
 8006904:	08006965 	.word	0x08006965
 8006908:	08006965 	.word	0x08006965
 800690c:	08006965 	.word	0x08006965
 8006910:	08006965 	.word	0x08006965
 8006914:	0800696d 	.word	0x0800696d
 8006918:	08006965 	.word	0x08006965
 800691c:	08006965 	.word	0x08006965
 8006920:	08006965 	.word	0x08006965
 8006924:	08006965 	.word	0x08006965
 8006928:	08006965 	.word	0x08006965
 800692c:	08006965 	.word	0x08006965
 8006930:	08006965 	.word	0x08006965
 8006934:	0800696d 	.word	0x0800696d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800693c:	3308      	adds	r3, #8
 800693e:	2101      	movs	r1, #1
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fe97 	bl	8008674 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800694c:	e00f      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800694e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006952:	3328      	adds	r3, #40	@ 0x28
 8006954:	2101      	movs	r1, #1
 8006956:	4618      	mov	r0, r3
 8006958:	f001 ff3e 	bl	80087d8 <RCCEx_PLL3_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006976:	4b81      	ldr	r3, [pc, #516]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800697e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006986:	4a7d      	ldr	r2, [pc, #500]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006988:	430b      	orrs	r3, r1
 800698a:	6553      	str	r3, [r2, #84]	@ 0x54
 800698c:	e003      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006992:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f002 0302 	and.w	r3, r2, #2
 80069a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069a6:	2300      	movs	r3, #0
 80069a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80069ac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d042      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80069b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069bc:	2b05      	cmp	r3, #5
 80069be:	d825      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80069c0:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	08006a15 	.word	0x08006a15
 80069cc:	080069e1 	.word	0x080069e1
 80069d0:	080069f7 	.word	0x080069f7
 80069d4:	08006a15 	.word	0x08006a15
 80069d8:	08006a15 	.word	0x08006a15
 80069dc:	08006a15 	.word	0x08006a15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069e4:	3308      	adds	r3, #8
 80069e6:	2101      	movs	r1, #1
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fe43 	bl	8008674 <RCCEx_PLL2_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80069f4:	e00f      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069fa:	3328      	adds	r3, #40	@ 0x28
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 feea 	bl	80087d8 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e004      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a12:	e000      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a1e:	4b57      	ldr	r3, [pc, #348]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	f023 0107 	bic.w	r1, r3, #7
 8006a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a2c:	4a53      	ldr	r2, [pc, #332]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 0304 	and.w	r3, r2, #4
 8006a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d044      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	d825      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006a68:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006a89 	.word	0x08006a89
 8006a78:	08006a9f 	.word	0x08006a9f
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fdef 	bl	8008674 <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e00f      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 fe96 	bl	80087d8 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aca:	f023 0107 	bic.w	r1, r3, #7
 8006ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ad6:	4a29      	ldr	r2, [pc, #164]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8006adc:	e003      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ade:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ae2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f002 0320 	and.w	r3, r2, #32
 8006af2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006afc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b00:	460b      	mov	r3, r1
 8006b02:	4313      	orrs	r3, r2
 8006b04:	d057      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b12:	d035      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b18:	d82c      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1e:	d031      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b24:	d826      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006b26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b2a:	d02d      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006b2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b30:	d820      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b36:	d012      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b3c:	d81a      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d024      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b46:	d115      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fd8f 	bl	8008674 <RCCEx_PLL2_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b5c:	e017      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b62:	3328      	adds	r3, #40	@ 0x28
 8006b64:	2102      	movs	r1, #2
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 fe36 	bl	80087d8 <RCCEx_PLL3_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b72:	e00c      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006b7a:	e008      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006b7c:	58024400 	.word	0x58024400
        break;
 8006b80:	bf00      	nop
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b96:	4bc2      	ldr	r3, [pc, #776]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba6:	4abe      	ldr	r2, [pc, #760]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006bcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d055      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006be2:	d033      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006be4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006be8:	d82c      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bee:	d02f      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf4:	d826      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006bf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bfa:	d02b      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006bfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c00:	d820      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c06:	d012      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c0c:	d81a      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d022      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c16:	d115      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 fd27 	bl	8008674 <RCCEx_PLL2_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c2c:	e015      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c32:	3328      	adds	r3, #40	@ 0x28
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fdce 	bl	80087d8 <RCCEx_PLL3_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c42:	e00a      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c4a:	e006      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006c4c:	bf00      	nop
 8006c4e:	e004      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c62:	4b8f      	ldr	r3, [pc, #572]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c72:	4a8b      	ldr	r2, [pc, #556]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c78:	e003      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006c8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c92:	2300      	movs	r3, #0
 8006c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d055      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006caa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006cae:	d033      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006cb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006cb4:	d82c      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cba:	d02f      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc0:	d826      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006cc2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006cc6:	d02b      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006cc8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ccc:	d820      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd2:	d012      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd8:	d81a      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d022      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce2:	d115      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ce8:	3308      	adds	r3, #8
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fcc1 	bl	8008674 <RCCEx_PLL2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006cf8:	e015      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cfe:	3328      	adds	r3, #40	@ 0x28
 8006d00:	2102      	movs	r1, #2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fd68 	bl	80087d8 <RCCEx_PLL3_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006d16:	e006      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e004      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e002      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006d20:	bf00      	nop
 8006d22:	e000      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d32:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d3e:	4a58      	ldr	r2, [pc, #352]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f002 0308 	and.w	r3, r2, #8
 8006d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d64:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	d01e      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d7a:	d10c      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d80:	3328      	adds	r3, #40	@ 0x28
 8006d82:	2102      	movs	r1, #2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 fd27 	bl	80087d8 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d96:	4b42      	ldr	r3, [pc, #264]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da6:	4a3e      	ldr	r2, [pc, #248]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f002 0310 	and.w	r3, r2, #16
 8006db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006dc2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	d01e      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dde:	3328      	adds	r3, #40	@ 0x28
 8006de0:	2102      	movs	r1, #2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fcf8 	bl	80087d8 <RCCEx_PLL3_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006df4:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e04:	4a26      	ldr	r2, [pc, #152]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e06:	430b      	orrs	r3, r1
 8006e08:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006e16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e20:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006e24:	460b      	mov	r3, r1
 8006e26:	4313      	orrs	r3, r2
 8006e28:	d040      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e36:	d022      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e3c:	d81b      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e46:	d00b      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006e48:	e015      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e4e:	3308      	adds	r3, #8
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fc0e 	bl	8008674 <RCCEx_PLL2_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e5e:	e00f      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e64:	3328      	adds	r3, #40	@ 0x28
 8006e66:	2102      	movs	r1, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fcb5 	bl	80087d8 <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e74:	e004      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e98:	4a01      	ldr	r2, [pc, #4]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e9e:	e005      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006ea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ea8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006eba:	2300      	movs	r3, #0
 8006ebc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ebe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d03b      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ed0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ed4:	d01f      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006ed6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eda:	d818      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006edc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006ee2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ee6:	d007      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006ee8:	e011      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eea:	4b64      	ldr	r3, [pc, #400]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	4a63      	ldr	r2, [pc, #396]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ef6:	e00f      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006efc:	3328      	adds	r3, #40	@ 0x28
 8006efe:	2101      	movs	r1, #1
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 fc69 	bl	80087d8 <RCCEx_PLL3_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f0c:	e004      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f14:	e000      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f20:	4b56      	ldr	r3, [pc, #344]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f24:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f30:	4a52      	ldr	r2, [pc, #328]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f32:	430b      	orrs	r3, r1
 8006f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f36:	e003      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f4e:	2300      	movs	r3, #0
 8006f50:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f52:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006f56:	460b      	mov	r3, r1
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	d031      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6a:	d007      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006f6c:	e011      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6e:	4b43      	ldr	r3, [pc, #268]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4a42      	ldr	r2, [pc, #264]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f7a:	e00e      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f80:	3308      	adds	r3, #8
 8006f82:	2102      	movs	r1, #2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fb75 	bl	8008674 <RCCEx_PLL2_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fa2:	4b36      	ldr	r3, [pc, #216]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb0:	4a32      	ldr	r2, [pc, #200]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fb6:	e003      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fbc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fce:	2300      	movs	r3, #0
 8006fd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	d00c      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fe0:	3328      	adds	r3, #40	@ 0x28
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 fbf7 	bl	80087d8 <RCCEx_PLL3_Config>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007002:	663b      	str	r3, [r7, #96]	@ 0x60
 8007004:	2300      	movs	r3, #0
 8007006:	667b      	str	r3, [r7, #100]	@ 0x64
 8007008:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800700c:	460b      	mov	r3, r1
 800700e:	4313      	orrs	r3, r2
 8007010:	d03a      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800701a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800701e:	d018      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8007020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007024:	d811      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8007026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800702a:	d014      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800702c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007030:	d80b      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8007036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800703a:	d106      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703c:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	4a0e      	ldr	r2, [pc, #56]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007048:	e008      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007050:	e004      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800705a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10d      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007064:	4b05      	ldr	r3, [pc, #20]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007068:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800706c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007074:	4a01      	ldr	r2, [pc, #4]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007076:	430b      	orrs	r3, r1
 8007078:	6553      	str	r3, [r2, #84]	@ 0x54
 800707a:	e005      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800707c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007080:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007084:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007094:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007096:	2300      	movs	r3, #0
 8007098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800709a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800709e:	460b      	mov	r3, r1
 80070a0:	4313      	orrs	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070a4:	4baa      	ldr	r3, [pc, #680]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80070ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070b2:	4aa7      	ldr	r2, [pc, #668]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070b4:	430b      	orrs	r3, r1
 80070b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80070b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80070c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80070c6:	2300      	movs	r3, #0
 80070c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80070ce:	460b      	mov	r3, r1
 80070d0:	4313      	orrs	r3, r2
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070d4:	4b9e      	ldr	r3, [pc, #632]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80070dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070e4:	4a9a      	ldr	r2, [pc, #616]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070e6:	430b      	orrs	r3, r1
 80070e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80070f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f8:	2300      	movs	r3, #0
 80070fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007100:	460b      	mov	r3, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	d009      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007106:	4b92      	ldr	r3, [pc, #584]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800710e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007114:	4a8e      	ldr	r2, [pc, #568]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007116:	430b      	orrs	r3, r1
 8007118:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800711a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007126:	643b      	str	r3, [r7, #64]	@ 0x40
 8007128:	2300      	movs	r3, #0
 800712a:	647b      	str	r3, [r7, #68]	@ 0x44
 800712c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007130:	460b      	mov	r3, r1
 8007132:	4313      	orrs	r3, r2
 8007134:	d00e      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007136:	4b86      	ldr	r3, [pc, #536]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	4a85      	ldr	r2, [pc, #532]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800713c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007140:	6113      	str	r3, [r2, #16]
 8007142:	4b83      	ldr	r3, [pc, #524]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007144:	6919      	ldr	r1, [r3, #16]
 8007146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800714a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800714e:	4a80      	ldr	r2, [pc, #512]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007150:	430b      	orrs	r3, r1
 8007152:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007162:	2300      	movs	r3, #0
 8007164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007166:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007170:	4b77      	ldr	r3, [pc, #476]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007174:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	4a74      	ldr	r2, [pc, #464]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007180:	430b      	orrs	r3, r1
 8007182:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30
 8007192:	2300      	movs	r3, #0
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071a0:	4b6b      	ldr	r3, [pc, #428]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80071a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	4a67      	ldr	r2, [pc, #412]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071b2:	430b      	orrs	r3, r1
 80071b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80071b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	2100      	movs	r1, #0
 80071c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80071cc:	460b      	mov	r3, r1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	d011      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071d6:	3308      	adds	r3, #8
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fa4a 	bl	8008674 <RCCEx_PLL2_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80071e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80071f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	2100      	movs	r1, #0
 8007200:	6239      	str	r1, [r7, #32]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	627b      	str	r3, [r7, #36]	@ 0x24
 8007208:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d011      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007216:	3308      	adds	r3, #8
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fa2a 	bl	8008674 <RCCEx_PLL2_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8007226:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007232:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007236:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	2100      	movs	r1, #0
 8007240:	61b9      	str	r1, [r7, #24]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d011      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007256:	3308      	adds	r3, #8
 8007258:	2102      	movs	r1, #2
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fa0a 	bl	8008674 <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8007266:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007272:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	2100      	movs	r1, #0
 8007280:	6139      	str	r1, [r7, #16]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d011      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007296:	3328      	adds	r3, #40	@ 0x28
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fa9c 	bl	80087d8 <RCCEx_PLL3_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80072a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80072b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	2100      	movs	r1, #0
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072cc:	460b      	mov	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	d011      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072d6:	3328      	adds	r3, #40	@ 0x28
 80072d8:	2101      	movs	r1, #1
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fa7c 	bl	80087d8 <RCCEx_PLL3_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80072e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80072f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	2100      	movs	r1, #0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	e9d7 1200 	ldrd	r1, r2, [r7]
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d011      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007316:	3328      	adds	r3, #40	@ 0x28
 8007318:	2102      	movs	r1, #2
 800731a:	4618      	mov	r0, r3
 800731c:	f001 fa5c 	bl	80087d8 <RCCEx_PLL3_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8007326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007332:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8007336:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
}
 8007344:	4618      	mov	r0, r3
 8007346:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800734a:	46bd      	mov	sp, r7
 800734c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007350:	58024400 	.word	0x58024400

08007354 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b090      	sub	sp, #64	@ 0x40
 8007358:	af00      	add	r7, sp, #0
 800735a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800735e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007362:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007366:	430b      	orrs	r3, r1
 8007368:	f040 8094 	bne.w	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800736c:	4b9e      	ldr	r3, [pc, #632]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800736e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2b04      	cmp	r3, #4
 800737a:	f200 8087 	bhi.w	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800737e:	a201      	add	r2, pc, #4	@ (adr r2, 8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	08007399 	.word	0x08007399
 8007388:	080073c1 	.word	0x080073c1
 800738c:	080073e9 	.word	0x080073e9
 8007390:	08007485 	.word	0x08007485
 8007394:	08007411 	.word	0x08007411
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007398:	4b93      	ldr	r3, [pc, #588]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073a4:	d108      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 f810 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b4:	f000 bd45 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073bc:	f000 bd41 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073c0:	4b89      	ldr	r3, [pc, #548]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073cc:	d108      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ce:	f107 0318 	add.w	r3, r7, #24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fd54 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073dc:	f000 bd31 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e4:	f000 bd2d 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073e8:	4b7f      	ldr	r3, [pc, #508]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073f4:	d108      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fe94 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007404:	f000 bd1d 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740c:	f000 bd19 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007410:	4b75      	ldr	r3, [pc, #468]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007414:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800741a:	4b73      	ldr	r3, [pc, #460]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b04      	cmp	r3, #4
 8007424:	d10c      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800742c:	4b6e      	ldr	r3, [pc, #440]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	08db      	lsrs	r3, r3, #3
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	4a6d      	ldr	r2, [pc, #436]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007438:	fa22 f303 	lsr.w	r3, r2, r3
 800743c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800743e:	e01f      	b.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007440:	4b69      	ldr	r3, [pc, #420]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800744c:	d106      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007454:	d102      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007456:	4b66      	ldr	r3, [pc, #408]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800745a:	e011      	b.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800745c:	4b62      	ldr	r3, [pc, #392]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007468:	d106      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007470:	d102      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007472:	4b60      	ldr	r3, [pc, #384]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007476:	e003      	b.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800747c:	f000 bce1 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007480:	f000 bcdf 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007484:	4b5c      	ldr	r3, [pc, #368]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007488:	f000 bcdb 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007490:	f000 bcd7 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007498:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800749c:	430b      	orrs	r3, r1
 800749e:	f040 80ad 	bne.w	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80074a2:	4b51      	ldr	r3, [pc, #324]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80074aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074b2:	d056      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ba:	f200 8090 	bhi.w	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80074c2:	f000 8088 	beq.w	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80074ca:	f200 8088 	bhi.w	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	2b80      	cmp	r3, #128	@ 0x80
 80074d2:	d032      	beq.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	2b80      	cmp	r3, #128	@ 0x80
 80074d8:	f200 8081 	bhi.w	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	2b40      	cmp	r3, #64	@ 0x40
 80074e6:	d014      	beq.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80074e8:	e079      	b.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074ea:	4b3f      	ldr	r3, [pc, #252]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074f6:	d108      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 ff67 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007506:	f000 bc9c 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750e:	f000 bc98 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007512:	4b35      	ldr	r3, [pc, #212]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800751a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800751e:	d108      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007520:	f107 0318 	add.w	r3, r7, #24
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fcab 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800752e:	f000 bc88 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007536:	f000 bc84 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800753a:	4b2b      	ldr	r3, [pc, #172]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007546:	d108      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fdeb 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007556:	f000 bc74 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800755e:	f000 bc70 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007562:	4b21      	ldr	r3, [pc, #132]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800756c:	4b1e      	ldr	r3, [pc, #120]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b04      	cmp	r3, #4
 8007576:	d10c      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800757e:	4b1a      	ldr	r3, [pc, #104]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	4a18      	ldr	r2, [pc, #96]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007590:	e01f      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007592:	4b15      	ldr	r3, [pc, #84]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800759e:	d106      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80075a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a6:	d102      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075a8:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ac:	e011      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ba:	d106      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80075bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c2:	d102      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80075c4:	4b0b      	ldr	r3, [pc, #44]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80075ce:	f000 bc38 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075d2:	f000 bc36 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80075d6:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075da:	f000 bc32 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e2:	f000 bc2e 	b.w	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
 80075ec:	03d09000 	.word	0x03d09000
 80075f0:	003d0900 	.word	0x003d0900
 80075f4:	017d7840 	.word	0x017d7840
 80075f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80075fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007600:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007604:	430b      	orrs	r3, r1
 8007606:	f040 809c 	bne.w	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800760a:	4b9e      	ldr	r3, [pc, #632]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800760c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007612:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800761a:	d054      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007622:	f200 808b 	bhi.w	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800762c:	f000 8083 	beq.w	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007636:	f200 8081 	bhi.w	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007640:	d02f      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007648:	d878      	bhi.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007656:	d012      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007658:	e070      	b.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800765a:	4b8a      	ldr	r3, [pc, #552]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007666:	d107      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f000 feaf 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007676:	e3e4      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767c:	e3e1      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800767e:	4b81      	ldr	r3, [pc, #516]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800768a:	d107      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768c:	f107 0318 	add.w	r3, r7, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fbf5 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800769a:	e3d2      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	e3cf      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076a2:	4b78      	ldr	r3, [pc, #480]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ae:	d107      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b0:	f107 030c 	add.w	r3, r7, #12
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fd37 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076be:	e3c0      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c4:	e3bd      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076c6:	4b6f      	ldr	r3, [pc, #444]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076d0:	4b6c      	ldr	r3, [pc, #432]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d10c      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076e2:	4b68      	ldr	r3, [pc, #416]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	08db      	lsrs	r3, r3, #3
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	4a66      	ldr	r2, [pc, #408]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80076ee:	fa22 f303 	lsr.w	r3, r2, r3
 80076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076f4:	e01e      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076f6:	4b63      	ldr	r3, [pc, #396]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007702:	d106      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800770a:	d102      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800770c:	4b5f      	ldr	r3, [pc, #380]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007710:	e010      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007712:	4b5c      	ldr	r3, [pc, #368]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800771a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800771e:	d106      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007726:	d102      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007728:	4b59      	ldr	r3, [pc, #356]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800772c:	e002      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007732:	e386      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007734:	e385      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007736:	4b57      	ldr	r3, [pc, #348]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773a:	e382      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007740:	e37f      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007746:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800774a:	430b      	orrs	r3, r1
 800774c:	f040 80a7 	bne.w	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007750:	4b4c      	ldr	r3, [pc, #304]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007754:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007758:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007760:	d055      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007768:	f200 8096 	bhi.w	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007772:	f000 8084 	beq.w	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800777c:	f200 808c 	bhi.w	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007786:	d030      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800778e:	f200 8083 	bhi.w	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800779e:	d012      	beq.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80077a0:	e07a      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077a2:	4b38      	ldr	r3, [pc, #224]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077ae:	d107      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fe0b 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077be:	e340      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c4:	e33d      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d2:	d107      	bne.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d4:	f107 0318 	add.w	r3, r7, #24
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fb51 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e2:	e32e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e8:	e32b      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077ea:	4b26      	ldr	r3, [pc, #152]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f6:	d107      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077f8:	f107 030c 	add.w	r3, r7, #12
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fc93 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007806:	e31c      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800780c:	e319      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800780e:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b04      	cmp	r3, #4
 8007822:	d10c      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800782a:	4b16      	ldr	r3, [pc, #88]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	08db      	lsrs	r3, r3, #3
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	4a14      	ldr	r2, [pc, #80]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800783c:	e01e      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800783e:	4b11      	ldr	r3, [pc, #68]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784a:	d106      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007852:	d102      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007854:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007858:	e010      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800785a:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007866:	d106      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786e:	d102      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007870:	4b07      	ldr	r3, [pc, #28]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007874:	e002      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800787a:	e2e2      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800787c:	e2e1      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800787e:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007882:	e2de      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007884:	58024400 	.word	0x58024400
 8007888:	03d09000 	.word	0x03d09000
 800788c:	003d0900 	.word	0x003d0900
 8007890:	017d7840 	.word	0x017d7840
 8007894:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789c:	e2d1      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800789e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80078a6:	430b      	orrs	r3, r1
 80078a8:	f040 809c 	bne.w	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80078ac:	4b93      	ldr	r3, [pc, #588]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80078b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078bc:	d054      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078c4:	f200 808b 	bhi.w	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078ce:	f000 8083 	beq.w	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078d8:	f200 8081 	bhi.w	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e2:	d02f      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ea:	d878      	bhi.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f8:	d012      	beq.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80078fa:	e070      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078fc:	4b7f      	ldr	r3, [pc, #508]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007908:	d107      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800790a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fd5e 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007918:	e293      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791e:	e290      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007920:	4b76      	ldr	r3, [pc, #472]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800792c:	d107      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800792e:	f107 0318 	add.w	r3, r7, #24
 8007932:	4618      	mov	r0, r3
 8007934:	f000 faa4 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800793c:	e281      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007942:	e27e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007944:	4b6d      	ldr	r3, [pc, #436]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800794c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007950:	d107      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007952:	f107 030c 	add.w	r3, r7, #12
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fbe6 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007960:	e26f      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007966:	e26c      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007968:	4b64      	ldr	r3, [pc, #400]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800796a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800796c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007970:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007972:	4b62      	ldr	r3, [pc, #392]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b04      	cmp	r3, #4
 800797c:	d10c      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800797e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007984:	4b5d      	ldr	r3, [pc, #372]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	08db      	lsrs	r3, r3, #3
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	4a5c      	ldr	r2, [pc, #368]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007996:	e01e      	b.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007998:	4b58      	ldr	r3, [pc, #352]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a4:	d106      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ac:	d102      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079ae:	4b55      	ldr	r3, [pc, #340]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b2:	e010      	b.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079b4:	4b51      	ldr	r3, [pc, #324]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079c0:	d106      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80079c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c8:	d102      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80079cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079ce:	e002      	b.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079d4:	e235      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079d6:	e234      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079d8:	4b4c      	ldr	r3, [pc, #304]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079dc:	e231      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e2:	e22e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80079e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80079ec:	430b      	orrs	r3, r1
 80079ee:	f040 808f 	bne.w	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80079f2:	4b42      	ldr	r3, [pc, #264]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80079fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a02:	d06b      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a0a:	d874      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a12:	d056      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a1a:	d86c      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a22:	d03b      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a2a:	d864      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a32:	d021      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3a:	d85c      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a48:	d004      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007a4a:	e054      	b.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fe fa0c 	bl	8005e68 <HAL_RCC_GetPCLK1Freq>
 8007a50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a52:	e1f6      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a54:	4b29      	ldr	r3, [pc, #164]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a60:	d107      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a62:	f107 0318 	add.w	r3, r7, #24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fa0a 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a70:	e1e7      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a76:	e1e4      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a78:	4b20      	ldr	r3, [pc, #128]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a84:	d107      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fb4c 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a94:	e1d5      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9a:	e1d2      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a9c:	4b17      	ldr	r3, [pc, #92]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d109      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aa8:	4b14      	ldr	r3, [pc, #80]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	08db      	lsrs	r3, r3, #3
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	4a13      	ldr	r2, [pc, #76]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aba:	e1c2      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac0:	e1bf      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ace:	d102      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad4:	e1b5      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ada:	e1b2      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007adc:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ae8:	d102      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007aea:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aee:	e1a8      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af4:	e1a5      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afa:	e1a2      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007afc:	58024400 	.word	0x58024400
 8007b00:	03d09000 	.word	0x03d09000
 8007b04:	003d0900 	.word	0x003d0900
 8007b08:	017d7840 	.word	0x017d7840
 8007b0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	d173      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b2c:	d02f      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b34:	d863      	bhi.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b42:	d012      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007b44:	e05b      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b46:	4b92      	ldr	r3, [pc, #584]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b52:	d107      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b54:	f107 0318 	add.w	r3, r7, #24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f991 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b62:	e16e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	e16b      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b6a:	4b89      	ldr	r3, [pc, #548]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b76:	d107      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fad3 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b86:	e15c      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8c:	e159      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b8e:	4b80      	ldr	r3, [pc, #512]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b98:	4b7d      	ldr	r3, [pc, #500]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d10c      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007baa:	4b79      	ldr	r3, [pc, #484]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	08db      	lsrs	r3, r3, #3
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	4a77      	ldr	r2, [pc, #476]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bbc:	e01e      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bbe:	4b74      	ldr	r3, [pc, #464]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bca:	d106      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bd2:	d102      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007bd4:	4b70      	ldr	r3, [pc, #448]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd8:	e010      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bda:	4b6d      	ldr	r3, [pc, #436]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bf4:	e002      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007bfa:	e122      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bfc:	e121      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c02:	e11e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c08:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	d133      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c10:	4b5f      	ldr	r3, [pc, #380]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c26:	d012      	beq.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007c28:	e023      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c2a:	4b59      	ldr	r3, [pc, #356]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c36:	d107      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fbc7 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c46:	e0fc      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4c:	e0f9      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c4e:	4b50      	ldr	r3, [pc, #320]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5c:	f107 0318 	add.w	r3, r7, #24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 f90d 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6a:	e0ea      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	e0e7      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c76:	e0e4      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007c80:	430b      	orrs	r3, r1
 8007c82:	f040 808d 	bne.w	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007c86:	4b42      	ldr	r3, [pc, #264]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c8a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007c8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c96:	d06b      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c9e:	d874      	bhi.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca6:	d056      	beq.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cae:	d86c      	bhi.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cb6:	d03b      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cbe:	d864      	bhi.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc6:	d021      	beq.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cce:	d85c      	bhi.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cdc:	d004      	beq.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007cde:	e054      	b.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ce0:	f000 f8b8 	bl	8007e54 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ce4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ce6:	e0ac      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ce8:	4b29      	ldr	r3, [pc, #164]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf4:	d107      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf6:	f107 0318 	add.w	r3, r7, #24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f8c0 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d04:	e09d      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0a:	e09a      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d0c:	4b20      	ldr	r3, [pc, #128]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d18:	d107      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d1a:	f107 030c 	add.w	r3, r7, #12
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fa02 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d28:	e08b      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2e:	e088      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d30:	4b17      	ldr	r3, [pc, #92]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d109      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d3c:	4b14      	ldr	r3, [pc, #80]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	08db      	lsrs	r3, r3, #3
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	4a13      	ldr	r2, [pc, #76]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007d48:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d4e:	e078      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d54:	e075      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d56:	4b0e      	ldr	r3, [pc, #56]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d68:	e06b      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d6e:	e068      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d70:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d7c:	d102      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007d7e:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d82:	e05e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d88:	e05b      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d8e:	e058      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d90:	58024400 	.word	0x58024400
 8007d94:	03d09000 	.word	0x03d09000
 8007d98:	003d0900 	.word	0x003d0900
 8007d9c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007da8:	430b      	orrs	r3, r1
 8007daa:	d148      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007dac:	4b27      	ldr	r3, [pc, #156]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007db4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dbc:	d02a      	beq.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc4:	d838      	bhi.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dd2:	d00d      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007dd4:	e030      	b.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de2:	d102      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007de4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007de8:	e02b      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dee:	e028      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007df0:	4b16      	ldr	r3, [pc, #88]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dfc:	d107      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fae4 	bl	80083d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0c:	e019      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e12:	e016      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e14:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e20:	d107      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e22:	f107 0318 	add.w	r3, r7, #24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f82a 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e30:	e007      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e36:	e004      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3c:	e001      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3740      	adds	r7, #64	@ 0x40
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	58024400 	.word	0x58024400
 8007e50:	017d7840 	.word	0x017d7840

08007e54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e58:	f7fd ffd6 	bl	8005e08 <HAL_RCC_GetHCLKFreq>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	091b      	lsrs	r3, r3, #4
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	4904      	ldr	r1, [pc, #16]	@ (8007e7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e6a:	5ccb      	ldrb	r3, [r1, r3]
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	0800f498 	.word	0x0800f498

08007e80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b089      	sub	sp, #36	@ 0x24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e88:	4ba1      	ldr	r3, [pc, #644]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007e92:	4b9f      	ldr	r3, [pc, #636]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e96:	0b1b      	lsrs	r3, r3, #12
 8007e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	091b      	lsrs	r3, r3, #4
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007eaa:	4b99      	ldr	r3, [pc, #612]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eae:	08db      	lsrs	r3, r3, #3
 8007eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 8111 	beq.w	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	f000 8083 	beq.w	8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	f200 80a1 	bhi.w	8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d056      	beq.n	8007f98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007eea:	e099      	b.n	8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eec:	4b88      	ldr	r3, [pc, #544]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02d      	beq.n	8007f54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef8:	4b85      	ldr	r3, [pc, #532]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	08db      	lsrs	r3, r3, #3
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	4a84      	ldr	r2, [pc, #528]	@ (8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f04:	fa22 f303 	lsr.w	r3, r2, r3
 8007f08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b7b      	ldr	r3, [pc, #492]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f52:	e087      	b.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800811c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f66:	4b6a      	ldr	r3, [pc, #424]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f96:	e065      	b.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007faa:	4b59      	ldr	r3, [pc, #356]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fda:	e043      	b.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	ee07 3a90 	vmov	s15, r3
 8007fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fee:	4b48      	ldr	r3, [pc, #288]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800801e:	e021      	b.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008032:	4b37      	ldr	r3, [pc, #220]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008042:	ed97 6a03 	vldr	s12, [r7, #12]
 8008046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008064:	4b2a      	ldr	r3, [pc, #168]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	0a5b      	lsrs	r3, r3, #9
 800806a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800807a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800807e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808a:	ee17 2a90 	vmov	r2, s15
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008092:	4b1f      	ldr	r3, [pc, #124]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008096:	0c1b      	lsrs	r3, r3, #16
 8008098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800809c:	ee07 3a90 	vmov	s15, r3
 80080a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b8:	ee17 2a90 	vmov	r2, s15
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80080c0:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	0e1b      	lsrs	r3, r3, #24
 80080c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080da:	edd7 6a07 	vldr	s13, [r7, #28]
 80080de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e6:	ee17 2a90 	vmov	r2, s15
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80080ee:	e008      	b.n	8008102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	609a      	str	r2, [r3, #8]
}
 8008102:	bf00      	nop
 8008104:	3724      	adds	r7, #36	@ 0x24
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	46000000 	.word	0x46000000
 800811c:	4c742400 	.word	0x4c742400
 8008120:	4a742400 	.word	0x4a742400
 8008124:	4bbebc20 	.word	0x4bbebc20

08008128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008128:	b480      	push	{r7}
 800812a:	b089      	sub	sp, #36	@ 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008130:	4ba1      	ldr	r3, [pc, #644]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008134:	f003 0303 	and.w	r3, r3, #3
 8008138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800813a:	4b9f      	ldr	r3, [pc, #636]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	0d1b      	lsrs	r3, r3, #20
 8008140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008146:	4b9c      	ldr	r3, [pc, #624]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008152:	4b99      	ldr	r3, [pc, #612]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008156:	08db      	lsrs	r3, r3, #3
 8008158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	fb02 f303 	mul.w	r3, r2, r3
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 8111 	beq.w	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	2b02      	cmp	r3, #2
 800817a:	f000 8083 	beq.w	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b02      	cmp	r3, #2
 8008182:	f200 80a1 	bhi.w	80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d056      	beq.n	8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008192:	e099      	b.n	80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008194:	4b88      	ldr	r3, [pc, #544]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d02d      	beq.n	80081fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081a0:	4b85      	ldr	r3, [pc, #532]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	08db      	lsrs	r3, r3, #3
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	4a84      	ldr	r2, [pc, #528]	@ (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
 80081b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	ee07 3a90 	vmov	s15, r3
 80081b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ca:	4b7b      	ldr	r3, [pc, #492]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	ed97 6a03 	vldr	s12, [r7, #12]
 80081de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081fa:	e087      	b.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800820a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820e:	4b6a      	ldr	r3, [pc, #424]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008222:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823e:	e065      	b.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	4b59      	ldr	r3, [pc, #356]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008262:	ed97 6a03 	vldr	s12, [r7, #12]
 8008266:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800826a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008282:	e043      	b.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008296:	4b48      	ldr	r3, [pc, #288]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c6:	e021      	b.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082da:	4b37      	ldr	r3, [pc, #220]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800830a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800830c:	4b2a      	ldr	r3, [pc, #168]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008310:	0a5b      	lsrs	r3, r3, #9
 8008312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008326:	edd7 6a07 	vldr	s13, [r7, #28]
 800832a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800832e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008332:	ee17 2a90 	vmov	r2, s15
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800833a:	4b1f      	ldr	r3, [pc, #124]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	0c1b      	lsrs	r3, r3, #16
 8008340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008354:	edd7 6a07 	vldr	s13, [r7, #28]
 8008358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008360:	ee17 2a90 	vmov	r2, s15
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008368:	4b13      	ldr	r3, [pc, #76]	@ (80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	0e1b      	lsrs	r3, r3, #24
 800836e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800837e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008382:	edd7 6a07 	vldr	s13, [r7, #28]
 8008386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800838e:	ee17 2a90 	vmov	r2, s15
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008396:	e008      	b.n	80083aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
}
 80083aa:	bf00      	nop
 80083ac:	3724      	adds	r7, #36	@ 0x24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	58024400 	.word	0x58024400
 80083bc:	03d09000 	.word	0x03d09000
 80083c0:	46000000 	.word	0x46000000
 80083c4:	4c742400 	.word	0x4c742400
 80083c8:	4a742400 	.word	0x4a742400
 80083cc:	4bbebc20 	.word	0x4bbebc20

080083d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b089      	sub	sp, #36	@ 0x24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083d8:	4ba0      	ldr	r3, [pc, #640]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80083e2:	4b9e      	ldr	r3, [pc, #632]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80083ee:	4b9b      	ldr	r3, [pc, #620]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083f8:	4b98      	ldr	r3, [pc, #608]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	fb02 f303 	mul.w	r3, r2, r3
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008410:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 8111 	beq.w	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b02      	cmp	r3, #2
 8008420:	f000 8083 	beq.w	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	2b02      	cmp	r3, #2
 8008428:	f200 80a1 	bhi.w	800856e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d056      	beq.n	80084e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008438:	e099      	b.n	800856e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800843a:	4b88      	ldr	r3, [pc, #544]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d02d      	beq.n	80084a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008446:	4b85      	ldr	r3, [pc, #532]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	08db      	lsrs	r3, r3, #3
 800844c:	f003 0303 	and.w	r3, r3, #3
 8008450:	4a83      	ldr	r2, [pc, #524]	@ (8008660 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008452:	fa22 f303 	lsr.w	r3, r2, r3
 8008456:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008470:	4b7a      	ldr	r3, [pc, #488]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008480:	ed97 6a03 	vldr	s12, [r7, #12]
 8008484:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084a0:	e087      	b.n	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80084b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b4:	4b69      	ldr	r3, [pc, #420]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084e4:	e065      	b.n	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800866c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80084f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f8:	4b58      	ldr	r3, [pc, #352]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008500:	ee07 3a90 	vmov	s15, r3
 8008504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008508:	ed97 6a03 	vldr	s12, [r7, #12]
 800850c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008528:	e043      	b.n	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008534:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008670 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853c:	4b47      	ldr	r3, [pc, #284]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800853e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008544:	ee07 3a90 	vmov	s15, r3
 8008548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008550:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800856c:	e021      	b.n	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008578:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800857c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008580:	4b36      	ldr	r3, [pc, #216]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008590:	ed97 6a03 	vldr	s12, [r7, #12]
 8008594:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80085b2:	4b2a      	ldr	r3, [pc, #168]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b6:	0a5b      	lsrs	r3, r3, #9
 80085b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085bc:	ee07 3a90 	vmov	s15, r3
 80085c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80085d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d8:	ee17 2a90 	vmov	r2, s15
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80085e0:	4b1e      	ldr	r3, [pc, #120]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e4:	0c1b      	lsrs	r3, r3, #16
 80085e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80085fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008606:	ee17 2a90 	vmov	r2, s15
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800860e:	4b13      	ldr	r3, [pc, #76]	@ (800865c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008612:	0e1b      	lsrs	r3, r3, #24
 8008614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008624:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008628:	edd7 6a07 	vldr	s13, [r7, #28]
 800862c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008634:	ee17 2a90 	vmov	r2, s15
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800863c:	e008      	b.n	8008650 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	609a      	str	r2, [r3, #8]
}
 8008650:	bf00      	nop
 8008652:	3724      	adds	r7, #36	@ 0x24
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	58024400 	.word	0x58024400
 8008660:	03d09000 	.word	0x03d09000
 8008664:	46000000 	.word	0x46000000
 8008668:	4c742400 	.word	0x4c742400
 800866c:	4a742400 	.word	0x4a742400
 8008670:	4bbebc20 	.word	0x4bbebc20

08008674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008682:	4b53      	ldr	r3, [pc, #332]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	2b03      	cmp	r3, #3
 800868c:	d101      	bne.n	8008692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e099      	b.n	80087c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008692:	4b4f      	ldr	r3, [pc, #316]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a4e      	ldr	r2, [pc, #312]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008698:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800869c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800869e:	f7f9 ff29 	bl	80024f4 <HAL_GetTick>
 80086a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086a4:	e008      	b.n	80086b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086a6:	f7f9 ff25 	bl	80024f4 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d901      	bls.n	80086b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e086      	b.n	80087c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086b8:	4b45      	ldr	r3, [pc, #276]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1f0      	bne.n	80086a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086c4:	4b42      	ldr	r3, [pc, #264]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 80086c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	031b      	lsls	r3, r3, #12
 80086d2:	493f      	ldr	r1, [pc, #252]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	3b01      	subs	r3, #1
 80086de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	025b      	lsls	r3, r3, #9
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	3b01      	subs	r3, #1
 8008702:	061b      	lsls	r3, r3, #24
 8008704:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008708:	4931      	ldr	r1, [pc, #196]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800870e:	4b30      	ldr	r3, [pc, #192]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008712:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	492d      	ldr	r1, [pc, #180]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800871c:	4313      	orrs	r3, r2
 800871e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008720:	4b2b      	ldr	r3, [pc, #172]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008724:	f023 0220 	bic.w	r2, r3, #32
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	4928      	ldr	r1, [pc, #160]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008732:	4b27      	ldr	r3, [pc, #156]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	4a26      	ldr	r2, [pc, #152]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008738:	f023 0310 	bic.w	r3, r3, #16
 800873c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800873e:	4b24      	ldr	r3, [pc, #144]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008742:	4b24      	ldr	r3, [pc, #144]	@ (80087d4 <RCCEx_PLL2_Config+0x160>)
 8008744:	4013      	ands	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	69d2      	ldr	r2, [r2, #28]
 800874a:	00d2      	lsls	r2, r2, #3
 800874c:	4920      	ldr	r1, [pc, #128]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800874e:	4313      	orrs	r3, r2
 8008750:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008752:	4b1f      	ldr	r3, [pc, #124]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008756:	4a1e      	ldr	r2, [pc, #120]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008758:	f043 0310 	orr.w	r3, r3, #16
 800875c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008764:	4b1a      	ldr	r3, [pc, #104]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008768:	4a19      	ldr	r2, [pc, #100]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800876a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800876e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008770:	e00f      	b.n	8008792 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d106      	bne.n	8008786 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008778:	4b15      	ldr	r3, [pc, #84]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877c:	4a14      	ldr	r2, [pc, #80]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800877e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008784:	e005      	b.n	8008792 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008786:	4b12      	ldr	r3, [pc, #72]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	4a11      	ldr	r2, [pc, #68]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 800878c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008790:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008792:	4b0f      	ldr	r3, [pc, #60]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a0e      	ldr	r2, [pc, #56]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 8008798:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800879c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800879e:	f7f9 fea9 	bl	80024f4 <HAL_GetTick>
 80087a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087a4:	e008      	b.n	80087b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087a6:	f7f9 fea5 	bl	80024f4 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e006      	b.n	80087c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087b8:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <RCCEx_PLL2_Config+0x15c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f0      	beq.n	80087a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
 80087d4:	ffff0007 	.word	0xffff0007

080087d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087e6:	4b53      	ldr	r3, [pc, #332]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80087e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d101      	bne.n	80087f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e099      	b.n	800892a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80087f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a4e      	ldr	r2, [pc, #312]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80087fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008802:	f7f9 fe77 	bl	80024f4 <HAL_GetTick>
 8008806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008808:	e008      	b.n	800881c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800880a:	f7f9 fe73 	bl	80024f4 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e086      	b.n	800892a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800881c:	4b45      	ldr	r3, [pc, #276]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f0      	bne.n	800880a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008828:	4b42      	ldr	r3, [pc, #264]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	051b      	lsls	r3, r3, #20
 8008836:	493f      	ldr	r1, [pc, #252]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 8008838:	4313      	orrs	r3, r2
 800883a:	628b      	str	r3, [r1, #40]	@ 0x28
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	3b01      	subs	r3, #1
 8008842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	3b01      	subs	r3, #1
 800884c:	025b      	lsls	r3, r3, #9
 800884e:	b29b      	uxth	r3, r3
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	3b01      	subs	r3, #1
 8008858:	041b      	lsls	r3, r3, #16
 800885a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	3b01      	subs	r3, #1
 8008866:	061b      	lsls	r3, r3, #24
 8008868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800886c:	4931      	ldr	r1, [pc, #196]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 800886e:	4313      	orrs	r3, r2
 8008870:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008872:	4b30      	ldr	r3, [pc, #192]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	492d      	ldr	r1, [pc, #180]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 8008880:	4313      	orrs	r3, r2
 8008882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008884:	4b2b      	ldr	r3, [pc, #172]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 8008886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008888:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	4928      	ldr	r1, [pc, #160]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008896:	4b27      	ldr	r3, [pc, #156]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889a:	4a26      	ldr	r2, [pc, #152]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 800889c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088a2:	4b24      	ldr	r3, [pc, #144]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088a6:	4b24      	ldr	r3, [pc, #144]	@ (8008938 <RCCEx_PLL3_Config+0x160>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	69d2      	ldr	r2, [r2, #28]
 80088ae:	00d2      	lsls	r2, r2, #3
 80088b0:	4920      	ldr	r1, [pc, #128]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088cc:	4a19      	ldr	r2, [pc, #100]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80088d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088d4:	e00f      	b.n	80088f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d106      	bne.n	80088ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088dc:	4b15      	ldr	r3, [pc, #84]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e0:	4a14      	ldr	r2, [pc, #80]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088e8:	e005      	b.n	80088f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088ea:	4b12      	ldr	r3, [pc, #72]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	4a11      	ldr	r2, [pc, #68]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80088f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 80088fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008902:	f7f9 fdf7 	bl	80024f4 <HAL_GetTick>
 8008906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008908:	e008      	b.n	800891c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800890a:	f7f9 fdf3 	bl	80024f4 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e006      	b.n	800892a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800891c:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <RCCEx_PLL3_Config+0x15c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f0      	beq.n	800890a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	58024400 	.word	0x58024400
 8008938:	ffff0007 	.word	0xffff0007

0800893c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08a      	sub	sp, #40	@ 0x28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e075      	b.n	8008a3a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d105      	bne.n	8008966 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7f9 fb39 	bl	8001fd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2204      	movs	r2, #4
 800896a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f868 	bl	8008a44 <HAL_SD_InitCard>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e05d      	b.n	8008a3a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800897e:	f107 0308 	add.w	r3, r7, #8
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fdaf 	bl	80094e8 <HAL_SD_GetCardStatus>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e052      	b.n	8008a3a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008994:	7e3b      	ldrb	r3, [r7, #24]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800899a:	7e7b      	ldrb	r3, [r7, #25]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d10a      	bne.n	80089be <HAL_SD_Init+0x82>
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <HAL_SD_Init+0x78>
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80089bc:	e00b      	b.n	80089d6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d104      	bne.n	80089d0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80089ce:	e002      	b.n	80089d6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fe6d 	bl	80096bc <HAL_SD_ConfigWideBusOperation>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e026      	b.n	8008a3a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80089ec:	f7f9 fd82 	bl	80024f4 <HAL_GetTick>
 80089f0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80089f2:	e011      	b.n	8008a18 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089f4:	f7f9 fd7e 	bl	80024f4 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d109      	bne.n	8008a18 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a0a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e010      	b.n	8008a3a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 ff61 	bl	80098e0 <HAL_SD_GetCardState>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b04      	cmp	r3, #4
 8008a22:	d1e7      	bne.n	80089f4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3728      	adds	r7, #40	@ 0x28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a44:	b590      	push	{r4, r7, lr}
 8008a46:	b08d      	sub	sp, #52	@ 0x34
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008a5c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	f7fe fc76 	bl	8007354 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a68:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e070      	b.n	8008b66 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	4a39      	ldr	r2, [pc, #228]	@ (8008b70 <HAL_SD_InitCard+0x12c>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	091b      	lsrs	r3, r3, #4
 8008a90:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681c      	ldr	r4, [r3, #0]
 8008a96:	466a      	mov	r2, sp
 8008a98:	f107 0318 	add.w	r3, r7, #24
 8008a9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008aa0:	e882 0003 	stmia.w	r2, {r0, r1}
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f003 f882 	bl	800bbb4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f003 f8c5 	bl	800bc44 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d005      	beq.n	8008acc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008ad2:	4a28      	ldr	r2, [pc, #160]	@ (8008b74 <HAL_SD_InitCard+0x130>)
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ada:	3301      	adds	r3, #1
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f9 fd15 	bl	800250c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 ffea 	bl	8009abc <SD_PowerON>
 8008ae8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e02e      	b.n	8008b66 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 ff09 	bl	8009920 <SD_InitCard>
 8008b0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e01b      	b.n	8008b66 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b36:	4618      	mov	r0, r3
 8008b38:	f003 f91a 	bl	800bd70 <SDMMC_CmdBlockLength>
 8008b3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00f      	beq.n	8008b64 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a0b      	ldr	r2, [pc, #44]	@ (8008b78 <HAL_SD_InitCard+0x134>)
 8008b4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	372c      	adds	r7, #44	@ 0x2c
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	014f8b59 	.word	0x014f8b59
 8008b74:	00012110 	.word	0x00012110
 8008b78:	1fe00fff 	.word	0x1fe00fff

08008b7c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08c      	sub	sp, #48	@ 0x30
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b98:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e08d      	b.n	8008cc0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	f040 8086 	bne.w	8008cbe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d907      	bls.n	8008bd6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e074      	b.n	8008cc0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2203      	movs	r2, #3
 8008bda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	025a      	lsls	r2, r3, #9
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d002      	beq.n	8008c02 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfe:	025b      	lsls	r3, r3, #9
 8008c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295
 8008c06:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	025b      	lsls	r3, r3, #9
 8008c0c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008c0e:	2390      	movs	r3, #144	@ 0x90
 8008c10:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c12:	2302      	movs	r3, #2
 8008c14:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f107 0210 	add.w	r2, r7, #16
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f003 f875 	bl	800bd18 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c3c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d90a      	bls.n	8008c6a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2282      	movs	r2, #130	@ 0x82
 8008c58:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c60:	4618      	mov	r0, r3
 8008c62:	f003 f8cb 	bl	800bdfc <SDMMC_CmdReadMultiBlock>
 8008c66:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008c68:	e009      	b.n	8008c7e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2281      	movs	r2, #129	@ 0x81
 8008c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c76:	4618      	mov	r0, r3
 8008c78:	f003 f89d 	bl	800bdb6 <SDMMC_CmdReadSingleBlock>
 8008c7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d012      	beq.n	8008caa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a0f      	ldr	r2, [pc, #60]	@ (8008cc8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008c8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c92:	431a      	orrs	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e00a      	b.n	8008cc0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008cb8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e000      	b.n	8008cc0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008cbe:	2302      	movs	r3, #2
  }
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3730      	adds	r7, #48	@ 0x30
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	1fe00fff 	.word	0x1fe00fff

08008ccc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	@ 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d107      	bne.n	8008cf4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e08d      	b.n	8008e10 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	f040 8086 	bne.w	8008e0e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	441a      	add	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d907      	bls.n	8008d26 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e074      	b.n	8008e10 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2203      	movs	r2, #3
 8008d2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	025a      	lsls	r2, r3, #9
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d002      	beq.n	8008d52 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	025b      	lsls	r3, r3, #9
 8008d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	025b      	lsls	r3, r3, #9
 8008d5c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d5e:	2390      	movs	r3, #144	@ 0x90
 8008d60:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008d62:	2300      	movs	r3, #0
 8008d64:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f107 0210 	add.w	r2, r7, #16
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f002 ffcd 	bl	800bd18 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d8c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d90a      	bls.n	8008dba <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	22a0      	movs	r2, #160	@ 0xa0
 8008da8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008db0:	4618      	mov	r0, r3
 8008db2:	f003 f869 	bl	800be88 <SDMMC_CmdWriteMultiBlock>
 8008db6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008db8:	e009      	b.n	8008dce <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2290      	movs	r2, #144	@ 0x90
 8008dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f003 f83b 	bl	800be42 <SDMMC_CmdWriteSingleBlock>
 8008dcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d012      	beq.n	8008dfa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8008e18 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008dda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	431a      	orrs	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e00a      	b.n	8008e10 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008e08:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e000      	b.n	8008e10 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008e0e:	2302      	movs	r3, #2
  }
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3730      	adds	r7, #48	@ 0x30
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	1fe00fff 	.word	0x1fe00fff

08008e1c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d008      	beq.n	8008e4a <HAL_SD_IRQHandler+0x2e>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f926 	bl	800a094 <SD_Read_IT>
 8008e48:	e19a      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80ac 	beq.w	8008fb2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e62:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	4b59      	ldr	r3, [pc, #356]	@ (8008fd4 <HAL_SD_IRQHandler+0x1b8>)
 8008e70:	400b      	ands	r3, r1
 8008e72:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008e82:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e92:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d038      	beq.n	8008f10 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <HAL_SD_IRQHandler+0x96>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d011      	beq.n	8008ed6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f003 f80a 	bl	800bed0 <SDMMC_CmdStopTransfer>
 8008ebc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f95b 	bl	800918c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a3f      	ldr	r2, [pc, #252]	@ (8008fd8 <HAL_SD_IRQHandler+0x1bc>)
 8008edc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d104      	bne.n	8008f00 <HAL_SD_IRQHandler+0xe4>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f003 0302 	and.w	r3, r3, #2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f003 fcbd 	bl	800c880 <HAL_SD_RxCpltCallback>
 8008f06:	e13b      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f003 fcaf 	bl	800c86c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f0e:	e137      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 8132 	beq.w	8009180 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2200      	movs	r2, #0
 8008f22:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2200      	movs	r2, #0
 8008f32:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <HAL_SD_IRQHandler+0x12c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d011      	beq.n	8008f6c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f002 ffbf 	bl	800bed0 <SDMMC_CmdStopTransfer>
 8008f52:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f910 	bl	800918c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <HAL_SD_IRQHandler+0x172>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f003 fc6c 	bl	800c86c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <HAL_SD_IRQHandler+0x18e>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80eb 	beq.w	8009180 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f003 fc68 	bl	800c880 <HAL_SD_RxCpltCallback>
}
 8008fb0:	e0e6      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00d      	beq.n	8008fdc <HAL_SD_IRQHandler+0x1c0>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 0308 	and.w	r3, r3, #8
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d008      	beq.n	8008fdc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 f8a8 	bl	800a120 <SD_Write_IT>
 8008fd0:	e0d6      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
 8008fd2:	bf00      	nop
 8008fd4:	ffff3ec5 	.word	0xffff3ec5
 8008fd8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 809d 	beq.w	8009126 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ffe:	f043 0202 	orr.w	r2, r3, #2
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009018:	f043 0208 	orr.w	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009032:	f043 0220 	orr.w	r2, r3, #32
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800904c:	f043 0210 	orr.w	r2, r3, #16
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a4b      	ldr	r2, [pc, #300]	@ (8009188 <HAL_SD_IRQHandler+0x36c>)
 800905a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800906a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800907a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800908a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800909a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f002 ff15 	bl	800bed0 <SDMMC_CmdStopTransfer>
 80090a6:	4602      	mov	r2, r0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090c0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f851 	bl	800918c <HAL_SD_ErrorCallback>
}
 80090ea:	e049      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d044      	beq.n	8009180 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d040      	beq.n	8009180 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800910c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2200      	movs	r2, #0
 8009114:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f834 	bl	800918c <HAL_SD_ErrorCallback>
}
 8009124:	e02c      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800912c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d025      	beq.n	8009180 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800913c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10c      	bne.n	8009166 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 f84a 	bl	800a1f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800915c:	e010      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 f832 	bl	800a1c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009164:	e00c      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 f833 	bl	800a1dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009176:	e003      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 f81b 	bl	800a1b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800917e:	e7ff      	b.n	8009180 <HAL_SD_IRQHandler+0x364>
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	18000f3a 	.word	0x18000f3a

0800918c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ae:	0f9b      	lsrs	r3, r3, #30
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ba:	0e9b      	lsrs	r3, r3, #26
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091cc:	0e1b      	lsrs	r3, r3, #24
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009200:	0d1b      	lsrs	r3, r3, #20
 8009202:	b29a      	uxth	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800920c:	0c1b      	lsrs	r3, r3, #16
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f003 030f 	and.w	r3, r3, #15
 8009214:	b2da      	uxtb	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800921e:	0bdb      	lsrs	r3, r3, #15
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009230:	0b9b      	lsrs	r3, r3, #14
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009242:	0b5b      	lsrs	r3, r3, #13
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009254:	0b1b      	lsrs	r3, r3, #12
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	b2da      	uxtb	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2200      	movs	r2, #0
 8009266:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d163      	bne.n	8009338 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009274:	009a      	lsls	r2, r3, #2
 8009276:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800927a:	4013      	ands	r3, r2
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009280:	0f92      	lsrs	r2, r2, #30
 8009282:	431a      	orrs	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800928c:	0edb      	lsrs	r3, r3, #27
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	b2da      	uxtb	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800929e:	0e1b      	lsrs	r3, r3, #24
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b0:	0d5b      	lsrs	r3, r3, #21
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092c2:	0c9b      	lsrs	r3, r3, #18
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d4:	0bdb      	lsrs	r3, r3, #15
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	7e1b      	ldrb	r3, [r3, #24]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	3302      	adds	r3, #2
 80092f8:	2201      	movs	r2, #1
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009302:	fb03 f202 	mul.w	r2, r3, r2
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	7a1b      	ldrb	r3, [r3, #8]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	2201      	movs	r2, #1
 8009316:	409a      	lsls	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009324:	0a52      	lsrs	r2, r2, #9
 8009326:	fb03 f202 	mul.w	r2, r3, r2
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009334:	655a      	str	r2, [r3, #84]	@ 0x54
 8009336:	e031      	b.n	800939c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933c:	2b01      	cmp	r3, #1
 800933e:	d11d      	bne.n	800937c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009344:	041b      	lsls	r3, r3, #16
 8009346:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800934e:	0c1b      	lsrs	r3, r3, #16
 8009350:	431a      	orrs	r2, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	3301      	adds	r3, #1
 800935c:	029a      	lsls	r2, r3, #10
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009370:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	655a      	str	r2, [r3, #84]	@ 0x54
 800937a:	e00f      	b.n	800939c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a58      	ldr	r2, [pc, #352]	@ (80094e4 <HAL_SD_GetCardCSD+0x344>)
 8009382:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009388:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e09d      	b.n	80094d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a0:	0b9b      	lsrs	r3, r3, #14
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b2:	09db      	lsrs	r3, r3, #7
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d4:	0fdb      	lsrs	r3, r3, #31
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093e0:	0f5b      	lsrs	r3, r3, #29
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093f2:	0e9b      	lsrs	r3, r3, #26
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	f003 0307 	and.w	r3, r3, #7
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009404:	0d9b      	lsrs	r3, r3, #22
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	b2da      	uxtb	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009416:	0d5b      	lsrs	r3, r3, #21
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009432:	0c1b      	lsrs	r3, r3, #16
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	b2da      	uxtb	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009446:	0bdb      	lsrs	r3, r3, #15
 8009448:	b2db      	uxtb	r3, r3
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	b2da      	uxtb	r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800945a:	0b9b      	lsrs	r3, r3, #14
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	b2da      	uxtb	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800946e:	0b5b      	lsrs	r3, r3, #13
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009482:	0b1b      	lsrs	r3, r3, #12
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	b2da      	uxtb	r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009496:	0a9b      	lsrs	r3, r3, #10
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094be:	085b      	lsrs	r3, r3, #1
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	1fe00fff 	.word	0x1fe00fff

080094e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b094      	sub	sp, #80	@ 0x50
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b03      	cmp	r3, #3
 8009502:	d101      	bne.n	8009508 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e0a7      	b.n	8009658 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009508:	f107 0308 	add.w	r3, r7, #8
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fb62 	bl	8009bd8 <SD_SendSDStatus>
 8009514:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009518:	2b00      	cmp	r3, #0
 800951a:	d011      	beq.n	8009540 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a4f      	ldr	r2, [pc, #316]	@ (8009660 <HAL_SD_GetCardStatus+0x178>)
 8009522:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800953e:	e070      	b.n	8009622 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	099b      	lsrs	r3, r3, #6
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	b2da      	uxtb	r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	095b      	lsrs	r3, r3, #5
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	b2da      	uxtb	r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	0a1b      	lsrs	r3, r3, #8
 8009564:	b29b      	uxth	r3, r3
 8009566:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800956a:	b29a      	uxth	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	0e1b      	lsrs	r3, r3, #24
 8009570:	b29b      	uxth	r3, r3
 8009572:	4313      	orrs	r3, r2
 8009574:	b29a      	uxth	r2, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	061a      	lsls	r2, r3, #24
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009586:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	0a1b      	lsrs	r3, r3, #8
 800958c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009590:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	0e1b      	lsrs	r3, r3, #24
 8009596:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	0d1b      	lsrs	r3, r3, #20
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	0c1b      	lsrs	r3, r3, #16
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4313      	orrs	r3, r2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	0a9b      	lsrs	r3, r3, #10
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	091b      	lsrs	r3, r3, #4
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	b2da      	uxtb	r2, r3
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	b2da      	uxtb	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	0e1b      	lsrs	r3, r3, #24
 800961c:	b2da      	uxtb	r2, r3
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800962a:	4618      	mov	r0, r3
 800962c:	f002 fba0 	bl	800bd70 <SDMMC_CmdBlockLength>
 8009630:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a08      	ldr	r2, [pc, #32]	@ (8009660 <HAL_SD_GetCardStatus+0x178>)
 800963e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009644:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009654:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009658:	4618      	mov	r0, r3
 800965a:	3750      	adds	r7, #80	@ 0x50
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	1fe00fff 	.word	0x1fe00fff

08009664 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80096bc:	b590      	push	{r4, r7, lr}
 80096be:	b08d      	sub	sp, #52	@ 0x34
 80096c0:	af02      	add	r7, sp, #8
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2203      	movs	r2, #3
 80096d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d02e      	beq.n	800973a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096e2:	d106      	bne.n	80096f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80096f0:	e029      	b.n	8009746 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096f8:	d10a      	bne.n	8009710 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fb64 	bl	8009dc8 <SD_WideBus_Enable>
 8009700:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	635a      	str	r2, [r3, #52]	@ 0x34
 800970e:	e01a      	b.n	8009746 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fba1 	bl	8009e5e <SD_WideBus_Disable>
 800971c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	431a      	orrs	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	635a      	str	r2, [r3, #52]	@ 0x34
 800972a:	e00c      	b.n	8009746 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009730:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	635a      	str	r2, [r3, #52]	@ 0x34
 8009738:	e005      	b.n	8009746 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800973e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a5f      	ldr	r2, [pc, #380]	@ (80098d0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009754:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800975c:	e096      	b.n	800988c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800975e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009762:	f04f 0100 	mov.w	r1, #0
 8009766:	f7fd fdf5 	bl	8007354 <HAL_RCCEx_GetPeriphCLKFreq>
 800976a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 8083 	beq.w	800987a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	695a      	ldr	r2, [r3, #20]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4950      	ldr	r1, [pc, #320]	@ (80098d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009792:	fba1 1303 	umull	r1, r3, r1, r3
 8009796:	0e1b      	lsrs	r3, r3, #24
 8009798:	429a      	cmp	r2, r3
 800979a:	d303      	bcc.n	80097a4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	e05a      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ac:	d103      	bne.n	80097b6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	61bb      	str	r3, [r7, #24]
 80097b4:	e051      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097be:	d126      	bne.n	800980e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10e      	bne.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4a43      	ldr	r2, [pc, #268]	@ (80098d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d906      	bls.n	80097de <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	4a40      	ldr	r2, [pc, #256]	@ (80098d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	0e5b      	lsrs	r3, r3, #25
 80097da:	61bb      	str	r3, [r7, #24]
 80097dc:	e03d      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	61bb      	str	r3, [r7, #24]
 80097e4:	e039      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	69fa      	ldr	r2, [r7, #28]
 80097ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f2:	4a39      	ldr	r2, [pc, #228]	@ (80098d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d906      	bls.n	8009806 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	4a36      	ldr	r2, [pc, #216]	@ (80098d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009800:	0e5b      	lsrs	r3, r3, #25
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	e029      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	61bb      	str	r3, [r7, #24]
 800980c:	e025      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10e      	bne.n	8009834 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4a30      	ldr	r2, [pc, #192]	@ (80098dc <HAL_SD_ConfigWideBusOperation+0x220>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d906      	bls.n	800982c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4a2c      	ldr	r2, [pc, #176]	@ (80098d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	0e1b      	lsrs	r3, r3, #24
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	e016      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	e012      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009840:	4a26      	ldr	r2, [pc, #152]	@ (80098dc <HAL_SD_ConfigWideBusOperation+0x220>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d906      	bls.n	8009854 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4a22      	ldr	r2, [pc, #136]	@ (80098d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800984a:	fba2 2303 	umull	r2, r3, r2, r3
 800984e:	0e1b      	lsrs	r3, r3, #24
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	e002      	b.n	800985a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681c      	ldr	r4, [r3, #0]
 800985e:	466a      	mov	r2, sp
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009868:	e882 0003 	stmia.w	r2, {r0, r1}
 800986c:	f107 0308 	add.w	r3, r7, #8
 8009870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009872:	4620      	mov	r0, r4
 8009874:	f002 f99e 	bl	800bbb4 <SDMMC_Init>
 8009878:	e008      	b.n	800988c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009894:	4618      	mov	r0, r3
 8009896:	f002 fa6b 	bl	800bd70 <SDMMC_CmdBlockLength>
 800989a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00c      	beq.n	80098bc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a0a      	ldr	r2, [pc, #40]	@ (80098d0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80098a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	372c      	adds	r7, #44	@ 0x2c
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd90      	pop	{r4, r7, pc}
 80098d0:	1fe00fff 	.word	0x1fe00fff
 80098d4:	55e63b89 	.word	0x55e63b89
 80098d8:	02faf080 	.word	0x02faf080
 80098dc:	017d7840 	.word	0x017d7840

080098e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098ec:	f107 030c 	add.w	r3, r7, #12
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa40 	bl	8009d78 <SD_SendStatus>
 80098f8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	0a5b      	lsrs	r3, r3, #9
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009916:	693b      	ldr	r3, [r7, #16]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b090      	sub	sp, #64	@ 0x40
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800992c:	f7f8 fde2 	bl	80024f4 <HAL_GetTick>
 8009930:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4618      	mov	r0, r3
 8009938:	f002 f995 	bl	800bc66 <SDMMC_GetPowerState>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009942:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009946:	e0b5      	b.n	8009ab4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994c:	2b03      	cmp	r3, #3
 800994e:	d02e      	beq.n	80099ae <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4618      	mov	r0, r3
 8009956:	f002 fbe0 	bl	800c11a <SDMMC_CmdSendCID>
 800995a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <SD_InitCard+0x46>
    {
      return errorstate;
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	e0a6      	b.n	8009ab4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2100      	movs	r1, #0
 800996c:	4618      	mov	r0, r3
 800996e:	f002 f9c0 	bl	800bcf2 <SDMMC_GetResponse>
 8009972:	4602      	mov	r2, r0
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2104      	movs	r1, #4
 800997e:	4618      	mov	r0, r3
 8009980:	f002 f9b7 	bl	800bcf2 <SDMMC_GetResponse>
 8009984:	4602      	mov	r2, r0
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2108      	movs	r1, #8
 8009990:	4618      	mov	r0, r3
 8009992:	f002 f9ae 	bl	800bcf2 <SDMMC_GetResponse>
 8009996:	4602      	mov	r2, r0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	210c      	movs	r1, #12
 80099a2:	4618      	mov	r0, r3
 80099a4:	f002 f9a5 	bl	800bcf2 <SDMMC_GetResponse>
 80099a8:	4602      	mov	r2, r0
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d01d      	beq.n	80099f2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80099b6:	e019      	b.n	80099ec <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f107 020a 	add.w	r2, r7, #10
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 fbe8 	bl	800c198 <SDMMC_CmdSetRelAdd>
 80099c8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <SD_InitCard+0xb4>
      {
        return errorstate;
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	e06f      	b.n	8009ab4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80099d4:	f7f8 fd8e 	bl	80024f4 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	f241 3287 	movw	r2, #4999	@ 0x1387
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d902      	bls.n	80099ec <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80099e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099ea:	e063      	b.n	8009ab4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80099ec:	897b      	ldrh	r3, [r7, #10]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0e2      	beq.n	80099b8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d036      	beq.n	8009a68 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80099fa:	897b      	ldrh	r3, [r7, #10]
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0a:	041b      	lsls	r3, r3, #16
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f002 fba2 	bl	800c158 <SDMMC_CmdSendCSD>
 8009a14:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <SD_InitCard+0x100>
    {
      return errorstate;
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1e:	e049      	b.n	8009ab4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 f963 	bl	800bcf2 <SDMMC_GetResponse>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2104      	movs	r1, #4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 f95a 	bl	800bcf2 <SDMMC_GetResponse>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2108      	movs	r1, #8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 f951 	bl	800bcf2 <SDMMC_GetResponse>
 8009a50:	4602      	mov	r2, r0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	210c      	movs	r1, #12
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f002 f948 	bl	800bcf2 <SDMMC_GetResponse>
 8009a62:	4602      	mov	r2, r0
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2104      	movs	r1, #4
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f002 f93f 	bl	800bcf2 <SDMMC_GetResponse>
 8009a74:	4603      	mov	r3, r0
 8009a76:	0d1a      	lsrs	r2, r3, #20
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a7c:	f107 030c 	add.w	r3, r7, #12
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff fb8c 	bl	80091a0 <HAL_SD_GetCardCSD>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009a92:	e00f      	b.n	8009ab4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f002 fa51 	bl	800bf48 <SDMMC_CmdSelDesel>
 8009aa6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <SD_InitCard+0x192>
  {
    return errorstate;
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	e000      	b.n	8009ab4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3740      	adds	r7, #64	@ 0x40
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009acc:	2300      	movs	r3, #0
 8009ace:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fa5a 	bl	800bf8e <SDMMC_CmdGoIdleState>
 8009ada:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e072      	b.n	8009bcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fa6d 	bl	800bfca <SDMMC_CmdOperCond>
 8009af0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009af8:	d10d      	bne.n	8009b16 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f002 fa42 	bl	800bf8e <SDMMC_CmdGoIdleState>
 8009b0a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <SD_PowerON+0x60>
    {
      return errorstate;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	e05a      	b.n	8009bcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d137      	bne.n	8009b94 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f002 fa6d 	bl	800c00a <SDMMC_CmdAppCommand>
 8009b30:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d02d      	beq.n	8009b94 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b3c:	e046      	b.n	8009bcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2100      	movs	r1, #0
 8009b44:	4618      	mov	r0, r3
 8009b46:	f002 fa60 	bl	800c00a <SDMMC_CmdAppCommand>
 8009b4a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	e03a      	b.n	8009bcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	491e      	ldr	r1, [pc, #120]	@ (8009bd4 <SD_PowerON+0x118>)
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 fa77 	bl	800c050 <SDMMC_CmdAppOperCommand>
 8009b62:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b6e:	e02d      	b.n	8009bcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f002 f8bb 	bl	800bcf2 <SDMMC_GetResponse>
 8009b7c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	0fdb      	lsrs	r3, r3, #31
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d101      	bne.n	8009b8a <SD_PowerON+0xce>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e000      	b.n	8009b8c <SD_PowerON+0xd0>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]

    count++;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3301      	adds	r3, #1
 8009b92:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d802      	bhi.n	8009ba4 <SD_PowerON+0xe8>
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0cc      	beq.n	8009b3e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d902      	bls.n	8009bb4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009bb2:	e00b      	b.n	8009bcc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	c1100000 	.word	0xc1100000

08009bd8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08c      	sub	sp, #48	@ 0x30
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009be2:	f7f8 fc87 	bl	80024f4 <HAL_GetTick>
 8009be6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f002 f87d 	bl	800bcf2 <SDMMC_GetResponse>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c02:	d102      	bne.n	8009c0a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c08:	e0b0      	b.n	8009d6c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2140      	movs	r1, #64	@ 0x40
 8009c10:	4618      	mov	r0, r3
 8009c12:	f002 f8ad 	bl	800bd70 <SDMMC_CmdBlockLength>
 8009c16:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	e0a0      	b.n	8009d6c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c32:	041b      	lsls	r3, r3, #16
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f002 f9e7 	bl	800c00a <SDMMC_CmdAppCommand>
 8009c3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	e08d      	b.n	8009d6c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c50:	f04f 33ff 	mov.w	r3, #4294967295
 8009c54:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009c56:	2340      	movs	r3, #64	@ 0x40
 8009c58:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009c5a:	2360      	movs	r3, #96	@ 0x60
 8009c5c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c5e:	2302      	movs	r3, #2
 8009c60:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c66:	2301      	movs	r3, #1
 8009c68:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f107 0208 	add.w	r2, r7, #8
 8009c72:	4611      	mov	r1, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f002 f84f 	bl	800bd18 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f002 facf 	bl	800c222 <SDMMC_CmdStatusRegister>
 8009c84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02b      	beq.n	8009ce4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	e069      	b.n	8009d6c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d013      	beq.n	8009cce <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009caa:	e00d      	b.n	8009cc8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 ffa9 	bl	800bc08 <SDMMC_ReadFIFO>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cba:	601a      	str	r2, [r3, #0]
        pData++;
 8009cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	2b07      	cmp	r3, #7
 8009ccc:	d9ee      	bls.n	8009cac <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cce:	f7f8 fc11 	bl	80024f4 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d102      	bne.n	8009ce4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cde:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ce2:	e043      	b.n	8009d6c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cea:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0d2      	beq.n	8009c98 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d00:	2308      	movs	r3, #8
 8009d02:	e033      	b.n	8009d6c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d12:	2302      	movs	r3, #2
 8009d14:	e02a      	b.n	8009d6c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009d24:	2320      	movs	r3, #32
 8009d26:	e021      	b.n	8009d6c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 ff6b 	bl	800bc08 <SDMMC_ReadFIFO>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d36:	601a      	str	r2, [r3, #0]
    pData++;
 8009d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d3e:	f7f8 fbd9 	bl	80024f4 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d102      	bne.n	8009d54 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d52:	e00b      	b.n	8009d6c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e2      	bne.n	8009d28 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a03      	ldr	r2, [pc, #12]	@ (8009d74 <SD_SendSDStatus+0x19c>)
 8009d68:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3730      	adds	r7, #48	@ 0x30
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	18000f3a 	.word	0x18000f3a

08009d78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d8c:	e018      	b.n	8009dc0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d96:	041b      	lsls	r3, r3, #16
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f002 fa1e 	bl	800c1dc <SDMMC_CmdSendStatus>
 8009da0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <SD_SendStatus+0x34>
  {
    return errorstate;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	e009      	b.n	8009dc0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 ff9d 	bl	800bcf2 <SDMMC_GetResponse>
 8009db8:	4602      	mov	r2, r0
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 ff87 	bl	800bcf2 <SDMMC_GetResponse>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dee:	d102      	bne.n	8009df6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009df0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009df4:	e02f      	b.n	8009e56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009df6:	f107 030c 	add.w	r3, r7, #12
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f879 	bl	8009ef4 <SD_FindSCR>
 8009e02:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	e023      	b.n	8009e56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01c      	beq.n	8009e52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	4619      	mov	r1, r3
 8009e24:	4610      	mov	r0, r2
 8009e26:	f002 f8f0 	bl	800c00a <SDMMC_CmdAppCommand>
 8009e2a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	e00f      	b.n	8009e56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2102      	movs	r1, #2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f002 f927 	bl	800c090 <SDMMC_CmdBusWidth>
 8009e42:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	e003      	b.n	8009e56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e001      	b.n	8009e56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e66:	2300      	movs	r3, #0
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2100      	movs	r1, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 ff3c 	bl	800bcf2 <SDMMC_GetResponse>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e84:	d102      	bne.n	8009e8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e8a:	e02f      	b.n	8009eec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e8c:	f107 030c 	add.w	r3, r7, #12
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f82e 	bl	8009ef4 <SD_FindSCR>
 8009e98:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	e023      	b.n	8009eec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01c      	beq.n	8009ee8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb6:	041b      	lsls	r3, r3, #16
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f002 f8a5 	bl	800c00a <SDMMC_CmdAppCommand>
 8009ec0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	e00f      	b.n	8009eec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f002 f8dc 	bl	800c090 <SDMMC_CmdBusWidth>
 8009ed8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	e003      	b.n	8009eec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e001      	b.n	8009eec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ee8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08e      	sub	sp, #56	@ 0x38
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009efe:	f7f8 faf9 	bl	80024f4 <HAL_GetTick>
 8009f02:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60bb      	str	r3, [r7, #8]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2108      	movs	r1, #8
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 ff28 	bl	800bd70 <SDMMC_CmdBlockLength>
 8009f20:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	e0ad      	b.n	800a088 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f34:	041b      	lsls	r3, r3, #16
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f002 f866 	bl	800c00a <SDMMC_CmdAppCommand>
 8009f3e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f48:	e09e      	b.n	800a088 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f50:	2308      	movs	r3, #8
 8009f52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f54:	2330      	movs	r3, #48	@ 0x30
 8009f56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f107 0210 	add.w	r2, r7, #16
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 fed2 	bl	800bd18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f002 f8ac 	bl	800c0d6 <SDMMC_CmdSendSCR>
 8009f7e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d027      	beq.n	8009fd6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	e07e      	b.n	800a088 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d113      	bne.n	8009fc0 <SD_FindSCR+0xcc>
 8009f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d110      	bne.n	8009fc0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fe30 	bl	800bc08 <SDMMC_ReadFIFO>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 fe29 	bl	800bc08 <SDMMC_ReadFIFO>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	60fb      	str	r3, [r7, #12]
      index++;
 8009fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fc0:	f7f8 fa98 	bl	80024f4 <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d102      	bne.n	8009fd6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fd4:	e058      	b.n	800a088 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fdc:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0d1      	beq.n	8009f8a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2208      	movs	r2, #8
 8009ffa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	e043      	b.n	800a088 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2202      	movs	r2, #2
 800a014:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a016:	2302      	movs	r3, #2
 800a018:	e036      	b.n	800a088 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2220      	movs	r2, #32
 800a02e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a030:	2320      	movs	r3, #32
 800a032:	e029      	b.n	800a088 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a15      	ldr	r2, [pc, #84]	@ (800a090 <SD_FindSCR+0x19c>)
 800a03a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	061a      	lsls	r2, r3, #24
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a048:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	0a1b      	lsrs	r3, r3, #8
 800a04e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a052:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	0e1b      	lsrs	r3, r3, #24
 800a058:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05c:	601a      	str	r2, [r3, #0]
    scr++;
 800a05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a060:	3304      	adds	r3, #4
 800a062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	061a      	lsls	r2, r3, #24
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a070:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	0a1b      	lsrs	r3, r3, #8
 800a076:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a07a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	0e1b      	lsrs	r3, r3, #24
 800a080:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a084:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3738      	adds	r7, #56	@ 0x38
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	18000f3a 	.word	0x18000f3a

0800a094 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a6:	2b1f      	cmp	r3, #31
 800a0a8:	d936      	bls.n	800a118 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e027      	b.n	800a100 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 fda7 	bl	800bc08 <SDMMC_ReadFIFO>
 800a0ba:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	0a1b      	lsrs	r3, r3, #8
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	0c1b      	lsrs	r3, r3, #16
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	0e1b      	lsrs	r3, r3, #24
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b07      	cmp	r3, #7
 800a104:	d9d4      	bls.n	800a0b0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a110:	f1a3 0220 	sub.w	r2, r3, #32
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a118:	bf00      	nop
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	2b1f      	cmp	r3, #31
 800a134:	d93a      	bls.n	800a1ac <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	e02b      	b.n	800a194 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	3301      	adds	r3, #1
 800a146:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	021a      	lsls	r2, r3, #8
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3301      	adds	r3, #1
 800a158:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	041a      	lsls	r2, r3, #16
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3301      	adds	r3, #1
 800a16a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	061a      	lsls	r2, r3, #24
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	3301      	adds	r3, #1
 800a17c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f107 020c 	add.w	r2, r7, #12
 800a186:	4611      	mov	r1, r2
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 fd4a 	bl	800bc22 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	3301      	adds	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2b07      	cmp	r3, #7
 800a198:	d9d0      	bls.n	800a13c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	f1a3 0220 	sub.w	r2, r3, #32
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	621a      	str	r2, [r3, #32]
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e10f      	b.n	800a436 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a87      	ldr	r2, [pc, #540]	@ (800a440 <HAL_SPI_Init+0x23c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d00f      	beq.n	800a246 <HAL_SPI_Init+0x42>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a86      	ldr	r2, [pc, #536]	@ (800a444 <HAL_SPI_Init+0x240>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d00a      	beq.n	800a246 <HAL_SPI_Init+0x42>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a84      	ldr	r2, [pc, #528]	@ (800a448 <HAL_SPI_Init+0x244>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d005      	beq.n	800a246 <HAL_SPI_Init+0x42>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2b0f      	cmp	r3, #15
 800a240:	d901      	bls.n	800a246 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e0f7      	b.n	800a436 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fbbc 	bl	800a9c4 <SPI_GetPacketSize>
 800a24c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a7b      	ldr	r2, [pc, #492]	@ (800a440 <HAL_SPI_Init+0x23c>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d00c      	beq.n	800a272 <HAL_SPI_Init+0x6e>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a79      	ldr	r2, [pc, #484]	@ (800a444 <HAL_SPI_Init+0x240>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d007      	beq.n	800a272 <HAL_SPI_Init+0x6e>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a78      	ldr	r2, [pc, #480]	@ (800a448 <HAL_SPI_Init+0x244>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d002      	beq.n	800a272 <HAL_SPI_Init+0x6e>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b08      	cmp	r3, #8
 800a270:	d811      	bhi.n	800a296 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a276:	4a72      	ldr	r2, [pc, #456]	@ (800a440 <HAL_SPI_Init+0x23c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a70      	ldr	r2, [pc, #448]	@ (800a444 <HAL_SPI_Init+0x240>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d004      	beq.n	800a290 <HAL_SPI_Init+0x8c>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a6f      	ldr	r2, [pc, #444]	@ (800a448 <HAL_SPI_Init+0x244>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d104      	bne.n	800a29a <HAL_SPI_Init+0x96>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b10      	cmp	r3, #16
 800a294:	d901      	bls.n	800a29a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e0cd      	b.n	800a436 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7f7 ff28 	bl	8002104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0201 	bic.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a2d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2e0:	d119      	bne.n	800a316 <HAL_SPI_Init+0x112>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2ea:	d103      	bne.n	800a2f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10c      	bne.n	800a316 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a304:	d107      	bne.n	800a316 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a314:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00f      	beq.n	800a342 <HAL_SPI_Init+0x13e>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	2b06      	cmp	r3, #6
 800a328:	d90b      	bls.n	800a342 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	430a      	orrs	r2, r1
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	e007      	b.n	800a352 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a350:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69da      	ldr	r2, [r3, #28]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35a:	431a      	orrs	r2, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a364:	ea42 0103 	orr.w	r1, r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	431a      	orrs	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	431a      	orrs	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	431a      	orrs	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3b2:	ea42 0103 	orr.w	r1, r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d113      	bne.n	800a3f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0201 	bic.w	r2, r2, #1
 800a400:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	40013000 	.word	0x40013000
 800a444:	40003800 	.word	0x40003800
 800a448:	40003c00 	.word	0x40003c00

0800a44c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af02      	add	r7, sp, #8
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	4613      	mov	r3, r2
 800a45a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3320      	adds	r3, #32
 800a462:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a464:	f7f8 f846 	bl	80024f4 <HAL_GetTick>
 800a468:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d001      	beq.n	800a47a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a476:	2302      	movs	r3, #2
 800a478:	e1d1      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <HAL_SPI_Transmit+0x3a>
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e1c9      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_SPI_Transmit+0x4c>
 800a494:	2302      	movs	r3, #2
 800a496:	e1c2      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	88fa      	ldrh	r2, [r7, #6]
 800a4ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a4f0:	d108      	bne.n	800a504 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e009      	b.n	800a518 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a516:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	4b96      	ldr	r3, [pc, #600]	@ (800a778 <HAL_SPI_Transmit+0x32c>)
 800a520:	4013      	ands	r3, r2
 800a522:	88f9      	ldrh	r1, [r7, #6]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	6812      	ldr	r2, [r2, #0]
 800a528:	430b      	orrs	r3, r1
 800a52a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0201 	orr.w	r2, r2, #1
 800a53a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a544:	d107      	bne.n	800a556 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	2b0f      	cmp	r3, #15
 800a55c:	d947      	bls.n	800a5ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a55e:	e03f      	b.n	800a5e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d114      	bne.n	800a598 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a57e:	1d1a      	adds	r2, r3, #4
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a596:	e023      	b.n	800a5e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a598:	f7f7 ffac 	bl	80024f4 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d803      	bhi.n	800a5b0 <HAL_SPI_Transmit+0x164>
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d102      	bne.n	800a5b6 <HAL_SPI_Transmit+0x16a>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d114      	bne.n	800a5e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f936 	bl	800a828 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e11e      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1b9      	bne.n	800a560 <HAL_SPI_Transmit+0x114>
 800a5ec:	e0f1      	b.n	800a7d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	2b07      	cmp	r3, #7
 800a5f4:	f240 80e6 	bls.w	800a7c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a5f8:	e05d      	b.n	800a6b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b02      	cmp	r3, #2
 800a606:	d132      	bne.n	800a66e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b01      	cmp	r3, #1
 800a612:	d918      	bls.n	800a646 <HAL_SPI_Transmit+0x1fa>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d014      	beq.n	800a646 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a62c:	1d1a      	adds	r2, r3, #4
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a638:	b29b      	uxth	r3, r3
 800a63a:	3b02      	subs	r3, #2
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a644:	e037      	b.n	800a6b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a64a:	881a      	ldrh	r2, [r3, #0]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a654:	1c9a      	adds	r2, r3, #2
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a660:	b29b      	uxth	r3, r3
 800a662:	3b01      	subs	r3, #1
 800a664:	b29a      	uxth	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a66c:	e023      	b.n	800a6b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a66e:	f7f7 ff41 	bl	80024f4 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d803      	bhi.n	800a686 <HAL_SPI_Transmit+0x23a>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d102      	bne.n	800a68c <HAL_SPI_Transmit+0x240>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d114      	bne.n	800a6b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 f8cb 	bl	800a828 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a698:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e0b3      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d19b      	bne.n	800a5fa <HAL_SPI_Transmit+0x1ae>
 800a6c2:	e086      	b.n	800a7d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d154      	bne.n	800a77c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d918      	bls.n	800a710 <HAL_SPI_Transmit+0x2c4>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6e2:	2b40      	cmp	r3, #64	@ 0x40
 800a6e4:	d914      	bls.n	800a710 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6812      	ldr	r2, [r2, #0]
 800a6f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6f6:	1d1a      	adds	r2, r3, #4
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a702:	b29b      	uxth	r3, r3
 800a704:	3b04      	subs	r3, #4
 800a706:	b29a      	uxth	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a70e:	e059      	b.n	800a7c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d917      	bls.n	800a74c <HAL_SPI_Transmit+0x300>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d013      	beq.n	800a74c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a728:	881a      	ldrh	r2, [r3, #0]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a732:	1c9a      	adds	r2, r3, #2
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a73e:	b29b      	uxth	r3, r3
 800a740:	3b02      	subs	r3, #2
 800a742:	b29a      	uxth	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a74a:	e03b      	b.n	800a7c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3320      	adds	r3, #32
 800a756:	7812      	ldrb	r2, [r2, #0]
 800a758:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a776:	e025      	b.n	800a7c4 <HAL_SPI_Transmit+0x378>
 800a778:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a77c:	f7f7 feba 	bl	80024f4 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d803      	bhi.n	800a794 <HAL_SPI_Transmit+0x348>
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a792:	d102      	bne.n	800a79a <HAL_SPI_Transmit+0x34e>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d114      	bne.n	800a7c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 f844 	bl	800a828 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e02c      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f47f af79 	bne.w	800a6c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2108      	movs	r1, #8
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f8c3 	bl	800a968 <SPI_WaitOnFlagUntilTimeout>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ee:	f043 0220 	orr.w	r2, r3, #32
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f815 	bl	800a828 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a81c:	2300      	movs	r3, #0
  }
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop

0800a828 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0208 	orr.w	r2, r2, #8
 800a846:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	699a      	ldr	r2, [r3, #24]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0210 	orr.w	r2, r2, #16
 800a856:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f022 0201 	bic.w	r2, r2, #1
 800a866:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6919      	ldr	r1, [r3, #16]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	4b3c      	ldr	r3, [pc, #240]	@ (800a964 <SPI_CloseTransfer+0x13c>)
 800a874:	400b      	ands	r3, r1
 800a876:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a886:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b04      	cmp	r3, #4
 800a892:	d014      	beq.n	800a8be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f003 0320 	and.w	r3, r3, #32
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00f      	beq.n	800a8be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	699a      	ldr	r2, [r3, #24]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f042 0220 	orr.w	r2, r2, #32
 800a8bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d014      	beq.n	800a8f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00f      	beq.n	800a8f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8da:	f043 0204 	orr.w	r2, r3, #4
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00f      	beq.n	800a91e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a904:	f043 0201 	orr.w	r2, r3, #1
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	699a      	ldr	r2, [r3, #24]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a91c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00f      	beq.n	800a948 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a92e:	f043 0208 	orr.w	r2, r3, #8
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699a      	ldr	r2, [r3, #24]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a946:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a958:	bf00      	nop
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	fffffc90 	.word	0xfffffc90

0800a968 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	4613      	mov	r3, r2
 800a976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a978:	e010      	b.n	800a99c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a97a:	f7f7 fdbb 	bl	80024f4 <HAL_GetTick>
 800a97e:	4602      	mov	r2, r0
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d803      	bhi.n	800a992 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d102      	bne.n	800a998 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e00f      	b.n	800a9bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	695a      	ldr	r2, [r3, #20]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2301      	moveq	r3, #1
 800a9ae:	2300      	movne	r3, #0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d0df      	beq.n	800a97a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d0:	095b      	lsrs	r3, r3, #5
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	08db      	lsrs	r3, r3, #3
 800a9e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e042      	b.n	800aa92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7f7 fc00 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2224      	movs	r2, #36	@ 0x24
 800aa28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 0201 	bic.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fd91 	bl	800b56c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f826 	bl	800aa9c <UART_SetConfig>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e01b      	b.n	800aa92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f042 0201 	orr.w	r2, r2, #1
 800aa88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fe10 	bl	800b6b0 <UART_CheckIdleState>
 800aa90:	4603      	mov	r3, r0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaa0:	b092      	sub	sp, #72	@ 0x48
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	431a      	orrs	r2, r3
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4bbe      	ldr	r3, [pc, #760]	@ (800adc4 <UART_SetConfig+0x328>)
 800aacc:	4013      	ands	r3, r2
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4ab3      	ldr	r2, [pc, #716]	@ (800adc8 <UART_SetConfig+0x32c>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d004      	beq.n	800ab08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab04:	4313      	orrs	r3, r2
 800ab06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	4baf      	ldr	r3, [pc, #700]	@ (800adcc <UART_SetConfig+0x330>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	6812      	ldr	r2, [r2, #0]
 800ab16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab22:	f023 010f 	bic.w	r1, r3, #15
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4aa6      	ldr	r2, [pc, #664]	@ (800add0 <UART_SetConfig+0x334>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d177      	bne.n	800ac2c <UART_SetConfig+0x190>
 800ab3c:	4ba5      	ldr	r3, [pc, #660]	@ (800add4 <UART_SetConfig+0x338>)
 800ab3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab44:	2b28      	cmp	r3, #40	@ 0x28
 800ab46:	d86d      	bhi.n	800ac24 <UART_SetConfig+0x188>
 800ab48:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <UART_SetConfig+0xb4>)
 800ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4e:	bf00      	nop
 800ab50:	0800abf5 	.word	0x0800abf5
 800ab54:	0800ac25 	.word	0x0800ac25
 800ab58:	0800ac25 	.word	0x0800ac25
 800ab5c:	0800ac25 	.word	0x0800ac25
 800ab60:	0800ac25 	.word	0x0800ac25
 800ab64:	0800ac25 	.word	0x0800ac25
 800ab68:	0800ac25 	.word	0x0800ac25
 800ab6c:	0800ac25 	.word	0x0800ac25
 800ab70:	0800abfd 	.word	0x0800abfd
 800ab74:	0800ac25 	.word	0x0800ac25
 800ab78:	0800ac25 	.word	0x0800ac25
 800ab7c:	0800ac25 	.word	0x0800ac25
 800ab80:	0800ac25 	.word	0x0800ac25
 800ab84:	0800ac25 	.word	0x0800ac25
 800ab88:	0800ac25 	.word	0x0800ac25
 800ab8c:	0800ac25 	.word	0x0800ac25
 800ab90:	0800ac05 	.word	0x0800ac05
 800ab94:	0800ac25 	.word	0x0800ac25
 800ab98:	0800ac25 	.word	0x0800ac25
 800ab9c:	0800ac25 	.word	0x0800ac25
 800aba0:	0800ac25 	.word	0x0800ac25
 800aba4:	0800ac25 	.word	0x0800ac25
 800aba8:	0800ac25 	.word	0x0800ac25
 800abac:	0800ac25 	.word	0x0800ac25
 800abb0:	0800ac0d 	.word	0x0800ac0d
 800abb4:	0800ac25 	.word	0x0800ac25
 800abb8:	0800ac25 	.word	0x0800ac25
 800abbc:	0800ac25 	.word	0x0800ac25
 800abc0:	0800ac25 	.word	0x0800ac25
 800abc4:	0800ac25 	.word	0x0800ac25
 800abc8:	0800ac25 	.word	0x0800ac25
 800abcc:	0800ac25 	.word	0x0800ac25
 800abd0:	0800ac15 	.word	0x0800ac15
 800abd4:	0800ac25 	.word	0x0800ac25
 800abd8:	0800ac25 	.word	0x0800ac25
 800abdc:	0800ac25 	.word	0x0800ac25
 800abe0:	0800ac25 	.word	0x0800ac25
 800abe4:	0800ac25 	.word	0x0800ac25
 800abe8:	0800ac25 	.word	0x0800ac25
 800abec:	0800ac25 	.word	0x0800ac25
 800abf0:	0800ac1d 	.word	0x0800ac1d
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfa:	e222      	b.n	800b042 <UART_SetConfig+0x5a6>
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac02:	e21e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac04:	2308      	movs	r3, #8
 800ac06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0a:	e21a      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac12:	e216      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac14:	2320      	movs	r3, #32
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1a:	e212      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac1c:	2340      	movs	r3, #64	@ 0x40
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac22:	e20e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac24:	2380      	movs	r3, #128	@ 0x80
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2a:	e20a      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a69      	ldr	r2, [pc, #420]	@ (800add8 <UART_SetConfig+0x33c>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d130      	bne.n	800ac98 <UART_SetConfig+0x1fc>
 800ac36:	4b67      	ldr	r3, [pc, #412]	@ (800add4 <UART_SetConfig+0x338>)
 800ac38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d826      	bhi.n	800ac90 <UART_SetConfig+0x1f4>
 800ac42:	a201      	add	r2, pc, #4	@ (adr r2, 800ac48 <UART_SetConfig+0x1ac>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac69 	.word	0x0800ac69
 800ac50:	0800ac71 	.word	0x0800ac71
 800ac54:	0800ac79 	.word	0x0800ac79
 800ac58:	0800ac81 	.word	0x0800ac81
 800ac5c:	0800ac89 	.word	0x0800ac89
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac66:	e1ec      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac68:	2304      	movs	r3, #4
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6e:	e1e8      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac70:	2308      	movs	r3, #8
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac76:	e1e4      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac78:	2310      	movs	r3, #16
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7e:	e1e0      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac80:	2320      	movs	r3, #32
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac86:	e1dc      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac88:	2340      	movs	r3, #64	@ 0x40
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8e:	e1d8      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac90:	2380      	movs	r3, #128	@ 0x80
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac96:	e1d4      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a4f      	ldr	r2, [pc, #316]	@ (800addc <UART_SetConfig+0x340>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d130      	bne.n	800ad04 <UART_SetConfig+0x268>
 800aca2:	4b4c      	ldr	r3, [pc, #304]	@ (800add4 <UART_SetConfig+0x338>)
 800aca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b05      	cmp	r3, #5
 800acac:	d826      	bhi.n	800acfc <UART_SetConfig+0x260>
 800acae:	a201      	add	r2, pc, #4	@ (adr r2, 800acb4 <UART_SetConfig+0x218>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800accd 	.word	0x0800accd
 800acb8:	0800acd5 	.word	0x0800acd5
 800acbc:	0800acdd 	.word	0x0800acdd
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800aced 	.word	0x0800aced
 800acc8:	0800acf5 	.word	0x0800acf5
 800accc:	2300      	movs	r3, #0
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e1b6      	b.n	800b042 <UART_SetConfig+0x5a6>
 800acd4:	2304      	movs	r3, #4
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acda:	e1b2      	b.n	800b042 <UART_SetConfig+0x5a6>
 800acdc:	2308      	movs	r3, #8
 800acde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace2:	e1ae      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ace4:	2310      	movs	r3, #16
 800ace6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acea:	e1aa      	b.n	800b042 <UART_SetConfig+0x5a6>
 800acec:	2320      	movs	r3, #32
 800acee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf2:	e1a6      	b.n	800b042 <UART_SetConfig+0x5a6>
 800acf4:	2340      	movs	r3, #64	@ 0x40
 800acf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfa:	e1a2      	b.n	800b042 <UART_SetConfig+0x5a6>
 800acfc:	2380      	movs	r3, #128	@ 0x80
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad02:	e19e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a35      	ldr	r2, [pc, #212]	@ (800ade0 <UART_SetConfig+0x344>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d130      	bne.n	800ad70 <UART_SetConfig+0x2d4>
 800ad0e:	4b31      	ldr	r3, [pc, #196]	@ (800add4 <UART_SetConfig+0x338>)
 800ad10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b05      	cmp	r3, #5
 800ad18:	d826      	bhi.n	800ad68 <UART_SetConfig+0x2cc>
 800ad1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad20 <UART_SetConfig+0x284>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800ad39 	.word	0x0800ad39
 800ad24:	0800ad41 	.word	0x0800ad41
 800ad28:	0800ad49 	.word	0x0800ad49
 800ad2c:	0800ad51 	.word	0x0800ad51
 800ad30:	0800ad59 	.word	0x0800ad59
 800ad34:	0800ad61 	.word	0x0800ad61
 800ad38:	2300      	movs	r3, #0
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3e:	e180      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad40:	2304      	movs	r3, #4
 800ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad46:	e17c      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad48:	2308      	movs	r3, #8
 800ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4e:	e178      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad50:	2310      	movs	r3, #16
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad56:	e174      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad58:	2320      	movs	r3, #32
 800ad5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5e:	e170      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad60:	2340      	movs	r3, #64	@ 0x40
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad66:	e16c      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad68:	2380      	movs	r3, #128	@ 0x80
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6e:	e168      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a1b      	ldr	r2, [pc, #108]	@ (800ade4 <UART_SetConfig+0x348>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d142      	bne.n	800ae00 <UART_SetConfig+0x364>
 800ad7a:	4b16      	ldr	r3, [pc, #88]	@ (800add4 <UART_SetConfig+0x338>)
 800ad7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad7e:	f003 0307 	and.w	r3, r3, #7
 800ad82:	2b05      	cmp	r3, #5
 800ad84:	d838      	bhi.n	800adf8 <UART_SetConfig+0x35c>
 800ad86:	a201      	add	r2, pc, #4	@ (adr r2, 800ad8c <UART_SetConfig+0x2f0>)
 800ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8c:	0800ada5 	.word	0x0800ada5
 800ad90:	0800adad 	.word	0x0800adad
 800ad94:	0800adb5 	.word	0x0800adb5
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800ade9 	.word	0x0800ade9
 800ada0:	0800adf1 	.word	0x0800adf1
 800ada4:	2300      	movs	r3, #0
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e14a      	b.n	800b042 <UART_SetConfig+0x5a6>
 800adac:	2304      	movs	r3, #4
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb2:	e146      	b.n	800b042 <UART_SetConfig+0x5a6>
 800adb4:	2308      	movs	r3, #8
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adba:	e142      	b.n	800b042 <UART_SetConfig+0x5a6>
 800adbc:	2310      	movs	r3, #16
 800adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc2:	e13e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800adc4:	cfff69f3 	.word	0xcfff69f3
 800adc8:	58000c00 	.word	0x58000c00
 800adcc:	11fff4ff 	.word	0x11fff4ff
 800add0:	40011000 	.word	0x40011000
 800add4:	58024400 	.word	0x58024400
 800add8:	40004400 	.word	0x40004400
 800addc:	40004800 	.word	0x40004800
 800ade0:	40004c00 	.word	0x40004c00
 800ade4:	40005000 	.word	0x40005000
 800ade8:	2320      	movs	r3, #32
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e128      	b.n	800b042 <UART_SetConfig+0x5a6>
 800adf0:	2340      	movs	r3, #64	@ 0x40
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e124      	b.n	800b042 <UART_SetConfig+0x5a6>
 800adf8:	2380      	movs	r3, #128	@ 0x80
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e120      	b.n	800b042 <UART_SetConfig+0x5a6>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4acb      	ldr	r2, [pc, #812]	@ (800b134 <UART_SetConfig+0x698>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d176      	bne.n	800aef8 <UART_SetConfig+0x45c>
 800ae0a:	4bcb      	ldr	r3, [pc, #812]	@ (800b138 <UART_SetConfig+0x69c>)
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae12:	2b28      	cmp	r3, #40	@ 0x28
 800ae14:	d86c      	bhi.n	800aef0 <UART_SetConfig+0x454>
 800ae16:	a201      	add	r2, pc, #4	@ (adr r2, 800ae1c <UART_SetConfig+0x380>)
 800ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1c:	0800aec1 	.word	0x0800aec1
 800ae20:	0800aef1 	.word	0x0800aef1
 800ae24:	0800aef1 	.word	0x0800aef1
 800ae28:	0800aef1 	.word	0x0800aef1
 800ae2c:	0800aef1 	.word	0x0800aef1
 800ae30:	0800aef1 	.word	0x0800aef1
 800ae34:	0800aef1 	.word	0x0800aef1
 800ae38:	0800aef1 	.word	0x0800aef1
 800ae3c:	0800aec9 	.word	0x0800aec9
 800ae40:	0800aef1 	.word	0x0800aef1
 800ae44:	0800aef1 	.word	0x0800aef1
 800ae48:	0800aef1 	.word	0x0800aef1
 800ae4c:	0800aef1 	.word	0x0800aef1
 800ae50:	0800aef1 	.word	0x0800aef1
 800ae54:	0800aef1 	.word	0x0800aef1
 800ae58:	0800aef1 	.word	0x0800aef1
 800ae5c:	0800aed1 	.word	0x0800aed1
 800ae60:	0800aef1 	.word	0x0800aef1
 800ae64:	0800aef1 	.word	0x0800aef1
 800ae68:	0800aef1 	.word	0x0800aef1
 800ae6c:	0800aef1 	.word	0x0800aef1
 800ae70:	0800aef1 	.word	0x0800aef1
 800ae74:	0800aef1 	.word	0x0800aef1
 800ae78:	0800aef1 	.word	0x0800aef1
 800ae7c:	0800aed9 	.word	0x0800aed9
 800ae80:	0800aef1 	.word	0x0800aef1
 800ae84:	0800aef1 	.word	0x0800aef1
 800ae88:	0800aef1 	.word	0x0800aef1
 800ae8c:	0800aef1 	.word	0x0800aef1
 800ae90:	0800aef1 	.word	0x0800aef1
 800ae94:	0800aef1 	.word	0x0800aef1
 800ae98:	0800aef1 	.word	0x0800aef1
 800ae9c:	0800aee1 	.word	0x0800aee1
 800aea0:	0800aef1 	.word	0x0800aef1
 800aea4:	0800aef1 	.word	0x0800aef1
 800aea8:	0800aef1 	.word	0x0800aef1
 800aeac:	0800aef1 	.word	0x0800aef1
 800aeb0:	0800aef1 	.word	0x0800aef1
 800aeb4:	0800aef1 	.word	0x0800aef1
 800aeb8:	0800aef1 	.word	0x0800aef1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e0bc      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aec8:	2304      	movs	r3, #4
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aece:	e0b8      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aed0:	2308      	movs	r3, #8
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed6:	e0b4      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aed8:	2310      	movs	r3, #16
 800aeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aede:	e0b0      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aee0:	2320      	movs	r3, #32
 800aee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee6:	e0ac      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aee8:	2340      	movs	r3, #64	@ 0x40
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeee:	e0a8      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aef0:	2380      	movs	r3, #128	@ 0x80
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef6:	e0a4      	b.n	800b042 <UART_SetConfig+0x5a6>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a8f      	ldr	r2, [pc, #572]	@ (800b13c <UART_SetConfig+0x6a0>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d130      	bne.n	800af64 <UART_SetConfig+0x4c8>
 800af02:	4b8d      	ldr	r3, [pc, #564]	@ (800b138 <UART_SetConfig+0x69c>)
 800af04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d826      	bhi.n	800af5c <UART_SetConfig+0x4c0>
 800af0e:	a201      	add	r2, pc, #4	@ (adr r2, 800af14 <UART_SetConfig+0x478>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af2d 	.word	0x0800af2d
 800af18:	0800af35 	.word	0x0800af35
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800af45 	.word	0x0800af45
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	2300      	movs	r3, #0
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e086      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af34:	2304      	movs	r3, #4
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3a:	e082      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af3c:	2308      	movs	r3, #8
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af42:	e07e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af44:	2310      	movs	r3, #16
 800af46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4a:	e07a      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af4c:	2320      	movs	r3, #32
 800af4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af52:	e076      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af54:	2340      	movs	r3, #64	@ 0x40
 800af56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5a:	e072      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af5c:	2380      	movs	r3, #128	@ 0x80
 800af5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af62:	e06e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a75      	ldr	r2, [pc, #468]	@ (800b140 <UART_SetConfig+0x6a4>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d130      	bne.n	800afd0 <UART_SetConfig+0x534>
 800af6e:	4b72      	ldr	r3, [pc, #456]	@ (800b138 <UART_SetConfig+0x69c>)
 800af70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	2b05      	cmp	r3, #5
 800af78:	d826      	bhi.n	800afc8 <UART_SetConfig+0x52c>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <UART_SetConfig+0x4e4>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800af99 	.word	0x0800af99
 800af84:	0800afa1 	.word	0x0800afa1
 800af88:	0800afa9 	.word	0x0800afa9
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afc1 	.word	0x0800afc1
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e050      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afa0:	2304      	movs	r3, #4
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e04c      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afa8:	2308      	movs	r3, #8
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afae:	e048      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afb0:	2310      	movs	r3, #16
 800afb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb6:	e044      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afb8:	2320      	movs	r3, #32
 800afba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afbe:	e040      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afc0:	2340      	movs	r3, #64	@ 0x40
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc6:	e03c      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afc8:	2380      	movs	r3, #128	@ 0x80
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afce:	e038      	b.n	800b042 <UART_SetConfig+0x5a6>
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a5b      	ldr	r2, [pc, #364]	@ (800b144 <UART_SetConfig+0x6a8>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d130      	bne.n	800b03c <UART_SetConfig+0x5a0>
 800afda:	4b57      	ldr	r3, [pc, #348]	@ (800b138 <UART_SetConfig+0x69c>)
 800afdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	2b05      	cmp	r3, #5
 800afe4:	d826      	bhi.n	800b034 <UART_SetConfig+0x598>
 800afe6:	a201      	add	r2, pc, #4	@ (adr r2, 800afec <UART_SetConfig+0x550>)
 800afe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afec:	0800b005 	.word	0x0800b005
 800aff0:	0800b00d 	.word	0x0800b00d
 800aff4:	0800b015 	.word	0x0800b015
 800aff8:	0800b01d 	.word	0x0800b01d
 800affc:	0800b025 	.word	0x0800b025
 800b000:	0800b02d 	.word	0x0800b02d
 800b004:	2302      	movs	r3, #2
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e01a      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b00c:	2304      	movs	r3, #4
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e016      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b014:	2308      	movs	r3, #8
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01a:	e012      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b01c:	2310      	movs	r3, #16
 800b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b022:	e00e      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b024:	2320      	movs	r3, #32
 800b026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02a:	e00a      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b02c:	2340      	movs	r3, #64	@ 0x40
 800b02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b032:	e006      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b034:	2380      	movs	r3, #128	@ 0x80
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03a:	e002      	b.n	800b042 <UART_SetConfig+0x5a6>
 800b03c:	2380      	movs	r3, #128	@ 0x80
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a3f      	ldr	r2, [pc, #252]	@ (800b144 <UART_SetConfig+0x6a8>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	f040 80f8 	bne.w	800b23e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b052:	2b20      	cmp	r3, #32
 800b054:	dc46      	bgt.n	800b0e4 <UART_SetConfig+0x648>
 800b056:	2b02      	cmp	r3, #2
 800b058:	f2c0 8082 	blt.w	800b160 <UART_SetConfig+0x6c4>
 800b05c:	3b02      	subs	r3, #2
 800b05e:	2b1e      	cmp	r3, #30
 800b060:	d87e      	bhi.n	800b160 <UART_SetConfig+0x6c4>
 800b062:	a201      	add	r2, pc, #4	@ (adr r2, 800b068 <UART_SetConfig+0x5cc>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b0eb 	.word	0x0800b0eb
 800b06c:	0800b161 	.word	0x0800b161
 800b070:	0800b0f3 	.word	0x0800b0f3
 800b074:	0800b161 	.word	0x0800b161
 800b078:	0800b161 	.word	0x0800b161
 800b07c:	0800b161 	.word	0x0800b161
 800b080:	0800b103 	.word	0x0800b103
 800b084:	0800b161 	.word	0x0800b161
 800b088:	0800b161 	.word	0x0800b161
 800b08c:	0800b161 	.word	0x0800b161
 800b090:	0800b161 	.word	0x0800b161
 800b094:	0800b161 	.word	0x0800b161
 800b098:	0800b161 	.word	0x0800b161
 800b09c:	0800b161 	.word	0x0800b161
 800b0a0:	0800b113 	.word	0x0800b113
 800b0a4:	0800b161 	.word	0x0800b161
 800b0a8:	0800b161 	.word	0x0800b161
 800b0ac:	0800b161 	.word	0x0800b161
 800b0b0:	0800b161 	.word	0x0800b161
 800b0b4:	0800b161 	.word	0x0800b161
 800b0b8:	0800b161 	.word	0x0800b161
 800b0bc:	0800b161 	.word	0x0800b161
 800b0c0:	0800b161 	.word	0x0800b161
 800b0c4:	0800b161 	.word	0x0800b161
 800b0c8:	0800b161 	.word	0x0800b161
 800b0cc:	0800b161 	.word	0x0800b161
 800b0d0:	0800b161 	.word	0x0800b161
 800b0d4:	0800b161 	.word	0x0800b161
 800b0d8:	0800b161 	.word	0x0800b161
 800b0dc:	0800b161 	.word	0x0800b161
 800b0e0:	0800b153 	.word	0x0800b153
 800b0e4:	2b40      	cmp	r3, #64	@ 0x40
 800b0e6:	d037      	beq.n	800b158 <UART_SetConfig+0x6bc>
 800b0e8:	e03a      	b.n	800b160 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0ea:	f7fc feb3 	bl	8007e54 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0f0:	e03c      	b.n	800b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fc fec2 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b100:	e034      	b.n	800b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b102:	f107 0318 	add.w	r3, r7, #24
 800b106:	4618      	mov	r0, r3
 800b108:	f7fd f80e 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b110:	e02c      	b.n	800b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b112:	4b09      	ldr	r3, [pc, #36]	@ (800b138 <UART_SetConfig+0x69c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0320 	and.w	r3, r3, #32
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d016      	beq.n	800b14c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b11e:	4b06      	ldr	r3, [pc, #24]	@ (800b138 <UART_SetConfig+0x69c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	08db      	lsrs	r3, r3, #3
 800b124:	f003 0303 	and.w	r3, r3, #3
 800b128:	4a07      	ldr	r2, [pc, #28]	@ (800b148 <UART_SetConfig+0x6ac>)
 800b12a:	fa22 f303 	lsr.w	r3, r2, r3
 800b12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b130:	e01c      	b.n	800b16c <UART_SetConfig+0x6d0>
 800b132:	bf00      	nop
 800b134:	40011400 	.word	0x40011400
 800b138:	58024400 	.word	0x58024400
 800b13c:	40007800 	.word	0x40007800
 800b140:	40007c00 	.word	0x40007c00
 800b144:	58000c00 	.word	0x58000c00
 800b148:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b14c:	4b9d      	ldr	r3, [pc, #628]	@ (800b3c4 <UART_SetConfig+0x928>)
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e00c      	b.n	800b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b152:	4b9d      	ldr	r3, [pc, #628]	@ (800b3c8 <UART_SetConfig+0x92c>)
 800b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b156:	e009      	b.n	800b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b15e:	e005      	b.n	800b16c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b16a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 81de 	beq.w	800b530 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	4a94      	ldr	r2, [pc, #592]	@ (800b3cc <UART_SetConfig+0x930>)
 800b17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b17e:	461a      	mov	r2, r3
 800b180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b182:	fbb3 f3f2 	udiv	r3, r3, r2
 800b186:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b194:	429a      	cmp	r2, r3
 800b196:	d305      	bcc.n	800b1a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d903      	bls.n	800b1ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1aa:	e1c1      	b.n	800b530 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	60bb      	str	r3, [r7, #8]
 800b1b2:	60fa      	str	r2, [r7, #12]
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b8:	4a84      	ldr	r2, [pc, #528]	@ (800b3cc <UART_SetConfig+0x930>)
 800b1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	607a      	str	r2, [r7, #4]
 800b1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1ce:	f7f5 f883 	bl	80002d8 <__aeabi_uldivmod>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	4619      	mov	r1, r3
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	020b      	lsls	r3, r1, #8
 800b1e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1e8:	0202      	lsls	r2, r0, #8
 800b1ea:	6979      	ldr	r1, [r7, #20]
 800b1ec:	6849      	ldr	r1, [r1, #4]
 800b1ee:	0849      	lsrs	r1, r1, #1
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	eb12 0804 	adds.w	r8, r2, r4
 800b1fa:	eb43 0905 	adc.w	r9, r3, r5
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	469a      	mov	sl, r3
 800b206:	4693      	mov	fp, r2
 800b208:	4652      	mov	r2, sl
 800b20a:	465b      	mov	r3, fp
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 f862 	bl	80002d8 <__aeabi_uldivmod>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4613      	mov	r3, r2
 800b21a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b222:	d308      	bcc.n	800b236 <UART_SetConfig+0x79a>
 800b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b22a:	d204      	bcs.n	800b236 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b232:	60da      	str	r2, [r3, #12]
 800b234:	e17c      	b.n	800b530 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b23c:	e178      	b.n	800b530 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b246:	f040 80c5 	bne.w	800b3d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b24a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b24e:	2b20      	cmp	r3, #32
 800b250:	dc48      	bgt.n	800b2e4 <UART_SetConfig+0x848>
 800b252:	2b00      	cmp	r3, #0
 800b254:	db7b      	blt.n	800b34e <UART_SetConfig+0x8b2>
 800b256:	2b20      	cmp	r3, #32
 800b258:	d879      	bhi.n	800b34e <UART_SetConfig+0x8b2>
 800b25a:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <UART_SetConfig+0x7c4>)
 800b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b260:	0800b2eb 	.word	0x0800b2eb
 800b264:	0800b2f3 	.word	0x0800b2f3
 800b268:	0800b34f 	.word	0x0800b34f
 800b26c:	0800b34f 	.word	0x0800b34f
 800b270:	0800b2fb 	.word	0x0800b2fb
 800b274:	0800b34f 	.word	0x0800b34f
 800b278:	0800b34f 	.word	0x0800b34f
 800b27c:	0800b34f 	.word	0x0800b34f
 800b280:	0800b30b 	.word	0x0800b30b
 800b284:	0800b34f 	.word	0x0800b34f
 800b288:	0800b34f 	.word	0x0800b34f
 800b28c:	0800b34f 	.word	0x0800b34f
 800b290:	0800b34f 	.word	0x0800b34f
 800b294:	0800b34f 	.word	0x0800b34f
 800b298:	0800b34f 	.word	0x0800b34f
 800b29c:	0800b34f 	.word	0x0800b34f
 800b2a0:	0800b31b 	.word	0x0800b31b
 800b2a4:	0800b34f 	.word	0x0800b34f
 800b2a8:	0800b34f 	.word	0x0800b34f
 800b2ac:	0800b34f 	.word	0x0800b34f
 800b2b0:	0800b34f 	.word	0x0800b34f
 800b2b4:	0800b34f 	.word	0x0800b34f
 800b2b8:	0800b34f 	.word	0x0800b34f
 800b2bc:	0800b34f 	.word	0x0800b34f
 800b2c0:	0800b34f 	.word	0x0800b34f
 800b2c4:	0800b34f 	.word	0x0800b34f
 800b2c8:	0800b34f 	.word	0x0800b34f
 800b2cc:	0800b34f 	.word	0x0800b34f
 800b2d0:	0800b34f 	.word	0x0800b34f
 800b2d4:	0800b34f 	.word	0x0800b34f
 800b2d8:	0800b34f 	.word	0x0800b34f
 800b2dc:	0800b34f 	.word	0x0800b34f
 800b2e0:	0800b341 	.word	0x0800b341
 800b2e4:	2b40      	cmp	r3, #64	@ 0x40
 800b2e6:	d02e      	beq.n	800b346 <UART_SetConfig+0x8aa>
 800b2e8:	e031      	b.n	800b34e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2ea:	f7fa fdbd 	bl	8005e68 <HAL_RCC_GetPCLK1Freq>
 800b2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e033      	b.n	800b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f2:	f7fa fdcf 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 800b2f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2f8:	e02f      	b.n	800b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fc fdbe 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b308:	e027      	b.n	800b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b30a:	f107 0318 	add.w	r3, r7, #24
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fc ff0a 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b318:	e01f      	b.n	800b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b31a:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d0 <UART_SetConfig+0x934>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b00      	cmp	r3, #0
 800b324:	d009      	beq.n	800b33a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b326:	4b2a      	ldr	r3, [pc, #168]	@ (800b3d0 <UART_SetConfig+0x934>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	08db      	lsrs	r3, r3, #3
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	4a24      	ldr	r2, [pc, #144]	@ (800b3c4 <UART_SetConfig+0x928>)
 800b332:	fa22 f303 	lsr.w	r3, r2, r3
 800b336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b338:	e00f      	b.n	800b35a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b33a:	4b22      	ldr	r3, [pc, #136]	@ (800b3c4 <UART_SetConfig+0x928>)
 800b33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33e:	e00c      	b.n	800b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b340:	4b21      	ldr	r3, [pc, #132]	@ (800b3c8 <UART_SetConfig+0x92c>)
 800b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b344:	e009      	b.n	800b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b34c:	e005      	b.n	800b35a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 80e7 	beq.w	800b530 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b366:	4a19      	ldr	r2, [pc, #100]	@ (800b3cc <UART_SetConfig+0x930>)
 800b368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b36c:	461a      	mov	r2, r3
 800b36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b370:	fbb3 f3f2 	udiv	r3, r3, r2
 800b374:	005a      	lsls	r2, r3, #1
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	085b      	lsrs	r3, r3, #1
 800b37c:	441a      	add	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	fbb2 f3f3 	udiv	r3, r2, r3
 800b386:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38a:	2b0f      	cmp	r3, #15
 800b38c:	d916      	bls.n	800b3bc <UART_SetConfig+0x920>
 800b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b394:	d212      	bcs.n	800b3bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b398:	b29b      	uxth	r3, r3
 800b39a:	f023 030f 	bic.w	r3, r3, #15
 800b39e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	085b      	lsrs	r3, r3, #1
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	f003 0307 	and.w	r3, r3, #7
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b3b8:	60da      	str	r2, [r3, #12]
 800b3ba:	e0b9      	b.n	800b530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b3c2:	e0b5      	b.n	800b530 <UART_SetConfig+0xa94>
 800b3c4:	03d09000 	.word	0x03d09000
 800b3c8:	003d0900 	.word	0x003d0900
 800b3cc:	0800f708 	.word	0x0800f708
 800b3d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3d8:	2b20      	cmp	r3, #32
 800b3da:	dc49      	bgt.n	800b470 <UART_SetConfig+0x9d4>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	db7c      	blt.n	800b4da <UART_SetConfig+0xa3e>
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d87a      	bhi.n	800b4da <UART_SetConfig+0xa3e>
 800b3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <UART_SetConfig+0x950>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b477 	.word	0x0800b477
 800b3f0:	0800b47f 	.word	0x0800b47f
 800b3f4:	0800b4db 	.word	0x0800b4db
 800b3f8:	0800b4db 	.word	0x0800b4db
 800b3fc:	0800b487 	.word	0x0800b487
 800b400:	0800b4db 	.word	0x0800b4db
 800b404:	0800b4db 	.word	0x0800b4db
 800b408:	0800b4db 	.word	0x0800b4db
 800b40c:	0800b497 	.word	0x0800b497
 800b410:	0800b4db 	.word	0x0800b4db
 800b414:	0800b4db 	.word	0x0800b4db
 800b418:	0800b4db 	.word	0x0800b4db
 800b41c:	0800b4db 	.word	0x0800b4db
 800b420:	0800b4db 	.word	0x0800b4db
 800b424:	0800b4db 	.word	0x0800b4db
 800b428:	0800b4db 	.word	0x0800b4db
 800b42c:	0800b4a7 	.word	0x0800b4a7
 800b430:	0800b4db 	.word	0x0800b4db
 800b434:	0800b4db 	.word	0x0800b4db
 800b438:	0800b4db 	.word	0x0800b4db
 800b43c:	0800b4db 	.word	0x0800b4db
 800b440:	0800b4db 	.word	0x0800b4db
 800b444:	0800b4db 	.word	0x0800b4db
 800b448:	0800b4db 	.word	0x0800b4db
 800b44c:	0800b4db 	.word	0x0800b4db
 800b450:	0800b4db 	.word	0x0800b4db
 800b454:	0800b4db 	.word	0x0800b4db
 800b458:	0800b4db 	.word	0x0800b4db
 800b45c:	0800b4db 	.word	0x0800b4db
 800b460:	0800b4db 	.word	0x0800b4db
 800b464:	0800b4db 	.word	0x0800b4db
 800b468:	0800b4db 	.word	0x0800b4db
 800b46c:	0800b4cd 	.word	0x0800b4cd
 800b470:	2b40      	cmp	r3, #64	@ 0x40
 800b472:	d02e      	beq.n	800b4d2 <UART_SetConfig+0xa36>
 800b474:	e031      	b.n	800b4da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b476:	f7fa fcf7 	bl	8005e68 <HAL_RCC_GetPCLK1Freq>
 800b47a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b47c:	e033      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b47e:	f7fa fd09 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 800b482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b484:	e02f      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fc fcf8 	bl	8007e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b494:	e027      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b496:	f107 0318 	add.w	r3, r7, #24
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fc fe44 	bl	8008128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a4:	e01f      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b55c <UART_SetConfig+0xac0>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0320 	and.w	r3, r3, #32
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d009      	beq.n	800b4c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800b55c <UART_SetConfig+0xac0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	08db      	lsrs	r3, r3, #3
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	4a28      	ldr	r2, [pc, #160]	@ (800b560 <UART_SetConfig+0xac4>)
 800b4be:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4c4:	e00f      	b.n	800b4e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b4c6:	4b26      	ldr	r3, [pc, #152]	@ (800b560 <UART_SetConfig+0xac4>)
 800b4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ca:	e00c      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4cc:	4b25      	ldr	r3, [pc, #148]	@ (800b564 <UART_SetConfig+0xac8>)
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d0:	e009      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d8:	e005      	b.n	800b4e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4e4:	bf00      	nop
    }

    if (pclk != 0U)
 800b4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d021      	beq.n	800b530 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b568 <UART_SetConfig+0xacc>)
 800b4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	441a      	add	r2, r3
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b512:	2b0f      	cmp	r3, #15
 800b514:	d909      	bls.n	800b52a <UART_SetConfig+0xa8e>
 800b516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b51c:	d205      	bcs.n	800b52a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b520:	b29a      	uxth	r2, r3
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60da      	str	r2, [r3, #12]
 800b528:	e002      	b.n	800b530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2201      	movs	r2, #1
 800b534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	2200      	movs	r2, #0
 800b544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2200      	movs	r2, #0
 800b54a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b54c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b550:	4618      	mov	r0, r3
 800b552:	3748      	adds	r7, #72	@ 0x48
 800b554:	46bd      	mov	sp, r7
 800b556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b55a:	bf00      	nop
 800b55c:	58024400 	.word	0x58024400
 800b560:	03d09000 	.word	0x03d09000
 800b564:	003d0900 	.word	0x003d0900
 800b568:	0800f708 	.word	0x0800f708

0800b56c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00a      	beq.n	800b596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5bc:	f003 0302 	and.w	r3, r3, #2
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00a      	beq.n	800b5da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	f003 0304 	and.w	r3, r3, #4
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00a      	beq.n	800b5fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b600:	f003 0310 	and.w	r3, r3, #16
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00a      	beq.n	800b61e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b622:	f003 0320 	and.w	r3, r3, #32
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00a      	beq.n	800b640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01a      	beq.n	800b682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b66a:	d10a      	bne.n	800b682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	605a      	str	r2, [r3, #4]
  }
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b098      	sub	sp, #96	@ 0x60
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6c0:	f7f6 ff18 	bl	80024f4 <HAL_GetTick>
 800b6c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 0308 	and.w	r3, r3, #8
 800b6d0:	2b08      	cmp	r3, #8
 800b6d2:	d12f      	bne.n	800b734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f88e 	bl	800b804 <UART_WaitOnFlagUntilTimeout>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d022      	beq.n	800b734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b702:	653b      	str	r3, [r7, #80]	@ 0x50
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	461a      	mov	r2, r3
 800b70a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b70c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b70e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e6      	bne.n	800b6ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2220      	movs	r2, #32
 800b724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	e063      	b.n	800b7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0304 	and.w	r3, r3, #4
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d149      	bne.n	800b7d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b74a:	2200      	movs	r2, #0
 800b74c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f857 	bl	800b804 <UART_WaitOnFlagUntilTimeout>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d03c      	beq.n	800b7d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b764:	e853 3f00 	ldrex	r3, [r3]
 800b768:	623b      	str	r3, [r7, #32]
   return(result);
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b77a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b77c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b782:	e841 2300 	strex	r3, r2, [r1]
 800b786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1e6      	bne.n	800b75c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3308      	adds	r3, #8
 800b794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f023 0301 	bic.w	r3, r3, #1
 800b7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7ae:	61fa      	str	r2, [r7, #28]
 800b7b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b2:	69b9      	ldr	r1, [r7, #24]
 800b7b4:	69fa      	ldr	r2, [r7, #28]
 800b7b6:	e841 2300 	strex	r3, r2, [r1]
 800b7ba:	617b      	str	r3, [r7, #20]
   return(result);
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1e5      	bne.n	800b78e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e012      	b.n	800b7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3758      	adds	r7, #88	@ 0x58
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	603b      	str	r3, [r7, #0]
 800b810:	4613      	mov	r3, r2
 800b812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b814:	e04f      	b.n	800b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81c:	d04b      	beq.n	800b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b81e:	f7f6 fe69 	bl	80024f4 <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d302      	bcc.n	800b834 <UART_WaitOnFlagUntilTimeout+0x30>
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e04e      	b.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0304 	and.w	r3, r3, #4
 800b842:	2b00      	cmp	r3, #0
 800b844:	d037      	beq.n	800b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b80      	cmp	r3, #128	@ 0x80
 800b84a:	d034      	beq.n	800b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2b40      	cmp	r3, #64	@ 0x40
 800b850:	d031      	beq.n	800b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	f003 0308 	and.w	r3, r3, #8
 800b85c:	2b08      	cmp	r3, #8
 800b85e:	d110      	bne.n	800b882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2208      	movs	r2, #8
 800b866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 f839 	bl	800b8e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2208      	movs	r2, #8
 800b872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e029      	b.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b890:	d111      	bne.n	800b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b89a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f81f 	bl	800b8e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e00f      	b.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	69da      	ldr	r2, [r3, #28]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	bf0c      	ite	eq
 800b8c6:	2301      	moveq	r3, #1
 800b8c8:	2300      	movne	r3, #0
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d0a0      	beq.n	800b816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b095      	sub	sp, #84	@ 0x54
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f0:	e853 3f00 	ldrex	r3, [r3]
 800b8f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b906:	643b      	str	r3, [r7, #64]	@ 0x40
 800b908:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b90c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b90e:	e841 2300 	strex	r3, r2, [r1]
 800b912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e6      	bne.n	800b8e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3308      	adds	r3, #8
 800b920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	61fb      	str	r3, [r7, #28]
   return(result);
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	4b1e      	ldr	r3, [pc, #120]	@ (800b9a8 <UART_EndRxTransfer+0xc8>)
 800b92e:	4013      	ands	r3, r2
 800b930:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3308      	adds	r3, #8
 800b938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b93a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b93c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b942:	e841 2300 	strex	r3, r2, [r1]
 800b946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1e5      	bne.n	800b91a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b952:	2b01      	cmp	r3, #1
 800b954:	d118      	bne.n	800b988 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	e853 3f00 	ldrex	r3, [r3]
 800b962:	60bb      	str	r3, [r7, #8]
   return(result);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f023 0310 	bic.w	r3, r3, #16
 800b96a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	461a      	mov	r2, r3
 800b972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	6979      	ldr	r1, [r7, #20]
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	e841 2300 	strex	r3, r2, [r1]
 800b980:	613b      	str	r3, [r7, #16]
   return(result);
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1e6      	bne.n	800b956 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2220      	movs	r2, #32
 800b98c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b99c:	bf00      	nop
 800b99e:	3754      	adds	r7, #84	@ 0x54
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	effffffe 	.word	0xeffffffe

0800b9ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e027      	b.n	800ba12 <HAL_UARTEx_DisableFifoMode+0x66>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2224      	movs	r2, #36	@ 0x24
 800b9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f022 0201 	bic.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba32:	2302      	movs	r3, #2
 800ba34:	e02d      	b.n	800ba92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2224      	movs	r2, #36	@ 0x24
 800ba42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0201 	bic.w	r2, r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f850 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d101      	bne.n	800bab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800baae:	2302      	movs	r3, #2
 800bab0:	e02d      	b.n	800bb0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2224      	movs	r2, #36	@ 0x24
 800babe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f022 0201 	bic.w	r2, r2, #1
 800bad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f812 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d108      	bne.n	800bb3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb38:	e031      	b.n	800bb9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb3a:	2310      	movs	r3, #16
 800bb3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb3e:	2310      	movs	r3, #16
 800bb40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	0e5b      	lsrs	r3, r3, #25
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	0f5b      	lsrs	r3, r3, #29
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	7b3a      	ldrb	r2, [r7, #12]
 800bb66:	4911      	ldr	r1, [pc, #68]	@ (800bbac <UARTEx_SetNbDataToProcess+0x94>)
 800bb68:	5c8a      	ldrb	r2, [r1, r2]
 800bb6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb6e:	7b3a      	ldrb	r2, [r7, #12]
 800bb70:	490f      	ldr	r1, [pc, #60]	@ (800bbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb74:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	7b7a      	ldrb	r2, [r7, #13]
 800bb84:	4909      	ldr	r1, [pc, #36]	@ (800bbac <UARTEx_SetNbDataToProcess+0x94>)
 800bb86:	5c8a      	ldrb	r2, [r1, r2]
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb8c:	7b7a      	ldrb	r2, [r7, #13]
 800bb8e:	4908      	ldr	r1, [pc, #32]	@ (800bbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb92:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	0800f720 	.word	0x0800f720
 800bbb0:	0800f728 	.word	0x0800f728

0800bbb4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	b480      	push	{r7}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	f107 001c 	add.w	r0, r7, #28
 800bbc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bbca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bbce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bbd2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bbd6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bbda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <SDMMC_Init+0x50>)
 800bbe8:	4013      	ands	r3, r2
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	431a      	orrs	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	b004      	add	sp, #16
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	ffc02c00 	.word	0xffc02c00

0800bc08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f043 0203 	orr.w	r2, r3, #3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0303 	and.w	r3, r3, #3
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
	...

0800bc84 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bca2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bca8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bcae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68da      	ldr	r2, [r3, #12]
 800bcba:	4b06      	ldr	r3, [pc, #24]	@ (800bcd4 <SDMMC_SendCommand+0x50>)
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	431a      	orrs	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	fffee0c0 	.word	0xfffee0c0

0800bcd8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	b2db      	uxtb	r3, r3
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b085      	sub	sp, #20
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3314      	adds	r3, #20
 800bd00:	461a      	mov	r2, r3
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	4413      	add	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bd3e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bd44:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bd4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0

}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bd7e:	2310      	movs	r3, #16
 800bd80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd92:	f107 0308 	add.w	r3, r7, #8
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff ff73 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bd9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bda2:	2110      	movs	r1, #16
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fa5f 	bl	800c268 <SDMMC_GetCmdResp1>
 800bdaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdac:	69fb      	ldr	r3, [r7, #28]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3720      	adds	r7, #32
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bdc4:	2311      	movs	r3, #17
 800bdc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bdd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdd8:	f107 0308 	add.w	r3, r7, #8
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff ff50 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bde4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bde8:	2111      	movs	r1, #17
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fa3c 	bl	800c268 <SDMMC_GetCmdResp1>
 800bdf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdf2:	69fb      	ldr	r3, [r7, #28]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800be0a:	2312      	movs	r3, #18
 800be0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff ff2d 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be2e:	2112      	movs	r1, #18
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fa19 	bl	800c268 <SDMMC_GetCmdResp1>
 800be36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be38:	69fb      	ldr	r3, [r7, #28]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3720      	adds	r7, #32
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b088      	sub	sp, #32
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800be50:	2318      	movs	r3, #24
 800be52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be64:	f107 0308 	add.w	r3, r7, #8
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7ff ff0a 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be74:	2118      	movs	r1, #24
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f9f6 	bl	800c268 <SDMMC_GetCmdResp1>
 800be7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be7e:	69fb      	ldr	r3, [r7, #28]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3720      	adds	r7, #32
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b088      	sub	sp, #32
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be96:	2319      	movs	r3, #25
 800be98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea0:	2300      	movs	r3, #0
 800bea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beaa:	f107 0308 	add.w	r3, r7, #8
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7ff fee7 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800beb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beba:	2119      	movs	r1, #25
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f9d3 	bl	800c268 <SDMMC_GetCmdResp1>
 800bec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec4:	69fb      	ldr	r3, [r7, #28]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
	...

0800bed0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bedc:	230c      	movs	r3, #12
 800bede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800beee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf08:	f107 0308 	add.w	r3, r7, #8
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff feb8 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf14:	4a0b      	ldr	r2, [pc, #44]	@ (800bf44 <SDMMC_CmdStopTransfer+0x74>)
 800bf16:	210c      	movs	r1, #12
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f9a5 	bl	800c268 <SDMMC_GetCmdResp1>
 800bf1e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf32:	d101      	bne.n	800bf38 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bf38:	69fb      	ldr	r3, [r7, #28]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	05f5e100 	.word	0x05f5e100

0800bf48 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b088      	sub	sp, #32
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf56:	2307      	movs	r3, #7
 800bf58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf6a:	f107 0308 	add.w	r3, r7, #8
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff fe87 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf7a:	2107      	movs	r1, #7
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f973 	bl	800c268 <SDMMC_GetCmdResp1>
 800bf82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf84:	69fb      	ldr	r3, [r7, #28]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b088      	sub	sp, #32
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfac:	f107 0308 	add.w	r3, r7, #8
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fe66 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fb97 	bl	800c6ec <SDMMC_GetCmdError>
 800bfbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfc0:	69fb      	ldr	r3, [r7, #28]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b088      	sub	sp, #32
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bfd2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bfd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bfd8:	2308      	movs	r3, #8
 800bfda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfec:	f107 0308 	add.w	r3, r7, #8
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff fe46 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fb29 	bl	800c650 <SDMMC_GetCmdResp7>
 800bffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c000:	69fb      	ldr	r3, [r7, #28]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3720      	adds	r7, #32
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b088      	sub	sp, #32
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c018:	2337      	movs	r3, #55	@ 0x37
 800c01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c01c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c022:	2300      	movs	r3, #0
 800c024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c02c:	f107 0308 	add.w	r3, r7, #8
 800c030:	4619      	mov	r1, r3
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff fe26 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c03c:	2137      	movs	r1, #55	@ 0x37
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f912 	bl	800c268 <SDMMC_GetCmdResp1>
 800c044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c046:	69fb      	ldr	r3, [r7, #28]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c05e:	2329      	movs	r3, #41	@ 0x29
 800c060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c068:	2300      	movs	r3, #0
 800c06a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c06c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c072:	f107 0308 	add.w	r3, r7, #8
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff fe03 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa2e 	bl	800c4e0 <SDMMC_GetCmdResp3>
 800c084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c086:	69fb      	ldr	r3, [r7, #28]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3720      	adds	r7, #32
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c09e:	2306      	movs	r3, #6
 800c0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff fde3 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0c2:	2106      	movs	r1, #6
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f8cf 	bl	800c268 <SDMMC_GetCmdResp1>
 800c0ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3720      	adds	r7, #32
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b088      	sub	sp, #32
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0e2:	2333      	movs	r3, #51	@ 0x33
 800c0e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0f6:	f107 0308 	add.w	r3, r7, #8
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff fdc1 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c102:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c106:	2133      	movs	r1, #51	@ 0x33
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f8ad 	bl	800c268 <SDMMC_GetCmdResp1>
 800c10e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c110:	69fb      	ldr	r3, [r7, #28]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3720      	adds	r7, #32
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b088      	sub	sp, #32
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c122:	2300      	movs	r3, #0
 800c124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c126:	2302      	movs	r3, #2
 800c128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c12a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c12e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c130:	2300      	movs	r3, #0
 800c132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c138:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff fd9f 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f980 	bl	800c44c <SDMMC_GetCmdResp2>
 800c14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c14e:	69fb      	ldr	r3, [r7, #28]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3720      	adds	r7, #32
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c166:	2309      	movs	r3, #9
 800c168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c16a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c16e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c170:	2300      	movs	r3, #0
 800c172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c178:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c17a:	f107 0308 	add.w	r3, r7, #8
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fd7f 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f960 	bl	800c44c <SDMMC_GetCmdResp2>
 800c18c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c18e:	69fb      	ldr	r3, [r7, #28]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3720      	adds	r7, #32
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ba:	f107 0308 	add.w	r3, r7, #8
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7ff fd5f 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	2103      	movs	r1, #3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9c8 	bl	800c560 <SDMMC_GetCmdResp6>
 800c1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1d2:	69fb      	ldr	r3, [r7, #28]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3720      	adds	r7, #32
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1ea:	230d      	movs	r3, #13
 800c1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1fe:	f107 0308 	add.w	r3, r7, #8
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff fd3d 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c20a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c20e:	210d      	movs	r1, #13
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 f829 	bl	800c268 <SDMMC_GetCmdResp1>
 800c216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c218:	69fb      	ldr	r3, [r7, #28]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3720      	adds	r7, #32
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b088      	sub	sp, #32
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c22e:	230d      	movs	r3, #13
 800c230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c238:	2300      	movs	r3, #0
 800c23a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c23c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c242:	f107 0308 	add.w	r3, r7, #8
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff fd1b 	bl	800bc84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c24e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c252:	210d      	movs	r1, #13
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f807 	bl	800c268 <SDMMC_GetCmdResp1>
 800c25a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c25c:	69fb      	ldr	r3, [r7, #28]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b088      	sub	sp, #32
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	460b      	mov	r3, r1
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c276:	4b70      	ldr	r3, [pc, #448]	@ (800c438 <SDMMC_GetCmdResp1+0x1d0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a70      	ldr	r2, [pc, #448]	@ (800c43c <SDMMC_GetCmdResp1+0x1d4>)
 800c27c:	fba2 2303 	umull	r2, r3, r2, r3
 800c280:	0a5a      	lsrs	r2, r3, #9
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	fb02 f303 	mul.w	r3, r2, r3
 800c288:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	1e5a      	subs	r2, r3, #1
 800c28e:	61fa      	str	r2, [r7, #28]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d102      	bne.n	800c29a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c294:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c298:	e0c9      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c29e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	4b67      	ldr	r3, [pc, #412]	@ (800c440 <SDMMC_GetCmdResp1+0x1d8>)
 800c2a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0ef      	beq.n	800c28a <SDMMC_GetCmdResp1+0x22>
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1ea      	bne.n	800c28a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d004      	beq.n	800c2ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2204      	movs	r2, #4
 800c2c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2c6:	2304      	movs	r3, #4
 800c2c8:	e0b1      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e0a6      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4a58      	ldr	r2, [pc, #352]	@ (800c444 <SDMMC_GetCmdResp1+0x1dc>)
 800c2e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7ff fcf6 	bl	800bcd8 <SDMMC_GetCommandResponse>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d001      	beq.n	800c2fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e099      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f7ff fcf8 	bl	800bcf2 <SDMMC_GetResponse>
 800c302:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c304:	697a      	ldr	r2, [r7, #20]
 800c306:	4b50      	ldr	r3, [pc, #320]	@ (800c448 <SDMMC_GetCmdResp1+0x1e0>)
 800c308:	4013      	ands	r3, r2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c30e:	2300      	movs	r3, #0
 800c310:	e08d      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	da02      	bge.n	800c31e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c318:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c31c:	e087      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c328:	2340      	movs	r3, #64	@ 0x40
 800c32a:	e080      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c336:	2380      	movs	r3, #128	@ 0x80
 800c338:	e079      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c344:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c348:	e071      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c358:	e069      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c368:	e061      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c374:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c378:	e059      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c388:	e051      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c398:	e049      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c3a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3a8:	e041      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c3b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3b8:	e039      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c3c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c3c8:	e031      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c3d8:	e029      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c3e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c3e8:	e021      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c3f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c3f8:	e019      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c404:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c408:	e011      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c414:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c418:	e009      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f003 0308 	and.w	r3, r3, #8
 800c420:	2b00      	cmp	r3, #0
 800c422:	d002      	beq.n	800c42a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c424:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c428:	e001      	b.n	800c42e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c42a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3720      	adds	r7, #32
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	24000000 	.word	0x24000000
 800c43c:	10624dd3 	.word	0x10624dd3
 800c440:	00200045 	.word	0x00200045
 800c444:	002000c5 	.word	0x002000c5
 800c448:	fdffe008 	.word	0xfdffe008

0800c44c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c454:	4b1f      	ldr	r3, [pc, #124]	@ (800c4d4 <SDMMC_GetCmdResp2+0x88>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a1f      	ldr	r2, [pc, #124]	@ (800c4d8 <SDMMC_GetCmdResp2+0x8c>)
 800c45a:	fba2 2303 	umull	r2, r3, r2, r3
 800c45e:	0a5b      	lsrs	r3, r3, #9
 800c460:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c464:	fb02 f303 	mul.w	r3, r2, r3
 800c468:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1e5a      	subs	r2, r3, #1
 800c46e:	60fa      	str	r2, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d102      	bne.n	800c47a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c474:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c478:	e026      	b.n	800c4c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c47e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c486:	2b00      	cmp	r3, #0
 800c488:	d0ef      	beq.n	800c46a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1ea      	bne.n	800c46a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d004      	beq.n	800c4aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2204      	movs	r2, #4
 800c4a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	e00e      	b.n	800c4c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e003      	b.n	800c4c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a06      	ldr	r2, [pc, #24]	@ (800c4dc <SDMMC_GetCmdResp2+0x90>)
 800c4c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	24000000 	.word	0x24000000
 800c4d8:	10624dd3 	.word	0x10624dd3
 800c4dc:	002000c5 	.word	0x002000c5

0800c4e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c554 <SDMMC_GetCmdResp3+0x74>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c558 <SDMMC_GetCmdResp3+0x78>)
 800c4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f2:	0a5b      	lsrs	r3, r3, #9
 800c4f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
 800c4fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1e5a      	subs	r2, r3, #1
 800c502:	60fa      	str	r2, [r7, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c508:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c50c:	e01b      	b.n	800c546 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c512:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0ef      	beq.n	800c4fe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1ea      	bne.n	800c4fe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2204      	movs	r2, #4
 800c538:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c53a:	2304      	movs	r3, #4
 800c53c:	e003      	b.n	800c546 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a06      	ldr	r2, [pc, #24]	@ (800c55c <SDMMC_GetCmdResp3+0x7c>)
 800c542:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	24000000 	.word	0x24000000
 800c558:	10624dd3 	.word	0x10624dd3
 800c55c:	002000c5 	.word	0x002000c5

0800c560 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	460b      	mov	r3, r1
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c56e:	4b35      	ldr	r3, [pc, #212]	@ (800c644 <SDMMC_GetCmdResp6+0xe4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a35      	ldr	r2, [pc, #212]	@ (800c648 <SDMMC_GetCmdResp6+0xe8>)
 800c574:	fba2 2303 	umull	r2, r3, r2, r3
 800c578:	0a5b      	lsrs	r3, r3, #9
 800c57a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c57e:	fb02 f303 	mul.w	r3, r2, r3
 800c582:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	1e5a      	subs	r2, r3, #1
 800c588:	61fa      	str	r2, [r7, #28]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d102      	bne.n	800c594 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c58e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c592:	e052      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c598:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0ef      	beq.n	800c584 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1ea      	bne.n	800c584 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5b2:	f003 0304 	and.w	r3, r3, #4
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d004      	beq.n	800c5c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2204      	movs	r2, #4
 800c5be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5c0:	2304      	movs	r3, #4
 800c5c2:	e03a      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e02f      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7ff fb7c 	bl	800bcd8 <SDMMC_GetCommandResponse>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	7afb      	ldrb	r3, [r7, #11]
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d001      	beq.n	800c5ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e025      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4a16      	ldr	r2, [pc, #88]	@ (800c64c <SDMMC_GetCmdResp6+0xec>)
 800c5f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f7ff fb7b 	bl	800bcf2 <SDMMC_GetResponse>
 800c5fc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d106      	bne.n	800c616 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	0c1b      	lsrs	r3, r3, #16
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c612:	2300      	movs	r3, #0
 800c614:	e011      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c624:	e009      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c634:	e001      	b.n	800c63a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3720      	adds	r7, #32
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	24000000 	.word	0x24000000
 800c648:	10624dd3 	.word	0x10624dd3
 800c64c:	002000c5 	.word	0x002000c5

0800c650 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c658:	4b22      	ldr	r3, [pc, #136]	@ (800c6e4 <SDMMC_GetCmdResp7+0x94>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a22      	ldr	r2, [pc, #136]	@ (800c6e8 <SDMMC_GetCmdResp7+0x98>)
 800c65e:	fba2 2303 	umull	r2, r3, r2, r3
 800c662:	0a5b      	lsrs	r3, r3, #9
 800c664:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c668:	fb02 f303 	mul.w	r3, r2, r3
 800c66c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	1e5a      	subs	r2, r3, #1
 800c672:	60fa      	str	r2, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c678:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c67c:	e02c      	b.n	800c6d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c682:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0ef      	beq.n	800c66e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ea      	bne.n	800c66e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c69c:	f003 0304 	and.w	r3, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2204      	movs	r2, #4
 800c6a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6aa:	2304      	movs	r3, #4
 800c6ac:	e014      	b.n	800c6d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d004      	beq.n	800c6c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e009      	b.n	800c6d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2240      	movs	r2, #64	@ 0x40
 800c6d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c6d6:	2300      	movs	r3, #0

}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	24000000 	.word	0x24000000
 800c6e8:	10624dd3 	.word	0x10624dd3

0800c6ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c6f4:	4b11      	ldr	r3, [pc, #68]	@ (800c73c <SDMMC_GetCmdError+0x50>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a11      	ldr	r2, [pc, #68]	@ (800c740 <SDMMC_GetCmdError+0x54>)
 800c6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6fe:	0a5b      	lsrs	r3, r3, #9
 800c700:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c704:	fb02 f303 	mul.w	r3, r2, r3
 800c708:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	1e5a      	subs	r2, r3, #1
 800c70e:	60fa      	str	r2, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c714:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c718:	e009      	b.n	800c72e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c71e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c722:	2b00      	cmp	r3, #0
 800c724:	d0f1      	beq.n	800c70a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a06      	ldr	r2, [pc, #24]	@ (800c744 <SDMMC_GetCmdError+0x58>)
 800c72a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	24000000 	.word	0x24000000
 800c740:	10624dd3 	.word	0x10624dd3
 800c744:	002000c5 	.word	0x002000c5

0800c748 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c74c:	4904      	ldr	r1, [pc, #16]	@ (800c760 <MX_FATFS_Init+0x18>)
 800c74e:	4805      	ldr	r0, [pc, #20]	@ (800c764 <MX_FATFS_Init+0x1c>)
 800c750:	f002 fdca 	bl	800f2e8 <FATFS_LinkDriver>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	4b03      	ldr	r3, [pc, #12]	@ (800c768 <MX_FATFS_Init+0x20>)
 800c75a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c75c:	bf00      	nop
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	24070dd4 	.word	0x24070dd4
 800c764:	0800f730 	.word	0x0800f730
 800c768:	24070dd0 	.word	0x24070dd0

0800c76c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c770:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c772:	4618      	mov	r0, r3
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c786:	f000 f885 	bl	800c894 <BSP_SD_IsDetected>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d001      	beq.n	800c794 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c790:	2302      	movs	r3, #2
 800c792:	e012      	b.n	800c7ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c794:	480b      	ldr	r0, [pc, #44]	@ (800c7c4 <BSP_SD_Init+0x48>)
 800c796:	f7fc f8d1 	bl	800893c <HAL_SD_Init>
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d109      	bne.n	800c7b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c7a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c7a8:	4806      	ldr	r0, [pc, #24]	@ (800c7c4 <BSP_SD_Init+0x48>)
 800c7aa:	f7fc ff87 	bl	80096bc <HAL_SD_ConfigWideBusOperation>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d001      	beq.n	800c7b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	24070c34 	.word	0x24070c34

0800c7c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	68f9      	ldr	r1, [r7, #12]
 800c7de:	4806      	ldr	r0, [pc, #24]	@ (800c7f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c7e0:	f7fc f9cc 	bl	8008b7c <HAL_SD_ReadBlocks_DMA>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d001      	beq.n	800c7ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	24070c34 	.word	0x24070c34

0800c7fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	68f9      	ldr	r1, [r7, #12]
 800c812:	4806      	ldr	r0, [pc, #24]	@ (800c82c <BSP_SD_WriteBlocks_DMA+0x30>)
 800c814:	f7fc fa5a 	bl	8008ccc <HAL_SD_WriteBlocks_DMA>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c822:	7dfb      	ldrb	r3, [r7, #23]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	24070c34 	.word	0x24070c34

0800c830 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c834:	4805      	ldr	r0, [pc, #20]	@ (800c84c <BSP_SD_GetCardState+0x1c>)
 800c836:	f7fd f853 	bl	80098e0 <HAL_SD_GetCardState>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	bf14      	ite	ne
 800c840:	2301      	movne	r3, #1
 800c842:	2300      	moveq	r3, #0
 800c844:	b2db      	uxtb	r3, r3
}
 800c846:	4618      	mov	r0, r3
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	24070c34 	.word	0x24070c34

0800c850 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	4803      	ldr	r0, [pc, #12]	@ (800c868 <BSP_SD_GetCardInfo+0x18>)
 800c85c:	f7fc ff02 	bl	8009664 <HAL_SD_GetCardInfo>
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	24070c34 	.word	0x24070c34

0800c86c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c874:	f000 f9a0 	bl	800cbb8 <BSP_SD_WriteCpltCallback>
}
 800c878:	bf00      	nop
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c888:	f000 f9a2 	bl	800cbd0 <BSP_SD_ReadCpltCallback>
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c89a:	2301      	movs	r3, #1
 800c89c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c89e:	f000 f80b 	bl	800c8b8 <BSP_PlatformIsDetected>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c8ac:	79fb      	ldrb	r3, [r7, #7]
 800c8ae:	b2db      	uxtb	r3, r3
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c8c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c8c6:	4806      	ldr	r0, [pc, #24]	@ (800c8e0 <BSP_PlatformIsDetected+0x28>)
 800c8c8:	f7f6 fcec 	bl	80032a4 <HAL_GPIO_ReadPin>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c8d6:	79fb      	ldrb	r3, [r7, #7]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	58022000 	.word	0x58022000

0800c8e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c8ec:	f7f5 fe02 	bl	80024f4 <HAL_GetTick>
 800c8f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c8f2:	e006      	b.n	800c902 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c8f4:	f7ff ff9c 	bl	800c830 <BSP_SD_GetCardState>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	e009      	b.n	800c916 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c902:	f7f5 fdf7 	bl	80024f4 <HAL_GetTick>
 800c906:	4602      	mov	r2, r0
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d8f0      	bhi.n	800c8f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c912:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c92a:	4b0b      	ldr	r3, [pc, #44]	@ (800c958 <SD_CheckStatus+0x38>)
 800c92c:	2201      	movs	r2, #1
 800c92e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c930:	f7ff ff7e 	bl	800c830 <BSP_SD_GetCardState>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d107      	bne.n	800c94a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c93a:	4b07      	ldr	r3, [pc, #28]	@ (800c958 <SD_CheckStatus+0x38>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	f023 0301 	bic.w	r3, r3, #1
 800c944:	b2da      	uxtb	r2, r3
 800c946:	4b04      	ldr	r3, [pc, #16]	@ (800c958 <SD_CheckStatus+0x38>)
 800c948:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c94a:	4b03      	ldr	r3, [pc, #12]	@ (800c958 <SD_CheckStatus+0x38>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	b2db      	uxtb	r3, r3
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	24000011 	.word	0x24000011

0800c95c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	4603      	mov	r3, r0
 800c964:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c966:	f7ff ff09 	bl	800c77c <BSP_SD_Init>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d107      	bne.n	800c980 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff ffd4 	bl	800c920 <SD_CheckStatus>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	4b04      	ldr	r3, [pc, #16]	@ (800c990 <SD_initialize+0x34>)
 800c97e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c980:	4b03      	ldr	r3, [pc, #12]	@ (800c990 <SD_initialize+0x34>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	b2db      	uxtb	r3, r3
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	24000011 	.word	0x24000011

0800c994 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7ff ffbd 	bl	800c920 <SD_CheckStatus>
 800c9a6:	4603      	mov	r3, r0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c9c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c9c8:	f7ff ff8c 	bl	800c8e4 <SD_CheckStatusWithTimeout>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	da01      	bge.n	800c9d6 <SD_read+0x26>
  {
    return res;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	e03b      	b.n	800ca4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	68b8      	ldr	r0, [r7, #8]
 800c9dc:	f7ff fef4 	bl	800c7c8 <BSP_SD_ReadBlocks_DMA>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d132      	bne.n	800ca4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c9e6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca58 <SD_read+0xa8>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c9ec:	f7f5 fd82 	bl	80024f4 <HAL_GetTick>
 800c9f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c9f2:	bf00      	nop
 800c9f4:	4b18      	ldr	r3, [pc, #96]	@ (800ca58 <SD_read+0xa8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d108      	bne.n	800ca0e <SD_read+0x5e>
 800c9fc:	f7f5 fd7a 	bl	80024f4 <HAL_GetTick>
 800ca00:	4602      	mov	r2, r0
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d9f2      	bls.n	800c9f4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ca0e:	4b12      	ldr	r3, [pc, #72]	@ (800ca58 <SD_read+0xa8>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d102      	bne.n	800ca1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	75fb      	strb	r3, [r7, #23]
 800ca1a:	e017      	b.n	800ca4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ca1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca58 <SD_read+0xa8>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ca22:	f7f5 fd67 	bl	80024f4 <HAL_GetTick>
 800ca26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ca28:	e007      	b.n	800ca3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ca2a:	f7ff ff01 	bl	800c830 <BSP_SD_GetCardState>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <SD_read+0x8a>
          {
            res = RES_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ca38:	e008      	b.n	800ca4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ca3a:	f7f5 fd5b 	bl	80024f4 <HAL_GetTick>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d9ee      	bls.n	800ca2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	24070ddc 	.word	0x24070ddc

0800ca5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ca70:	4b24      	ldr	r3, [pc, #144]	@ (800cb04 <SD_write+0xa8>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca76:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ca7a:	f7ff ff33 	bl	800c8e4 <SD_CheckStatusWithTimeout>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da01      	bge.n	800ca88 <SD_write+0x2c>
  {
    return res;
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	e038      	b.n	800cafa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	68b8      	ldr	r0, [r7, #8]
 800ca8e:	f7ff feb5 	bl	800c7fc <BSP_SD_WriteBlocks_DMA>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d12f      	bne.n	800caf8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ca98:	f7f5 fd2c 	bl	80024f4 <HAL_GetTick>
 800ca9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ca9e:	bf00      	nop
 800caa0:	4b18      	ldr	r3, [pc, #96]	@ (800cb04 <SD_write+0xa8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d108      	bne.n	800caba <SD_write+0x5e>
 800caa8:	f7f5 fd24 	bl	80024f4 <HAL_GetTick>
 800caac:	4602      	mov	r2, r0
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d9f2      	bls.n	800caa0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800caba:	4b12      	ldr	r3, [pc, #72]	@ (800cb04 <SD_write+0xa8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d102      	bne.n	800cac8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	75fb      	strb	r3, [r7, #23]
 800cac6:	e017      	b.n	800caf8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800cac8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb04 <SD_write+0xa8>)
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cace:	f7f5 fd11 	bl	80024f4 <HAL_GetTick>
 800cad2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cad4:	e007      	b.n	800cae6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cad6:	f7ff feab 	bl	800c830 <BSP_SD_GetCardState>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d102      	bne.n	800cae6 <SD_write+0x8a>
          {
            res = RES_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	75fb      	strb	r3, [r7, #23]
            break;
 800cae4:	e008      	b.n	800caf8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cae6:	f7f5 fd05 	bl	80024f4 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d9ee      	bls.n	800cad6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	24070dd8 	.word	0x24070dd8

0800cb08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08c      	sub	sp, #48	@ 0x30
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	603a      	str	r2, [r7, #0]
 800cb12:	71fb      	strb	r3, [r7, #7]
 800cb14:	460b      	mov	r3, r1
 800cb16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb1e:	4b25      	ldr	r3, [pc, #148]	@ (800cbb4 <SD_ioctl+0xac>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <SD_ioctl+0x28>
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e03c      	b.n	800cbaa <SD_ioctl+0xa2>

  switch (cmd)
 800cb30:	79bb      	ldrb	r3, [r7, #6]
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d834      	bhi.n	800cba0 <SD_ioctl+0x98>
 800cb36:	a201      	add	r2, pc, #4	@ (adr r2, 800cb3c <SD_ioctl+0x34>)
 800cb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3c:	0800cb4d 	.word	0x0800cb4d
 800cb40:	0800cb55 	.word	0x0800cb55
 800cb44:	0800cb6d 	.word	0x0800cb6d
 800cb48:	0800cb87 	.word	0x0800cb87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cb52:	e028      	b.n	800cba6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb54:	f107 0308 	add.w	r3, r7, #8
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff fe79 	bl	800c850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb5e:	6a3a      	ldr	r2, [r7, #32]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cb6a:	e01c      	b.n	800cba6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb6c:	f107 0308 	add.w	r3, r7, #8
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff fe6d 	bl	800c850 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cb84:	e00f      	b.n	800cba6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb86:	f107 0308 	add.w	r3, r7, #8
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fe60 	bl	800c850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	0a5a      	lsrs	r2, r3, #9
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cb9e:	e002      	b.n	800cba6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cba0:	2304      	movs	r3, #4
 800cba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3730      	adds	r7, #48	@ 0x30
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	24000011 	.word	0x24000011

0800cbb8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cbbc:	4b03      	ldr	r3, [pc, #12]	@ (800cbcc <BSP_SD_WriteCpltCallback+0x14>)
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]
}
 800cbc2:	bf00      	nop
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	24070dd8 	.word	0x24070dd8

0800cbd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cbd4:	4b03      	ldr	r3, [pc, #12]	@ (800cbe4 <BSP_SD_ReadCpltCallback+0x14>)
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	601a      	str	r2, [r3, #0]
}
 800cbda:	bf00      	nop
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	24070ddc 	.word	0x24070ddc

0800cbe8 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cbec:	bf00      	nop
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	4a08      	ldr	r2, [pc, #32]	@ (800cc28 <disk_status+0x30>)
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	4413      	add	r3, r2
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	79fa      	ldrb	r2, [r7, #7]
 800cc10:	4905      	ldr	r1, [pc, #20]	@ (800cc28 <disk_status+0x30>)
 800cc12:	440a      	add	r2, r1
 800cc14:	7a12      	ldrb	r2, [r2, #8]
 800cc16:	4610      	mov	r0, r2
 800cc18:	4798      	blx	r3
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	24070e08 	.word	0x24070e08

0800cc2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	4a0e      	ldr	r2, [pc, #56]	@ (800cc78 <disk_initialize+0x4c>)
 800cc3e:	5cd3      	ldrb	r3, [r2, r3]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d114      	bne.n	800cc6e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	4a0c      	ldr	r2, [pc, #48]	@ (800cc78 <disk_initialize+0x4c>)
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	79fa      	ldrb	r2, [r7, #7]
 800cc52:	4909      	ldr	r1, [pc, #36]	@ (800cc78 <disk_initialize+0x4c>)
 800cc54:	440a      	add	r2, r1
 800cc56:	7a12      	ldrb	r2, [r2, #8]
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d103      	bne.n	800cc6e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	4a03      	ldr	r2, [pc, #12]	@ (800cc78 <disk_initialize+0x4c>)
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	24070e08 	.word	0x24070e08

0800cc7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc7c:	b590      	push	{r4, r7, lr}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60b9      	str	r1, [r7, #8]
 800cc84:	607a      	str	r2, [r7, #4]
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc8c:	7bfb      	ldrb	r3, [r7, #15]
 800cc8e:	4a0a      	ldr	r2, [pc, #40]	@ (800ccb8 <disk_read+0x3c>)
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	689c      	ldr	r4, [r3, #8]
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	4a07      	ldr	r2, [pc, #28]	@ (800ccb8 <disk_read+0x3c>)
 800cc9c:	4413      	add	r3, r2
 800cc9e:	7a18      	ldrb	r0, [r3, #8]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	47a0      	blx	r4
 800cca8:	4603      	mov	r3, r0
 800ccaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	371c      	adds	r7, #28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd90      	pop	{r4, r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	24070e08 	.word	0x24070e08

0800ccbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	603b      	str	r3, [r7, #0]
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	4a0a      	ldr	r2, [pc, #40]	@ (800ccf8 <disk_write+0x3c>)
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	68dc      	ldr	r4, [r3, #12]
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
 800ccda:	4a07      	ldr	r2, [pc, #28]	@ (800ccf8 <disk_write+0x3c>)
 800ccdc:	4413      	add	r3, r2
 800ccde:	7a18      	ldrb	r0, [r3, #8]
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	68b9      	ldr	r1, [r7, #8]
 800cce6:	47a0      	blx	r4
 800cce8:	4603      	mov	r3, r0
 800ccea:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	371c      	adds	r7, #28
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd90      	pop	{r4, r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	24070e08 	.word	0x24070e08

0800ccfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	603a      	str	r2, [r7, #0]
 800cd06:	71fb      	strb	r3, [r7, #7]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cd0c:	79fb      	ldrb	r3, [r7, #7]
 800cd0e:	4a09      	ldr	r2, [pc, #36]	@ (800cd34 <disk_ioctl+0x38>)
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	79fa      	ldrb	r2, [r7, #7]
 800cd1a:	4906      	ldr	r1, [pc, #24]	@ (800cd34 <disk_ioctl+0x38>)
 800cd1c:	440a      	add	r2, r1
 800cd1e:	7a10      	ldrb	r0, [r2, #8]
 800cd20:	79b9      	ldrb	r1, [r7, #6]
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	4798      	blx	r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
  return res;
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	24070e08 	.word	0x24070e08

0800cd38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3301      	adds	r3, #1
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cd48:	89fb      	ldrh	r3, [r7, #14]
 800cd4a:	021b      	lsls	r3, r3, #8
 800cd4c:	b21a      	sxth	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	b21b      	sxth	r3, r3
 800cd54:	4313      	orrs	r3, r2
 800cd56:	b21b      	sxth	r3, r3
 800cd58:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cd5a:	89fb      	ldrh	r3, [r7, #14]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3303      	adds	r3, #3
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	3202      	adds	r2, #2
 800cd80:	7812      	ldrb	r2, [r2, #0]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	021b      	lsls	r3, r3, #8
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	3201      	adds	r2, #1
 800cd8e:	7812      	ldrb	r2, [r2, #0]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	021b      	lsls	r3, r3, #8
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7812      	ldrb	r2, [r2, #0]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
	return rv;
 800cda0:	68fb      	ldr	r3, [r7, #12]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	887a      	ldrh	r2, [r7, #2]
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	701a      	strb	r2, [r3, #0]
 800cdc6:	887b      	ldrh	r3, [r7, #2]
 800cdc8:	0a1b      	lsrs	r3, r3, #8
 800cdca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	607a      	str	r2, [r7, #4]
 800cdd2:	887a      	ldrh	r2, [r7, #2]
 800cdd4:	b2d2      	uxtb	r2, r2
 800cdd6:	701a      	strb	r2, [r3, #0]
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	683a      	ldr	r2, [r7, #0]
 800cdf6:	b2d2      	uxtb	r2, r2
 800cdf8:	701a      	strb	r2, [r3, #0]
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	0a1b      	lsrs	r3, r3, #8
 800cdfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	b2d2      	uxtb	r2, r2
 800ce0a:	701a      	strb	r2, [r3, #0]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	1c5a      	adds	r2, r3, #1
 800ce16:	607a      	str	r2, [r7, #4]
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	701a      	strb	r2, [r3, #0]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	0a1b      	lsrs	r3, r3, #8
 800ce22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	607a      	str	r2, [r7, #4]
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	b2d2      	uxtb	r2, r2
 800ce2e:	701a      	strb	r2, [r3, #0]
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ce3c:	b480      	push	{r7}
 800ce3e:	b087      	sub	sp, #28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00d      	beq.n	800ce72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	1c53      	adds	r3, r2, #1
 800ce5a:	613b      	str	r3, [r7, #16]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	1c59      	adds	r1, r3, #1
 800ce60:	6179      	str	r1, [r7, #20]
 800ce62:	7812      	ldrb	r2, [r2, #0]
 800ce64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	607b      	str	r3, [r7, #4]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1f1      	bne.n	800ce56 <mem_cpy+0x1a>
	}
}
 800ce72:	bf00      	nop
 800ce74:	371c      	adds	r7, #28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce7e:	b480      	push	{r7}
 800ce80:	b087      	sub	sp, #28
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	60f8      	str	r0, [r7, #12]
 800ce86:	60b9      	str	r1, [r7, #8]
 800ce88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	617a      	str	r2, [r7, #20]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	607b      	str	r3, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1f3      	bne.n	800ce8e <mem_set+0x10>
}
 800cea6:	bf00      	nop
 800cea8:	bf00      	nop
 800ceaa:	371c      	adds	r7, #28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ceb4:	b480      	push	{r7}
 800ceb6:	b089      	sub	sp, #36	@ 0x24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	61fa      	str	r2, [r7, #28]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	4619      	mov	r1, r3
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	61ba      	str	r2, [r7, #24]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	1acb      	subs	r3, r1, r3
 800cee0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	607b      	str	r3, [r7, #4]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <mem_cmp+0x40>
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0eb      	beq.n	800cecc <mem_cmp+0x18>

	return r;
 800cef4:	697b      	ldr	r3, [r7, #20]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3724      	adds	r7, #36	@ 0x24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cf0c:	e002      	b.n	800cf14 <chk_chr+0x12>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	3301      	adds	r3, #1
 800cf12:	607b      	str	r3, [r7, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d005      	beq.n	800cf28 <chk_chr+0x26>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d1f2      	bne.n	800cf0e <chk_chr+0xc>
	return *str;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf42:	2300      	movs	r3, #0
 800cf44:	60bb      	str	r3, [r7, #8]
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	60fb      	str	r3, [r7, #12]
 800cf4a:	e029      	b.n	800cfa0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cf4c:	4a27      	ldr	r2, [pc, #156]	@ (800cfec <chk_lock+0xb4>)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	011b      	lsls	r3, r3, #4
 800cf52:	4413      	add	r3, r2
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d01d      	beq.n	800cf96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf5a:	4a24      	ldr	r2, [pc, #144]	@ (800cfec <chk_lock+0xb4>)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	011b      	lsls	r3, r3, #4
 800cf60:	4413      	add	r3, r2
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d116      	bne.n	800cf9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf6c:	4a1f      	ldr	r2, [pc, #124]	@ (800cfec <chk_lock+0xb4>)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	011b      	lsls	r3, r3, #4
 800cf72:	4413      	add	r3, r2
 800cf74:	3304      	adds	r3, #4
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d10c      	bne.n	800cf9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf80:	4a1a      	ldr	r2, [pc, #104]	@ (800cfec <chk_lock+0xb4>)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	011b      	lsls	r3, r3, #4
 800cf86:	4413      	add	r3, r2
 800cf88:	3308      	adds	r3, #8
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d102      	bne.n	800cf9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf94:	e007      	b.n	800cfa6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf96:	2301      	movs	r3, #1
 800cf98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d9d2      	bls.n	800cf4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d109      	bne.n	800cfc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <chk_lock+0x80>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d101      	bne.n	800cfbc <chk_lock+0x84>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e010      	b.n	800cfde <chk_lock+0xa6>
 800cfbc:	2312      	movs	r3, #18
 800cfbe:	e00e      	b.n	800cfde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d108      	bne.n	800cfd8 <chk_lock+0xa0>
 800cfc6:	4a09      	ldr	r2, [pc, #36]	@ (800cfec <chk_lock+0xb4>)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	011b      	lsls	r3, r3, #4
 800cfcc:	4413      	add	r3, r2
 800cfce:	330c      	adds	r3, #12
 800cfd0:	881b      	ldrh	r3, [r3, #0]
 800cfd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfd6:	d101      	bne.n	800cfdc <chk_lock+0xa4>
 800cfd8:	2310      	movs	r3, #16
 800cfda:	e000      	b.n	800cfde <chk_lock+0xa6>
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	24070de8 	.word	0x24070de8

0800cff0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cff6:	2300      	movs	r3, #0
 800cff8:	607b      	str	r3, [r7, #4]
 800cffa:	e002      	b.n	800d002 <enq_lock+0x12>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3301      	adds	r3, #1
 800d000:	607b      	str	r3, [r7, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d806      	bhi.n	800d016 <enq_lock+0x26>
 800d008:	4a09      	ldr	r2, [pc, #36]	@ (800d030 <enq_lock+0x40>)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	4413      	add	r3, r2
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1f2      	bne.n	800cffc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	bf14      	ite	ne
 800d01c:	2301      	movne	r3, #1
 800d01e:	2300      	moveq	r3, #0
 800d020:	b2db      	uxtb	r3, r3
}
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	24070de8 	.word	0x24070de8

0800d034 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d03e:	2300      	movs	r3, #0
 800d040:	60fb      	str	r3, [r7, #12]
 800d042:	e01f      	b.n	800d084 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d044:	4a41      	ldr	r2, [pc, #260]	@ (800d14c <inc_lock+0x118>)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	4413      	add	r3, r2
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	d113      	bne.n	800d07e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d056:	4a3d      	ldr	r2, [pc, #244]	@ (800d14c <inc_lock+0x118>)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	011b      	lsls	r3, r3, #4
 800d05c:	4413      	add	r3, r2
 800d05e:	3304      	adds	r3, #4
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d066:	429a      	cmp	r2, r3
 800d068:	d109      	bne.n	800d07e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d06a:	4a38      	ldr	r2, [pc, #224]	@ (800d14c <inc_lock+0x118>)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	011b      	lsls	r3, r3, #4
 800d070:	4413      	add	r3, r2
 800d072:	3308      	adds	r3, #8
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d006      	beq.n	800d08c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	3301      	adds	r3, #1
 800d082:	60fb      	str	r3, [r7, #12]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d9dc      	bls.n	800d044 <inc_lock+0x10>
 800d08a:	e000      	b.n	800d08e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d08c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b02      	cmp	r3, #2
 800d092:	d132      	bne.n	800d0fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d094:	2300      	movs	r3, #0
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	e002      	b.n	800d0a0 <inc_lock+0x6c>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3301      	adds	r3, #1
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d806      	bhi.n	800d0b4 <inc_lock+0x80>
 800d0a6:	4a29      	ldr	r2, [pc, #164]	@ (800d14c <inc_lock+0x118>)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	011b      	lsls	r3, r3, #4
 800d0ac:	4413      	add	r3, r2
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1f2      	bne.n	800d09a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d101      	bne.n	800d0be <inc_lock+0x8a>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e040      	b.n	800d140 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	4922      	ldr	r1, [pc, #136]	@ (800d14c <inc_lock+0x118>)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	011b      	lsls	r3, r3, #4
 800d0c8:	440b      	add	r3, r1
 800d0ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	491e      	ldr	r1, [pc, #120]	@ (800d14c <inc_lock+0x118>)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	011b      	lsls	r3, r3, #4
 800d0d6:	440b      	add	r3, r1
 800d0d8:	3304      	adds	r3, #4
 800d0da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	695a      	ldr	r2, [r3, #20]
 800d0e0:	491a      	ldr	r1, [pc, #104]	@ (800d14c <inc_lock+0x118>)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	011b      	lsls	r3, r3, #4
 800d0e6:	440b      	add	r3, r1
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d0ec:	4a17      	ldr	r2, [pc, #92]	@ (800d14c <inc_lock+0x118>)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	4413      	add	r3, r2
 800d0f4:	330c      	adds	r3, #12
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <inc_lock+0xe0>
 800d100:	4a12      	ldr	r2, [pc, #72]	@ (800d14c <inc_lock+0x118>)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	011b      	lsls	r3, r3, #4
 800d106:	4413      	add	r3, r2
 800d108:	330c      	adds	r3, #12
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d001      	beq.n	800d114 <inc_lock+0xe0>
 800d110:	2300      	movs	r3, #0
 800d112:	e015      	b.n	800d140 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d108      	bne.n	800d12c <inc_lock+0xf8>
 800d11a:	4a0c      	ldr	r2, [pc, #48]	@ (800d14c <inc_lock+0x118>)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	011b      	lsls	r3, r3, #4
 800d120:	4413      	add	r3, r2
 800d122:	330c      	adds	r3, #12
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	3301      	adds	r3, #1
 800d128:	b29a      	uxth	r2, r3
 800d12a:	e001      	b.n	800d130 <inc_lock+0xfc>
 800d12c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d130:	4906      	ldr	r1, [pc, #24]	@ (800d14c <inc_lock+0x118>)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	011b      	lsls	r3, r3, #4
 800d136:	440b      	add	r3, r1
 800d138:	330c      	adds	r3, #12
 800d13a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3301      	adds	r3, #1
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	24070de8 	.word	0x24070de8

0800d150 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	607b      	str	r3, [r7, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b01      	cmp	r3, #1
 800d162:	d825      	bhi.n	800d1b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800d164:	4a17      	ldr	r2, [pc, #92]	@ (800d1c4 <dec_lock+0x74>)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	011b      	lsls	r3, r3, #4
 800d16a:	4413      	add	r3, r2
 800d16c:	330c      	adds	r3, #12
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d172:	89fb      	ldrh	r3, [r7, #14]
 800d174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d178:	d101      	bne.n	800d17e <dec_lock+0x2e>
 800d17a:	2300      	movs	r3, #0
 800d17c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d17e:	89fb      	ldrh	r3, [r7, #14]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <dec_lock+0x3a>
 800d184:	89fb      	ldrh	r3, [r7, #14]
 800d186:	3b01      	subs	r3, #1
 800d188:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d18a:	4a0e      	ldr	r2, [pc, #56]	@ (800d1c4 <dec_lock+0x74>)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	4413      	add	r3, r2
 800d192:	330c      	adds	r3, #12
 800d194:	89fa      	ldrh	r2, [r7, #14]
 800d196:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d198:	89fb      	ldrh	r3, [r7, #14]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d105      	bne.n	800d1aa <dec_lock+0x5a>
 800d19e:	4a09      	ldr	r2, [pc, #36]	@ (800d1c4 <dec_lock+0x74>)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	011b      	lsls	r3, r3, #4
 800d1a4:	4413      	add	r3, r2
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	737b      	strb	r3, [r7, #13]
 800d1ae:	e001      	b.n	800d1b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d1b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	24070de8 	.word	0x24070de8

0800d1c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	e010      	b.n	800d1f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d1d6:	4a0d      	ldr	r2, [pc, #52]	@ (800d20c <clear_lock+0x44>)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	011b      	lsls	r3, r3, #4
 800d1dc:	4413      	add	r3, r2
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d105      	bne.n	800d1f2 <clear_lock+0x2a>
 800d1e6:	4a09      	ldr	r2, [pc, #36]	@ (800d20c <clear_lock+0x44>)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	011b      	lsls	r3, r3, #4
 800d1ec:	4413      	add	r3, r2
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	60fb      	str	r3, [r7, #12]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d9eb      	bls.n	800d1d6 <clear_lock+0xe>
	}
}
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
 800d202:	3714      	adds	r7, #20
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	24070de8 	.word	0x24070de8

0800d210 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	78db      	ldrb	r3, [r3, #3]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d034      	beq.n	800d28e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d228:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	7858      	ldrb	r0, [r3, #1]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d234:	2301      	movs	r3, #1
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	f7ff fd40 	bl	800ccbc <disk_write>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d242:	2301      	movs	r3, #1
 800d244:	73fb      	strb	r3, [r7, #15]
 800d246:	e022      	b.n	800d28e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	1ad2      	subs	r2, r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d217      	bcs.n	800d28e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	789b      	ldrb	r3, [r3, #2]
 800d262:	613b      	str	r3, [r7, #16]
 800d264:	e010      	b.n	800d288 <sync_window+0x78>
					wsect += fs->fsize;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	699b      	ldr	r3, [r3, #24]
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	4413      	add	r3, r2
 800d26e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7858      	ldrb	r0, [r3, #1]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d27a:	2301      	movs	r3, #1
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	f7ff fd1d 	bl	800ccbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	3b01      	subs	r3, #1
 800d286:	613b      	str	r3, [r7, #16]
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d8eb      	bhi.n	800d266 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3718      	adds	r7, #24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d01b      	beq.n	800d2e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7ff ffad 	bl	800d210 <sync_window>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d113      	bne.n	800d2e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	7858      	ldrb	r0, [r3, #1]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	f7ff fcd5 	bl	800cc7c <disk_read>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d004      	beq.n	800d2e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7ff ff87 	bl	800d210 <sync_window>
 800d302:	4603      	mov	r3, r0
 800d304:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d158      	bne.n	800d3be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b03      	cmp	r3, #3
 800d312:	d148      	bne.n	800d3a6 <sync_fs+0xb2>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	791b      	ldrb	r3, [r3, #4]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d144      	bne.n	800d3a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3330      	adds	r3, #48	@ 0x30
 800d320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fda9 	bl	800ce7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	3330      	adds	r3, #48	@ 0x30
 800d330:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d334:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fd38 	bl	800cdae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	3330      	adds	r3, #48	@ 0x30
 800d342:	4921      	ldr	r1, [pc, #132]	@ (800d3c8 <sync_fs+0xd4>)
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fd4d 	bl	800cde4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3330      	adds	r3, #48	@ 0x30
 800d34e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d352:	491e      	ldr	r1, [pc, #120]	@ (800d3cc <sync_fs+0xd8>)
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff fd45 	bl	800cde4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	3330      	adds	r3, #48	@ 0x30
 800d35e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	4619      	mov	r1, r3
 800d368:	4610      	mov	r0, r2
 800d36a:	f7ff fd3b 	bl	800cde4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	3330      	adds	r3, #48	@ 0x30
 800d372:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	f7ff fd31 	bl	800cde4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7858      	ldrb	r0, [r3, #1]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d39a:	2301      	movs	r3, #1
 800d39c:	f7ff fc8e 	bl	800ccbc <disk_write>
			fs->fsi_flag = 0;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	785b      	ldrb	r3, [r3, #1]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7ff fca4 	bl	800ccfc <disk_ioctl>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <sync_fs+0xca>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	41615252 	.word	0x41615252
 800d3cc:	61417272 	.word	0x61417272

0800d3d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	3b02      	subs	r3, #2
 800d3de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	3b02      	subs	r3, #2
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d301      	bcc.n	800d3f0 <clust2sect+0x20>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	e008      	b.n	800d402 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	895b      	ldrh	r3, [r3, #10]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	fb03 f202 	mul.w	r2, r3, r2
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	4413      	add	r3, r2
}
 800d402:	4618      	mov	r0, r3
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b086      	sub	sp, #24
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d904      	bls.n	800d42e <get_fat+0x20>
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	683a      	ldr	r2, [r7, #0]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d302      	bcc.n	800d434 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d42e:	2301      	movs	r3, #1
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e08e      	b.n	800d552 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d434:	f04f 33ff 	mov.w	r3, #4294967295
 800d438:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b03      	cmp	r3, #3
 800d440:	d061      	beq.n	800d506 <get_fat+0xf8>
 800d442:	2b03      	cmp	r3, #3
 800d444:	dc7b      	bgt.n	800d53e <get_fat+0x130>
 800d446:	2b01      	cmp	r3, #1
 800d448:	d002      	beq.n	800d450 <get_fat+0x42>
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d041      	beq.n	800d4d2 <get_fat+0xc4>
 800d44e:	e076      	b.n	800d53e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	085b      	lsrs	r3, r3, #1
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	4413      	add	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6a1a      	ldr	r2, [r3, #32]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	0a5b      	lsrs	r3, r3, #9
 800d466:	4413      	add	r3, r2
 800d468:	4619      	mov	r1, r3
 800d46a:	6938      	ldr	r0, [r7, #16]
 800d46c:	f7ff ff14 	bl	800d298 <move_window>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d166      	bne.n	800d544 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	60fa      	str	r2, [r7, #12]
 800d47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	4413      	add	r3, r2
 800d484:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d488:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	6a1a      	ldr	r2, [r3, #32]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	0a5b      	lsrs	r3, r3, #9
 800d492:	4413      	add	r3, r2
 800d494:	4619      	mov	r1, r3
 800d496:	6938      	ldr	r0, [r7, #16]
 800d498:	f7ff fefe 	bl	800d298 <move_window>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d152      	bne.n	800d548 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <get_fat+0xba>
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	091b      	lsrs	r3, r3, #4
 800d4c6:	e002      	b.n	800d4ce <get_fat+0xc0>
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4ce:	617b      	str	r3, [r7, #20]
			break;
 800d4d0:	e03f      	b.n	800d552 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	6a1a      	ldr	r2, [r3, #32]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	0a1b      	lsrs	r3, r3, #8
 800d4da:	4413      	add	r3, r2
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6938      	ldr	r0, [r7, #16]
 800d4e0:	f7ff feda 	bl	800d298 <move_window>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d130      	bne.n	800d54c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d4f8:	4413      	add	r3, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff fc1c 	bl	800cd38 <ld_word>
 800d500:	4603      	mov	r3, r0
 800d502:	617b      	str	r3, [r7, #20]
			break;
 800d504:	e025      	b.n	800d552 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	6a1a      	ldr	r2, [r3, #32]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	09db      	lsrs	r3, r3, #7
 800d50e:	4413      	add	r3, r2
 800d510:	4619      	mov	r1, r3
 800d512:	6938      	ldr	r0, [r7, #16]
 800d514:	f7ff fec0 	bl	800d298 <move_window>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d118      	bne.n	800d550 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d52c:	4413      	add	r3, r2
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff fc1a 	bl	800cd68 <ld_dword>
 800d534:	4603      	mov	r3, r0
 800d536:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d53a:	617b      	str	r3, [r7, #20]
			break;
 800d53c:	e009      	b.n	800d552 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d53e:	2301      	movs	r3, #1
 800d540:	617b      	str	r3, [r7, #20]
 800d542:	e006      	b.n	800d552 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d544:	bf00      	nop
 800d546:	e004      	b.n	800d552 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d548:	bf00      	nop
 800d54a:	e002      	b.n	800d552 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d54c:	bf00      	nop
 800d54e:	e000      	b.n	800d552 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d550:	bf00      	nop
		}
	}

	return val;
 800d552:	697b      	ldr	r3, [r7, #20]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d55c:	b590      	push	{r4, r7, lr}
 800d55e:	b089      	sub	sp, #36	@ 0x24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d568:	2302      	movs	r3, #2
 800d56a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	f240 80d9 	bls.w	800d726 <put_fat+0x1ca>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	695b      	ldr	r3, [r3, #20]
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f080 80d3 	bcs.w	800d726 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b03      	cmp	r3, #3
 800d586:	f000 8096 	beq.w	800d6b6 <put_fat+0x15a>
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	f300 80cb 	bgt.w	800d726 <put_fat+0x1ca>
 800d590:	2b01      	cmp	r3, #1
 800d592:	d002      	beq.n	800d59a <put_fat+0x3e>
 800d594:	2b02      	cmp	r3, #2
 800d596:	d06e      	beq.n	800d676 <put_fat+0x11a>
 800d598:	e0c5      	b.n	800d726 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	61bb      	str	r3, [r7, #24]
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6a1a      	ldr	r2, [r3, #32]
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	0a5b      	lsrs	r3, r3, #9
 800d5b0:	4413      	add	r3, r2
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7ff fe6f 	bl	800d298 <move_window>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5be:	7ffb      	ldrb	r3, [r7, #31]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f040 80a9 	bne.w	800d718 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	1c59      	adds	r1, r3, #1
 800d5d0:	61b9      	str	r1, [r7, #24]
 800d5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d6:	4413      	add	r3, r2
 800d5d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	f003 0301 	and.w	r3, r3, #1
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00d      	beq.n	800d600 <put_fat+0xa4>
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	b25b      	sxtb	r3, r3
 800d5ea:	f003 030f 	and.w	r3, r3, #15
 800d5ee:	b25a      	sxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	011b      	lsls	r3, r3, #4
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	b25b      	sxtb	r3, r3
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	e001      	b.n	800d604 <put_fat+0xa8>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	697a      	ldr	r2, [r7, #20]
 800d606:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2201      	movs	r2, #1
 800d60c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	6a1a      	ldr	r2, [r3, #32]
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	0a5b      	lsrs	r3, r3, #9
 800d616:	4413      	add	r3, r2
 800d618:	4619      	mov	r1, r3
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f7ff fe3c 	bl	800d298 <move_window>
 800d620:	4603      	mov	r3, r0
 800d622:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d624:	7ffb      	ldrb	r3, [r7, #31]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d178      	bne.n	800d71c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d636:	4413      	add	r3, r2
 800d638:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b00      	cmp	r3, #0
 800d642:	d003      	beq.n	800d64c <put_fat+0xf0>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	091b      	lsrs	r3, r3, #4
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	e00e      	b.n	800d66a <put_fat+0x10e>
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	b25b      	sxtb	r3, r3
 800d652:	f023 030f 	bic.w	r3, r3, #15
 800d656:	b25a      	sxtb	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	0a1b      	lsrs	r3, r3, #8
 800d65c:	b25b      	sxtb	r3, r3
 800d65e:	f003 030f 	and.w	r3, r3, #15
 800d662:	b25b      	sxtb	r3, r3
 800d664:	4313      	orrs	r3, r2
 800d666:	b25b      	sxtb	r3, r3
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2201      	movs	r2, #1
 800d672:	70da      	strb	r2, [r3, #3]
			break;
 800d674:	e057      	b.n	800d726 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a1a      	ldr	r2, [r3, #32]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	0a1b      	lsrs	r3, r3, #8
 800d67e:	4413      	add	r3, r2
 800d680:	4619      	mov	r1, r3
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f7ff fe08 	bl	800d298 <move_window>
 800d688:	4603      	mov	r3, r0
 800d68a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d68c:	7ffb      	ldrb	r3, [r7, #31]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d146      	bne.n	800d720 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d6a0:	4413      	add	r3, r2
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	b292      	uxth	r2, r2
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fb80 	bl	800cdae <st_word>
			fs->wflag = 1;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	70da      	strb	r2, [r3, #3]
			break;
 800d6b4:	e037      	b.n	800d726 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6a1a      	ldr	r2, [r3, #32]
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	09db      	lsrs	r3, r3, #7
 800d6be:	4413      	add	r3, r2
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f7ff fde8 	bl	800d298 <move_window>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6cc:	7ffb      	ldrb	r3, [r7, #31]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d128      	bne.n	800d724 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d6e6:	4413      	add	r3, r2
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7ff fb3d 	bl	800cd68 <ld_dword>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d6f4:	4323      	orrs	r3, r4
 800d6f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d706:	4413      	add	r3, r2
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fb6a 	bl	800cde4 <st_dword>
			fs->wflag = 1;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2201      	movs	r2, #1
 800d714:	70da      	strb	r2, [r3, #3]
			break;
 800d716:	e006      	b.n	800d726 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d718:	bf00      	nop
 800d71a:	e004      	b.n	800d726 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d71c:	bf00      	nop
 800d71e:	e002      	b.n	800d726 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d720:	bf00      	nop
 800d722:	e000      	b.n	800d726 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d724:	bf00      	nop
		}
	}
	return res;
 800d726:	7ffb      	ldrb	r3, [r7, #31]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3724      	adds	r7, #36	@ 0x24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd90      	pop	{r4, r7, pc}

0800d730 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b088      	sub	sp, #32
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d904      	bls.n	800d756 <remove_chain+0x26>
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	429a      	cmp	r2, r3
 800d754:	d301      	bcc.n	800d75a <remove_chain+0x2a>
 800d756:	2302      	movs	r3, #2
 800d758:	e04b      	b.n	800d7f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00c      	beq.n	800d77a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d760:	f04f 32ff 	mov.w	r2, #4294967295
 800d764:	6879      	ldr	r1, [r7, #4]
 800d766:	69b8      	ldr	r0, [r7, #24]
 800d768:	f7ff fef8 	bl	800d55c <put_fat>
 800d76c:	4603      	mov	r3, r0
 800d76e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d770:	7ffb      	ldrb	r3, [r7, #31]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <remove_chain+0x4a>
 800d776:	7ffb      	ldrb	r3, [r7, #31]
 800d778:	e03b      	b.n	800d7f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f7ff fe46 	bl	800d40e <get_fat>
 800d782:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d031      	beq.n	800d7ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d101      	bne.n	800d794 <remove_chain+0x64>
 800d790:	2302      	movs	r3, #2
 800d792:	e02e      	b.n	800d7f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79a:	d101      	bne.n	800d7a0 <remove_chain+0x70>
 800d79c:	2301      	movs	r3, #1
 800d79e:	e028      	b.n	800d7f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	68b9      	ldr	r1, [r7, #8]
 800d7a4:	69b8      	ldr	r0, [r7, #24]
 800d7a6:	f7ff fed9 	bl	800d55c <put_fat>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d7ae:	7ffb      	ldrb	r3, [r7, #31]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d001      	beq.n	800d7b8 <remove_chain+0x88>
 800d7b4:	7ffb      	ldrb	r3, [r7, #31]
 800d7b6:	e01c      	b.n	800d7f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	3b02      	subs	r3, #2
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d20b      	bcs.n	800d7de <remove_chain+0xae>
			fs->free_clst++;
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	791b      	ldrb	r3, [r3, #4]
 800d7d4:	f043 0301 	orr.w	r3, r3, #1
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d3c6      	bcc.n	800d77a <remove_chain+0x4a>
 800d7ec:	e000      	b.n	800d7f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d7ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b088      	sub	sp, #32
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10d      	bne.n	800d82c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d004      	beq.n	800d826 <create_chain+0x2c>
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	69ba      	ldr	r2, [r7, #24]
 800d822:	429a      	cmp	r2, r3
 800d824:	d31b      	bcc.n	800d85e <create_chain+0x64>
 800d826:	2301      	movs	r3, #1
 800d828:	61bb      	str	r3, [r7, #24]
 800d82a:	e018      	b.n	800d85e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff fded 	bl	800d40e <get_fat>
 800d834:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d801      	bhi.n	800d840 <create_chain+0x46>
 800d83c:	2301      	movs	r3, #1
 800d83e:	e070      	b.n	800d922 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d101      	bne.n	800d84c <create_chain+0x52>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	e06a      	b.n	800d922 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	429a      	cmp	r2, r3
 800d854:	d201      	bcs.n	800d85a <create_chain+0x60>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	e063      	b.n	800d922 <create_chain+0x128>
		scl = clst;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	3301      	adds	r3, #1
 800d866:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d307      	bcc.n	800d882 <create_chain+0x88>
				ncl = 2;
 800d872:	2302      	movs	r3, #2
 800d874:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d876:	69fa      	ldr	r2, [r7, #28]
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d901      	bls.n	800d882 <create_chain+0x88>
 800d87e:	2300      	movs	r3, #0
 800d880:	e04f      	b.n	800d922 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d882:	69f9      	ldr	r1, [r7, #28]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff fdc2 	bl	800d40e <get_fat>
 800d88a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00e      	beq.n	800d8b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d003      	beq.n	800d8a0 <create_chain+0xa6>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89e:	d101      	bne.n	800d8a4 <create_chain+0xaa>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	e03e      	b.n	800d922 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d8a4:	69fa      	ldr	r2, [r7, #28]
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d1da      	bne.n	800d862 <create_chain+0x68>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e038      	b.n	800d922 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d8b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b6:	69f9      	ldr	r1, [r7, #28]
 800d8b8:	6938      	ldr	r0, [r7, #16]
 800d8ba:	f7ff fe4f 	bl	800d55c <put_fat>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d8c2:	7dfb      	ldrb	r3, [r7, #23]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d109      	bne.n	800d8dc <create_chain+0xe2>
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d006      	beq.n	800d8dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d8ce:	69fa      	ldr	r2, [r7, #28]
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	6938      	ldr	r0, [r7, #16]
 800d8d4:	f7ff fe42 	bl	800d55c <put_fat>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d8dc:	7dfb      	ldrb	r3, [r7, #23]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d116      	bne.n	800d910 <create_chain+0x116>
		fs->last_clst = ncl;
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	691a      	ldr	r2, [r3, #16]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	3b02      	subs	r3, #2
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d804      	bhi.n	800d900 <create_chain+0x106>
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	1e5a      	subs	r2, r3, #1
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	791b      	ldrb	r3, [r3, #4]
 800d904:	f043 0301 	orr.w	r3, r3, #1
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	711a      	strb	r2, [r3, #4]
 800d90e:	e007      	b.n	800d920 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d102      	bne.n	800d91c <create_chain+0x122>
 800d916:	f04f 33ff 	mov.w	r3, #4294967295
 800d91a:	e000      	b.n	800d91e <create_chain+0x124>
 800d91c:	2301      	movs	r3, #1
 800d91e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d920:	69fb      	ldr	r3, [r7, #28]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3720      	adds	r7, #32
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b087      	sub	sp, #28
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93e:	3304      	adds	r3, #4
 800d940:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	0a5b      	lsrs	r3, r3, #9
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	8952      	ldrh	r2, [r2, #10]
 800d94a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d94e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	1d1a      	adds	r2, r3, #4
 800d954:	613a      	str	r2, [r7, #16]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d101      	bne.n	800d964 <clmt_clust+0x3a>
 800d960:	2300      	movs	r3, #0
 800d962:	e010      	b.n	800d986 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d307      	bcc.n	800d97c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	3304      	adds	r3, #4
 800d978:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d97a:	e7e9      	b.n	800d950 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d97c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	4413      	add	r3, r2
}
 800d986:	4618      	mov	r0, r3
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9a8:	d204      	bcs.n	800d9b4 <dir_sdi+0x22>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	f003 031f 	and.w	r3, r3, #31
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	e063      	b.n	800da80 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <dir_sdi+0x46>
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d902      	bls.n	800d9d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10c      	bne.n	800d9f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	095b      	lsrs	r3, r3, #5
 800d9e2:	693a      	ldr	r2, [r7, #16]
 800d9e4:	8912      	ldrh	r2, [r2, #8]
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d301      	bcc.n	800d9ee <dir_sdi+0x5c>
 800d9ea:	2302      	movs	r3, #2
 800d9ec:	e048      	b.n	800da80 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	61da      	str	r2, [r3, #28]
 800d9f6:	e029      	b.n	800da4c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	895b      	ldrh	r3, [r3, #10]
 800d9fc:	025b      	lsls	r3, r3, #9
 800d9fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da00:	e019      	b.n	800da36 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6979      	ldr	r1, [r7, #20]
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff fd01 	bl	800d40e <get_fat>
 800da0c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d101      	bne.n	800da1a <dir_sdi+0x88>
 800da16:	2301      	movs	r3, #1
 800da18:	e032      	b.n	800da80 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d904      	bls.n	800da2a <dir_sdi+0x98>
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	429a      	cmp	r2, r3
 800da28:	d301      	bcc.n	800da2e <dir_sdi+0x9c>
 800da2a:	2302      	movs	r3, #2
 800da2c:	e028      	b.n	800da80 <dir_sdi+0xee>
			ofs -= csz;
 800da2e:	683a      	ldr	r2, [r7, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da36:	683a      	ldr	r2, [r7, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d2e1      	bcs.n	800da02 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800da3e:	6979      	ldr	r1, [r7, #20]
 800da40:	6938      	ldr	r0, [r7, #16]
 800da42:	f7ff fcc5 	bl	800d3d0 <clust2sect>
 800da46:	4602      	mov	r2, r0
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <dir_sdi+0xcc>
 800da5a:	2302      	movs	r3, #2
 800da5c:	e010      	b.n	800da80 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	69da      	ldr	r2, [r3, #28]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	0a5b      	lsrs	r3, r3, #9
 800da66:	441a      	add	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da78:	441a      	add	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	3320      	adds	r3, #32
 800da9e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	69db      	ldr	r3, [r3, #28]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <dir_next+0x28>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800daae:	d301      	bcc.n	800dab4 <dir_next+0x2c>
 800dab0:	2304      	movs	r3, #4
 800dab2:	e0aa      	b.n	800dc0a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f040 8098 	bne.w	800dbf0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	69db      	ldr	r3, [r3, #28]
 800dac4:	1c5a      	adds	r2, r3, #1
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10b      	bne.n	800daea <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	095b      	lsrs	r3, r3, #5
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	8912      	ldrh	r2, [r2, #8]
 800dada:	4293      	cmp	r3, r2
 800dadc:	f0c0 8088 	bcc.w	800dbf0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	61da      	str	r2, [r3, #28]
 800dae6:	2304      	movs	r3, #4
 800dae8:	e08f      	b.n	800dc0a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	0a5b      	lsrs	r3, r3, #9
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	8952      	ldrh	r2, [r2, #10]
 800daf2:	3a01      	subs	r2, #1
 800daf4:	4013      	ands	r3, r2
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d17a      	bne.n	800dbf0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	4619      	mov	r1, r3
 800db02:	4610      	mov	r0, r2
 800db04:	f7ff fc83 	bl	800d40e <get_fat>
 800db08:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d801      	bhi.n	800db14 <dir_next+0x8c>
 800db10:	2302      	movs	r3, #2
 800db12:	e07a      	b.n	800dc0a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1a:	d101      	bne.n	800db20 <dir_next+0x98>
 800db1c:	2301      	movs	r3, #1
 800db1e:	e074      	b.n	800dc0a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	429a      	cmp	r2, r3
 800db28:	d358      	bcc.n	800dbdc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d104      	bne.n	800db3a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	61da      	str	r2, [r3, #28]
 800db36:	2304      	movs	r3, #4
 800db38:	e067      	b.n	800dc0a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	4619      	mov	r1, r3
 800db42:	4610      	mov	r0, r2
 800db44:	f7ff fe59 	bl	800d7fa <create_chain>
 800db48:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d101      	bne.n	800db54 <dir_next+0xcc>
 800db50:	2307      	movs	r3, #7
 800db52:	e05a      	b.n	800dc0a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d101      	bne.n	800db5e <dir_next+0xd6>
 800db5a:	2302      	movs	r3, #2
 800db5c:	e055      	b.n	800dc0a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db64:	d101      	bne.n	800db6a <dir_next+0xe2>
 800db66:	2301      	movs	r3, #1
 800db68:	e04f      	b.n	800dc0a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f7ff fb50 	bl	800d210 <sync_window>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <dir_next+0xf2>
 800db76:	2301      	movs	r3, #1
 800db78:	e047      	b.n	800dc0a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	3330      	adds	r3, #48	@ 0x30
 800db7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db82:	2100      	movs	r1, #0
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff f97a 	bl	800ce7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db8a:	2300      	movs	r3, #0
 800db8c:	613b      	str	r3, [r7, #16]
 800db8e:	6979      	ldr	r1, [r7, #20]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7ff fc1d 	bl	800d3d0 <clust2sect>
 800db96:	4602      	mov	r2, r0
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db9c:	e012      	b.n	800dbc4 <dir_next+0x13c>
						fs->wflag = 1;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2201      	movs	r2, #1
 800dba2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f7ff fb33 	bl	800d210 <sync_window>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <dir_next+0x12c>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e02a      	b.n	800dc0a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	613b      	str	r3, [r7, #16]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbbe:	1c5a      	adds	r2, r3, #1
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	895b      	ldrh	r3, [r3, #10]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d3e6      	bcc.n	800db9e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	1ad2      	subs	r2, r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dbe2:	6979      	ldr	r1, [r7, #20]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff fbf3 	bl	800d3d0 <clust2sect>
 800dbea:	4602      	mov	r2, r0
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc02:	441a      	add	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b086      	sub	sp, #24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dc22:	2100      	movs	r1, #0
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff feb4 	bl	800d992 <dir_sdi>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d12b      	bne.n	800dc8c <dir_alloc+0x7a>
		n = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff fb2a 	bl	800d298 <move_window>
 800dc44:	4603      	mov	r3, r0
 800dc46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc48:	7dfb      	ldrb	r3, [r7, #23]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d11d      	bne.n	800dc8a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a1b      	ldr	r3, [r3, #32]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2be5      	cmp	r3, #229	@ 0xe5
 800dc56:	d004      	beq.n	800dc62 <dir_alloc+0x50>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6a1b      	ldr	r3, [r3, #32]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d107      	bne.n	800dc72 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	3301      	adds	r3, #1
 800dc66:	613b      	str	r3, [r7, #16]
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d102      	bne.n	800dc76 <dir_alloc+0x64>
 800dc70:	e00c      	b.n	800dc8c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc72:	2300      	movs	r3, #0
 800dc74:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc76:	2101      	movs	r1, #1
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff ff05 	bl	800da88 <dir_next>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d0d7      	beq.n	800dc38 <dir_alloc+0x26>
 800dc88:	e000      	b.n	800dc8c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc8a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc8c:	7dfb      	ldrb	r3, [r7, #23]
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d101      	bne.n	800dc96 <dir_alloc+0x84>
 800dc92:	2307      	movs	r3, #7
 800dc94:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	331a      	adds	r3, #26
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7ff f842 	bl	800cd38 <ld_word>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b03      	cmp	r3, #3
 800dcbe:	d109      	bne.n	800dcd4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	3314      	adds	r3, #20
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff f837 	bl	800cd38 <ld_word>
 800dcca:	4603      	mov	r3, r0
 800dccc:	041b      	lsls	r3, r3, #16
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b084      	sub	sp, #16
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	331a      	adds	r3, #26
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	b292      	uxth	r2, r2
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff f85a 	bl	800cdae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	d109      	bne.n	800dd16 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	f103 0214 	add.w	r2, r3, #20
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	0c1b      	lsrs	r3, r3, #16
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7ff f84c 	bl	800cdae <st_word>
	}
}
 800dd16:	bf00      	nop
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b086      	sub	sp, #24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff fe2f 	bl	800d992 <dir_sdi>
 800dd34:	4603      	mov	r3, r0
 800dd36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <dir_find+0x24>
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
 800dd40:	e03e      	b.n	800ddc0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	69db      	ldr	r3, [r3, #28]
 800dd46:	4619      	mov	r1, r3
 800dd48:	6938      	ldr	r0, [r7, #16]
 800dd4a:	f7ff faa5 	bl	800d298 <move_window>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dd52:	7dfb      	ldrb	r3, [r7, #23]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d12f      	bne.n	800ddb8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d102      	bne.n	800dd6c <dir_find+0x4e>
 800dd66:	2304      	movs	r3, #4
 800dd68:	75fb      	strb	r3, [r7, #23]
 800dd6a:	e028      	b.n	800ddbe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a1b      	ldr	r3, [r3, #32]
 800dd70:	330b      	adds	r3, #11
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	330b      	adds	r3, #11
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	f003 0308 	and.w	r3, r3, #8
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10a      	bne.n	800dda4 <dir_find+0x86>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a18      	ldr	r0, [r3, #32]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3324      	adds	r3, #36	@ 0x24
 800dd96:	220b      	movs	r2, #11
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7ff f88b 	bl	800ceb4 <mem_cmp>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00b      	beq.n	800ddbc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dda4:	2100      	movs	r1, #0
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fe6e 	bl	800da88 <dir_next>
 800ddac:	4603      	mov	r3, r0
 800ddae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d0c5      	beq.n	800dd42 <dir_find+0x24>
 800ddb6:	e002      	b.n	800ddbe <dir_find+0xa0>
		if (res != FR_OK) break;
 800ddb8:	bf00      	nop
 800ddba:	e000      	b.n	800ddbe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ddbc:	bf00      	nop

	return res;
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3718      	adds	r7, #24
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff ff1a 	bl	800dc12 <dir_alloc>
 800ddde:	4603      	mov	r3, r0
 800dde0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d11c      	bne.n	800de22 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	4619      	mov	r1, r3
 800ddee:	68b8      	ldr	r0, [r7, #8]
 800ddf0:	f7ff fa52 	bl	800d298 <move_window>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ddf8:	7bfb      	ldrb	r3, [r7, #15]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d111      	bne.n	800de22 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	2220      	movs	r2, #32
 800de04:	2100      	movs	r1, #0
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff f839 	bl	800ce7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a18      	ldr	r0, [r3, #32]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3324      	adds	r3, #36	@ 0x24
 800de14:	220b      	movs	r2, #11
 800de16:	4619      	mov	r1, r3
 800de18:	f7ff f810 	bl	800ce3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2201      	movs	r2, #1
 800de20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3324      	adds	r3, #36	@ 0x24
 800de40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800de42:	220b      	movs	r2, #11
 800de44:	2120      	movs	r1, #32
 800de46:	68b8      	ldr	r0, [r7, #8]
 800de48:	f7ff f819 	bl	800ce7e <mem_set>
	si = i = 0; ni = 8;
 800de4c:	2300      	movs	r3, #0
 800de4e:	613b      	str	r3, [r7, #16]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	61fb      	str	r3, [r7, #28]
 800de54:	2308      	movs	r3, #8
 800de56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	61fa      	str	r2, [r7, #28]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	4413      	add	r3, r2
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de66:	7efb      	ldrb	r3, [r7, #27]
 800de68:	2b20      	cmp	r3, #32
 800de6a:	d94e      	bls.n	800df0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800de6c:	7efb      	ldrb	r3, [r7, #27]
 800de6e:	2b2f      	cmp	r3, #47	@ 0x2f
 800de70:	d006      	beq.n	800de80 <create_name+0x54>
 800de72:	7efb      	ldrb	r3, [r7, #27]
 800de74:	2b5c      	cmp	r3, #92	@ 0x5c
 800de76:	d110      	bne.n	800de9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de78:	e002      	b.n	800de80 <create_name+0x54>
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	3301      	adds	r3, #1
 800de7e:	61fb      	str	r3, [r7, #28]
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	4413      	add	r3, r2
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	2b2f      	cmp	r3, #47	@ 0x2f
 800de8a:	d0f6      	beq.n	800de7a <create_name+0x4e>
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	4413      	add	r3, r2
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b5c      	cmp	r3, #92	@ 0x5c
 800de96:	d0f0      	beq.n	800de7a <create_name+0x4e>
			break;
 800de98:	e038      	b.n	800df0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de9a:	7efb      	ldrb	r3, [r7, #27]
 800de9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800de9e:	d003      	beq.n	800dea8 <create_name+0x7c>
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d30c      	bcc.n	800dec2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	2b0b      	cmp	r3, #11
 800deac:	d002      	beq.n	800deb4 <create_name+0x88>
 800deae:	7efb      	ldrb	r3, [r7, #27]
 800deb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800deb2:	d001      	beq.n	800deb8 <create_name+0x8c>
 800deb4:	2306      	movs	r3, #6
 800deb6:	e044      	b.n	800df42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800deb8:	2308      	movs	r3, #8
 800deba:	613b      	str	r3, [r7, #16]
 800debc:	230b      	movs	r3, #11
 800debe:	617b      	str	r3, [r7, #20]
			continue;
 800dec0:	e022      	b.n	800df08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dec2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	da04      	bge.n	800ded4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800deca:	7efb      	ldrb	r3, [r7, #27]
 800decc:	3b80      	subs	r3, #128	@ 0x80
 800dece:	4a1f      	ldr	r2, [pc, #124]	@ (800df4c <create_name+0x120>)
 800ded0:	5cd3      	ldrb	r3, [r2, r3]
 800ded2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ded4:	7efb      	ldrb	r3, [r7, #27]
 800ded6:	4619      	mov	r1, r3
 800ded8:	481d      	ldr	r0, [pc, #116]	@ (800df50 <create_name+0x124>)
 800deda:	f7ff f812 	bl	800cf02 <chk_chr>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <create_name+0xbc>
 800dee4:	2306      	movs	r3, #6
 800dee6:	e02c      	b.n	800df42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dee8:	7efb      	ldrb	r3, [r7, #27]
 800deea:	2b60      	cmp	r3, #96	@ 0x60
 800deec:	d905      	bls.n	800defa <create_name+0xce>
 800deee:	7efb      	ldrb	r3, [r7, #27]
 800def0:	2b7a      	cmp	r3, #122	@ 0x7a
 800def2:	d802      	bhi.n	800defa <create_name+0xce>
 800def4:	7efb      	ldrb	r3, [r7, #27]
 800def6:	3b20      	subs	r3, #32
 800def8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	613a      	str	r2, [r7, #16]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	4413      	add	r3, r2
 800df04:	7efa      	ldrb	r2, [r7, #27]
 800df06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800df08:	e7a6      	b.n	800de58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800df0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	441a      	add	r2, r3
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <create_name+0xf4>
 800df1c:	2306      	movs	r3, #6
 800df1e:	e010      	b.n	800df42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	2be5      	cmp	r3, #229	@ 0xe5
 800df26:	d102      	bne.n	800df2e <create_name+0x102>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2205      	movs	r2, #5
 800df2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df2e:	7efb      	ldrb	r3, [r7, #27]
 800df30:	2b20      	cmp	r3, #32
 800df32:	d801      	bhi.n	800df38 <create_name+0x10c>
 800df34:	2204      	movs	r2, #4
 800df36:	e000      	b.n	800df3a <create_name+0x10e>
 800df38:	2200      	movs	r2, #0
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	330b      	adds	r3, #11
 800df3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800df40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800df42:	4618      	mov	r0, r3
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	0800f744 	.word	0x0800f744
 800df50:	0800f454 	.word	0x0800f454

0800df54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df68:	e002      	b.n	800df70 <follow_path+0x1c>
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	3301      	adds	r3, #1
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b2f      	cmp	r3, #47	@ 0x2f
 800df76:	d0f8      	beq.n	800df6a <follow_path+0x16>
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800df7e:	d0f4      	beq.n	800df6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	2200      	movs	r2, #0
 800df84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b1f      	cmp	r3, #31
 800df8c:	d80a      	bhi.n	800dfa4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2280      	movs	r2, #128	@ 0x80
 800df92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800df96:	2100      	movs	r1, #0
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7ff fcfa 	bl	800d992 <dir_sdi>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	75fb      	strb	r3, [r7, #23]
 800dfa2:	e043      	b.n	800e02c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7ff ff3f 	bl	800de2c <create_name>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfb2:	7dfb      	ldrb	r3, [r7, #23]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d134      	bne.n	800e022 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7ff feb0 	bl	800dd1e <dir_find>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dfc8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dfca:	7dfb      	ldrb	r3, [r7, #23]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00a      	beq.n	800dfe6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dfd0:	7dfb      	ldrb	r3, [r7, #23]
 800dfd2:	2b04      	cmp	r3, #4
 800dfd4:	d127      	bne.n	800e026 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dfd6:	7afb      	ldrb	r3, [r7, #11]
 800dfd8:	f003 0304 	and.w	r3, r3, #4
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d122      	bne.n	800e026 <follow_path+0xd2>
 800dfe0:	2305      	movs	r3, #5
 800dfe2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dfe4:	e01f      	b.n	800e026 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfe6:	7afb      	ldrb	r3, [r7, #11]
 800dfe8:	f003 0304 	and.w	r3, r3, #4
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d11c      	bne.n	800e02a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	799b      	ldrb	r3, [r3, #6]
 800dff4:	f003 0310 	and.w	r3, r3, #16
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d102      	bne.n	800e002 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dffc:	2305      	movs	r3, #5
 800dffe:	75fb      	strb	r3, [r7, #23]
 800e000:	e014      	b.n	800e02c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e010:	4413      	add	r3, r2
 800e012:	4619      	mov	r1, r3
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7ff fe43 	bl	800dca0 <ld_clust>
 800e01a:	4602      	mov	r2, r0
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e020:	e7c0      	b.n	800dfa4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e022:	bf00      	nop
 800e024:	e002      	b.n	800e02c <follow_path+0xd8>
				break;
 800e026:	bf00      	nop
 800e028:	e000      	b.n	800e02c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e02a:	bf00      	nop
			}
		}
	}

	return res;
 800e02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e036:	b480      	push	{r7}
 800e038:	b087      	sub	sp, #28
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e03e:	f04f 33ff 	mov.w	r3, #4294967295
 800e042:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d031      	beq.n	800e0b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	e002      	b.n	800e05a <get_ldnumber+0x24>
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	3301      	adds	r3, #1
 800e058:	617b      	str	r3, [r7, #20]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b20      	cmp	r3, #32
 800e060:	d903      	bls.n	800e06a <get_ldnumber+0x34>
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b3a      	cmp	r3, #58	@ 0x3a
 800e068:	d1f4      	bne.n	800e054 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b3a      	cmp	r3, #58	@ 0x3a
 800e070:	d11c      	bne.n	800e0ac <get_ldnumber+0x76>
			tp = *path;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	60fa      	str	r2, [r7, #12]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	3b30      	subs	r3, #48	@ 0x30
 800e082:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b09      	cmp	r3, #9
 800e088:	d80e      	bhi.n	800e0a8 <get_ldnumber+0x72>
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d10a      	bne.n	800e0a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d107      	bne.n	800e0a8 <get_ldnumber+0x72>
					vol = (int)i;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	e002      	b.n	800e0b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e0b0:	693b      	ldr	r3, [r7, #16]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	371c      	adds	r7, #28
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
	...

0800e0c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	70da      	strb	r2, [r3, #3]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e0d8:	6839      	ldr	r1, [r7, #0]
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7ff f8dc 	bl	800d298 <move_window>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <check_fs+0x2a>
 800e0e6:	2304      	movs	r3, #4
 800e0e8:	e038      	b.n	800e15c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3330      	adds	r3, #48	@ 0x30
 800e0ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fe fe20 	bl	800cd38 <ld_word>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e100:	429a      	cmp	r2, r3
 800e102:	d001      	beq.n	800e108 <check_fs+0x48>
 800e104:	2303      	movs	r3, #3
 800e106:	e029      	b.n	800e15c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e10e:	2be9      	cmp	r3, #233	@ 0xe9
 800e110:	d009      	beq.n	800e126 <check_fs+0x66>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e118:	2beb      	cmp	r3, #235	@ 0xeb
 800e11a:	d11e      	bne.n	800e15a <check_fs+0x9a>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e122:	2b90      	cmp	r3, #144	@ 0x90
 800e124:	d119      	bne.n	800e15a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	3330      	adds	r3, #48	@ 0x30
 800e12a:	3336      	adds	r3, #54	@ 0x36
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fe1b 	bl	800cd68 <ld_dword>
 800e132:	4603      	mov	r3, r0
 800e134:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e138:	4a0a      	ldr	r2, [pc, #40]	@ (800e164 <check_fs+0xa4>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d101      	bne.n	800e142 <check_fs+0x82>
 800e13e:	2300      	movs	r3, #0
 800e140:	e00c      	b.n	800e15c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3330      	adds	r3, #48	@ 0x30
 800e146:	3352      	adds	r3, #82	@ 0x52
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fe fe0d 	bl	800cd68 <ld_dword>
 800e14e:	4603      	mov	r3, r0
 800e150:	4a05      	ldr	r2, [pc, #20]	@ (800e168 <check_fs+0xa8>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d101      	bne.n	800e15a <check_fs+0x9a>
 800e156:	2300      	movs	r3, #0
 800e158:	e000      	b.n	800e15c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e15a:	2302      	movs	r3, #2
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	00544146 	.word	0x00544146
 800e168:	33544146 	.word	0x33544146

0800e16c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b096      	sub	sp, #88	@ 0x58
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	4613      	mov	r3, r2
 800e178:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2200      	movs	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7ff ff58 	bl	800e036 <get_ldnumber>
 800e186:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	da01      	bge.n	800e192 <find_volume+0x26>
 800e18e:	230b      	movs	r3, #11
 800e190:	e22d      	b.n	800e5ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e192:	4aa1      	ldr	r2, [pc, #644]	@ (800e418 <find_volume+0x2ac>)
 800e194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e19a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <find_volume+0x3a>
 800e1a2:	230c      	movs	r3, #12
 800e1a4:	e223      	b.n	800e5ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	f023 0301 	bic.w	r3, r3, #1
 800e1b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01a      	beq.n	800e1f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fe fd19 	bl	800cbf8 <disk_status>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1d0:	f003 0301 	and.w	r3, r3, #1
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10c      	bne.n	800e1f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e1d8:	79fb      	ldrb	r3, [r7, #7]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d007      	beq.n	800e1ee <find_volume+0x82>
 800e1de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1e2:	f003 0304 	and.w	r3, r3, #4
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e1ea:	230a      	movs	r3, #10
 800e1ec:	e1ff      	b.n	800e5ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	e1fd      	b.n	800e5ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e1f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe fd11 	bl	800cc2c <disk_initialize>
 800e20a:	4603      	mov	r3, r0
 800e20c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e210:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e214:	f003 0301 	and.w	r3, r3, #1
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e21c:	2303      	movs	r3, #3
 800e21e:	e1e6      	b.n	800e5ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e220:	79fb      	ldrb	r3, [r7, #7]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d007      	beq.n	800e236 <find_volume+0xca>
 800e226:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e22a:	f003 0304 	and.w	r3, r3, #4
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e232:	230a      	movs	r3, #10
 800e234:	e1db      	b.n	800e5ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e23a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e23c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e23e:	f7ff ff3f 	bl	800e0c0 <check_fs>
 800e242:	4603      	mov	r3, r0
 800e244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e248:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d149      	bne.n	800e2e4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e250:	2300      	movs	r3, #0
 800e252:	643b      	str	r3, [r7, #64]	@ 0x40
 800e254:	e01e      	b.n	800e294 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e258:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e25c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e25e:	011b      	lsls	r3, r3, #4
 800e260:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e264:	4413      	add	r3, r2
 800e266:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26a:	3304      	adds	r3, #4
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d006      	beq.n	800e280 <find_volume+0x114>
 800e272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e274:	3308      	adds	r3, #8
 800e276:	4618      	mov	r0, r3
 800e278:	f7fe fd76 	bl	800cd68 <ld_dword>
 800e27c:	4602      	mov	r2, r0
 800e27e:	e000      	b.n	800e282 <find_volume+0x116>
 800e280:	2200      	movs	r2, #0
 800e282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	3358      	adds	r3, #88	@ 0x58
 800e288:	443b      	add	r3, r7
 800e28a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e28e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e290:	3301      	adds	r3, #1
 800e292:	643b      	str	r3, [r7, #64]	@ 0x40
 800e294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e296:	2b03      	cmp	r3, #3
 800e298:	d9dd      	bls.n	800e256 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e29a:	2300      	movs	r3, #0
 800e29c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e29e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <find_volume+0x13e>
 800e2a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	3358      	adds	r3, #88	@ 0x58
 800e2b0:	443b      	add	r3, r7
 800e2b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e2b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d005      	beq.n	800e2ca <find_volume+0x15e>
 800e2be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e2c2:	f7ff fefd 	bl	800e0c0 <check_fs>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	e000      	b.n	800e2cc <find_volume+0x160>
 800e2ca:	2303      	movs	r3, #3
 800e2cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d905      	bls.n	800e2e4 <find_volume+0x178>
 800e2d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2da:	3301      	adds	r3, #1
 800e2dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d9e2      	bls.n	800e2aa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e2e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2e8:	2b04      	cmp	r3, #4
 800e2ea:	d101      	bne.n	800e2f0 <find_volume+0x184>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e17e      	b.n	800e5ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d901      	bls.n	800e2fc <find_volume+0x190>
 800e2f8:	230d      	movs	r3, #13
 800e2fa:	e178      	b.n	800e5ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	3330      	adds	r3, #48	@ 0x30
 800e300:	330b      	adds	r3, #11
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fd18 	bl	800cd38 <ld_word>
 800e308:	4603      	mov	r3, r0
 800e30a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e30e:	d001      	beq.n	800e314 <find_volume+0x1a8>
 800e310:	230d      	movs	r3, #13
 800e312:	e16c      	b.n	800e5ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e316:	3330      	adds	r3, #48	@ 0x30
 800e318:	3316      	adds	r3, #22
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fe fd0c 	bl	800cd38 <ld_word>
 800e320:	4603      	mov	r3, r0
 800e322:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <find_volume+0x1cc>
 800e32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32c:	3330      	adds	r3, #48	@ 0x30
 800e32e:	3324      	adds	r3, #36	@ 0x24
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fd19 	bl	800cd68 <ld_dword>
 800e336:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e33c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e340:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e346:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34a:	789b      	ldrb	r3, [r3, #2]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d005      	beq.n	800e35c <find_volume+0x1f0>
 800e350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e352:	789b      	ldrb	r3, [r3, #2]
 800e354:	2b02      	cmp	r3, #2
 800e356:	d001      	beq.n	800e35c <find_volume+0x1f0>
 800e358:	230d      	movs	r3, #13
 800e35a:	e148      	b.n	800e5ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35e:	789b      	ldrb	r3, [r3, #2]
 800e360:	461a      	mov	r2, r3
 800e362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e364:	fb02 f303 	mul.w	r3, r2, r3
 800e368:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e370:	461a      	mov	r2, r3
 800e372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e374:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e378:	895b      	ldrh	r3, [r3, #10]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d008      	beq.n	800e390 <find_volume+0x224>
 800e37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e380:	895b      	ldrh	r3, [r3, #10]
 800e382:	461a      	mov	r2, r3
 800e384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e386:	895b      	ldrh	r3, [r3, #10]
 800e388:	3b01      	subs	r3, #1
 800e38a:	4013      	ands	r3, r2
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d001      	beq.n	800e394 <find_volume+0x228>
 800e390:	230d      	movs	r3, #13
 800e392:	e12c      	b.n	800e5ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e396:	3330      	adds	r3, #48	@ 0x30
 800e398:	3311      	adds	r3, #17
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fe fccc 	bl	800cd38 <ld_word>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3aa:	891b      	ldrh	r3, [r3, #8]
 800e3ac:	f003 030f 	and.w	r3, r3, #15
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <find_volume+0x24e>
 800e3b6:	230d      	movs	r3, #13
 800e3b8:	e119      	b.n	800e5ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3bc:	3330      	adds	r3, #48	@ 0x30
 800e3be:	3313      	adds	r3, #19
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fe fcb9 	bl	800cd38 <ld_word>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e3ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d106      	bne.n	800e3de <find_volume+0x272>
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d2:	3330      	adds	r3, #48	@ 0x30
 800e3d4:	3320      	adds	r3, #32
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fcc6 	bl	800cd68 <ld_dword>
 800e3dc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e0:	3330      	adds	r3, #48	@ 0x30
 800e3e2:	330e      	adds	r3, #14
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe fca7 	bl	800cd38 <ld_word>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e3ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <find_volume+0x28c>
 800e3f4:	230d      	movs	r3, #13
 800e3f6:	e0fa      	b.n	800e5ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e3f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3fc:	4413      	add	r3, r2
 800e3fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e400:	8912      	ldrh	r2, [r2, #8]
 800e402:	0912      	lsrs	r2, r2, #4
 800e404:	b292      	uxth	r2, r2
 800e406:	4413      	add	r3, r2
 800e408:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e40a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40e:	429a      	cmp	r2, r3
 800e410:	d204      	bcs.n	800e41c <find_volume+0x2b0>
 800e412:	230d      	movs	r3, #13
 800e414:	e0eb      	b.n	800e5ee <find_volume+0x482>
 800e416:	bf00      	nop
 800e418:	24070de0 	.word	0x24070de0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e41c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e424:	8952      	ldrh	r2, [r2, #10]
 800e426:	fbb3 f3f2 	udiv	r3, r3, r2
 800e42a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <find_volume+0x2ca>
 800e432:	230d      	movs	r3, #13
 800e434:	e0db      	b.n	800e5ee <find_volume+0x482>
		fmt = FS_FAT32;
 800e436:	2303      	movs	r3, #3
 800e438:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e442:	4293      	cmp	r3, r2
 800e444:	d802      	bhi.n	800e44c <find_volume+0x2e0>
 800e446:	2302      	movs	r3, #2
 800e448:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e44e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e452:	4293      	cmp	r3, r2
 800e454:	d802      	bhi.n	800e45c <find_volume+0x2f0>
 800e456:	2301      	movs	r3, #1
 800e458:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45e:	1c9a      	adds	r2, r3, #2
 800e460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e462:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e466:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e468:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e46a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e46c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e46e:	441a      	add	r2, r3
 800e470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e472:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e478:	441a      	add	r2, r3
 800e47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e47e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e482:	2b03      	cmp	r3, #3
 800e484:	d11e      	bne.n	800e4c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e488:	3330      	adds	r3, #48	@ 0x30
 800e48a:	332a      	adds	r3, #42	@ 0x2a
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe fc53 	bl	800cd38 <ld_word>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <find_volume+0x330>
 800e498:	230d      	movs	r3, #13
 800e49a:	e0a8      	b.n	800e5ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49e:	891b      	ldrh	r3, [r3, #8]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <find_volume+0x33c>
 800e4a4:	230d      	movs	r3, #13
 800e4a6:	e0a2      	b.n	800e5ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4aa:	3330      	adds	r3, #48	@ 0x30
 800e4ac:	332c      	adds	r3, #44	@ 0x2c
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe fc5a 	bl	800cd68 <ld_dword>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4c2:	e01f      	b.n	800e504 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c6:	891b      	ldrh	r3, [r3, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <find_volume+0x364>
 800e4cc:	230d      	movs	r3, #13
 800e4ce:	e08e      	b.n	800e5ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d2:	6a1a      	ldr	r2, [r3, #32]
 800e4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4d6:	441a      	add	r2, r3
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4da:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d103      	bne.n	800e4ec <find_volume+0x380>
 800e4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	005b      	lsls	r3, r3, #1
 800e4ea:	e00a      	b.n	800e502 <find_volume+0x396>
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ee:	695a      	ldr	r2, [r3, #20]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	4413      	add	r3, r2
 800e4f6:	085a      	lsrs	r2, r3, #1
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fa:	695b      	ldr	r3, [r3, #20]
 800e4fc:	f003 0301 	and.w	r3, r3, #1
 800e500:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e502:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e506:	699a      	ldr	r2, [r3, #24]
 800e508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e50a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e50e:	0a5b      	lsrs	r3, r3, #9
 800e510:	429a      	cmp	r2, r3
 800e512:	d201      	bcs.n	800e518 <find_volume+0x3ac>
 800e514:	230d      	movs	r3, #13
 800e516:	e06a      	b.n	800e5ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51a:	f04f 32ff 	mov.w	r2, #4294967295
 800e51e:	611a      	str	r2, [r3, #16]
 800e520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e522:	691a      	ldr	r2, [r3, #16]
 800e524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e526:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52a:	2280      	movs	r2, #128	@ 0x80
 800e52c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e52e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e532:	2b03      	cmp	r3, #3
 800e534:	d149      	bne.n	800e5ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e538:	3330      	adds	r3, #48	@ 0x30
 800e53a:	3330      	adds	r3, #48	@ 0x30
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fe fbfb 	bl	800cd38 <ld_word>
 800e542:	4603      	mov	r3, r0
 800e544:	2b01      	cmp	r3, #1
 800e546:	d140      	bne.n	800e5ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e54a:	3301      	adds	r3, #1
 800e54c:	4619      	mov	r1, r3
 800e54e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e550:	f7fe fea2 	bl	800d298 <move_window>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d137      	bne.n	800e5ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55c:	2200      	movs	r2, #0
 800e55e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e562:	3330      	adds	r3, #48	@ 0x30
 800e564:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fbe5 	bl	800cd38 <ld_word>
 800e56e:	4603      	mov	r3, r0
 800e570:	461a      	mov	r2, r3
 800e572:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e576:	429a      	cmp	r2, r3
 800e578:	d127      	bne.n	800e5ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57c:	3330      	adds	r3, #48	@ 0x30
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fbf2 	bl	800cd68 <ld_dword>
 800e584:	4603      	mov	r3, r0
 800e586:	4a1c      	ldr	r2, [pc, #112]	@ (800e5f8 <find_volume+0x48c>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d11e      	bne.n	800e5ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58e:	3330      	adds	r3, #48	@ 0x30
 800e590:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fbe7 	bl	800cd68 <ld_dword>
 800e59a:	4603      	mov	r3, r0
 800e59c:	4a17      	ldr	r2, [pc, #92]	@ (800e5fc <find_volume+0x490>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d113      	bne.n	800e5ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a4:	3330      	adds	r3, #48	@ 0x30
 800e5a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe fbdc 	bl	800cd68 <ld_dword>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b8:	3330      	adds	r3, #48	@ 0x30
 800e5ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fbd2 	bl	800cd68 <ld_dword>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e5d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <find_volume+0x494>)
 800e5d4:	881b      	ldrh	r3, [r3, #0]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	4b09      	ldr	r3, [pc, #36]	@ (800e600 <find_volume+0x494>)
 800e5dc:	801a      	strh	r2, [r3, #0]
 800e5de:	4b08      	ldr	r3, [pc, #32]	@ (800e600 <find_volume+0x494>)
 800e5e0:	881a      	ldrh	r2, [r3, #0]
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e5e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5e8:	f7fe fdee 	bl	800d1c8 <clear_lock>
#endif
	return FR_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3758      	adds	r7, #88	@ 0x58
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	41615252 	.word	0x41615252
 800e5fc:	61417272 	.word	0x61417272
 800e600:	24070de4 	.word	0x24070de4

0800e604 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e60e:	2309      	movs	r3, #9
 800e610:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d01c      	beq.n	800e652 <validate+0x4e>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d018      	beq.n	800e652 <validate+0x4e>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d013      	beq.n	800e652 <validate+0x4e>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	889a      	ldrh	r2, [r3, #4]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	88db      	ldrh	r3, [r3, #6]
 800e634:	429a      	cmp	r2, r3
 800e636:	d10c      	bne.n	800e652 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	785b      	ldrb	r3, [r3, #1]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fada 	bl	800cbf8 <disk_status>
 800e644:	4603      	mov	r3, r0
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <validate+0x4e>
			res = FR_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e652:	7bfb      	ldrb	r3, [r7, #15]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d102      	bne.n	800e65e <validate+0x5a>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	e000      	b.n	800e660 <validate+0x5c>
 800e65e:	2300      	movs	r3, #0
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	6013      	str	r3, [r2, #0]
	return res;
 800e664:	7bfb      	ldrb	r3, [r7, #15]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	4613      	mov	r3, r2
 800e67c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e682:	f107 0310 	add.w	r3, r7, #16
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff fcd5 	bl	800e036 <get_ldnumber>
 800e68c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	2b00      	cmp	r3, #0
 800e692:	da01      	bge.n	800e698 <f_mount+0x28>
 800e694:	230b      	movs	r3, #11
 800e696:	e02b      	b.n	800e6f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e698:	4a17      	ldr	r2, [pc, #92]	@ (800e6f8 <f_mount+0x88>)
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d005      	beq.n	800e6b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e6a8:	69b8      	ldr	r0, [r7, #24]
 800e6aa:	f7fe fd8d 	bl	800d1c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	490d      	ldr	r1, [pc, #52]	@ (800e6f8 <f_mount+0x88>)
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <f_mount+0x66>
 800e6d0:	79fb      	ldrb	r3, [r7, #7]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d001      	beq.n	800e6da <f_mount+0x6a>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	e00a      	b.n	800e6f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e6da:	f107 010c 	add.w	r1, r7, #12
 800e6de:	f107 0308 	add.w	r3, r7, #8
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fd41 	bl	800e16c <find_volume>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3720      	adds	r7, #32
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	24070de0 	.word	0x24070de0

0800e6fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b098      	sub	sp, #96	@ 0x60
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	4613      	mov	r3, r2
 800e708:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d101      	bne.n	800e714 <f_open+0x18>
 800e710:	2309      	movs	r3, #9
 800e712:	e1a9      	b.n	800ea68 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e714:	79fb      	ldrb	r3, [r7, #7]
 800e716:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e71a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e71c:	79fa      	ldrb	r2, [r7, #7]
 800e71e:	f107 0110 	add.w	r1, r7, #16
 800e722:	f107 0308 	add.w	r3, r7, #8
 800e726:	4618      	mov	r0, r3
 800e728:	f7ff fd20 	bl	800e16c <find_volume>
 800e72c:	4603      	mov	r3, r0
 800e72e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e732:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e736:	2b00      	cmp	r3, #0
 800e738:	f040 818d 	bne.w	800ea56 <f_open+0x35a>
		dj.obj.fs = fs;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	f107 0314 	add.w	r3, r7, #20
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff fc03 	bl	800df54 <follow_path>
 800e74e:	4603      	mov	r3, r0
 800e750:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e754:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d118      	bne.n	800e78e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e75c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e760:	b25b      	sxtb	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	da03      	bge.n	800e76e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e766:	2306      	movs	r3, #6
 800e768:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e76c:	e00f      	b.n	800e78e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	2b01      	cmp	r3, #1
 800e772:	bf8c      	ite	hi
 800e774:	2301      	movhi	r3, #1
 800e776:	2300      	movls	r3, #0
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	461a      	mov	r2, r3
 800e77c:	f107 0314 	add.w	r3, r7, #20
 800e780:	4611      	mov	r1, r2
 800e782:	4618      	mov	r0, r3
 800e784:	f7fe fbd8 	bl	800cf38 <chk_lock>
 800e788:	4603      	mov	r3, r0
 800e78a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	f003 031c 	and.w	r3, r3, #28
 800e794:	2b00      	cmp	r3, #0
 800e796:	d07f      	beq.n	800e898 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e798:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d017      	beq.n	800e7d0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7a4:	2b04      	cmp	r3, #4
 800e7a6:	d10e      	bne.n	800e7c6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e7a8:	f7fe fc22 	bl	800cff0 <enq_lock>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d006      	beq.n	800e7c0 <f_open+0xc4>
 800e7b2:	f107 0314 	add.w	r3, r7, #20
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fb06 	bl	800ddc8 <dir_register>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	e000      	b.n	800e7c2 <f_open+0xc6>
 800e7c0:	2312      	movs	r3, #18
 800e7c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e7c6:	79fb      	ldrb	r3, [r7, #7]
 800e7c8:	f043 0308 	orr.w	r3, r3, #8
 800e7cc:	71fb      	strb	r3, [r7, #7]
 800e7ce:	e010      	b.n	800e7f2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e7d0:	7ebb      	ldrb	r3, [r7, #26]
 800e7d2:	f003 0311 	and.w	r3, r3, #17
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <f_open+0xe6>
					res = FR_DENIED;
 800e7da:	2307      	movs	r3, #7
 800e7dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e7e0:	e007      	b.n	800e7f2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	f003 0304 	and.w	r3, r3, #4
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <f_open+0xf6>
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e7f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d168      	bne.n	800e8cc <f_open+0x1d0>
 800e7fa:	79fb      	ldrb	r3, [r7, #7]
 800e7fc:	f003 0308 	and.w	r3, r3, #8
 800e800:	2b00      	cmp	r3, #0
 800e802:	d063      	beq.n	800e8cc <f_open+0x1d0>
				dw = GET_FATTIME();
 800e804:	f7fd ffb2 	bl	800c76c <get_fattime>
 800e808:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e80c:	330e      	adds	r3, #14
 800e80e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe fae7 	bl	800cde4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e818:	3316      	adds	r3, #22
 800e81a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fae1 	bl	800cde4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e824:	330b      	adds	r3, #11
 800e826:	2220      	movs	r2, #32
 800e828:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7ff fa35 	bl	800dca0 <ld_clust>
 800e836:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e83c:	2200      	movs	r2, #0
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff fa4d 	bl	800dcde <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e846:	331c      	adds	r3, #28
 800e848:	2100      	movs	r1, #0
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe faca 	bl	800cde4 <st_dword>
					fs->wflag = 1;
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	2201      	movs	r2, #1
 800e854:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d037      	beq.n	800e8cc <f_open+0x1d0>
						dw = fs->winsect;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e860:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e862:	f107 0314 	add.w	r3, r7, #20
 800e866:	2200      	movs	r2, #0
 800e868:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe ff60 	bl	800d730 <remove_chain>
 800e870:	4603      	mov	r3, r0
 800e872:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e876:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d126      	bne.n	800e8cc <f_open+0x1d0>
							res = move_window(fs, dw);
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e882:	4618      	mov	r0, r3
 800e884:	f7fe fd08 	bl	800d298 <move_window>
 800e888:	4603      	mov	r3, r0
 800e88a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e892:	3a01      	subs	r2, #1
 800e894:	60da      	str	r2, [r3, #12]
 800e896:	e019      	b.n	800e8cc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e898:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d115      	bne.n	800e8cc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e8a0:	7ebb      	ldrb	r3, [r7, #26]
 800e8a2:	f003 0310 	and.w	r3, r3, #16
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d003      	beq.n	800e8b2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e8aa:	2304      	movs	r3, #4
 800e8ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e8b0:	e00c      	b.n	800e8cc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e8b2:	79fb      	ldrb	r3, [r7, #7]
 800e8b4:	f003 0302 	and.w	r3, r3, #2
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d007      	beq.n	800e8cc <f_open+0x1d0>
 800e8bc:	7ebb      	ldrb	r3, [r7, #26]
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <f_open+0x1d0>
						res = FR_DENIED;
 800e8c6:	2307      	movs	r3, #7
 800e8c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d126      	bne.n	800e922 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e8d4:	79fb      	ldrb	r3, [r7, #7]
 800e8d6:	f003 0308 	and.w	r3, r3, #8
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e8de:	79fb      	ldrb	r3, [r7, #7]
 800e8e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	bf8c      	ite	hi
 800e8fa:	2301      	movhi	r3, #1
 800e8fc:	2300      	movls	r3, #0
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	461a      	mov	r2, r3
 800e902:	f107 0314 	add.w	r3, r7, #20
 800e906:	4611      	mov	r1, r2
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fe fb93 	bl	800d034 <inc_lock>
 800e90e:	4602      	mov	r2, r0
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <f_open+0x226>
 800e91c:	2302      	movs	r3, #2
 800e91e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e922:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e926:	2b00      	cmp	r3, #0
 800e928:	f040 8095 	bne.w	800ea56 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e930:	4611      	mov	r1, r2
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff f9b4 	bl	800dca0 <ld_clust>
 800e938:	4602      	mov	r2, r0
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e940:	331c      	adds	r3, #28
 800e942:	4618      	mov	r0, r3
 800e944:	f7fe fa10 	bl	800cd68 <ld_dword>
 800e948:	4602      	mov	r2, r0
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e954:	693a      	ldr	r2, [r7, #16]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	88da      	ldrh	r2, [r3, #6]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	79fa      	ldrb	r2, [r7, #7]
 800e966:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	3330      	adds	r3, #48	@ 0x30
 800e97e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e982:	2100      	movs	r1, #0
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fa7a 	bl	800ce7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	f003 0320 	and.w	r3, r3, #32
 800e990:	2b00      	cmp	r3, #0
 800e992:	d060      	beq.n	800ea56 <f_open+0x35a>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d05c      	beq.n	800ea56 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	68da      	ldr	r2, [r3, #12]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	895b      	ldrh	r3, [r3, #10]
 800e9a8:	025b      	lsls	r3, r3, #9
 800e9aa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9b8:	e016      	b.n	800e9e8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe fd25 	bl	800d40e <get_fat>
 800e9c4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e9c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d802      	bhi.n	800e9d2 <f_open+0x2d6>
 800e9cc:	2302      	movs	r3, #2
 800e9ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e9d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d8:	d102      	bne.n	800e9e0 <f_open+0x2e4>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d103      	bne.n	800e9f8 <f_open+0x2fc>
 800e9f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d8e0      	bhi.n	800e9ba <f_open+0x2be>
				}
				fp->clust = clst;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d127      	bne.n	800ea56 <f_open+0x35a>
 800ea06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d022      	beq.n	800ea56 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe fcdb 	bl	800d3d0 <clust2sect>
 800ea1a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d103      	bne.n	800ea2a <f_open+0x32e>
						res = FR_INT_ERR;
 800ea22:	2302      	movs	r3, #2
 800ea24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea28:	e015      	b.n	800ea56 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea2c:	0a5a      	lsrs	r2, r3, #9
 800ea2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea30:	441a      	add	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	7858      	ldrb	r0, [r3, #1]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6a1a      	ldr	r2, [r3, #32]
 800ea44:	2301      	movs	r3, #1
 800ea46:	f7fe f919 	bl	800cc7c <disk_read>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <f_open+0x35a>
 800ea50:	2301      	movs	r3, #1
 800ea52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <f_open+0x368>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2200      	movs	r2, #0
 800ea62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3760      	adds	r7, #96	@ 0x60
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08e      	sub	sp, #56	@ 0x38
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2200      	movs	r2, #0
 800ea86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f107 0214 	add.w	r2, r7, #20
 800ea8e:	4611      	mov	r1, r2
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7ff fdb7 	bl	800e604 <validate>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d107      	bne.n	800eab4 <f_read+0x44>
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	7d5b      	ldrb	r3, [r3, #21]
 800eaa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eaac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <f_read+0x4a>
 800eab4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eab8:	e115      	b.n	800ece6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d101      	bne.n	800eaca <f_read+0x5a>
 800eac6:	2307      	movs	r3, #7
 800eac8:	e10d      	b.n	800ece6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	68da      	ldr	r2, [r3, #12]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	6a3b      	ldr	r3, [r7, #32]
 800eada:	429a      	cmp	r2, r3
 800eadc:	f240 80fe 	bls.w	800ecdc <f_read+0x26c>
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eae4:	e0fa      	b.n	800ecdc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	699b      	ldr	r3, [r3, #24]
 800eaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f040 80c6 	bne.w	800ec80 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	699b      	ldr	r3, [r3, #24]
 800eaf8:	0a5b      	lsrs	r3, r3, #9
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	8952      	ldrh	r2, [r2, #10]
 800eafe:	3a01      	subs	r2, #1
 800eb00:	4013      	ands	r3, r2
 800eb02:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d12f      	bne.n	800eb6a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d103      	bne.n	800eb1a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb18:	e013      	b.n	800eb42 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d007      	beq.n	800eb32 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	4619      	mov	r1, r3
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f7fe fefe 	bl	800d92a <clmt_clust>
 800eb2e:	6338      	str	r0, [r7, #48]	@ 0x30
 800eb30:	e007      	b.n	800eb42 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	69db      	ldr	r3, [r3, #28]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	f7fe fc67 	bl	800d40e <get_fat>
 800eb40:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d804      	bhi.n	800eb52 <f_read+0xe2>
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2202      	movs	r2, #2
 800eb4c:	755a      	strb	r2, [r3, #21]
 800eb4e:	2302      	movs	r3, #2
 800eb50:	e0c9      	b.n	800ece6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb58:	d104      	bne.n	800eb64 <f_read+0xf4>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	755a      	strb	r2, [r3, #21]
 800eb60:	2301      	movs	r3, #1
 800eb62:	e0c0      	b.n	800ece6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb68:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb6a:	697a      	ldr	r2, [r7, #20]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	4619      	mov	r1, r3
 800eb72:	4610      	mov	r0, r2
 800eb74:	f7fe fc2c 	bl	800d3d0 <clust2sect>
 800eb78:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d104      	bne.n	800eb8a <f_read+0x11a>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2202      	movs	r2, #2
 800eb84:	755a      	strb	r2, [r3, #21]
 800eb86:	2302      	movs	r3, #2
 800eb88:	e0ad      	b.n	800ece6 <f_read+0x276>
			sect += csect;
 800eb8a:	69ba      	ldr	r2, [r7, #24]
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	4413      	add	r3, r2
 800eb90:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	0a5b      	lsrs	r3, r3, #9
 800eb96:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d039      	beq.n	800ec12 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba2:	4413      	add	r3, r2
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	8952      	ldrh	r2, [r2, #10]
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d905      	bls.n	800ebb8 <f_read+0x148>
					cc = fs->csize - csect;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	895b      	ldrh	r3, [r3, #10]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	7858      	ldrb	r0, [r3, #1]
 800ebbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebbe:	69ba      	ldr	r2, [r7, #24]
 800ebc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ebc2:	f7fe f85b 	bl	800cc7c <disk_read>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d004      	beq.n	800ebd6 <f_read+0x166>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	755a      	strb	r2, [r3, #21]
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e087      	b.n	800ece6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	7d1b      	ldrb	r3, [r3, #20]
 800ebda:	b25b      	sxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	da14      	bge.n	800ec0a <f_read+0x19a>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6a1a      	ldr	r2, [r3, #32]
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d90d      	bls.n	800ec0a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6a1a      	ldr	r2, [r3, #32]
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	025b      	lsls	r3, r3, #9
 800ebf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebfa:	18d0      	adds	r0, r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	3330      	adds	r3, #48	@ 0x30
 800ec00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec04:	4619      	mov	r1, r3
 800ec06:	f7fe f919 	bl	800ce3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	025b      	lsls	r3, r3, #9
 800ec0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ec10:	e050      	b.n	800ecb4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	69ba      	ldr	r2, [r7, #24]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d02e      	beq.n	800ec7a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	7d1b      	ldrb	r3, [r3, #20]
 800ec20:	b25b      	sxtb	r3, r3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	da18      	bge.n	800ec58 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	7858      	ldrb	r0, [r3, #1]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6a1a      	ldr	r2, [r3, #32]
 800ec34:	2301      	movs	r3, #1
 800ec36:	f7fe f841 	bl	800ccbc <disk_write>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d004      	beq.n	800ec4a <f_read+0x1da>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	755a      	strb	r2, [r3, #21]
 800ec46:	2301      	movs	r3, #1
 800ec48:	e04d      	b.n	800ece6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	7d1b      	ldrb	r3, [r3, #20]
 800ec4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	7858      	ldrb	r0, [r3, #1]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec62:	2301      	movs	r3, #1
 800ec64:	69ba      	ldr	r2, [r7, #24]
 800ec66:	f7fe f809 	bl	800cc7c <disk_read>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d004      	beq.n	800ec7a <f_read+0x20a>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2201      	movs	r2, #1
 800ec74:	755a      	strb	r2, [r3, #21]
 800ec76:	2301      	movs	r3, #1
 800ec78:	e035      	b.n	800ece6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	69ba      	ldr	r2, [r7, #24]
 800ec7e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec88:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ec8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d901      	bls.n	800ec9a <f_read+0x22a>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	699b      	ldr	r3, [r3, #24]
 800eca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca8:	4413      	add	r3, r2
 800ecaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecac:	4619      	mov	r1, r3
 800ecae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecb0:	f7fe f8c4 	bl	800ce3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ecb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb8:	4413      	add	r3, r2
 800ecba:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	699a      	ldr	r2, [r3, #24]
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	441a      	add	r2, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	619a      	str	r2, [r3, #24]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecce:	441a      	add	r2, r3
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd8:	1ad3      	subs	r3, r2, r3
 800ecda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f47f af01 	bne.w	800eae6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3738      	adds	r7, #56	@ 0x38
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b086      	sub	sp, #24
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f107 0208 	add.w	r2, r7, #8
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff fc80 	bl	800e604 <validate>
 800ed04:	4603      	mov	r3, r0
 800ed06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed08:	7dfb      	ldrb	r3, [r7, #23]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d168      	bne.n	800ede0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7d1b      	ldrb	r3, [r3, #20]
 800ed12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d062      	beq.n	800ede0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	7d1b      	ldrb	r3, [r3, #20]
 800ed1e:	b25b      	sxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	da15      	bge.n	800ed50 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	7858      	ldrb	r0, [r3, #1]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a1a      	ldr	r2, [r3, #32]
 800ed32:	2301      	movs	r3, #1
 800ed34:	f7fd ffc2 	bl	800ccbc <disk_write>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <f_sync+0x54>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e04f      	b.n	800ede2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	7d1b      	ldrb	r3, [r3, #20]
 800ed46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ed50:	f7fd fd0c 	bl	800c76c <get_fattime>
 800ed54:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7fe fa9a 	bl	800d298 <move_window>
 800ed64:	4603      	mov	r3, r0
 800ed66:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d138      	bne.n	800ede0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed72:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	330b      	adds	r3, #11
 800ed78:	781a      	ldrb	r2, [r3, #0]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	330b      	adds	r3, #11
 800ed7e:	f042 0220 	orr.w	r2, r2, #32
 800ed82:	b2d2      	uxtb	r2, r2
 800ed84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	68f9      	ldr	r1, [r7, #12]
 800ed92:	f7fe ffa4 	bl	800dcde <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f103 021c 	add.w	r2, r3, #28
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f7fe f81e 	bl	800cde4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	3316      	adds	r3, #22
 800edac:	6939      	ldr	r1, [r7, #16]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe f818 	bl	800cde4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	3312      	adds	r3, #18
 800edb8:	2100      	movs	r1, #0
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fd fff7 	bl	800cdae <st_word>
					fs->wflag = 1;
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	2201      	movs	r2, #1
 800edc4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe fa93 	bl	800d2f4 <sync_fs>
 800edce:	4603      	mov	r3, r0
 800edd0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	7d1b      	ldrb	r3, [r3, #20]
 800edd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3718      	adds	r7, #24
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b084      	sub	sp, #16
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff ff7b 	bl	800ecee <f_sync>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d118      	bne.n	800ee34 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f107 0208 	add.w	r2, r7, #8
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff fbfa 	bl	800e604 <validate>
 800ee10:	4603      	mov	r3, r0
 800ee12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10c      	bne.n	800ee34 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	691b      	ldr	r3, [r3, #16]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe f996 	bl	800d150 <dec_lock>
 800ee24:	4603      	mov	r3, r0
 800ee26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d102      	bne.n	800ee34 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ee34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b090      	sub	sp, #64	@ 0x40
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f107 0208 	add.w	r2, r7, #8
 800ee4e:	4611      	mov	r1, r2
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff fbd7 	bl	800e604 <validate>
 800ee56:	4603      	mov	r3, r0
 800ee58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ee5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d103      	bne.n	800ee6c <f_lseek+0x2e>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	7d5b      	ldrb	r3, [r3, #21]
 800ee68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ee6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <f_lseek+0x3c>
 800ee74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee78:	e1e6      	b.n	800f248 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 80d1 	beq.w	800f026 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d15a      	bne.n	800ef42 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee90:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ee92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee94:	1d1a      	adds	r2, r3, #4
 800ee96:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	617b      	str	r3, [r7, #20]
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800eea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d03a      	beq.n	800ef22 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800eeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeae:	613b      	str	r3, [r7, #16]
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb6:	3302      	adds	r3, #2
 800eeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800eeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eebc:	60fb      	str	r3, [r7, #12]
 800eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec0:	3301      	adds	r3, #1
 800eec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe faa0 	bl	800d40e <get_fat>
 800eece:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800eed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d804      	bhi.n	800eee0 <f_lseek+0xa2>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2202      	movs	r2, #2
 800eeda:	755a      	strb	r2, [r3, #21]
 800eedc:	2302      	movs	r3, #2
 800eede:	e1b3      	b.n	800f248 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee6:	d104      	bne.n	800eef2 <f_lseek+0xb4>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	755a      	strb	r2, [r3, #21]
 800eeee:	2301      	movs	r3, #1
 800eef0:	e1aa      	b.n	800f248 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3301      	adds	r3, #1
 800eef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d0de      	beq.n	800eeba <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eefc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d809      	bhi.n	800ef18 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ef04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	1d1a      	adds	r2, r3, #4
 800ef12:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef14:	693a      	ldr	r2, [r7, #16]
 800ef16:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	695b      	ldr	r3, [r3, #20]
 800ef1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d3c4      	bcc.n	800eeac <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef28:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ef2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d803      	bhi.n	800ef3a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ef32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef34:	2200      	movs	r2, #0
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	e184      	b.n	800f244 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ef3a:	2311      	movs	r3, #17
 800ef3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ef40:	e180      	b.n	800f244 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d902      	bls.n	800ef52 <f_lseek+0x114>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f000 8172 	beq.w	800f244 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7fe fcdf 	bl	800d92a <clmt_clust>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ef72:	68ba      	ldr	r2, [r7, #8]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	69db      	ldr	r3, [r3, #28]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	f7fe fa28 	bl	800d3d0 <clust2sect>
 800ef80:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d104      	bne.n	800ef92 <f_lseek+0x154>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	755a      	strb	r2, [r3, #21]
 800ef8e:	2302      	movs	r3, #2
 800ef90:	e15a      	b.n	800f248 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	3b01      	subs	r3, #1
 800ef96:	0a5b      	lsrs	r3, r3, #9
 800ef98:	68ba      	ldr	r2, [r7, #8]
 800ef9a:	8952      	ldrh	r2, [r2, #10]
 800ef9c:	3a01      	subs	r2, #1
 800ef9e:	4013      	ands	r3, r2
 800efa0:	69ba      	ldr	r2, [r7, #24]
 800efa2:	4413      	add	r3, r2
 800efa4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f000 8148 	beq.w	800f244 <f_lseek+0x406>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a1b      	ldr	r3, [r3, #32]
 800efb8:	69ba      	ldr	r2, [r7, #24]
 800efba:	429a      	cmp	r2, r3
 800efbc:	f000 8142 	beq.w	800f244 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	b25b      	sxtb	r3, r3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	da18      	bge.n	800effc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	7858      	ldrb	r0, [r3, #1]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6a1a      	ldr	r2, [r3, #32]
 800efd8:	2301      	movs	r3, #1
 800efda:	f7fd fe6f 	bl	800ccbc <disk_write>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d004      	beq.n	800efee <f_lseek+0x1b0>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	755a      	strb	r2, [r3, #21]
 800efea:	2301      	movs	r3, #1
 800efec:	e12c      	b.n	800f248 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	7d1b      	ldrb	r3, [r3, #20]
 800eff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	7858      	ldrb	r0, [r3, #1]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f006:	2301      	movs	r3, #1
 800f008:	69ba      	ldr	r2, [r7, #24]
 800f00a:	f7fd fe37 	bl	800cc7c <disk_read>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d004      	beq.n	800f01e <f_lseek+0x1e0>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	755a      	strb	r2, [r3, #21]
 800f01a:	2301      	movs	r3, #1
 800f01c:	e114      	b.n	800f248 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	69ba      	ldr	r2, [r7, #24]
 800f022:	621a      	str	r2, [r3, #32]
 800f024:	e10e      	b.n	800f244 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d908      	bls.n	800f042 <f_lseek+0x204>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	7d1b      	ldrb	r3, [r3, #20]
 800f034:	f003 0302 	and.w	r3, r3, #2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d102      	bne.n	800f042 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f048:	2300      	movs	r3, #0
 800f04a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f050:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	f000 80a7 	beq.w	800f1a8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	895b      	ldrh	r3, [r3, #10]
 800f05e:	025b      	lsls	r3, r3, #9
 800f060:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f062:	6a3b      	ldr	r3, [r7, #32]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d01b      	beq.n	800f0a0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	1e5a      	subs	r2, r3, #1
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f072:	6a3b      	ldr	r3, [r7, #32]
 800f074:	1e59      	subs	r1, r3, #1
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d30f      	bcc.n	800f0a0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f080:	6a3b      	ldr	r3, [r7, #32]
 800f082:	1e5a      	subs	r2, r3, #1
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	425b      	negs	r3, r3
 800f088:	401a      	ands	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	69db      	ldr	r3, [r3, #28]
 800f09c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f09e:	e022      	b.n	800f0e6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d119      	bne.n	800f0e0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe fba2 	bl	800d7fa <create_chain>
 800f0b6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d104      	bne.n	800f0c8 <f_lseek+0x28a>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2202      	movs	r2, #2
 800f0c2:	755a      	strb	r2, [r3, #21]
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	e0bf      	b.n	800f248 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ce:	d104      	bne.n	800f0da <f_lseek+0x29c>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	755a      	strb	r2, [r3, #21]
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e0b6      	b.n	800f248 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0de:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0e4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d05d      	beq.n	800f1a8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f0ec:	e03a      	b.n	800f164 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	603b      	str	r3, [r7, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	699a      	ldr	r2, [r3, #24]
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	441a      	add	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	7d1b      	ldrb	r3, [r3, #20]
 800f106:	f003 0302 	and.w	r3, r3, #2
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00b      	beq.n	800f126 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f112:	4618      	mov	r0, r3
 800f114:	f7fe fb71 	bl	800d7fa <create_chain>
 800f118:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d108      	bne.n	800f132 <f_lseek+0x2f4>
							ofs = 0; break;
 800f120:	2300      	movs	r3, #0
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	e022      	b.n	800f16c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fe f96f 	bl	800d40e <get_fat>
 800f130:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f138:	d104      	bne.n	800f144 <f_lseek+0x306>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2201      	movs	r2, #1
 800f13e:	755a      	strb	r2, [r3, #21]
 800f140:	2301      	movs	r3, #1
 800f142:	e081      	b.n	800f248 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f146:	2b01      	cmp	r3, #1
 800f148:	d904      	bls.n	800f154 <f_lseek+0x316>
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	695b      	ldr	r3, [r3, #20]
 800f14e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f150:	429a      	cmp	r2, r3
 800f152:	d304      	bcc.n	800f15e <f_lseek+0x320>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2202      	movs	r2, #2
 800f158:	755a      	strb	r2, [r3, #21]
 800f15a:	2302      	movs	r3, #2
 800f15c:	e074      	b.n	800f248 <f_lseek+0x40a>
					fp->clust = clst;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f162:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d8c0      	bhi.n	800f0ee <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	699a      	ldr	r2, [r3, #24]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	441a      	add	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d012      	beq.n	800f1a8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe f922 	bl	800d3d0 <clust2sect>
 800f18c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <f_lseek+0x360>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2202      	movs	r2, #2
 800f198:	755a      	strb	r2, [r3, #21]
 800f19a:	2302      	movs	r3, #2
 800f19c:	e054      	b.n	800f248 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	0a5b      	lsrs	r3, r3, #9
 800f1a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1a4:	4413      	add	r3, r2
 800f1a6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	699a      	ldr	r2, [r3, #24]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d90a      	bls.n	800f1ca <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	699a      	ldr	r2, [r3, #24]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	7d1b      	ldrb	r3, [r3, #20]
 800f1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	699b      	ldr	r3, [r3, #24]
 800f1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d036      	beq.n	800f244 <f_lseek+0x406>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d031      	beq.n	800f244 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	7d1b      	ldrb	r3, [r3, #20]
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	da18      	bge.n	800f21c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	7858      	ldrb	r0, [r3, #1]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6a1a      	ldr	r2, [r3, #32]
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	f7fd fd5f 	bl	800ccbc <disk_write>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d004      	beq.n	800f20e <f_lseek+0x3d0>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	755a      	strb	r2, [r3, #21]
 800f20a:	2301      	movs	r3, #1
 800f20c:	e01c      	b.n	800f248 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	7d1b      	ldrb	r3, [r3, #20]
 800f212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f216:	b2da      	uxtb	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	7858      	ldrb	r0, [r3, #1]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f226:	2301      	movs	r3, #1
 800f228:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f22a:	f7fd fd27 	bl	800cc7c <disk_read>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	d004      	beq.n	800f23e <f_lseek+0x400>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	755a      	strb	r2, [r3, #21]
 800f23a:	2301      	movs	r3, #1
 800f23c:	e004      	b.n	800f248 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f242:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f244:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3740      	adds	r7, #64	@ 0x40
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f250:	b480      	push	{r7}
 800f252:	b087      	sub	sp, #28
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	4613      	mov	r3, r2
 800f25c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f25e:	2301      	movs	r3, #1
 800f260:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f262:	2300      	movs	r3, #0
 800f264:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f266:	4b1f      	ldr	r3, [pc, #124]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f268:	7a5b      	ldrb	r3, [r3, #9]
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d131      	bne.n	800f2d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f270:	4b1c      	ldr	r3, [pc, #112]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f272:	7a5b      	ldrb	r3, [r3, #9]
 800f274:	b2db      	uxtb	r3, r3
 800f276:	461a      	mov	r2, r3
 800f278:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f27a:	2100      	movs	r1, #0
 800f27c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f27e:	4b19      	ldr	r3, [pc, #100]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f280:	7a5b      	ldrb	r3, [r3, #9]
 800f282:	b2db      	uxtb	r3, r3
 800f284:	4a17      	ldr	r2, [pc, #92]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4413      	add	r3, r2
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f28e:	4b15      	ldr	r3, [pc, #84]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f290:	7a5b      	ldrb	r3, [r3, #9]
 800f292:	b2db      	uxtb	r3, r3
 800f294:	461a      	mov	r2, r3
 800f296:	4b13      	ldr	r3, [pc, #76]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f298:	4413      	add	r3, r2
 800f29a:	79fa      	ldrb	r2, [r7, #7]
 800f29c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f29e:	4b11      	ldr	r3, [pc, #68]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f2a0:	7a5b      	ldrb	r3, [r3, #9]
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	1c5a      	adds	r2, r3, #1
 800f2a6:	b2d1      	uxtb	r1, r2
 800f2a8:	4a0e      	ldr	r2, [pc, #56]	@ (800f2e4 <FATFS_LinkDriverEx+0x94>)
 800f2aa:	7251      	strb	r1, [r2, #9]
 800f2ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f2ae:	7dbb      	ldrb	r3, [r7, #22]
 800f2b0:	3330      	adds	r3, #48	@ 0x30
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	223a      	movs	r2, #58	@ 0x3a
 800f2be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	3302      	adds	r3, #2
 800f2c4:	222f      	movs	r2, #47	@ 0x2f
 800f2c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	3303      	adds	r3, #3
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	371c      	adds	r7, #28
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	24070e08 	.word	0x24070e08

0800f2e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7ff ffaa 	bl	800f250 <FATFS_LinkDriverEx>
 800f2fc:	4603      	mov	r3, r0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
	...

0800f308 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800f30e:	2300      	movs	r3, #0
 800f310:	607b      	str	r3, [r7, #4]
 800f312:	e02e      	b.n	800f372 <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	3b80      	subs	r3, #128	@ 0x80
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800f322:	fb02 f303 	mul.w	r3, r2, r3
 800f326:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f32a:	141a      	asrs	r2, r3, #16
 800f32c:	4916      	ldr	r1, [pc, #88]	@ (800f388 <JPEG_InitPostProcColorTables+0x80>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800f33a:	fb02 f303 	mul.w	r3, r2, r3
 800f33e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f342:	141a      	asrs	r2, r3, #16
 800f344:	4911      	ldr	r1, [pc, #68]	@ (800f38c <JPEG_InitPostProcColorTables+0x84>)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	4a10      	ldr	r2, [pc, #64]	@ (800f390 <JPEG_InitPostProcColorTables+0x88>)
 800f350:	fb03 f202 	mul.w	r2, r3, r2
 800f354:	490f      	ldr	r1, [pc, #60]	@ (800f394 <JPEG_InitPostProcColorTables+0x8c>)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	4a0e      	ldr	r2, [pc, #56]	@ (800f398 <JPEG_InitPostProcColorTables+0x90>)
 800f360:	fb03 f202 	mul.w	r2, r3, r2
 800f364:	490d      	ldr	r1, [pc, #52]	@ (800f39c <JPEG_InitPostProcColorTables+0x94>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3301      	adds	r3, #1
 800f370:	607b      	str	r3, [r7, #4]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2bff      	cmp	r3, #255	@ 0xff
 800f376:	ddcd      	ble.n	800f314 <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	370c      	adds	r7, #12
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	24070e14 	.word	0x24070e14
 800f38c:	24071214 	.word	0x24071214
 800f390:	ffffa498 	.word	0xffffa498
 800f394:	24071614 	.word	0x24071614
 800f398:	ffffd3f4 	.word	0xffffd3f4
 800f39c:	24071a14 	.word	0x24071a14

0800f3a0 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	af00      	add	r7, sp, #0
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800f3a4:	f7ff ffb0 	bl	800f308 <JPEG_InitPostProcColorTables>
#endif

}
 800f3a8:	bf00      	nop
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <memset>:
 800f3ac:	4402      	add	r2, r0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d100      	bne.n	800f3b6 <memset+0xa>
 800f3b4:	4770      	bx	lr
 800f3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ba:	e7f9      	b.n	800f3b0 <memset+0x4>

0800f3bc <__libc_init_array>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4d0d      	ldr	r5, [pc, #52]	@ (800f3f4 <__libc_init_array+0x38>)
 800f3c0:	4c0d      	ldr	r4, [pc, #52]	@ (800f3f8 <__libc_init_array+0x3c>)
 800f3c2:	1b64      	subs	r4, r4, r5
 800f3c4:	10a4      	asrs	r4, r4, #2
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	42a6      	cmp	r6, r4
 800f3ca:	d109      	bne.n	800f3e0 <__libc_init_array+0x24>
 800f3cc:	4d0b      	ldr	r5, [pc, #44]	@ (800f3fc <__libc_init_array+0x40>)
 800f3ce:	4c0c      	ldr	r4, [pc, #48]	@ (800f400 <__libc_init_array+0x44>)
 800f3d0:	f000 f818 	bl	800f404 <_init>
 800f3d4:	1b64      	subs	r4, r4, r5
 800f3d6:	10a4      	asrs	r4, r4, #2
 800f3d8:	2600      	movs	r6, #0
 800f3da:	42a6      	cmp	r6, r4
 800f3dc:	d105      	bne.n	800f3ea <__libc_init_array+0x2e>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e4:	4798      	blx	r3
 800f3e6:	3601      	adds	r6, #1
 800f3e8:	e7ee      	b.n	800f3c8 <__libc_init_array+0xc>
 800f3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ee:	4798      	blx	r3
 800f3f0:	3601      	adds	r6, #1
 800f3f2:	e7f2      	b.n	800f3da <__libc_init_array+0x1e>
 800f3f4:	0800f7cc 	.word	0x0800f7cc
 800f3f8:	0800f7cc 	.word	0x0800f7cc
 800f3fc:	0800f7cc 	.word	0x0800f7cc
 800f400:	0800f7d0 	.word	0x0800f7d0

0800f404 <_init>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	bf00      	nop
 800f408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f40a:	bc08      	pop	{r3}
 800f40c:	469e      	mov	lr, r3
 800f40e:	4770      	bx	lr

0800f410 <_fini>:
 800f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f412:	bf00      	nop
 800f414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f416:	bc08      	pop	{r3}
 800f418:	469e      	mov	lr, r3
 800f41a:	4770      	bx	lr
