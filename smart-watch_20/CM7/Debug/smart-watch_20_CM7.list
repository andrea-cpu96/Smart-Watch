
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7cc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800ea64  0800ea64  0000fa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edd8  0800edd8  00010024  2**0
                  CONTENTS
  4 .ARM          00000008  0800edd8  0800edd8  0000fdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede0  0800ede0  00010024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede0  0800ede0  0000fde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ede4  0800ede4  0000fde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  24000000  0800ede8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005798  24000024  0800ee0c  00010024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240057bc  0800ee0c  000107bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022153  00000000  00000000  00010052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004369  00000000  00000000  000321a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00036510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001327  00000000  00000000  00037df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043e3f  00000000  00000000  00039117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026c30  00000000  00000000  0007cf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a5a43  00000000  00000000  000a3b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002495c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c0  00000000  00000000  0024960c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0024fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ea4c 	.word	0x0800ea4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	0800ea4c 	.word	0x0800ea4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <GC9A01_set_reset+0x30>)
 800070a:	f002 faaf 	bl	8002c6c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800070e:	e004      	b.n	800071a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <GC9A01_set_reset+0x30>)
 8000716:	f002 faa9 	bl	8002c6c <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58022400 	.word	0x58022400

08000728 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	@ 0x40
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800073e:	f002 fa95 	bl	8002c6c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000742:	e004      	b.n	800074e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2140      	movs	r1, #64	@ 0x40
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800074a:	f002 fa8f 	bl	8002c6c <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58022400 	.word	0x58022400

0800075c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2102      	movs	r1, #2
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <GC9A01_set_chip_select+0x30>)
 8000772:	f002 fa7b 	bl	8002c6c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000776:	e004      	b.n	8000782 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <GC9A01_set_chip_select+0x30>)
 800077e:	f002 fa75 	bl	8002c6c <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58022800 	.word	0x58022800

08000790 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffc4 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ffdb 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fa92 	bl	8000cd4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffd3 	bl	800075c <GC9A01_set_chip_select>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ffad 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ffc4 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 fa7a 	bl	8000cd4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ffbb 	bl	800075c <GC9A01_set_chip_select>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffde 	bl	80007be <GC9A01_write_data>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000814:	202c      	movs	r0, #44	@ 0x2c
 8000816:	f7ff ffbb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800081a:	6839      	ldr	r1, [r7, #0]
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffce 	bl	80007be <GC9A01_write_data>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000834:	203c      	movs	r0, #60	@ 0x3c
 8000836:	f7ff ffab 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffbe 	bl	80007be <GC9A01_write_data>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <GC9A01_init>:

void GC9A01_init(void) {
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff84 	bl	800075c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000854:	2005      	movs	r0, #5
 8000856:	f001 fb25 	bl	8001ea4 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff4a 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 fb1f 	bl	8001ea4 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ff44 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(120);
 800086c:	2078      	movs	r0, #120	@ 0x78
 800086e:	f001 fb19 	bl	8001ea4 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000872:	20ef      	movs	r0, #239	@ 0xef
 8000874:	f7ff ff8c 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000878:	20eb      	movs	r0, #235	@ 0xeb
 800087a:	f7ff ff89 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800087e:	2014      	movs	r0, #20
 8000880:	f7ff ffb5 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000884:	20fe      	movs	r0, #254	@ 0xfe
 8000886:	f7ff ff83 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800088a:	20ef      	movs	r0, #239	@ 0xef
 800088c:	f7ff ff80 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000890:	20eb      	movs	r0, #235	@ 0xeb
 8000892:	f7ff ff7d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000896:	2014      	movs	r0, #20
 8000898:	f7ff ffa9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800089c:	2084      	movs	r0, #132	@ 0x84
 800089e:	f7ff ff77 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80008a2:	2040      	movs	r0, #64	@ 0x40
 80008a4:	f7ff ffa3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80008a8:	2085      	movs	r0, #133	@ 0x85
 80008aa:	f7ff ff71 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008ae:	20ff      	movs	r0, #255	@ 0xff
 80008b0:	f7ff ff9d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80008b4:	2086      	movs	r0, #134	@ 0x86
 80008b6:	f7ff ff6b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008ba:	20ff      	movs	r0, #255	@ 0xff
 80008bc:	f7ff ff97 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80008c0:	2087      	movs	r0, #135	@ 0x87
 80008c2:	f7ff ff65 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008c6:	20ff      	movs	r0, #255	@ 0xff
 80008c8:	f7ff ff91 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80008cc:	2088      	movs	r0, #136	@ 0x88
 80008ce:	f7ff ff5f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f7ff ff8b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80008d8:	2089      	movs	r0, #137	@ 0x89
 80008da:	f7ff ff59 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80008de:	2021      	movs	r0, #33	@ 0x21
 80008e0:	f7ff ff85 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80008e4:	208a      	movs	r0, #138	@ 0x8a
 80008e6:	f7ff ff53 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff7f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 80008f0:	208b      	movs	r0, #139	@ 0x8b
 80008f2:	f7ff ff4d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 80008f6:	2080      	movs	r0, #128	@ 0x80
 80008f8:	f7ff ff79 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 80008fc:	208c      	movs	r0, #140	@ 0x8c
 80008fe:	f7ff ff47 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff73 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000908:	208d      	movs	r0, #141	@ 0x8d
 800090a:	f7ff ff41 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff6d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000914:	208e      	movs	r0, #142	@ 0x8e
 8000916:	f7ff ff3b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800091a:	20ff      	movs	r0, #255	@ 0xff
 800091c:	f7ff ff67 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000920:	208f      	movs	r0, #143	@ 0x8f
 8000922:	f7ff ff35 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000926:	20ff      	movs	r0, #255	@ 0xff
 8000928:	f7ff ff61 	bl	80007ee <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800092c:	20b6      	movs	r0, #182	@ 0xb6
 800092e:	f7ff ff2f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff5b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff58 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800093e:	2036      	movs	r0, #54	@ 0x36
 8000940:	f7ff ff26 	bl	8000790 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000944:	2048      	movs	r0, #72	@ 0x48
 8000946:	f7ff ff52 	bl	80007ee <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800094a:	203a      	movs	r0, #58	@ 0x3a
 800094c:	f7ff ff20 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000950:	2005      	movs	r0, #5
 8000952:	f7ff ff4c 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000956:	2090      	movs	r0, #144	@ 0x90
 8000958:	f7ff ff1a 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800095c:	2008      	movs	r0, #8
 800095e:	f7ff ff46 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000962:	2008      	movs	r0, #8
 8000964:	f7ff ff43 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000968:	2008      	movs	r0, #8
 800096a:	f7ff ff40 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800096e:	2008      	movs	r0, #8
 8000970:	f7ff ff3d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000974:	20bd      	movs	r0, #189	@ 0xbd
 8000976:	f7ff ff0b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff ff37 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000980:	20bc      	movs	r0, #188	@ 0xbc
 8000982:	f7ff ff05 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff31 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800098c:	20ff      	movs	r0, #255	@ 0xff
 800098e:	f7ff feff 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000992:	2060      	movs	r0, #96	@ 0x60
 8000994:	f7ff ff2b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff28 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800099e:	2004      	movs	r0, #4
 80009a0:	f7ff ff25 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80009a4:	20c3      	movs	r0, #195	@ 0xc3
 80009a6:	f7ff fef3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80009aa:	2013      	movs	r0, #19
 80009ac:	f7ff ff1f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80009b0:	20c4      	movs	r0, #196	@ 0xc4
 80009b2:	f7ff feed 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80009b6:	2013      	movs	r0, #19
 80009b8:	f7ff ff19 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80009bc:	20c9      	movs	r0, #201	@ 0xc9
 80009be:	f7ff fee7 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80009c2:	2022      	movs	r0, #34	@ 0x22
 80009c4:	f7ff ff13 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80009c8:	20be      	movs	r0, #190	@ 0xbe
 80009ca:	f7ff fee1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80009ce:	2011      	movs	r0, #17
 80009d0:	f7ff ff0d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80009d4:	20e1      	movs	r0, #225	@ 0xe1
 80009d6:	f7ff fedb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80009da:	2010      	movs	r0, #16
 80009dc:	f7ff ff07 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80009e0:	200e      	movs	r0, #14
 80009e2:	f7ff ff04 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80009e6:	20df      	movs	r0, #223	@ 0xdf
 80009e8:	f7ff fed2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80009ec:	2021      	movs	r0, #33	@ 0x21
 80009ee:	f7ff fefe 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 80009f2:	200c      	movs	r0, #12
 80009f4:	f7ff fefb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fef8 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 80009fe:	20f0      	movs	r0, #240	@ 0xf0
 8000a00:	f7ff fec6 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a04:	2045      	movs	r0, #69	@ 0x45
 8000a06:	f7ff fef2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a0a:	2009      	movs	r0, #9
 8000a0c:	f7ff feef 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a10:	2008      	movs	r0, #8
 8000a12:	f7ff feec 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a16:	2008      	movs	r0, #8
 8000a18:	f7ff fee9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a1c:	2026      	movs	r0, #38	@ 0x26
 8000a1e:	f7ff fee6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a22:	202a      	movs	r0, #42	@ 0x2a
 8000a24:	f7ff fee3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000a28:	20f1      	movs	r0, #241	@ 0xf1
 8000a2a:	f7ff feb1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a2e:	2043      	movs	r0, #67	@ 0x43
 8000a30:	f7ff fedd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a34:	2070      	movs	r0, #112	@ 0x70
 8000a36:	f7ff feda 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a3a:	2072      	movs	r0, #114	@ 0x72
 8000a3c:	f7ff fed7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a40:	2036      	movs	r0, #54	@ 0x36
 8000a42:	f7ff fed4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a46:	2037      	movs	r0, #55	@ 0x37
 8000a48:	f7ff fed1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000a4c:	206f      	movs	r0, #111	@ 0x6f
 8000a4e:	f7ff fece 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000a52:	20f2      	movs	r0, #242	@ 0xf2
 8000a54:	f7ff fe9c 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a58:	2045      	movs	r0, #69	@ 0x45
 8000a5a:	f7ff fec8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fec5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a64:	2008      	movs	r0, #8
 8000a66:	f7ff fec2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a6a:	2008      	movs	r0, #8
 8000a6c:	f7ff febf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a70:	2026      	movs	r0, #38	@ 0x26
 8000a72:	f7ff febc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a76:	202a      	movs	r0, #42	@ 0x2a
 8000a78:	f7ff feb9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000a7c:	20f3      	movs	r0, #243	@ 0xf3
 8000a7e:	f7ff fe87 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a82:	2043      	movs	r0, #67	@ 0x43
 8000a84:	f7ff feb3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a88:	2070      	movs	r0, #112	@ 0x70
 8000a8a:	f7ff feb0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a8e:	2072      	movs	r0, #114	@ 0x72
 8000a90:	f7ff fead 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a94:	2036      	movs	r0, #54	@ 0x36
 8000a96:	f7ff feaa 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a9a:	2037      	movs	r0, #55	@ 0x37
 8000a9c:	f7ff fea7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000aa0:	206f      	movs	r0, #111	@ 0x6f
 8000aa2:	f7ff fea4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000aa6:	20ed      	movs	r0, #237	@ 0xed
 8000aa8:	f7ff fe72 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000aac:	201b      	movs	r0, #27
 8000aae:	f7ff fe9e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f7ff fe9b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000ab8:	20ae      	movs	r0, #174	@ 0xae
 8000aba:	f7ff fe69 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000abe:	2077      	movs	r0, #119	@ 0x77
 8000ac0:	f7ff fe95 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000ac4:	20cd      	movs	r0, #205	@ 0xcd
 8000ac6:	f7ff fe63 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000aca:	2063      	movs	r0, #99	@ 0x63
 8000acc:	f7ff fe8f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000ad0:	2070      	movs	r0, #112	@ 0x70
 8000ad2:	f7ff fe5d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff fe89 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000adc:	2007      	movs	r0, #7
 8000ade:	f7ff fe86 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	f7ff fe83 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000ae8:	200e      	movs	r0, #14
 8000aea:	f7ff fe80 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff fe7d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000af4:	2009      	movs	r0, #9
 8000af6:	f7ff fe7a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f7ff fe77 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000b00:	2008      	movs	r0, #8
 8000b02:	f7ff fe74 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f7ff fe71 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000b0c:	20e8      	movs	r0, #232	@ 0xe8
 8000b0e:	f7ff fe3f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000b12:	2034      	movs	r0, #52	@ 0x34
 8000b14:	f7ff fe6b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000b18:	2062      	movs	r0, #98	@ 0x62
 8000b1a:	f7ff fe39 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b1e:	2018      	movs	r0, #24
 8000b20:	f7ff fe65 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f7ff fe62 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b2a:	2071      	movs	r0, #113	@ 0x71
 8000b2c:	f7ff fe5f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000b30:	20ed      	movs	r0, #237	@ 0xed
 8000b32:	f7ff fe5c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b36:	2070      	movs	r0, #112	@ 0x70
 8000b38:	f7ff fe59 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b3c:	2070      	movs	r0, #112	@ 0x70
 8000b3e:	f7ff fe56 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b42:	2018      	movs	r0, #24
 8000b44:	f7ff fe53 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000b48:	200f      	movs	r0, #15
 8000b4a:	f7ff fe50 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b4e:	2071      	movs	r0, #113	@ 0x71
 8000b50:	f7ff fe4d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000b54:	20ef      	movs	r0, #239	@ 0xef
 8000b56:	f7ff fe4a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b5a:	2070      	movs	r0, #112	@ 0x70
 8000b5c:	f7ff fe47 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b60:	2070      	movs	r0, #112	@ 0x70
 8000b62:	f7ff fe44 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000b66:	2063      	movs	r0, #99	@ 0x63
 8000b68:	f7ff fe12 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b6c:	2018      	movs	r0, #24
 8000b6e:	f7ff fe3e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000b72:	2011      	movs	r0, #17
 8000b74:	f7ff fe3b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b78:	2071      	movs	r0, #113	@ 0x71
 8000b7a:	f7ff fe38 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000b7e:	20f1      	movs	r0, #241	@ 0xf1
 8000b80:	f7ff fe35 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b84:	2070      	movs	r0, #112	@ 0x70
 8000b86:	f7ff fe32 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b8a:	2070      	movs	r0, #112	@ 0x70
 8000b8c:	f7ff fe2f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b90:	2018      	movs	r0, #24
 8000b92:	f7ff fe2c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000b96:	2013      	movs	r0, #19
 8000b98:	f7ff fe29 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b9c:	2071      	movs	r0, #113	@ 0x71
 8000b9e:	f7ff fe26 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000ba2:	20f3      	movs	r0, #243	@ 0xf3
 8000ba4:	f7ff fe23 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000ba8:	2070      	movs	r0, #112	@ 0x70
 8000baa:	f7ff fe20 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000bae:	2070      	movs	r0, #112	@ 0x70
 8000bb0:	f7ff fe1d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f7ff fdeb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000bba:	2028      	movs	r0, #40	@ 0x28
 8000bbc:	f7ff fe17 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000bc0:	2029      	movs	r0, #41	@ 0x29
 8000bc2:	f7ff fe14 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000bc6:	20f1      	movs	r0, #241	@ 0xf1
 8000bc8:	f7ff fe11 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fe0e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000bd2:	20f1      	movs	r0, #241	@ 0xf1
 8000bd4:	f7ff fe0b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fe08 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f7ff fe05 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000be4:	2066      	movs	r0, #102	@ 0x66
 8000be6:	f7ff fdd3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000bea:	203c      	movs	r0, #60	@ 0x3c
 8000bec:	f7ff fdff 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fdfc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000bf6:	20cd      	movs	r0, #205	@ 0xcd
 8000bf8:	f7ff fdf9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000bfc:	2067      	movs	r0, #103	@ 0x67
 8000bfe:	f7ff fdf6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000c02:	2045      	movs	r0, #69	@ 0x45
 8000c04:	f7ff fdf3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000c08:	2045      	movs	r0, #69	@ 0x45
 8000c0a:	f7ff fdf0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f7ff fded 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fdea 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fde7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fde4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000c26:	2067      	movs	r0, #103	@ 0x67
 8000c28:	f7ff fdb2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdde 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000c32:	203c      	movs	r0, #60	@ 0x3c
 8000c34:	f7ff fddb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fdd8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fdd5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fdd2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdcf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000c50:	2054      	movs	r0, #84	@ 0x54
 8000c52:	f7ff fdcc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff fdc9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000c5c:	2032      	movs	r0, #50	@ 0x32
 8000c5e:	f7ff fdc6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000c62:	2098      	movs	r0, #152	@ 0x98
 8000c64:	f7ff fdc3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000c68:	2074      	movs	r0, #116	@ 0x74
 8000c6a:	f7ff fd91 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f7ff fdbd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000c74:	2085      	movs	r0, #133	@ 0x85
 8000c76:	f7ff fdba 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000c7a:	2080      	movs	r0, #128	@ 0x80
 8000c7c:	f7ff fdb7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fdb4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fdb1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000c8c:	204e      	movs	r0, #78	@ 0x4e
 8000c8e:	f7ff fdae 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fdab 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000c98:	2098      	movs	r0, #152	@ 0x98
 8000c9a:	f7ff fd79 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000c9e:	203e      	movs	r0, #62	@ 0x3e
 8000ca0:	f7ff fda5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f7ff fda2 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000caa:	2035      	movs	r0, #53	@ 0x35
 8000cac:	f7ff fd70 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000cb0:	2021      	movs	r0, #33	@ 0x21
 8000cb2:	f7ff fd6d 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000cb6:	2011      	movs	r0, #17
 8000cb8:	f7ff fd6a 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(120);
 8000cbc:	2078      	movs	r0, #120	@ 0x78
 8000cbe:	f001 f8f1 	bl	8001ea4 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000cc2:	2029      	movs	r0, #41	@ 0x29
 8000cc4:	f7ff fd64 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(20);
 8000cc8:	2014      	movs	r0, #20
 8000cca:	f001 f8eb 	bl	8001ea4 <HAL_Delay>
    
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <GC9A01_spi_tx+0x30>)
 8000cea:	f008 feaf 	bl	8009a4c <HAL_SPI_Transmit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <GC9A01_spi_tx+0x34>)
 8000cf4:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <GC9A01_spi_tx+0x34>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
		return;

}
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24001658 	.word	0x24001658
 8000d08:	24000040 	.word	0x24000040

08000d0c <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, FIL *file, uint32_t DestAddress)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  pFile = file;
 8000d18:	4a16      	ldr	r2, [pc, #88]	@ (8000d74 <JPEG_DecodePolling+0x68>)
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8000d1e:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <JPEG_DecodePolling+0x6c>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]

  /* Read from JPG file and fill the input buffer */
  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) != FR_OK)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <JPEG_DecodePolling+0x68>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <JPEG_DecodePolling+0x74>)
 8000d2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d32:	f00d f8d5 	bl	800dee0 <f_read>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <JPEG_DecodePolling+0x34>
  {
    Error_Handler();
 8000d3c:	f000 fdb8 	bl	80018b0 <Error_Handler>
  }

  /* Update the file Offset*/
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <JPEG_DecodePolling+0x78>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* Start JPEG decoding with polling (Blocking) method */
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT,HAL_MAX_DELAY);
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <JPEG_DecodePolling+0x6c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4603      	mov	r3, r0
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f002 f8e0 	bl	8002f2a <HAL_JPEG_Decode>

  return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000044 	.word	0x24000044
 8000d78:	24001050 	.word	0x24001050
 8000d7c:	24000008 	.word	0x24000008
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	24001048 	.word	0x24001048

08000d88 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  if(NbDecodedData != JPEG_InBuffer.DataBufferSize)
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d010      	beq.n	8000dd6 <HAL_JPEG_GetDataCallback+0x36>
  {
    Inputfile_Offset = Inputfile_Offset - JPEG_InBuffer.DataBufferSize + NbDecodedData;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	1ad2      	subs	r2, r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a17      	ldr	r2, [pc, #92]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000dc4:	6013      	str	r3, [r2, #0]
    f_lseek(pFile,Inputfile_Offset);
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_JPEG_GetDataCallback+0x84>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f00d f9c4 	bl	800e15e <f_lseek>
  }

  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) == FR_OK)
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_JPEG_GetDataCallback+0x84>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_JPEG_GetDataCallback+0x88>)
 8000de0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000de4:	f00d f87c 	bl	800dee0 <f_read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10f      	bne.n	8000e0e <HAL_JPEG_GetDataCallback+0x6e>
  {
    Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000dfa:	6013      	str	r3, [r2, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000e02:	6852      	ldr	r2, [r2, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f002 f96f 	bl	80030ea <HAL_JPEG_ConfigInputBuffer>
  }
  else
  {
    Error_Handler();
  }
}
 8000e0c:	e001      	b.n	8000e12 <HAL_JPEG_GetDataCallback+0x72>
    Error_Handler();
 8000e0e:	f000 fd4f 	bl	80018b0 <Error_Handler>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000008 	.word	0x24000008
 8000e20:	24001048 	.word	0x24001048
 8000e24:	24000044 	.word	0x24000044
 8000e28:	2400000c 	.word	0x2400000c

08000e2c <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/
  FrameBufferAddress += OutDataLength;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_JPEG_DataReadyCallback+0x30>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_JPEG_DataReadyCallback+0x30>)
 8000e42:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT);
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_JPEG_DataReadyCallback+0x30>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f002 f95d 	bl	800310e <HAL_JPEG_ConfigOutputBuffer>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24001050 	.word	0x24001050

08000e60 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  Jpeg_Decoding_End = 1;
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2400104c 	.word	0x2400104c

08000e80 <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8000e84:	f000 f90c 	bl	80010a0 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 8000e88:	f00d fc1a 	bl	800e6c0 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8000e8c:	f7ff fcdd 	bl	800084a <GC9A01_init>

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <lcd_process>:


void lcd_process(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();

	// Start the demonstrative execution of the JPEG decoding
	jpeg_demo();
 8000e98:	f000 f842 	bl	8000f20 <jpeg_demo>

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e022      	b.n	8000f0a <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	e016      	b.n	8000ef8 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d108      	bne.n	8000ee4 <lcd_draw+0x44>
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d104      	bne.n	8000ee4 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8000eda:	2102      	movs	r1, #2
 8000edc:	6a38      	ldr	r0, [r7, #32]
 8000ede:	f7ff fc94 	bl	800080a <GC9A01_write>
 8000ee2:	e003      	b.n	8000eec <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	6a38      	ldr	r0, [r7, #32]
 8000ee8:	f7ff fc9f 	bl	800082a <GC9A01_write_continue>

			}

			data += 2;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	3302      	adds	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	883a      	ldrh	r2, [r7, #0]
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbe2      	blt.n	8000eca <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4413      	add	r3, r2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbd6      	blt.n	8000ec4 <lcd_draw+0x24>

		}

	}

}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}

08000f20 <jpeg_demo>:


void jpeg_demo(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	f5ad 2da8 	sub.w	sp, sp, #344064	@ 0x54000
 8000f26:	f2ad 6d34 	subw	sp, sp, #1588	@ 0x634
 8000f2a:	af04      	add	r7, sp, #16
    uint8_t JPEG_OutputBuffer[MAX_BUFFER_SIZE]; 					// RAW buffer
    uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer


    // File opening in reading
    if(f_open(&file, fName, FA_READ) != FR_OK)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	494d      	ldr	r1, [pc, #308]	@ (8001064 <jpeg_demo+0x144>)
 8000f30:	484d      	ldr	r0, [pc, #308]	@ (8001068 <jpeg_demo+0x148>)
 8000f32:	f00c fe1b 	bl	800db6c <f_open>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <jpeg_demo+0x20>
    	while(1);
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <jpeg_demo+0x1c>

    // JPEG decoding in polling mode
    JPEG_DecodePolling(&hjpeg, &file, (uint32_t)JPEG_OutputBuffer);
 8000f40:	4b4a      	ldr	r3, [pc, #296]	@ (800106c <jpeg_demo+0x14c>)
 8000f42:	f503 23a8 	add.w	r3, r3, #344064	@ 0x54000
 8000f46:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8000f4a:	443b      	add	r3, r7
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4946      	ldr	r1, [pc, #280]	@ (8001068 <jpeg_demo+0x148>)
 8000f50:	4847      	ldr	r0, [pc, #284]	@ (8001070 <jpeg_demo+0x150>)
 8000f52:	f7ff fedb 	bl	8000d0c <JPEG_DecodePolling>

    // Wait until the end of the conversion
    while(!Jpeg_Decoding_End);
 8000f56:	bf00      	nop
 8000f58:	4b46      	ldr	r3, [pc, #280]	@ (8001074 <jpeg_demo+0x154>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0fb      	beq.n	8000f58 <jpeg_demo+0x38>

    // Get info from the JPEG file
    HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8000f60:	4b45      	ldr	r3, [pc, #276]	@ (8001078 <jpeg_demo+0x158>)
 8000f62:	443b      	add	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4842      	ldr	r0, [pc, #264]	@ (8001070 <jpeg_demo+0x150>)
 8000f68:	f001 ff4a 	bl	8002e00 <HAL_JPEG_GetInfo>

    uint16_t width = JPEG_Info.ImageWidth;
 8000f6c:	4b43      	ldr	r3, [pc, #268]	@ (800107c <jpeg_demo+0x15c>)
 8000f6e:	443b      	add	r3, r7
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a43      	ldr	r2, [pc, #268]	@ (8001080 <jpeg_demo+0x160>)
 8000f74:	443a      	add	r2, r7
 8000f76:	8013      	strh	r3, [r2, #0]
	uint16_t height = JPEG_Info.ImageHeight;
 8000f78:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <jpeg_demo+0x164>)
 8000f7a:	443b      	add	r3, r7
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a42      	ldr	r2, [pc, #264]	@ (8001088 <jpeg_demo+0x168>)
 8000f80:	443a      	add	r2, r7
 8000f82:	8013      	strh	r3, [r2, #0]

    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 8000f84:	4b3e      	ldr	r3, [pc, #248]	@ (8001080 <jpeg_demo+0x160>)
 8000f86:	443b      	add	r3, r7
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da00      	bge.n	8000f94 <jpeg_demo+0x74>
 8000f92:	3301      	adds	r3, #1
 8000f94:	105b      	asrs	r3, r3, #1
 8000f96:	4a3d      	ldr	r2, [pc, #244]	@ (800108c <jpeg_demo+0x16c>)
 8000f98:	443a      	add	r2, r7
 8000f9a:	8013      	strh	r3, [r2, #0]
    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <jpeg_demo+0x168>)
 8000f9e:	443b      	add	r3, r7
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da00      	bge.n	8000fac <jpeg_demo+0x8c>
 8000faa:	3301      	adds	r3, #1
 8000fac:	105b      	asrs	r3, r3, #1
 8000fae:	4a38      	ldr	r2, [pc, #224]	@ (8001090 <jpeg_demo+0x170>)
 8000fb0:	443a      	add	r2, r7
 8000fb2:	8013      	strh	r3, [r2, #0]

    // Convert the YCbCr format into the RGBB565 format
    DMA2D_CopyBuffer((uint32_t *)JPEG_OutputBuffer, (uint32_t *)DECODED_OutputBuffer, 0, 0, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8000fb4:	4b31      	ldr	r3, [pc, #196]	@ (800107c <jpeg_demo+0x15c>)
 8000fb6:	443b      	add	r3, r7
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4a31      	ldr	r2, [pc, #196]	@ (8001084 <jpeg_demo+0x164>)
 8000fbe:	443a      	add	r2, r7
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	4933      	ldr	r1, [pc, #204]	@ (8001094 <jpeg_demo+0x174>)
 8000fc6:	4439      	add	r1, r7
 8000fc8:	680c      	ldr	r4, [r1, #0]
 8000fca:	4933      	ldr	r1, [pc, #204]	@ (8001098 <jpeg_demo+0x178>)
 8000fcc:	f501 21a8 	add.w	r1, r1, #344064	@ 0x54000
 8000fd0:	f501 61c4 	add.w	r1, r1, #1568	@ 0x620
 8000fd4:	4439      	add	r1, r7
 8000fd6:	4825      	ldr	r0, [pc, #148]	@ (800106c <jpeg_demo+0x14c>)
 8000fd8:	f500 20a8 	add.w	r0, r0, #344064	@ 0x54000
 8000fdc:	f500 60c4 	add.w	r0, r0, #1568	@ 0x620
 8000fe0:	4438      	add	r0, r7
 8000fe2:	9402      	str	r4, [sp, #8]
 8000fe4:	9201      	str	r2, [sp, #4]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2200      	movs	r2, #0
 8000fec:	f000 f8dc 	bl	80011a8 <DMA2D_CopyBuffer>

    doubleFormat pOut;
    pOut.u8Arr = DECODED_OutputBuffer;
 8000ff0:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000ff4:	f5a3 62c4 	sub.w	r2, r3, #1568	@ 0x620
 8000ff8:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <jpeg_demo+0x178>)
 8000ffa:	f503 23a8 	add.w	r3, r3, #344064	@ 0x54000
 8000ffe:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8001002:	443b      	add	r3, r7
 8001004:	6013      	str	r3, [r2, #0]

    depth24To16(&pOut, width*height, 3);
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <jpeg_demo+0x160>)
 8001008:	443b      	add	r3, r7
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <jpeg_demo+0x168>)
 800100e:	443b      	add	r3, r7
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	fb12 f303 	smulbb	r3, r2, r3
 8001016:	b299      	uxth	r1, r3
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <jpeg_demo+0x17c>)
 800101a:	f503 23a8 	add.w	r3, r3, #344064	@ 0x54000
 800101e:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8001022:	443b      	add	r3, r7
 8001024:	2203      	movs	r2, #3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f850 	bl	80010cc <depth24To16>

    // Display the image
    lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 800102c:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8001030:	f5a3 63c4 	sub.w	r3, r3, #1568	@ 0x620
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <jpeg_demo+0x168>)
 8001038:	443a      	add	r2, r7
 800103a:	8814      	ldrh	r4, [r2, #0]
 800103c:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <jpeg_demo+0x160>)
 800103e:	443a      	add	r2, r7
 8001040:	8812      	ldrh	r2, [r2, #0]
 8001042:	4913      	ldr	r1, [pc, #76]	@ (8001090 <jpeg_demo+0x170>)
 8001044:	4439      	add	r1, r7
 8001046:	8809      	ldrh	r1, [r1, #0]
 8001048:	4810      	ldr	r0, [pc, #64]	@ (800108c <jpeg_demo+0x16c>)
 800104a:	4438      	add	r0, r7
 800104c:	8800      	ldrh	r0, [r0, #0]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f7ff ff25 	bl	8000ea0 <lcd_draw>

}
 8001056:	bf00      	nop
 8001058:	f507 27a8 	add.w	r7, r7, #344064	@ 0x54000
 800105c:	f207 6724 	addw	r7, r7, #1572	@ 0x624
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	24000010 	.word	0x24000010
 8001068:	24001284 	.word	0x24001284
 800106c:	fffd5ce4 	.word	0xfffd5ce4
 8001070:	24001584 	.word	0x24001584
 8001074:	2400104c 	.word	0x2400104c
 8001078:	00054604 	.word	0x00054604
 800107c:	00054610 	.word	0x00054610
 8001080:	0005461e 	.word	0x0005461e
 8001084:	0005460c 	.word	0x0005460c
 8001088:	0005461c 	.word	0x0005461c
 800108c:	0005461a 	.word	0x0005461a
 8001090:	00054618 	.word	0x00054618
 8001094:	00054608 	.word	0x00054608
 8001098:	fffab9e4 	.word	0xfffab9e4
 800109c:	fffab9e0 	.word	0xfffab9e0

080010a0 <sd_init>:


// SD

static void sd_init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 80010a4:	2201      	movs	r2, #1
 80010a6:	4905      	ldr	r1, [pc, #20]	@ (80010bc <sd_init+0x1c>)
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <sd_init+0x20>)
 80010aa:	f00c fd19 	bl	800dae0 <f_mount>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <sd_init+0x18>
    	sd_error_handler();
 80010b4:	f000 f806 	bl	80010c4 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800ea64 	.word	0x0800ea64
 80010c0:	24001054 	.word	0x24001054

080010c4 <sd_error_handler>:


static void sd_error_handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

	while(1);
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <sd_error_handler+0x4>

080010cc <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	e054      	b.n	800118c <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	787a      	ldrb	r2, [r7, #1]
 80010e8:	68f9      	ldr	r1, [r7, #12]
 80010ea:	fb01 f202 	mul.w	r2, r1, r2
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	fb01 f303 	mul.w	r3, r1, r3
 8001100:	3301      	adds	r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	3302      	adds	r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800111c:	7a7b      	ldrb	r3, [r7, #9]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <depth24To16+0xd8>)
 8001124:	4013      	ands	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	b21b      	sxth	r3, r3
 800112e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b219      	sxth	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	b28a      	uxth	r2, r1
 8001150:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	440b      	add	r3, r1
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b219      	sxth	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	b28a      	uxth	r2, r1
 8001184:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	dba6      	blt.n	80010e2 <depth24To16+0x16>

	}

}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	fffff800 	.word	0xfffff800

080011a8 <DMA2D_CopyBuffer>:
  * @param  ysize: image Height
  * @retval None
  */
static DMA2D_HandleTypeDef    DMA2D_Handle;
static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  uint32_t destination = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 80011ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d10d      	bne.n	80011ec <DMA2D_CopyBuffer+0x44>
  {
    cssMode = DMA2D_CSS_420;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]

    inputLineOffset = xsize % 16;
 80011d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	61bb      	str	r3, [r7, #24]
    if(inputLineOffset != 0)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d025      	beq.n	800122e <DMA2D_CopyBuffer+0x86>
    {
      inputLineOffset = 16 - inputLineOffset;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f1c3 0310 	rsb	r3, r3, #16
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	e020      	b.n	800122e <DMA2D_CopyBuffer+0x86>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 80011ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10d      	bne.n	800120e <DMA2D_CopyBuffer+0x66>
  {
    cssMode = DMA2D_NO_CSS;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]

    inputLineOffset = xsize % 8;
 80011f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	61bb      	str	r3, [r7, #24]
    if(inputLineOffset != 0)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d014      	beq.n	800122e <DMA2D_CopyBuffer+0x86>
    {
      inputLineOffset = 8 - inputLineOffset;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f1c3 0308 	rsb	r3, r3, #8
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	e00f      	b.n	800122e <DMA2D_CopyBuffer+0x86>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800120e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001210:	2b02      	cmp	r3, #2
 8001212:	d10c      	bne.n	800122e <DMA2D_CopyBuffer+0x86>
  {
    cssMode = DMA2D_CSS_422;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]

    inputLineOffset = xsize % 16;
 8001218:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	61bb      	str	r3, [r7, #24]
    if(inputLineOffset != 0)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <DMA2D_CopyBuffer+0x86>
    {
      inputLineOffset = 16 - inputLineOffset;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f1c3 0310 	rsb	r3, r3, #16
 800122c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800122e:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001230:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001234:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 8001236:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001238:	2201      	movs	r2, #1
 800123a:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 800123c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800123e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001242:	461a      	mov	r2, r3
 8001244:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001246:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 800125c:	2200      	movs	r2, #0
 800125e:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001262:	22ff      	movs	r2, #255	@ 0xff
 8001264:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001268:	220b      	movs	r2, #11
 800126a:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001272:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 800127a:	2200      	movs	r2, #0
 800127c:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001280:	2200      	movs	r2, #0
 8001282:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <DMA2D_CopyBuffer+0x130>)
 8001288:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 800128c:	f000 ff4a 	bl	8002124 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001290:	2101      	movs	r1, #1
 8001292:	4810      	ldr	r0, [pc, #64]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 8001294:	f001 f9ce 	bl	8002634 <HAL_DMA2D_ConfigLayer>

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 8001298:	88ba      	ldrh	r2, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	461a      	mov	r2, r3
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	461a      	mov	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4413      	add	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80012b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4613      	mov	r3, r2
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 80012c0:	f000 ff94 	bl	80021ec <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80012c4:	2119      	movs	r1, #25
 80012c6:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <DMA2D_CopyBuffer+0x12c>)
 80012c8:	f000 ffbb 	bl	8002242 <HAL_DMA2D_PollForTransfer>
}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	240014b4 	.word	0x240014b4
 80012d8:	52001000 	.word	0x52001000

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80012e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80012e8:	bf00      	nop
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <main+0xb8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <main+0x24>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dcf4      	bgt.n	80012ea <main+0xe>
  if ( timeout < 0 )
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	da01      	bge.n	800130a <main+0x2e>
  {
  Error_Handler();
 8001306:	f000 fad3 	bl	80018b0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f000 fd39 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f843 	bl	8001398 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001312:	f000 f8c5 	bl	80014a0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <main+0xb8>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <main+0xb8>)
 800131e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001326:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <main+0xb8>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001334:	2000      	movs	r0, #0
 8001336:	f001 fcb3 	bl	8002ca0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f001 fcc9 	bl	8002cd4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001346:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001348:	bf00      	nop
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <main+0xb8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d104      	bne.n	8001360 <main+0x84>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	dcf4      	bgt.n	800134a <main+0x6e>
if ( timeout < 0 )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <main+0x8e>
{
Error_Handler();
 8001366:	f000 faa3 	bl	80018b0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 f9db 	bl	8001724 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800136e:	f000 f8c7 	bl	8001500 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8001372:	f000 f913 	bl	800159c <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 8001376:	f000 f935 	bl	80015e4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800137a:	f000 f987 	bl	800168c <MX_USART1_UART_Init>
  MX_JPEG_Init();
 800137e:	f000 f8f9 	bl	8001574 <MX_JPEG_Init>
  MX_FATFS_Init();
 8001382:	f00a fce1 	bl	800bd48 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001386:	f00a ff2f 	bl	800c1e8 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800138a:	f7ff fd79 	bl	8000e80 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 800138e:	f7ff fd81 	bl	8000e94 <lcd_process>
 8001392:	e7fc      	b.n	800138e <main+0xb2>
 8001394:	58024400 	.word	0x58024400

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09c      	sub	sp, #112	@ 0x70
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	224c      	movs	r2, #76	@ 0x4c
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00d fb24 	bl	800e9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2220      	movs	r2, #32
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00d fb1e 	bl	800e9f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013b8:	2004      	movs	r0, #4
 80013ba:	f002 ffd7 	bl	800436c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b35      	ldr	r3, [pc, #212]	@ (8001498 <SystemClock_Config+0x100>)
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	4a34      	ldr	r2, [pc, #208]	@ (8001498 <SystemClock_Config+0x100>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <SystemClock_Config+0x100>)
 80013d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	4b30      	ldr	r3, [pc, #192]	@ (800149c <SystemClock_Config+0x104>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a2f      	ldr	r2, [pc, #188]	@ (800149c <SystemClock_Config+0x104>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <SystemClock_Config+0x104>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013f0:	bf00      	nop
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <SystemClock_Config+0x104>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013fe:	d1f8      	bne.n	80013f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001400:	230a      	movs	r3, #10
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001404:	2301      	movs	r3, #1
 8001406:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001408:	2340      	movs	r3, #64	@ 0x40
 800140a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001414:	2300      	movs	r3, #0
 8001416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001418:	2304      	movs	r3, #4
 800141a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800141c:	230c      	movs	r3, #12
 800141e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800142c:	230c      	movs	r3, #12
 800142e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001430:	2300      	movs	r3, #0
 8001432:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001438:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	4618      	mov	r0, r3
 8001440:	f002 ffee 	bl	8004420 <HAL_RCC_OscConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800144a:	f000 fa31 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144e:	233f      	movs	r3, #63	@ 0x3f
 8001450:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	2303      	movs	r3, #3
 8001454:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800145e:	2340      	movs	r3, #64	@ 0x40
 8001460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001462:	2340      	movs	r3, #64	@ 0x40
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800146c:	2340      	movs	r3, #64	@ 0x40
 800146e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f003 fc2d 	bl	8004cd4 <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001480:	f000 fa16 	bl	80018b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001484:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001488:	2100      	movs	r1, #0
 800148a:	2000      	movs	r0, #0
 800148c:	f003 fdd8 	bl	8005040 <HAL_RCC_MCOConfig>
}
 8001490:	bf00      	nop
 8001492:	3770      	adds	r7, #112	@ 0x70
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58000400 	.word	0x58000400
 800149c:	58024800 	.word	0x58024800

080014a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0b2      	sub	sp, #200	@ 0xc8
 80014a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	22c8      	movs	r2, #200	@ 0xc8
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00d faa1 	bl	800e9f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014be:	2304      	movs	r3, #4
 80014c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80014c2:	2309      	movs	r3, #9
 80014c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014d2:	23c0      	movs	r3, #192	@ 0xc0
 80014d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80014d6:	2320      	movs	r3, #32
 80014d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80014da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 ffe9 	bl	80054c0 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80014f4:	f000 f9dc 	bl	80018b0 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	37c8      	adds	r7, #200	@ 0xc8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <MX_DMA2D_Init+0x70>)
 8001508:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_DMA2D_Init+0x6c>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001512:	2202      	movs	r2, #2
 8001514:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_DMA2D_Init+0x6c>)
 800151e:	2200      	movs	r2, #0
 8001520:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001524:	2202      	movs	r2, #2
 8001526:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_DMA2D_Init+0x6c>)
 800152a:	2200      	movs	r2, #0
 800152c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001530:	2200      	movs	r2, #0
 8001532:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001536:	2200      	movs	r2, #0
 8001538:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_DMA2D_Init+0x6c>)
 800153c:	2200      	movs	r2, #0
 800153e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001542:	2200      	movs	r2, #0
 8001544:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001546:	4809      	ldr	r0, [pc, #36]	@ (800156c <MX_DMA2D_Init+0x6c>)
 8001548:	f000 fdec 	bl	8002124 <HAL_DMA2D_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001552:	f000 f9ad 	bl	80018b0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001556:	2101      	movs	r1, #1
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_DMA2D_Init+0x6c>)
 800155a:	f001 f86b 	bl	8002634 <HAL_DMA2D_ConfigLayer>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001564:	f000 f9a4 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400151c 	.word	0x2400151c
 8001570:	52001000 	.word	0x52001000

08001574 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <MX_JPEG_Init+0x20>)
 800157a:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <MX_JPEG_Init+0x24>)
 800157c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_JPEG_Init+0x20>)
 8001580:	f001 fbbc 	bl	8002cfc <HAL_JPEG_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 800158a:	f000 f991 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	24001584 	.word	0x24001584
 8001598:	52003000 	.word	0x52003000

0800159c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015a2:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <MX_SDMMC1_SD_Init+0x44>)
 80015a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015b8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_SDMMC1_SD_Init+0x40>)
 80015c8:	f006 fcb8 	bl	8007f3c <HAL_SD_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80015d2:	f000 f96d 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	240015dc 	.word	0x240015dc
 80015e0:	52007000 	.word	0x52007000

080015e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80015e8:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <MX_SPI5_Init+0xa0>)
 80015ea:	4a27      	ldr	r2, [pc, #156]	@ (8001688 <MX_SPI5_Init+0xa4>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <MX_SPI5_Init+0xa0>)
 80015f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_SPI5_Init+0xa0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <MX_SPI5_Init+0xa0>)
 80015fe:	2207      	movs	r2, #7
 8001600:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001610:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001614:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001616:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001640:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001642:	2200      	movs	r2, #0
 8001644:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001666:	2200      	movs	r2, #0
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_SPI5_Init+0xa0>)
 800166c:	2200      	movs	r2, #0
 800166e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_SPI5_Init+0xa0>)
 8001672:	f008 f8c7 	bl	8009804 <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800167c:	f000 f918 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	24001658 	.word	0x24001658
 8001688:	40015000 	.word	0x40015000

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b22      	ldr	r3, [pc, #136]	@ (800171c <MX_USART1_UART_Init+0x90>)
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <MX_USART1_UART_Init+0x94>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <MX_USART1_UART_Init+0x90>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d4:	4811      	ldr	r0, [pc, #68]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016d6:	f008 fc90 	bl	8009ffa <HAL_UART_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016e0:	f000 f8e6 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	480d      	ldr	r0, [pc, #52]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016e8:	f009 fc99 	bl	800b01e <HAL_UARTEx_SetTxFifoThreshold>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016f2:	f000 f8dd 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4808      	ldr	r0, [pc, #32]	@ (800171c <MX_USART1_UART_Init+0x90>)
 80016fa:	f009 fcce 	bl	800b09a <HAL_UARTEx_SetRxFifoThreshold>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 f8d4 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <MX_USART1_UART_Init+0x90>)
 800170a:	f009 fc4f 	bl	800afac <HAL_UARTEx_DisableFifoMode>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001714:	f000 f8cc 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	240016e0 	.word	0x240016e0
 8001720:	40011000 	.word	0x40011000

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	@ 0x30
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b58      	ldr	r3, [pc, #352]	@ (800189c <MX_GPIO_Init+0x178>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001740:	4a56      	ldr	r2, [pc, #344]	@ (800189c <MX_GPIO_Init+0x178>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800174a:	4b54      	ldr	r3, [pc, #336]	@ (800189c <MX_GPIO_Init+0x178>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001758:	4b50      	ldr	r3, [pc, #320]	@ (800189c <MX_GPIO_Init+0x178>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175e:	4a4f      	ldr	r2, [pc, #316]	@ (800189c <MX_GPIO_Init+0x178>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001768:	4b4c      	ldr	r3, [pc, #304]	@ (800189c <MX_GPIO_Init+0x178>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b49      	ldr	r3, [pc, #292]	@ (800189c <MX_GPIO_Init+0x178>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177c:	4a47      	ldr	r2, [pc, #284]	@ (800189c <MX_GPIO_Init+0x178>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001786:	4b45      	ldr	r3, [pc, #276]	@ (800189c <MX_GPIO_Init+0x178>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001794:	4b41      	ldr	r3, [pc, #260]	@ (800189c <MX_GPIO_Init+0x178>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179a:	4a40      	ldr	r2, [pc, #256]	@ (800189c <MX_GPIO_Init+0x178>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a4:	4b3d      	ldr	r3, [pc, #244]	@ (800189c <MX_GPIO_Init+0x178>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <MX_GPIO_Init+0x178>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b8:	4a38      	ldr	r2, [pc, #224]	@ (800189c <MX_GPIO_Init+0x178>)
 80017ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c2:	4b36      	ldr	r3, [pc, #216]	@ (800189c <MX_GPIO_Init+0x178>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <MX_GPIO_Init+0x178>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d6:	4a31      	ldr	r2, [pc, #196]	@ (800189c <MX_GPIO_Init+0x178>)
 80017d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e0:	4b2e      	ldr	r3, [pc, #184]	@ (800189c <MX_GPIO_Init+0x178>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <MX_GPIO_Init+0x178>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f4:	4a29      	ldr	r2, [pc, #164]	@ (800189c <MX_GPIO_Init+0x178>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <MX_GPIO_Init+0x178>)
 8001800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2102      	movs	r1, #2
 8001810:	4823      	ldr	r0, [pc, #140]	@ (80018a0 <MX_GPIO_Init+0x17c>)
 8001812:	f001 fa2b 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2161      	movs	r1, #97	@ 0x61
 800181a:	4822      	ldr	r0, [pc, #136]	@ (80018a4 <MX_GPIO_Init+0x180>)
 800181c:	f001 fa26 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	481c      	ldr	r0, [pc, #112]	@ (80018a8 <MX_GPIO_Init+0x184>)
 8001836:	f001 f851 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800183a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4815      	ldr	r0, [pc, #84]	@ (80018ac <MX_GPIO_Init+0x188>)
 8001858:	f001 f840 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800185c:	2302      	movs	r3, #2
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <MX_GPIO_Init+0x17c>)
 8001874:	f001 f832 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001878:	2361      	movs	r3, #97	@ 0x61
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_GPIO_Init+0x180>)
 8001890:	f001 f824 	bl	80028dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001894:	bf00      	nop
 8001896:	3730      	adds	r7, #48	@ 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	58024400 	.word	0x58024400
 80018a0:	58022800 	.word	0x58022800
 80018a4:	58022400 	.word	0x58022400
 80018a8:	58022000 	.word	0x58022000
 80018ac:	58020000 	.word	0x58020000

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <Error_Handler+0x8>

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_MspInit+0x30>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c8:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_MspInit+0x30>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_MspInit+0x30>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	58024400 	.word	0x58024400

080018f0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <HAL_DMA2D_MspInit+0x48>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d116      	bne.n	8001930 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_DMA2D_MspInit+0x4c>)
 8001904:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001908:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <HAL_DMA2D_MspInit+0x4c>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_DMA2D_MspInit+0x4c>)
 8001914:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	205a      	movs	r0, #90	@ 0x5a
 8001926:	f000 fbc8 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800192a:	205a      	movs	r0, #90	@ 0x5a
 800192c:	f000 fbdf 	bl	80020ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	52001000 	.word	0x52001000
 800193c:	58024400 	.word	0x58024400

08001940 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <HAL_JPEG_MspInit+0x3c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10e      	bne.n	8001970 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_JPEG_MspInit+0x40>)
 8001954:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001958:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <HAL_JPEG_MspInit+0x40>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <HAL_JPEG_MspInit+0x40>)
 8001964:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	52003000 	.word	0x52003000
 8001980:	58024400 	.word	0x58024400

08001984 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0be      	sub	sp, #248	@ 0xf8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f107 0318 	add.w	r3, r7, #24
 80019a0:	22c8      	movs	r2, #200	@ 0xc8
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00d f825 	bl	800e9f4 <memset>
  if(hsd->Instance==SDMMC1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa0 <HAL_SD_MspInit+0x11c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d171      	bne.n	8001a98 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80019b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fd79 	bl	80054c0 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80019d4:	f7ff ff6c 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 80019da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019de:	4a31      	ldr	r2, [pc, #196]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 80019ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fc:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1a:	4a22      	ldr	r2, [pc, #136]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_SD_MspInit+0x120>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001a32:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4813      	ldr	r0, [pc, #76]	@ (8001aa8 <HAL_SD_MspInit+0x124>)
 8001a5a:	f000 ff3f 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a76:	230c      	movs	r3, #12
 8001a78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a80:	4619      	mov	r1, r3
 8001a82:	480a      	ldr	r0, [pc, #40]	@ (8001aac <HAL_SD_MspInit+0x128>)
 8001a84:	f000 ff2a 	bl	80028dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2031      	movs	r0, #49	@ 0x31
 8001a8e:	f000 fb14 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a92:	2031      	movs	r0, #49	@ 0x31
 8001a94:	f000 fb2b 	bl	80020ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001a98:	bf00      	nop
 8001a9a:	37f8      	adds	r7, #248	@ 0xf8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	52007000 	.word	0x52007000
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	58020800 	.word	0x58020800
 8001aac:	58020c00 	.word	0x58020c00

08001ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0be      	sub	sp, #248	@ 0xf8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	22c8      	movs	r2, #200	@ 0xc8
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00c ff8f 	bl	800e9f4 <memset>
  if(hspi->Instance==SPI5)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a39      	ldr	r2, [pc, #228]	@ (8001bc0 <HAL_SPI_MspInit+0x110>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d16a      	bne.n	8001bb6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fce2 	bl	80054c0 <HAL_RCCEx_PeriphCLKConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001b02:	f7ff fed5 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b06:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b16:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b24:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2a:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b34:	4b23      	ldr	r3, [pc, #140]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b42:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b48:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b52:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <HAL_SPI_MspInit+0x114>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b78:	2305      	movs	r3, #5
 8001b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4810      	ldr	r0, [pc, #64]	@ (8001bc8 <HAL_SPI_MspInit+0x118>)
 8001b86:	f000 fea9 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001b8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001baa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <HAL_SPI_MspInit+0x11c>)
 8001bb2:	f000 fe93 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001bb6:	bf00      	nop
 8001bb8:	37f8      	adds	r7, #248	@ 0xf8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40015000 	.word	0x40015000
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	58022800 	.word	0x58022800
 8001bcc:	58022400 	.word	0x58022400

08001bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0bc      	sub	sp, #240	@ 0xf0
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	22c8      	movs	r2, #200	@ 0xc8
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00c feff 	bl	800e9f4 <memset>
  if(huart->Instance==USART1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a27      	ldr	r2, [pc, #156]	@ (8001c98 <HAL_UART_MspInit+0xc8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d146      	bne.n	8001c8e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c00:	f04f 0201 	mov.w	r2, #1
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fc52 	bl	80054c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c22:	f7ff fe45 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4a:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_UART_MspInit+0xcc>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001c62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c8a:	f000 fe27 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c8e:	bf00      	nop
 8001c90:	37f0      	adds	r7, #240	@ 0xf0
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020000 	.word	0x58020000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <NMI_Handler+0x4>

08001cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfa:	f000 f8b3 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <SDMMC1_IRQHandler+0x10>)
 8001d0a:	f006 fb87 	bl	800841c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	240015dc 	.word	0x240015dc

08001d18 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <DMA2D_IRQHandler+0x10>)
 8001d1e:	f000 fb79 	bl	8002414 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2400151c 	.word	0x2400151c

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d30:	f7fe fc4a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	@ (8001d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f00c fe53 	bl	800ea04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff fabd 	bl	80012dc <main>
  bx  lr
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d6c:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001d70:	0800ede8 	.word	0x0800ede8
  ldr r2, =_sbss
 8001d74:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001d78:	240057bc 	.word	0x240057bc

08001d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC3_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f000 f98c 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d8c:	f003 f9c2 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_Init+0x68>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	4913      	ldr	r1, [pc, #76]	@ (8001dec <HAL_Init+0x6c>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_Init+0x68>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <HAL_Init+0x6c>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <HAL_Init+0x70>)
 8001dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <HAL_Init+0x74>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 f814 	bl	8001df8 <HAL_InitTick>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e002      	b.n	8001de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dda:	f7ff fd6f 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	58024400 	.word	0x58024400
 8001dec:	0800eaac 	.word	0x0800eaac
 8001df0:	24000004 	.word	0x24000004
 8001df4:	24000000 	.word	0x24000000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_InitTick+0x60>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e021      	b.n	8001e50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_InitTick+0x64>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_InitTick+0x60>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f971 	bl	800210a <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f93b 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	@ (8001e60 <HAL_InitTick+0x68>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	24000020 	.word	0x24000020
 8001e5c:	24000000 	.word	0x24000000
 8001e60:	2400001c 	.word	0x2400001c

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	24000020 	.word	0x24000020
 8001e88:	24001774 	.word	0x24001774

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	24001774 	.word	0x24001774

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	24000020 	.word	0x24000020

08001eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <HAL_GetREVID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	5c001000 	.word	0x5c001000

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0000 	.word	0x05fa0000

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	@ (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff40 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff33 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa4 	bl	8002060 <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e04f      	b.n	80021d6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fbd0 	bl	80018f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_DMA2D_Init+0xbc>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6851      	ldr	r1, [r2, #4]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	69d2      	ldr	r2, [r2, #28]
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800217a:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_DMA2D_Init+0xc0>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6891      	ldr	r1, [r2, #8]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6992      	ldr	r2, [r2, #24]
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	430b      	orrs	r3, r1
 800218e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002196:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_DMA2D_Init+0xc4>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68d1      	ldr	r1, [r2, #12]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	051a      	lsls	r2, r3, #20
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	fff8ffbf 	.word	0xfff8ffbf
 80021e4:	fffffef8 	.word	0xfffffef8
 80021e8:	ffff0000 	.word	0xffff0000

080021ec <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_DMA2D_Start+0x1c>
 8002204:	2302      	movs	r3, #2
 8002206:	e018      	b.n	800223a <HAL_DMA2D_Start+0x4e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fab4 	bl	8002790 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d056      	beq.n	800230c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800225e:	f7ff fe15 	bl	8001e8c <HAL_GetTick>
 8002262:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002264:	e04b      	b.n	80022fe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002274:	2b00      	cmp	r3, #0
 8002276:	d023      	beq.n	80022c0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2221      	movs	r2, #33	@ 0x21
 80022aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2204      	movs	r2, #4
 80022b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0a5      	b.n	800240c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d01a      	beq.n	80022fe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7ff fde0 	bl	8001e8c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <HAL_DMA2D_PollForTransfer+0x9c>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e086      	b.n	800240c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ac      	beq.n	8002266 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d061      	beq.n	80023f2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800232e:	f7ff fdad 	bl	8001e8c <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002334:	e056      	b.n	80023e4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02e      	beq.n	80023a6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002356:	f043 0204 	orr.w	r2, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800236c:	f043 0202 	orr.w	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2229      	movs	r2, #41	@ 0x29
 8002390:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2204      	movs	r2, #4
 8002396:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e032      	b.n	800240c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d01a      	beq.n	80023e4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7ff fd6d 	bl	8001e8c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <HAL_DMA2D_PollForTransfer+0x182>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e013      	b.n	800240c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0a1      	beq.n	8002336 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2212      	movs	r2, #18
 80023f8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d026      	beq.n	8002484 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800244e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d026      	beq.n	80024dc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d021      	beq.n	80024dc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2220      	movs	r2, #32
 80024ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024b4:	f043 0202 	orr.w	r2, r3, #2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2204      	movs	r2, #4
 80024c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d026      	beq.n	8002534 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d021      	beq.n	8002534 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800250c:	f043 0204 	orr.w	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00e      	beq.n	8002566 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002556:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2204      	movs	r2, #4
 800255e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f853 	bl	800260c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d024      	beq.n	80025ba <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01f      	beq.n	80025ba <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002588:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2202      	movs	r2, #2
 8002590:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01f      	beq.n	8002604 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f80e 	bl	8002620 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_DMA2D_ConfigLayer+0x24>
 8002654:	2302      	movs	r3, #2
 8002656:	e092      	b.n	800277e <HAL_DMA2D_ConfigLayer+0x14a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	3328      	adds	r3, #40	@ 0x28
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800268c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002698:	4b3c      	ldr	r3, [pc, #240]	@ (800278c <HAL_DMA2D_ConfigLayer+0x158>)
 800269a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b0a      	cmp	r3, #10
 80026a2:	d003      	beq.n	80026ac <HAL_DMA2D_ConfigLayer+0x78>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d107      	bne.n	80026bc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	e005      	b.n	80026c8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d120      	bne.n	8002710 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	ea02 0103 	and.w	r1, r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d003      	beq.n	8002700 <HAL_DMA2D_ConfigLayer+0xcc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d135      	bne.n	800276c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
 800270e:	e02d      	b.n	800276c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b0b      	cmp	r3, #11
 8002716:	d109      	bne.n	800272c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	049b      	lsls	r3, r3, #18
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800272a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	43db      	mvns	r3, r3
 8002736:	ea02 0103 	and.w	r1, r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	430a      	orrs	r2, r1
 8002742:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b0a      	cmp	r3, #10
 8002754:	d003      	beq.n	800275e <HAL_DMA2D_ConfigLayer+0x12a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b09      	cmp	r3, #9
 800275c:	d106      	bne.n	800276c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800276a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	ff33000f 	.word	0xff33000f

08002790 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002790:	b480      	push	{r7}
 8002792:	b08b      	sub	sp, #44	@ 0x2c
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	041a      	lsls	r2, r3, #16
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027c8:	d174      	bne.n	80028b4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80027d0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80027d8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80027e0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002800:	e053      	b.n	80028aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d106      	bne.n	8002818 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4313      	orrs	r3, r2
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
 8002816:	e048      	b.n	80028aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d111      	bne.n	8002844 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	0cdb      	lsrs	r3, r3, #19
 8002824:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	0a9b      	lsrs	r3, r3, #10
 800282a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	02db      	lsls	r3, r3, #11
 800283a:	4313      	orrs	r3, r2
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
 8002842:	e032      	b.n	80028aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d117      	bne.n	800287c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	0fdb      	lsrs	r3, r3, #31
 8002850:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	0cdb      	lsrs	r3, r3, #19
 8002856:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	0adb      	lsrs	r3, r3, #11
 800285c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	431a      	orrs	r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	03db      	lsls	r3, r3, #15
 8002872:	4313      	orrs	r3, r2
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	e016      	b.n	80028aa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	0f1b      	lsrs	r3, r3, #28
 8002880:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	0d1b      	lsrs	r3, r3, #20
 8002886:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	0b1b      	lsrs	r3, r3, #12
 800288c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	011a      	lsls	r2, r3, #4
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	431a      	orrs	r2, r3
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	031b      	lsls	r3, r3, #12
 80028a2:	4313      	orrs	r3, r2
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80028b2:	e00d      	b.n	80028d0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028bc:	d104      	bne.n	80028c8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	615a      	str	r2, [r3, #20]
}
 80028c6:	e003      	b.n	80028d0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	60da      	str	r2, [r3, #12]
}
 80028d0:	bf00      	nop
 80028d2:	372c      	adds	r7, #44	@ 0x2c
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028ea:	4b89      	ldr	r3, [pc, #548]	@ (8002b10 <HAL_GPIO_Init+0x234>)
 80028ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ee:	e194      	b.n	8002c1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8186 	beq.w	8002c14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d005      	beq.n	8002920 <HAL_GPIO_Init+0x44>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d130      	bne.n	8002982 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002956:	2201      	movs	r2, #1
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 0201 	and.w	r2, r3, #1
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b03      	cmp	r3, #3
 800298c:	d017      	beq.n	80029be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d123      	bne.n	8002a12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	08da      	lsrs	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3208      	adds	r2, #8
 8002a0c:	69b9      	ldr	r1, [r7, #24]
 8002a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0203 	and.w	r2, r3, #3
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80e0 	beq.w	8002c14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a54:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <HAL_GPIO_Init+0x238>)
 8002a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b14 <HAL_GPIO_Init+0x238>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a64:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_GPIO_Init+0x238>)
 8002a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a72:	4a29      	ldr	r2, [pc, #164]	@ (8002b18 <HAL_GPIO_Init+0x23c>)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a20      	ldr	r2, [pc, #128]	@ (8002b1c <HAL_GPIO_Init+0x240>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d052      	beq.n	8002b44 <HAL_GPIO_Init+0x268>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_GPIO_Init+0x244>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d031      	beq.n	8002b0a <HAL_GPIO_Init+0x22e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b24 <HAL_GPIO_Init+0x248>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02b      	beq.n	8002b06 <HAL_GPIO_Init+0x22a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_GPIO_Init+0x24c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <HAL_GPIO_Init+0x250>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x222>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b30 <HAL_GPIO_Init+0x254>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x21e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <HAL_GPIO_Init+0x258>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	@ (8002b38 <HAL_GPIO_Init+0x25c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x216>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <HAL_GPIO_Init+0x260>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x212>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a17      	ldr	r2, [pc, #92]	@ (8002b40 <HAL_GPIO_Init+0x264>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x20e>
 8002ae6:	2309      	movs	r3, #9
 8002ae8:	e02d      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002aea:	230a      	movs	r3, #10
 8002aec:	e02b      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002aee:	2308      	movs	r3, #8
 8002af0:	e029      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e027      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002af6:	2306      	movs	r3, #6
 8002af8:	e025      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002afa:	2305      	movs	r3, #5
 8002afc:	e023      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002afe:	2304      	movs	r3, #4
 8002b00:	e021      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e01f      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e01d      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e01b      	b.n	8002b46 <HAL_GPIO_Init+0x26a>
 8002b0e:	bf00      	nop
 8002b10:	58000080 	.word	0x58000080
 8002b14:	58024400 	.word	0x58024400
 8002b18:	58000400 	.word	0x58000400
 8002b1c:	58020000 	.word	0x58020000
 8002b20:	58020400 	.word	0x58020400
 8002b24:	58020800 	.word	0x58020800
 8002b28:	58020c00 	.word	0x58020c00
 8002b2c:	58021000 	.word	0x58021000
 8002b30:	58021400 	.word	0x58021400
 8002b34:	58021800 	.word	0x58021800
 8002b38:	58021c00 	.word	0x58021c00
 8002b3c:	58022000 	.word	0x58022000
 8002b40:	58022400 	.word	0x58022400
 8002b44:	2300      	movs	r3, #0
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f002 0203 	and.w	r2, r2, #3
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	4093      	lsls	r3, r2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b56:	4938      	ldr	r1, [pc, #224]	@ (8002c38 <HAL_GPIO_Init+0x35c>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f ae63 	bne.w	80028f0 <HAL_GPIO_Init+0x14>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	3724      	adds	r7, #36	@ 0x24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	58000400 	.word	0x58000400

08002c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e001      	b.n	8002c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002ca8:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <HAL_HSEM_FastTake+0x2c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3320      	adds	r3, #32
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <HAL_HSEM_FastTake+0x30>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	58026400 	.word	0x58026400
 8002cd0:	80000300 	.word	0x80000300

08002cd4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002cde:	4906      	ldr	r1, [pc, #24]	@ (8002cf8 <HAL_HSEM_Release+0x24>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	58026400 	.word	0x58026400

08002cfc <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e070      	b.n	8002df0 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fe0c 	bl	8001940 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <HAL_JPEG_Init+0xfc>)
 8002d94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <HAL_JPEG_Init+0x100>)
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fcdb 	bl	8003764 <JPEG_Set_HuffEnc_Mem>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e018      	b.n	8002df0 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dcc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	0800ec9c 	.word	0x0800ec9c
 8002dfc:	0800ecdc 	.word	0x0800ecdc

08002e00 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_JPEG_GetInfo+0x16>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e083      	b.n	8002f22 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d103      	bne.n	8002e30 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e017      	b.n	8002e60 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e00c      	b.n	8002e60 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d103      	bne.n	8002e5c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2230      	movs	r2, #48	@ 0x30
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e001      	b.n	8002e60 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e060      	b.n	8002f22 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d003      	beq.n	8002e8c <HAL_JPEG_GetInfo+0x8c>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b30      	cmp	r3, #48	@ 0x30
 8002e8a:	d140      	bne.n	8002f0e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d109      	bne.n	8002ed0 <HAL_JPEG_GetInfo+0xd0>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_JPEG_GetInfo+0xd0>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	e01d      	b.n	8002f0c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_JPEG_GetInfo+0xea>
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <HAL_JPEG_GetInfo+0xea>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	e010      	b.n	8002f0c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d109      	bne.n	8002f04 <HAL_JPEG_GetInfo+0x104>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_JPEG_GetInfo+0x104>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e003      	b.n	8002f0c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002f0a:	e003      	b.n	8002f14 <HAL_JPEG_GetInfo+0x114>
 8002f0c:	e002      	b.n	8002f14 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 f9cb 	bl	80042b0 <JPEG_GetQuality>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_JPEG_Decode+0x20>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_JPEG_Decode+0x20>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e071      	b.n	8003032 <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_JPEG_Decode+0x32>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e06a      	b.n	8003032 <HAL_JPEG_Decode+0x108>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f64:	f7fe ff92 	bl	8001e8c <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d158      	bne.n	8003028 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	f023 020f 	bic.w	r2, r3, #15
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8e:	f043 0206 	orr.w	r2, r3, #6
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f023 0203 	bic.w	r2, r3, #3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fe50 	bl	8003c68 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002fc8:	e01e      	b.n	8003008 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d01a      	beq.n	8003008 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fd2:	f7fe ff5b 	bl	8001e8c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <HAL_JPEG_Decode+0xbe>
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10f      	bne.n	8003008 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fec:	f043 0208 	orr.w	r2, r3, #8
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e014      	b.n	8003032 <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fea1 	bl	8003d50 <JPEG_Process>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0da      	beq.n	8002fca <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e004      	b.n	8003032 <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d116      	bne.n	8003082 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d033      	beq.n	80030dc <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003080:	e02c      	b.n	80030dc <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b08      	cmp	r3, #8
 800308c:	d126      	bne.n	80030dc <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f043 0306 	orr.w	r3, r3, #6
 80030aa:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80030c8:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43da      	mvns	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	400a      	ands	r2, r1
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8003146:	b480      	push	{r7}
 8003148:	b08b      	sub	sp, #44	@ 0x2c
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e020      	b.n	80031a0 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	4413      	add	r3, r2
 800316e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003172:	d90f      	bls.n	8003194 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e055      	b.n	8003224 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	440b      	add	r3, r1
 8003182:	3201      	adds	r2, #1
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]
      p++;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	3301      	adds	r3, #1
 800318c:	623b      	str	r3, [r7, #32]
      i--;
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	3b01      	subs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ee      	bne.n	8003178 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	d9db      	bls.n	800315e <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	4413      	add	r3, r2
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6a3a      	ldr	r2, [r7, #32]
 80031b4:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]
  p = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80031c4:	e027      	b.n	8003216 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	601a      	str	r2, [r3, #0]
      p++;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	3301      	adds	r3, #1
 80031d6:	623b      	str	r3, [r7, #32]
      code++;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	3301      	adds	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	4413      	add	r3, r2
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d0eb      	beq.n	80031c6 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b1f      	cmp	r3, #31
 80031f2:	d901      	bls.n	80031f8 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e015      	b.n	8003224 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80031f8:	2201      	movs	r2, #1
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	429a      	cmp	r2, r3
 8003204:	d301      	bcc.n	800320a <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00c      	b.n	8003224 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	61bb      	str	r3, [r7, #24]
    si++;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3301      	adds	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1dd      	bne.n	80031de <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	372c      	adds	r7, #44	@ 0x2c
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003236:	af00      	add	r7, sp, #0
 8003238:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800323c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003240:	6018      	str	r0, [r3, #0]
 8003242:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003246:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800324a:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800324c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003250:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f107 0308 	add.w	r3, r7, #8
 800325a:	f107 020c 	add.w	r2, r7, #12
 800325e:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8003262:	f7ff ff70 	bl	8003146 <JPEG_Bits_To_SizeCodes>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800326c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003274:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003278:	e075      	b.n	8003366 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8003280:	e067      	b.n	8003352 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8003282:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003286:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003290:	4413      	add	r3, r2
 8003292:	3310      	adds	r3, #16
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800329a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80032a2:	23a0      	movs	r3, #160	@ 0xa0
 80032a4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80032a8:	e021      	b.n	80032ee <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80032aa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80032ae:	2bf0      	cmp	r3, #240	@ 0xf0
 80032b0:	d103      	bne.n	80032ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80032b2:	23a1      	movs	r3, #161	@ 0xa1
 80032b4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80032b8:	e019      	b.n	80032ee <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80032ba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80032c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80032d4:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	461a      	mov	r2, r3
 80032e2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80032e6:	4413      	add	r3, r2
 80032e8:	3b01      	subs	r3, #1
 80032ea:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80032ee:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80032f2:	2ba1      	cmp	r3, #161	@ 0xa1
 80032f4:	d901      	bls.n	80032fa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80032f6:	2301      	movs	r3, #1
 80032f8:	e035      	b.n	8003366 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80032fa:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80032fe:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003302:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003306:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800330a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800330e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003312:	6819      	ldr	r1, [r3, #0]
 8003314:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003318:	3328      	adds	r3, #40	@ 0x28
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003320:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003324:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003328:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	3b01      	subs	r3, #1
 8003332:	b2d9      	uxtb	r1, r3
 8003334:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003338:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003342:	4413      	add	r3, r2
 8003344:	460a      	mov	r2, r1
 8003346:	701a      	strb	r2, [r3, #0]
      k++;
 8003348:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800334c:	3301      	adds	r3, #1
 800334e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8003352:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003356:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003360:	429a      	cmp	r2, r3
 8003362:	d38e      	bcc.n	8003282 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003376:	af00      	add	r7, sp, #0
 8003378:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800337c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003380:	6018      	str	r0, [r3, #0]
 8003382:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003386:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800338a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800338c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003390:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800339a:	f107 0208 	add.w	r2, r7, #8
 800339e:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80033a2:	f7ff fed0 	bl	8003146 <JPEG_Bits_To_SizeCodes>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80033ac:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80033b4:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80033b8:	e048      	b.n	800344c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80033c0:	e03d      	b.n	800343e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80033c2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80033c6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80033d0:	4413      	add	r3, r2
 80033d2:	3310      	adds	r3, #16
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80033da:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80033de:	2b0b      	cmp	r3, #11
 80033e0:	d901      	bls.n	80033e6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80033e2:	2301      	movs	r3, #1
 80033e4:	e032      	b.n	800344c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80033e6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80033ea:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80033ee:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80033f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033f6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80033fa:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003404:	3302      	adds	r3, #2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800340c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003410:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003414:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003418:	4413      	add	r3, r2
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	b2d9      	uxtb	r1, r3
 8003420:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003424:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800342e:	4413      	add	r3, r2
 8003430:	460a      	mov	r2, r1
 8003432:	701a      	strb	r2, [r3, #0]
      k++;
 8003434:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003438:	3301      	adds	r3, #1
 800343a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800343e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003442:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003446:	429a      	cmp	r2, r3
 8003448:	d3bb      	bcc.n	80033c2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b09a      	sub	sp, #104	@ 0x68
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d106      	bne.n	800347e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003478:	3318      	adds	r3, #24
 800347a:	663b      	str	r3, [r7, #96]	@ 0x60
 800347c:	e00f      	b.n	800349e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	429a      	cmp	r2, r3
 800348a:	d106      	bne.n	800349a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003494:	3318      	adds	r3, #24
 8003496:	663b      	str	r3, [r7, #96]	@ 0x60
 8003498:	e001      	b.n	800349e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e059      	b.n	8003552 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d055      	beq.n	8003550 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f7ff ff60 	bl	8003370 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80034b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80034be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80034c2:	e046      	b.n	8003552 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80034c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80034c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ca:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80034ce:	601a      	str	r2, [r3, #0]
    addressDef++;
 80034d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034d2:	3304      	adds	r3, #4
 80034d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80034d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034d8:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80034dc:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80034de:	230c      	movs	r3, #12
 80034e0:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80034e2:	e032      	b.n	800354a <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80034e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034e6:	3b01      	subs	r3, #1
 80034e8:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80034ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ec:	3b04      	subs	r3, #4
 80034ee:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80034f0:	f107 0214 	add.w	r2, r7, #20
 80034f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034f6:	4413      	add	r3, r2
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003502:	3302      	adds	r3, #2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3368      	adds	r3, #104	@ 0x68
 8003508:	443b      	add	r3, r7
 800350a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003516:	3b01      	subs	r3, #1
 8003518:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800351a:	f107 0214 	add.w	r2, r7, #20
 800351e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800352a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800352c:	3302      	adds	r3, #2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3368      	adds	r3, #104	@ 0x68
 8003532:	443b      	add	r3, r7
 8003534:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800353e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003544:	431a      	orrs	r2, r3
 8003546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003548:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800354a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800354c:	2b01      	cmp	r3, #1
 800354e:	d8c9      	bhi.n	80034e4 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3768      	adds	r7, #104	@ 0x68
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003562:	af00      	add	r7, sp, #0
 8003564:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003568:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800356c:	6018      	str	r0, [r3, #0]
 800356e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003572:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003576:	6019      	str	r1, [r3, #0]
 8003578:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800357c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003580:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003582:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003586:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003592:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003596:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d10c      	bne.n	80035ba <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80035a0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035a4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80035b4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80035b8:	e01d      	b.n	80035f6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80035ba:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035be:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80035ca:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80035ce:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d10c      	bne.n	80035f2 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80035d8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035dc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80035e8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80035ec:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80035f0:	e001      	b.n	80035f6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0a8      	b.n	8003748 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 80035f6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035fa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80a0 	beq.w	8003746 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003606:	f107 0214 	add.w	r2, r7, #20
 800360a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800360e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003612:	4611      	mov	r1, r2
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f7ff fe0b 	bl	8003230 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003620:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003628:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800362c:	e08c      	b.n	8003748 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800362e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003632:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800363c:	e00e      	b.n	800365c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800363e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003642:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003646:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003648:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800364c:	3304      	adds	r3, #4
 800364e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003652:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003656:	3301      	adds	r3, #1
 8003658:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800365c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003660:	2b02      	cmp	r3, #2
 8003662:	d9ec      	bls.n	800363e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003664:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003668:	4a3a      	ldr	r2, [pc, #232]	@ (8003754 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800366a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800366c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003670:	3304      	adds	r3, #4
 8003672:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003676:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800367a:	4a37      	ldr	r2, [pc, #220]	@ (8003758 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800367c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800367e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003682:	3304      	adds	r3, #4
 8003684:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003688:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800368c:	4a33      	ldr	r2, [pc, #204]	@ (800375c <JPEG_Set_HuffAC_Mem+0x200>)
 800368e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003690:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003694:	3304      	adds	r3, #4
 8003696:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800369a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800369e:	4a30      	ldr	r2, [pc, #192]	@ (8003760 <JPEG_Set_HuffAC_Mem+0x204>)
 80036a0:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80036a2:	23a2      	movs	r3, #162	@ 0xa2
 80036a4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 80036a8:	e049      	b.n	800373e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80036aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80036ae:	3b01      	subs	r3, #1
 80036b0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80036b4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80036b8:	3b04      	subs	r3, #4
 80036ba:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80036be:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80036c2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80036c6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80036ca:	4413      	add	r3, r2
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80036d4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80036d8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80036dc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80036e0:	3328      	adds	r3, #40	@ 0x28
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80036f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80036f4:	3b01      	subs	r3, #1
 80036f6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80036fa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80036fe:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003702:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003710:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003714:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003718:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800371c:	3328      	adds	r3, #40	@ 0x28
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800372c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003736:	431a      	orrs	r2, r3
 8003738:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800373c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800373e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003742:	2b01      	cmp	r3, #1
 8003744:	d8b1      	bhi.n	80036aa <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	0fd10fd0 	.word	0x0fd10fd0
 8003758:	0fd30fd2 	.word	0x0fd30fd2
 800375c:	0fd50fd4 	.word	0x0fd50fd4
 8003760:	0fd70fd6 	.word	0x0fd70fd6

08003764 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f84d 	bl	800380c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800377a:	461a      	mov	r2, r3
 800377c:	491f      	ldr	r1, [pc, #124]	@ (80037fc <JPEG_Set_HuffEnc_Mem+0x98>)
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff feec 	bl	800355c <JPEG_Set_HuffAC_Mem>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	e030      	b.n	80037f4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800379a:	461a      	mov	r2, r3
 800379c:	4918      	ldr	r1, [pc, #96]	@ (8003800 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fedc 	bl	800355c <JPEG_Set_HuffAC_Mem>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	e020      	b.n	80037f4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80037ba:	461a      	mov	r2, r3
 80037bc:	4911      	ldr	r1, [pc, #68]	@ (8003804 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fe49 	bl	8003456 <JPEG_Set_HuffDC_Mem>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	e010      	b.n	80037f4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80037da:	461a      	mov	r2, r3
 80037dc:	490a      	ldr	r1, [pc, #40]	@ (8003808 <JPEG_Set_HuffEnc_Mem+0xa4>)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fe39 	bl	8003456 <JPEG_Set_HuffDC_Mem>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	e000      	b.n	80037f4 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	0800eaf4 	.word	0x0800eaf4
 8003800:	0800eba8 	.word	0x0800eba8
 8003804:	0800eabc 	.word	0x0800eabc
 8003808:	0800ead8 	.word	0x0800ead8

0800380c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800380c:	b480      	push	{r7}
 800380e:	b08b      	sub	sp, #44	@ 0x2c
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003814:	4b80      	ldr	r3, [pc, #512]	@ (8003a18 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003816:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003818:	4b80      	ldr	r3, [pc, #512]	@ (8003a1c <JPEG_Set_Huff_DHTMem+0x210>)
 800381a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800381c:	4b80      	ldr	r3, [pc, #512]	@ (8003a20 <JPEG_Set_Huff_DHTMem+0x214>)
 800381e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003820:	4b80      	ldr	r3, [pc, #512]	@ (8003a24 <JPEG_Set_Huff_DHTMem+0x218>)
 8003822:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800382c:	330c      	adds	r3, #12
 800382e:	623b      	str	r3, [r7, #32]
  index = 16;
 8003830:	2310      	movs	r3, #16
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003834:	e01d      	b.n	8003872 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	3b01      	subs	r3, #1
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	3b02      	subs	r3, #2
 8003844:	6979      	ldr	r1, [r7, #20]
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800384a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	3b03      	subs	r3, #3
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003856:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385a:	3a04      	subs	r2, #4
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003860:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	601a      	str	r2, [r3, #0]
    address--;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	3b04      	subs	r3, #4
 800386a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	3b04      	subs	r3, #4
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	2b03      	cmp	r3, #3
 8003876:	d8de      	bhi.n	8003836 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003880:	3318      	adds	r3, #24
 8003882:	623b      	str	r3, [r7, #32]
  index = 12;
 8003884:	230c      	movs	r3, #12
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003888:	e021      	b.n	80038ce <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	3b01      	subs	r3, #1
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4413      	add	r3, r2
 8003892:	7c1b      	ldrb	r3, [r3, #16]
 8003894:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3b02      	subs	r3, #2
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	440b      	add	r3, r1
 800389e:	7c1b      	ldrb	r3, [r3, #16]
 80038a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80038a2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	3b03      	subs	r3, #3
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	440b      	add	r3, r1
 80038ac:	7c1b      	ldrb	r3, [r3, #16]
 80038ae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80038b0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	3a04      	subs	r2, #4
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	440a      	add	r2, r1
 80038ba:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80038bc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	601a      	str	r2, [r3, #0]
    address--;
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	3b04      	subs	r3, #4
 80038c6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	3b04      	subs	r3, #4
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d8da      	bhi.n	800388a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80038dc:	3328      	adds	r3, #40	@ 0x28
 80038de:	623b      	str	r3, [r7, #32]
  index = 16;
 80038e0:	2310      	movs	r3, #16
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80038e4:	e01d      	b.n	8003922 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	3b01      	subs	r3, #1
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	3b02      	subs	r3, #2
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80038fa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	3b03      	subs	r3, #3
 8003900:	69f9      	ldr	r1, [r7, #28]
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003906:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8003908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390a:	3a04      	subs	r2, #4
 800390c:	69f9      	ldr	r1, [r7, #28]
 800390e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003910:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	601a      	str	r2, [r3, #0]
    address--;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	3b04      	subs	r3, #4
 800391a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	3b04      	subs	r3, #4
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	2b03      	cmp	r3, #3
 8003926:	d8de      	bhi.n	80038e6 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003930:	33cc      	adds	r3, #204	@ 0xcc
 8003932:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <JPEG_Set_Huff_DHTMem+0x21c>)
 800393a:	4013      	ands	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	3b04      	subs	r3, #4
 800395e:	623b      	str	r3, [r7, #32]
  index = 160;
 8003960:	23a0      	movs	r3, #160	@ 0xa0
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003964:	e021      	b.n	80039aa <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	3b01      	subs	r3, #1
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	7c1b      	ldrb	r3, [r3, #16]
 8003970:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	3b02      	subs	r3, #2
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	440b      	add	r3, r1
 800397a:	7c1b      	ldrb	r3, [r3, #16]
 800397c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800397e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	3b03      	subs	r3, #3
 8003984:	69f9      	ldr	r1, [r7, #28]
 8003986:	440b      	add	r3, r1
 8003988:	7c1b      	ldrb	r3, [r3, #16]
 800398a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800398c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003990:	3a04      	subs	r2, #4
 8003992:	69f9      	ldr	r1, [r7, #28]
 8003994:	440a      	add	r2, r1
 8003996:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003998:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	601a      	str	r2, [r3, #0]
    address--;
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	3b04      	subs	r3, #4
 80039a2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	3b04      	subs	r3, #4
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d8da      	bhi.n	8003966 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80039b8:	33cc      	adds	r3, #204	@ 0xcc
 80039ba:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	061a      	lsls	r2, r3, #24
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80039e6:	33dc      	adds	r3, #220	@ 0xdc
 80039e8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003a28 <JPEG_Set_Huff_DHTMem+0x21c>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	7bdb      	ldrb	r3, [r3, #15]
 80039f8:	021a      	lsls	r2, r3, #8
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	7b92      	ldrb	r2, [r2, #14]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	623b      	str	r3, [r7, #32]
  index = 12;
 8003a12:	230c      	movs	r3, #12
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003a16:	e027      	b.n	8003a68 <JPEG_Set_Huff_DHTMem+0x25c>
 8003a18:	0800eaf4 	.word	0x0800eaf4
 8003a1c:	0800eba8 	.word	0x0800eba8
 8003a20:	0800eabc 	.word	0x0800eabc
 8003a24:	0800ead8 	.word	0x0800ead8
 8003a28:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	3301      	adds	r3, #1
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003a36:	6939      	ldr	r1, [r7, #16]
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	440b      	add	r3, r1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003a40:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	3b01      	subs	r3, #1
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	5ccb      	ldrb	r3, [r1, r3]
 8003a4a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003a4c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	3a02      	subs	r2, #2
 8003a52:	6939      	ldr	r1, [r7, #16]
 8003a54:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003a56:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	601a      	str	r2, [r3, #0]
    address--;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	3b04      	subs	r3, #4
 8003a60:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	3b04      	subs	r3, #4
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d8de      	bhi.n	8003a2c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003a76:	33dc      	adds	r3, #220	@ 0xdc
 8003a78:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	7c5b      	ldrb	r3, [r3, #17]
 8003a86:	061a      	lsls	r2, r3, #24
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	7c1b      	ldrb	r3, [r3, #16]
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003aa4:	33e8      	adds	r3, #232	@ 0xe8
 8003aa6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b6d      	ldr	r3, [pc, #436]	@ (8003c64 <JPEG_Set_Huff_DHTMem+0x458>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	7edb      	ldrb	r3, [r3, #27]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	7e92      	ldrb	r2, [r2, #26]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	3b04      	subs	r3, #4
 8003ace:	623b      	str	r3, [r7, #32]
  index = 8;
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003ad4:	e021      	b.n	8003b1a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	3301      	adds	r3, #1
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	7c1b      	ldrb	r3, [r3, #16]
 8003ae0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003ae2:	6939      	ldr	r1, [r7, #16]
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3310      	adds	r3, #16
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003aee:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	3b01      	subs	r3, #1
 8003af4:	6939      	ldr	r1, [r7, #16]
 8003af6:	440b      	add	r3, r1
 8003af8:	7c1b      	ldrb	r3, [r3, #16]
 8003afa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003afc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	3a02      	subs	r2, #2
 8003b02:	6939      	ldr	r1, [r7, #16]
 8003b04:	440a      	add	r2, r1
 8003b06:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003b08:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	601a      	str	r2, [r3, #0]
    address--;
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	3b04      	subs	r3, #4
 8003b12:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	3b04      	subs	r3, #4
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d8da      	bhi.n	8003ad6 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003b28:	33e8      	adds	r3, #232	@ 0xe8
 8003b2a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	061a      	lsls	r2, r3, #24
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003b56:	33f8      	adds	r3, #248	@ 0xf8
 8003b58:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <JPEG_Set_Huff_DHTMem+0x458>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	7bdb      	ldrb	r3, [r3, #15]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	7b92      	ldrb	r2, [r2, #14]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	623b      	str	r3, [r7, #32]
  index = 12;
 8003b82:	230c      	movs	r3, #12
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003b86:	e01d      	b.n	8003bc4 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003b92:	69b9      	ldr	r1, [r7, #24]
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	440b      	add	r3, r1
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003b9c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	5ccb      	ldrb	r3, [r1, r3]
 8003ba6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003ba8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	3a02      	subs	r2, #2
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003bb2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	601a      	str	r2, [r3, #0]
    address--;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	3b04      	subs	r3, #4
 8003bbc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	3b04      	subs	r3, #4
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d8de      	bhi.n	8003b88 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003bd2:	33f8      	adds	r3, #248	@ 0xf8
 8003bd4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	7c5b      	ldrb	r3, [r3, #17]
 8003be2:	061a      	lsls	r2, r3, #24
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	7c1b      	ldrb	r3, [r3, #16]
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003c00:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8003c04:	623b      	str	r3, [r7, #32]
  index = 160;
 8003c06:	23a0      	movs	r3, #160	@ 0xa0
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003c0a:	e021      	b.n	8003c50 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	3301      	adds	r3, #1
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4413      	add	r3, r2
 8003c14:	7c1b      	ldrb	r3, [r3, #16]
 8003c16:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8003c18:	69b9      	ldr	r1, [r7, #24]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3310      	adds	r3, #16
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003c24:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	440b      	add	r3, r1
 8003c2e:	7c1b      	ldrb	r3, [r3, #16]
 8003c30:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8003c32:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	3a02      	subs	r2, #2
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003c3e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	601a      	str	r2, [r3, #0]
    address--;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	3b04      	subs	r3, #4
 8003c48:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d8da      	bhi.n	8003c0c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	372c      	adds	r7, #44	@ 0x2c
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	ffff0000 	.word	0xffff0000

08003c68 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d108      	bne.n	8003c9a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e007      	b.n	8003caa <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0208 	bic.w	r2, r2, #8
 8003ca8:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003cf8:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d108      	bne.n	8003d28 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8003d24:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d26:	e00d      	b.n	8003d44 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d107      	bne.n	8003d44 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d125      	bne.n	8003db0 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01e      	beq.n	8003db0 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff f841 	bl	8002e00 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fc fffc 	bl	8000d88 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d116      	bne.n	8003dea <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003dca:	2108      	movs	r1, #8
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f988 	bl	80040e2 <JPEG_ReadInputData>
 8003dd2:	e00a      	b.n	8003dea <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8003de2:	2101      	movs	r1, #1
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f97c 	bl	80040e2 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d116      	bne.n	8003e24 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003e04:	2108      	movs	r1, #8
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f864 	bl	8003ed4 <JPEG_StoreOutputData>
 8003e0c:	e00a      	b.n	8003e24 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f858 	bl	8003ed4 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d14b      	bne.n	8003eca <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d107      	bne.n	8003e5e <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69d9      	ldr	r1, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fc ffd3 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e90:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d103      	bne.n	8003ec0 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fc ffd1 	bl	8000e60 <HAL_JPEG_DecodeCpltCallback>
 8003ebe:	e002      	b.n	8003ec6 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff f936 	bl	8003132 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d34b      	bcc.n	8003f88 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e031      	b.n	8003f5a <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	4413      	add	r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	0a19      	lsrs	r1, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b2ca      	uxtb	r2, r1
 8003f20:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	0c19      	lsrs	r1, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	3302      	adds	r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	b2ca      	uxtb	r2, r1
 8003f34:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0e19      	lsrs	r1, r3, #24
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	3303      	adds	r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	b2ca      	uxtb	r2, r1
 8003f48:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3301      	adds	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3c9      	bcc.n	8003ef6 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	f040 80b5 	bne.w	80040da <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc ff56 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f86:	e0a8      	b.n	80040da <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f240 80a2 	bls.w	80040da <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e031      	b.n	800400e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	4413      	add	r3, r2
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0a19      	lsrs	r1, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b2ca      	uxtb	r2, r1
 8003fd4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0c19      	lsrs	r1, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b2ca      	uxtb	r2, r1
 8003fe8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	0e19      	lsrs	r1, r3, #24
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	3303      	adds	r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b2ca      	uxtb	r2, r1
 8003ffc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	1d1a      	adds	r2, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d3c9      	bcc.n	8003faa <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	429a      	cmp	r2, r3
 8004020:	d10b      	bne.n	800403a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69d9      	ldr	r1, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	461a      	mov	r2, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc fefd 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004038:	e04f      	b.n	80040da <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e015      	b.n	8004080 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	fa22 f103 	lsr.w	r1, r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	4413      	add	r3, r2
 800406c:	b2ca      	uxtb	r2, r1
 800406e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	3301      	adds	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d3e5      	bcc.n	8004054 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	461a      	mov	r2, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc feca 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f1c3 0304 	rsb	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e013      	b.n	80040d4 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	fa22 f103 	lsr.w	r1, r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	4413      	add	r3, r2
 80040c0:	b2ca      	uxtb	r2, r1
 80040c2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d9e8      	bls.n	80040ac <JPEG_StoreOutputData+0x1d8>
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <JPEG_ReadInputData+0x1c>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80040fe:	2101      	movs	r1, #1
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fe ff9a 	bl	800303a <HAL_JPEG_Pause>
 8004106:	e028      	b.n	800415a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	429a      	cmp	r2, r3
 8004112:	d906      	bls.n	8004122 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e01b      	b.n	800415a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	429a      	cmp	r2, r3
 800412c:	d115      	bne.n	800415a <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fc fe33 	bl	8000da0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	2b04      	cmp	r3, #4
 8004140:	d905      	bls.n	800414e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 809f 	bne.w	80042a6 <JPEG_ReadInputData+0x1c4>
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 809b 	beq.w	80042a6 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d335      	bcc.n	80041ea <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	e02d      	b.n	80041e0 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3301      	adds	r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80041a4:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6999      	ldr	r1, [r3, #24]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3302      	adds	r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80041b6:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3303      	adds	r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80041cc:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	3301      	adds	r3, #1
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d3cd      	bcc.n	8004184 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80041e8:	e05d      	b.n	80042a6 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d035      	beq.n	800425c <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e02d      	b.n	8004252 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004216:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3302      	adds	r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004228:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3303      	adds	r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800423e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	1d1a      	adds	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	3301      	adds	r3, #1
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	429a      	cmp	r2, r3
 8004258:	d3cd      	bcc.n	80041f6 <JPEG_ReadInputData+0x114>
}
 800425a:	e024      	b.n	80042a6 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e017      	b.n	8004296 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4413      	add	r3, r2
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	3301      	adds	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	429a      	cmp	r2, r3
 800429c:	d3e3      	bcc.n	8004266 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80042a6:	bf00      	nop
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b08b      	sub	sp, #44	@ 0x2c
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3350      	adds	r3, #80	@ 0x50
 80042c2:	61bb      	str	r3, [r7, #24]

  i = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80042c8:	e042      	b.n	8004350 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e033      	b.n	800433e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d103      	bne.n	80042f2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	3364      	adds	r3, #100	@ 0x64
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f0:	e022      	b.n	8004338 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2264      	movs	r2, #100	@ 0x64
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042fe:	6a38      	ldr	r0, [r7, #32]
 8004300:	69f9      	ldr	r1, [r7, #28]
 8004302:	4401      	add	r1, r0
 8004304:	4818      	ldr	r0, [pc, #96]	@ (8004368 <JPEG_GetQuality+0xb8>)
 8004306:	5c41      	ldrb	r1, [r0, r1]
 8004308:	440a      	add	r2, r1
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b64      	cmp	r3, #100	@ 0x64
 8004316:	d807      	bhi.n	8004328 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004322:	4413      	add	r3, r2
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
 8004326:	e007      	b.n	8004338 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	4413      	add	r3, r2
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d9c8      	bls.n	80042d6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	3304      	adds	r3, #4
 8004348:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	3304      	adds	r3, #4
 800434e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b3c      	cmp	r3, #60	@ 0x3c
 8004354:	d9b9      	bls.n	80042ca <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	099b      	lsrs	r3, r3, #6
}
 800435a:	4618      	mov	r0, r3
 800435c:	372c      	adds	r7, #44	@ 0x2c
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	0800ec5c 	.word	0x0800ec5c

0800436c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004374:	4b29      	ldr	r3, [pc, #164]	@ (800441c <HAL_PWREx_ConfigSupply+0xb0>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	2b06      	cmp	r3, #6
 800437e:	d00a      	beq.n	8004396 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004380:	4b26      	ldr	r3, [pc, #152]	@ (800441c <HAL_PWREx_ConfigSupply+0xb0>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e040      	b.n	8004414 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e03e      	b.n	8004414 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004396:	4b21      	ldr	r3, [pc, #132]	@ (800441c <HAL_PWREx_ConfigSupply+0xb0>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800439e:	491f      	ldr	r1, [pc, #124]	@ (800441c <HAL_PWREx_ConfigSupply+0xb0>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043a6:	f7fd fd71 	bl	8001e8c <HAL_GetTick>
 80043aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043ac:	e009      	b.n	80043c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043ae:	f7fd fd6d 	bl	8001e8c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043bc:	d901      	bls.n	80043c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e028      	b.n	8004414 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043c2:	4b16      	ldr	r3, [pc, #88]	@ (800441c <HAL_PWREx_ConfigSupply+0xb0>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ce:	d1ee      	bne.n	80043ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b1e      	cmp	r3, #30
 80043d4:	d008      	beq.n	80043e8 <HAL_PWREx_ConfigSupply+0x7c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80043da:	d005      	beq.n	80043e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b1d      	cmp	r3, #29
 80043e0:	d002      	beq.n	80043e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80043e6:	d114      	bne.n	8004412 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043e8:	f7fd fd50 	bl	8001e8c <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043ee:	e009      	b.n	8004404 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043f0:	f7fd fd4c 	bl	8001e8c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043fe:	d901      	bls.n	8004404 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_PWREx_ConfigSupply+0xb0>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004410:	d1ee      	bne.n	80043f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58024800 	.word	0x58024800

08004420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	@ 0x30
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f000 bc48 	b.w	8004cc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8088 	beq.w	8004552 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004442:	4b99      	ldr	r3, [pc, #612]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800444c:	4b96      	ldr	r3, [pc, #600]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004454:	2b10      	cmp	r3, #16
 8004456:	d007      	beq.n	8004468 <HAL_RCC_OscConfig+0x48>
 8004458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445a:	2b18      	cmp	r3, #24
 800445c:	d111      	bne.n	8004482 <HAL_RCC_OscConfig+0x62>
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d10c      	bne.n	8004482 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	4b8f      	ldr	r3, [pc, #572]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d06d      	beq.n	8004550 <HAL_RCC_OscConfig+0x130>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d169      	bne.n	8004550 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f000 bc21 	b.w	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x7a>
 800448c:	4b86      	ldr	r3, [pc, #536]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a85      	ldr	r2, [pc, #532]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e02e      	b.n	80044f8 <HAL_RCC_OscConfig+0xd8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0x9c>
 80044a2:	4b81      	ldr	r3, [pc, #516]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a80      	ldr	r2, [pc, #512]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b7e      	ldr	r3, [pc, #504]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7d      	ldr	r2, [pc, #500]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e01d      	b.n	80044f8 <HAL_RCC_OscConfig+0xd8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0xc0>
 80044c6:	4b78      	ldr	r3, [pc, #480]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a77      	ldr	r2, [pc, #476]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b75      	ldr	r3, [pc, #468]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a74      	ldr	r2, [pc, #464]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0xd8>
 80044e0:	4b71      	ldr	r3, [pc, #452]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a70      	ldr	r2, [pc, #448]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b6e      	ldr	r3, [pc, #440]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6d      	ldr	r2, [pc, #436]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd fcc4 	bl	8001e8c <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fd fcc0 	bl	8001e8c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	@ 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e3d4      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800451a:	4b63      	ldr	r3, [pc, #396]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0xe8>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd fcb0 	bl	8001e8c <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fd fcac 	bl	8001e8c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	@ 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e3c0      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004542:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x110>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80ca 	beq.w	80046f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004560:	4b51      	ldr	r3, [pc, #324]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004568:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800456a:	4b4f      	ldr	r3, [pc, #316]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_RCC_OscConfig+0x166>
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	2b18      	cmp	r3, #24
 800457a:	d156      	bne.n	800462a <HAL_RCC_OscConfig+0x20a>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d151      	bne.n	800462a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004586:	4b48      	ldr	r3, [pc, #288]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x17e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e392      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800459e:	4b42      	ldr	r3, [pc, #264]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 0219 	bic.w	r2, r3, #25
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	493f      	ldr	r1, [pc, #252]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fc6c 	bl	8001e8c <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b8:	f7fd fc68 	bl	8001e8c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e37c      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ca:	4b37      	ldr	r3, [pc, #220]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	f7fd fc89 	bl	8001eec <HAL_GetREVID>
 80045da:	4603      	mov	r3, r0
 80045dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d817      	bhi.n	8004614 <HAL_RCC_OscConfig+0x1f4>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b40      	cmp	r3, #64	@ 0x40
 80045ea:	d108      	bne.n	80045fe <HAL_RCC_OscConfig+0x1de>
 80045ec:	4b2e      	ldr	r3, [pc, #184]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045f4:	4a2c      	ldr	r2, [pc, #176]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045fc:	e07a      	b.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b2a      	ldr	r3, [pc, #168]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	031b      	lsls	r3, r3, #12
 800460c:	4926      	ldr	r1, [pc, #152]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004612:	e06f      	b.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004614:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	4921      	ldr	r1, [pc, #132]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004628:	e064      	b.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d047      	beq.n	80046c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004632:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 0219 	bic.w	r2, r3, #25
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	491a      	ldr	r1, [pc, #104]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fc22 	bl	8001e8c <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fd fc1e 	bl	8001e8c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e332      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465e:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	f7fd fc3f 	bl	8001eec <HAL_GetREVID>
 800466e:	4603      	mov	r3, r0
 8004670:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004674:	4293      	cmp	r3, r2
 8004676:	d819      	bhi.n	80046ac <HAL_RCC_OscConfig+0x28c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d108      	bne.n	8004692 <HAL_RCC_OscConfig+0x272>
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004688:	4a07      	ldr	r2, [pc, #28]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 800468a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468e:	6053      	str	r3, [r2, #4]
 8004690:	e030      	b.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
 8004692:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	031b      	lsls	r3, r3, #12
 80046a0:	4901      	ldr	r1, [pc, #4]	@ (80046a8 <HAL_RCC_OscConfig+0x288>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
 80046a6:	e025      	b.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
 80046a8:	58024400 	.word	0x58024400
 80046ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	4997      	ldr	r1, [pc, #604]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
 80046c0:	e018      	b.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c2:	4b95      	ldr	r3, [pc, #596]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a94      	ldr	r2, [pc, #592]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd fbdd 	bl	8001e8c <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fd fbd9 	bl	8001e8c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e2ed      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046e8:	4b8b      	ldr	r3, [pc, #556]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a9 	beq.w	8004854 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004702:	4b85      	ldr	r3, [pc, #532]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800470a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800470c:	4b82      	ldr	r3, [pc, #520]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d007      	beq.n	8004728 <HAL_RCC_OscConfig+0x308>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b18      	cmp	r3, #24
 800471c:	d13a      	bne.n	8004794 <HAL_RCC_OscConfig+0x374>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d135      	bne.n	8004794 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004728:	4b7b      	ldr	r3, [pc, #492]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_OscConfig+0x320>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	2b80      	cmp	r3, #128	@ 0x80
 800473a:	d001      	beq.n	8004740 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e2c1      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004740:	f7fd fbd4 	bl	8001eec <HAL_GetREVID>
 8004744:	4603      	mov	r3, r0
 8004746:	f241 0203 	movw	r2, #4099	@ 0x1003
 800474a:	4293      	cmp	r3, r2
 800474c:	d817      	bhi.n	800477e <HAL_RCC_OscConfig+0x35e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	2b20      	cmp	r3, #32
 8004754:	d108      	bne.n	8004768 <HAL_RCC_OscConfig+0x348>
 8004756:	4b70      	ldr	r3, [pc, #448]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800475e:	4a6e      	ldr	r2, [pc, #440]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004764:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004766:	e075      	b.n	8004854 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004768:	4b6b      	ldr	r3, [pc, #428]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	069b      	lsls	r3, r3, #26
 8004776:	4968      	ldr	r1, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800477c:	e06a      	b.n	8004854 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800477e:	4b66      	ldr	r3, [pc, #408]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	4962      	ldr	r1, [pc, #392]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004792:	e05f      	b.n	8004854 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d042      	beq.n	8004822 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800479c:	4b5e      	ldr	r3, [pc, #376]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80047a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd fb70 	bl	8001e8c <HAL_GetTick>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047b0:	f7fd fb6c 	bl	8001e8c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e280      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047c2:	4b55      	ldr	r3, [pc, #340]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ce:	f7fd fb8d 	bl	8001eec <HAL_GetREVID>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047d8:	4293      	cmp	r3, r2
 80047da:	d817      	bhi.n	800480c <HAL_RCC_OscConfig+0x3ec>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d108      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3d6>
 80047e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80047ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047f2:	6053      	str	r3, [r2, #4]
 80047f4:	e02e      	b.n	8004854 <HAL_RCC_OscConfig+0x434>
 80047f6:	4b48      	ldr	r3, [pc, #288]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	069b      	lsls	r3, r3, #26
 8004804:	4944      	ldr	r1, [pc, #272]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
 800480a:	e023      	b.n	8004854 <HAL_RCC_OscConfig+0x434>
 800480c:	4b42      	ldr	r3, [pc, #264]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	493f      	ldr	r1, [pc, #252]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	60cb      	str	r3, [r1, #12]
 8004820:	e018      	b.n	8004854 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004822:	4b3d      	ldr	r3, [pc, #244]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3c      	ldr	r2, [pc, #240]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fd fb2d 	bl	8001e8c <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004836:	f7fd fb29 	bl	8001e8c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e23d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004848:	4b33      	ldr	r3, [pc, #204]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d036      	beq.n	80048ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d019      	beq.n	800489c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004868:	4b2b      	ldr	r3, [pc, #172]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486c:	4a2a      	ldr	r2, [pc, #168]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd fb0a 	bl	8001e8c <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487c:	f7fd fb06 	bl	8001e8c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e21a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800488e:	4b22      	ldr	r3, [pc, #136]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 8004890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x45c>
 800489a:	e018      	b.n	80048ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800489c:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fd faf0 	bl	8001e8c <HAL_GetTick>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b0:	f7fd faec 	bl	8001e8c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e200      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048c2:	4b15      	ldr	r3, [pc, #84]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d039      	beq.n	800494e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01c      	beq.n	800491c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 80048e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ee:	f7fd facd 	bl	8001e8c <HAL_GetTick>
 80048f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048f6:	f7fd fac9 	bl	8001e8c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1dd      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004908:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4d6>
 8004914:	e01b      	b.n	800494e <HAL_RCC_OscConfig+0x52e>
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800491c:	4b9b      	ldr	r3, [pc, #620]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a9a      	ldr	r2, [pc, #616]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004926:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004928:	f7fd fab0 	bl	8001e8c <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004930:	f7fd faac 	bl	8001e8c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e1c0      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004942:	4b92      	ldr	r3, [pc, #584]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8081 	beq.w	8004a5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800495c:	4b8c      	ldr	r3, [pc, #560]	@ (8004b90 <HAL_RCC_OscConfig+0x770>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a8b      	ldr	r2, [pc, #556]	@ (8004b90 <HAL_RCC_OscConfig+0x770>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004968:	f7fd fa90 	bl	8001e8c <HAL_GetTick>
 800496c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004970:	f7fd fa8c 	bl	8001e8c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	@ 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e1a0      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004982:	4b83      	ldr	r3, [pc, #524]	@ (8004b90 <HAL_RCC_OscConfig+0x770>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x584>
 8004996:	4b7d      	ldr	r3, [pc, #500]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a2:	e02d      	b.n	8004a00 <HAL_RCC_OscConfig+0x5e0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_OscConfig+0x5a6>
 80049ac:	4b77      	ldr	r3, [pc, #476]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b0:	4a76      	ldr	r2, [pc, #472]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b8:	4b74      	ldr	r3, [pc, #464]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a73      	ldr	r2, [pc, #460]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c4:	e01c      	b.n	8004a00 <HAL_RCC_OscConfig+0x5e0>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x5c8>
 80049ce:	4b6f      	ldr	r3, [pc, #444]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	4a6e      	ldr	r2, [pc, #440]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049da:	4b6c      	ldr	r3, [pc, #432]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	4a6b      	ldr	r2, [pc, #428]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0x5e0>
 80049e8:	4b68      	ldr	r3, [pc, #416]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	4a67      	ldr	r2, [pc, #412]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f4:	4b65      	ldr	r3, [pc, #404]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a64      	ldr	r2, [pc, #400]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 80049fa:	f023 0304 	bic.w	r3, r3, #4
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fd fa40 	bl	8001e8c <HAL_GetTick>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fd fa3c 	bl	8001e8c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e14e      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a26:	4b59      	ldr	r3, [pc, #356]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ee      	beq.n	8004a10 <HAL_RCC_OscConfig+0x5f0>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd fa2a 	bl	8001e8c <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fd fa26 	bl	8001e8c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e138      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a52:	4b4e      	ldr	r3, [pc, #312]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 812d 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a68:	4b48      	ldr	r3, [pc, #288]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a70:	2b18      	cmp	r3, #24
 8004a72:	f000 80bd 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	f040 809e 	bne.w	8004bbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a80:	4b42      	ldr	r3, [pc, #264]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a41      	ldr	r2, [pc, #260]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd f9fe 	bl	8001e8c <HAL_GetTick>
 8004a90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd f9fa 	bl	8001e8c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e10e      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa6:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab2:	4b36      	ldr	r3, [pc, #216]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ab6:	4b37      	ldr	r3, [pc, #220]	@ (8004b94 <HAL_RCC_OscConfig+0x774>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	4931      	ldr	r1, [pc, #196]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	628b      	str	r3, [r1, #40]	@ 0x28
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	3b01      	subs	r3, #1
 8004adc:	025b      	lsls	r3, r3, #9
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	3b01      	subs	r3, #1
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004afc:	4923      	ldr	r1, [pc, #140]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b02:	4b22      	ldr	r3, [pc, #136]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	4a21      	ldr	r2, [pc, #132]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b12:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <HAL_RCC_OscConfig+0x778>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b1a:	00d2      	lsls	r2, r2, #3
 8004b1c:	491b      	ldr	r1, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b22:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	f023 020c 	bic.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	4917      	ldr	r1, [pc, #92]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b34:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f023 0202 	bic.w	r2, r3, #2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b40:	4912      	ldr	r1, [pc, #72]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b46:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	4a10      	ldr	r2, [pc, #64]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b52:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	4a0d      	ldr	r2, [pc, #52]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	4a0a      	ldr	r2, [pc, #40]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b6a:	4b08      	ldr	r3, [pc, #32]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	4a07      	ldr	r2, [pc, #28]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a04      	ldr	r2, [pc, #16]	@ (8004b8c <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fd f983 	bl	8001e8c <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b88:	e011      	b.n	8004bae <HAL_RCC_OscConfig+0x78e>
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	58024800 	.word	0x58024800
 8004b94:	fffffc0c 	.word	0xfffffc0c
 8004b98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd f976 	bl	8001e8c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e08a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bae:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x77c>
 8004bba:	e082      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b43      	ldr	r3, [pc, #268]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a42      	ldr	r2, [pc, #264]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f960 	bl	8001e8c <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd f95c 	bl	8001e8c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e070      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x7b0>
 8004bee:	e068      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bf0:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bf6:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d031      	beq.n	8004c68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f003 0203 	and.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d12a      	bne.n	8004c68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d122      	bne.n	8004c68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d11a      	bne.n	8004c68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	0a5b      	lsrs	r3, r3, #9
 8004c36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d111      	bne.n	8004c68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d108      	bne.n	8004c68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e02b      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d01f      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c8e:	f7fd f8fd 	bl	8001e8c <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c94:	bf00      	nop
 8004c96:	f7fd f8f9 	bl	8001e8c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d0f9      	beq.n	8004c96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <HAL_RCC_OscConfig+0x8b0>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cae:	00d2      	lsls	r2, r2, #3
 8004cb0:	4906      	ldr	r1, [pc, #24]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <HAL_RCC_OscConfig+0x8ac>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	@ 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	ffff0007 	.word	0xffff0007

08004cd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e19c      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d910      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b87      	ldr	r3, [pc, #540]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 020f 	bic.w	r2, r3, #15
 8004cfe:	4985      	ldr	r1, [pc, #532]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b83      	ldr	r3, [pc, #524]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e184      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	4b7b      	ldr	r3, [pc, #492]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d908      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d34:	4b78      	ldr	r3, [pc, #480]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	4975      	ldr	r1, [pc, #468]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	4b70      	ldr	r3, [pc, #448]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d908      	bls.n	8004d74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d62:	4b6d      	ldr	r3, [pc, #436]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	496a      	ldr	r1, [pc, #424]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	4b64      	ldr	r3, [pc, #400]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d908      	bls.n	8004da2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d90:	4b61      	ldr	r3, [pc, #388]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	495e      	ldr	r1, [pc, #376]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d010      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d908      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dbe:	4b56      	ldr	r3, [pc, #344]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	4953      	ldr	r1, [pc, #332]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d908      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dec:	4b4a      	ldr	r3, [pc, #296]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f023 020f 	bic.w	r2, r3, #15
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4947      	ldr	r1, [pc, #284]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d055      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e0a:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4940      	ldr	r1, [pc, #256]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e24:	4b3c      	ldr	r3, [pc, #240]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d121      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0f6      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e3c:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d115      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0ea      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e54:	4b30      	ldr	r3, [pc, #192]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0de      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e64:	4b2c      	ldr	r3, [pc, #176]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0d6      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e74:	4b28      	ldr	r3, [pc, #160]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f023 0207 	bic.w	r2, r3, #7
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4925      	ldr	r1, [pc, #148]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fd f801 	bl	8001e8c <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8e:	f7fc fffd 	bl	8001e8c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0be      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d1eb      	bne.n	8004e8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d208      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed2:	4b11      	ldr	r3, [pc, #68]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	490e      	ldr	r1, [pc, #56]	@ (8004f18 <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d214      	bcs.n	8004f1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 020f 	bic.w	r2, r3, #15
 8004efa:	4906      	ldr	r1, [pc, #24]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <HAL_RCC_ClockConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e086      	b.n	8005022 <HAL_RCC_ClockConfig+0x34e>
 8004f14:	52002000 	.word	0x52002000
 8004f18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d010      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d208      	bcs.n	8004f4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f38:	4b3c      	ldr	r3, [pc, #240]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	4939      	ldr	r1, [pc, #228]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	4b34      	ldr	r3, [pc, #208]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d208      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f66:	4b31      	ldr	r3, [pc, #196]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	492e      	ldr	r1, [pc, #184]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d010      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d208      	bcs.n	8004fa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	4922      	ldr	r1, [pc, #136]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69da      	ldr	r2, [r3, #28]
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d208      	bcs.n	8004fd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	4917      	ldr	r1, [pc, #92]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fd4:	f000 f89e 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b14      	ldr	r3, [pc, #80]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	4912      	ldr	r1, [pc, #72]	@ (8005030 <HAL_RCC_ClockConfig+0x35c>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <HAL_RCC_ClockConfig+0x358>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8005030 <HAL_RCC_ClockConfig+0x35c>)
 8004ffc:	5cd3      	ldrb	r3, [r2, r3]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	4a0a      	ldr	r2, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x360>)
 800500a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800500c:	4a0a      	ldr	r2, [pc, #40]	@ (8005038 <HAL_RCC_ClockConfig+0x364>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <HAL_RCC_ClockConfig+0x368>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fc feee 	bl	8001df8 <HAL_InitTick>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	0800eaac 	.word	0x0800eaac
 8005034:	24000004 	.word	0x24000004
 8005038:	24000000 	.word	0x24000000
 800503c:	2400001c 	.word	0x2400001c

08005040 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	@ 0x30
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d12a      	bne.n	80050a8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005052:	4b2d      	ldr	r3, [pc, #180]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 8005054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005058:	4a2b      	ldr	r2, [pc, #172]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005062:	4b29      	ldr	r3, [pc, #164]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 8005064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005070:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507a:	2303      	movs	r3, #3
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005082:	2300      	movs	r3, #0
 8005084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005086:	f107 031c 	add.w	r3, r7, #28
 800508a:	4619      	mov	r1, r3
 800508c:	481f      	ldr	r0, [pc, #124]	@ (800510c <HAL_RCC_MCOConfig+0xcc>)
 800508e:	f7fd fc25 	bl	80028dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005092:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	430b      	orrs	r3, r1
 80050a0:	4919      	ldr	r1, [pc, #100]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80050a6:	e02a      	b.n	80050fe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80050a8:	4b17      	ldr	r3, [pc, #92]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 80050aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ae:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050b8:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 80050ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80050c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050cc:	2302      	movs	r3, #2
 80050ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d0:	2303      	movs	r3, #3
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80050dc:	f107 031c 	add.w	r3, r7, #28
 80050e0:	4619      	mov	r1, r3
 80050e2:	480b      	ldr	r0, [pc, #44]	@ (8005110 <HAL_RCC_MCOConfig+0xd0>)
 80050e4:	f7fd fbfa 	bl	80028dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80050e8:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	01d9      	lsls	r1, r3, #7
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	430b      	orrs	r3, r1
 80050f8:	4903      	ldr	r1, [pc, #12]	@ (8005108 <HAL_RCC_MCOConfig+0xc8>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
}
 80050fe:	bf00      	nop
 8005100:	3730      	adds	r7, #48	@ 0x30
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	58024400 	.word	0x58024400
 800510c:	58020000 	.word	0x58020000
 8005110:	58020800 	.word	0x58020800

08005114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	@ 0x24
 8005118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800511a:	4bb3      	ldr	r3, [pc, #716]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005122:	2b18      	cmp	r3, #24
 8005124:	f200 8155 	bhi.w	80053d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005128:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <HAL_RCC_GetSysClockFreq+0x1c>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005195 	.word	0x08005195
 8005134:	080053d3 	.word	0x080053d3
 8005138:	080053d3 	.word	0x080053d3
 800513c:	080053d3 	.word	0x080053d3
 8005140:	080053d3 	.word	0x080053d3
 8005144:	080053d3 	.word	0x080053d3
 8005148:	080053d3 	.word	0x080053d3
 800514c:	080053d3 	.word	0x080053d3
 8005150:	080051bb 	.word	0x080051bb
 8005154:	080053d3 	.word	0x080053d3
 8005158:	080053d3 	.word	0x080053d3
 800515c:	080053d3 	.word	0x080053d3
 8005160:	080053d3 	.word	0x080053d3
 8005164:	080053d3 	.word	0x080053d3
 8005168:	080053d3 	.word	0x080053d3
 800516c:	080053d3 	.word	0x080053d3
 8005170:	080051c1 	.word	0x080051c1
 8005174:	080053d3 	.word	0x080053d3
 8005178:	080053d3 	.word	0x080053d3
 800517c:	080053d3 	.word	0x080053d3
 8005180:	080053d3 	.word	0x080053d3
 8005184:	080053d3 	.word	0x080053d3
 8005188:	080053d3 	.word	0x080053d3
 800518c:	080053d3 	.word	0x080053d3
 8005190:	080051c7 	.word	0x080051c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005194:	4b94      	ldr	r3, [pc, #592]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051a0:	4b91      	ldr	r3, [pc, #580]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	08db      	lsrs	r3, r3, #3
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	4a90      	ldr	r2, [pc, #576]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051b2:	e111      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051b4:	4b8d      	ldr	r3, [pc, #564]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051b6:	61bb      	str	r3, [r7, #24]
      break;
 80051b8:	e10e      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051ba:	4b8d      	ldr	r3, [pc, #564]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051bc:	61bb      	str	r3, [r7, #24]
      break;
 80051be:	e10b      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051c0:	4b8c      	ldr	r3, [pc, #560]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051c2:	61bb      	str	r3, [r7, #24]
      break;
 80051c4:	e108      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051c6:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051d0:	4b85      	ldr	r3, [pc, #532]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051dc:	4b82      	ldr	r3, [pc, #520]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051e6:	4b80      	ldr	r3, [pc, #512]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ea:	08db      	lsrs	r3, r3, #3
 80051ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80e1 	beq.w	80053cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b02      	cmp	r3, #2
 800520e:	f000 8083 	beq.w	8005318 <HAL_RCC_GetSysClockFreq+0x204>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b02      	cmp	r3, #2
 8005216:	f200 80a1 	bhi.w	800535c <HAL_RCC_GetSysClockFreq+0x248>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x114>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d056      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005226:	e099      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005228:	4b6f      	ldr	r3, [pc, #444]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d02d      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005234:	4b6c      	ldr	r3, [pc, #432]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	4a6b      	ldr	r2, [pc, #428]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525e:	4b62      	ldr	r3, [pc, #392]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005272:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800528e:	e087      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80053fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800529e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a2:	4b51      	ldr	r3, [pc, #324]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052d2:	e065      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e6:	4b40      	ldr	r3, [pc, #256]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800530a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005316:	e043      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532a:	4b2f      	ldr	r3, [pc, #188]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533a:	ed97 6a02 	vldr	s12, [r7, #8]
 800533e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800534e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800535a:	e021      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2ec>
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005382:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800539e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	0a5b      	lsrs	r3, r3, #9
 80053a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053aa:	3301      	adds	r3, #1
 80053ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c4:	ee17 3a90 	vmov	r3, s15
 80053c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053ca:	e005      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61bb      	str	r3, [r7, #24]
      break;
 80053d0:	e002      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053d2:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053d4:	61bb      	str	r3, [r7, #24]
      break;
 80053d6:	bf00      	nop
  }

  return sysclockfreq;
 80053d8:	69bb      	ldr	r3, [r7, #24]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	@ 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
 80053ec:	03d09000 	.word	0x03d09000
 80053f0:	003d0900 	.word	0x003d0900
 80053f4:	017d7840 	.word	0x017d7840
 80053f8:	46000000 	.word	0x46000000
 80053fc:	4c742400 	.word	0x4c742400
 8005400:	4a742400 	.word	0x4a742400
 8005404:	4bbebc20 	.word	0x4bbebc20

08005408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800540e:	f7ff fe81 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8005412:	4602      	mov	r2, r0
 8005414:	4b10      	ldr	r3, [pc, #64]	@ (8005458 <HAL_RCC_GetHCLKFreq+0x50>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	0a1b      	lsrs	r3, r3, #8
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	490f      	ldr	r1, [pc, #60]	@ (800545c <HAL_RCC_GetHCLKFreq+0x54>)
 8005420:	5ccb      	ldrb	r3, [r1, r3]
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800542c:	4b0a      	ldr	r3, [pc, #40]	@ (8005458 <HAL_RCC_GetHCLKFreq+0x50>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	4a09      	ldr	r2, [pc, #36]	@ (800545c <HAL_RCC_GetHCLKFreq+0x54>)
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a07      	ldr	r2, [pc, #28]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x58>)
 8005444:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005446:	4a07      	ldr	r2, [pc, #28]	@ (8005464 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800544c:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x58>)
 800544e:	681b      	ldr	r3, [r3, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	58024400 	.word	0x58024400
 800545c:	0800eaac 	.word	0x0800eaac
 8005460:	24000004 	.word	0x24000004
 8005464:	24000000 	.word	0x24000000

08005468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800546c:	f7ff ffcc 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	@ (8005490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	58024400 	.word	0x58024400
 8005490:	0800eaac 	.word	0x0800eaac

08005494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005498:	f7ff ffb6 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4904      	ldr	r1, [pc, #16]	@ (80054bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	0800eaac 	.word	0x0800eaac

080054c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c4:	b0cc      	sub	sp, #304	@ 0x130
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054e4:	2500      	movs	r5, #0
 80054e6:	ea54 0305 	orrs.w	r3, r4, r5
 80054ea:	d049      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054f6:	d02f      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054fc:	d828      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005502:	d01a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005508:	d822      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005512:	d007      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005514:	e01c      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005516:	4bb8      	ldr	r3, [pc, #736]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	4ab7      	ldr	r2, [pc, #732]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800551c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005522:	e01a      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005528:	3308      	adds	r3, #8
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f002 fba1 	bl	8007c74 <RCCEx_PLL2_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005538:	e00f      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800553a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800553e:	3328      	adds	r3, #40	@ 0x28
 8005540:	2102      	movs	r1, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fc48 	bl	8007dd8 <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800554e:	e004      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005556:	e000      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005562:	4ba5      	ldr	r3, [pc, #660]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005566:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800556a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800556e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005570:	4aa1      	ldr	r2, [pc, #644]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005572:	430b      	orrs	r3, r1
 8005574:	6513      	str	r3, [r2, #80]	@ 0x50
 8005576:	e003      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800557c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800558c:	f04f 0900 	mov.w	r9, #0
 8005590:	ea58 0309 	orrs.w	r3, r8, r9
 8005594:	d047      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559c:	2b04      	cmp	r3, #4
 800559e:	d82a      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055a0:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055bd 	.word	0x080055bd
 80055ac:	080055cb 	.word	0x080055cb
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	080055ff 	.word	0x080055ff
 80055b8:	080055ff 	.word	0x080055ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055bc:	4b8e      	ldr	r3, [pc, #568]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	4a8d      	ldr	r2, [pc, #564]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055c8:	e01a      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ce:	3308      	adds	r3, #8
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f002 fb4e 	bl	8007c74 <RCCEx_PLL2_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055de:	e00f      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055e4:	3328      	adds	r3, #40	@ 0x28
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f002 fbf5 	bl	8007dd8 <RCCEx_PLL3_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055f4:	e004      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055fc:	e000      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005600:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005608:	4b7b      	ldr	r3, [pc, #492]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800560a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560c:	f023 0107 	bic.w	r1, r3, #7
 8005610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005616:	4a78      	ldr	r2, [pc, #480]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005618:	430b      	orrs	r3, r1
 800561a:	6513      	str	r3, [r2, #80]	@ 0x50
 800561c:	e003      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005622:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005626:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005632:	f04f 0b00 	mov.w	fp, #0
 8005636:	ea5a 030b 	orrs.w	r3, sl, fp
 800563a:	d04c      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800563c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d030      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564c:	d829      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800564e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005650:	d02d      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005652:	2bc0      	cmp	r3, #192	@ 0xc0
 8005654:	d825      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005656:	2b80      	cmp	r3, #128	@ 0x80
 8005658:	d018      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800565a:	2b80      	cmp	r3, #128	@ 0x80
 800565c:	d821      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005662:	2b40      	cmp	r3, #64	@ 0x40
 8005664:	d007      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005666:	e01c      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005668:	4b63      	ldr	r3, [pc, #396]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	4a62      	ldr	r2, [pc, #392]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800566e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005674:	e01c      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005676:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567a:	3308      	adds	r3, #8
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f002 faf8 	bl	8007c74 <RCCEx_PLL2_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800568a:	e011      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800568c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005690:	3328      	adds	r3, #40	@ 0x28
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f002 fb9f 	bl	8007dd8 <RCCEx_PLL3_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056a0:	e006      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056b8:	4b4f      	ldr	r3, [pc, #316]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c6:	4a4c      	ldr	r2, [pc, #304]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80056e6:	2300      	movs	r3, #0
 80056e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80056ec:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80056f0:	460b      	mov	r3, r1
 80056f2:	4313      	orrs	r3, r2
 80056f4:	d053      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005702:	d035      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005704:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005708:	d82e      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800570a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800570e:	d031      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005710:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005714:	d828      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800571a:	d01a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800571c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005720:	d822      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800572a:	d007      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800572c:	e01c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572e:	4b32      	ldr	r3, [pc, #200]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	4a31      	ldr	r2, [pc, #196]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800573a:	e01c      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800573c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005740:	3308      	adds	r3, #8
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f002 fa95 	bl	8007c74 <RCCEx_PLL2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005750:	e011      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005756:	3328      	adds	r3, #40	@ 0x28
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f002 fb3c 	bl	8007dd8 <RCCEx_PLL3_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005766:	e006      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800576e:	e002      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800577e:	4b1e      	ldr	r3, [pc, #120]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800578a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800578e:	4a1a      	ldr	r2, [pc, #104]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005790:	430b      	orrs	r3, r1
 8005792:	6593      	str	r3, [r2, #88]	@ 0x58
 8005794:	e003      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005796:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800579a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800579e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80057ae:	2300      	movs	r3, #0
 80057b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80057b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80057b8:	460b      	mov	r3, r1
 80057ba:	4313      	orrs	r3, r2
 80057bc:	d056      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ca:	d038      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057d0:	d831      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057d6:	d034      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057dc:	d82b      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057e2:	d01d      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057e8:	d825      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057f4:	e01f      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	4aa1      	ldr	r2, [pc, #644]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005808:	e01c      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800580a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800580e:	3308      	adds	r3, #8
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f002 fa2e 	bl	8007c74 <RCCEx_PLL2_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800581e:	e011      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005820:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005824:	3328      	adds	r3, #40	@ 0x28
 8005826:	2100      	movs	r1, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f002 fad5 	bl	8007dd8 <RCCEx_PLL3_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005834:	e006      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800583c:	e002      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005844:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10b      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800584c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800584e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005850:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005858:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800585c:	4a8a      	ldr	r2, [pc, #552]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800585e:	430b      	orrs	r3, r1
 8005860:	6593      	str	r3, [r2, #88]	@ 0x58
 8005862:	e003      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005868:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800586c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005878:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005882:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d03a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800588c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005892:	2b30      	cmp	r3, #48	@ 0x30
 8005894:	d01f      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005896:	2b30      	cmp	r3, #48	@ 0x30
 8005898:	d819      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800589a:	2b20      	cmp	r3, #32
 800589c:	d00c      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d815      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d019      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d111      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058aa:	4b77      	ldr	r3, [pc, #476]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	4a76      	ldr	r2, [pc, #472]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058b6:	e011      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058bc:	3308      	adds	r3, #8
 80058be:	2102      	movs	r1, #2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f002 f9d7 	bl	8007c74 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058cc:	e006      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058d4:	e002      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058e4:	4b68      	ldr	r3, [pc, #416]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f2:	4a65      	ldr	r2, [pc, #404]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f4:	430b      	orrs	r3, r1
 80058f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058f8:	e003      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800590e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005912:	2300      	movs	r3, #0
 8005914:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005918:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d051      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800592c:	d035      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800592e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005932:	d82e      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005934:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005938:	d031      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800593a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800593e:	d828      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005944:	d01a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594a:	d822      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005954:	d007      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005956:	e01c      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005958:	4b4b      	ldr	r3, [pc, #300]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005964:	e01c      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800596a:	3308      	adds	r3, #8
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f002 f980 	bl	8007c74 <RCCEx_PLL2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800597a:	e011      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800597c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005980:	3328      	adds	r3, #40	@ 0x28
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f002 fa27 	bl	8007dd8 <RCCEx_PLL3_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005990:	e006      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005998:	e002      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800599e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059a8:	4b37      	ldr	r3, [pc, #220]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80059b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b6:	4a34      	ldr	r2, [pc, #208]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d056      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f0:	d033      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f6:	d82c      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059fc:	d02f      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a02:	d826      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a08:	d02b      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a0e:	d820      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a14:	d012      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a1a:	d81a      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d022      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a24:	d115      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f002 f920 	bl	8007c74 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e015      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a40:	3328      	adds	r3, #40	@ 0x28
 8005a42:	2101      	movs	r1, #1
 8005a44:	4618      	mov	r0, r3
 8005a46:	f002 f9c7 	bl	8007dd8 <RCCEx_PLL3_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a50:	e00a      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10d      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a70:	4b05      	ldr	r3, [pc, #20]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a7e:	4a02      	ldr	r2, [pc, #8]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a84:	e006      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aaa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d055      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac0:	d033      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac6:	d82c      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005acc:	d02f      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad2:	d826      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ad4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ad8:	d02b      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ade:	d820      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ae4:	d012      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aea:	d81a      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d022      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af4:	d115      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005afa:	3308      	adds	r3, #8
 8005afc:	2101      	movs	r1, #1
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 f8b8 	bl	8007c74 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e015      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b10:	3328      	adds	r3, #40	@ 0x28
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f002 f95f 	bl	8007dd8 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b20:	e00a      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b28:	e006      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b40:	4bb6      	ldr	r3, [pc, #728]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b50:	4ab2      	ldr	r2, [pc, #712]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d02a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8e:	d10a      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b94:	3308      	adds	r3, #8
 8005b96:	2101      	movs	r1, #1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f002 f86b 	bl	8007c74 <RCCEx_PLL2_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005ba4:	e004      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bac:	e000      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005bb8:	4b98      	ldr	r3, [pc, #608]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	4a95      	ldr	r2, [pc, #596]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bcc:	e003      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005be6:	2300      	movs	r3, #0
 8005be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	d037      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c00:	d00e      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c06:	d816      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d018      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c10:	d111      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c12:	4b82      	ldr	r3, [pc, #520]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	4a81      	ldr	r2, [pc, #516]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c1e:	e00f      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c24:	3308      	adds	r3, #8
 8005c26:	2101      	movs	r1, #1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f002 f823 	bl	8007c74 <RCCEx_PLL2_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c34:	e004      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c3c:	e000      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c48:	4b74      	ldr	r3, [pc, #464]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c56:	4a71      	ldr	r2, [pc, #452]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c5c:	e003      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c76:	2300      	movs	r3, #0
 8005c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c7c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4313      	orrs	r3, r2
 8005c84:	d03a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d81d      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005ca9 	.word	0x08005ca9
 8005ca0:	08005cb7 	.word	0x08005cb7
 8005ca4:	08005cd5 	.word	0x08005cd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	4a5b      	ldr	r2, [pc, #364]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cb4:	e00f      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cba:	3308      	adds	r3, #8
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 ffd8 	bl	8007c74 <RCCEx_PLL2_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cde:	4b4f      	ldr	r3, [pc, #316]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	f023 0103 	bic.w	r1, r3, #3
 8005ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cec:	4a4b      	ldr	r2, [pc, #300]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cf8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f000 80a0 	beq.w	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d1e:	4b40      	ldr	r3, [pc, #256]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a3f      	ldr	r2, [pc, #252]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d2a:	f7fc f8af 	bl	8001e8c <HAL_GetTick>
 8005d2e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d32:	e00b      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d34:	f7fc f8aa 	bl	8001e8c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b64      	cmp	r3, #100	@ 0x64
 8005d42:	d903      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d4a:	e005      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d4c:	4b34      	ldr	r3, [pc, #208]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0ed      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005d58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d17a      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d60:	4b2e      	ldr	r3, [pc, #184]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d6c:	4053      	eors	r3, r2
 8005d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d015      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d76:	4b29      	ldr	r3, [pc, #164]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d82:	4b26      	ldr	r3, [pc, #152]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d86:	4a25      	ldr	r2, [pc, #148]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d8e:	4b23      	ldr	r3, [pc, #140]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	4a22      	ldr	r2, [pc, #136]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d9a:	4a20      	ldr	r2, [pc, #128]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005da0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005da6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dae:	d118      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc f86c 	bl	8001e8c <HAL_GetTick>
 8005db4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db8:	e00d      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dba:	f7fc f867 	bl	8001e8c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d903      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005dd4:	e005      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dd6:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0eb      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005de2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d130      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dfa:	d115      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005dfc:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e0c:	091a      	lsrs	r2, r3, #4
 8005e0e:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	4a02      	ldr	r2, [pc, #8]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6113      	str	r3, [r2, #16]
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005e1a:	bf00      	nop
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	58024800 	.word	0x58024800
 8005e24:	00ffffcf 	.word	0x00ffffcf
 8005e28:	4bd4      	ldr	r3, [pc, #848]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	4ad3      	ldr	r2, [pc, #844]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e32:	6113      	str	r3, [r2, #16]
 8005e34:	4bd1      	ldr	r3, [pc, #836]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e36:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e44:	4acd      	ldr	r2, [pc, #820]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4a:	e008      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005e54:	e003      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f002 0301 	and.w	r3, r2, #1
 8005e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f000 808b 	beq.w	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e88:	2b28      	cmp	r3, #40	@ 0x28
 8005e8a:	d86b      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e94 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005f6d 	.word	0x08005f6d
 8005e98:	08005f65 	.word	0x08005f65
 8005e9c:	08005f65 	.word	0x08005f65
 8005ea0:	08005f65 	.word	0x08005f65
 8005ea4:	08005f65 	.word	0x08005f65
 8005ea8:	08005f65 	.word	0x08005f65
 8005eac:	08005f65 	.word	0x08005f65
 8005eb0:	08005f65 	.word	0x08005f65
 8005eb4:	08005f39 	.word	0x08005f39
 8005eb8:	08005f65 	.word	0x08005f65
 8005ebc:	08005f65 	.word	0x08005f65
 8005ec0:	08005f65 	.word	0x08005f65
 8005ec4:	08005f65 	.word	0x08005f65
 8005ec8:	08005f65 	.word	0x08005f65
 8005ecc:	08005f65 	.word	0x08005f65
 8005ed0:	08005f65 	.word	0x08005f65
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08005f65 	.word	0x08005f65
 8005edc:	08005f65 	.word	0x08005f65
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	08005f65 	.word	0x08005f65
 8005ee8:	08005f65 	.word	0x08005f65
 8005eec:	08005f65 	.word	0x08005f65
 8005ef0:	08005f65 	.word	0x08005f65
 8005ef4:	08005f6d 	.word	0x08005f6d
 8005ef8:	08005f65 	.word	0x08005f65
 8005efc:	08005f65 	.word	0x08005f65
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08005f65 	.word	0x08005f65
 8005f08:	08005f65 	.word	0x08005f65
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f65 	.word	0x08005f65
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08005f6d 	.word	0x08005f6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fe97 	bl	8007c74 <RCCEx_PLL2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e00f      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f52:	3328      	adds	r3, #40	@ 0x28
 8005f54:	2101      	movs	r1, #1
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 ff3e 	bl	8007dd8 <RCCEx_PLL3_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f62:	e004      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f6a:	e000      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f76:	4b81      	ldr	r3, [pc, #516]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f86:	4a7d      	ldr	r2, [pc, #500]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f8c:	e003      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f002 0302 	and.w	r3, r2, #2
 8005fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	d042      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	d825      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	08006015 	.word	0x08006015
 8005fcc:	08005fe1 	.word	0x08005fe1
 8005fd0:	08005ff7 	.word	0x08005ff7
 8005fd4:	08006015 	.word	0x08006015
 8005fd8:	08006015 	.word	0x08006015
 8005fdc:	08006015 	.word	0x08006015
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fe43 	bl	8007c74 <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e00f      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ffa:	3328      	adds	r3, #40	@ 0x28
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 feea 	bl	8007dd8 <RCCEx_PLL3_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800601e:	4b57      	ldr	r3, [pc, #348]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	f023 0107 	bic.w	r1, r3, #7
 8006026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800602a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800602c:	4a53      	ldr	r2, [pc, #332]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800602e:	430b      	orrs	r3, r1
 8006030:	6553      	str	r3, [r2, #84]	@ 0x54
 8006032:	e003      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006038:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800603c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f002 0304 	and.w	r3, r2, #4
 8006048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006052:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	d044      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800605c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006064:	2b05      	cmp	r3, #5
 8006066:	d825      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	080060bd 	.word	0x080060bd
 8006074:	08006089 	.word	0x08006089
 8006078:	0800609f 	.word	0x0800609f
 800607c:	080060bd 	.word	0x080060bd
 8006080:	080060bd 	.word	0x080060bd
 8006084:	080060bd 	.word	0x080060bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800608c:	3308      	adds	r3, #8
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fdef 	bl	8007c74 <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800609c:	e00f      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800609e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a2:	3328      	adds	r3, #40	@ 0x28
 80060a4:	2101      	movs	r1, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fe96 	bl	8007dd8 <RCCEx_PLL3_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060b2:	e004      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80060bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060c6:	4b2d      	ldr	r3, [pc, #180]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ca:	f023 0107 	bic.w	r1, r3, #7
 80060ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060d6:	4a29      	ldr	r2, [pc, #164]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	6593      	str	r3, [r2, #88]	@ 0x58
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f002 0320 	and.w	r3, r2, #32
 80060f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006100:	460b      	mov	r3, r1
 8006102:	4313      	orrs	r3, r2
 8006104:	d057      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800610e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006112:	d035      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006118:	d82c      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611e:	d031      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006124:	d826      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006126:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800612a:	d02d      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800612c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006130:	d820      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006136:	d012      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800613c:	d81a      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d024      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006146:	d115      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800614c:	3308      	adds	r3, #8
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f001 fd8f 	bl	8007c74 <RCCEx_PLL2_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800615c:	e017      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006162:	3328      	adds	r3, #40	@ 0x28
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fe36 	bl	8007dd8 <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006172:	e00c      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800617a:	e008      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800617c:	58024400 	.word	0x58024400
        break;
 8006180:	bf00      	nop
 8006182:	e004      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006184:	bf00      	nop
 8006186:	e002      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006188:	bf00      	nop
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006196:	4bc2      	ldr	r3, [pc, #776]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800619e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061a6:	4abe      	ldr	r2, [pc, #760]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80061ac:	e003      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80061c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061c6:	2300      	movs	r3, #0
 80061c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4313      	orrs	r3, r2
 80061d4:	d055      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061e2:	d033      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80061e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061e8:	d82c      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80061ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ee:	d02f      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80061f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f4:	d826      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80061f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061fa:	d02b      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80061fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006200:	d820      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006206:	d012      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800620c:	d81a      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d022      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006216:	d115      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621c:	3308      	adds	r3, #8
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fd27 	bl	8007c74 <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800622c:	e015      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800622e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006232:	3328      	adds	r3, #40	@ 0x28
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fdce 	bl	8007dd8 <RCCEx_PLL3_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006242:	e00a      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800624a:	e006      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800624c:	bf00      	nop
 800624e:	e004      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006250:	bf00      	nop
 8006252:	e002      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006254:	bf00      	nop
 8006256:	e000      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006262:	4b8f      	ldr	r3, [pc, #572]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006266:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006272:	4a8b      	ldr	r2, [pc, #556]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006274:	430b      	orrs	r3, r1
 8006276:	6593      	str	r3, [r2, #88]	@ 0x58
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800627e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800628e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006292:	2300      	movs	r3, #0
 8006294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006298:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d055      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80062a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80062ae:	d033      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80062b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80062b4:	d82c      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ba:	d02f      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c0:	d826      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80062c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062c6:	d02b      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80062c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062cc:	d820      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80062ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062d2:	d012      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80062d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062d8:	d81a      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d022      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e2:	d115      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e8:	3308      	adds	r3, #8
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fcc1 	bl	8007c74 <RCCEx_PLL2_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062f8:	e015      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062fe:	3328      	adds	r3, #40	@ 0x28
 8006300:	2102      	movs	r1, #2
 8006302:	4618      	mov	r0, r3
 8006304:	f001 fd68 	bl	8007dd8 <RCCEx_PLL3_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800630e:	e00a      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006316:	e006      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006318:	bf00      	nop
 800631a:	e004      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800631c:	bf00      	nop
 800631e:	e002      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006320:	bf00      	nop
 8006322:	e000      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800632e:	4b5c      	ldr	r3, [pc, #368]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800633a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800633e:	4a58      	ldr	r2, [pc, #352]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006340:	430b      	orrs	r3, r1
 8006342:	6593      	str	r3, [r2, #88]	@ 0x58
 8006344:	e003      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006346:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800634a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800634e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f002 0308 	and.w	r3, r2, #8
 800635a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800635e:	2300      	movs	r3, #0
 8006360:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006364:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d01e      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800636e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637a:	d10c      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800637c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006380:	3328      	adds	r3, #40	@ 0x28
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fd27 	bl	8007dd8 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006396:	4b42      	ldr	r3, [pc, #264]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800639e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a6:	4a3e      	ldr	r2, [pc, #248]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f002 0310 	and.w	r3, r2, #16
 80063b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063bc:	2300      	movs	r3, #0
 80063be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80063c6:	460b      	mov	r3, r1
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d01e      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063de:	3328      	adds	r3, #40	@ 0x28
 80063e0:	2102      	movs	r1, #2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fcf8 	bl	8007dd8 <RCCEx_PLL3_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063f4:	4b2a      	ldr	r3, [pc, #168]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006404:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006406:	430b      	orrs	r3, r1
 8006408:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800640a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800641a:	2300      	movs	r3, #0
 800641c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006420:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006424:	460b      	mov	r3, r1
 8006426:	4313      	orrs	r3, r2
 8006428:	d040      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800642a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800642e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006436:	d022      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800643c:	d81b      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006446:	d00b      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006448:	e015      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800644a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644e:	3308      	adds	r3, #8
 8006450:	2100      	movs	r1, #0
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fc0e 	bl	8007c74 <RCCEx_PLL2_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800645e:	e00f      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006464:	3328      	adds	r3, #40	@ 0x28
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fcb5 	bl	8007dd8 <RCCEx_PLL3_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006474:	e004      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800647c:	e000      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800647e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006480:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10d      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006488:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800648a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006494:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006498:	4a01      	ldr	r2, [pc, #4]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800649a:	430b      	orrs	r3, r1
 800649c:	6593      	str	r3, [r2, #88]	@ 0x58
 800649e:	e005      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80064a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80064b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064ba:	2300      	movs	r3, #0
 80064bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80064c2:	460b      	mov	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d03b      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064d4:	d01f      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80064d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064da:	d818      	bhi.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80064dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e0:	d003      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80064e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064e6:	d007      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80064e8:	e011      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ea:	4b64      	ldr	r3, [pc, #400]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	4a63      	ldr	r2, [pc, #396]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064f6:	e00f      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fc:	3328      	adds	r3, #40	@ 0x28
 80064fe:	2101      	movs	r1, #1
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fc69 	bl	8007dd8 <RCCEx_PLL3_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800650c:	e004      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006514:	e000      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006518:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006520:	4b56      	ldr	r3, [pc, #344]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006524:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800652c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006530:	4a52      	ldr	r2, [pc, #328]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006532:	430b      	orrs	r3, r1
 8006534:	6553      	str	r3, [r2, #84]	@ 0x54
 8006536:	e003      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800653c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800654c:	673b      	str	r3, [r7, #112]	@ 0x70
 800654e:	2300      	movs	r3, #0
 8006550:	677b      	str	r3, [r7, #116]	@ 0x74
 8006552:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006556:	460b      	mov	r3, r1
 8006558:	4313      	orrs	r3, r2
 800655a:	d031      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800655c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656a:	d007      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800656c:	e011      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656e:	4b43      	ldr	r3, [pc, #268]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4a42      	ldr	r2, [pc, #264]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800657a:	e00e      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800657c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006580:	3308      	adds	r3, #8
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f001 fb75 	bl	8007c74 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006590:	e003      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065a2:	4b36      	ldr	r3, [pc, #216]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b0:	4a32      	ldr	r2, [pc, #200]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065b6:	e003      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ce:	2300      	movs	r3, #0
 80065d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d00c      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065e0:	3328      	adds	r3, #40	@ 0x28
 80065e2:	2102      	movs	r1, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 fbf7 	bl	8007dd8 <RCCEx_PLL3_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006602:	663b      	str	r3, [r7, #96]	@ 0x60
 8006604:	2300      	movs	r3, #0
 8006606:	667b      	str	r3, [r7, #100]	@ 0x64
 8006608:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d03a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800661a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800661e:	d018      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006624:	d811      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662a:	d014      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800662c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006630:	d80b      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d011      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663a:	d106      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663c:	4b0f      	ldr	r3, [pc, #60]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	4a0e      	ldr	r2, [pc, #56]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006648:	e008      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006650:	e004      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800665a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006664:	4b05      	ldr	r3, [pc, #20]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006668:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800666c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006674:	4a01      	ldr	r2, [pc, #4]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6553      	str	r3, [r2, #84]	@ 0x54
 800667a:	e005      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800667c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006684:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006694:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006696:	2300      	movs	r3, #0
 8006698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800669a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800669e:	460b      	mov	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d009      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066a4:	4baa      	ldr	r3, [pc, #680]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80066a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80066ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066b2:	4aa7      	ldr	r2, [pc, #668]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80066c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80066c6:	2300      	movs	r3, #0
 80066c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80066ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066d4:	4b9e      	ldr	r3, [pc, #632]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80066dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80066e6:	430b      	orrs	r3, r1
 80066e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80066f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066f8:	2300      	movs	r3, #0
 80066fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006700:	460b      	mov	r3, r1
 8006702:	4313      	orrs	r3, r2
 8006704:	d009      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006706:	4b92      	ldr	r3, [pc, #584]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800670a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800670e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006714:	4a8e      	ldr	r2, [pc, #568]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006716:	430b      	orrs	r3, r1
 8006718:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800671a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006726:	643b      	str	r3, [r7, #64]	@ 0x40
 8006728:	2300      	movs	r3, #0
 800672a:	647b      	str	r3, [r7, #68]	@ 0x44
 800672c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006730:	460b      	mov	r3, r1
 8006732:	4313      	orrs	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006736:	4b86      	ldr	r3, [pc, #536]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	4a85      	ldr	r2, [pc, #532]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800673c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006740:	6113      	str	r3, [r2, #16]
 8006742:	4b83      	ldr	r3, [pc, #524]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006744:	6919      	ldr	r1, [r3, #16]
 8006746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800674a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800674e:	4a80      	ldr	r2, [pc, #512]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006750:	430b      	orrs	r3, r1
 8006752:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006766:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006770:	4b77      	ldr	r3, [pc, #476]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006774:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800677c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677e:	4a74      	ldr	r2, [pc, #464]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006780:	430b      	orrs	r3, r1
 8006782:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006790:	633b      	str	r3, [r7, #48]	@ 0x30
 8006792:	2300      	movs	r3, #0
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d00a      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80067a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80067a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b0:	4a67      	ldr	r2, [pc, #412]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80067b2:	430b      	orrs	r3, r1
 80067b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	2100      	movs	r1, #0
 80067c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80067cc:	460b      	mov	r3, r1
 80067ce:	4313      	orrs	r3, r2
 80067d0:	d011      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067d6:	3308      	adds	r3, #8
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fa4a 	bl	8007c74 <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80067e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	2100      	movs	r1, #0
 8006800:	6239      	str	r1, [r7, #32]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
 8006808:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d011      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006816:	3308      	adds	r3, #8
 8006818:	2101      	movs	r1, #1
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fa2a 	bl	8007c74 <RCCEx_PLL2_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006826:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006832:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	2100      	movs	r1, #0
 8006840:	61b9      	str	r1, [r7, #24]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d011      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006856:	3308      	adds	r3, #8
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f001 fa0a 	bl	8007c74 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006866:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006872:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	2100      	movs	r1, #0
 8006880:	6139      	str	r1, [r7, #16]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d011      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006896:	3328      	adds	r3, #40	@ 0x28
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fa9c 	bl	8007dd8 <RCCEx_PLL3_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80068a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	2100      	movs	r1, #0
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068cc:	460b      	mov	r3, r1
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d011      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068d6:	3328      	adds	r3, #40	@ 0x28
 80068d8:	2101      	movs	r1, #1
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fa7c 	bl	8007dd8 <RCCEx_PLL3_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80068e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	2100      	movs	r1, #0
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	e9d7 1200 	ldrd	r1, r2, [r7]
 800690c:	460b      	mov	r3, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	d011      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006916:	3328      	adds	r3, #40	@ 0x28
 8006918:	2102      	movs	r1, #2
 800691a:	4618      	mov	r0, r3
 800691c:	f001 fa5c 	bl	8007dd8 <RCCEx_PLL3_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006926:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006932:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006936:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
}
 8006944:	4618      	mov	r0, r3
 8006946:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800694a:	46bd      	mov	sp, r7
 800694c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006950:	58024400 	.word	0x58024400

08006954 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b090      	sub	sp, #64	@ 0x40
 8006958:	af00      	add	r7, sp, #0
 800695a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800695e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006962:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006966:	430b      	orrs	r3, r1
 8006968:	f040 8094 	bne.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800696c:	4b9e      	ldr	r3, [pc, #632]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800696e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	2b04      	cmp	r3, #4
 800697a:	f200 8087 	bhi.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800697e:	a201      	add	r2, pc, #4	@ (adr r2, 8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	08006999 	.word	0x08006999
 8006988:	080069c1 	.word	0x080069c1
 800698c:	080069e9 	.word	0x080069e9
 8006990:	08006a85 	.word	0x08006a85
 8006994:	08006a11 	.word	0x08006a11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006998:	4b93      	ldr	r3, [pc, #588]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069a4:	d108      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 f810 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069b4:	f000 bd45 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069bc:	f000 bd41 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069c0:	4b89      	ldr	r3, [pc, #548]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069cc:	d108      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ce:	f107 0318 	add.w	r3, r7, #24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fd54 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069dc:	f000 bd31 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e4:	f000 bd2d 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069e8:	4b7f      	ldr	r3, [pc, #508]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f4:	d108      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f6:	f107 030c 	add.w	r3, r7, #12
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fe94 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a04:	f000 bd1d 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a0c:	f000 bd19 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a10:	4b75      	ldr	r3, [pc, #468]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a1a:	4b73      	ldr	r3, [pc, #460]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d109      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a2c:	4b6e      	ldr	r3, [pc, #440]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a6d      	ldr	r2, [pc, #436]	@ (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a3e:	e01f      	b.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a40:	4b69      	ldr	r3, [pc, #420]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a4c:	d106      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a54:	d102      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a56:	4b66      	ldr	r3, [pc, #408]	@ (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a5a:	e011      	b.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a5c:	4b62      	ldr	r3, [pc, #392]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a68:	d106      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a70:	d102      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a72:	4b60      	ldr	r3, [pc, #384]	@ (8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a7c:	f000 bce1 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a80:	f000 bcdf 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a84:	4b5c      	ldr	r3, [pc, #368]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a88:	f000 bcdb 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a90:	f000 bcd7 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	f040 80ad 	bne.w	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006aa2:	4b51      	ldr	r3, [pc, #324]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006aaa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab2:	d056      	beq.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aba:	f200 8090 	bhi.w	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ac2:	f000 8088 	beq.w	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aca:	f200 8088 	bhi.w	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	2b80      	cmp	r3, #128	@ 0x80
 8006ad2:	d032      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	f200 8081 	bhi.w	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	2b40      	cmp	r3, #64	@ 0x40
 8006ae6:	d014      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006ae8:	e079      	b.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aea:	4b3f      	ldr	r3, [pc, #252]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006af6:	d108      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 ff67 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b06:	f000 bc9c 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b0e:	f000 bc98 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b12:	4b35      	ldr	r3, [pc, #212]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1e:	d108      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b20:	f107 0318 	add.w	r3, r7, #24
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fcab 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b2e:	f000 bc88 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b36:	f000 bc84 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b46:	d108      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fdeb 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b56:	f000 bc74 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b5e:	f000 bc70 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b62:	4b21      	ldr	r3, [pc, #132]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d10c      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	4a18      	ldr	r2, [pc, #96]	@ (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b90:	e01f      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b92:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9e:	d106      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ba6:	d102      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ba8:	4b11      	ldr	r3, [pc, #68]	@ (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bac:	e011      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bae:	4b0e      	ldr	r3, [pc, #56]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bba:	d106      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc2:	d102      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc8:	e003      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006bce:	f000 bc38 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd2:	f000 bc36 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bd6:	4b08      	ldr	r3, [pc, #32]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bda:	f000 bc32 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be2:	f000 bc2e 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006be6:	bf00      	nop
 8006be8:	58024400 	.word	0x58024400
 8006bec:	03d09000 	.word	0x03d09000
 8006bf0:	003d0900 	.word	0x003d0900
 8006bf4:	017d7840 	.word	0x017d7840
 8006bf8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006c04:	430b      	orrs	r3, r1
 8006c06:	f040 809c 	bne.w	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006c12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c1a:	d054      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c22:	f200 808b 	bhi.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c2c:	f000 8083 	beq.w	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c36:	f200 8081 	bhi.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c40:	d02f      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c48:	d878      	bhi.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c56:	d012      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006c58:	e070      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c5a:	4b8a      	ldr	r3, [pc, #552]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c66:	d107      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 feaf 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c76:	e3e4      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e3e1      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c7e:	4b81      	ldr	r3, [pc, #516]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c8c:	f107 0318 	add.w	r3, r7, #24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fbf5 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c9a:	e3d2      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca0:	e3cf      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ca2:	4b78      	ldr	r3, [pc, #480]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fd37 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cbe:	e3c0      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e3bd      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d10c      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce2:	4b68      	ldr	r3, [pc, #416]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	08db      	lsrs	r3, r3, #3
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	4a66      	ldr	r2, [pc, #408]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cee:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf4:	e01e      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cf6:	4b63      	ldr	r3, [pc, #396]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d02:	d106      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d0a:	d102      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d0c:	4b5f      	ldr	r3, [pc, #380]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d10:	e010      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d12:	4b5c      	ldr	r3, [pc, #368]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d26:	d102      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d28:	4b59      	ldr	r3, [pc, #356]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d2c:	e002      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d32:	e386      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d34:	e385      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d36:	4b57      	ldr	r3, [pc, #348]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d3a:	e382      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d40:	e37f      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d46:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	f040 80a7 	bne.w	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006d50:	4b4c      	ldr	r3, [pc, #304]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d54:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006d58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d60:	d055      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d68:	f200 8096 	bhi.w	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d72:	f000 8084 	beq.w	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d7c:	f200 808c 	bhi.w	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d86:	d030      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d8e:	f200 8083 	bhi.w	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d9e:	d012      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006da0:	e07a      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006da2:	4b38      	ldr	r3, [pc, #224]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fe0b 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e340      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc4:	e33d      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dd2:	d107      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd4:	f107 0318 	add.w	r3, r7, #24
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fb51 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de2:	e32e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de8:	e32b      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dea:	4b26      	ldr	r3, [pc, #152]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df6:	d107      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df8:	f107 030c 	add.w	r3, r7, #12
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fc93 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e06:	e31c      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0c:	e319      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e18:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d10c      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e2a:	4b16      	ldr	r3, [pc, #88]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	08db      	lsrs	r3, r3, #3
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	4a14      	ldr	r2, [pc, #80]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006e36:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e3c:	e01e      	b.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e3e:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e4a:	d106      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e52:	d102      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e54:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e58:	e010      	b.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e66:	d106      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e70:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e74:	e002      	b.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e7a:	e2e2      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e7c:	e2e1      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e7e:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e82:	e2de      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e84:	58024400 	.word	0x58024400
 8006e88:	03d09000 	.word	0x03d09000
 8006e8c:	003d0900 	.word	0x003d0900
 8006e90:	017d7840 	.word	0x017d7840
 8006e94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e9c:	e2d1      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	f040 809c 	bne.w	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006eac:	4b93      	ldr	r3, [pc, #588]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006eb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ebc:	d054      	beq.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ec4:	f200 808b 	bhi.w	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ece:	f000 8083 	beq.w	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ed8:	f200 8081 	bhi.w	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee2:	d02f      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eea:	d878      	bhi.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef8:	d012      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006efa:	e070      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006efc:	4b7f      	ldr	r3, [pc, #508]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fd5e 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f18:	e293      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1e:	e290      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f20:	4b76      	ldr	r3, [pc, #472]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 faa4 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3c:	e281      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f42:	e27e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f44:	4b6d      	ldr	r3, [pc, #436]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f50:	d107      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f52:	f107 030c 	add.w	r3, r7, #12
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fbe6 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f60:	e26f      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f66:	e26c      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f68:	4b64      	ldr	r3, [pc, #400]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f72:	4b62      	ldr	r3, [pc, #392]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b5d      	ldr	r3, [pc, #372]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a5c      	ldr	r2, [pc, #368]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f96:	e01e      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f98:	4b58      	ldr	r3, [pc, #352]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa4:	d106      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fae:	4b55      	ldr	r3, [pc, #340]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fb2:	e010      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fb4:	4b51      	ldr	r3, [pc, #324]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc0:	d106      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fca:	4b4f      	ldr	r3, [pc, #316]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fce:	e002      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006fd4:	e235      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fd6:	e234      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fd8:	4b4c      	ldr	r3, [pc, #304]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fdc:	e231      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe2:	e22e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006fec:	430b      	orrs	r3, r1
 8006fee:	f040 808f 	bne.w	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006ff2:	4b42      	ldr	r3, [pc, #264]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007002:	d06b      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800700a:	d874      	bhi.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007012:	d056      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800701a:	d86c      	bhi.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007022:	d03b      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800702a:	d864      	bhi.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007032:	d021      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703a:	d85c      	bhi.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007048:	d004      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800704a:	e054      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fe fa0c 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 8007050:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007052:	e1f6      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007054:	4b29      	ldr	r3, [pc, #164]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800705c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007060:	d107      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007062:	f107 0318 	add.w	r3, r7, #24
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fa0a 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007070:	e1e7      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007076:	e1e4      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007078:	4b20      	ldr	r3, [pc, #128]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007084:	d107      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007086:	f107 030c 	add.w	r3, r7, #12
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fb4c 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007094:	e1d5      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800709a:	e1d2      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800709c:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d109      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070a8:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	08db      	lsrs	r3, r3, #3
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	4a13      	ldr	r2, [pc, #76]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ba:	e1c2      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c0:	e1bf      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070c2:	4b0e      	ldr	r3, [pc, #56]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ce:	d102      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80070d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d4:	e1b5      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070da:	e1b2      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070dc:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070e8:	d102      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e1a8      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e1a5      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fa:	e1a2      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070fc:	58024400 	.word	0x58024400
 8007100:	03d09000 	.word	0x03d09000
 8007104:	003d0900 	.word	0x003d0900
 8007108:	017d7840 	.word	0x017d7840
 800710c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007114:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007118:	430b      	orrs	r3, r1
 800711a:	d173      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800711c:	4b9c      	ldr	r3, [pc, #624]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800711e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007124:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800712c:	d02f      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007134:	d863      	bhi.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007142:	d012      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007144:	e05b      	b.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007146:	4b92      	ldr	r3, [pc, #584]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800714e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007152:	d107      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007154:	f107 0318 	add.w	r3, r7, #24
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f991 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007162:	e16e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007168:	e16b      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800716a:	4b89      	ldr	r3, [pc, #548]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007176:	d107      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fad3 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007186:	e15c      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718c:	e159      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800718e:	4b80      	ldr	r3, [pc, #512]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007192:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007198:	4b7d      	ldr	r3, [pc, #500]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d10c      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80071a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071aa:	4b79      	ldr	r3, [pc, #484]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	08db      	lsrs	r3, r3, #3
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	4a77      	ldr	r2, [pc, #476]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071bc:	e01e      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071be:	4b74      	ldr	r3, [pc, #464]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071d4:	4b70      	ldr	r3, [pc, #448]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d8:	e010      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071da:	4b6d      	ldr	r3, [pc, #436]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071e6:	d106      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80071e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071ee:	d102      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071f0:	4b6a      	ldr	r3, [pc, #424]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071f4:	e002      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071fa:	e122      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071fc:	e121      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007202:	e11e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007208:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800720c:	430b      	orrs	r3, r1
 800720e:	d133      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007210:	4b5f      	ldr	r3, [pc, #380]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007218:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007226:	d012      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007228:	e023      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800722a:	4b59      	ldr	r3, [pc, #356]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007236:	d107      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fbc7 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007246:	e0fc      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e0f9      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800724e:	4b50      	ldr	r3, [pc, #320]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800725a:	d107      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725c:	f107 0318 	add.w	r3, r7, #24
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f90d 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726a:	e0ea      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007270:	e0e7      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007276:	e0e4      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007280:	430b      	orrs	r3, r1
 8007282:	f040 808d 	bne.w	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007286:	4b42      	ldr	r3, [pc, #264]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800728e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007296:	d06b      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800729e:	d874      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a6:	d056      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ae:	d86c      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072b6:	d03b      	beq.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072be:	d864      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c6:	d021      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80072c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ce:	d85c      	bhi.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072dc:	d004      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80072de:	e054      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80072e0:	f000 f8b8 	bl	8007454 <HAL_RCCEx_GetD3PCLK1Freq>
 80072e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80072e6:	e0ac      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072e8:	4b29      	ldr	r3, [pc, #164]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072f4:	d107      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f6:	f107 0318 	add.w	r3, r7, #24
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f8c0 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007304:	e09d      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800730a:	e09a      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800730c:	4b20      	ldr	r3, [pc, #128]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fa02 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007328:	e08b      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800732e:	e088      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007330:	4b17      	ldr	r3, [pc, #92]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b04      	cmp	r3, #4
 800733a:	d109      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800733c:	4b14      	ldr	r3, [pc, #80]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	08db      	lsrs	r3, r3, #3
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	4a13      	ldr	r2, [pc, #76]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800734e:	e078      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007354:	e075      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007356:	4b0e      	ldr	r3, [pc, #56]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007362:	d102      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007368:	e06b      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736e:	e068      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800737c:	d102      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800737e:	4b07      	ldr	r3, [pc, #28]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007382:	e05e      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007388:	e05b      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800738e:	e058      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007390:	58024400 	.word	0x58024400
 8007394:	03d09000 	.word	0x03d09000
 8007398:	003d0900 	.word	0x003d0900
 800739c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80073a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80073a8:	430b      	orrs	r3, r1
 80073aa:	d148      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80073ac:	4b27      	ldr	r3, [pc, #156]	@ (800744c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073bc:	d02a      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c4:	d838      	bhi.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80073c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80073cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073d2:	d00d      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80073d4:	e030      	b.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073d6:	4b1d      	ldr	r3, [pc, #116]	@ (800744c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073e2:	d102      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80073e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e8:	e02b      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ee:	e028      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073f0:	4b16      	ldr	r3, [pc, #88]	@ (800744c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073fc:	d107      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fae4 	bl	80079d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800740c:	e019      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007412:	e016      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007414:	4b0d      	ldr	r3, [pc, #52]	@ (800744c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800741c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007420:	d107      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007422:	f107 0318 	add.w	r3, r7, #24
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f82a 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007430:	e007      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007436:	e004      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800743c:	e001      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007444:	4618      	mov	r0, r3
 8007446:	3740      	adds	r7, #64	@ 0x40
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	58024400 	.word	0x58024400
 8007450:	017d7840 	.word	0x017d7840

08007454 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007458:	f7fd ffd6 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 800745c:	4602      	mov	r2, r0
 800745e:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	4904      	ldr	r1, [pc, #16]	@ (800747c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800746a:	5ccb      	ldrb	r3, [r1, r3]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	58024400 	.word	0x58024400
 800747c:	0800eaac 	.word	0x0800eaac

08007480 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	@ 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007488:	4ba1      	ldr	r3, [pc, #644]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007492:	4b9f      	ldr	r3, [pc, #636]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	0b1b      	lsrs	r3, r3, #12
 8007498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800749c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800749e:	4b9c      	ldr	r3, [pc, #624]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80074aa:	4b99      	ldr	r3, [pc, #612]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ae:	08db      	lsrs	r3, r3, #3
 80074b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8111 	beq.w	80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	f000 8083 	beq.w	80075dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	f200 80a1 	bhi.w	8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d056      	beq.n	8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074ea:	e099      	b.n	8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ec:	4b88      	ldr	r3, [pc, #544]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d02d      	beq.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f8:	4b85      	ldr	r3, [pc, #532]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	4a84      	ldr	r2, [pc, #528]	@ (8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
 8007508:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b7b      	ldr	r3, [pc, #492]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007552:	e087      	b.n	8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800771c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007566:	4b6a      	ldr	r3, [pc, #424]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007576:	ed97 6a03 	vldr	s12, [r7, #12]
 800757a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800757e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800758a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007596:	e065      	b.n	8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	4b59      	ldr	r3, [pc, #356]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80075be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075da:	e043      	b.n	8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007724 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ee:	4b48      	ldr	r3, [pc, #288]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007602:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761e:	e021      	b.n	8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800762e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007632:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007642:	ed97 6a03 	vldr	s12, [r7, #12]
 8007646:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800764a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007662:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007664:	4b2a      	ldr	r3, [pc, #168]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007668:	0a5b      	lsrs	r3, r3, #9
 800766a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800767a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800767e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768a:	ee17 2a90 	vmov	r2, s15
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007692:	4b1f      	ldr	r3, [pc, #124]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b8:	ee17 2a90 	vmov	r2, s15
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076c0:	4b13      	ldr	r3, [pc, #76]	@ (8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	0e1b      	lsrs	r3, r3, #24
 80076c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076da:	edd7 6a07 	vldr	s13, [r7, #28]
 80076de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e6:	ee17 2a90 	vmov	r2, s15
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076ee:	e008      	b.n	8007702 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	609a      	str	r2, [r3, #8]
}
 8007702:	bf00      	nop
 8007704:	3724      	adds	r7, #36	@ 0x24
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	58024400 	.word	0x58024400
 8007714:	03d09000 	.word	0x03d09000
 8007718:	46000000 	.word	0x46000000
 800771c:	4c742400 	.word	0x4c742400
 8007720:	4a742400 	.word	0x4a742400
 8007724:	4bbebc20 	.word	0x4bbebc20

08007728 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007728:	b480      	push	{r7}
 800772a:	b089      	sub	sp, #36	@ 0x24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007730:	4ba1      	ldr	r3, [pc, #644]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800773a:	4b9f      	ldr	r3, [pc, #636]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773e:	0d1b      	lsrs	r3, r3, #20
 8007740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007744:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007746:	4b9c      	ldr	r3, [pc, #624]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007752:	4b99      	ldr	r3, [pc, #612]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	08db      	lsrs	r3, r3, #3
 8007758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8111 	beq.w	8007998 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b02      	cmp	r3, #2
 800777a:	f000 8083 	beq.w	8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b02      	cmp	r3, #2
 8007782:	f200 80a1 	bhi.w	80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d056      	beq.n	8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007792:	e099      	b.n	80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007794:	4b88      	ldr	r3, [pc, #544]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d02d      	beq.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077a0:	4b85      	ldr	r3, [pc, #532]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	08db      	lsrs	r3, r3, #3
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	4a84      	ldr	r2, [pc, #528]	@ (80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077ac:	fa22 f303 	lsr.w	r3, r2, r3
 80077b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	4b7b      	ldr	r3, [pc, #492]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077da:	ed97 6a03 	vldr	s12, [r7, #12]
 80077de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80079c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077fa:	e087      	b.n	800790c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80079c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800780a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780e:	4b6a      	ldr	r3, [pc, #424]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007822:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80079c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783e:	e065      	b.n	800790c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80079c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800784e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007852:	4b59      	ldr	r3, [pc, #356]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007862:	ed97 6a03 	vldr	s12, [r7, #12]
 8007866:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80079c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800786a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007882:	e043      	b.n	800790c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80079cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007896:	4b48      	ldr	r3, [pc, #288]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80079c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c6:	e021      	b.n	800790c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80079c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078da:	4b37      	ldr	r3, [pc, #220]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80079c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800790a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800790c:	4b2a      	ldr	r3, [pc, #168]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800790e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007910:	0a5b      	lsrs	r3, r3, #9
 8007912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007926:	edd7 6a07 	vldr	s13, [r7, #28]
 800792a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800792e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007932:	ee17 2a90 	vmov	r2, s15
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800793a:	4b1f      	ldr	r3, [pc, #124]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	0c1b      	lsrs	r3, r3, #16
 8007940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007954:	edd7 6a07 	vldr	s13, [r7, #28]
 8007958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007960:	ee17 2a90 	vmov	r2, s15
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007968:	4b13      	ldr	r3, [pc, #76]	@ (80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800796a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796c:	0e1b      	lsrs	r3, r3, #24
 800796e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800797e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007982:	edd7 6a07 	vldr	s13, [r7, #28]
 8007986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798e:	ee17 2a90 	vmov	r2, s15
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007996:	e008      	b.n	80079aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	609a      	str	r2, [r3, #8]
}
 80079aa:	bf00      	nop
 80079ac:	3724      	adds	r7, #36	@ 0x24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	58024400 	.word	0x58024400
 80079bc:	03d09000 	.word	0x03d09000
 80079c0:	46000000 	.word	0x46000000
 80079c4:	4c742400 	.word	0x4c742400
 80079c8:	4a742400 	.word	0x4a742400
 80079cc:	4bbebc20 	.word	0x4bbebc20

080079d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b089      	sub	sp, #36	@ 0x24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079d8:	4ba0      	ldr	r3, [pc, #640]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80079e2:	4b9e      	ldr	r3, [pc, #632]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80079ee:	4b9b      	ldr	r3, [pc, #620]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079f8:	4b98      	ldr	r3, [pc, #608]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fc:	08db      	lsrs	r3, r3, #3
 80079fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	fb02 f303 	mul.w	r3, r2, r3
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8111 	beq.w	8007c3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	f000 8083 	beq.w	8007b2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	f200 80a1 	bhi.w	8007b6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d056      	beq.n	8007ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007a38:	e099      	b.n	8007b6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a3a:	4b88      	ldr	r3, [pc, #544]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02d      	beq.n	8007aa2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a46:	4b85      	ldr	r3, [pc, #532]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	08db      	lsrs	r3, r3, #3
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	4a83      	ldr	r2, [pc, #524]	@ (8007c60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007a52:	fa22 f303 	lsr.w	r3, r2, r3
 8007a56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a70:	4b7a      	ldr	r3, [pc, #488]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a78:	ee07 3a90 	vmov	s15, r3
 8007a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007c64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007aa0:	e087      	b.n	8007bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	ee07 3a90 	vmov	s15, r3
 8007aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007c68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab4:	4b69      	ldr	r3, [pc, #420]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007c64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae4:	e065      	b.n	8007bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007c6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af8:	4b58      	ldr	r3, [pc, #352]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b00:	ee07 3a90 	vmov	s15, r3
 8007b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007c64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b28:	e043      	b.n	8007bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3c:	4b47      	ldr	r3, [pc, #284]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b44:	ee07 3a90 	vmov	s15, r3
 8007b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007c64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b6c:	e021      	b.n	8007bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007c68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b80:	4b36      	ldr	r3, [pc, #216]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b88:	ee07 3a90 	vmov	s15, r3
 8007b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007c64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb6:	0a5b      	lsrs	r3, r3, #9
 8007bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bbc:	ee07 3a90 	vmov	s15, r3
 8007bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd8:	ee17 2a90 	vmov	r2, s15
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007be0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c06:	ee17 2a90 	vmov	r2, s15
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007c0e:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c12:	0e1b      	lsrs	r3, r3, #24
 8007c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c34:	ee17 2a90 	vmov	r2, s15
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c3c:	e008      	b.n	8007c50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	609a      	str	r2, [r3, #8]
}
 8007c50:	bf00      	nop
 8007c52:	3724      	adds	r7, #36	@ 0x24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	03d09000 	.word	0x03d09000
 8007c64:	46000000 	.word	0x46000000
 8007c68:	4c742400 	.word	0x4c742400
 8007c6c:	4a742400 	.word	0x4a742400
 8007c70:	4bbebc20 	.word	0x4bbebc20

08007c74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c82:	4b53      	ldr	r3, [pc, #332]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d101      	bne.n	8007c92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e099      	b.n	8007dc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c92:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a4e      	ldr	r2, [pc, #312]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9e:	f7fa f8f5 	bl	8001e8c <HAL_GetTick>
 8007ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ca4:	e008      	b.n	8007cb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ca6:	f7fa f8f1 	bl	8001e8c <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e086      	b.n	8007dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cb8:	4b45      	ldr	r3, [pc, #276]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f0      	bne.n	8007ca6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007cc4:	4b42      	ldr	r3, [pc, #264]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	031b      	lsls	r3, r3, #12
 8007cd2:	493f      	ldr	r1, [pc, #252]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	025b      	lsls	r3, r3, #9
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	041b      	lsls	r3, r3, #16
 8007cf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	061b      	lsls	r3, r3, #24
 8007d04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d08:	4931      	ldr	r1, [pc, #196]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d0e:	4b30      	ldr	r3, [pc, #192]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	492d      	ldr	r1, [pc, #180]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d20:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	f023 0220 	bic.w	r2, r3, #32
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	4928      	ldr	r1, [pc, #160]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d32:	4b27      	ldr	r3, [pc, #156]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d36:	4a26      	ldr	r2, [pc, #152]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d3e:	4b24      	ldr	r3, [pc, #144]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d42:	4b24      	ldr	r3, [pc, #144]	@ (8007dd4 <RCCEx_PLL2_Config+0x160>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	69d2      	ldr	r2, [r2, #28]
 8007d4a:	00d2      	lsls	r2, r2, #3
 8007d4c:	4920      	ldr	r1, [pc, #128]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d52:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d58:	f043 0310 	orr.w	r3, r3, #16
 8007d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d64:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d68:	4a19      	ldr	r2, [pc, #100]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d70:	e00f      	b.n	8007d92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d106      	bne.n	8007d86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d78:	4b15      	ldr	r3, [pc, #84]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7c:	4a14      	ldr	r2, [pc, #80]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d84:	e005      	b.n	8007d92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d86:	4b12      	ldr	r3, [pc, #72]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8a:	4a11      	ldr	r2, [pc, #68]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d92:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007d98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9e:	f7fa f875 	bl	8001e8c <HAL_GetTick>
 8007da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007da4:	e008      	b.n	8007db8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007da6:	f7fa f871 	bl	8001e8c <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e006      	b.n	8007dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <RCCEx_PLL2_Config+0x15c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0f0      	beq.n	8007da6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	ffff0007 	.word	0xffff0007

08007dd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007de6:	4b53      	ldr	r3, [pc, #332]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d101      	bne.n	8007df6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e099      	b.n	8007f2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007df6:	4b4f      	ldr	r3, [pc, #316]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e02:	f7fa f843 	bl	8001e8c <HAL_GetTick>
 8007e06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e08:	e008      	b.n	8007e1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e0a:	f7fa f83f 	bl	8001e8c <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e086      	b.n	8007f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e1c:	4b45      	ldr	r3, [pc, #276]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f0      	bne.n	8007e0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e28:	4b42      	ldr	r3, [pc, #264]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	051b      	lsls	r3, r3, #20
 8007e36:	493f      	ldr	r1, [pc, #252]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	025b      	lsls	r3, r3, #9
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	061b      	lsls	r3, r3, #24
 8007e68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e6c:	4931      	ldr	r1, [pc, #196]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e72:	4b30      	ldr	r3, [pc, #192]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	492d      	ldr	r1, [pc, #180]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e84:	4b2b      	ldr	r3, [pc, #172]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	4928      	ldr	r1, [pc, #160]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e96:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	4a26      	ldr	r2, [pc, #152]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ea2:	4b24      	ldr	r3, [pc, #144]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ea6:	4b24      	ldr	r3, [pc, #144]	@ (8007f38 <RCCEx_PLL3_Config+0x160>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	69d2      	ldr	r2, [r2, #28]
 8007eae:	00d2      	lsls	r2, r2, #3
 8007eb0:	4920      	ldr	r1, [pc, #128]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eba:	4a1e      	ldr	r2, [pc, #120]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d106      	bne.n	8007ed6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	4a19      	ldr	r2, [pc, #100]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ed4:	e00f      	b.n	8007ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d106      	bne.n	8007eea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007edc:	4b15      	ldr	r3, [pc, #84]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	4a14      	ldr	r2, [pc, #80]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ee8:	e005      	b.n	8007ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007eea:	4b12      	ldr	r3, [pc, #72]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	4a11      	ldr	r2, [pc, #68]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a0e      	ldr	r2, [pc, #56]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f02:	f7f9 ffc3 	bl	8001e8c <HAL_GetTick>
 8007f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f08:	e008      	b.n	8007f1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f0a:	f7f9 ffbf 	bl	8001e8c <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d901      	bls.n	8007f1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e006      	b.n	8007f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <RCCEx_PLL3_Config+0x15c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0f0      	beq.n	8007f0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	58024400 	.word	0x58024400
 8007f38:	ffff0007 	.word	0xffff0007

08007f3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	@ 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e075      	b.n	800803a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7f9 fd0f 	bl	8001984 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f868 	bl	8008044 <HAL_SD_InitCard>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e05d      	b.n	800803a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fdaf 	bl	8008ae8 <HAL_SD_GetCardStatus>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e052      	b.n	800803a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007f94:	7e3b      	ldrb	r3, [r7, #24]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007f9a:	7e7b      	ldrb	r3, [r7, #25]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10a      	bne.n	8007fbe <HAL_SD_Init+0x82>
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <HAL_SD_Init+0x78>
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fba:	659a      	str	r2, [r3, #88]	@ 0x58
 8007fbc:	e00b      	b.n	8007fd6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d104      	bne.n	8007fd0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8007fce:	e002      	b.n	8007fd6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fe6d 	bl	8008cbc <HAL_SD_ConfigWideBusOperation>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e026      	b.n	800803a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007fec:	f7f9 ff4e 	bl	8001e8c <HAL_GetTick>
 8007ff0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007ff2:	e011      	b.n	8008018 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ff4:	f7f9 ff4a 	bl	8001e8c <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d109      	bne.n	8008018 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800800a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e010      	b.n	800803a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 ff61 	bl	8008ee0 <HAL_SD_GetCardState>
 800801e:	4603      	mov	r3, r0
 8008020:	2b04      	cmp	r3, #4
 8008022:	d1e7      	bne.n	8007ff4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3728      	adds	r7, #40	@ 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b08d      	sub	sp, #52	@ 0x34
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008058:	2300      	movs	r3, #0
 800805a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800805c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008060:	f04f 0100 	mov.w	r1, #0
 8008064:	f7fe fc76 	bl	8006954 <HAL_RCCEx_GetPeriphCLKFreq>
 8008068:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800807e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e070      	b.n	8008166 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	4a39      	ldr	r2, [pc, #228]	@ (8008170 <HAL_SD_InitCard+0x12c>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	091b      	lsrs	r3, r3, #4
 8008090:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681c      	ldr	r4, [r3, #0]
 8008096:	466a      	mov	r2, sp
 8008098:	f107 0318 	add.w	r3, r7, #24
 800809c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80080a4:	f107 030c 	add.w	r3, r7, #12
 80080a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080aa:	4620      	mov	r0, r4
 80080ac:	f003 f882 	bl	800b1b4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f003 f8c5 	bl	800b244 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80080d2:	4a28      	ldr	r2, [pc, #160]	@ (8008174 <HAL_SD_InitCard+0x130>)
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	3301      	adds	r3, #1
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f9 fee1 	bl	8001ea4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ffea 	bl	80090bc <SD_PowerON>
 80080e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e02e      	b.n	8008166 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 ff09 	bl	8008f20 <SD_InitCard>
 800810e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e01b      	b.n	8008166 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008136:	4618      	mov	r0, r3
 8008138:	f003 f91a 	bl	800b370 <SDMMC_CmdBlockLength>
 800813c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a0b      	ldr	r2, [pc, #44]	@ (8008178 <HAL_SD_InitCard+0x134>)
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	372c      	adds	r7, #44	@ 0x2c
 800816a:	46bd      	mov	sp, r7
 800816c:	bd90      	pop	{r4, r7, pc}
 800816e:	bf00      	nop
 8008170:	014f8b59 	.word	0x014f8b59
 8008174:	00012110 	.word	0x00012110
 8008178:	1fe00fff 	.word	0x1fe00fff

0800817c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08c      	sub	sp, #48	@ 0x30
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d107      	bne.n	80081a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008198:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e08d      	b.n	80082c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	f040 8086 	bne.w	80082be <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	441a      	add	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d907      	bls.n	80081d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e074      	b.n	80082c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2203      	movs	r2, #3
 80081da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	025a      	lsls	r2, r3, #9
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d002      	beq.n	8008202 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	025b      	lsls	r3, r3, #9
 8008200:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	025b      	lsls	r3, r3, #9
 800820c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800820e:	2390      	movs	r3, #144	@ 0x90
 8008210:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008212:	2302      	movs	r3, #2
 8008214:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800821a:	2300      	movs	r3, #0
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f107 0210 	add.w	r2, r7, #16
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f003 f875 	bl	800b318 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800823c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2201      	movs	r2, #1
 800824c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d90a      	bls.n	800826a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2282      	movs	r2, #130	@ 0x82
 8008258:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008260:	4618      	mov	r0, r3
 8008262:	f003 f8cb 	bl	800b3fc <SDMMC_CmdReadMultiBlock>
 8008266:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008268:	e009      	b.n	800827e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2281      	movs	r2, #129	@ 0x81
 800826e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008276:	4618      	mov	r0, r3
 8008278:	f003 f89d 	bl	800b3b6 <SDMMC_CmdReadSingleBlock>
 800827c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800827e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d012      	beq.n	80082aa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a0f      	ldr	r2, [pc, #60]	@ (80082c8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008292:	431a      	orrs	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e00a      	b.n	80082c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80082b8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e000      	b.n	80082c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80082be:	2302      	movs	r3, #2
  }
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3730      	adds	r7, #48	@ 0x30
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	1fe00fff 	.word	0x1fe00fff

080082cc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08c      	sub	sp, #48	@ 0x30
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d107      	bne.n	80082f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e08d      	b.n	8008410 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	f040 8086 	bne.w	800840e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	441a      	add	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008312:	429a      	cmp	r2, r3
 8008314:	d907      	bls.n	8008326 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e074      	b.n	8008410 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2203      	movs	r2, #3
 800832a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	025a      	lsls	r2, r3, #9
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	2b01      	cmp	r3, #1
 800834a:	d002      	beq.n	8008352 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800834c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834e:	025b      	lsls	r3, r3, #9
 8008350:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008352:	f04f 33ff 	mov.w	r3, #4294967295
 8008356:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	025b      	lsls	r3, r3, #9
 800835c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800835e:	2390      	movs	r3, #144	@ 0x90
 8008360:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008366:	2300      	movs	r3, #0
 8008368:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f107 0210 	add.w	r2, r7, #16
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f002 ffcd 	bl	800b318 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800838c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2201      	movs	r2, #1
 800839c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d90a      	bls.n	80083ba <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	22a0      	movs	r2, #160	@ 0xa0
 80083a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083b0:	4618      	mov	r0, r3
 80083b2:	f003 f869 	bl	800b488 <SDMMC_CmdWriteMultiBlock>
 80083b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80083b8:	e009      	b.n	80083ce <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2290      	movs	r2, #144	@ 0x90
 80083be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083c6:	4618      	mov	r0, r3
 80083c8:	f003 f83b 	bl	800b442 <SDMMC_CmdWriteSingleBlock>
 80083cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80083ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d012      	beq.n	80083fa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008418 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80083da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e2:	431a      	orrs	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e00a      	b.n	8008410 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008408:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	e000      	b.n	8008410 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800840e:	2302      	movs	r3, #2
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3730      	adds	r7, #48	@ 0x30
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	1fe00fff 	.word	0x1fe00fff

0800841c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008428:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <HAL_SD_IRQHandler+0x2e>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 f926 	bl	8009694 <SD_Read_IT>
 8008448:	e19a      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80ac 	beq.w	80085b2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008462:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4b59      	ldr	r3, [pc, #356]	@ (80085d4 <HAL_SD_IRQHandler+0x1b8>)
 8008470:	400b      	ands	r3, r1
 8008472:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008482:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008492:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d038      	beq.n	8008510 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <HAL_SD_IRQHandler+0x96>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d011      	beq.n	80084d6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f003 f80a 	bl	800b4d0 <SDMMC_CmdStopTransfer>
 80084bc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f95b 	bl	800878c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a3f      	ldr	r2, [pc, #252]	@ (80085d8 <HAL_SD_IRQHandler+0x1bc>)
 80084dc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <HAL_SD_IRQHandler+0xe4>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f003 fcbd 	bl	800be80 <HAL_SD_RxCpltCallback>
 8008506:	e13b      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f003 fcaf 	bl	800be6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800850e:	e137      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 8132 	beq.w	8008780 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2200      	movs	r2, #0
 8008522:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2200      	movs	r2, #0
 800852a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d104      	bne.n	8008548 <HAL_SD_IRQHandler+0x12c>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d011      	beq.n	800856c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f002 ffbf 	bl	800b4d0 <SDMMC_CmdStopTransfer>
 8008552:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d008      	beq.n	800856c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f910 	bl	800878c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d104      	bne.n	800858e <HAL_SD_IRQHandler+0x172>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f003 fc6c 	bl	800be6c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <HAL_SD_IRQHandler+0x18e>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80eb 	beq.w	8008780 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f003 fc68 	bl	800be80 <HAL_SD_RxCpltCallback>
}
 80085b0:	e0e6      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00d      	beq.n	80085dc <HAL_SD_IRQHandler+0x1c0>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d008      	beq.n	80085dc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 f8a8 	bl	8009720 <SD_Write_IT>
 80085d0:	e0d6      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
 80085d2:	bf00      	nop
 80085d4:	ffff3ec5 	.word	0xffff3ec5
 80085d8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 809d 	beq.w	8008726 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fe:	f043 0202 	orr.w	r2, r3, #2
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008618:	f043 0208 	orr.w	r2, r3, #8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008632:	f043 0220 	orr.w	r2, r3, #32
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864c:	f043 0210 	orr.w	r2, r3, #16
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a4b      	ldr	r2, [pc, #300]	@ (8008788 <HAL_SD_IRQHandler+0x36c>)
 800865a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800866a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800867a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800868a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800869a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f002 ff15 	bl	800b4d0 <SDMMC_CmdStopTransfer>
 80086a6:	4602      	mov	r2, r0
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086c0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f851 	bl	800878c <HAL_SD_ErrorCallback>
}
 80086ea:	e049      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d044      	beq.n	8008780 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d040      	beq.n	8008780 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800870c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f834 	bl	800878c <HAL_SD_ErrorCallback>
}
 8008724:	e02c      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d025      	beq.n	8008780 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800873c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10c      	bne.n	8008766 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 f84a 	bl	80097f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800875c:	e010      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 f832 	bl	80097c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008764:	e00c      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 f833 	bl	80097dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008776:	e003      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 f81b 	bl	80097b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800877e:	e7ff      	b.n	8008780 <HAL_SD_IRQHandler+0x364>
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	18000f3a 	.word	0x18000f3a

0800878c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ae:	0f9b      	lsrs	r3, r3, #30
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ba:	0e9b      	lsrs	r3, r3, #26
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 030f 	and.w	r3, r3, #15
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087cc:	0e1b      	lsrs	r3, r3, #24
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087de:	0c1b      	lsrs	r3, r3, #16
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008800:	0d1b      	lsrs	r3, r3, #20
 8008802:	b29a      	uxth	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	b2da      	uxtb	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800881e:	0bdb      	lsrs	r3, r3, #15
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008830:	0b9b      	lsrs	r3, r3, #14
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008842:	0b5b      	lsrs	r3, r3, #13
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008854:	0b1b      	lsrs	r3, r3, #12
 8008856:	b2db      	uxtb	r3, r3
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886c:	2b00      	cmp	r3, #0
 800886e:	d163      	bne.n	8008938 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008874:	009a      	lsls	r2, r3, #2
 8008876:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800887a:	4013      	ands	r3, r2
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008880:	0f92      	lsrs	r2, r2, #30
 8008882:	431a      	orrs	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800888c:	0edb      	lsrs	r3, r3, #27
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	b2da      	uxtb	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800889e:	0e1b      	lsrs	r3, r3, #24
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b0:	0d5b      	lsrs	r3, r3, #21
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c2:	0c9b      	lsrs	r3, r3, #18
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d4:	0bdb      	lsrs	r3, r3, #15
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	7e1b      	ldrb	r3, [r3, #24]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	3302      	adds	r3, #2
 80088f8:	2201      	movs	r2, #1
 80088fa:	fa02 f303 	lsl.w	r3, r2, r3
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008902:	fb03 f202 	mul.w	r2, r3, r2
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	7a1b      	ldrb	r3, [r3, #8]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	2201      	movs	r2, #1
 8008916:	409a      	lsls	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008924:	0a52      	lsrs	r2, r2, #9
 8008926:	fb03 f202 	mul.w	r2, r3, r2
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008934:	655a      	str	r2, [r3, #84]	@ 0x54
 8008936:	e031      	b.n	800899c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893c:	2b01      	cmp	r3, #1
 800893e:	d11d      	bne.n	800897c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008944:	041b      	lsls	r3, r3, #16
 8008946:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	431a      	orrs	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	3301      	adds	r3, #1
 800895c:	029a      	lsls	r2, r3, #10
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008970:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	655a      	str	r2, [r3, #84]	@ 0x54
 800897a:	e00f      	b.n	800899c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a58      	ldr	r2, [pc, #352]	@ (8008ae4 <HAL_SD_GetCardCSD+0x344>)
 8008982:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008988:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e09d      	b.n	8008ad8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089a0:	0b9b      	lsrs	r3, r3, #14
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089b2:	09db      	lsrs	r3, r3, #7
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089d4:	0fdb      	lsrs	r3, r3, #31
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089e0:	0f5b      	lsrs	r3, r3, #29
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089f2:	0e9b      	lsrs	r3, r3, #26
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a04:	0d9b      	lsrs	r3, r3, #22
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a16:	0d5b      	lsrs	r3, r3, #21
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a32:	0c1b      	lsrs	r3, r3, #16
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a46:	0bdb      	lsrs	r3, r3, #15
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a5a:	0b9b      	lsrs	r3, r3, #14
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a6e:	0b5b      	lsrs	r3, r3, #13
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a82:	0b1b      	lsrs	r3, r3, #12
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a96:	0a9b      	lsrs	r3, r3, #10
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	1fe00fff 	.word	0x1fe00fff

08008ae8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b094      	sub	sp, #80	@ 0x50
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d101      	bne.n	8008b08 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e0a7      	b.n	8008c58 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008b08:	f107 0308 	add.w	r3, r7, #8
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fb62 	bl	80091d8 <SD_SendSDStatus>
 8008b14:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d011      	beq.n	8008b40 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a4f      	ldr	r2, [pc, #316]	@ (8008c60 <HAL_SD_GetCardStatus+0x178>)
 8008b22:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008b3e:	e070      	b.n	8008c22 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	099b      	lsrs	r3, r3, #6
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	0e1b      	lsrs	r3, r3, #24
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	4313      	orrs	r3, r2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	061a      	lsls	r2, r3, #24
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b86:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b90:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	0e1b      	lsrs	r3, r3, #24
 8008b96:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	0a9b      	lsrs	r3, r3, #10
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	091b      	lsrs	r3, r3, #4
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	0e1b      	lsrs	r3, r3, #24
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 fba0 	bl	800b370 <SDMMC_CmdBlockLength>
 8008c30:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00d      	beq.n	8008c54 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a08      	ldr	r2, [pc, #32]	@ (8008c60 <HAL_SD_GetCardStatus+0x178>)
 8008c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c44:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008c54:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3750      	adds	r7, #80	@ 0x50
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	1fe00fff 	.word	0x1fe00fff

08008c64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008cbc:	b590      	push	{r4, r7, lr}
 8008cbe:	b08d      	sub	sp, #52	@ 0x34
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2203      	movs	r2, #3
 8008cd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d02e      	beq.n	8008d3a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ce2:	d106      	bne.n	8008cf2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	635a      	str	r2, [r3, #52]	@ 0x34
 8008cf0:	e029      	b.n	8008d46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cf8:	d10a      	bne.n	8008d10 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fb64 	bl	80093c8 <SD_WideBus_Enable>
 8008d00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d0e:	e01a      	b.n	8008d46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fba1 	bl	800945e <SD_WideBus_Disable>
 8008d1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d2a:	e00c      	b.n	8008d46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d30:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d38:	e005      	b.n	8008d46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a5f      	ldr	r2, [pc, #380]	@ (8008ed0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008d54:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d5c:	e096      	b.n	8008e8c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008d5e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008d62:	f04f 0100 	mov.w	r1, #0
 8008d66:	f7fd fdf5 	bl	8006954 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d6a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8083 	beq.w	8008e7a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4950      	ldr	r1, [pc, #320]	@ (8008ed4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d92:	fba1 1303 	umull	r1, r3, r1, r3
 8008d96:	0e1b      	lsrs	r3, r3, #24
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d303      	bcc.n	8008da4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	e05a      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dac:	d103      	bne.n	8008db6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	e051      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dbe:	d126      	bne.n	8008e0e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10e      	bne.n	8008de6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	4a43      	ldr	r2, [pc, #268]	@ (8008ed8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d906      	bls.n	8008dde <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	4a40      	ldr	r2, [pc, #256]	@ (8008ed4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	0e5b      	lsrs	r3, r3, #25
 8008dda:	61bb      	str	r3, [r7, #24]
 8008ddc:	e03d      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	e039      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df2:	4a39      	ldr	r2, [pc, #228]	@ (8008ed8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d906      	bls.n	8008e06 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	4a36      	ldr	r2, [pc, #216]	@ (8008ed4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008e00:	0e5b      	lsrs	r3, r3, #25
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e029      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	e025      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10e      	bne.n	8008e34 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	4a30      	ldr	r2, [pc, #192]	@ (8008edc <HAL_SD_ConfigWideBusOperation+0x220>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d906      	bls.n	8008e2c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4a2c      	ldr	r2, [pc, #176]	@ (8008ed4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	0e1b      	lsrs	r3, r3, #24
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	e016      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e012      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e40:	4a26      	ldr	r2, [pc, #152]	@ (8008edc <HAL_SD_ConfigWideBusOperation+0x220>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d906      	bls.n	8008e54 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4a22      	ldr	r2, [pc, #136]	@ (8008ed4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4e:	0e1b      	lsrs	r3, r3, #24
 8008e50:	61bb      	str	r3, [r7, #24]
 8008e52:	e002      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681c      	ldr	r4, [r3, #0]
 8008e5e:	466a      	mov	r2, sp
 8008e60:	f107 0314 	add.w	r3, r7, #20
 8008e64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e68:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e72:	4620      	mov	r0, r4
 8008e74:	f002 f99e 	bl	800b1b4 <SDMMC_Init>
 8008e78:	e008      	b.n	8008e8c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 fa6b 	bl	800b370 <SDMMC_CmdBlockLength>
 8008e9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00c      	beq.n	8008ebc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ed0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	372c      	adds	r7, #44	@ 0x2c
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}
 8008ed0:	1fe00fff 	.word	0x1fe00fff
 8008ed4:	55e63b89 	.word	0x55e63b89
 8008ed8:	02faf080 	.word	0x02faf080
 8008edc:	017d7840 	.word	0x017d7840

08008ee0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008eec:	f107 030c 	add.w	r3, r7, #12
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa40 	bl	8009378 <SD_SendStatus>
 8008ef8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0a5b      	lsrs	r3, r3, #9
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f16:	693b      	ldr	r3, [r7, #16]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b090      	sub	sp, #64	@ 0x40
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008f2c:	f7f8 ffae 	bl	8001e8c <HAL_GetTick>
 8008f30:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f002 f995 	bl	800b266 <SDMMC_GetPowerState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008f46:	e0b5      	b.n	80090b4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d02e      	beq.n	8008fae <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f002 fbe0 	bl	800b71a <SDMMC_CmdSendCID>
 8008f5a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <SD_InitCard+0x46>
    {
      return errorstate;
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	e0a6      	b.n	80090b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 f9c0 	bl	800b2f2 <SDMMC_GetResponse>
 8008f72:	4602      	mov	r2, r0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f002 f9b7 	bl	800b2f2 <SDMMC_GetResponse>
 8008f84:	4602      	mov	r2, r0
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2108      	movs	r1, #8
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 f9ae 	bl	800b2f2 <SDMMC_GetResponse>
 8008f96:	4602      	mov	r2, r0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	210c      	movs	r1, #12
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f002 f9a5 	bl	800b2f2 <SDMMC_GetResponse>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d01d      	beq.n	8008ff2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008fb6:	e019      	b.n	8008fec <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f107 020a 	add.w	r2, r7, #10
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f002 fbe8 	bl	800b798 <SDMMC_CmdSetRelAdd>
 8008fc8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd2:	e06f      	b.n	80090b4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008fd4:	f7f8 ff5a 	bl	8001e8c <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d902      	bls.n	8008fec <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008fe6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fea:	e063      	b.n	80090b4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008fec:	897b      	ldrh	r3, [r7, #10]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0e2      	beq.n	8008fb8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d036      	beq.n	8009068 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ffa:	897b      	ldrh	r3, [r7, #10]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900a:	041b      	lsls	r3, r3, #16
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f002 fba2 	bl	800b758 <SDMMC_CmdSendCSD>
 8009014:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <SD_InitCard+0x100>
    {
      return errorstate;
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	e049      	b.n	80090b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f002 f963 	bl	800b2f2 <SDMMC_GetResponse>
 800902c:	4602      	mov	r2, r0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2104      	movs	r1, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f002 f95a 	bl	800b2f2 <SDMMC_GetResponse>
 800903e:	4602      	mov	r2, r0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2108      	movs	r1, #8
 800904a:	4618      	mov	r0, r3
 800904c:	f002 f951 	bl	800b2f2 <SDMMC_GetResponse>
 8009050:	4602      	mov	r2, r0
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	210c      	movs	r1, #12
 800905c:	4618      	mov	r0, r3
 800905e:	f002 f948 	bl	800b2f2 <SDMMC_GetResponse>
 8009062:	4602      	mov	r2, r0
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2104      	movs	r1, #4
 800906e:	4618      	mov	r0, r3
 8009070:	f002 f93f 	bl	800b2f2 <SDMMC_GetResponse>
 8009074:	4603      	mov	r3, r0
 8009076:	0d1a      	lsrs	r2, r3, #20
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800907c:	f107 030c 	add.w	r3, r7, #12
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fb8c 	bl	80087a0 <HAL_SD_GetCardCSD>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800908e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009092:	e00f      	b.n	80090b4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f002 fa51 	bl	800b548 <SDMMC_CmdSelDesel>
 80090a6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <SD_InitCard+0x192>
  {
    return errorstate;
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	e000      	b.n	80090b4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3740      	adds	r7, #64	@ 0x40
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 fa5a 	bl	800b58e <SDMMC_CmdGoIdleState>
 80090da:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	e072      	b.n	80091cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 fa6d 	bl	800b5ca <SDMMC_CmdOperCond>
 80090f0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090f8:	d10d      	bne.n	8009116 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4618      	mov	r0, r3
 8009106:	f002 fa42 	bl	800b58e <SDMMC_CmdGoIdleState>
 800910a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <SD_PowerON+0x60>
    {
      return errorstate;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	e05a      	b.n	80091cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d137      	bne.n	8009194 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f002 fa6d 	bl	800b60a <SDMMC_CmdAppCommand>
 8009130:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02d      	beq.n	8009194 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009138:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800913c:	e046      	b.n	80091cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f002 fa60 	bl	800b60a <SDMMC_CmdAppCommand>
 800914a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	e03a      	b.n	80091cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	491e      	ldr	r1, [pc, #120]	@ (80091d4 <SD_PowerON+0x118>)
 800915c:	4618      	mov	r0, r3
 800915e:	f002 fa77 	bl	800b650 <SDMMC_CmdAppOperCommand>
 8009162:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800916a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800916e:	e02d      	b.n	80091cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f002 f8bb 	bl	800b2f2 <SDMMC_GetResponse>
 800917c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	0fdb      	lsrs	r3, r3, #31
 8009182:	2b01      	cmp	r3, #1
 8009184:	d101      	bne.n	800918a <SD_PowerON+0xce>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <SD_PowerON+0xd0>
 800918a:	2300      	movs	r3, #0
 800918c:	613b      	str	r3, [r7, #16]

    count++;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	3301      	adds	r3, #1
 8009192:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800919a:	4293      	cmp	r3, r2
 800919c:	d802      	bhi.n	80091a4 <SD_PowerON+0xe8>
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0cc      	beq.n	800913e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d902      	bls.n	80091b4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80091ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80091b2:	e00b      	b.n	80091cc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	c1100000 	.word	0xc1100000

080091d8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08c      	sub	sp, #48	@ 0x30
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091e2:	f7f8 fe53 	bl	8001e8c <HAL_GetTick>
 80091e6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f002 f87d 	bl	800b2f2 <SDMMC_GetResponse>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009202:	d102      	bne.n	800920a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009204:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009208:	e0b0      	b.n	800936c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2140      	movs	r1, #64	@ 0x40
 8009210:	4618      	mov	r0, r3
 8009212:	f002 f8ad 	bl	800b370 <SDMMC_CmdBlockLength>
 8009216:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	e0a0      	b.n	800936c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f002 f9e7 	bl	800b60a <SDMMC_CmdAppCommand>
 800923c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	e08d      	b.n	800936c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009250:	f04f 33ff 	mov.w	r3, #4294967295
 8009254:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009256:	2340      	movs	r3, #64	@ 0x40
 8009258:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800925a:	2360      	movs	r3, #96	@ 0x60
 800925c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800925e:	2302      	movs	r3, #2
 8009260:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009262:	2300      	movs	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009266:	2301      	movs	r3, #1
 8009268:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f107 0208 	add.w	r2, r7, #8
 8009272:	4611      	mov	r1, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f84f 	bl	800b318 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f002 facf 	bl	800b822 <SDMMC_CmdStatusRegister>
 8009284:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d02b      	beq.n	80092e4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	e069      	b.n	800936c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800929e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d013      	beq.n	80092ce <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80092a6:	2300      	movs	r3, #0
 80092a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092aa:	e00d      	b.n	80092c8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 ffa9 	bl	800b208 <SDMMC_ReadFIFO>
 80092b6:	4602      	mov	r2, r0
 80092b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ba:	601a      	str	r2, [r3, #0]
        pData++;
 80092bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092be:	3304      	adds	r3, #4
 80092c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80092c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c4:	3301      	adds	r3, #1
 80092c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ca:	2b07      	cmp	r3, #7
 80092cc:	d9ee      	bls.n	80092ac <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092ce:	f7f8 fddd 	bl	8001e8c <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d102      	bne.n	80092e4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80092e2:	e043      	b.n	800936c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ea:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0d2      	beq.n	8009298 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009300:	2308      	movs	r3, #8
 8009302:	e033      	b.n	800936c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009312:	2302      	movs	r3, #2
 8009314:	e02a      	b.n	800936c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b00      	cmp	r3, #0
 8009322:	d017      	beq.n	8009354 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009324:	2320      	movs	r3, #32
 8009326:	e021      	b.n	800936c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f001 ff6b 	bl	800b208 <SDMMC_ReadFIFO>
 8009332:	4602      	mov	r2, r0
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	601a      	str	r2, [r3, #0]
    pData++;
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	3304      	adds	r3, #4
 800933c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800933e:	f7f8 fda5 	bl	8001e8c <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d102      	bne.n	8009354 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800934e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009352:	e00b      	b.n	800936c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800935a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e2      	bne.n	8009328 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a03      	ldr	r2, [pc, #12]	@ (8009374 <SD_SendSDStatus+0x19c>)
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3730      	adds	r7, #48	@ 0x30
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	18000f3a 	.word	0x18000f3a

08009378 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009388:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800938c:	e018      	b.n	80093c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009396:	041b      	lsls	r3, r3, #16
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f002 fa1e 	bl	800b7dc <SDMMC_CmdSendStatus>
 80093a0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	e009      	b.n	80093c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 ff9d 	bl	800b2f2 <SDMMC_GetResponse>
 80093b8:	4602      	mov	r2, r0
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 ff87 	bl	800b2f2 <SDMMC_GetResponse>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093ee:	d102      	bne.n	80093f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093f4:	e02f      	b.n	8009456 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093f6:	f107 030c 	add.w	r3, r7, #12
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f879 	bl	80094f4 <SD_FindSCR>
 8009402:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	e023      	b.n	8009456 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d01c      	beq.n	8009452 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009420:	041b      	lsls	r3, r3, #16
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f002 f8f0 	bl	800b60a <SDMMC_CmdAppCommand>
 800942a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	e00f      	b.n	8009456 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2102      	movs	r1, #2
 800943c:	4618      	mov	r0, r3
 800943e:	f002 f927 	bl	800b690 <SDMMC_CmdBusWidth>
 8009442:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	e003      	b.n	8009456 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800944e:	2300      	movs	r3, #0
 8009450:	e001      	b.n	8009456 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009452:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f001 ff3c 	bl	800b2f2 <SDMMC_GetResponse>
 800947a:	4603      	mov	r3, r0
 800947c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009484:	d102      	bne.n	800948c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800948a:	e02f      	b.n	80094ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800948c:	f107 030c 	add.w	r3, r7, #12
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f82e 	bl	80094f4 <SD_FindSCR>
 8009498:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	e023      	b.n	80094ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01c      	beq.n	80094e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f002 f8a5 	bl	800b60a <SDMMC_CmdAppCommand>
 80094c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	e00f      	b.n	80094ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 f8dc 	bl	800b690 <SDMMC_CmdBusWidth>
 80094d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	e003      	b.n	80094ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	e001      	b.n	80094ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08e      	sub	sp, #56	@ 0x38
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094fe:	f7f8 fcc5 	bl	8001e8c <HAL_GetTick>
 8009502:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009508:	2300      	movs	r3, #0
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2108      	movs	r1, #8
 800951a:	4618      	mov	r0, r3
 800951c:	f001 ff28 	bl	800b370 <SDMMC_CmdBlockLength>
 8009520:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	e0ad      	b.n	8009688 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f002 f866 	bl	800b60a <SDMMC_CmdAppCommand>
 800953e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	e09e      	b.n	8009688 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800954a:	f04f 33ff 	mov.w	r3, #4294967295
 800954e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009550:	2308      	movs	r3, #8
 8009552:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009554:	2330      	movs	r3, #48	@ 0x30
 8009556:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009558:	2302      	movs	r3, #2
 800955a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800955c:	2300      	movs	r3, #0
 800955e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009560:	2301      	movs	r3, #1
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f107 0210 	add.w	r2, r7, #16
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f001 fed2 	bl	800b318 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4618      	mov	r0, r3
 800957a:	f002 f8ac 	bl	800b6d6 <SDMMC_CmdSendSCR>
 800957e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d027      	beq.n	80095d6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009588:	e07e      	b.n	8009688 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d113      	bne.n	80095c0 <SD_FindSCR+0xcc>
 8009598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959a:	2b00      	cmp	r3, #0
 800959c:	d110      	bne.n	80095c0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f001 fe30 	bl	800b208 <SDMMC_ReadFIFO>
 80095a8:	4603      	mov	r3, r0
 80095aa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 fe29 	bl	800b208 <SDMMC_ReadFIFO>
 80095b6:	4603      	mov	r3, r0
 80095b8:	60fb      	str	r3, [r7, #12]
      index++;
 80095ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095bc:	3301      	adds	r3, #1
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095c0:	f7f8 fc64 	bl	8001e8c <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d102      	bne.n	80095d6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80095d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095d4:	e058      	b.n	8009688 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095dc:	f240 532a 	movw	r3, #1322	@ 0x52a
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0d1      	beq.n	800958a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2208      	movs	r2, #8
 80095fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80095fc:	2308      	movs	r3, #8
 80095fe:	e043      	b.n	8009688 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d005      	beq.n	800961a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2202      	movs	r2, #2
 8009614:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009616:	2302      	movs	r3, #2
 8009618:	e036      	b.n	8009688 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2220      	movs	r2, #32
 800962e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009630:	2320      	movs	r3, #32
 8009632:	e029      	b.n	8009688 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a15      	ldr	r2, [pc, #84]	@ (8009690 <SD_FindSCR+0x19c>)
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	061a      	lsls	r2, r3, #24
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009648:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	0a1b      	lsrs	r3, r3, #8
 800964e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009652:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	0e1b      	lsrs	r3, r3, #24
 8009658:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800965a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965c:	601a      	str	r2, [r3, #0]
    scr++;
 800965e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009660:	3304      	adds	r3, #4
 8009662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	061a      	lsls	r2, r3, #24
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009670:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	0a1b      	lsrs	r3, r3, #8
 8009676:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800967a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	0e1b      	lsrs	r3, r3, #24
 8009680:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009684:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3738      	adds	r7, #56	@ 0x38
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	18000f3a 	.word	0x18000f3a

08009694 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a6:	2b1f      	cmp	r3, #31
 80096a8:	d936      	bls.n	8009718 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e027      	b.n	8009700 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 fda7 	bl	800b208 <SDMMC_ReadFIFO>
 80096ba:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	3301      	adds	r3, #1
 80096c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	0a1b      	lsrs	r3, r3, #8
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	3301      	adds	r3, #1
 80096d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	0c1b      	lsrs	r3, r3, #16
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	3301      	adds	r3, #1
 80096e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	0e1b      	lsrs	r3, r3, #24
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3301      	adds	r3, #1
 80096f8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	3301      	adds	r3, #1
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b07      	cmp	r3, #7
 8009704:	d9d4      	bls.n	80096b0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009710:	f1a3 0220 	sub.w	r2, r3, #32
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8009718:	bf00      	nop
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	2b1f      	cmp	r3, #31
 8009734:	d93a      	bls.n	80097ac <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	e02b      	b.n	8009794 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3301      	adds	r3, #1
 8009746:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	021a      	lsls	r2, r3, #8
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	3301      	adds	r3, #1
 8009758:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	041a      	lsls	r2, r3, #16
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	3301      	adds	r3, #1
 800976a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	061a      	lsls	r2, r3, #24
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	3301      	adds	r3, #1
 800977c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f107 020c 	add.w	r2, r7, #12
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fd4a 	bl	800b222 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	3301      	adds	r3, #1
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2b07      	cmp	r3, #7
 8009798:	d9d0      	bls.n	800973c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	f1a3 0220 	sub.w	r2, r3, #32
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	621a      	str	r2, [r3, #32]
  }
}
 80097ac:	bf00      	nop
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e10f      	b.n	8009a36 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a87      	ldr	r2, [pc, #540]	@ (8009a40 <HAL_SPI_Init+0x23c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d00f      	beq.n	8009846 <HAL_SPI_Init+0x42>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a86      	ldr	r2, [pc, #536]	@ (8009a44 <HAL_SPI_Init+0x240>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00a      	beq.n	8009846 <HAL_SPI_Init+0x42>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a84      	ldr	r2, [pc, #528]	@ (8009a48 <HAL_SPI_Init+0x244>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d005      	beq.n	8009846 <HAL_SPI_Init+0x42>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d901      	bls.n	8009846 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e0f7      	b.n	8009a36 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fbbc 	bl	8009fc4 <SPI_GetPacketSize>
 800984c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a7b      	ldr	r2, [pc, #492]	@ (8009a40 <HAL_SPI_Init+0x23c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00c      	beq.n	8009872 <HAL_SPI_Init+0x6e>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a79      	ldr	r2, [pc, #484]	@ (8009a44 <HAL_SPI_Init+0x240>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d007      	beq.n	8009872 <HAL_SPI_Init+0x6e>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a78      	ldr	r2, [pc, #480]	@ (8009a48 <HAL_SPI_Init+0x244>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d002      	beq.n	8009872 <HAL_SPI_Init+0x6e>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b08      	cmp	r3, #8
 8009870:	d811      	bhi.n	8009896 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009876:	4a72      	ldr	r2, [pc, #456]	@ (8009a40 <HAL_SPI_Init+0x23c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d009      	beq.n	8009890 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a70      	ldr	r2, [pc, #448]	@ (8009a44 <HAL_SPI_Init+0x240>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d004      	beq.n	8009890 <HAL_SPI_Init+0x8c>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a6f      	ldr	r2, [pc, #444]	@ (8009a48 <HAL_SPI_Init+0x244>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d104      	bne.n	800989a <HAL_SPI_Init+0x96>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b10      	cmp	r3, #16
 8009894:	d901      	bls.n	800989a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e0cd      	b.n	8009a36 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7f8 f8fe 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0201 	bic.w	r2, r2, #1
 80098ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80098d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098e0:	d119      	bne.n	8009916 <HAL_SPI_Init+0x112>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098ea:	d103      	bne.n	80098f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d008      	beq.n	8009906 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10c      	bne.n	8009916 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009904:	d107      	bne.n	8009916 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009914:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00f      	beq.n	8009942 <HAL_SPI_Init+0x13e>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	2b06      	cmp	r3, #6
 8009928:	d90b      	bls.n	8009942 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e007      	b.n	8009952 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009950:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69da      	ldr	r2, [r3, #28]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995a:	431a      	orrs	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009964:	ea42 0103 	orr.w	r1, r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099b2:	ea42 0103 	orr.w	r1, r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d113      	bne.n	80099f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0201 	bic.w	r2, r2, #1
 8009a00:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	40013000 	.word	0x40013000
 8009a44:	40003800 	.word	0x40003800
 8009a48:	40003c00 	.word	0x40003c00

08009a4c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3320      	adds	r3, #32
 8009a62:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a64:	f7f8 fa12 	bl	8001e8c <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d001      	beq.n	8009a7a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009a76:	2302      	movs	r3, #2
 8009a78:	e1d1      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <HAL_SPI_Transmit+0x3a>
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e1c9      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d101      	bne.n	8009a98 <HAL_SPI_Transmit+0x4c>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e1c2      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	88fa      	ldrh	r2, [r7, #6]
 8009aba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	88fa      	ldrh	r2, [r7, #6]
 8009ac2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009af0:	d108      	bne.n	8009b04 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	e009      	b.n	8009b18 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009b16:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	4b96      	ldr	r3, [pc, #600]	@ (8009d78 <HAL_SPI_Transmit+0x32c>)
 8009b20:	4013      	ands	r3, r2
 8009b22:	88f9      	ldrh	r1, [r7, #6]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	6812      	ldr	r2, [r2, #0]
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b44:	d107      	bne.n	8009b56 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	d947      	bls.n	8009bee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b5e:	e03f      	b.n	8009be0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d114      	bne.n	8009b98 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b7e:	1d1a      	adds	r2, r3, #4
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b96:	e023      	b.n	8009be0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b98:	f7f8 f978 	bl	8001e8c <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d803      	bhi.n	8009bb0 <HAL_SPI_Transmit+0x164>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d102      	bne.n	8009bb6 <HAL_SPI_Transmit+0x16a>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d114      	bne.n	8009be0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 f936 	bl	8009e28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e11e      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1b9      	bne.n	8009b60 <HAL_SPI_Transmit+0x114>
 8009bec:	e0f1      	b.n	8009dd2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	2b07      	cmp	r3, #7
 8009bf4:	f240 80e6 	bls.w	8009dc4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009bf8:	e05d      	b.n	8009cb6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d132      	bne.n	8009c6e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d918      	bls.n	8009c46 <HAL_SPI_Transmit+0x1fa>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d014      	beq.n	8009c46 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c2c:	1d1a      	adds	r2, r3, #4
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3b02      	subs	r3, #2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c44:	e037      	b.n	8009cb6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c4a:	881a      	ldrh	r2, [r3, #0]
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c54:	1c9a      	adds	r2, r3, #2
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c6c:	e023      	b.n	8009cb6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c6e:	f7f8 f90d 	bl	8001e8c <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d803      	bhi.n	8009c86 <HAL_SPI_Transmit+0x23a>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d102      	bne.n	8009c8c <HAL_SPI_Transmit+0x240>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d114      	bne.n	8009cb6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f8cb 	bl	8009e28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e0b3      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d19b      	bne.n	8009bfa <HAL_SPI_Transmit+0x1ae>
 8009cc2:	e086      	b.n	8009dd2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d154      	bne.n	8009d7c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d918      	bls.n	8009d10 <HAL_SPI_Transmit+0x2c4>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce2:	2b40      	cmp	r3, #64	@ 0x40
 8009ce4:	d914      	bls.n	8009d10 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3b04      	subs	r3, #4
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d0e:	e059      	b.n	8009dc4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d917      	bls.n	8009d4c <HAL_SPI_Transmit+0x300>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d013      	beq.n	8009d4c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d28:	881a      	ldrh	r2, [r3, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d32:	1c9a      	adds	r2, r3, #2
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b02      	subs	r3, #2
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d4a:	e03b      	b.n	8009dc4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3320      	adds	r3, #32
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d76:	e025      	b.n	8009dc4 <HAL_SPI_Transmit+0x378>
 8009d78:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d7c:	f7f8 f886 	bl	8001e8c <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d803      	bhi.n	8009d94 <HAL_SPI_Transmit+0x348>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d102      	bne.n	8009d9a <HAL_SPI_Transmit+0x34e>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d114      	bne.n	8009dc4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f844 	bl	8009e28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009da6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e02c      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f47f af79 	bne.w	8009cc4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2108      	movs	r1, #8
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 f8c3 	bl	8009f68 <SPI_WaitOnFlagUntilTimeout>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f815 	bl	8009e28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
  }
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop

08009e28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f042 0208 	orr.w	r2, r2, #8
 8009e46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0210 	orr.w	r2, r2, #16
 8009e56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0201 	bic.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6919      	ldr	r1, [r3, #16]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b3c      	ldr	r3, [pc, #240]	@ (8009f64 <SPI_CloseTransfer+0x13c>)
 8009e74:	400b      	ands	r3, r1
 8009e76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009e86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d014      	beq.n	8009ebe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00f      	beq.n	8009ebe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ea4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0220 	orr.w	r2, r2, #32
 8009ebc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d014      	beq.n	8009ef4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00f      	beq.n	8009ef4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eda:	f043 0204 	orr.w	r2, r3, #4
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	699a      	ldr	r2, [r3, #24]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ef2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00f      	beq.n	8009f1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f04:	f043 0201 	orr.w	r2, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	699a      	ldr	r2, [r3, #24]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00f      	beq.n	8009f48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f2e:	f043 0208 	orr.w	r2, r3, #8
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009f58:	bf00      	nop
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	fffffc90 	.word	0xfffffc90

08009f68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f78:	e010      	b.n	8009f9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f7a:	f7f7 ff87 	bl	8001e8c <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d803      	bhi.n	8009f92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d102      	bne.n	8009f98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e00f      	b.n	8009fbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	695a      	ldr	r2, [r3, #20]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	bf0c      	ite	eq
 8009fac:	2301      	moveq	r3, #1
 8009fae:	2300      	movne	r3, #0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d0df      	beq.n	8009f7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	3307      	adds	r3, #7
 8009fe2:	08db      	lsrs	r3, r3, #3
 8009fe4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e042      	b.n	800a092 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7f7 fdd6 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2224      	movs	r2, #36	@ 0x24
 800a028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0201 	bic.w	r2, r2, #1
 800a03a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fd91 	bl	800ab6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f826 	bl	800a09c <UART_SetConfig>
 800a050:	4603      	mov	r3, r0
 800a052:	2b01      	cmp	r3, #1
 800a054:	d101      	bne.n	800a05a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e01b      	b.n	800a092 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a068:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a078:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f042 0201 	orr.w	r2, r2, #1
 800a088:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fe10 	bl	800acb0 <UART_CheckIdleState>
 800a090:	4603      	mov	r3, r0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a09c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0a0:	b092      	sub	sp, #72	@ 0x48
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4bbe      	ldr	r3, [pc, #760]	@ (800a3c4 <UART_SetConfig+0x328>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	6812      	ldr	r2, [r2, #0]
 800a0d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	68da      	ldr	r2, [r3, #12]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4ab3      	ldr	r2, [pc, #716]	@ (800a3c8 <UART_SetConfig+0x32c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d004      	beq.n	800a108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a104:	4313      	orrs	r3, r2
 800a106:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	4baf      	ldr	r3, [pc, #700]	@ (800a3cc <UART_SetConfig+0x330>)
 800a110:	4013      	ands	r3, r2
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	6812      	ldr	r2, [r2, #0]
 800a116:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a118:	430b      	orrs	r3, r1
 800a11a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a122:	f023 010f 	bic.w	r1, r3, #15
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4aa6      	ldr	r2, [pc, #664]	@ (800a3d0 <UART_SetConfig+0x334>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d177      	bne.n	800a22c <UART_SetConfig+0x190>
 800a13c:	4ba5      	ldr	r3, [pc, #660]	@ (800a3d4 <UART_SetConfig+0x338>)
 800a13e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a144:	2b28      	cmp	r3, #40	@ 0x28
 800a146:	d86d      	bhi.n	800a224 <UART_SetConfig+0x188>
 800a148:	a201      	add	r2, pc, #4	@ (adr r2, 800a150 <UART_SetConfig+0xb4>)
 800a14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14e:	bf00      	nop
 800a150:	0800a1f5 	.word	0x0800a1f5
 800a154:	0800a225 	.word	0x0800a225
 800a158:	0800a225 	.word	0x0800a225
 800a15c:	0800a225 	.word	0x0800a225
 800a160:	0800a225 	.word	0x0800a225
 800a164:	0800a225 	.word	0x0800a225
 800a168:	0800a225 	.word	0x0800a225
 800a16c:	0800a225 	.word	0x0800a225
 800a170:	0800a1fd 	.word	0x0800a1fd
 800a174:	0800a225 	.word	0x0800a225
 800a178:	0800a225 	.word	0x0800a225
 800a17c:	0800a225 	.word	0x0800a225
 800a180:	0800a225 	.word	0x0800a225
 800a184:	0800a225 	.word	0x0800a225
 800a188:	0800a225 	.word	0x0800a225
 800a18c:	0800a225 	.word	0x0800a225
 800a190:	0800a205 	.word	0x0800a205
 800a194:	0800a225 	.word	0x0800a225
 800a198:	0800a225 	.word	0x0800a225
 800a19c:	0800a225 	.word	0x0800a225
 800a1a0:	0800a225 	.word	0x0800a225
 800a1a4:	0800a225 	.word	0x0800a225
 800a1a8:	0800a225 	.word	0x0800a225
 800a1ac:	0800a225 	.word	0x0800a225
 800a1b0:	0800a20d 	.word	0x0800a20d
 800a1b4:	0800a225 	.word	0x0800a225
 800a1b8:	0800a225 	.word	0x0800a225
 800a1bc:	0800a225 	.word	0x0800a225
 800a1c0:	0800a225 	.word	0x0800a225
 800a1c4:	0800a225 	.word	0x0800a225
 800a1c8:	0800a225 	.word	0x0800a225
 800a1cc:	0800a225 	.word	0x0800a225
 800a1d0:	0800a215 	.word	0x0800a215
 800a1d4:	0800a225 	.word	0x0800a225
 800a1d8:	0800a225 	.word	0x0800a225
 800a1dc:	0800a225 	.word	0x0800a225
 800a1e0:	0800a225 	.word	0x0800a225
 800a1e4:	0800a225 	.word	0x0800a225
 800a1e8:	0800a225 	.word	0x0800a225
 800a1ec:	0800a225 	.word	0x0800a225
 800a1f0:	0800a21d 	.word	0x0800a21d
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e222      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e21e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a204:	2308      	movs	r3, #8
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20a:	e21a      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a20c:	2310      	movs	r3, #16
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a212:	e216      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a214:	2320      	movs	r3, #32
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21a:	e212      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a21c:	2340      	movs	r3, #64	@ 0x40
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e20e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a224:	2380      	movs	r3, #128	@ 0x80
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e20a      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a69      	ldr	r2, [pc, #420]	@ (800a3d8 <UART_SetConfig+0x33c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d130      	bne.n	800a298 <UART_SetConfig+0x1fc>
 800a236:	4b67      	ldr	r3, [pc, #412]	@ (800a3d4 <UART_SetConfig+0x338>)
 800a238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23a:	f003 0307 	and.w	r3, r3, #7
 800a23e:	2b05      	cmp	r3, #5
 800a240:	d826      	bhi.n	800a290 <UART_SetConfig+0x1f4>
 800a242:	a201      	add	r2, pc, #4	@ (adr r2, 800a248 <UART_SetConfig+0x1ac>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a261 	.word	0x0800a261
 800a24c:	0800a269 	.word	0x0800a269
 800a250:	0800a271 	.word	0x0800a271
 800a254:	0800a279 	.word	0x0800a279
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a289 	.word	0x0800a289
 800a260:	2300      	movs	r3, #0
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e1ec      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a268:	2304      	movs	r3, #4
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e1e8      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a270:	2308      	movs	r3, #8
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a276:	e1e4      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a278:	2310      	movs	r3, #16
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27e:	e1e0      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a280:	2320      	movs	r3, #32
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a286:	e1dc      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a288:	2340      	movs	r3, #64	@ 0x40
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28e:	e1d8      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a290:	2380      	movs	r3, #128	@ 0x80
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e1d4      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a4f      	ldr	r2, [pc, #316]	@ (800a3dc <UART_SetConfig+0x340>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d130      	bne.n	800a304 <UART_SetConfig+0x268>
 800a2a2:	4b4c      	ldr	r3, [pc, #304]	@ (800a3d4 <UART_SetConfig+0x338>)
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d826      	bhi.n	800a2fc <UART_SetConfig+0x260>
 800a2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <UART_SetConfig+0x218>)
 800a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b4:	0800a2cd 	.word	0x0800a2cd
 800a2b8:	0800a2d5 	.word	0x0800a2d5
 800a2bc:	0800a2dd 	.word	0x0800a2dd
 800a2c0:	0800a2e5 	.word	0x0800a2e5
 800a2c4:	0800a2ed 	.word	0x0800a2ed
 800a2c8:	0800a2f5 	.word	0x0800a2f5
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e1b6      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a2d4:	2304      	movs	r3, #4
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e1b2      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a2dc:	2308      	movs	r3, #8
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e2:	e1ae      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a2e4:	2310      	movs	r3, #16
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ea:	e1aa      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a2ec:	2320      	movs	r3, #32
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f2:	e1a6      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a2f4:	2340      	movs	r3, #64	@ 0x40
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fa:	e1a2      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a2fc:	2380      	movs	r3, #128	@ 0x80
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a302:	e19e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a35      	ldr	r2, [pc, #212]	@ (800a3e0 <UART_SetConfig+0x344>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d130      	bne.n	800a370 <UART_SetConfig+0x2d4>
 800a30e:	4b31      	ldr	r3, [pc, #196]	@ (800a3d4 <UART_SetConfig+0x338>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	2b05      	cmp	r3, #5
 800a318:	d826      	bhi.n	800a368 <UART_SetConfig+0x2cc>
 800a31a:	a201      	add	r2, pc, #4	@ (adr r2, 800a320 <UART_SetConfig+0x284>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a339 	.word	0x0800a339
 800a324:	0800a341 	.word	0x0800a341
 800a328:	0800a349 	.word	0x0800a349
 800a32c:	0800a351 	.word	0x0800a351
 800a330:	0800a359 	.word	0x0800a359
 800a334:	0800a361 	.word	0x0800a361
 800a338:	2300      	movs	r3, #0
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e180      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a340:	2304      	movs	r3, #4
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e17c      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a348:	2308      	movs	r3, #8
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34e:	e178      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a350:	2310      	movs	r3, #16
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a356:	e174      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a358:	2320      	movs	r3, #32
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35e:	e170      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a360:	2340      	movs	r3, #64	@ 0x40
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a366:	e16c      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a368:	2380      	movs	r3, #128	@ 0x80
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e168      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e4 <UART_SetConfig+0x348>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d142      	bne.n	800a400 <UART_SetConfig+0x364>
 800a37a:	4b16      	ldr	r3, [pc, #88]	@ (800a3d4 <UART_SetConfig+0x338>)
 800a37c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	2b05      	cmp	r3, #5
 800a384:	d838      	bhi.n	800a3f8 <UART_SetConfig+0x35c>
 800a386:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <UART_SetConfig+0x2f0>)
 800a388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38c:	0800a3a5 	.word	0x0800a3a5
 800a390:	0800a3ad 	.word	0x0800a3ad
 800a394:	0800a3b5 	.word	0x0800a3b5
 800a398:	0800a3bd 	.word	0x0800a3bd
 800a39c:	0800a3e9 	.word	0x0800a3e9
 800a3a0:	0800a3f1 	.word	0x0800a3f1
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e14a      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e146      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e142      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e13e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a3c4:	cfff69f3 	.word	0xcfff69f3
 800a3c8:	58000c00 	.word	0x58000c00
 800a3cc:	11fff4ff 	.word	0x11fff4ff
 800a3d0:	40011000 	.word	0x40011000
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	40004400 	.word	0x40004400
 800a3dc:	40004800 	.word	0x40004800
 800a3e0:	40004c00 	.word	0x40004c00
 800a3e4:	40005000 	.word	0x40005000
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e128      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a3f0:	2340      	movs	r3, #64	@ 0x40
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e124      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a3f8:	2380      	movs	r3, #128	@ 0x80
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e120      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4acb      	ldr	r2, [pc, #812]	@ (800a734 <UART_SetConfig+0x698>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d176      	bne.n	800a4f8 <UART_SetConfig+0x45c>
 800a40a:	4bcb      	ldr	r3, [pc, #812]	@ (800a738 <UART_SetConfig+0x69c>)
 800a40c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a40e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a412:	2b28      	cmp	r3, #40	@ 0x28
 800a414:	d86c      	bhi.n	800a4f0 <UART_SetConfig+0x454>
 800a416:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <UART_SetConfig+0x380>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a4c1 	.word	0x0800a4c1
 800a420:	0800a4f1 	.word	0x0800a4f1
 800a424:	0800a4f1 	.word	0x0800a4f1
 800a428:	0800a4f1 	.word	0x0800a4f1
 800a42c:	0800a4f1 	.word	0x0800a4f1
 800a430:	0800a4f1 	.word	0x0800a4f1
 800a434:	0800a4f1 	.word	0x0800a4f1
 800a438:	0800a4f1 	.word	0x0800a4f1
 800a43c:	0800a4c9 	.word	0x0800a4c9
 800a440:	0800a4f1 	.word	0x0800a4f1
 800a444:	0800a4f1 	.word	0x0800a4f1
 800a448:	0800a4f1 	.word	0x0800a4f1
 800a44c:	0800a4f1 	.word	0x0800a4f1
 800a450:	0800a4f1 	.word	0x0800a4f1
 800a454:	0800a4f1 	.word	0x0800a4f1
 800a458:	0800a4f1 	.word	0x0800a4f1
 800a45c:	0800a4d1 	.word	0x0800a4d1
 800a460:	0800a4f1 	.word	0x0800a4f1
 800a464:	0800a4f1 	.word	0x0800a4f1
 800a468:	0800a4f1 	.word	0x0800a4f1
 800a46c:	0800a4f1 	.word	0x0800a4f1
 800a470:	0800a4f1 	.word	0x0800a4f1
 800a474:	0800a4f1 	.word	0x0800a4f1
 800a478:	0800a4f1 	.word	0x0800a4f1
 800a47c:	0800a4d9 	.word	0x0800a4d9
 800a480:	0800a4f1 	.word	0x0800a4f1
 800a484:	0800a4f1 	.word	0x0800a4f1
 800a488:	0800a4f1 	.word	0x0800a4f1
 800a48c:	0800a4f1 	.word	0x0800a4f1
 800a490:	0800a4f1 	.word	0x0800a4f1
 800a494:	0800a4f1 	.word	0x0800a4f1
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a4e1 	.word	0x0800a4e1
 800a4a0:	0800a4f1 	.word	0x0800a4f1
 800a4a4:	0800a4f1 	.word	0x0800a4f1
 800a4a8:	0800a4f1 	.word	0x0800a4f1
 800a4ac:	0800a4f1 	.word	0x0800a4f1
 800a4b0:	0800a4f1 	.word	0x0800a4f1
 800a4b4:	0800a4f1 	.word	0x0800a4f1
 800a4b8:	0800a4f1 	.word	0x0800a4f1
 800a4bc:	0800a4e9 	.word	0x0800a4e9
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e0bc      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e0b8      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e0b4      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4d8:	2310      	movs	r3, #16
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4de:	e0b0      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4e0:	2320      	movs	r3, #32
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e0ac      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4e8:	2340      	movs	r3, #64	@ 0x40
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e0a8      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4f0:	2380      	movs	r3, #128	@ 0x80
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e0a4      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a8f      	ldr	r2, [pc, #572]	@ (800a73c <UART_SetConfig+0x6a0>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d130      	bne.n	800a564 <UART_SetConfig+0x4c8>
 800a502:	4b8d      	ldr	r3, [pc, #564]	@ (800a738 <UART_SetConfig+0x69c>)
 800a504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a506:	f003 0307 	and.w	r3, r3, #7
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	d826      	bhi.n	800a55c <UART_SetConfig+0x4c0>
 800a50e:	a201      	add	r2, pc, #4	@ (adr r2, 800a514 <UART_SetConfig+0x478>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a52d 	.word	0x0800a52d
 800a518:	0800a535 	.word	0x0800a535
 800a51c:	0800a53d 	.word	0x0800a53d
 800a520:	0800a545 	.word	0x0800a545
 800a524:	0800a54d 	.word	0x0800a54d
 800a528:	0800a555 	.word	0x0800a555
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e086      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a534:	2304      	movs	r3, #4
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e082      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a53c:	2308      	movs	r3, #8
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e07e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a544:	2310      	movs	r3, #16
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e07a      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a54c:	2320      	movs	r3, #32
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e076      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a554:	2340      	movs	r3, #64	@ 0x40
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e072      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a55c:	2380      	movs	r3, #128	@ 0x80
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e06e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a75      	ldr	r2, [pc, #468]	@ (800a740 <UART_SetConfig+0x6a4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d130      	bne.n	800a5d0 <UART_SetConfig+0x534>
 800a56e:	4b72      	ldr	r3, [pc, #456]	@ (800a738 <UART_SetConfig+0x69c>)
 800a570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b05      	cmp	r3, #5
 800a578:	d826      	bhi.n	800a5c8 <UART_SetConfig+0x52c>
 800a57a:	a201      	add	r2, pc, #4	@ (adr r2, 800a580 <UART_SetConfig+0x4e4>)
 800a57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a580:	0800a599 	.word	0x0800a599
 800a584:	0800a5a1 	.word	0x0800a5a1
 800a588:	0800a5a9 	.word	0x0800a5a9
 800a58c:	0800a5b1 	.word	0x0800a5b1
 800a590:	0800a5b9 	.word	0x0800a5b9
 800a594:	0800a5c1 	.word	0x0800a5c1
 800a598:	2300      	movs	r3, #0
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e050      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5a0:	2304      	movs	r3, #4
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e04c      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5a8:	2308      	movs	r3, #8
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e048      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b6:	e044      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5b8:	2320      	movs	r3, #32
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5be:	e040      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5c0:	2340      	movs	r3, #64	@ 0x40
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e03c      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5c8:	2380      	movs	r3, #128	@ 0x80
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e038      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a5b      	ldr	r2, [pc, #364]	@ (800a744 <UART_SetConfig+0x6a8>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d130      	bne.n	800a63c <UART_SetConfig+0x5a0>
 800a5da:	4b57      	ldr	r3, [pc, #348]	@ (800a738 <UART_SetConfig+0x69c>)
 800a5dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d826      	bhi.n	800a634 <UART_SetConfig+0x598>
 800a5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5ec <UART_SetConfig+0x550>)
 800a5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ec:	0800a605 	.word	0x0800a605
 800a5f0:	0800a60d 	.word	0x0800a60d
 800a5f4:	0800a615 	.word	0x0800a615
 800a5f8:	0800a61d 	.word	0x0800a61d
 800a5fc:	0800a625 	.word	0x0800a625
 800a600:	0800a62d 	.word	0x0800a62d
 800a604:	2302      	movs	r3, #2
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e01a      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a60c:	2304      	movs	r3, #4
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a612:	e016      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a614:	2308      	movs	r3, #8
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61a:	e012      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a61c:	2310      	movs	r3, #16
 800a61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a622:	e00e      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a624:	2320      	movs	r3, #32
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62a:	e00a      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a62c:	2340      	movs	r3, #64	@ 0x40
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e006      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a634:	2380      	movs	r3, #128	@ 0x80
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e002      	b.n	800a642 <UART_SetConfig+0x5a6>
 800a63c:	2380      	movs	r3, #128	@ 0x80
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a3f      	ldr	r2, [pc, #252]	@ (800a744 <UART_SetConfig+0x6a8>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	f040 80f8 	bne.w	800a83e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a64e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a652:	2b20      	cmp	r3, #32
 800a654:	dc46      	bgt.n	800a6e4 <UART_SetConfig+0x648>
 800a656:	2b02      	cmp	r3, #2
 800a658:	f2c0 8082 	blt.w	800a760 <UART_SetConfig+0x6c4>
 800a65c:	3b02      	subs	r3, #2
 800a65e:	2b1e      	cmp	r3, #30
 800a660:	d87e      	bhi.n	800a760 <UART_SetConfig+0x6c4>
 800a662:	a201      	add	r2, pc, #4	@ (adr r2, 800a668 <UART_SetConfig+0x5cc>)
 800a664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a668:	0800a6eb 	.word	0x0800a6eb
 800a66c:	0800a761 	.word	0x0800a761
 800a670:	0800a6f3 	.word	0x0800a6f3
 800a674:	0800a761 	.word	0x0800a761
 800a678:	0800a761 	.word	0x0800a761
 800a67c:	0800a761 	.word	0x0800a761
 800a680:	0800a703 	.word	0x0800a703
 800a684:	0800a761 	.word	0x0800a761
 800a688:	0800a761 	.word	0x0800a761
 800a68c:	0800a761 	.word	0x0800a761
 800a690:	0800a761 	.word	0x0800a761
 800a694:	0800a761 	.word	0x0800a761
 800a698:	0800a761 	.word	0x0800a761
 800a69c:	0800a761 	.word	0x0800a761
 800a6a0:	0800a713 	.word	0x0800a713
 800a6a4:	0800a761 	.word	0x0800a761
 800a6a8:	0800a761 	.word	0x0800a761
 800a6ac:	0800a761 	.word	0x0800a761
 800a6b0:	0800a761 	.word	0x0800a761
 800a6b4:	0800a761 	.word	0x0800a761
 800a6b8:	0800a761 	.word	0x0800a761
 800a6bc:	0800a761 	.word	0x0800a761
 800a6c0:	0800a761 	.word	0x0800a761
 800a6c4:	0800a761 	.word	0x0800a761
 800a6c8:	0800a761 	.word	0x0800a761
 800a6cc:	0800a761 	.word	0x0800a761
 800a6d0:	0800a761 	.word	0x0800a761
 800a6d4:	0800a761 	.word	0x0800a761
 800a6d8:	0800a761 	.word	0x0800a761
 800a6dc:	0800a761 	.word	0x0800a761
 800a6e0:	0800a753 	.word	0x0800a753
 800a6e4:	2b40      	cmp	r3, #64	@ 0x40
 800a6e6:	d037      	beq.n	800a758 <UART_SetConfig+0x6bc>
 800a6e8:	e03a      	b.n	800a760 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6ea:	f7fc feb3 	bl	8007454 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6f0:	e03c      	b.n	800a76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fc fec2 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a700:	e034      	b.n	800a76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a702:	f107 0318 	add.w	r3, r7, #24
 800a706:	4618      	mov	r0, r3
 800a708:	f7fd f80e 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a710:	e02c      	b.n	800a76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a712:	4b09      	ldr	r3, [pc, #36]	@ (800a738 <UART_SetConfig+0x69c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0320 	and.w	r3, r3, #32
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d016      	beq.n	800a74c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a71e:	4b06      	ldr	r3, [pc, #24]	@ (800a738 <UART_SetConfig+0x69c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	08db      	lsrs	r3, r3, #3
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	4a07      	ldr	r2, [pc, #28]	@ (800a748 <UART_SetConfig+0x6ac>)
 800a72a:	fa22 f303 	lsr.w	r3, r2, r3
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a730:	e01c      	b.n	800a76c <UART_SetConfig+0x6d0>
 800a732:	bf00      	nop
 800a734:	40011400 	.word	0x40011400
 800a738:	58024400 	.word	0x58024400
 800a73c:	40007800 	.word	0x40007800
 800a740:	40007c00 	.word	0x40007c00
 800a744:	58000c00 	.word	0x58000c00
 800a748:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a74c:	4b9d      	ldr	r3, [pc, #628]	@ (800a9c4 <UART_SetConfig+0x928>)
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a750:	e00c      	b.n	800a76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a752:	4b9d      	ldr	r3, [pc, #628]	@ (800a9c8 <UART_SetConfig+0x92c>)
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a756:	e009      	b.n	800a76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a758:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75e:	e005      	b.n	800a76c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a76a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 81de 	beq.w	800ab30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a778:	4a94      	ldr	r2, [pc, #592]	@ (800a9cc <UART_SetConfig+0x930>)
 800a77a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a77e:	461a      	mov	r2, r3
 800a780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a782:	fbb3 f3f2 	udiv	r3, r3, r2
 800a786:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	4413      	add	r3, r2
 800a792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a794:	429a      	cmp	r2, r3
 800a796:	d305      	bcc.n	800a7a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d903      	bls.n	800a7ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7aa:	e1c1      	b.n	800ab30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	60bb      	str	r3, [r7, #8]
 800a7b2:	60fa      	str	r2, [r7, #12]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b8:	4a84      	ldr	r2, [pc, #528]	@ (800a9cc <UART_SetConfig+0x930>)
 800a7ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	607a      	str	r2, [r7, #4]
 800a7c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7ce:	f7f5 fd83 	bl	80002d8 <__aeabi_uldivmod>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	4619      	mov	r1, r3
 800a7da:	f04f 0200 	mov.w	r2, #0
 800a7de:	f04f 0300 	mov.w	r3, #0
 800a7e2:	020b      	lsls	r3, r1, #8
 800a7e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7e8:	0202      	lsls	r2, r0, #8
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	6849      	ldr	r1, [r1, #4]
 800a7ee:	0849      	lsrs	r1, r1, #1
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	eb12 0804 	adds.w	r8, r2, r4
 800a7fa:	eb43 0905 	adc.w	r9, r3, r5
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	469a      	mov	sl, r3
 800a806:	4693      	mov	fp, r2
 800a808:	4652      	mov	r2, sl
 800a80a:	465b      	mov	r3, fp
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f5 fd62 	bl	80002d8 <__aeabi_uldivmod>
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	4613      	mov	r3, r2
 800a81a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a822:	d308      	bcc.n	800a836 <UART_SetConfig+0x79a>
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a82a:	d204      	bcs.n	800a836 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a832:	60da      	str	r2, [r3, #12]
 800a834:	e17c      	b.n	800ab30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a83c:	e178      	b.n	800ab30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a846:	f040 80c5 	bne.w	800a9d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a84a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a84e:	2b20      	cmp	r3, #32
 800a850:	dc48      	bgt.n	800a8e4 <UART_SetConfig+0x848>
 800a852:	2b00      	cmp	r3, #0
 800a854:	db7b      	blt.n	800a94e <UART_SetConfig+0x8b2>
 800a856:	2b20      	cmp	r3, #32
 800a858:	d879      	bhi.n	800a94e <UART_SetConfig+0x8b2>
 800a85a:	a201      	add	r2, pc, #4	@ (adr r2, 800a860 <UART_SetConfig+0x7c4>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a8eb 	.word	0x0800a8eb
 800a864:	0800a8f3 	.word	0x0800a8f3
 800a868:	0800a94f 	.word	0x0800a94f
 800a86c:	0800a94f 	.word	0x0800a94f
 800a870:	0800a8fb 	.word	0x0800a8fb
 800a874:	0800a94f 	.word	0x0800a94f
 800a878:	0800a94f 	.word	0x0800a94f
 800a87c:	0800a94f 	.word	0x0800a94f
 800a880:	0800a90b 	.word	0x0800a90b
 800a884:	0800a94f 	.word	0x0800a94f
 800a888:	0800a94f 	.word	0x0800a94f
 800a88c:	0800a94f 	.word	0x0800a94f
 800a890:	0800a94f 	.word	0x0800a94f
 800a894:	0800a94f 	.word	0x0800a94f
 800a898:	0800a94f 	.word	0x0800a94f
 800a89c:	0800a94f 	.word	0x0800a94f
 800a8a0:	0800a91b 	.word	0x0800a91b
 800a8a4:	0800a94f 	.word	0x0800a94f
 800a8a8:	0800a94f 	.word	0x0800a94f
 800a8ac:	0800a94f 	.word	0x0800a94f
 800a8b0:	0800a94f 	.word	0x0800a94f
 800a8b4:	0800a94f 	.word	0x0800a94f
 800a8b8:	0800a94f 	.word	0x0800a94f
 800a8bc:	0800a94f 	.word	0x0800a94f
 800a8c0:	0800a94f 	.word	0x0800a94f
 800a8c4:	0800a94f 	.word	0x0800a94f
 800a8c8:	0800a94f 	.word	0x0800a94f
 800a8cc:	0800a94f 	.word	0x0800a94f
 800a8d0:	0800a94f 	.word	0x0800a94f
 800a8d4:	0800a94f 	.word	0x0800a94f
 800a8d8:	0800a94f 	.word	0x0800a94f
 800a8dc:	0800a94f 	.word	0x0800a94f
 800a8e0:	0800a941 	.word	0x0800a941
 800a8e4:	2b40      	cmp	r3, #64	@ 0x40
 800a8e6:	d02e      	beq.n	800a946 <UART_SetConfig+0x8aa>
 800a8e8:	e031      	b.n	800a94e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ea:	f7fa fdbd 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 800a8ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8f0:	e033      	b.n	800a95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f2:	f7fa fdcf 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 800a8f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8f8:	e02f      	b.n	800a95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fc fdbe 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a908:	e027      	b.n	800a95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a90a:	f107 0318 	add.w	r3, r7, #24
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fc ff0a 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a918:	e01f      	b.n	800a95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a91a:	4b2d      	ldr	r3, [pc, #180]	@ (800a9d0 <UART_SetConfig+0x934>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a926:	4b2a      	ldr	r3, [pc, #168]	@ (800a9d0 <UART_SetConfig+0x934>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	08db      	lsrs	r3, r3, #3
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	4a24      	ldr	r2, [pc, #144]	@ (800a9c4 <UART_SetConfig+0x928>)
 800a932:	fa22 f303 	lsr.w	r3, r2, r3
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a938:	e00f      	b.n	800a95a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a93a:	4b22      	ldr	r3, [pc, #136]	@ (800a9c4 <UART_SetConfig+0x928>)
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93e:	e00c      	b.n	800a95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a940:	4b21      	ldr	r3, [pc, #132]	@ (800a9c8 <UART_SetConfig+0x92c>)
 800a942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a944:	e009      	b.n	800a95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94c:	e005      	b.n	800a95a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 80e7 	beq.w	800ab30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a966:	4a19      	ldr	r2, [pc, #100]	@ (800a9cc <UART_SetConfig+0x930>)
 800a968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a970:	fbb3 f3f2 	udiv	r3, r3, r2
 800a974:	005a      	lsls	r2, r3, #1
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	085b      	lsrs	r3, r3, #1
 800a97c:	441a      	add	r2, r3
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	fbb2 f3f3 	udiv	r3, r2, r3
 800a986:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98a:	2b0f      	cmp	r3, #15
 800a98c:	d916      	bls.n	800a9bc <UART_SetConfig+0x920>
 800a98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a994:	d212      	bcs.n	800a9bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a998:	b29b      	uxth	r3, r3
 800a99a:	f023 030f 	bic.w	r3, r3, #15
 800a99e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a9b8:	60da      	str	r2, [r3, #12]
 800a9ba:	e0b9      	b.n	800ab30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9c2:	e0b5      	b.n	800ab30 <UART_SetConfig+0xa94>
 800a9c4:	03d09000 	.word	0x03d09000
 800a9c8:	003d0900 	.word	0x003d0900
 800a9cc:	0800ed1c 	.word	0x0800ed1c
 800a9d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9d8:	2b20      	cmp	r3, #32
 800a9da:	dc49      	bgt.n	800aa70 <UART_SetConfig+0x9d4>
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	db7c      	blt.n	800aada <UART_SetConfig+0xa3e>
 800a9e0:	2b20      	cmp	r3, #32
 800a9e2:	d87a      	bhi.n	800aada <UART_SetConfig+0xa3e>
 800a9e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a9ec <UART_SetConfig+0x950>)
 800a9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ea:	bf00      	nop
 800a9ec:	0800aa77 	.word	0x0800aa77
 800a9f0:	0800aa7f 	.word	0x0800aa7f
 800a9f4:	0800aadb 	.word	0x0800aadb
 800a9f8:	0800aadb 	.word	0x0800aadb
 800a9fc:	0800aa87 	.word	0x0800aa87
 800aa00:	0800aadb 	.word	0x0800aadb
 800aa04:	0800aadb 	.word	0x0800aadb
 800aa08:	0800aadb 	.word	0x0800aadb
 800aa0c:	0800aa97 	.word	0x0800aa97
 800aa10:	0800aadb 	.word	0x0800aadb
 800aa14:	0800aadb 	.word	0x0800aadb
 800aa18:	0800aadb 	.word	0x0800aadb
 800aa1c:	0800aadb 	.word	0x0800aadb
 800aa20:	0800aadb 	.word	0x0800aadb
 800aa24:	0800aadb 	.word	0x0800aadb
 800aa28:	0800aadb 	.word	0x0800aadb
 800aa2c:	0800aaa7 	.word	0x0800aaa7
 800aa30:	0800aadb 	.word	0x0800aadb
 800aa34:	0800aadb 	.word	0x0800aadb
 800aa38:	0800aadb 	.word	0x0800aadb
 800aa3c:	0800aadb 	.word	0x0800aadb
 800aa40:	0800aadb 	.word	0x0800aadb
 800aa44:	0800aadb 	.word	0x0800aadb
 800aa48:	0800aadb 	.word	0x0800aadb
 800aa4c:	0800aadb 	.word	0x0800aadb
 800aa50:	0800aadb 	.word	0x0800aadb
 800aa54:	0800aadb 	.word	0x0800aadb
 800aa58:	0800aadb 	.word	0x0800aadb
 800aa5c:	0800aadb 	.word	0x0800aadb
 800aa60:	0800aadb 	.word	0x0800aadb
 800aa64:	0800aadb 	.word	0x0800aadb
 800aa68:	0800aadb 	.word	0x0800aadb
 800aa6c:	0800aacd 	.word	0x0800aacd
 800aa70:	2b40      	cmp	r3, #64	@ 0x40
 800aa72:	d02e      	beq.n	800aad2 <UART_SetConfig+0xa36>
 800aa74:	e031      	b.n	800aada <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa76:	f7fa fcf7 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 800aa7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa7c:	e033      	b.n	800aae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa7e:	f7fa fd09 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 800aa82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa84:	e02f      	b.n	800aae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fc fcf8 	bl	8007480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa94:	e027      	b.n	800aae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa96:	f107 0318 	add.w	r3, r7, #24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fc fe44 	bl	8007728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e01f      	b.n	800aae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab5c <UART_SetConfig+0xac0>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0320 	and.w	r3, r3, #32
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aab2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab5c <UART_SetConfig+0xac0>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	08db      	lsrs	r3, r3, #3
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	4a28      	ldr	r2, [pc, #160]	@ (800ab60 <UART_SetConfig+0xac4>)
 800aabe:	fa22 f303 	lsr.w	r3, r2, r3
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aac4:	e00f      	b.n	800aae6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aac6:	4b26      	ldr	r3, [pc, #152]	@ (800ab60 <UART_SetConfig+0xac4>)
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaca:	e00c      	b.n	800aae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aacc:	4b25      	ldr	r3, [pc, #148]	@ (800ab64 <UART_SetConfig+0xac8>)
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad0:	e009      	b.n	800aae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad8:	e005      	b.n	800aae6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aae4:	bf00      	nop
    }

    if (pclk != 0U)
 800aae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d021      	beq.n	800ab30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab68 <UART_SetConfig+0xacc>)
 800aaf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aafa:	fbb3 f2f2 	udiv	r2, r3, r2
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	441a      	add	r2, r3
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	2b0f      	cmp	r3, #15
 800ab14:	d909      	bls.n	800ab2a <UART_SetConfig+0xa8e>
 800ab16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab1c:	d205      	bcs.n	800ab2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60da      	str	r2, [r3, #12]
 800ab28:	e002      	b.n	800ab30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	2200      	movs	r2, #0
 800ab44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab4c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3748      	adds	r7, #72	@ 0x48
 800ab54:	46bd      	mov	sp, r7
 800ab56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab5a:	bf00      	nop
 800ab5c:	58024400 	.word	0x58024400
 800ab60:	03d09000 	.word	0x03d09000
 800ab64:	003d0900 	.word	0x003d0900
 800ab68:	0800ed1c 	.word	0x0800ed1c

0800ab6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab78:	f003 0308 	and.w	r3, r3, #8
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abde:	f003 0304 	and.w	r3, r3, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac00:	f003 0310 	and.w	r3, r3, #16
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00a      	beq.n	800ac1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac22:	f003 0320 	and.w	r3, r3, #32
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d01a      	beq.n	800ac82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac6a:	d10a      	bne.n	800ac82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00a      	beq.n	800aca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	605a      	str	r2, [r3, #4]
  }
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b098      	sub	sp, #96	@ 0x60
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acc0:	f7f7 f8e4 	bl	8001e8c <HAL_GetTick>
 800acc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0308 	and.w	r3, r3, #8
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d12f      	bne.n	800ad34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acdc:	2200      	movs	r2, #0
 800acde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f88e 	bl	800ae04 <UART_WaitOnFlagUntilTimeout>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d022      	beq.n	800ad34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad14:	e841 2300 	strex	r3, r2, [r1]
 800ad18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e6      	bne.n	800acee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e063      	b.n	800adfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0304 	and.w	r3, r3, #4
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d149      	bne.n	800add6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f857 	bl	800ae04 <UART_WaitOnFlagUntilTimeout>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d03c      	beq.n	800add6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	623b      	str	r3, [r7, #32]
   return(result);
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad82:	e841 2300 	strex	r3, r2, [r1]
 800ad86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e6      	bne.n	800ad5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	e853 3f00 	ldrex	r3, [r3]
 800ad9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f023 0301 	bic.w	r3, r3, #1
 800ada4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3308      	adds	r3, #8
 800adac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adae:	61fa      	str	r2, [r7, #28]
 800adb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb2:	69b9      	ldr	r1, [r7, #24]
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	e841 2300 	strex	r3, r2, [r1]
 800adba:	617b      	str	r3, [r7, #20]
   return(result);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e5      	bne.n	800ad8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2220      	movs	r2, #32
 800adc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e012      	b.n	800adfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3758      	adds	r7, #88	@ 0x58
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	4613      	mov	r3, r2
 800ae12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae14:	e04f      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1c:	d04b      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae1e:	f7f7 f835 	bl	8001e8c <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e04e      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d037      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b80      	cmp	r3, #128	@ 0x80
 800ae4a:	d034      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b40      	cmp	r3, #64	@ 0x40
 800ae50:	d031      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d110      	bne.n	800ae82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2208      	movs	r2, #8
 800ae66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f839 	bl	800aee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2208      	movs	r2, #8
 800ae72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e029      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae90:	d111      	bne.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 f81f 	bl	800aee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e00f      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	69da      	ldr	r2, [r3, #28]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4013      	ands	r3, r2
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	bf0c      	ite	eq
 800aec6:	2301      	moveq	r3, #1
 800aec8:	2300      	movne	r3, #0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d0a0      	beq.n	800ae16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b095      	sub	sp, #84	@ 0x54
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aefc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af06:	643b      	str	r3, [r7, #64]	@ 0x40
 800af08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	61fb      	str	r3, [r7, #28]
   return(result);
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	4b1e      	ldr	r3, [pc, #120]	@ (800afa8 <UART_EndRxTransfer+0xc8>)
 800af2e:	4013      	ands	r3, r2
 800af30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3308      	adds	r3, #8
 800af38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e5      	bne.n	800af1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af52:	2b01      	cmp	r3, #1
 800af54:	d118      	bne.n	800af88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	60bb      	str	r3, [r7, #8]
   return(result);
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f023 0310 	bic.w	r3, r3, #16
 800af6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	461a      	mov	r2, r3
 800af72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af78:	6979      	ldr	r1, [r7, #20]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	e841 2300 	strex	r3, r2, [r1]
 800af80:	613b      	str	r3, [r7, #16]
   return(result);
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e6      	bne.n	800af56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2220      	movs	r2, #32
 800af8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af9c:	bf00      	nop
 800af9e:	3754      	adds	r7, #84	@ 0x54
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	effffffe 	.word	0xeffffffe

0800afac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <HAL_UARTEx_DisableFifoMode+0x16>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e027      	b.n	800b012 <HAL_UARTEx_DisableFifoMode+0x66>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2224      	movs	r2, #36	@ 0x24
 800afce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0201 	bic.w	r2, r2, #1
 800afe8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aff0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2220      	movs	r2, #32
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b032:	2302      	movs	r3, #2
 800b034:	e02d      	b.n	800b092 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2224      	movs	r2, #36	@ 0x24
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f022 0201 	bic.w	r2, r2, #1
 800b05c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f850 	bl	800b118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2220      	movs	r2, #32
 800b084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d101      	bne.n	800b0b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	e02d      	b.n	800b10e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2224      	movs	r2, #36	@ 0x24
 800b0be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f022 0201 	bic.w	r2, r2, #1
 800b0d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f812 	bl	800b118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2220      	movs	r2, #32
 800b100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b124:	2b00      	cmp	r3, #0
 800b126:	d108      	bne.n	800b13a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b138:	e031      	b.n	800b19e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b13a:	2310      	movs	r3, #16
 800b13c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b13e:	2310      	movs	r3, #16
 800b140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	0e5b      	lsrs	r3, r3, #25
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	0f5b      	lsrs	r3, r3, #29
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f003 0307 	and.w	r3, r3, #7
 800b160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	7b3a      	ldrb	r2, [r7, #12]
 800b166:	4911      	ldr	r1, [pc, #68]	@ (800b1ac <UARTEx_SetNbDataToProcess+0x94>)
 800b168:	5c8a      	ldrb	r2, [r1, r2]
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b16e:	7b3a      	ldrb	r2, [r7, #12]
 800b170:	490f      	ldr	r1, [pc, #60]	@ (800b1b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b174:	fb93 f3f2 	sdiv	r3, r3, r2
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	7b7a      	ldrb	r2, [r7, #13]
 800b184:	4909      	ldr	r1, [pc, #36]	@ (800b1ac <UARTEx_SetNbDataToProcess+0x94>)
 800b186:	5c8a      	ldrb	r2, [r1, r2]
 800b188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b18c:	7b7a      	ldrb	r2, [r7, #13]
 800b18e:	4908      	ldr	r1, [pc, #32]	@ (800b1b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b192:	fb93 f3f2 	sdiv	r3, r3, r2
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b19e:	bf00      	nop
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	0800ed34 	.word	0x0800ed34
 800b1b0:	0800ed3c 	.word	0x0800ed3c

0800b1b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	b480      	push	{r7}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	f107 001c 	add.w	r0, r7, #28
 800b1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b1ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b1ce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b1d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b1d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b1da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <SDMMC_Init+0x50>)
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	b004      	add	sp, #16
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	ffc02c00 	.word	0xffc02c00

0800b208 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f043 0203 	orr.w	r2, r3, #3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0303 	and.w	r3, r3, #3
}
 800b276:	4618      	mov	r0, r3
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
	...

0800b284 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b2a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b2ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68da      	ldr	r2, [r3, #12]
 800b2ba:	4b06      	ldr	r3, [pc, #24]	@ (800b2d4 <SDMMC_SendCommand+0x50>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	fffee0c0 	.word	0xfffee0c0

0800b2d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	b2db      	uxtb	r3, r3
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3314      	adds	r3, #20
 800b300:	461a      	mov	r2, r3
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	4413      	add	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b33e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b344:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b34a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	431a      	orrs	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b362:	2300      	movs	r3, #0

}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b37e:	2310      	movs	r3, #16
 800b380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b38c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff ff73 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b39e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3a2:	2110      	movs	r1, #16
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fa5f 	bl	800b868 <SDMMC_GetCmdResp1>
 800b3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b088      	sub	sp, #32
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3c4:	2311      	movs	r3, #17
 800b3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d8:	f107 0308 	add.w	r3, r7, #8
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff ff50 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3e8:	2111      	movs	r1, #17
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa3c 	bl	800b868 <SDMMC_GetCmdResp1>
 800b3f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f2:	69fb      	ldr	r3, [r7, #28]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b40a:	2312      	movs	r3, #18
 800b40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b40e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b41c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b41e:	f107 0308 	add.w	r3, r7, #8
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff ff2d 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b42a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b42e:	2112      	movs	r1, #18
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa19 	bl	800b868 <SDMMC_GetCmdResp1>
 800b436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b438:	69fb      	ldr	r3, [r7, #28]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b088      	sub	sp, #32
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b450:	2318      	movs	r3, #24
 800b452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b45e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b462:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff ff0a 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b470:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b474:	2118      	movs	r1, #24
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f9f6 	bl	800b868 <SDMMC_GetCmdResp1>
 800b47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47e:	69fb      	ldr	r3, [r7, #28]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b496:	2319      	movs	r3, #25
 800b498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b49a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4aa:	f107 0308 	add.w	r3, r7, #8
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff fee7 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4ba:	2119      	movs	r1, #25
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f9d3 	bl	800b868 <SDMMC_GetCmdResp1>
 800b4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3720      	adds	r7, #32
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4dc:	230c      	movs	r3, #12
 800b4de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4ee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b508:	f107 0308 	add.w	r3, r7, #8
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff feb8 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b514:	4a0b      	ldr	r2, [pc, #44]	@ (800b544 <SDMMC_CmdStopTransfer+0x74>)
 800b516:	210c      	movs	r1, #12
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f9a5 	bl	800b868 <SDMMC_GetCmdResp1>
 800b51e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b532:	d101      	bne.n	800b538 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b534:	2300      	movs	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b538:	69fb      	ldr	r3, [r7, #28]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3720      	adds	r7, #32
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	05f5e100 	.word	0x05f5e100

0800b548 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b556:	2307      	movs	r3, #7
 800b558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b55a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b55e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b568:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b56a:	f107 0308 	add.w	r3, r7, #8
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7ff fe87 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b57a:	2107      	movs	r1, #7
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f973 	bl	800b868 <SDMMC_GetCmdResp1>
 800b582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b584:	69fb      	ldr	r3, [r7, #28]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b088      	sub	sp, #32
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ac:	f107 0308 	add.w	r3, r7, #8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff fe66 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fb97 	bl	800bcec <SDMMC_GetCmdError>
 800b5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b088      	sub	sp, #32
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5d2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b5d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5d8:	2308      	movs	r3, #8
 800b5da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fe46 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fb29 	bl	800bc50 <SDMMC_GetCmdResp7>
 800b5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b600:	69fb      	ldr	r3, [r7, #28]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b088      	sub	sp, #32
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b618:	2337      	movs	r3, #55	@ 0x37
 800b61a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b61c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b62a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b62c:	f107 0308 	add.w	r3, r7, #8
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fe26 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b63c:	2137      	movs	r1, #55	@ 0x37
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f912 	bl	800b868 <SDMMC_GetCmdResp1>
 800b644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b646:	69fb      	ldr	r3, [r7, #28]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b65e:	2329      	movs	r3, #41	@ 0x29
 800b660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b668:	2300      	movs	r3, #0
 800b66a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b66c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b670:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b672:	f107 0308 	add.w	r3, r7, #8
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff fe03 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa2e 	bl	800bae0 <SDMMC_GetCmdResp3>
 800b684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b686:	69fb      	ldr	r3, [r7, #28]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3720      	adds	r7, #32
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b69e:	2306      	movs	r3, #6
 800b6a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b2:	f107 0308 	add.w	r3, r7, #8
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff fde3 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6c2:	2106      	movs	r1, #6
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f8cf 	bl	800b868 <SDMMC_GetCmdResp1>
 800b6ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3720      	adds	r7, #32
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b088      	sub	sp, #32
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6e2:	2333      	movs	r3, #51	@ 0x33
 800b6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f6:	f107 0308 	add.w	r3, r7, #8
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fdc1 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b702:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b706:	2133      	movs	r1, #51	@ 0x33
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f8ad 	bl	800b868 <SDMMC_GetCmdResp1>
 800b70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b710:	69fb      	ldr	r3, [r7, #28]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3720      	adds	r7, #32
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b088      	sub	sp, #32
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b726:	2302      	movs	r3, #2
 800b728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b72a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b72e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b730:	2300      	movs	r3, #0
 800b732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b738:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b73a:	f107 0308 	add.w	r3, r7, #8
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7ff fd9f 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f980 	bl	800ba4c <SDMMC_GetCmdResp2>
 800b74c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b74e:	69fb      	ldr	r3, [r7, #28]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3720      	adds	r7, #32
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b766:	2309      	movs	r3, #9
 800b768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b76a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b770:	2300      	movs	r3, #0
 800b772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b77a:	f107 0308 	add.w	r3, r7, #8
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fd7f 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f960 	bl	800ba4c <SDMMC_GetCmdResp2>
 800b78c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b78e:	69fb      	ldr	r3, [r7, #28]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ba:	f107 0308 	add.w	r3, r7, #8
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff fd5f 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	2103      	movs	r1, #3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f9c8 	bl	800bb60 <SDMMC_GetCmdResp6>
 800b7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7ea:	230d      	movs	r3, #13
 800b7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7fe:	f107 0308 	add.w	r3, r7, #8
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff fd3d 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b80a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b80e:	210d      	movs	r1, #13
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f829 	bl	800b868 <SDMMC_GetCmdResp1>
 800b816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b818:	69fb      	ldr	r3, [r7, #28]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b088      	sub	sp, #32
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b82e:	230d      	movs	r3, #13
 800b830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b83c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b840:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b842:	f107 0308 	add.w	r3, r7, #8
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff fd1b 	bl	800b284 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b84e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b852:	210d      	movs	r1, #13
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f807 	bl	800b868 <SDMMC_GetCmdResp1>
 800b85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b85c:	69fb      	ldr	r3, [r7, #28]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3720      	adds	r7, #32
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	460b      	mov	r3, r1
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b876:	4b70      	ldr	r3, [pc, #448]	@ (800ba38 <SDMMC_GetCmdResp1+0x1d0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a70      	ldr	r2, [pc, #448]	@ (800ba3c <SDMMC_GetCmdResp1+0x1d4>)
 800b87c:	fba2 2303 	umull	r2, r3, r2, r3
 800b880:	0a5a      	lsrs	r2, r3, #9
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	fb02 f303 	mul.w	r3, r2, r3
 800b888:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	1e5a      	subs	r2, r3, #1
 800b88e:	61fa      	str	r2, [r7, #28]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b894:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b898:	e0c9      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b89e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	4b67      	ldr	r3, [pc, #412]	@ (800ba40 <SDMMC_GetCmdResp1+0x1d8>)
 800b8a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0ef      	beq.n	800b88a <SDMMC_GetCmdResp1+0x22>
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1ea      	bne.n	800b88a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2204      	movs	r2, #4
 800b8c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	e0b1      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e0a6      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4a58      	ldr	r2, [pc, #352]	@ (800ba44 <SDMMC_GetCmdResp1+0x1dc>)
 800b8e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f7ff fcf6 	bl	800b2d8 <SDMMC_GetCommandResponse>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	7afb      	ldrb	r3, [r7, #11]
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d001      	beq.n	800b8fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e099      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fcf8 	bl	800b2f2 <SDMMC_GetResponse>
 800b902:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	4b50      	ldr	r3, [pc, #320]	@ (800ba48 <SDMMC_GetCmdResp1+0x1e0>)
 800b908:	4013      	ands	r3, r2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b90e:	2300      	movs	r3, #0
 800b910:	e08d      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	da02      	bge.n	800b91e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b918:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b91c:	e087      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b928:	2340      	movs	r3, #64	@ 0x40
 800b92a:	e080      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b936:	2380      	movs	r3, #128	@ 0x80
 800b938:	e079      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b948:	e071      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b958:	e069      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b968:	e061      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b974:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b978:	e059      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b988:	e051      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b998:	e049      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b9a8:	e041      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9b8:	e039      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b9c8:	e031      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b9d8:	e029      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b9e8:	e021      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b9f8:	e019      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ba08:	e011      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ba18:	e009      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f003 0308 	and.w	r3, r3, #8
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ba28:	e001      	b.n	800ba2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3720      	adds	r7, #32
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	24000000 	.word	0x24000000
 800ba3c:	10624dd3 	.word	0x10624dd3
 800ba40:	00200045 	.word	0x00200045
 800ba44:	002000c5 	.word	0x002000c5
 800ba48:	fdffe008 	.word	0xfdffe008

0800ba4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba54:	4b1f      	ldr	r3, [pc, #124]	@ (800bad4 <SDMMC_GetCmdResp2+0x88>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a1f      	ldr	r2, [pc, #124]	@ (800bad8 <SDMMC_GetCmdResp2+0x8c>)
 800ba5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5e:	0a5b      	lsrs	r3, r3, #9
 800ba60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba64:	fb02 f303 	mul.w	r3, r2, r3
 800ba68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	1e5a      	subs	r2, r3, #1
 800ba6e:	60fa      	str	r2, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba78:	e026      	b.n	800bac8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d0ef      	beq.n	800ba6a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1ea      	bne.n	800ba6a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d004      	beq.n	800baaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2204      	movs	r2, #4
 800baa4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baa6:	2304      	movs	r3, #4
 800baa8:	e00e      	b.n	800bac8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d004      	beq.n	800bac0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800babc:	2301      	movs	r3, #1
 800babe:	e003      	b.n	800bac8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a06      	ldr	r2, [pc, #24]	@ (800badc <SDMMC_GetCmdResp2+0x90>)
 800bac4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	24000000 	.word	0x24000000
 800bad8:	10624dd3 	.word	0x10624dd3
 800badc:	002000c5 	.word	0x002000c5

0800bae0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bae8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb54 <SDMMC_GetCmdResp3+0x74>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a1a      	ldr	r2, [pc, #104]	@ (800bb58 <SDMMC_GetCmdResp3+0x78>)
 800baee:	fba2 2303 	umull	r2, r3, r2, r3
 800baf2:	0a5b      	lsrs	r3, r3, #9
 800baf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baf8:	fb02 f303 	mul.w	r3, r2, r3
 800bafc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	1e5a      	subs	r2, r3, #1
 800bb02:	60fa      	str	r2, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d102      	bne.n	800bb0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb0c:	e01b      	b.n	800bb46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0ef      	beq.n	800bafe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1ea      	bne.n	800bafe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2204      	movs	r2, #4
 800bb38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb3a:	2304      	movs	r3, #4
 800bb3c:	e003      	b.n	800bb46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a06      	ldr	r2, [pc, #24]	@ (800bb5c <SDMMC_GetCmdResp3+0x7c>)
 800bb42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	24000000 	.word	0x24000000
 800bb58:	10624dd3 	.word	0x10624dd3
 800bb5c:	002000c5 	.word	0x002000c5

0800bb60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb6e:	4b35      	ldr	r3, [pc, #212]	@ (800bc44 <SDMMC_GetCmdResp6+0xe4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a35      	ldr	r2, [pc, #212]	@ (800bc48 <SDMMC_GetCmdResp6+0xe8>)
 800bb74:	fba2 2303 	umull	r2, r3, r2, r3
 800bb78:	0a5b      	lsrs	r3, r3, #9
 800bb7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb7e:	fb02 f303 	mul.w	r3, r2, r3
 800bb82:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	1e5a      	subs	r2, r3, #1
 800bb88:	61fa      	str	r2, [r7, #28]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d102      	bne.n	800bb94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb92:	e052      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb98:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0ef      	beq.n	800bb84 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1ea      	bne.n	800bb84 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbb2:	f003 0304 	and.w	r3, r3, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d004      	beq.n	800bbc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	e03a      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d004      	beq.n	800bbda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e02f      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fb7c 	bl	800b2d8 <SDMMC_GetCommandResponse>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d001      	beq.n	800bbee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e025      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	4a16      	ldr	r2, [pc, #88]	@ (800bc4c <SDMMC_GetCmdResp6+0xec>)
 800bbf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff fb7b 	bl	800b2f2 <SDMMC_GetResponse>
 800bbfc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	0c1b      	lsrs	r3, r3, #16
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	e011      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bc24:	e009      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc34:	e001      	b.n	800bc3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3720      	adds	r7, #32
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	24000000 	.word	0x24000000
 800bc48:	10624dd3 	.word	0x10624dd3
 800bc4c:	002000c5 	.word	0x002000c5

0800bc50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc58:	4b22      	ldr	r3, [pc, #136]	@ (800bce4 <SDMMC_GetCmdResp7+0x94>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a22      	ldr	r2, [pc, #136]	@ (800bce8 <SDMMC_GetCmdResp7+0x98>)
 800bc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc62:	0a5b      	lsrs	r3, r3, #9
 800bc64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc68:	fb02 f303 	mul.w	r3, r2, r3
 800bc6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	60fa      	str	r2, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc7c:	e02c      	b.n	800bcd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0ef      	beq.n	800bc6e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1ea      	bne.n	800bc6e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc9c:	f003 0304 	and.w	r3, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2204      	movs	r2, #4
 800bca8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcaa:	2304      	movs	r3, #4
 800bcac:	e014      	b.n	800bcd8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e009      	b.n	800bcd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2240      	movs	r2, #64	@ 0x40
 800bcd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcd6:	2300      	movs	r3, #0

}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr
 800bce4:	24000000 	.word	0x24000000
 800bce8:	10624dd3 	.word	0x10624dd3

0800bcec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcf4:	4b11      	ldr	r3, [pc, #68]	@ (800bd3c <SDMMC_GetCmdError+0x50>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a11      	ldr	r2, [pc, #68]	@ (800bd40 <SDMMC_GetCmdError+0x54>)
 800bcfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfe:	0a5b      	lsrs	r3, r3, #9
 800bd00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd04:	fb02 f303 	mul.w	r3, r2, r3
 800bd08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	60fa      	str	r2, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd18:	e009      	b.n	800bd2e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0f1      	beq.n	800bd0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a06      	ldr	r2, [pc, #24]	@ (800bd44 <SDMMC_GetCmdError+0x58>)
 800bd2a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	24000000 	.word	0x24000000
 800bd40:	10624dd3 	.word	0x10624dd3
 800bd44:	002000c5 	.word	0x002000c5

0800bd48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd4c:	4904      	ldr	r1, [pc, #16]	@ (800bd60 <MX_FATFS_Init+0x18>)
 800bd4e:	4805      	ldr	r0, [pc, #20]	@ (800bd64 <MX_FATFS_Init+0x1c>)
 800bd50:	f002 fc5a 	bl	800e608 <FATFS_LinkDriver>
 800bd54:	4603      	mov	r3, r0
 800bd56:	461a      	mov	r2, r3
 800bd58:	4b03      	ldr	r3, [pc, #12]	@ (800bd68 <MX_FATFS_Init+0x20>)
 800bd5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd5c:	bf00      	nop
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	2400177c 	.word	0x2400177c
 800bd64:	0800ed44 	.word	0x0800ed44
 800bd68:	24001778 	.word	0x24001778

0800bd6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd86:	f000 f885 	bl	800be94 <BSP_SD_IsDetected>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d001      	beq.n	800bd94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd90:	2302      	movs	r3, #2
 800bd92:	e012      	b.n	800bdba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bd94:	480b      	ldr	r0, [pc, #44]	@ (800bdc4 <BSP_SD_Init+0x48>)
 800bd96:	f7fc f8d1 	bl	8007f3c <HAL_SD_Init>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bda4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bda8:	4806      	ldr	r0, [pc, #24]	@ (800bdc4 <BSP_SD_Init+0x48>)
 800bdaa:	f7fc ff87 	bl	8008cbc <HAL_SD_ConfigWideBusOperation>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	240015dc 	.word	0x240015dc

0800bdc8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	68f9      	ldr	r1, [r7, #12]
 800bdde:	4806      	ldr	r0, [pc, #24]	@ (800bdf8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bde0:	f7fc f9cc 	bl	800817c <HAL_SD_ReadBlocks_DMA>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	240015dc 	.word	0x240015dc

0800bdfc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	68f9      	ldr	r1, [r7, #12]
 800be12:	4806      	ldr	r0, [pc, #24]	@ (800be2c <BSP_SD_WriteBlocks_DMA+0x30>)
 800be14:	f7fc fa5a 	bl	80082cc <HAL_SD_WriteBlocks_DMA>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be22:	7dfb      	ldrb	r3, [r7, #23]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	240015dc 	.word	0x240015dc

0800be30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be34:	4805      	ldr	r0, [pc, #20]	@ (800be4c <BSP_SD_GetCardState+0x1c>)
 800be36:	f7fd f853 	bl	8008ee0 <HAL_SD_GetCardState>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	bf14      	ite	ne
 800be40:	2301      	movne	r3, #1
 800be42:	2300      	moveq	r3, #0
 800be44:	b2db      	uxtb	r3, r3
}
 800be46:	4618      	mov	r0, r3
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	240015dc 	.word	0x240015dc

0800be50 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800be58:	6879      	ldr	r1, [r7, #4]
 800be5a:	4803      	ldr	r0, [pc, #12]	@ (800be68 <BSP_SD_GetCardInfo+0x18>)
 800be5c:	f7fc ff02 	bl	8008c64 <HAL_SD_GetCardInfo>
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	240015dc 	.word	0x240015dc

0800be6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800be74:	f000 f9a0 	bl	800c1b8 <BSP_SD_WriteCpltCallback>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800be88:	f000 f9a2 	bl	800c1d0 <BSP_SD_ReadCpltCallback>
}
 800be8c:	bf00      	nop
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be9a:	2301      	movs	r3, #1
 800be9c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be9e:	f000 f80b 	bl	800beb8 <BSP_PlatformIsDetected>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bea8:	2300      	movs	r3, #0
 800beaa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	b2db      	uxtb	r3, r3
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bebe:	2301      	movs	r3, #1
 800bec0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bec6:	4806      	ldr	r0, [pc, #24]	@ (800bee0 <BSP_PlatformIsDetected+0x28>)
 800bec8:	f7f6 feb8 	bl	8002c3c <HAL_GPIO_ReadPin>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bed2:	2300      	movs	r3, #0
 800bed4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bed6:	79fb      	ldrb	r3, [r7, #7]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	58022000 	.word	0x58022000

0800bee4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800beec:	f7f5 ffce 	bl	8001e8c <HAL_GetTick>
 800bef0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bef2:	e006      	b.n	800bf02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bef4:	f7ff ff9c 	bl	800be30 <BSP_SD_GetCardState>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	e009      	b.n	800bf16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bf02:	f7f5 ffc3 	bl	8001e8c <HAL_GetTick>
 800bf06:	4602      	mov	r2, r0
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d8f0      	bhi.n	800bef4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bf12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bf30:	f7ff ff7e 	bl	800be30 <BSP_SD_GetCardState>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d107      	bne.n	800bf4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bf3a:	4b07      	ldr	r3, [pc, #28]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f023 0301 	bic.w	r3, r3, #1
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	4b04      	ldr	r3, [pc, #16]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf4a:	4b03      	ldr	r3, [pc, #12]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b2db      	uxtb	r3, r3
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	24000021 	.word	0x24000021

0800bf5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf66:	f7ff ff09 	bl	800bd7c <BSP_SD_Init>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d107      	bne.n	800bf80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bf70:	79fb      	ldrb	r3, [r7, #7]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff ffd4 	bl	800bf20 <SD_CheckStatus>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	4b04      	ldr	r3, [pc, #16]	@ (800bf90 <SD_initialize+0x34>)
 800bf7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf80:	4b03      	ldr	r3, [pc, #12]	@ (800bf90 <SD_initialize+0x34>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	b2db      	uxtb	r3, r3
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	24000021 	.word	0x24000021

0800bf94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff ffbd 	bl	800bf20 <SD_CheckStatus>
 800bfa6:	4603      	mov	r3, r0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfc4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bfc8:	f7ff ff8c 	bl	800bee4 <SD_CheckStatusWithTimeout>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da01      	bge.n	800bfd6 <SD_read+0x26>
  {
    return res;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	e03b      	b.n	800c04e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	68b8      	ldr	r0, [r7, #8]
 800bfdc:	f7ff fef4 	bl	800bdc8 <BSP_SD_ReadBlocks_DMA>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d132      	bne.n	800c04c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bfe6:	4b1c      	ldr	r3, [pc, #112]	@ (800c058 <SD_read+0xa8>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bfec:	f7f5 ff4e 	bl	8001e8c <HAL_GetTick>
 800bff0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bff2:	bf00      	nop
 800bff4:	4b18      	ldr	r3, [pc, #96]	@ (800c058 <SD_read+0xa8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d108      	bne.n	800c00e <SD_read+0x5e>
 800bffc:	f7f5 ff46 	bl	8001e8c <HAL_GetTick>
 800c000:	4602      	mov	r2, r0
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d9f2      	bls.n	800bff4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c00e:	4b12      	ldr	r3, [pc, #72]	@ (800c058 <SD_read+0xa8>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d102      	bne.n	800c01c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	75fb      	strb	r3, [r7, #23]
 800c01a:	e017      	b.n	800c04c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c01c:	4b0e      	ldr	r3, [pc, #56]	@ (800c058 <SD_read+0xa8>)
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c022:	f7f5 ff33 	bl	8001e8c <HAL_GetTick>
 800c026:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c028:	e007      	b.n	800c03a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c02a:	f7ff ff01 	bl	800be30 <BSP_SD_GetCardState>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d102      	bne.n	800c03a <SD_read+0x8a>
          {
            res = RES_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c038:	e008      	b.n	800c04c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c03a:	f7f5 ff27 	bl	8001e8c <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c048:	4293      	cmp	r3, r2
 800c04a:	d9ee      	bls.n	800c02a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	24001784 	.word	0x24001784

0800c05c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	607a      	str	r2, [r7, #4]
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c06c:	2301      	movs	r3, #1
 800c06e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c070:	4b24      	ldr	r3, [pc, #144]	@ (800c104 <SD_write+0xa8>)
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c076:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c07a:	f7ff ff33 	bl	800bee4 <SD_CheckStatusWithTimeout>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	da01      	bge.n	800c088 <SD_write+0x2c>
  {
    return res;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	e038      	b.n	800c0fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	68b8      	ldr	r0, [r7, #8]
 800c08e:	f7ff feb5 	bl	800bdfc <BSP_SD_WriteBlocks_DMA>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d12f      	bne.n	800c0f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c098:	f7f5 fef8 	bl	8001e8c <HAL_GetTick>
 800c09c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c09e:	bf00      	nop
 800c0a0:	4b18      	ldr	r3, [pc, #96]	@ (800c104 <SD_write+0xa8>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d108      	bne.n	800c0ba <SD_write+0x5e>
 800c0a8:	f7f5 fef0 	bl	8001e8c <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d9f2      	bls.n	800c0a0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c0ba:	4b12      	ldr	r3, [pc, #72]	@ (800c104 <SD_write+0xa8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d102      	bne.n	800c0c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	75fb      	strb	r3, [r7, #23]
 800c0c6:	e017      	b.n	800c0f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c104 <SD_write+0xa8>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c0ce:	f7f5 fedd 	bl	8001e8c <HAL_GetTick>
 800c0d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c0d4:	e007      	b.n	800c0e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0d6:	f7ff feab 	bl	800be30 <BSP_SD_GetCardState>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <SD_write+0x8a>
          {
            res = RES_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	75fb      	strb	r3, [r7, #23]
            break;
 800c0e4:	e008      	b.n	800c0f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c0e6:	f7f5 fed1 	bl	8001e8c <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d9ee      	bls.n	800c0d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	24001780 	.word	0x24001780

0800c108 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08c      	sub	sp, #48	@ 0x30
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	603a      	str	r2, [r7, #0]
 800c112:	71fb      	strb	r3, [r7, #7]
 800c114:	460b      	mov	r3, r1
 800c116:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c11e:	4b25      	ldr	r3, [pc, #148]	@ (800c1b4 <SD_ioctl+0xac>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <SD_ioctl+0x28>
 800c12c:	2303      	movs	r3, #3
 800c12e:	e03c      	b.n	800c1aa <SD_ioctl+0xa2>

  switch (cmd)
 800c130:	79bb      	ldrb	r3, [r7, #6]
 800c132:	2b03      	cmp	r3, #3
 800c134:	d834      	bhi.n	800c1a0 <SD_ioctl+0x98>
 800c136:	a201      	add	r2, pc, #4	@ (adr r2, 800c13c <SD_ioctl+0x34>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c14d 	.word	0x0800c14d
 800c140:	0800c155 	.word	0x0800c155
 800c144:	0800c16d 	.word	0x0800c16d
 800c148:	0800c187 	.word	0x0800c187
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c152:	e028      	b.n	800c1a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c154:	f107 0308 	add.w	r3, r7, #8
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fe79 	bl	800be50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c15e:	6a3a      	ldr	r2, [r7, #32]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c16a:	e01c      	b.n	800c1a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c16c:	f107 0308 	add.w	r3, r7, #8
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff fe6d 	bl	800be50 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	b29a      	uxth	r2, r3
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c184:	e00f      	b.n	800c1a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff fe60 	bl	800be50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c192:	0a5a      	lsrs	r2, r3, #9
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c19e:	e002      	b.n	800c1a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3730      	adds	r7, #48	@ 0x30
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	24000021 	.word	0x24000021

0800c1b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c1bc:	4b03      	ldr	r3, [pc, #12]	@ (800c1cc <BSP_SD_WriteCpltCallback+0x14>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	601a      	str	r2, [r3, #0]
}
 800c1c2:	bf00      	nop
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	24001780 	.word	0x24001780

0800c1d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c1d4:	4b03      	ldr	r3, [pc, #12]	@ (800c1e4 <BSP_SD_ReadCpltCallback+0x14>)
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	601a      	str	r2, [r3, #0]
}
 800c1da:	bf00      	nop
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	24001784 	.word	0x24001784

0800c1e8 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c1ec:	bf00      	nop
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
	...

0800c1f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	4a08      	ldr	r2, [pc, #32]	@ (800c228 <disk_status+0x30>)
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	79fa      	ldrb	r2, [r7, #7]
 800c210:	4905      	ldr	r1, [pc, #20]	@ (800c228 <disk_status+0x30>)
 800c212:	440a      	add	r2, r1
 800c214:	7a12      	ldrb	r2, [r2, #8]
 800c216:	4610      	mov	r0, r2
 800c218:	4798      	blx	r3
 800c21a:	4603      	mov	r3, r0
 800c21c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	240017b0 	.word	0x240017b0

0800c22c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	4a0e      	ldr	r2, [pc, #56]	@ (800c278 <disk_initialize+0x4c>)
 800c23e:	5cd3      	ldrb	r3, [r2, r3]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d114      	bne.n	800c26e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	4a0c      	ldr	r2, [pc, #48]	@ (800c278 <disk_initialize+0x4c>)
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	79fa      	ldrb	r2, [r7, #7]
 800c252:	4909      	ldr	r1, [pc, #36]	@ (800c278 <disk_initialize+0x4c>)
 800c254:	440a      	add	r2, r1
 800c256:	7a12      	ldrb	r2, [r2, #8]
 800c258:	4610      	mov	r0, r2
 800c25a:	4798      	blx	r3
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c266:	79fb      	ldrb	r3, [r7, #7]
 800c268:	4a03      	ldr	r2, [pc, #12]	@ (800c278 <disk_initialize+0x4c>)
 800c26a:	2101      	movs	r1, #1
 800c26c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	240017b0 	.word	0x240017b0

0800c27c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	b087      	sub	sp, #28
 800c280:	af00      	add	r7, sp, #0
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b8 <disk_read+0x3c>)
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	689c      	ldr	r4, [r3, #8]
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	4a07      	ldr	r2, [pc, #28]	@ (800c2b8 <disk_read+0x3c>)
 800c29c:	4413      	add	r3, r2
 800c29e:	7a18      	ldrb	r0, [r3, #8]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	47a0      	blx	r4
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	371c      	adds	r7, #28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd90      	pop	{r4, r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	240017b0 	.word	0x240017b0

0800c2bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2bc:	b590      	push	{r4, r7, lr}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	607a      	str	r2, [r7, #4]
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	4a0a      	ldr	r2, [pc, #40]	@ (800c2f8 <disk_write+0x3c>)
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	68dc      	ldr	r4, [r3, #12]
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	4a07      	ldr	r2, [pc, #28]	@ (800c2f8 <disk_write+0x3c>)
 800c2dc:	4413      	add	r3, r2
 800c2de:	7a18      	ldrb	r0, [r3, #8]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	68b9      	ldr	r1, [r7, #8]
 800c2e6:	47a0      	blx	r4
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	371c      	adds	r7, #28
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd90      	pop	{r4, r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	240017b0 	.word	0x240017b0

0800c2fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3301      	adds	r3, #1
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c30c:	89fb      	ldrh	r3, [r7, #14]
 800c30e:	021b      	lsls	r3, r3, #8
 800c310:	b21a      	sxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	b21b      	sxth	r3, r3
 800c318:	4313      	orrs	r3, r2
 800c31a:	b21b      	sxth	r3, r3
 800c31c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c31e:	89fb      	ldrh	r3, [r7, #14]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3303      	adds	r3, #3
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	021b      	lsls	r3, r3, #8
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	3202      	adds	r2, #2
 800c344:	7812      	ldrb	r2, [r2, #0]
 800c346:	4313      	orrs	r3, r2
 800c348:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	3201      	adds	r2, #1
 800c352:	7812      	ldrb	r2, [r2, #0]
 800c354:	4313      	orrs	r3, r2
 800c356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7812      	ldrb	r2, [r2, #0]
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
	return rv;
 800c364:	68fb      	ldr	r3, [r7, #12]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	460b      	mov	r3, r1
 800c37c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	887a      	ldrh	r2, [r7, #2]
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	887b      	ldrh	r3, [r7, #2]
 800c38c:	0a1b      	lsrs	r3, r3, #8
 800c38e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	887a      	ldrh	r2, [r7, #2]
 800c398:	b2d2      	uxtb	r2, r2
 800c39a:	701a      	strb	r2, [r3, #0]
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	0a1b      	lsrs	r3, r3, #8
 800c3c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	607a      	str	r2, [r7, #4]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	b2d2      	uxtb	r2, r2
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	b2d2      	uxtb	r2, r2
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	0a1b      	lsrs	r3, r3, #8
 800c3e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	1c5a      	adds	r2, r3, #1
 800c3ec:	607a      	str	r2, [r7, #4]
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	b2d2      	uxtb	r2, r2
 800c3f2:	701a      	strb	r2, [r3, #0]
}
 800c3f4:	bf00      	nop
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00d      	beq.n	800c436 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	1c53      	adds	r3, r2, #1
 800c41e:	613b      	str	r3, [r7, #16]
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	1c59      	adds	r1, r3, #1
 800c424:	6179      	str	r1, [r7, #20]
 800c426:	7812      	ldrb	r2, [r2, #0]
 800c428:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	607b      	str	r3, [r7, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1f1      	bne.n	800c41a <mem_cpy+0x1a>
	}
}
 800c436:	bf00      	nop
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c442:	b480      	push	{r7}
 800c444:	b087      	sub	sp, #28
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	617a      	str	r2, [r7, #20]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	b2d2      	uxtb	r2, r2
 800c45c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3b01      	subs	r3, #1
 800c462:	607b      	str	r3, [r7, #4]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1f3      	bne.n	800c452 <mem_set+0x10>
}
 800c46a:	bf00      	nop
 800c46c:	bf00      	nop
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c478:	b480      	push	{r7}
 800c47a:	b089      	sub	sp, #36	@ 0x24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	61fa      	str	r2, [r7, #28]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	4619      	mov	r1, r3
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	61ba      	str	r2, [r7, #24]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	1acb      	subs	r3, r1, r3
 800c4a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	607b      	str	r3, [r7, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <mem_cmp+0x40>
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0eb      	beq.n	800c490 <mem_cmp+0x18>

	return r;
 800c4b8:	697b      	ldr	r3, [r7, #20]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3724      	adds	r7, #36	@ 0x24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c4c6:	b480      	push	{r7}
 800c4c8:	b083      	sub	sp, #12
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4d0:	e002      	b.n	800c4d8 <chk_chr+0x12>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d005      	beq.n	800c4ec <chk_chr+0x26>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d1f2      	bne.n	800c4d2 <chk_chr+0xc>
	return *str;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c506:	2300      	movs	r3, #0
 800c508:	60bb      	str	r3, [r7, #8]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	e029      	b.n	800c564 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c510:	4a27      	ldr	r2, [pc, #156]	@ (800c5b0 <chk_lock+0xb4>)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	4413      	add	r3, r2
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d01d      	beq.n	800c55a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c51e:	4a24      	ldr	r2, [pc, #144]	@ (800c5b0 <chk_lock+0xb4>)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	011b      	lsls	r3, r3, #4
 800c524:	4413      	add	r3, r2
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d116      	bne.n	800c55e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c530:	4a1f      	ldr	r2, [pc, #124]	@ (800c5b0 <chk_lock+0xb4>)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	011b      	lsls	r3, r3, #4
 800c536:	4413      	add	r3, r2
 800c538:	3304      	adds	r3, #4
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c540:	429a      	cmp	r2, r3
 800c542:	d10c      	bne.n	800c55e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c544:	4a1a      	ldr	r2, [pc, #104]	@ (800c5b0 <chk_lock+0xb4>)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	011b      	lsls	r3, r3, #4
 800c54a:	4413      	add	r3, r2
 800c54c:	3308      	adds	r3, #8
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c554:	429a      	cmp	r2, r3
 800c556:	d102      	bne.n	800c55e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c558:	e007      	b.n	800c56a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c55a:	2301      	movs	r3, #1
 800c55c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3301      	adds	r3, #1
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d9d2      	bls.n	800c510 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d109      	bne.n	800c584 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d102      	bne.n	800c57c <chk_lock+0x80>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d101      	bne.n	800c580 <chk_lock+0x84>
 800c57c:	2300      	movs	r3, #0
 800c57e:	e010      	b.n	800c5a2 <chk_lock+0xa6>
 800c580:	2312      	movs	r3, #18
 800c582:	e00e      	b.n	800c5a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d108      	bne.n	800c59c <chk_lock+0xa0>
 800c58a:	4a09      	ldr	r2, [pc, #36]	@ (800c5b0 <chk_lock+0xb4>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	011b      	lsls	r3, r3, #4
 800c590:	4413      	add	r3, r2
 800c592:	330c      	adds	r3, #12
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c59a:	d101      	bne.n	800c5a0 <chk_lock+0xa4>
 800c59c:	2310      	movs	r3, #16
 800c59e:	e000      	b.n	800c5a2 <chk_lock+0xa6>
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	24001790 	.word	0x24001790

0800c5b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	607b      	str	r3, [r7, #4]
 800c5be:	e002      	b.n	800c5c6 <enq_lock+0x12>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d806      	bhi.n	800c5da <enq_lock+0x26>
 800c5cc:	4a09      	ldr	r2, [pc, #36]	@ (800c5f4 <enq_lock+0x40>)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	011b      	lsls	r3, r3, #4
 800c5d2:	4413      	add	r3, r2
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1f2      	bne.n	800c5c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	bf14      	ite	ne
 800c5e0:	2301      	movne	r3, #1
 800c5e2:	2300      	moveq	r3, #0
 800c5e4:	b2db      	uxtb	r3, r3
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	24001790 	.word	0x24001790

0800c5f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	e01f      	b.n	800c648 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c608:	4a41      	ldr	r2, [pc, #260]	@ (800c710 <inc_lock+0x118>)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	011b      	lsls	r3, r3, #4
 800c60e:	4413      	add	r3, r2
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d113      	bne.n	800c642 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c61a:	4a3d      	ldr	r2, [pc, #244]	@ (800c710 <inc_lock+0x118>)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	011b      	lsls	r3, r3, #4
 800c620:	4413      	add	r3, r2
 800c622:	3304      	adds	r3, #4
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d109      	bne.n	800c642 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c62e:	4a38      	ldr	r2, [pc, #224]	@ (800c710 <inc_lock+0x118>)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	011b      	lsls	r3, r3, #4
 800c634:	4413      	add	r3, r2
 800c636:	3308      	adds	r3, #8
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c63e:	429a      	cmp	r2, r3
 800c640:	d006      	beq.n	800c650 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3301      	adds	r3, #1
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d9dc      	bls.n	800c608 <inc_lock+0x10>
 800c64e:	e000      	b.n	800c652 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c650:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b02      	cmp	r3, #2
 800c656:	d132      	bne.n	800c6be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c658:	2300      	movs	r3, #0
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	e002      	b.n	800c664 <inc_lock+0x6c>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3301      	adds	r3, #1
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d806      	bhi.n	800c678 <inc_lock+0x80>
 800c66a:	4a29      	ldr	r2, [pc, #164]	@ (800c710 <inc_lock+0x118>)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	011b      	lsls	r3, r3, #4
 800c670:	4413      	add	r3, r2
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1f2      	bne.n	800c65e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d101      	bne.n	800c682 <inc_lock+0x8a>
 800c67e:	2300      	movs	r3, #0
 800c680:	e040      	b.n	800c704 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	4922      	ldr	r1, [pc, #136]	@ (800c710 <inc_lock+0x118>)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	440b      	add	r3, r1
 800c68e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689a      	ldr	r2, [r3, #8]
 800c694:	491e      	ldr	r1, [pc, #120]	@ (800c710 <inc_lock+0x118>)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	011b      	lsls	r3, r3, #4
 800c69a:	440b      	add	r3, r1
 800c69c:	3304      	adds	r3, #4
 800c69e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	695a      	ldr	r2, [r3, #20]
 800c6a4:	491a      	ldr	r1, [pc, #104]	@ (800c710 <inc_lock+0x118>)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	440b      	add	r3, r1
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c6b0:	4a17      	ldr	r2, [pc, #92]	@ (800c710 <inc_lock+0x118>)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	011b      	lsls	r3, r3, #4
 800c6b6:	4413      	add	r3, r2
 800c6b8:	330c      	adds	r3, #12
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d009      	beq.n	800c6d8 <inc_lock+0xe0>
 800c6c4:	4a12      	ldr	r2, [pc, #72]	@ (800c710 <inc_lock+0x118>)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	011b      	lsls	r3, r3, #4
 800c6ca:	4413      	add	r3, r2
 800c6cc:	330c      	adds	r3, #12
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <inc_lock+0xe0>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e015      	b.n	800c704 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d108      	bne.n	800c6f0 <inc_lock+0xf8>
 800c6de:	4a0c      	ldr	r2, [pc, #48]	@ (800c710 <inc_lock+0x118>)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	011b      	lsls	r3, r3, #4
 800c6e4:	4413      	add	r3, r2
 800c6e6:	330c      	adds	r3, #12
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	e001      	b.n	800c6f4 <inc_lock+0xfc>
 800c6f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6f4:	4906      	ldr	r1, [pc, #24]	@ (800c710 <inc_lock+0x118>)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	011b      	lsls	r3, r3, #4
 800c6fa:	440b      	add	r3, r1
 800c6fc:	330c      	adds	r3, #12
 800c6fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3301      	adds	r3, #1
}
 800c704:	4618      	mov	r0, r3
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr
 800c710:	24001790 	.word	0x24001790

0800c714 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c71c:	2300      	movs	r3, #0
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	e010      	b.n	800c744 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c722:	4a0d      	ldr	r2, [pc, #52]	@ (800c758 <clear_lock+0x44>)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	011b      	lsls	r3, r3, #4
 800c728:	4413      	add	r3, r2
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d105      	bne.n	800c73e <clear_lock+0x2a>
 800c732:	4a09      	ldr	r2, [pc, #36]	@ (800c758 <clear_lock+0x44>)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	011b      	lsls	r3, r3, #4
 800c738:	4413      	add	r3, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3301      	adds	r3, #1
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d9eb      	bls.n	800c722 <clear_lock+0xe>
	}
}
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	24001790 	.word	0x24001790

0800c75c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	78db      	ldrb	r3, [r3, #3]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d034      	beq.n	800c7da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c774:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7858      	ldrb	r0, [r3, #1]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c780:	2301      	movs	r3, #1
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	f7ff fd9a 	bl	800c2bc <disk_write>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d002      	beq.n	800c794 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c78e:	2301      	movs	r3, #1
 800c790:	73fb      	strb	r3, [r7, #15]
 800c792:	e022      	b.n	800c7da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	1ad2      	subs	r2, r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d217      	bcs.n	800c7da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	789b      	ldrb	r3, [r3, #2]
 800c7ae:	613b      	str	r3, [r7, #16]
 800c7b0:	e010      	b.n	800c7d4 <sync_window+0x78>
					wsect += fs->fsize;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	699b      	ldr	r3, [r3, #24]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	7858      	ldrb	r0, [r3, #1]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	697a      	ldr	r2, [r7, #20]
 800c7ca:	f7ff fd77 	bl	800c2bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d8eb      	bhi.n	800c7b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d01b      	beq.n	800c834 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff ffad 	bl	800c75c <sync_window>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d113      	bne.n	800c834 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7858      	ldrb	r0, [r3, #1]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c816:	2301      	movs	r3, #1
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	f7ff fd2f 	bl	800c27c <disk_read>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c824:	f04f 33ff 	mov.w	r3, #4294967295
 800c828:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c834:	7bfb      	ldrb	r3, [r7, #15]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	3b02      	subs	r3, #2
 800c84c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	3b02      	subs	r3, #2
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d301      	bcc.n	800c85e <clust2sect+0x20>
 800c85a:	2300      	movs	r3, #0
 800c85c:	e008      	b.n	800c870 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	895b      	ldrh	r3, [r3, #10]
 800c862:	461a      	mov	r2, r3
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	fb03 f202 	mul.w	r2, r3, r2
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c86e:	4413      	add	r3, r2
}
 800c870:	4618      	mov	r0, r3
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d904      	bls.n	800c89c <get_fat+0x20>
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d302      	bcc.n	800c8a2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e08e      	b.n	800c9c0 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	d061      	beq.n	800c974 <get_fat+0xf8>
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	dc7b      	bgt.n	800c9ac <get_fat+0x130>
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d002      	beq.n	800c8be <get_fat+0x42>
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d041      	beq.n	800c940 <get_fat+0xc4>
 800c8bc:	e076      	b.n	800c9ac <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	60fb      	str	r3, [r7, #12]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	085b      	lsrs	r3, r3, #1
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	6a1a      	ldr	r2, [r3, #32]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	0a5b      	lsrs	r3, r3, #9
 800c8d4:	4413      	add	r3, r2
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6938      	ldr	r0, [r7, #16]
 800c8da:	f7ff ff83 	bl	800c7e4 <move_window>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d166      	bne.n	800c9b2 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	60fa      	str	r2, [r7, #12]
 800c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	6a1a      	ldr	r2, [r3, #32]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	0a5b      	lsrs	r3, r3, #9
 800c900:	4413      	add	r3, r2
 800c902:	4619      	mov	r1, r3
 800c904:	6938      	ldr	r0, [r7, #16]
 800c906:	f7ff ff6d 	bl	800c7e4 <move_window>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d152      	bne.n	800c9b6 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	4413      	add	r3, r2
 800c91a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	4313      	orrs	r3, r2
 800c924:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <get_fat+0xba>
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	091b      	lsrs	r3, r3, #4
 800c934:	e002      	b.n	800c93c <get_fat+0xc0>
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c93c:	617b      	str	r3, [r7, #20]
			break;
 800c93e:	e03f      	b.n	800c9c0 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	6a1a      	ldr	r2, [r3, #32]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	0a1b      	lsrs	r3, r3, #8
 800c948:	4413      	add	r3, r2
 800c94a:	4619      	mov	r1, r3
 800c94c:	6938      	ldr	r0, [r7, #16]
 800c94e:	f7ff ff49 	bl	800c7e4 <move_window>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d130      	bne.n	800c9ba <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c966:	4413      	add	r3, r2
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff fcc7 	bl	800c2fc <ld_word>
 800c96e:	4603      	mov	r3, r0
 800c970:	617b      	str	r3, [r7, #20]
			break;
 800c972:	e025      	b.n	800c9c0 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6a1a      	ldr	r2, [r3, #32]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	09db      	lsrs	r3, r3, #7
 800c97c:	4413      	add	r3, r2
 800c97e:	4619      	mov	r1, r3
 800c980:	6938      	ldr	r0, [r7, #16]
 800c982:	f7ff ff2f 	bl	800c7e4 <move_window>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d118      	bne.n	800c9be <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c99a:	4413      	add	r3, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff fcc5 	bl	800c32c <ld_dword>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c9a8:	617b      	str	r3, [r7, #20]
			break;
 800c9aa:	e009      	b.n	800c9c0 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	e006      	b.n	800c9c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9b2:	bf00      	nop
 800c9b4:	e004      	b.n	800c9c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9b6:	bf00      	nop
 800c9b8:	e002      	b.n	800c9c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c9ba:	bf00      	nop
 800c9bc:	e000      	b.n	800c9c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c9be:	bf00      	nop
		}
	}

	return val;
 800c9c0:	697b      	ldr	r3, [r7, #20]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3718      	adds	r7, #24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b089      	sub	sp, #36	@ 0x24
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	f240 80d9 	bls.w	800cb94 <put_fat+0x1ca>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	f080 80d3 	bcs.w	800cb94 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	f000 8096 	beq.w	800cb24 <put_fat+0x15a>
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	f300 80cb 	bgt.w	800cb94 <put_fat+0x1ca>
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d002      	beq.n	800ca08 <put_fat+0x3e>
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d06e      	beq.n	800cae4 <put_fat+0x11a>
 800ca06:	e0c5      	b.n	800cb94 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	61bb      	str	r3, [r7, #24]
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	085b      	lsrs	r3, r3, #1
 800ca10:	69ba      	ldr	r2, [r7, #24]
 800ca12:	4413      	add	r3, r2
 800ca14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6a1a      	ldr	r2, [r3, #32]
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	0a5b      	lsrs	r3, r3, #9
 800ca1e:	4413      	add	r3, r2
 800ca20:	4619      	mov	r1, r3
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f7ff fede 	bl	800c7e4 <move_window>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca2c:	7ffb      	ldrb	r3, [r7, #31]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f040 80a9 	bne.w	800cb86 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	1c59      	adds	r1, r3, #1
 800ca3e:	61b9      	str	r1, [r7, #24]
 800ca40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca44:	4413      	add	r3, r2
 800ca46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00d      	beq.n	800ca6e <put_fat+0xa4>
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	b25b      	sxtb	r3, r3
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	b25a      	sxtb	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	011b      	lsls	r3, r3, #4
 800ca64:	b25b      	sxtb	r3, r3
 800ca66:	4313      	orrs	r3, r2
 800ca68:	b25b      	sxtb	r3, r3
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	e001      	b.n	800ca72 <put_fat+0xa8>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6a1a      	ldr	r2, [r3, #32]
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	0a5b      	lsrs	r3, r3, #9
 800ca84:	4413      	add	r3, r2
 800ca86:	4619      	mov	r1, r3
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7ff feab 	bl	800c7e4 <move_window>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca92:	7ffb      	ldrb	r3, [r7, #31]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d178      	bne.n	800cb8a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa4:	4413      	add	r3, r2
 800caa6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <put_fat+0xf0>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	091b      	lsrs	r3, r3, #4
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	e00e      	b.n	800cad8 <put_fat+0x10e>
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b25b      	sxtb	r3, r3
 800cac0:	f023 030f 	bic.w	r3, r3, #15
 800cac4:	b25a      	sxtb	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	0a1b      	lsrs	r3, r3, #8
 800caca:	b25b      	sxtb	r3, r3
 800cacc:	f003 030f 	and.w	r3, r3, #15
 800cad0:	b25b      	sxtb	r3, r3
 800cad2:	4313      	orrs	r3, r2
 800cad4:	b25b      	sxtb	r3, r3
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	70da      	strb	r2, [r3, #3]
			break;
 800cae2:	e057      	b.n	800cb94 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6a1a      	ldr	r2, [r3, #32]
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	0a1b      	lsrs	r3, r3, #8
 800caec:	4413      	add	r3, r2
 800caee:	4619      	mov	r1, r3
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f7ff fe77 	bl	800c7e4 <move_window>
 800caf6:	4603      	mov	r3, r0
 800caf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cafa:	7ffb      	ldrb	r3, [r7, #31]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d146      	bne.n	800cb8e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cb0e:	4413      	add	r3, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	b292      	uxth	r2, r2
 800cb14:	4611      	mov	r1, r2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff fc2b 	bl	800c372 <st_word>
			fs->wflag = 1;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	70da      	strb	r2, [r3, #3]
			break;
 800cb22:	e037      	b.n	800cb94 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6a1a      	ldr	r2, [r3, #32]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	09db      	lsrs	r3, r3, #7
 800cb2c:	4413      	add	r3, r2
 800cb2e:	4619      	mov	r1, r3
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff fe57 	bl	800c7e4 <move_window>
 800cb36:	4603      	mov	r3, r0
 800cb38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb3a:	7ffb      	ldrb	r3, [r7, #31]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d128      	bne.n	800cb92 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cb54:	4413      	add	r3, r2
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fbe8 	bl	800c32c <ld_dword>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cb62:	4323      	orrs	r3, r4
 800cb64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cb74:	4413      	add	r3, r2
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7ff fc15 	bl	800c3a8 <st_dword>
			fs->wflag = 1;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2201      	movs	r2, #1
 800cb82:	70da      	strb	r2, [r3, #3]
			break;
 800cb84:	e006      	b.n	800cb94 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cb86:	bf00      	nop
 800cb88:	e004      	b.n	800cb94 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cb8a:	bf00      	nop
 800cb8c:	e002      	b.n	800cb94 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cb8e:	bf00      	nop
 800cb90:	e000      	b.n	800cb94 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cb92:	bf00      	nop
		}
	}
	return res;
 800cb94:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3724      	adds	r7, #36	@ 0x24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd90      	pop	{r4, r7, pc}

0800cb9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b088      	sub	sp, #32
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	60f8      	str	r0, [r7, #12]
 800cba6:	60b9      	str	r1, [r7, #8]
 800cba8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d904      	bls.n	800cbc4 <remove_chain+0x26>
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d301      	bcc.n	800cbc8 <remove_chain+0x2a>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	e04b      	b.n	800cc60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00c      	beq.n	800cbe8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cbce:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd2:	6879      	ldr	r1, [r7, #4]
 800cbd4:	69b8      	ldr	r0, [r7, #24]
 800cbd6:	f7ff fef8 	bl	800c9ca <put_fat>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cbde:	7ffb      	ldrb	r3, [r7, #31]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <remove_chain+0x4a>
 800cbe4:	7ffb      	ldrb	r3, [r7, #31]
 800cbe6:	e03b      	b.n	800cc60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff fe46 	bl	800c87c <get_fat>
 800cbf0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d031      	beq.n	800cc5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d101      	bne.n	800cc02 <remove_chain+0x64>
 800cbfe:	2302      	movs	r3, #2
 800cc00:	e02e      	b.n	800cc60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d101      	bne.n	800cc0e <remove_chain+0x70>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e028      	b.n	800cc60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cc0e:	2200      	movs	r2, #0
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	69b8      	ldr	r0, [r7, #24]
 800cc14:	f7ff fed9 	bl	800c9ca <put_fat>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cc1c:	7ffb      	ldrb	r3, [r7, #31]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <remove_chain+0x88>
 800cc22:	7ffb      	ldrb	r3, [r7, #31]
 800cc24:	e01c      	b.n	800cc60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	691a      	ldr	r2, [r3, #16]
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	695b      	ldr	r3, [r3, #20]
 800cc2e:	3b02      	subs	r3, #2
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d20b      	bcs.n	800cc4c <remove_chain+0xae>
			fs->free_clst++;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	791b      	ldrb	r3, [r3, #4]
 800cc42:	f043 0301 	orr.w	r3, r3, #1
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d3c6      	bcc.n	800cbe8 <remove_chain+0x4a>
 800cc5a:	e000      	b.n	800cc5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cc5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3720      	adds	r7, #32
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10d      	bne.n	800cc9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d004      	beq.n	800cc94 <create_chain+0x2c>
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	69ba      	ldr	r2, [r7, #24]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d31b      	bcc.n	800cccc <create_chain+0x64>
 800cc94:	2301      	movs	r3, #1
 800cc96:	61bb      	str	r3, [r7, #24]
 800cc98:	e018      	b.n	800cccc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff fded 	bl	800c87c <get_fat>
 800cca2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d801      	bhi.n	800ccae <create_chain+0x46>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e070      	b.n	800cd90 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d101      	bne.n	800ccba <create_chain+0x52>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	e06a      	b.n	800cd90 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d201      	bcs.n	800ccc8 <create_chain+0x60>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	e063      	b.n	800cd90 <create_chain+0x128>
		scl = clst;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	695b      	ldr	r3, [r3, #20]
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d307      	bcc.n	800ccf0 <create_chain+0x88>
				ncl = 2;
 800cce0:	2302      	movs	r3, #2
 800cce2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cce4:	69fa      	ldr	r2, [r7, #28]
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d901      	bls.n	800ccf0 <create_chain+0x88>
 800ccec:	2300      	movs	r3, #0
 800ccee:	e04f      	b.n	800cd90 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ccf0:	69f9      	ldr	r1, [r7, #28]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7ff fdc2 	bl	800c87c <get_fat>
 800ccf8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00e      	beq.n	800cd1e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d003      	beq.n	800cd0e <create_chain+0xa6>
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0c:	d101      	bne.n	800cd12 <create_chain+0xaa>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	e03e      	b.n	800cd90 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d1da      	bne.n	800ccd0 <create_chain+0x68>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e038      	b.n	800cd90 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cd1e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cd20:	f04f 32ff 	mov.w	r2, #4294967295
 800cd24:	69f9      	ldr	r1, [r7, #28]
 800cd26:	6938      	ldr	r0, [r7, #16]
 800cd28:	f7ff fe4f 	bl	800c9ca <put_fat>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d109      	bne.n	800cd4a <create_chain+0xe2>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d006      	beq.n	800cd4a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6938      	ldr	r0, [r7, #16]
 800cd42:	f7ff fe42 	bl	800c9ca <put_fat>
 800cd46:	4603      	mov	r3, r0
 800cd48:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d116      	bne.n	800cd7e <create_chain+0x116>
		fs->last_clst = ncl;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	69fa      	ldr	r2, [r7, #28]
 800cd54:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	691a      	ldr	r2, [r3, #16]
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	3b02      	subs	r3, #2
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d804      	bhi.n	800cd6e <create_chain+0x106>
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	1e5a      	subs	r2, r3, #1
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	791b      	ldrb	r3, [r3, #4]
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	711a      	strb	r2, [r3, #4]
 800cd7c:	e007      	b.n	800cd8e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d102      	bne.n	800cd8a <create_chain+0x122>
 800cd84:	f04f 33ff 	mov.w	r3, #4294967295
 800cd88:	e000      	b.n	800cd8c <create_chain+0x124>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cd8e:	69fb      	ldr	r3, [r7, #28]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3720      	adds	r7, #32
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b087      	sub	sp, #28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdac:	3304      	adds	r3, #4
 800cdae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	0a5b      	lsrs	r3, r3, #9
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	8952      	ldrh	r2, [r2, #10]
 800cdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	1d1a      	adds	r2, r3, #4
 800cdc2:	613a      	str	r2, [r7, #16]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d101      	bne.n	800cdd2 <clmt_clust+0x3a>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e010      	b.n	800cdf4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d307      	bcc.n	800cdea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	3304      	adds	r3, #4
 800cde6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cde8:	e7e9      	b.n	800cdbe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cdea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	4413      	add	r3, r2
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	371c      	adds	r7, #28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce16:	d204      	bcs.n	800ce22 <dir_sdi+0x22>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	f003 031f 	and.w	r3, r3, #31
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ce22:	2302      	movs	r3, #2
 800ce24:	e063      	b.n	800ceee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d106      	bne.n	800ce46 <dir_sdi+0x46>
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d902      	bls.n	800ce46 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10c      	bne.n	800ce66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	095b      	lsrs	r3, r3, #5
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	8912      	ldrh	r2, [r2, #8]
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d301      	bcc.n	800ce5c <dir_sdi+0x5c>
 800ce58:	2302      	movs	r3, #2
 800ce5a:	e048      	b.n	800ceee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	61da      	str	r2, [r3, #28]
 800ce64:	e029      	b.n	800ceba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	895b      	ldrh	r3, [r3, #10]
 800ce6a:	025b      	lsls	r3, r3, #9
 800ce6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ce6e:	e019      	b.n	800cea4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6979      	ldr	r1, [r7, #20]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7ff fd01 	bl	800c87c <get_fat>
 800ce7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce82:	d101      	bne.n	800ce88 <dir_sdi+0x88>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e032      	b.n	800ceee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d904      	bls.n	800ce98 <dir_sdi+0x98>
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	695b      	ldr	r3, [r3, #20]
 800ce92:	697a      	ldr	r2, [r7, #20]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d301      	bcc.n	800ce9c <dir_sdi+0x9c>
 800ce98:	2302      	movs	r3, #2
 800ce9a:	e028      	b.n	800ceee <dir_sdi+0xee>
			ofs -= csz;
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d2e1      	bcs.n	800ce70 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ceac:	6979      	ldr	r1, [r7, #20]
 800ceae:	6938      	ldr	r0, [r7, #16]
 800ceb0:	f7ff fcc5 	bl	800c83e <clust2sect>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	69db      	ldr	r3, [r3, #28]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <dir_sdi+0xcc>
 800cec8:	2302      	movs	r3, #2
 800ceca:	e010      	b.n	800ceee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	69da      	ldr	r2, [r3, #28]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	0a5b      	lsrs	r3, r3, #9
 800ced4:	441a      	add	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cee6:	441a      	add	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b086      	sub	sp, #24
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	3320      	adds	r3, #32
 800cf0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d003      	beq.n	800cf1e <dir_next+0x28>
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf1c:	d301      	bcc.n	800cf22 <dir_next+0x2c>
 800cf1e:	2304      	movs	r3, #4
 800cf20:	e0aa      	b.n	800d078 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f040 8098 	bne.w	800d05e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10b      	bne.n	800cf58 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	095b      	lsrs	r3, r3, #5
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	8912      	ldrh	r2, [r2, #8]
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	f0c0 8088 	bcc.w	800d05e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	61da      	str	r2, [r3, #28]
 800cf54:	2304      	movs	r3, #4
 800cf56:	e08f      	b.n	800d078 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	0a5b      	lsrs	r3, r3, #9
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	8952      	ldrh	r2, [r2, #10]
 800cf60:	3a01      	subs	r2, #1
 800cf62:	4013      	ands	r3, r2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d17a      	bne.n	800d05e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4610      	mov	r0, r2
 800cf72:	f7ff fc83 	bl	800c87c <get_fat>
 800cf76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d801      	bhi.n	800cf82 <dir_next+0x8c>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e07a      	b.n	800d078 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf88:	d101      	bne.n	800cf8e <dir_next+0x98>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e074      	b.n	800d078 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d358      	bcc.n	800d04a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d104      	bne.n	800cfa8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	61da      	str	r2, [r3, #28]
 800cfa4:	2304      	movs	r3, #4
 800cfa6:	e067      	b.n	800d078 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	699b      	ldr	r3, [r3, #24]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f7ff fe59 	bl	800cc68 <create_chain>
 800cfb6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <dir_next+0xcc>
 800cfbe:	2307      	movs	r3, #7
 800cfc0:	e05a      	b.n	800d078 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d101      	bne.n	800cfcc <dir_next+0xd6>
 800cfc8:	2302      	movs	r3, #2
 800cfca:	e055      	b.n	800d078 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd2:	d101      	bne.n	800cfd8 <dir_next+0xe2>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e04f      	b.n	800d078 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f7ff fbbf 	bl	800c75c <sync_window>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <dir_next+0xf2>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e047      	b.n	800d078 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	3330      	adds	r3, #48	@ 0x30
 800cfec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cff0:	2100      	movs	r1, #0
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7ff fa25 	bl	800c442 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cff8:	2300      	movs	r3, #0
 800cffa:	613b      	str	r3, [r7, #16]
 800cffc:	6979      	ldr	r1, [r7, #20]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff fc1d 	bl	800c83e <clust2sect>
 800d004:	4602      	mov	r2, r0
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d00a:	e012      	b.n	800d032 <dir_next+0x13c>
						fs->wflag = 1;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2201      	movs	r2, #1
 800d010:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7ff fba2 	bl	800c75c <sync_window>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <dir_next+0x12c>
 800d01e:	2301      	movs	r3, #1
 800d020:	e02a      	b.n	800d078 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3301      	adds	r3, #1
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	895b      	ldrh	r3, [r3, #10]
 800d036:	461a      	mov	r2, r3
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d3e6      	bcc.n	800d00c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	1ad2      	subs	r2, r2, r3
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d050:	6979      	ldr	r1, [r7, #20]
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f7ff fbf3 	bl	800c83e <clust2sect>
 800d058:	4602      	mov	r2, r0
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d070:	441a      	add	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d090:	2100      	movs	r1, #0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff feb4 	bl	800ce00 <dir_sdi>
 800d098:	4603      	mov	r3, r0
 800d09a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d09c:	7dfb      	ldrb	r3, [r7, #23]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d12b      	bne.n	800d0fa <dir_alloc+0x7a>
		n = 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7ff fb99 	bl	800c7e4 <move_window>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d11d      	bne.n	800d0f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2be5      	cmp	r3, #229	@ 0xe5
 800d0c4:	d004      	beq.n	800d0d0 <dir_alloc+0x50>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d107      	bne.n	800d0e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	613b      	str	r3, [r7, #16]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d102      	bne.n	800d0e4 <dir_alloc+0x64>
 800d0de:	e00c      	b.n	800d0fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff ff05 	bl	800cef6 <dir_next>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0d7      	beq.n	800d0a6 <dir_alloc+0x26>
 800d0f6:	e000      	b.n	800d0fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d0f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	d101      	bne.n	800d104 <dir_alloc+0x84>
 800d100:	2307      	movs	r3, #7
 800d102:	75fb      	strb	r3, [r7, #23]
	return res;
 800d104:	7dfb      	ldrb	r3, [r7, #23]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	331a      	adds	r3, #26
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff f8ed 	bl	800c2fc <ld_word>
 800d122:	4603      	mov	r3, r0
 800d124:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d109      	bne.n	800d142 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	3314      	adds	r3, #20
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff f8e2 	bl	800c2fc <ld_word>
 800d138:	4603      	mov	r3, r0
 800d13a:	041b      	lsls	r3, r3, #16
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4313      	orrs	r3, r2
 800d140:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d142:	68fb      	ldr	r3, [r7, #12]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	331a      	adds	r3, #26
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	b292      	uxth	r2, r2
 800d160:	4611      	mov	r1, r2
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff f905 	bl	800c372 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d109      	bne.n	800d184 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	f103 0214 	add.w	r2, r3, #20
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	0c1b      	lsrs	r3, r3, #16
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f7ff f8f7 	bl	800c372 <st_word>
	}
}
 800d184:	bf00      	nop
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d19a:	2100      	movs	r1, #0
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff fe2f 	bl	800ce00 <dir_sdi>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <dir_find+0x24>
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	e03e      	b.n	800d22e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	69db      	ldr	r3, [r3, #28]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6938      	ldr	r0, [r7, #16]
 800d1b8:	f7ff fb14 	bl	800c7e4 <move_window>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d12f      	bne.n	800d226 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d102      	bne.n	800d1da <dir_find+0x4e>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	75fb      	strb	r3, [r7, #23]
 800d1d8:	e028      	b.n	800d22c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a1b      	ldr	r3, [r3, #32]
 800d1de:	330b      	adds	r3, #11
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6a1b      	ldr	r3, [r3, #32]
 800d1f0:	330b      	adds	r3, #11
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	f003 0308 	and.w	r3, r3, #8
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10a      	bne.n	800d212 <dir_find+0x86>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a18      	ldr	r0, [r3, #32]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3324      	adds	r3, #36	@ 0x24
 800d204:	220b      	movs	r2, #11
 800d206:	4619      	mov	r1, r3
 800d208:	f7ff f936 	bl	800c478 <mem_cmp>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00b      	beq.n	800d22a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d212:	2100      	movs	r1, #0
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff fe6e 	bl	800cef6 <dir_next>
 800d21a:	4603      	mov	r3, r0
 800d21c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d0c5      	beq.n	800d1b0 <dir_find+0x24>
 800d224:	e002      	b.n	800d22c <dir_find+0xa0>
		if (res != FR_OK) break;
 800d226:	bf00      	nop
 800d228:	e000      	b.n	800d22c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d22a:	bf00      	nop

	return res;
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d244:	2101      	movs	r1, #1
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ff1a 	bl	800d080 <dir_alloc>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d11c      	bne.n	800d290 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	4619      	mov	r1, r3
 800d25c:	68b8      	ldr	r0, [r7, #8]
 800d25e:	f7ff fac1 	bl	800c7e4 <move_window>
 800d262:	4603      	mov	r3, r0
 800d264:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d111      	bne.n	800d290 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	2220      	movs	r2, #32
 800d272:	2100      	movs	r1, #0
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff f8e4 	bl	800c442 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a18      	ldr	r0, [r3, #32]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	3324      	adds	r3, #36	@ 0x24
 800d282:	220b      	movs	r2, #11
 800d284:	4619      	mov	r1, r3
 800d286:	f7ff f8bb 	bl	800c400 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	2201      	movs	r2, #1
 800d28e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d290:	7bfb      	ldrb	r3, [r7, #15]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
	...

0800d29c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b088      	sub	sp, #32
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3324      	adds	r3, #36	@ 0x24
 800d2b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d2b2:	220b      	movs	r2, #11
 800d2b4:	2120      	movs	r1, #32
 800d2b6:	68b8      	ldr	r0, [r7, #8]
 800d2b8:	f7ff f8c3 	bl	800c442 <mem_set>
	si = i = 0; ni = 8;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	613b      	str	r3, [r7, #16]
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	61fb      	str	r3, [r7, #28]
 800d2c4:	2308      	movs	r3, #8
 800d2c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	61fa      	str	r2, [r7, #28]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d2d6:	7efb      	ldrb	r3, [r7, #27]
 800d2d8:	2b20      	cmp	r3, #32
 800d2da:	d94e      	bls.n	800d37a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d2dc:	7efb      	ldrb	r3, [r7, #27]
 800d2de:	2b2f      	cmp	r3, #47	@ 0x2f
 800d2e0:	d006      	beq.n	800d2f0 <create_name+0x54>
 800d2e2:	7efb      	ldrb	r3, [r7, #27]
 800d2e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d2e6:	d110      	bne.n	800d30a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d2e8:	e002      	b.n	800d2f0 <create_name+0x54>
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d2fa:	d0f6      	beq.n	800d2ea <create_name+0x4e>
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	4413      	add	r3, r2
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b5c      	cmp	r3, #92	@ 0x5c
 800d306:	d0f0      	beq.n	800d2ea <create_name+0x4e>
			break;
 800d308:	e038      	b.n	800d37c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d30a:	7efb      	ldrb	r3, [r7, #27]
 800d30c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d30e:	d003      	beq.n	800d318 <create_name+0x7c>
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	429a      	cmp	r2, r3
 800d316:	d30c      	bcc.n	800d332 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2b0b      	cmp	r3, #11
 800d31c:	d002      	beq.n	800d324 <create_name+0x88>
 800d31e:	7efb      	ldrb	r3, [r7, #27]
 800d320:	2b2e      	cmp	r3, #46	@ 0x2e
 800d322:	d001      	beq.n	800d328 <create_name+0x8c>
 800d324:	2306      	movs	r3, #6
 800d326:	e044      	b.n	800d3b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d328:	2308      	movs	r3, #8
 800d32a:	613b      	str	r3, [r7, #16]
 800d32c:	230b      	movs	r3, #11
 800d32e:	617b      	str	r3, [r7, #20]
			continue;
 800d330:	e022      	b.n	800d378 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d332:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d336:	2b00      	cmp	r3, #0
 800d338:	da04      	bge.n	800d344 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d33a:	7efb      	ldrb	r3, [r7, #27]
 800d33c:	3b80      	subs	r3, #128	@ 0x80
 800d33e:	4a1f      	ldr	r2, [pc, #124]	@ (800d3bc <create_name+0x120>)
 800d340:	5cd3      	ldrb	r3, [r2, r3]
 800d342:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d344:	7efb      	ldrb	r3, [r7, #27]
 800d346:	4619      	mov	r1, r3
 800d348:	481d      	ldr	r0, [pc, #116]	@ (800d3c0 <create_name+0x124>)
 800d34a:	f7ff f8bc 	bl	800c4c6 <chk_chr>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <create_name+0xbc>
 800d354:	2306      	movs	r3, #6
 800d356:	e02c      	b.n	800d3b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d358:	7efb      	ldrb	r3, [r7, #27]
 800d35a:	2b60      	cmp	r3, #96	@ 0x60
 800d35c:	d905      	bls.n	800d36a <create_name+0xce>
 800d35e:	7efb      	ldrb	r3, [r7, #27]
 800d360:	2b7a      	cmp	r3, #122	@ 0x7a
 800d362:	d802      	bhi.n	800d36a <create_name+0xce>
 800d364:	7efb      	ldrb	r3, [r7, #27]
 800d366:	3b20      	subs	r3, #32
 800d368:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	1c5a      	adds	r2, r3, #1
 800d36e:	613a      	str	r2, [r7, #16]
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	4413      	add	r3, r2
 800d374:	7efa      	ldrb	r2, [r7, #27]
 800d376:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d378:	e7a6      	b.n	800d2c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d37a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	441a      	add	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <create_name+0xf4>
 800d38c:	2306      	movs	r3, #6
 800d38e:	e010      	b.n	800d3b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2be5      	cmp	r3, #229	@ 0xe5
 800d396:	d102      	bne.n	800d39e <create_name+0x102>
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2205      	movs	r2, #5
 800d39c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d39e:	7efb      	ldrb	r3, [r7, #27]
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	d801      	bhi.n	800d3a8 <create_name+0x10c>
 800d3a4:	2204      	movs	r2, #4
 800d3a6:	e000      	b.n	800d3aa <create_name+0x10e>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	330b      	adds	r3, #11
 800d3ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d3b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3720      	adds	r7, #32
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0800ed58 	.word	0x0800ed58
 800d3c0:	0800ea68 	.word	0x0800ea68

0800d3c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d3d8:	e002      	b.n	800d3e0 <follow_path+0x1c>
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	603b      	str	r3, [r7, #0]
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d3e6:	d0f8      	beq.n	800d3da <follow_path+0x16>
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800d3ee:	d0f4      	beq.n	800d3da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b1f      	cmp	r3, #31
 800d3fc:	d80a      	bhi.n	800d414 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2280      	movs	r2, #128	@ 0x80
 800d402:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d406:	2100      	movs	r1, #0
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7ff fcf9 	bl	800ce00 <dir_sdi>
 800d40e:	4603      	mov	r3, r0
 800d410:	75fb      	strb	r3, [r7, #23]
 800d412:	e043      	b.n	800d49c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d414:	463b      	mov	r3, r7
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff ff3f 	bl	800d29c <create_name>
 800d41e:	4603      	mov	r3, r0
 800d420:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d422:	7dfb      	ldrb	r3, [r7, #23]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d134      	bne.n	800d492 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff feaf 	bl	800d18c <dir_find>
 800d42e:	4603      	mov	r3, r0
 800d430:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d438:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d43a:	7dfb      	ldrb	r3, [r7, #23]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00a      	beq.n	800d456 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d440:	7dfb      	ldrb	r3, [r7, #23]
 800d442:	2b04      	cmp	r3, #4
 800d444:	d127      	bne.n	800d496 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d446:	7afb      	ldrb	r3, [r7, #11]
 800d448:	f003 0304 	and.w	r3, r3, #4
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d122      	bne.n	800d496 <follow_path+0xd2>
 800d450:	2305      	movs	r3, #5
 800d452:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d454:	e01f      	b.n	800d496 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d456:	7afb      	ldrb	r3, [r7, #11]
 800d458:	f003 0304 	and.w	r3, r3, #4
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d11c      	bne.n	800d49a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	799b      	ldrb	r3, [r3, #6]
 800d464:	f003 0310 	and.w	r3, r3, #16
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d46c:	2305      	movs	r3, #5
 800d46e:	75fb      	strb	r3, [r7, #23]
 800d470:	e014      	b.n	800d49c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d480:	4413      	add	r3, r2
 800d482:	4619      	mov	r1, r3
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7ff fe42 	bl	800d10e <ld_clust>
 800d48a:	4602      	mov	r2, r0
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d490:	e7c0      	b.n	800d414 <follow_path+0x50>
			if (res != FR_OK) break;
 800d492:	bf00      	nop
 800d494:	e002      	b.n	800d49c <follow_path+0xd8>
				break;
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d49a:	bf00      	nop
			}
		}
	}

	return res;
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b087      	sub	sp, #28
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d031      	beq.n	800d520 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	e002      	b.n	800d4ca <get_ldnumber+0x24>
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b20      	cmp	r3, #32
 800d4d0:	d903      	bls.n	800d4da <get_ldnumber+0x34>
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4d8:	d1f4      	bne.n	800d4c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4e0:	d11c      	bne.n	800d51c <get_ldnumber+0x76>
			tp = *path;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	60fa      	str	r2, [r7, #12]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	3b30      	subs	r3, #48	@ 0x30
 800d4f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	2b09      	cmp	r3, #9
 800d4f8:	d80e      	bhi.n	800d518 <get_ldnumber+0x72>
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d10a      	bne.n	800d518 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d107      	bne.n	800d518 <get_ldnumber+0x72>
					vol = (int)i;
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	3301      	adds	r3, #1
 800d510:	617b      	str	r3, [r7, #20]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	e002      	b.n	800d522 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d51c:	2300      	movs	r3, #0
 800d51e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d520:	693b      	ldr	r3, [r7, #16]
}
 800d522:	4618      	mov	r0, r3
 800d524:	371c      	adds	r7, #28
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
	...

0800d530 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	70da      	strb	r2, [r3, #3]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f04f 32ff 	mov.w	r2, #4294967295
 800d546:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff f94a 	bl	800c7e4 <move_window>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <check_fs+0x2a>
 800d556:	2304      	movs	r3, #4
 800d558:	e038      	b.n	800d5cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	3330      	adds	r3, #48	@ 0x30
 800d55e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe feca 	bl	800c2fc <ld_word>
 800d568:	4603      	mov	r3, r0
 800d56a:	461a      	mov	r2, r3
 800d56c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d570:	429a      	cmp	r2, r3
 800d572:	d001      	beq.n	800d578 <check_fs+0x48>
 800d574:	2303      	movs	r3, #3
 800d576:	e029      	b.n	800d5cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d57e:	2be9      	cmp	r3, #233	@ 0xe9
 800d580:	d009      	beq.n	800d596 <check_fs+0x66>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d588:	2beb      	cmp	r3, #235	@ 0xeb
 800d58a:	d11e      	bne.n	800d5ca <check_fs+0x9a>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d592:	2b90      	cmp	r3, #144	@ 0x90
 800d594:	d119      	bne.n	800d5ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	3330      	adds	r3, #48	@ 0x30
 800d59a:	3336      	adds	r3, #54	@ 0x36
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fec5 	bl	800c32c <ld_dword>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d5a8:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d4 <check_fs+0xa4>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d101      	bne.n	800d5b2 <check_fs+0x82>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e00c      	b.n	800d5cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3330      	adds	r3, #48	@ 0x30
 800d5b6:	3352      	adds	r3, #82	@ 0x52
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fe feb7 	bl	800c32c <ld_dword>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	4a05      	ldr	r2, [pc, #20]	@ (800d5d8 <check_fs+0xa8>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d101      	bne.n	800d5ca <check_fs+0x9a>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e000      	b.n	800d5cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d5ca:	2302      	movs	r3, #2
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	00544146 	.word	0x00544146
 800d5d8:	33544146 	.word	0x33544146

0800d5dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b096      	sub	sp, #88	@ 0x58
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7ff ff58 	bl	800d4a6 <get_ldnumber>
 800d5f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	da01      	bge.n	800d602 <find_volume+0x26>
 800d5fe:	230b      	movs	r3, #11
 800d600:	e22d      	b.n	800da5e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d602:	4aa1      	ldr	r2, [pc, #644]	@ (800d888 <find_volume+0x2ac>)
 800d604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d60a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <find_volume+0x3a>
 800d612:	230c      	movs	r3, #12
 800d614:	e223      	b.n	800da5e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d61a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	f023 0301 	bic.w	r3, r3, #1
 800d622:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d01a      	beq.n	800d662 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62e:	785b      	ldrb	r3, [r3, #1]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fe fde1 	bl	800c1f8 <disk_status>
 800d636:	4603      	mov	r3, r0
 800d638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d63c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10c      	bne.n	800d662 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d648:	79fb      	ldrb	r3, [r7, #7]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d007      	beq.n	800d65e <find_volume+0x82>
 800d64e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d652:	f003 0304 	and.w	r3, r3, #4
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d65a:	230a      	movs	r3, #10
 800d65c:	e1ff      	b.n	800da5e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d65e:	2300      	movs	r3, #0
 800d660:	e1fd      	b.n	800da5e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d664:	2200      	movs	r2, #0
 800d666:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d672:	785b      	ldrb	r3, [r3, #1]
 800d674:	4618      	mov	r0, r3
 800d676:	f7fe fdd9 	bl	800c22c <disk_initialize>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d68c:	2303      	movs	r3, #3
 800d68e:	e1e6      	b.n	800da5e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d007      	beq.n	800d6a6 <find_volume+0xca>
 800d696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d69a:	f003 0304 	and.w	r3, r3, #4
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d6a2:	230a      	movs	r3, #10
 800d6a4:	e1db      	b.n	800da5e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d6aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d6ae:	f7ff ff3f 	bl	800d530 <check_fs>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d6b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d149      	bne.n	800d754 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6c4:	e01e      	b.n	800d704 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d6d4:	4413      	add	r3, r2
 800d6d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	3304      	adds	r3, #4
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d006      	beq.n	800d6f0 <find_volume+0x114>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	3308      	adds	r3, #8
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fe20 	bl	800c32c <ld_dword>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	e000      	b.n	800d6f2 <find_volume+0x116>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	3358      	adds	r3, #88	@ 0x58
 800d6f8:	443b      	add	r3, r7
 800d6fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d700:	3301      	adds	r3, #1
 800d702:	643b      	str	r3, [r7, #64]	@ 0x40
 800d704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d706:	2b03      	cmp	r3, #3
 800d708:	d9dd      	bls.n	800d6c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d70a:	2300      	movs	r3, #0
 800d70c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d70e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	d002      	beq.n	800d71a <find_volume+0x13e>
 800d714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d716:	3b01      	subs	r3, #1
 800d718:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d71a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	3358      	adds	r3, #88	@ 0x58
 800d720:	443b      	add	r3, r7
 800d722:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d726:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <find_volume+0x15e>
 800d72e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d730:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d732:	f7ff fefd 	bl	800d530 <check_fs>
 800d736:	4603      	mov	r3, r0
 800d738:	e000      	b.n	800d73c <find_volume+0x160>
 800d73a:	2303      	movs	r3, #3
 800d73c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d740:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d744:	2b01      	cmp	r3, #1
 800d746:	d905      	bls.n	800d754 <find_volume+0x178>
 800d748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d74a:	3301      	adds	r3, #1
 800d74c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d74e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d750:	2b03      	cmp	r3, #3
 800d752:	d9e2      	bls.n	800d71a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d758:	2b04      	cmp	r3, #4
 800d75a:	d101      	bne.n	800d760 <find_volume+0x184>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e17e      	b.n	800da5e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d764:	2b01      	cmp	r3, #1
 800d766:	d901      	bls.n	800d76c <find_volume+0x190>
 800d768:	230d      	movs	r3, #13
 800d76a:	e178      	b.n	800da5e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	3330      	adds	r3, #48	@ 0x30
 800d770:	330b      	adds	r3, #11
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe fdc2 	bl	800c2fc <ld_word>
 800d778:	4603      	mov	r3, r0
 800d77a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d77e:	d001      	beq.n	800d784 <find_volume+0x1a8>
 800d780:	230d      	movs	r3, #13
 800d782:	e16c      	b.n	800da5e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d786:	3330      	adds	r3, #48	@ 0x30
 800d788:	3316      	adds	r3, #22
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fdb6 	bl	800c2fc <ld_word>
 800d790:	4603      	mov	r3, r0
 800d792:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <find_volume+0x1cc>
 800d79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79c:	3330      	adds	r3, #48	@ 0x30
 800d79e:	3324      	adds	r3, #36	@ 0x24
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe fdc3 	bl	800c32c <ld_dword>
 800d7a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d7ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ba:	789b      	ldrb	r3, [r3, #2]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d005      	beq.n	800d7cc <find_volume+0x1f0>
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c2:	789b      	ldrb	r3, [r3, #2]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d001      	beq.n	800d7cc <find_volume+0x1f0>
 800d7c8:	230d      	movs	r3, #13
 800d7ca:	e148      	b.n	800da5e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ce:	789b      	ldrb	r3, [r3, #2]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7d4:	fb02 f303 	mul.w	r3, r2, r3
 800d7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e8:	895b      	ldrh	r3, [r3, #10]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <find_volume+0x224>
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f0:	895b      	ldrh	r3, [r3, #10]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f6:	895b      	ldrh	r3, [r3, #10]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <find_volume+0x228>
 800d800:	230d      	movs	r3, #13
 800d802:	e12c      	b.n	800da5e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d806:	3330      	adds	r3, #48	@ 0x30
 800d808:	3311      	adds	r3, #17
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fe fd76 	bl	800c2fc <ld_word>
 800d810:	4603      	mov	r3, r0
 800d812:	461a      	mov	r2, r3
 800d814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d816:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81a:	891b      	ldrh	r3, [r3, #8]
 800d81c:	f003 030f 	and.w	r3, r3, #15
 800d820:	b29b      	uxth	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <find_volume+0x24e>
 800d826:	230d      	movs	r3, #13
 800d828:	e119      	b.n	800da5e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82c:	3330      	adds	r3, #48	@ 0x30
 800d82e:	3313      	adds	r3, #19
 800d830:	4618      	mov	r0, r3
 800d832:	f7fe fd63 	bl	800c2fc <ld_word>
 800d836:	4603      	mov	r3, r0
 800d838:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d83a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d106      	bne.n	800d84e <find_volume+0x272>
 800d840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d842:	3330      	adds	r3, #48	@ 0x30
 800d844:	3320      	adds	r3, #32
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fd70 	bl	800c32c <ld_dword>
 800d84c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d850:	3330      	adds	r3, #48	@ 0x30
 800d852:	330e      	adds	r3, #14
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fd51 	bl	800c2fc <ld_word>
 800d85a:	4603      	mov	r3, r0
 800d85c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d85e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d860:	2b00      	cmp	r3, #0
 800d862:	d101      	bne.n	800d868 <find_volume+0x28c>
 800d864:	230d      	movs	r3, #13
 800d866:	e0fa      	b.n	800da5e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d868:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d86a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d86c:	4413      	add	r3, r2
 800d86e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d870:	8912      	ldrh	r2, [r2, #8]
 800d872:	0912      	lsrs	r2, r2, #4
 800d874:	b292      	uxth	r2, r2
 800d876:	4413      	add	r3, r2
 800d878:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d87a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	429a      	cmp	r2, r3
 800d880:	d204      	bcs.n	800d88c <find_volume+0x2b0>
 800d882:	230d      	movs	r3, #13
 800d884:	e0eb      	b.n	800da5e <find_volume+0x482>
 800d886:	bf00      	nop
 800d888:	24001788 	.word	0x24001788
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d88c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d894:	8952      	ldrh	r2, [r2, #10]
 800d896:	fbb3 f3f2 	udiv	r3, r3, r2
 800d89a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <find_volume+0x2ca>
 800d8a2:	230d      	movs	r3, #13
 800d8a4:	e0db      	b.n	800da5e <find_volume+0x482>
		fmt = FS_FAT32;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d802      	bhi.n	800d8bc <find_volume+0x2e0>
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d802      	bhi.n	800d8cc <find_volume+0x2f0>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	1c9a      	adds	r2, r3, #2
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8de:	441a      	add	r2, r3
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d8e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e8:	441a      	add	r2, r3
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d8ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d11e      	bne.n	800d934 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f8:	3330      	adds	r3, #48	@ 0x30
 800d8fa:	332a      	adds	r3, #42	@ 0x2a
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fcfd 	bl	800c2fc <ld_word>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <find_volume+0x330>
 800d908:	230d      	movs	r3, #13
 800d90a:	e0a8      	b.n	800da5e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d90e:	891b      	ldrh	r3, [r3, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <find_volume+0x33c>
 800d914:	230d      	movs	r3, #13
 800d916:	e0a2      	b.n	800da5e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d91a:	3330      	adds	r3, #48	@ 0x30
 800d91c:	332c      	adds	r3, #44	@ 0x2c
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe fd04 	bl	800c32c <ld_dword>
 800d924:	4602      	mov	r2, r0
 800d926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d928:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	647b      	str	r3, [r7, #68]	@ 0x44
 800d932:	e01f      	b.n	800d974 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d936:	891b      	ldrh	r3, [r3, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <find_volume+0x364>
 800d93c:	230d      	movs	r3, #13
 800d93e:	e08e      	b.n	800da5e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d942:	6a1a      	ldr	r2, [r3, #32]
 800d944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d946:	441a      	add	r2, r3
 800d948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d94c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d950:	2b02      	cmp	r3, #2
 800d952:	d103      	bne.n	800d95c <find_volume+0x380>
 800d954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d956:	695b      	ldr	r3, [r3, #20]
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	e00a      	b.n	800d972 <find_volume+0x396>
 800d95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95e:	695a      	ldr	r2, [r3, #20]
 800d960:	4613      	mov	r3, r2
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	4413      	add	r3, r2
 800d966:	085a      	lsrs	r2, r3, #1
 800d968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	f003 0301 	and.w	r3, r3, #1
 800d970:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d972:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d976:	699a      	ldr	r2, [r3, #24]
 800d978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d97a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d97e:	0a5b      	lsrs	r3, r3, #9
 800d980:	429a      	cmp	r2, r3
 800d982:	d201      	bcs.n	800d988 <find_volume+0x3ac>
 800d984:	230d      	movs	r3, #13
 800d986:	e06a      	b.n	800da5e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98a:	f04f 32ff 	mov.w	r2, #4294967295
 800d98e:	611a      	str	r2, [r3, #16]
 800d990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d992:	691a      	ldr	r2, [r3, #16]
 800d994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d996:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99a:	2280      	movs	r2, #128	@ 0x80
 800d99c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d99e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d149      	bne.n	800da3a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a8:	3330      	adds	r3, #48	@ 0x30
 800d9aa:	3330      	adds	r3, #48	@ 0x30
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe fca5 	bl	800c2fc <ld_word>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d140      	bne.n	800da3a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d9c0:	f7fe ff10 	bl	800c7e4 <move_window>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d137      	bne.n	800da3a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d2:	3330      	adds	r3, #48	@ 0x30
 800d9d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fc8f 	bl	800c2fc <ld_word>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d127      	bne.n	800da3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ec:	3330      	adds	r3, #48	@ 0x30
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fc9c 	bl	800c32c <ld_dword>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4a1c      	ldr	r2, [pc, #112]	@ (800da68 <find_volume+0x48c>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d11e      	bne.n	800da3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fe:	3330      	adds	r3, #48	@ 0x30
 800da00:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fc91 	bl	800c32c <ld_dword>
 800da0a:	4603      	mov	r3, r0
 800da0c:	4a17      	ldr	r2, [pc, #92]	@ (800da6c <find_volume+0x490>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d113      	bne.n	800da3a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da14:	3330      	adds	r3, #48	@ 0x30
 800da16:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fc86 	bl	800c32c <ld_dword>
 800da20:	4602      	mov	r2, r0
 800da22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da24:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da28:	3330      	adds	r3, #48	@ 0x30
 800da2a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fc7c 	bl	800c32c <ld_dword>
 800da34:	4602      	mov	r2, r0
 800da36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da38:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800da40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da42:	4b0b      	ldr	r3, [pc, #44]	@ (800da70 <find_volume+0x494>)
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	3301      	adds	r3, #1
 800da48:	b29a      	uxth	r2, r3
 800da4a:	4b09      	ldr	r3, [pc, #36]	@ (800da70 <find_volume+0x494>)
 800da4c:	801a      	strh	r2, [r3, #0]
 800da4e:	4b08      	ldr	r3, [pc, #32]	@ (800da70 <find_volume+0x494>)
 800da50:	881a      	ldrh	r2, [r3, #0]
 800da52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da54:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da58:	f7fe fe5c 	bl	800c714 <clear_lock>
#endif
	return FR_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3758      	adds	r7, #88	@ 0x58
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	41615252 	.word	0x41615252
 800da6c:	61417272 	.word	0x61417272
 800da70:	2400178c 	.word	0x2400178c

0800da74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da7e:	2309      	movs	r3, #9
 800da80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d01c      	beq.n	800dac2 <validate+0x4e>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d018      	beq.n	800dac2 <validate+0x4e>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d013      	beq.n	800dac2 <validate+0x4e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	889a      	ldrh	r2, [r3, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	88db      	ldrh	r3, [r3, #6]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d10c      	bne.n	800dac2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	785b      	ldrb	r3, [r3, #1]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe fba2 	bl	800c1f8 <disk_status>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <validate+0x4e>
			res = FR_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <validate+0x5a>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	e000      	b.n	800dad0 <validate+0x5c>
 800dace:	2300      	movs	r3, #0
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	6013      	str	r3, [r2, #0]
	return res;
 800dad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
	...

0800dae0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800daf2:	f107 0310 	add.w	r3, r7, #16
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff fcd5 	bl	800d4a6 <get_ldnumber>
 800dafc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	2b00      	cmp	r3, #0
 800db02:	da01      	bge.n	800db08 <f_mount+0x28>
 800db04:	230b      	movs	r3, #11
 800db06:	e02b      	b.n	800db60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db08:	4a17      	ldr	r2, [pc, #92]	@ (800db68 <f_mount+0x88>)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d005      	beq.n	800db24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db18:	69b8      	ldr	r0, [r7, #24]
 800db1a:	f7fe fdfb 	bl	800c714 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	490d      	ldr	r1, [pc, #52]	@ (800db68 <f_mount+0x88>)
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <f_mount+0x66>
 800db40:	79fb      	ldrb	r3, [r7, #7]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d001      	beq.n	800db4a <f_mount+0x6a>
 800db46:	2300      	movs	r3, #0
 800db48:	e00a      	b.n	800db60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db4a:	f107 010c 	add.w	r1, r7, #12
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	2200      	movs	r2, #0
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fd41 	bl	800d5dc <find_volume>
 800db5a:	4603      	mov	r3, r0
 800db5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3720      	adds	r7, #32
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	24001788 	.word	0x24001788

0800db6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b098      	sub	sp, #96	@ 0x60
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <f_open+0x18>
 800db80:	2309      	movs	r3, #9
 800db82:	e1a9      	b.n	800ded8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db8c:	79fa      	ldrb	r2, [r7, #7]
 800db8e:	f107 0110 	add.w	r1, r7, #16
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff fd20 	bl	800d5dc <find_volume>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800dba2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 818d 	bne.w	800dec6 <f_open+0x35a>
		dj.obj.fs = fs;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	f107 0314 	add.w	r3, r7, #20
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fc03 	bl	800d3c4 <follow_path>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d118      	bne.n	800dbfe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dbcc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	da03      	bge.n	800dbde <f_open+0x72>
				res = FR_INVALID_NAME;
 800dbd6:	2306      	movs	r3, #6
 800dbd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dbdc:	e00f      	b.n	800dbfe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbde:	79fb      	ldrb	r3, [r7, #7]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	bf8c      	ite	hi
 800dbe4:	2301      	movhi	r3, #1
 800dbe6:	2300      	movls	r3, #0
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	461a      	mov	r2, r3
 800dbec:	f107 0314 	add.w	r3, r7, #20
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe fc82 	bl	800c4fc <chk_lock>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	f003 031c 	and.w	r3, r3, #28
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d07f      	beq.n	800dd08 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800dc08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d017      	beq.n	800dc40 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d10e      	bne.n	800dc36 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc18:	f7fe fccc 	bl	800c5b4 <enq_lock>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <f_open+0xc4>
 800dc22:	f107 0314 	add.w	r3, r7, #20
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff fb05 	bl	800d236 <dir_register>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	e000      	b.n	800dc32 <f_open+0xc6>
 800dc30:	2312      	movs	r3, #18
 800dc32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc36:	79fb      	ldrb	r3, [r7, #7]
 800dc38:	f043 0308 	orr.w	r3, r3, #8
 800dc3c:	71fb      	strb	r3, [r7, #7]
 800dc3e:	e010      	b.n	800dc62 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc40:	7ebb      	ldrb	r3, [r7, #26]
 800dc42:	f003 0311 	and.w	r3, r3, #17
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <f_open+0xe6>
					res = FR_DENIED;
 800dc4a:	2307      	movs	r3, #7
 800dc4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dc50:	e007      	b.n	800dc62 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc52:	79fb      	ldrb	r3, [r7, #7]
 800dc54:	f003 0304 	and.w	r3, r3, #4
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <f_open+0xf6>
 800dc5c:	2308      	movs	r3, #8
 800dc5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d168      	bne.n	800dd3c <f_open+0x1d0>
 800dc6a:	79fb      	ldrb	r3, [r7, #7]
 800dc6c:	f003 0308 	and.w	r3, r3, #8
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d063      	beq.n	800dd3c <f_open+0x1d0>
				dw = GET_FATTIME();
 800dc74:	f7fe f87a 	bl	800bd6c <get_fattime>
 800dc78:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc7c:	330e      	adds	r3, #14
 800dc7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe fb91 	bl	800c3a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc88:	3316      	adds	r3, #22
 800dc8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fe fb8b 	bl	800c3a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dc92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc94:	330b      	adds	r3, #11
 800dc96:	2220      	movs	r2, #32
 800dc98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc9e:	4611      	mov	r1, r2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff fa34 	bl	800d10e <ld_clust>
 800dca6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dcac:	2200      	movs	r2, #0
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7ff fa4c 	bl	800d14c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcb6:	331c      	adds	r3, #28
 800dcb8:	2100      	movs	r1, #0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fb74 	bl	800c3a8 <st_dword>
					fs->wflag = 1;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dcc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d037      	beq.n	800dd3c <f_open+0x1d0>
						dw = fs->winsect;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dcd2:	f107 0314 	add.w	r3, r7, #20
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe ff5f 	bl	800cb9e <remove_chain>
 800dce0:	4603      	mov	r3, r0
 800dce2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800dce6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d126      	bne.n	800dd3c <f_open+0x1d0>
							res = move_window(fs, dw);
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fe fd76 	bl	800c7e4 <move_window>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd02:	3a01      	subs	r2, #1
 800dd04:	60da      	str	r2, [r3, #12]
 800dd06:	e019      	b.n	800dd3c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d115      	bne.n	800dd3c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd10:	7ebb      	ldrb	r3, [r7, #26]
 800dd12:	f003 0310 	and.w	r3, r3, #16
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d003      	beq.n	800dd22 <f_open+0x1b6>
					res = FR_NO_FILE;
 800dd1a:	2304      	movs	r3, #4
 800dd1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dd20:	e00c      	b.n	800dd3c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd22:	79fb      	ldrb	r3, [r7, #7]
 800dd24:	f003 0302 	and.w	r3, r3, #2
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d007      	beq.n	800dd3c <f_open+0x1d0>
 800dd2c:	7ebb      	ldrb	r3, [r7, #26]
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <f_open+0x1d0>
						res = FR_DENIED;
 800dd36:	2307      	movs	r3, #7
 800dd38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d126      	bne.n	800dd92 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd44:	79fb      	ldrb	r3, [r7, #7]
 800dd46:	f003 0308 	and.w	r3, r3, #8
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dd5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd64:	79fb      	ldrb	r3, [r7, #7]
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	bf8c      	ite	hi
 800dd6a:	2301      	movhi	r3, #1
 800dd6c:	2300      	movls	r3, #0
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	461a      	mov	r2, r3
 800dd72:	f107 0314 	add.w	r3, r7, #20
 800dd76:	4611      	mov	r1, r2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fe fc3d 	bl	800c5f8 <inc_lock>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <f_open+0x226>
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dd92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f040 8095 	bne.w	800dec6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dda0:	4611      	mov	r1, r2
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff f9b3 	bl	800d10e <ld_clust>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb0:	331c      	adds	r3, #28
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe faba 	bl	800c32c <ld_dword>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	88da      	ldrh	r2, [r3, #6]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	79fa      	ldrb	r2, [r7, #7]
 800ddd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2200      	movs	r2, #0
 800dde8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	3330      	adds	r3, #48	@ 0x30
 800ddee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fb24 	bl	800c442 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	f003 0320 	and.w	r3, r3, #32
 800de00:	2b00      	cmp	r3, #0
 800de02:	d060      	beq.n	800dec6 <f_open+0x35a>
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d05c      	beq.n	800dec6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68da      	ldr	r2, [r3, #12]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	895b      	ldrh	r3, [r3, #10]
 800de18:	025b      	lsls	r3, r3, #9
 800de1a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	657b      	str	r3, [r7, #84]	@ 0x54
 800de28:	e016      	b.n	800de58 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe fd24 	bl	800c87c <get_fat>
 800de34:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800de36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d802      	bhi.n	800de42 <f_open+0x2d6>
 800de3c:	2302      	movs	r3, #2
 800de3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de48:	d102      	bne.n	800de50 <f_open+0x2e4>
 800de4a:	2301      	movs	r3, #1
 800de4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de54:	1ad3      	subs	r3, r2, r3
 800de56:	657b      	str	r3, [r7, #84]	@ 0x54
 800de58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d103      	bne.n	800de68 <f_open+0x2fc>
 800de60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de64:	429a      	cmp	r2, r3
 800de66:	d8e0      	bhi.n	800de2a <f_open+0x2be>
				}
				fp->clust = clst;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de72:	2b00      	cmp	r3, #0
 800de74:	d127      	bne.n	800dec6 <f_open+0x35a>
 800de76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d022      	beq.n	800dec6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800de84:	4618      	mov	r0, r3
 800de86:	f7fe fcda 	bl	800c83e <clust2sect>
 800de8a:	6478      	str	r0, [r7, #68]	@ 0x44
 800de8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d103      	bne.n	800de9a <f_open+0x32e>
						res = FR_INT_ERR;
 800de92:	2302      	movs	r3, #2
 800de94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800de98:	e015      	b.n	800dec6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de9c:	0a5a      	lsrs	r2, r3, #9
 800de9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dea0:	441a      	add	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	7858      	ldrb	r0, [r3, #1]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6a1a      	ldr	r2, [r3, #32]
 800deb4:	2301      	movs	r3, #1
 800deb6:	f7fe f9e1 	bl	800c27c <disk_read>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <f_open+0x35a>
 800dec0:	2301      	movs	r3, #1
 800dec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dec6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800deca:	2b00      	cmp	r3, #0
 800decc:	d002      	beq.n	800ded4 <f_open+0x368>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ded4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3760      	adds	r7, #96	@ 0x60
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08e      	sub	sp, #56	@ 0x38
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f107 0214 	add.w	r2, r7, #20
 800defe:	4611      	mov	r1, r2
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fdb7 	bl	800da74 <validate>
 800df06:	4603      	mov	r3, r0
 800df08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df10:	2b00      	cmp	r3, #0
 800df12:	d107      	bne.n	800df24 <f_read+0x44>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	7d5b      	ldrb	r3, [r3, #21]
 800df18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <f_read+0x4a>
 800df24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df28:	e115      	b.n	800e156 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	7d1b      	ldrb	r3, [r3, #20]
 800df2e:	f003 0301 	and.w	r3, r3, #1
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <f_read+0x5a>
 800df36:	2307      	movs	r3, #7
 800df38:	e10d      	b.n	800e156 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68da      	ldr	r2, [r3, #12]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	f240 80fe 	bls.w	800e14c <f_read+0x26c>
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800df54:	e0fa      	b.n	800e14c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f040 80c6 	bne.w	800e0f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	0a5b      	lsrs	r3, r3, #9
 800df6a:	697a      	ldr	r2, [r7, #20]
 800df6c:	8952      	ldrh	r2, [r2, #10]
 800df6e:	3a01      	subs	r2, #1
 800df70:	4013      	ands	r3, r2
 800df72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d12f      	bne.n	800dfda <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d103      	bne.n	800df8a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	633b      	str	r3, [r7, #48]	@ 0x30
 800df88:	e013      	b.n	800dfb2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d007      	beq.n	800dfa2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	4619      	mov	r1, r3
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f7fe fefd 	bl	800cd98 <clmt_clust>
 800df9e:	6338      	str	r0, [r7, #48]	@ 0x30
 800dfa0:	e007      	b.n	800dfb2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	69db      	ldr	r3, [r3, #28]
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4610      	mov	r0, r2
 800dfac:	f7fe fc66 	bl	800c87c <get_fat>
 800dfb0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d804      	bhi.n	800dfc2 <f_read+0xe2>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2202      	movs	r2, #2
 800dfbc:	755a      	strb	r2, [r3, #21]
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	e0c9      	b.n	800e156 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc8:	d104      	bne.n	800dfd4 <f_read+0xf4>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	755a      	strb	r2, [r3, #21]
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e0c0      	b.n	800e156 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfd8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	69db      	ldr	r3, [r3, #28]
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	f7fe fc2b 	bl	800c83e <clust2sect>
 800dfe8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d104      	bne.n	800dffa <f_read+0x11a>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2202      	movs	r2, #2
 800dff4:	755a      	strb	r2, [r3, #21]
 800dff6:	2302      	movs	r3, #2
 800dff8:	e0ad      	b.n	800e156 <f_read+0x276>
			sect += csect;
 800dffa:	69ba      	ldr	r2, [r7, #24]
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	4413      	add	r3, r2
 800e000:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	0a5b      	lsrs	r3, r3, #9
 800e006:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d039      	beq.n	800e082 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e00e:	69fa      	ldr	r2, [r7, #28]
 800e010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e012:	4413      	add	r3, r2
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	8952      	ldrh	r2, [r2, #10]
 800e018:	4293      	cmp	r3, r2
 800e01a:	d905      	bls.n	800e028 <f_read+0x148>
					cc = fs->csize - csect;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	895b      	ldrh	r3, [r3, #10]
 800e020:	461a      	mov	r2, r3
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	7858      	ldrb	r0, [r3, #1]
 800e02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e02e:	69ba      	ldr	r2, [r7, #24]
 800e030:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e032:	f7fe f923 	bl	800c27c <disk_read>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <f_read+0x166>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2201      	movs	r2, #1
 800e040:	755a      	strb	r2, [r3, #21]
 800e042:	2301      	movs	r3, #1
 800e044:	e087      	b.n	800e156 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	7d1b      	ldrb	r3, [r3, #20]
 800e04a:	b25b      	sxtb	r3, r3
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	da14      	bge.n	800e07a <f_read+0x19a>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6a1a      	ldr	r2, [r3, #32]
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d90d      	bls.n	800e07a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6a1a      	ldr	r2, [r3, #32]
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	025b      	lsls	r3, r3, #9
 800e068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e06a:	18d0      	adds	r0, r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3330      	adds	r3, #48	@ 0x30
 800e070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e074:	4619      	mov	r1, r3
 800e076:	f7fe f9c3 	bl	800c400 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e07c:	025b      	lsls	r3, r3, #9
 800e07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e080:	e050      	b.n	800e124 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	69ba      	ldr	r2, [r7, #24]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d02e      	beq.n	800e0ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	7d1b      	ldrb	r3, [r3, #20]
 800e090:	b25b      	sxtb	r3, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	da18      	bge.n	800e0c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	7858      	ldrb	r0, [r3, #1]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6a1a      	ldr	r2, [r3, #32]
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	f7fe f909 	bl	800c2bc <disk_write>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d004      	beq.n	800e0ba <f_read+0x1da>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	755a      	strb	r2, [r3, #21]
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e04d      	b.n	800e156 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	7d1b      	ldrb	r3, [r3, #20]
 800e0be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	7858      	ldrb	r0, [r3, #1]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	f7fe f8d1 	bl	800c27c <disk_read>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d004      	beq.n	800e0ea <f_read+0x20a>
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	755a      	strb	r2, [r3, #21]
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e035      	b.n	800e156 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	69ba      	ldr	r2, [r7, #24]
 800e0ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	429a      	cmp	r2, r3
 800e104:	d901      	bls.n	800e10a <f_read+0x22a>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	699b      	ldr	r3, [r3, #24]
 800e114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e118:	4413      	add	r3, r2
 800e11a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e11c:	4619      	mov	r1, r3
 800e11e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e120:	f7fe f96e 	bl	800c400 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e128:	4413      	add	r3, r2
 800e12a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	699a      	ldr	r2, [r3, #24]
 800e130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e132:	441a      	add	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	619a      	str	r2, [r3, #24]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	441a      	add	r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f47f af01 	bne.w	800df56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3738      	adds	r7, #56	@ 0x38
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b090      	sub	sp, #64	@ 0x40
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f107 0208 	add.w	r2, r7, #8
 800e16e:	4611      	mov	r1, r2
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff fc7f 	bl	800da74 <validate>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e17c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e180:	2b00      	cmp	r3, #0
 800e182:	d103      	bne.n	800e18c <f_lseek+0x2e>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d5b      	ldrb	r3, [r3, #21]
 800e188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e18c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <f_lseek+0x3c>
 800e194:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e198:	e1e6      	b.n	800e568 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 80d1 	beq.w	800e346 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1aa:	d15a      	bne.n	800e262 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b4:	1d1a      	adds	r2, r3, #4
 800e1b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	2302      	movs	r3, #2
 800e1be:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d03a      	beq.n	800e242 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ce:	613b      	str	r3, [r7, #16]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d6:	3302      	adds	r3, #2
 800e1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe fb47 	bl	800c87c <get_fat>
 800e1ee:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d804      	bhi.n	800e200 <f_lseek+0xa2>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2202      	movs	r2, #2
 800e1fa:	755a      	strb	r2, [r3, #21]
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	e1b3      	b.n	800e568 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e206:	d104      	bne.n	800e212 <f_lseek+0xb4>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	755a      	strb	r2, [r3, #21]
 800e20e:	2301      	movs	r3, #1
 800e210:	e1aa      	b.n	800e568 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	3301      	adds	r3, #1
 800e216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e218:	429a      	cmp	r2, r3
 800e21a:	d0de      	beq.n	800e1da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e21c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	429a      	cmp	r2, r3
 800e222:	d809      	bhi.n	800e238 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e226:	1d1a      	adds	r2, r3, #4
 800e228:	627a      	str	r2, [r7, #36]	@ 0x24
 800e22a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	1d1a      	adds	r2, r3, #4
 800e232:	627a      	str	r2, [r7, #36]	@ 0x24
 800e234:	693a      	ldr	r2, [r7, #16]
 800e236:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	695b      	ldr	r3, [r3, #20]
 800e23c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e23e:	429a      	cmp	r2, r3
 800e240:	d3c4      	bcc.n	800e1cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e248:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e24a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d803      	bhi.n	800e25a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	2200      	movs	r2, #0
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	e184      	b.n	800e564 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e25a:	2311      	movs	r3, #17
 800e25c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e260:	e180      	b.n	800e564 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d902      	bls.n	800e272 <f_lseek+0x114>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f000 8172 	beq.w	800e564 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	3b01      	subs	r3, #1
 800e284:	4619      	mov	r1, r3
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7fe fd86 	bl	800cd98 <clmt_clust>
 800e28c:	4602      	mov	r2, r0
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	4619      	mov	r1, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	f7fe facf 	bl	800c83e <clust2sect>
 800e2a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d104      	bne.n	800e2b2 <f_lseek+0x154>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	755a      	strb	r2, [r3, #21]
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e15a      	b.n	800e568 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	0a5b      	lsrs	r3, r3, #9
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	8952      	ldrh	r2, [r2, #10]
 800e2bc:	3a01      	subs	r2, #1
 800e2be:	4013      	ands	r3, r2
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f000 8148 	beq.w	800e564 <f_lseek+0x406>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	f000 8142 	beq.w	800e564 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	7d1b      	ldrb	r3, [r3, #20]
 800e2e4:	b25b      	sxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	da18      	bge.n	800e31c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	7858      	ldrb	r0, [r3, #1]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a1a      	ldr	r2, [r3, #32]
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	f7fd ffdf 	bl	800c2bc <disk_write>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d004      	beq.n	800e30e <f_lseek+0x1b0>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	755a      	strb	r2, [r3, #21]
 800e30a:	2301      	movs	r3, #1
 800e30c:	e12c      	b.n	800e568 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	7d1b      	ldrb	r3, [r3, #20]
 800e312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e316:	b2da      	uxtb	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	7858      	ldrb	r0, [r3, #1]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e326:	2301      	movs	r3, #1
 800e328:	69ba      	ldr	r2, [r7, #24]
 800e32a:	f7fd ffa7 	bl	800c27c <disk_read>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <f_lseek+0x1e0>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	755a      	strb	r2, [r3, #21]
 800e33a:	2301      	movs	r3, #1
 800e33c:	e114      	b.n	800e568 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	69ba      	ldr	r2, [r7, #24]
 800e342:	621a      	str	r2, [r3, #32]
 800e344:	e10e      	b.n	800e564 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d908      	bls.n	800e362 <f_lseek+0x204>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7d1b      	ldrb	r3, [r3, #20]
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e368:	2300      	movs	r3, #0
 800e36a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e370:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 80a7 	beq.w	800e4c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	895b      	ldrh	r3, [r3, #10]
 800e37e:	025b      	lsls	r3, r3, #9
 800e380:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d01b      	beq.n	800e3c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	1e5a      	subs	r2, r3, #1
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	1e59      	subs	r1, r3, #1
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d30f      	bcc.n	800e3c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	1e5a      	subs	r2, r3, #1
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	425b      	negs	r3, r3
 800e3a8:	401a      	ands	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	69db      	ldr	r3, [r3, #28]
 800e3bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3be:	e022      	b.n	800e406 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d119      	bne.n	800e400 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe fc49 	bl	800cc68 <create_chain>
 800e3d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d104      	bne.n	800e3e8 <f_lseek+0x28a>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	755a      	strb	r2, [r3, #21]
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	e0bf      	b.n	800e568 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ee:	d104      	bne.n	800e3fa <f_lseek+0x29c>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	755a      	strb	r2, [r3, #21]
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e0b6      	b.n	800e568 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e404:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d05d      	beq.n	800e4c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e40c:	e03a      	b.n	800e484 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	603b      	str	r3, [r7, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	699a      	ldr	r2, [r3, #24]
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	441a      	add	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7d1b      	ldrb	r3, [r3, #20]
 800e426:	f003 0302 	and.w	r3, r3, #2
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00b      	beq.n	800e446 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e432:	4618      	mov	r0, r3
 800e434:	f7fe fc18 	bl	800cc68 <create_chain>
 800e438:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d108      	bne.n	800e452 <f_lseek+0x2f4>
							ofs = 0; break;
 800e440:	2300      	movs	r3, #0
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	e022      	b.n	800e48c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fa16 	bl	800c87c <get_fat>
 800e450:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e458:	d104      	bne.n	800e464 <f_lseek+0x306>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	755a      	strb	r2, [r3, #21]
 800e460:	2301      	movs	r3, #1
 800e462:	e081      	b.n	800e568 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e466:	2b01      	cmp	r3, #1
 800e468:	d904      	bls.n	800e474 <f_lseek+0x316>
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e470:	429a      	cmp	r2, r3
 800e472:	d304      	bcc.n	800e47e <f_lseek+0x320>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2202      	movs	r2, #2
 800e478:	755a      	strb	r2, [r3, #21]
 800e47a:	2302      	movs	r3, #2
 800e47c:	e074      	b.n	800e568 <f_lseek+0x40a>
					fp->clust = clst;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e482:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d8c0      	bhi.n	800e40e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	699a      	ldr	r2, [r3, #24]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	441a      	add	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d012      	beq.n	800e4c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe f9c9 	bl	800c83e <clust2sect>
 800e4ac:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d104      	bne.n	800e4be <f_lseek+0x360>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	755a      	strb	r2, [r3, #21]
 800e4ba:	2302      	movs	r3, #2
 800e4bc:	e054      	b.n	800e568 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	0a5b      	lsrs	r3, r3, #9
 800e4c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4c4:	4413      	add	r3, r2
 800e4c6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	699a      	ldr	r2, [r3, #24]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d90a      	bls.n	800e4ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	699a      	ldr	r2, [r3, #24]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	7d1b      	ldrb	r3, [r3, #20]
 800e4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d036      	beq.n	800e564 <f_lseek+0x406>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d031      	beq.n	800e564 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	7d1b      	ldrb	r3, [r3, #20]
 800e504:	b25b      	sxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	da18      	bge.n	800e53c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	7858      	ldrb	r0, [r3, #1]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a1a      	ldr	r2, [r3, #32]
 800e518:	2301      	movs	r3, #1
 800e51a:	f7fd fecf 	bl	800c2bc <disk_write>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d004      	beq.n	800e52e <f_lseek+0x3d0>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	755a      	strb	r2, [r3, #21]
 800e52a:	2301      	movs	r3, #1
 800e52c:	e01c      	b.n	800e568 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	7d1b      	ldrb	r3, [r3, #20]
 800e532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e536:	b2da      	uxtb	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	7858      	ldrb	r0, [r3, #1]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e546:	2301      	movs	r3, #1
 800e548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e54a:	f7fd fe97 	bl	800c27c <disk_read>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d004      	beq.n	800e55e <f_lseek+0x400>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	755a      	strb	r2, [r3, #21]
 800e55a:	2301      	movs	r3, #1
 800e55c:	e004      	b.n	800e568 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e562:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e564:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3740      	adds	r7, #64	@ 0x40
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e570:	b480      	push	{r7}
 800e572:	b087      	sub	sp, #28
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	4613      	mov	r3, r2
 800e57c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e57e:	2301      	movs	r3, #1
 800e580:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e586:	4b1f      	ldr	r3, [pc, #124]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e588:	7a5b      	ldrb	r3, [r3, #9]
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d131      	bne.n	800e5f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e590:	4b1c      	ldr	r3, [pc, #112]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e592:	7a5b      	ldrb	r3, [r3, #9]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	461a      	mov	r2, r3
 800e598:	4b1a      	ldr	r3, [pc, #104]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e59a:	2100      	movs	r1, #0
 800e59c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e59e:	4b19      	ldr	r3, [pc, #100]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e5a0:	7a5b      	ldrb	r3, [r3, #9]
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	4a17      	ldr	r2, [pc, #92]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e5ae:	4b15      	ldr	r3, [pc, #84]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e5b0:	7a5b      	ldrb	r3, [r3, #9]
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	4b13      	ldr	r3, [pc, #76]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	79fa      	ldrb	r2, [r7, #7]
 800e5bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e5be:	4b11      	ldr	r3, [pc, #68]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e5c0:	7a5b      	ldrb	r3, [r3, #9]
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	b2d1      	uxtb	r1, r2
 800e5c8:	4a0e      	ldr	r2, [pc, #56]	@ (800e604 <FATFS_LinkDriverEx+0x94>)
 800e5ca:	7251      	strb	r1, [r2, #9]
 800e5cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e5ce:	7dbb      	ldrb	r3, [r7, #22]
 800e5d0:	3330      	adds	r3, #48	@ 0x30
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	223a      	movs	r2, #58	@ 0x3a
 800e5de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	3302      	adds	r3, #2
 800e5e4:	222f      	movs	r2, #47	@ 0x2f
 800e5e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	3303      	adds	r3, #3
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	371c      	adds	r7, #28
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	240017b0 	.word	0x240017b0

0800e608 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e612:	2200      	movs	r2, #0
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff ffaa 	bl	800e570 <FATFS_LinkDriverEx>
 800e61c:	4603      	mov	r3, r0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
	...

0800e628 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800e62e:	2300      	movs	r3, #0
 800e630:	607b      	str	r3, [r7, #4]
 800e632:	e02e      	b.n	800e692 <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3b80      	subs	r3, #128	@ 0x80
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800e642:	fb02 f303 	mul.w	r3, r2, r3
 800e646:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e64a:	141a      	asrs	r2, r3, #16
 800e64c:	4916      	ldr	r1, [pc, #88]	@ (800e6a8 <JPEG_InitPostProcColorTables+0x80>)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
 800e65e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e662:	141a      	asrs	r2, r3, #16
 800e664:	4911      	ldr	r1, [pc, #68]	@ (800e6ac <JPEG_InitPostProcColorTables+0x84>)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	4a10      	ldr	r2, [pc, #64]	@ (800e6b0 <JPEG_InitPostProcColorTables+0x88>)
 800e670:	fb03 f202 	mul.w	r2, r3, r2
 800e674:	490f      	ldr	r1, [pc, #60]	@ (800e6b4 <JPEG_InitPostProcColorTables+0x8c>)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	4a0e      	ldr	r2, [pc, #56]	@ (800e6b8 <JPEG_InitPostProcColorTables+0x90>)
 800e680:	fb03 f202 	mul.w	r2, r3, r2
 800e684:	490d      	ldr	r1, [pc, #52]	@ (800e6bc <JPEG_InitPostProcColorTables+0x94>)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3301      	adds	r3, #1
 800e690:	607b      	str	r3, [r7, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2bff      	cmp	r3, #255	@ 0xff
 800e696:	ddcd      	ble.n	800e634 <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800e698:	bf00      	nop
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	240017bc 	.word	0x240017bc
 800e6ac:	24001bbc 	.word	0x24001bbc
 800e6b0:	ffffa498 	.word	0xffffa498
 800e6b4:	24001fbc 	.word	0x24001fbc
 800e6b8:	ffffd3f4 	.word	0xffffd3f4
 800e6bc:	240023bc 	.word	0x240023bc

0800e6c0 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800e6c4:	f000 f806 	bl	800e6d4 <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800e6c8:	f000 f888 	bl	800e7dc <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800e6cc:	f7ff ffac 	bl	800e628 <JPEG_InitPostProcColorTables>
#endif

}
 800e6d0:	bf00      	nop
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800e6da:	2300      	movs	r3, #0
 800e6dc:	607b      	str	r3, [r7, #4]
 800e6de:	e05a      	b.n	800e796 <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800e6e6:	fb02 f303 	mul.w	r3, r2, r3
 800e6ea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e6ee:	141a      	asrs	r2, r3, #16
 800e6f0:	492e      	ldr	r1, [pc, #184]	@ (800e7ac <JPEG_InitPreProcColorTables+0xd8>)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f249 6245 	movw	r2, #38469	@ 0x9645
 800e6fe:	fb02 f303 	mul.w	r3, r2, r3
 800e702:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e706:	141a      	asrs	r2, r3, #16
 800e708:	4929      	ldr	r1, [pc, #164]	@ (800e7b0 <JPEG_InitPreProcColorTables+0xdc>)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800e716:	fb02 f303 	mul.w	r3, r2, r3
 800e71a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e71e:	141a      	asrs	r2, r3, #16
 800e720:	4924      	ldr	r1, [pc, #144]	@ (800e7b4 <JPEG_InitPreProcColorTables+0xe0>)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a23      	ldr	r2, [pc, #140]	@ (800e7b8 <JPEG_InitPreProcColorTables+0xe4>)
 800e72c:	fb02 f303 	mul.w	r3, r2, r3
 800e730:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e734:	141a      	asrs	r2, r3, #16
 800e736:	4921      	ldr	r1, [pc, #132]	@ (800e7bc <JPEG_InitPreProcColorTables+0xe8>)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a1f      	ldr	r2, [pc, #124]	@ (800e7c0 <JPEG_InitPreProcColorTables+0xec>)
 800e742:	fb02 f303 	mul.w	r3, r2, r3
 800e746:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e74a:	141a      	asrs	r2, r3, #16
 800e74c:	491d      	ldr	r1, [pc, #116]	@ (800e7c4 <JPEG_InitPreProcColorTables+0xf0>)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	3301      	adds	r3, #1
 800e758:	03db      	lsls	r3, r3, #15
 800e75a:	141a      	asrs	r2, r3, #16
 800e75c:	491a      	ldr	r1, [pc, #104]	@ (800e7c8 <JPEG_InitPreProcColorTables+0xf4>)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a19      	ldr	r2, [pc, #100]	@ (800e7cc <JPEG_InitPreProcColorTables+0xf8>)
 800e768:	fb02 f303 	mul.w	r3, r2, r3
 800e76c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e770:	141a      	asrs	r2, r3, #16
 800e772:	4917      	ldr	r1, [pc, #92]	@ (800e7d0 <JPEG_InitPreProcColorTables+0xfc>)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a15      	ldr	r2, [pc, #84]	@ (800e7d4 <JPEG_InitPreProcColorTables+0x100>)
 800e77e:	fb02 f303 	mul.w	r3, r2, r3
 800e782:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e786:	141a      	asrs	r2, r3, #16
 800e788:	4913      	ldr	r1, [pc, #76]	@ (800e7d8 <JPEG_InitPreProcColorTables+0x104>)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	3301      	adds	r3, #1
 800e794:	607b      	str	r3, [r7, #4]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2bff      	cmp	r3, #255	@ 0xff
 800e79a:	dda1      	ble.n	800e6e0 <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800e79c:	bf00      	nop
 800e79e:	bf00      	nop
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	240027bc 	.word	0x240027bc
 800e7b0:	240033bc 	.word	0x240033bc
 800e7b4:	24003fbc 	.word	0x24003fbc
 800e7b8:	ffffd4d1 	.word	0xffffd4d1
 800e7bc:	24002bbc 	.word	0x24002bbc
 800e7c0:	ffffab30 	.word	0xffffab30
 800e7c4:	24003bbc 	.word	0x24003bbc
 800e7c8:	24002fbc 	.word	0x24002fbc
 800e7cc:	ffff94d1 	.word	0xffff94d1
 800e7d0:	240037bc 	.word	0x240037bc
 800e7d4:	ffffeb30 	.word	0xffffeb30
 800e7d8:	240043bc 	.word	0x240043bc

0800e7dc <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	60fb      	str	r3, [r7, #12]
 800e7e6:	e036      	b.n	800e856 <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	60bb      	str	r3, [r7, #8]
 800e7ec:	e02d      	b.n	800e84a <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	00db      	lsls	r3, r3, #3
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2b07      	cmp	r3, #7
 800e7fc:	d906      	bls.n	800e80c <JPEG_Init_MCU_LUT+0x30>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2b07      	cmp	r3, #7
 800e802:	d903      	bls.n	800e80c <JPEG_Init_MCU_LUT+0x30>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3378      	adds	r3, #120	@ 0x78
 800e808:	607b      	str	r3, [r7, #4]
 800e80a:	e012      	b.n	800e832 <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	2b07      	cmp	r3, #7
 800e810:	d906      	bls.n	800e820 <JPEG_Init_MCU_LUT+0x44>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b07      	cmp	r3, #7
 800e816:	d803      	bhi.n	800e820 <JPEG_Init_MCU_LUT+0x44>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3338      	adds	r3, #56	@ 0x38
 800e81c:	607b      	str	r3, [r7, #4]
 800e81e:	e008      	b.n	800e832 <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	2b07      	cmp	r3, #7
 800e824:	d805      	bhi.n	800e832 <JPEG_Init_MCU_LUT+0x56>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2b07      	cmp	r3, #7
 800e82a:	d902      	bls.n	800e832 <JPEG_Init_MCU_LUT+0x56>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3340      	adds	r3, #64	@ 0x40
 800e830:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	011a      	lsls	r2, r3, #4
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	4413      	add	r3, r2
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	b291      	uxth	r1, r2
 800e83e:	4a62      	ldr	r2, [pc, #392]	@ (800e9c8 <JPEG_Init_MCU_LUT+0x1ec>)
 800e840:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	3301      	adds	r3, #1
 800e848:	60bb      	str	r3, [r7, #8]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	2b0f      	cmp	r3, #15
 800e84e:	d9ce      	bls.n	800e7ee <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	3301      	adds	r3, #1
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b0f      	cmp	r3, #15
 800e85a:	d9c5      	bls.n	800e7e8 <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800e85c:	2300      	movs	r3, #0
 800e85e:	60fb      	str	r3, [r7, #12]
 800e860:	e072      	b.n	800e948 <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800e862:	2300      	movs	r3, #0
 800e864:	60bb      	str	r3, [r7, #8]
 800e866:	e069      	b.n	800e93c <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	011b      	lsls	r3, r3, #4
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	4413      	add	r3, r2
 800e870:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	085b      	lsrs	r3, r3, #1
 800e876:	b29a      	uxth	r2, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	085b      	lsrs	r3, r3, #1
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	00db      	lsls	r3, r3, #3
 800e880:	b29b      	uxth	r3, r3
 800e882:	4413      	add	r3, r2
 800e884:	b29b      	uxth	r3, r3
 800e886:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e88a:	b299      	uxth	r1, r3
 800e88c:	4a4f      	ldr	r2, [pc, #316]	@ (800e9cc <JPEG_Init_MCU_LUT+0x1f0>)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	085b      	lsrs	r3, r3, #1
 800e898:	b29a      	uxth	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	3380      	adds	r3, #128	@ 0x80
 800e8a8:	b299      	uxth	r1, r3
 800e8aa:	4a49      	ldr	r2, [pc, #292]	@ (800e9d0 <JPEG_Init_MCU_LUT+0x1f4>)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	085b      	lsrs	r3, r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	085b      	lsrs	r3, r3, #1
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	00db      	lsls	r3, r3, #3
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	4413      	add	r3, r2
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800e8ca:	b299      	uxth	r1, r3
 800e8cc:	4a41      	ldr	r2, [pc, #260]	@ (800e9d4 <JPEG_Init_MCU_LUT+0x1f8>)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	085b      	lsrs	r3, r3, #1
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	00db      	lsls	r3, r3, #3
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	4413      	add	r3, r2
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	33c0      	adds	r3, #192	@ 0xc0
 800e8e8:	b299      	uxth	r1, r3
 800e8ea:	4a3b      	ldr	r2, [pc, #236]	@ (800e9d8 <JPEG_Init_MCU_LUT+0x1fc>)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	085b      	lsrs	r3, r3, #1
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	085b      	lsrs	r3, r3, #1
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	b29b      	uxth	r3, r3
 800e902:	4413      	add	r3, r2
 800e904:	b29b      	uxth	r3, r3
 800e906:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e90a:	b299      	uxth	r1, r3
 800e90c:	4a33      	ldr	r2, [pc, #204]	@ (800e9dc <JPEG_Init_MCU_LUT+0x200>)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	085b      	lsrs	r3, r3, #1
 800e918:	b29a      	uxth	r2, r3
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	085b      	lsrs	r3, r3, #1
 800e91e:	b29b      	uxth	r3, r3
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	b29b      	uxth	r3, r3
 800e924:	4413      	add	r3, r2
 800e926:	b29b      	uxth	r3, r3
 800e928:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e92c:	b299      	uxth	r1, r3
 800e92e:	4a2c      	ldr	r2, [pc, #176]	@ (800e9e0 <JPEG_Init_MCU_LUT+0x204>)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	3301      	adds	r3, #1
 800e93a:	60bb      	str	r3, [r7, #8]
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	2b0f      	cmp	r3, #15
 800e940:	d992      	bls.n	800e868 <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3301      	adds	r3, #1
 800e946:	60fb      	str	r3, [r7, #12]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b0f      	cmp	r3, #15
 800e94c:	d989      	bls.n	800e862 <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800e94e:	2300      	movs	r3, #0
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	e02e      	b.n	800e9b2 <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800e954:	2300      	movs	r3, #0
 800e956:	60bb      	str	r3, [r7, #8]
 800e958:	e025      	b.n	800e9a6 <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	4413      	add	r3, r2
 800e962:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	b299      	uxth	r1, r3
 800e968:	4a1e      	ldr	r2, [pc, #120]	@ (800e9e4 <JPEG_Init_MCU_LUT+0x208>)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	b29b      	uxth	r3, r3
 800e974:	3340      	adds	r3, #64	@ 0x40
 800e976:	b299      	uxth	r1, r3
 800e978:	4a1b      	ldr	r2, [pc, #108]	@ (800e9e8 <JPEG_Init_MCU_LUT+0x20c>)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	b29b      	uxth	r3, r3
 800e984:	3380      	adds	r3, #128	@ 0x80
 800e986:	b299      	uxth	r1, r3
 800e988:	4a18      	ldr	r2, [pc, #96]	@ (800e9ec <JPEG_Init_MCU_LUT+0x210>)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	b29b      	uxth	r3, r3
 800e994:	33c0      	adds	r3, #192	@ 0xc0
 800e996:	b299      	uxth	r1, r3
 800e998:	4a15      	ldr	r2, [pc, #84]	@ (800e9f0 <JPEG_Init_MCU_LUT+0x214>)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	60bb      	str	r3, [r7, #8]
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	d9d6      	bls.n	800e95a <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	60fb      	str	r3, [r7, #12]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b07      	cmp	r3, #7
 800e9b6:	d9cd      	bls.n	800e954 <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800e9b8:	bf00      	nop
 800e9ba:	bf00      	nop
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	240047bc 	.word	0x240047bc
 800e9cc:	24004a3c 	.word	0x24004a3c
 800e9d0:	24004c3c 	.word	0x24004c3c
 800e9d4:	24004ebc 	.word	0x24004ebc
 800e9d8:	240050bc 	.word	0x240050bc
 800e9dc:	2400533c 	.word	0x2400533c
 800e9e0:	2400553c 	.word	0x2400553c
 800e9e4:	240049bc 	.word	0x240049bc
 800e9e8:	24004e3c 	.word	0x24004e3c
 800e9ec:	240052bc 	.word	0x240052bc
 800e9f0:	2400573c 	.word	0x2400573c

0800e9f4 <memset>:
 800e9f4:	4402      	add	r2, r0
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d100      	bne.n	800e9fe <memset+0xa>
 800e9fc:	4770      	bx	lr
 800e9fe:	f803 1b01 	strb.w	r1, [r3], #1
 800ea02:	e7f9      	b.n	800e9f8 <memset+0x4>

0800ea04 <__libc_init_array>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	4d0d      	ldr	r5, [pc, #52]	@ (800ea3c <__libc_init_array+0x38>)
 800ea08:	4c0d      	ldr	r4, [pc, #52]	@ (800ea40 <__libc_init_array+0x3c>)
 800ea0a:	1b64      	subs	r4, r4, r5
 800ea0c:	10a4      	asrs	r4, r4, #2
 800ea0e:	2600      	movs	r6, #0
 800ea10:	42a6      	cmp	r6, r4
 800ea12:	d109      	bne.n	800ea28 <__libc_init_array+0x24>
 800ea14:	4d0b      	ldr	r5, [pc, #44]	@ (800ea44 <__libc_init_array+0x40>)
 800ea16:	4c0c      	ldr	r4, [pc, #48]	@ (800ea48 <__libc_init_array+0x44>)
 800ea18:	f000 f818 	bl	800ea4c <_init>
 800ea1c:	1b64      	subs	r4, r4, r5
 800ea1e:	10a4      	asrs	r4, r4, #2
 800ea20:	2600      	movs	r6, #0
 800ea22:	42a6      	cmp	r6, r4
 800ea24:	d105      	bne.n	800ea32 <__libc_init_array+0x2e>
 800ea26:	bd70      	pop	{r4, r5, r6, pc}
 800ea28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea2c:	4798      	blx	r3
 800ea2e:	3601      	adds	r6, #1
 800ea30:	e7ee      	b.n	800ea10 <__libc_init_array+0xc>
 800ea32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea36:	4798      	blx	r3
 800ea38:	3601      	adds	r6, #1
 800ea3a:	e7f2      	b.n	800ea22 <__libc_init_array+0x1e>
 800ea3c:	0800ede0 	.word	0x0800ede0
 800ea40:	0800ede0 	.word	0x0800ede0
 800ea44:	0800ede0 	.word	0x0800ede0
 800ea48:	0800ede4 	.word	0x0800ede4

0800ea4c <_init>:
 800ea4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4e:	bf00      	nop
 800ea50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea52:	bc08      	pop	{r3}
 800ea54:	469e      	mov	lr, r3
 800ea56:	4770      	bx	lr

0800ea58 <_fini>:
 800ea58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea5a:	bf00      	nop
 800ea5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5e:	bc08      	pop	{r3}
 800ea60:	469e      	mov	lr, r3
 800ea62:	4770      	bx	lr
