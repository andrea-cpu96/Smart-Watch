
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f69c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800f934  0800f934  00010934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcdc  0800fcdc  0001101c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcdc  0800fcdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fce4  0800fce4  0001101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fce4  0800fce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fce8  0800fce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  24000000  0800fcec  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00075e00  2400001c  0800fd08  0001101c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24075e1c  0800fd08  00011e1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241c8  00000000  00000000  0001104a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000473d  00000000  00000000  00035212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00039950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f7  00000000  00000000  0003b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044bef  00000000  00000000  0003c72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028eec  00000000  00000000  0008131e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a669a  00000000  00000000  000aa20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002508a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c00  00000000  00000000  002508e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  002574e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f91c 	.word	0x0800f91c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	0800f91c 	.word	0x0800f91c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b04      	subs	r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e02a      	b.n	8000762 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d11f      	bne.n	800075c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d115      	bne.n	800075c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	3302      	adds	r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d10b      	bne.n	800075c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3303      	adds	r3, #3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3303      	adds	r3, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <__AVI_SearchID+0x68>
            return i;  
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	e007      	b.n	800076c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8d0      	bhi.n	800070c <__AVI_SearchID+0x18>
  }
  return 0;    
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3303      	adds	r3, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	431a      	orrs	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3306      	adds	r3, #6
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3307      	adds	r3, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	4313      	orrs	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8bdb      	ldrh	r3, [r3, #30]
 80007e4:	f246 4263 	movw	r2, #25699	@ 0x6463
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d005      	beq.n	80007f8 <__AVI_GetStreamInfo+0x80>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8bdb      	ldrh	r3, [r3, #30]
 80007f0:	f247 7262 	movw	r2, #30562	@ 0x7762
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d101      	bne.n	80007fc <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80007fc:	230b      	movs	r3, #11
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <__AVI_Init+0x23c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d001      	beq.n	8000834 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 8000830:	2301      	movs	r3, #1
 8000832:	e170      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a84      	ldr	r2, [pc, #528]	@ (8000a4c <__AVI_Init+0x240>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d001      	beq.n	8000842 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800083e:	2302      	movs	r3, #2
 8000840:	e169      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330c      	adds	r3, #12
 8000846:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <__AVI_Init+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d001      	beq.n	800085a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000856:	2303      	movs	r3, #3
 8000858:	e15d      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a54 <__AVI_Init+0x248>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d001      	beq.n	8000868 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000864:	2304      	movs	r3, #4
 8000866:	e156      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a78      	ldr	r2, [pc, #480]	@ (8000a58 <__AVI_Init+0x24c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d001      	beq.n	8000880 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800087c:	2305      	movs	r3, #5
 800087e:	e14a      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	3308      	adds	r3, #8
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80008a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <__AVI_Init+0x244>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d001      	beq.n	80008ae <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e133      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <__AVI_Init+0x250>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 80008b8:	2306      	movs	r3, #6
 80008ba:	e12c      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	330c      	adds	r3, #12
 80008c0:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a66      	ldr	r2, [pc, #408]	@ (8000a60 <__AVI_Init+0x254>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d001      	beq.n	80008d0 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 80008cc:	2307      	movs	r3, #7
 80008ce:	e122      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	@ (8000a64 <__AVI_Init+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <__AVI_Init+0x25c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d001      	beq.n	80008e8 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 80008e4:	230a      	movs	r3, #10
 80008e6:	e116      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <__AVI_Init+0x260>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80008ee:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <__AVI_Init+0x264>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	3314      	adds	r3, #20
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a5b      	ldr	r2, [pc, #364]	@ (8000a74 <__AVI_Init+0x268>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d001      	beq.n	800090e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800090a:	2308      	movs	r3, #8
 800090c:	e103      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3308      	adds	r3, #8
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <__AVI_Init+0x244>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d009      	beq.n	800094c <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	839a      	strh	r2, [r3, #28]
 800094a:	e0b7      	b.n	8000abc <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <__AVI_Init+0x250>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d001      	beq.n	800095a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000956:	2306      	movs	r3, #6
 8000958:	e0dd      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <__AVI_Init+0x254>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d001      	beq.n	800096e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800096a:	2307      	movs	r3, #7
 800096c:	e0d3      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <__AVI_Init+0x26c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d001      	beq.n	800097c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000978:	230a      	movs	r3, #10
 800097a:	e0cc      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	3314      	adds	r3, #20
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <__AVI_Init+0x268>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d001      	beq.n	8000996 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 8000992:	2308      	movs	r3, #8
 8000994:	e0bf      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	895a      	ldrh	r2, [r3, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	891a      	ldrh	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	839a      	strh	r2, [r3, #28]
 80009ae:	e085      	b.n	8000abc <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <__AVI_Init+0x26c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 8080 	bne.w	8000abc <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <__AVI_Init+0x270>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <__AVI_Init+0x274>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3314      	adds	r3, #20
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <__AVI_Init+0x268>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d001      	beq.n	80009e2 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 80009de:	2308      	movs	r3, #8
 80009e0:	e099      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	895a      	ldrh	r2, [r3, #10]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	891a      	ldrh	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	3308      	adds	r3, #8
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <__AVI_Init+0x244>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d001      	beq.n	8000a18 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 8000a14:	2303      	movs	r3, #3
 8000a16:	e07e      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <__AVI_Init+0x250>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d001      	beq.n	8000a26 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 8000a22:	2306      	movs	r3, #6
 8000a24:	e077      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <__AVI_Init+0x254>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d001      	beq.n	8000a3a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 8000a36:	2307      	movs	r3, #7
 8000a38:	e06d      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <__AVI_Init+0x258>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 8000a44:	230a      	movs	r3, #10
 8000a46:	e066      	b.n	8000b16 <__AVI_Init+0x30a>
 8000a48:	46464952 	.word	0x46464952
 8000a4c:	20495641 	.word	0x20495641
 8000a50:	5453494c 	.word	0x5453494c
 8000a54:	6c726468 	.word	0x6c726468
 8000a58:	68697661 	.word	0x68697661
 8000a5c:	6c727473 	.word	0x6c727473
 8000a60:	68727473 	.word	0x68727473
 8000a64:	73646976 	.word	0x73646976
 8000a68:	47504a4d 	.word	0x47504a4d
 8000a6c:	0800f934 	.word	0x0800f934
 8000a70:	0800f94c 	.word	0x0800f94c
 8000a74:	66727473 	.word	0x66727473
 8000a78:	73647561 	.word	0x73647561
 8000a7c:	0800f93c 	.word	0x0800f93c
 8000a80:	0800f944 	.word	0x0800f944
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	3314      	adds	r3, #20
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <__AVI_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d001      	beq.n	8000a9e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	e03b      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <__AVI_Init+0x318>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d001      	beq.n	8000aac <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	e034      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <__AVI_Init+0x31c>)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac2:	f7ff fe17 	bl	80006f4 <__AVI_SearchID>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	e020      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01a      	beq.n	8000b12 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aee:	f7ff fe01 	bl	80006f4 <__AVI_SearchID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000afc:	230b      	movs	r3, #11
 8000afe:	e00a      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3304      	adds	r3, #4
 8000b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	@ 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	66727473 	.word	0x66727473
 8000b24:	47504a4d 	.word	0x47504a4d
 8000b28:	0800f954 	.word	0x0800f954

08000b2c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT *pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]

  UINT readSize= 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  

  // Initialize some parameters for the AVI file handler
  pavi->pVideoBuffer = pVideoBuffer;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38
  pavi->pAudioBuffer = pAudioBuffer;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
  
  // Go to the beginning of the file
  f_lseek(file, 0 );
 8000b56:	2100      	movs	r1, #0
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f00e fa5a 	bl	800f012 <f_lseek>
  
  // Fill the videoBuffer with the first 96kB of the file
  f_read(file, pavi->pVideoBuffer, VideoBufferSize, &readSize);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f00e f86b 	bl	800ec44 <f_read>

  // Manage the error if present
  if(readSize != VideoBufferSize)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d001      	beq.n	8000b7a <AVI_ParserInit+0x4e>
    return 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e013      	b.n	8000ba2 <AVI_ParserInit+0x76>
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe42 	bl	800080c <__AVI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <AVI_ParserInit+0x66>
    return 1;    
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e007      	b.n	8000ba2 <AVI_ParserInit+0x76>

  // Initialize other parameters for the AVI file handler
  pavi->FileSize= f_size(file);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 8000ba0:	2300      	movs	r3, #0

}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT *pavi, FIL *file)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]

  uint32_t  offset ;
  uint32_t readSize = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  

  if(pavi->CurrentImage== 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d124      	bne.n	8000c0c <AVI_GetFrame+0x60>
  {
    
	// Go to the beginning of the file
    f_lseek(file, 0 );
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f00e fa24 	bl	800f012 <f_lseek>

    // File the videoBuffer with the first 96kB of file data
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00e f834 	bl	800ec44 <f_read>
    
    // Check for "movi" tag
    offset = __AVI_SearchID(pavi->pVideoBuffer, pavi->VideoBufferSize, (uint8_t*)"movi");
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <AVI_GetFrame+0xec>)
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__AVI_SearchID>
 8000bec:	60f8      	str	r0, [r7, #12]

    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);	// 4 byte di offset per per via dell'ID movi
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdbc 	bl	8000778 <__AVI_GetStreamInfo>

    // Si sposta ai dati del primo frame
    f_lseek(file, offset + 12 );								// 12 byte di offset dovuti alle informazioni
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	330c      	adds	r3, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f00e fa03 	bl	800f012 <f_lseek>
    															// legate all'ID movi
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8bdb      	ldrh	r3, [r3, #30]
 8000c18:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d119      	bne.n	8000c54 <AVI_GetFrame+0xa8>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f103 0208 	add.w	r2, r3, #8
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f00e f807 	bl	800ec44 <f_read>
    pavi->VideoBufferSize =  pavi->FrameSize;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	4413      	add	r3, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fd94 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e01c      	b.n	8000c8e <AVI_GetFrame+0xe2>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	8bdb      	ldrh	r3, [r3, #30]
 8000c58:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d115      	bne.n	8000c8c <AVI_GetFrame+0xe0>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	f103 0208 	add.w	r2, r3, #8
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	6838      	ldr	r0, [r7, #0]
 8000c72:	f00d ffe7 	bl	800ec44 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fd78 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e000      	b.n	8000c8e <AVI_GetFrame+0xe2>
    
  }
  
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0800f954 	.word	0x0800f954

08000c9c <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d105      	bne.n	8000cb8 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <GC9A01_set_reset+0x30>)
 8000cb2:	f002 fb03 	bl	80032bc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 8000cb6:	e004      	b.n	8000cc2 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2120      	movs	r1, #32
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <GC9A01_set_reset+0x30>)
 8000cbe:	f002 fafd 	bl	80032bc <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	58022400 	.word	0x58022400

08000cd0 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	@ 0x40
 8000ce4:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <GC9A01_set_data_command+0x30>)
 8000ce6:	f002 fae9 	bl	80032bc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000cea:	e004      	b.n	8000cf6 <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2140      	movs	r1, #64	@ 0x40
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <GC9A01_set_data_command+0x30>)
 8000cf2:	f002 fae3 	bl	80032bc <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	58022400 	.word	0x58022400

08000d04 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <GC9A01_set_chip_select+0x30>)
 8000d1a:	f002 facf 	bl	80032bc <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000d1e:	e004      	b.n	8000d2a <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2102      	movs	r1, #2
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <GC9A01_set_chip_select+0x30>)
 8000d26:	f002 fac9 	bl	80032bc <HAL_GPIO_WritePin>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	58022800 	.word	0x58022800

08000d38 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ffc4 	bl	8000cd0 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ffdb 	bl	8000d04 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	2101      	movs	r1, #1
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fa92 	bl	800127c <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ffd3 	bl	8000d04 <GC9A01_set_chip_select>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ffad 	bl	8000cd0 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ffc4 	bl	8000d04 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4619      	mov	r1, r3
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 fa7a 	bl	800127c <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ffbb 	bl	8000d04 <GC9A01_set_chip_select>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	2101      	movs	r1, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffde 	bl	8000d66 <GC9A01_write_data>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000dbc:	202c      	movs	r0, #44	@ 0x2c
 8000dbe:	f7ff ffbb 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dc2:	6839      	ldr	r1, [r7, #0]
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffce 	bl	8000d66 <GC9A01_write_data>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000ddc:	203c      	movs	r0, #60	@ 0x3c
 8000dde:	f7ff ffab 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ffbe 	bl	8000d66 <GC9A01_write_data>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <GC9A01_init>:

void GC9A01_init(void) {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff ff84 	bl	8000d04 <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f001 fb79 	bl	80024f4 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff4a 	bl	8000c9c <GC9A01_set_reset>
    HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 fb73 	bl	80024f4 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff ff44 	bl	8000c9c <GC9A01_set_reset>
    HAL_Delay(120);
 8000e14:	2078      	movs	r0, #120	@ 0x78
 8000e16:	f001 fb6d 	bl	80024f4 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000e1a:	20ef      	movs	r0, #239	@ 0xef
 8000e1c:	f7ff ff8c 	bl	8000d38 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e20:	20eb      	movs	r0, #235	@ 0xeb
 8000e22:	f7ff ff89 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e26:	2014      	movs	r0, #20
 8000e28:	f7ff ffb5 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000e2c:	20fe      	movs	r0, #254	@ 0xfe
 8000e2e:	f7ff ff83 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000e32:	20ef      	movs	r0, #239	@ 0xef
 8000e34:	f7ff ff80 	bl	8000d38 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e38:	20eb      	movs	r0, #235	@ 0xeb
 8000e3a:	f7ff ff7d 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e3e:	2014      	movs	r0, #20
 8000e40:	f7ff ffa9 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000e44:	2084      	movs	r0, #132	@ 0x84
 8000e46:	f7ff ff77 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e4a:	2040      	movs	r0, #64	@ 0x40
 8000e4c:	f7ff ffa3 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000e50:	2085      	movs	r0, #133	@ 0x85
 8000e52:	f7ff ff71 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e56:	20ff      	movs	r0, #255	@ 0xff
 8000e58:	f7ff ff9d 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000e5c:	2086      	movs	r0, #134	@ 0x86
 8000e5e:	f7ff ff6b 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e62:	20ff      	movs	r0, #255	@ 0xff
 8000e64:	f7ff ff97 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000e68:	2087      	movs	r0, #135	@ 0x87
 8000e6a:	f7ff ff65 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e6e:	20ff      	movs	r0, #255	@ 0xff
 8000e70:	f7ff ff91 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000e74:	2088      	movs	r0, #136	@ 0x88
 8000e76:	f7ff ff5f 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f7ff ff8b 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000e80:	2089      	movs	r0, #137	@ 0x89
 8000e82:	f7ff ff59 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000e86:	2021      	movs	r0, #33	@ 0x21
 8000e88:	f7ff ff85 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000e8c:	208a      	movs	r0, #138	@ 0x8a
 8000e8e:	f7ff ff53 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff7f 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000e98:	208b      	movs	r0, #139	@ 0x8b
 8000e9a:	f7ff ff4d 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e9e:	2080      	movs	r0, #128	@ 0x80
 8000ea0:	f7ff ff79 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000ea4:	208c      	movs	r0, #140	@ 0x8c
 8000ea6:	f7ff ff47 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff ff73 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000eb0:	208d      	movs	r0, #141	@ 0x8d
 8000eb2:	f7ff ff41 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff ff6d 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000ebc:	208e      	movs	r0, #142	@ 0x8e
 8000ebe:	f7ff ff3b 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ec2:	20ff      	movs	r0, #255	@ 0xff
 8000ec4:	f7ff ff67 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000ec8:	208f      	movs	r0, #143	@ 0x8f
 8000eca:	f7ff ff35 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ece:	20ff      	movs	r0, #255	@ 0xff
 8000ed0:	f7ff ff61 	bl	8000d96 <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ed4:	20b6      	movs	r0, #182	@ 0xb6
 8000ed6:	f7ff ff2f 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff ff5b 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ff58 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000ee6:	2036      	movs	r0, #54	@ 0x36
 8000ee8:	f7ff ff26 	bl	8000d38 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000eec:	2048      	movs	r0, #72	@ 0x48
 8000eee:	f7ff ff52 	bl	8000d96 <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000ef2:	203a      	movs	r0, #58	@ 0x3a
 8000ef4:	f7ff ff20 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f7ff ff4c 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000efe:	2090      	movs	r0, #144	@ 0x90
 8000f00:	f7ff ff1a 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000f04:	2008      	movs	r0, #8
 8000f06:	f7ff ff46 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f0a:	2008      	movs	r0, #8
 8000f0c:	f7ff ff43 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f10:	2008      	movs	r0, #8
 8000f12:	f7ff ff40 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f16:	2008      	movs	r0, #8
 8000f18:	f7ff ff3d 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000f1c:	20bd      	movs	r0, #189	@ 0xbd
 8000f1e:	f7ff ff0b 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f22:	2006      	movs	r0, #6
 8000f24:	f7ff ff37 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000f28:	20bc      	movs	r0, #188	@ 0xbc
 8000f2a:	f7ff ff05 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff ff31 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000f34:	20ff      	movs	r0, #255	@ 0xff
 8000f36:	f7ff feff 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f3a:	2060      	movs	r0, #96	@ 0x60
 8000f3c:	f7ff ff2b 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff ff28 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000f46:	2004      	movs	r0, #4
 8000f48:	f7ff ff25 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000f4c:	20c3      	movs	r0, #195	@ 0xc3
 8000f4e:	f7ff fef3 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f52:	2013      	movs	r0, #19
 8000f54:	f7ff ff1f 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000f58:	20c4      	movs	r0, #196	@ 0xc4
 8000f5a:	f7ff feed 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f5e:	2013      	movs	r0, #19
 8000f60:	f7ff ff19 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000f64:	20c9      	movs	r0, #201	@ 0xc9
 8000f66:	f7ff fee7 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f6a:	2022      	movs	r0, #34	@ 0x22
 8000f6c:	f7ff ff13 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000f70:	20be      	movs	r0, #190	@ 0xbe
 8000f72:	f7ff fee1 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f76:	2011      	movs	r0, #17
 8000f78:	f7ff ff0d 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000f7c:	20e1      	movs	r0, #225	@ 0xe1
 8000f7e:	f7ff fedb 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f82:	2010      	movs	r0, #16
 8000f84:	f7ff ff07 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000f88:	200e      	movs	r0, #14
 8000f8a:	f7ff ff04 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000f8e:	20df      	movs	r0, #223	@ 0xdf
 8000f90:	f7ff fed2 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000f94:	2021      	movs	r0, #33	@ 0x21
 8000f96:	f7ff fefe 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f7ff fefb 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f7ff fef8 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000fa6:	20f0      	movs	r0, #240	@ 0xf0
 8000fa8:	f7ff fec6 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000fac:	2045      	movs	r0, #69	@ 0x45
 8000fae:	f7ff fef2 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000fb2:	2009      	movs	r0, #9
 8000fb4:	f7ff feef 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb8:	2008      	movs	r0, #8
 8000fba:	f7ff feec 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fbe:	2008      	movs	r0, #8
 8000fc0:	f7ff fee9 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000fc4:	2026      	movs	r0, #38	@ 0x26
 8000fc6:	f7ff fee6 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000fca:	202a      	movs	r0, #42	@ 0x2a
 8000fcc:	f7ff fee3 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000fd0:	20f1      	movs	r0, #241	@ 0xf1
 8000fd2:	f7ff feb1 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000fd6:	2043      	movs	r0, #67	@ 0x43
 8000fd8:	f7ff fedd 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000fdc:	2070      	movs	r0, #112	@ 0x70
 8000fde:	f7ff feda 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000fe2:	2072      	movs	r0, #114	@ 0x72
 8000fe4:	f7ff fed7 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000fe8:	2036      	movs	r0, #54	@ 0x36
 8000fea:	f7ff fed4 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000fee:	2037      	movs	r0, #55	@ 0x37
 8000ff0:	f7ff fed1 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000ff4:	206f      	movs	r0, #111	@ 0x6f
 8000ff6:	f7ff fece 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000ffa:	20f2      	movs	r0, #242	@ 0xf2
 8000ffc:	f7ff fe9c 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8001000:	2045      	movs	r0, #69	@ 0x45
 8001002:	f7ff fec8 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8001006:	2009      	movs	r0, #9
 8001008:	f7ff fec5 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800100c:	2008      	movs	r0, #8
 800100e:	f7ff fec2 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8001012:	2008      	movs	r0, #8
 8001014:	f7ff febf 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8001018:	2026      	movs	r0, #38	@ 0x26
 800101a:	f7ff febc 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800101e:	202a      	movs	r0, #42	@ 0x2a
 8001020:	f7ff feb9 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8001024:	20f3      	movs	r0, #243	@ 0xf3
 8001026:	f7ff fe87 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800102a:	2043      	movs	r0, #67	@ 0x43
 800102c:	f7ff feb3 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001030:	2070      	movs	r0, #112	@ 0x70
 8001032:	f7ff feb0 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8001036:	2072      	movs	r0, #114	@ 0x72
 8001038:	f7ff fead 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800103c:	2036      	movs	r0, #54	@ 0x36
 800103e:	f7ff feaa 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8001042:	2037      	movs	r0, #55	@ 0x37
 8001044:	f7ff fea7 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8001048:	206f      	movs	r0, #111	@ 0x6f
 800104a:	f7ff fea4 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800104e:	20ed      	movs	r0, #237	@ 0xed
 8001050:	f7ff fe72 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8001054:	201b      	movs	r0, #27
 8001056:	f7ff fe9e 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800105a:	200b      	movs	r0, #11
 800105c:	f7ff fe9b 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8001060:	20ae      	movs	r0, #174	@ 0xae
 8001062:	f7ff fe69 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8001066:	2077      	movs	r0, #119	@ 0x77
 8001068:	f7ff fe95 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800106c:	20cd      	movs	r0, #205	@ 0xcd
 800106e:	f7ff fe63 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8001072:	2063      	movs	r0, #99	@ 0x63
 8001074:	f7ff fe8f 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8001078:	2070      	movs	r0, #112	@ 0x70
 800107a:	f7ff fe5d 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fe89 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff fe86 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800108a:	2004      	movs	r0, #4
 800108c:	f7ff fe83 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8001090:	200e      	movs	r0, #14
 8001092:	f7ff fe80 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8001096:	200f      	movs	r0, #15
 8001098:	f7ff fe7d 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800109c:	2009      	movs	r0, #9
 800109e:	f7ff fe7a 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f7ff fe77 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80010a8:	2008      	movs	r0, #8
 80010aa:	f7ff fe74 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff fe71 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80010b4:	20e8      	movs	r0, #232	@ 0xe8
 80010b6:	f7ff fe3f 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80010ba:	2034      	movs	r0, #52	@ 0x34
 80010bc:	f7ff fe6b 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80010c0:	2062      	movs	r0, #98	@ 0x62
 80010c2:	f7ff fe39 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80010c6:	2018      	movs	r0, #24
 80010c8:	f7ff fe65 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80010cc:	200d      	movs	r0, #13
 80010ce:	f7ff fe62 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010d2:	2071      	movs	r0, #113	@ 0x71
 80010d4:	f7ff fe5f 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 80010d8:	20ed      	movs	r0, #237	@ 0xed
 80010da:	f7ff fe5c 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010de:	2070      	movs	r0, #112	@ 0x70
 80010e0:	f7ff fe59 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010e4:	2070      	movs	r0, #112	@ 0x70
 80010e6:	f7ff fe56 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80010ea:	2018      	movs	r0, #24
 80010ec:	f7ff fe53 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80010f0:	200f      	movs	r0, #15
 80010f2:	f7ff fe50 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010f6:	2071      	movs	r0, #113	@ 0x71
 80010f8:	f7ff fe4d 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 80010fc:	20ef      	movs	r0, #239	@ 0xef
 80010fe:	f7ff fe4a 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001102:	2070      	movs	r0, #112	@ 0x70
 8001104:	f7ff fe47 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001108:	2070      	movs	r0, #112	@ 0x70
 800110a:	f7ff fe44 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800110e:	2063      	movs	r0, #99	@ 0x63
 8001110:	f7ff fe12 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8001114:	2018      	movs	r0, #24
 8001116:	f7ff fe3e 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800111a:	2011      	movs	r0, #17
 800111c:	f7ff fe3b 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001120:	2071      	movs	r0, #113	@ 0x71
 8001122:	f7ff fe38 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001126:	20f1      	movs	r0, #241	@ 0xf1
 8001128:	f7ff fe35 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800112c:	2070      	movs	r0, #112	@ 0x70
 800112e:	f7ff fe32 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001132:	2070      	movs	r0, #112	@ 0x70
 8001134:	f7ff fe2f 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8001138:	2018      	movs	r0, #24
 800113a:	f7ff fe2c 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800113e:	2013      	movs	r0, #19
 8001140:	f7ff fe29 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001144:	2071      	movs	r0, #113	@ 0x71
 8001146:	f7ff fe26 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800114a:	20f3      	movs	r0, #243	@ 0xf3
 800114c:	f7ff fe23 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001150:	2070      	movs	r0, #112	@ 0x70
 8001152:	f7ff fe20 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001156:	2070      	movs	r0, #112	@ 0x70
 8001158:	f7ff fe1d 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800115c:	2064      	movs	r0, #100	@ 0x64
 800115e:	f7ff fdeb 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8001162:	2028      	movs	r0, #40	@ 0x28
 8001164:	f7ff fe17 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8001168:	2029      	movs	r0, #41	@ 0x29
 800116a:	f7ff fe14 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800116e:	20f1      	movs	r0, #241	@ 0xf1
 8001170:	f7ff fe11 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fe0e 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800117a:	20f1      	movs	r0, #241	@ 0xf1
 800117c:	f7ff fe0b 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fe08 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001186:	2007      	movs	r0, #7
 8001188:	f7ff fe05 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800118c:	2066      	movs	r0, #102	@ 0x66
 800118e:	f7ff fdd3 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8001192:	203c      	movs	r0, #60	@ 0x3c
 8001194:	f7ff fdff 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fdfc 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800119e:	20cd      	movs	r0, #205	@ 0xcd
 80011a0:	f7ff fdf9 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 80011a4:	2067      	movs	r0, #103	@ 0x67
 80011a6:	f7ff fdf6 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011aa:	2045      	movs	r0, #69	@ 0x45
 80011ac:	f7ff fdf3 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011b0:	2045      	movs	r0, #69	@ 0x45
 80011b2:	f7ff fdf0 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011b6:	2010      	movs	r0, #16
 80011b8:	f7ff fded 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fdea 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fde7 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fde4 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80011ce:	2067      	movs	r0, #103	@ 0x67
 80011d0:	f7ff fdb2 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fdde 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 80011da:	203c      	movs	r0, #60	@ 0x3c
 80011dc:	f7ff fddb 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fdd8 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fdd5 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fdd2 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fdcf 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 80011f8:	2054      	movs	r0, #84	@ 0x54
 80011fa:	f7ff fdcc 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011fe:	2010      	movs	r0, #16
 8001200:	f7ff fdc9 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8001204:	2032      	movs	r0, #50	@ 0x32
 8001206:	f7ff fdc6 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800120a:	2098      	movs	r0, #152	@ 0x98
 800120c:	f7ff fdc3 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8001210:	2074      	movs	r0, #116	@ 0x74
 8001212:	f7ff fd91 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8001216:	2010      	movs	r0, #16
 8001218:	f7ff fdbd 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800121c:	2085      	movs	r0, #133	@ 0x85
 800121e:	f7ff fdba 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8001222:	2080      	movs	r0, #128	@ 0x80
 8001224:	f7ff fdb7 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fdb4 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fdb1 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8001234:	204e      	movs	r0, #78	@ 0x4e
 8001236:	f7ff fdae 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fdab 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8001240:	2098      	movs	r0, #152	@ 0x98
 8001242:	f7ff fd79 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8001246:	203e      	movs	r0, #62	@ 0x3e
 8001248:	f7ff fda5 	bl	8000d96 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800124c:	2007      	movs	r0, #7
 800124e:	f7ff fda2 	bl	8000d96 <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8001252:	2035      	movs	r0, #53	@ 0x35
 8001254:	f7ff fd70 	bl	8000d38 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001258:	2021      	movs	r0, #33	@ 0x21
 800125a:	f7ff fd6d 	bl	8000d38 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800125e:	2011      	movs	r0, #17
 8001260:	f7ff fd6a 	bl	8000d38 <GC9A01_write_command>
    HAL_Delay(120);
 8001264:	2078      	movs	r0, #120	@ 0x78
 8001266:	f001 f945 	bl	80024f4 <HAL_Delay>
    GC9A01_write_command(0x29);
 800126a:	2029      	movs	r0, #41	@ 0x29
 800126c:	f7ff fd64 	bl	8000d38 <GC9A01_write_command>
    HAL_Delay(20);
 8001270:	2014      	movs	r0, #20
 8001272:	f001 f93f 	bl	80024f4 <HAL_Delay>
    
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4806      	ldr	r0, [pc, #24]	@ (80012ac <GC9A01_spi_tx+0x30>)
 8001292:	f009 f9c5 	bl	800a620 <HAL_SPI_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <GC9A01_spi_tx+0x34>)
 800129c:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <GC9A01_spi_tx+0x34>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
		return;

}
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24071cb8 	.word	0x24071cb8
 80012b0:	24000038 	.word	0x24000038

080012b4 <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, AVI_CONTEXT* AVI_Handel, uint32_t DestAddress)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]


  Jpeg_Decoding_End = 0;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <JPEG_DecodePolling+0x84>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

  startSourceAddress = AVI_Handel->pVideoBuffer;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ca:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <JPEG_DecodePolling+0x88>)
 80012cc:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <JPEG_DecodePolling+0x8c>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6013      	str	r3, [r2, #0]
  pVideoBuffer = AVI_Handel->pVideoBuffer;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001344 <JPEG_DecodePolling+0x90>)
 80012da:	6013      	str	r3, [r2, #0]

  // Read from JPG file and fill the input buffer

  memcpy(JPEG_InBuffer.DataBuffer, AVI_Handel->pVideoBuffer, AVI_Handel->VideoBufferSize*sizeof(uint8_t));
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <JPEG_DecodePolling+0x94>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e8:	461a      	mov	r2, r3
 80012ea:	f00e fb09 	bl	800f900 <memcpy>
  JPEG_InBuffer.DataBufferSize = AVI_Handel->VideoBufferSize;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <JPEG_DecodePolling+0x94>)
 80012f4:	6053      	str	r3, [r2, #4]

  // Increment the input buffer pointer
  pVideoBuffer += 0; 		//JPEG_InBuffer.DataBufferSize;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <JPEG_DecodePolling+0x90>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <JPEG_DecodePolling+0x90>)
 80012fc:	6013      	str	r3, [r2, #0]

  // Update the file Offset
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <JPEG_DecodePolling+0x94>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <JPEG_DecodePolling+0x98>)
 8001304:	6013      	str	r3, [r2, #0]

  //Start JPEG decoding with polling (Blocking) method
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT, 500);
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <JPEG_DecodePolling+0x94>)
 8001308:	6819      	ldr	r1, [r3, #0]
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <JPEG_DecodePolling+0x94>)
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <JPEG_DecodePolling+0x8c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f002 f92a 	bl	800357c <HAL_JPEG_Decode>

  Jpeg_Decoding_End = 1;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <JPEG_DecodePolling+0x84>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

  return 0;
 800132e:	2300      	movs	r3, #0

}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24005040 	.word	0x24005040
 800133c:	24005048 	.word	0x24005048
 8001340:	24005044 	.word	0x24005044
 8001344:	2400504c 	.word	0x2400504c
 8001348:	24000008 	.word	0x24000008
 800134c:	2400503c 	.word	0x2400503c

08001350 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  memcpy(JPEG_InBuffer.DataBuffer, pVideoBuffer, CHUNK_SIZE_IN*sizeof(uint8_t));

  Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
  HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
*/
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/
	if(JPEG->DOR == 0x80808080)
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_JPEG_DataReadyCallback+0x48>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8001390:	d106      	bne.n	80013a0 <HAL_JPEG_DataReadyCallback+0x24>
	{

		HAL_JPEG_Abort(hjpeg);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f002 f9ea 	bl	800376c <HAL_JPEG_Abort>
		Jpeg_Decoding_End = 1;
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_JPEG_DataReadyCallback+0x4c>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
		FrameBufferAddress += OutDataLength;
		HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT);

	}

}
 800139e:	e00d      	b.n	80013bc <HAL_JPEG_DataReadyCallback+0x40>
		FrameBufferAddress += OutDataLength;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_JPEG_DataReadyCallback+0x50>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_JPEG_DataReadyCallback+0x50>)
 80013aa:	6013      	str	r3, [r2, #0]
		HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT);
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_JPEG_DataReadyCallback+0x50>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f44f 32c8 	mov.w	r2, #102400	@ 0x19000
 80013b4:	4619      	mov	r1, r3
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f002 f9c6 	bl	8003748 <HAL_JPEG_ConfigOutputBuffer>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	52003000 	.word	0x52003000
 80013c8:	24005040 	.word	0x24005040
 80013cc:	24005044 	.word	0x24005044

080013d0 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  Jpeg_Decoding_End = 1;
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	24005040 	.word	0x24005040

080013f0 <lcd_init>:




void lcd_init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 80013f4:	f000 f94c 	bl	8001690 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 80013f8:	f00e f8bc 	bl	800f574 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 80013fc:	f7ff fcf9 	bl	8000df2 <GC9A01_init>

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <lcd_process>:


void lcd_process(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	//jpeg_demo();

	mjpeg_demo();
 8001408:	f000 f842 	bl	8001490 <mjpeg_demo>

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	4604      	mov	r4, r0
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4623      	mov	r3, r4
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	4603      	mov	r3, r0
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	807b      	strh	r3, [r7, #2]
 800142a:	4613      	mov	r3, r2
 800142c:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e022      	b.n	800147a <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	e016      	b.n	8001468 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	d108      	bne.n	8001454 <lcd_draw+0x44>
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	429a      	cmp	r2, r3
 8001448:	d104      	bne.n	8001454 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 800144a:	2102      	movs	r1, #2
 800144c:	6a38      	ldr	r0, [r7, #32]
 800144e:	f7ff fcb0 	bl	8000db2 <GC9A01_write>
 8001452:	e003      	b.n	800145c <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001454:	2102      	movs	r1, #2
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f7ff fcbb 	bl	8000dd2 <GC9A01_write_continue>

			}

			data += 2;
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	3302      	adds	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	883a      	ldrh	r2, [r7, #0]
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbe2      	blt.n	800143a <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4413      	add	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd6      	blt.n	8001434 <lcd_draw+0x24>

		}

	}

}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <mjpeg_demo>:
uint8_t JPEG_OutputBuffer_0[MAX_BUFFER_SIZE]; 					// RAW buffer 0
uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer


void mjpeg_demo(void)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af02      	add	r7, sp, #8

	uint32_t jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 8001496:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <mjpeg_demo+0x1c4>)
 8001498:	617b      	str	r3, [r7, #20]
	uint32_t FrameType = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]

	// Open the MJPEG avi file with read access
    if(f_open(&file, FILE_NAME, FA_READ) == FR_OK)
 800149e:	2201      	movs	r2, #1
 80014a0:	496d      	ldr	r1, [pc, #436]	@ (8001658 <mjpeg_demo+0x1c8>)
 80014a2:	486e      	ldr	r0, [pc, #440]	@ (800165c <mjpeg_demo+0x1cc>)
 80014a4:	f00d fa14 	bl	800e8d0 <f_open>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 80ce 	bne.w	800164c <mjpeg_demo+0x1bc>
    {

    	isfirstFrame = 1; // First frame flag
 80014b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001660 <mjpeg_demo+0x1d0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
    	FrameRate = 0;
 80014b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001664 <mjpeg_demo+0x1d4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]

    	// Parse the AVI file Header
    	if(AVI_ParserInit(&AVI_Handel, &file, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 80014bc:	2300      	movs	r3, #0
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	4b69      	ldr	r3, [pc, #420]	@ (8001668 <mjpeg_demo+0x1d8>)
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 80014c8:	4a68      	ldr	r2, [pc, #416]	@ (800166c <mjpeg_demo+0x1dc>)
 80014ca:	4964      	ldr	r1, [pc, #400]	@ (800165c <mjpeg_demo+0x1cc>)
 80014cc:	4868      	ldr	r0, [pc, #416]	@ (8001670 <mjpeg_demo+0x1e0>)
 80014ce:	f7ff fb2d 	bl	8000b2c <AVI_ParserInit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <mjpeg_demo+0x4c>
    		while(1);
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <mjpeg_demo+0x48>

    	// Get current tick to track the frame time
    	startTime = HAL_GetTick();
 80014dc:	f000 fffe 	bl	80024dc <HAL_GetTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a64      	ldr	r2, [pc, #400]	@ (8001674 <mjpeg_demo+0x1e4>)
 80014e4:	6013      	str	r3, [r2, #0]

    	do
    	{

    		FrameType = AVI_GetFrame(&AVI_Handel, &file);
 80014e6:	495d      	ldr	r1, [pc, #372]	@ (800165c <mjpeg_demo+0x1cc>)
 80014e8:	4861      	ldr	r0, [pc, #388]	@ (8001670 <mjpeg_demo+0x1e0>)
 80014ea:	f7ff fb5f 	bl	8000bac <AVI_GetFrame>
 80014ee:	6138      	str	r0, [r7, #16]

    		if(FrameType == AVI_VIDEO_FRAME)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d16f      	bne.n	80015d6 <mjpeg_demo+0x146>
    		{

    			AVI_Handel.CurrentImage++;
 80014f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001670 <mjpeg_demo+0x1e0>)
 80014f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a5c      	ldr	r2, [pc, #368]	@ (8001670 <mjpeg_demo+0x1e0>)
 80014fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

    			if(isfirstFrame == 1)
 8001500:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <mjpeg_demo+0x1d0>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d11f      	bne.n	8001548 <mjpeg_demo+0xb8>
    			{

    				// First time

    				isfirstFrame++;
 8001508:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <mjpeg_demo+0x1d0>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <mjpeg_demo+0x1d0>)
 8001512:	701a      	strb	r2, [r3, #0]

    				// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
    				JPEG_DecodePolling(&hjpeg, &AVI_Handel, (uint32_t)jpegOutDataAdreess);
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4956      	ldr	r1, [pc, #344]	@ (8001670 <mjpeg_demo+0x1e0>)
 8001518:	4857      	ldr	r0, [pc, #348]	@ (8001678 <mjpeg_demo+0x1e8>)
 800151a:	f7ff fecb 	bl	80012b4 <JPEG_DecodePolling>

    				// Wait till end of JPEG decoding
    				while(Jpeg_Decoding_End == 0);
 800151e:	bf00      	nop
 8001520:	4b56      	ldr	r3, [pc, #344]	@ (800167c <mjpeg_demo+0x1ec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0fb      	beq.n	8001520 <mjpeg_demo+0x90>


    				// Get JPEG Info
    				HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8001528:	4955      	ldr	r1, [pc, #340]	@ (8001680 <mjpeg_demo+0x1f0>)
 800152a:	4853      	ldr	r0, [pc, #332]	@ (8001678 <mjpeg_demo+0x1e8>)
 800152c:	f001 ff90 	bl	8003450 <HAL_JPEG_GetInfo>

    				// Initialize the DMA2D
    				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <mjpeg_demo+0x1f0>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <mjpeg_demo+0x1f0>)
 8001538:	6892      	ldr	r2, [r2, #8]
 800153a:	b291      	uxth	r1, r2
 800153c:	4a50      	ldr	r2, [pc, #320]	@ (8001680 <mjpeg_demo+0x1f0>)
 800153e:	6852      	ldr	r2, [r2, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f929 	bl	8001798 <DMA2D_Init>
 8001546:	e046      	b.n	80015d6 <mjpeg_demo+0x146>

        			if(AVI_Handel.CurrentImage >= 0)
        			{

        				// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
        				JPEG_DecodePolling(&hjpeg, &AVI_Handel, (uint32_t)jpegOutDataAdreess);
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4949      	ldr	r1, [pc, #292]	@ (8001670 <mjpeg_demo+0x1e0>)
 800154c:	484a      	ldr	r0, [pc, #296]	@ (8001678 <mjpeg_demo+0x1e8>)
 800154e:	f7ff feb1 	bl	80012b4 <JPEG_DecodePolling>

        				// Wait till end of JPEG decoding
        				while(Jpeg_Decoding_End == 0);
 8001552:	bf00      	nop
 8001554:	4b49      	ldr	r3, [pc, #292]	@ (800167c <mjpeg_demo+0x1ec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0fb      	beq.n	8001554 <mjpeg_demo+0xc4>


        				isfirstFrame++;
 800155c:	4b40      	ldr	r3, [pc, #256]	@ (8001660 <mjpeg_demo+0x1d0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <mjpeg_demo+0x1d0>)
 8001566:	701a      	strb	r2, [r3, #0]

        				// Copy the Decoded frame to the display frame buffer using the DMA2D
        				DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)DECODED_OutputBuffer, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001568:	6978      	ldr	r0, [r7, #20]
 800156a:	4b45      	ldr	r3, [pc, #276]	@ (8001680 <mjpeg_demo+0x1f0>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <mjpeg_demo+0x1f0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4943      	ldr	r1, [pc, #268]	@ (8001684 <mjpeg_demo+0x1f4>)
 8001578:	f000 f98a 	bl	8001890 <DMA2D_CopyBuffer>

        				// Change frame buffer
        				//jpegOutDataAdreess = (jpegOutDataAdreess == (uint32_t)JPEG_OutputBuffer_0) ? (uint32_t)JPEG_OutputBuffer_1 : (uint32_t)JPEG_OutputBuffer_0;
        				jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 800157c:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <mjpeg_demo+0x1c4>)
 800157e:	617b      	str	r3, [r7, #20]

//
        				uint16_t width = JPEG_Info.ImageWidth;
 8001580:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <mjpeg_demo+0x1f0>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	81fb      	strh	r3, [r7, #14]
        				uint16_t height = JPEG_Info.ImageHeight;
 8001586:	4b3e      	ldr	r3, [pc, #248]	@ (8001680 <mjpeg_demo+0x1f0>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	81bb      	strh	r3, [r7, #12]

        				uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001592:	2b00      	cmp	r3, #0
 8001594:	da00      	bge.n	8001598 <mjpeg_demo+0x108>
 8001596:	3301      	adds	r3, #1
 8001598:	105b      	asrs	r3, r3, #1
 800159a:	817b      	strh	r3, [r7, #10]
        				uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 800159c:	89bb      	ldrh	r3, [r7, #12]
 800159e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da00      	bge.n	80015a8 <mjpeg_demo+0x118>
 80015a6:	3301      	adds	r3, #1
 80015a8:	105b      	asrs	r3, r3, #1
 80015aa:	813b      	strh	r3, [r7, #8]

        				doubleFormat pOut;
        				pOut.u8Arr = DECODED_OutputBuffer;
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <mjpeg_demo+0x1f4>)
 80015ae:	607b      	str	r3, [r7, #4]

        				depth24To16(&pOut, width*height, 3);
 80015b0:	89fa      	ldrh	r2, [r7, #14]
 80015b2:	89bb      	ldrh	r3, [r7, #12]
 80015b4:	fb12 f303 	smulbb	r3, r2, r3
 80015b8:	b299      	uxth	r1, r3
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2203      	movs	r2, #3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f87c 	bl	80016bc <depth24To16>

        				// Display the image
        				lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	89bc      	ldrh	r4, [r7, #12]
 80015c8:	89fa      	ldrh	r2, [r7, #14]
 80015ca:	8939      	ldrh	r1, [r7, #8]
 80015cc:	8978      	ldrh	r0, [r7, #10]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4623      	mov	r3, r4
 80015d2:	f7ff ff1d 	bl	8001410 <lcd_draw>
    		}

#ifdef USE_FRAMERATE_REGULATION

              // Regulate the frame rate to the video native frame rate by inserting delays
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 80015d6:	f000 ff81 	bl	80024dc <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <mjpeg_demo+0x1e4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	3301      	adds	r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <mjpeg_demo+0x1d4>)
 80015ee:	701a      	strb	r2, [r3, #0]

              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <mjpeg_demo+0x1d4>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <mjpeg_demo+0x1e0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <mjpeg_demo+0x1f8>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <mjpeg_demo+0x1e0>)
 8001604:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	4299      	cmp	r1, r3
 800160c:	d20f      	bcs.n	800162e <mjpeg_demo+0x19e>
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <mjpeg_demo+0x1e0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <mjpeg_demo+0x1f8>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <mjpeg_demo+0x1e0>)
 800161c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4a10      	ldr	r2, [pc, #64]	@ (8001664 <mjpeg_demo+0x1d4>)
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f000 ff63 	bl	80024f4 <HAL_Delay>

#endif /* USE_FRAMERATE_REGULATION */

    	}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <mjpeg_demo+0x1e0>)
 8001630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <mjpeg_demo+0x1e0>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	f4ff af55 	bcc.w	80014e6 <mjpeg_demo+0x56>

    	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 800163c:	2132      	movs	r1, #50	@ 0x32
 800163e:	4813      	ldr	r0, [pc, #76]	@ (800168c <mjpeg_demo+0x1fc>)
 8001640:	f001 f927 	bl	8002892 <HAL_DMA2D_PollForTransfer>


      f_close(&file);
 8001644:	4805      	ldr	r0, [pc, #20]	@ (800165c <mjpeg_demo+0x1cc>)
 8001646:	f00d fcba 	bl	800efbe <f_close>

      while(1);

    }

}
 800164a:	e000      	b.n	800164e <mjpeg_demo+0x1be>
      while(1);
 800164c:	e7fe      	b.n	800164c <mjpeg_demo+0x1bc>
}
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	2401d57c 	.word	0x2401d57c
 8001658:	0800f95c 	.word	0x0800f95c
 800165c:	24005280 	.word	0x24005280
 8001660:	24000010 	.word	0x24000010
 8001664:	24005574 	.word	0x24005574
 8001668:	2401d57c 	.word	0x2401d57c
 800166c:	2400557c 	.word	0x2400557c
 8001670:	2400552c 	.word	0x2400552c
 8001674:	24005578 	.word	0x24005578
 8001678:	24071be4 	.word	0x24071be4
 800167c:	24005040 	.word	0x24005040
 8001680:	24005518 	.word	0x24005518
 8001684:	2404787c 	.word	0x2404787c
 8001688:	10624dd3 	.word	0x10624dd3
 800168c:	240054b0 	.word	0x240054b0

08001690 <sd_init>:


// SD

static void sd_init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8001694:	2201      	movs	r2, #1
 8001696:	4905      	ldr	r1, [pc, #20]	@ (80016ac <sd_init+0x1c>)
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <sd_init+0x20>)
 800169a:	f00d f8d3 	bl	800e844 <f_mount>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <sd_init+0x18>
    	sd_error_handler();
 80016a4:	f000 f806 	bl	80016b4 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	0800f968 	.word	0x0800f968
 80016b0:	24005050 	.word	0x24005050

080016b4 <sd_error_handler>:


static void sd_error_handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

	while(1);
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <sd_error_handler+0x4>

080016bc <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e054      	b.n	800177c <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	787a      	ldrb	r2, [r7, #1]
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	fb01 f202 	mul.w	r2, r1, r2
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	68f9      	ldr	r1, [r7, #12]
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	3302      	adds	r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800170c:	7a7b      	ldrb	r3, [r7, #9]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <depth24To16+0xd8>)
 8001714:	4013      	ands	r3, r2
 8001716:	b21a      	sxth	r2, r3
 8001718:	7abb      	ldrb	r3, [r7, #10]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	b21b      	sxth	r3, r3
 800171e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b219      	sxth	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	b28a      	uxth	r2, r1
 8001740:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	440b      	add	r3, r1
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b219      	sxth	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	b28a      	uxth	r2, r1
 8001774:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	dba6      	blt.n	80016d2 <depth24To16+0x16>

	}

}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	fffff800 	.word	0xfffff800

08001798 <DMA2D_Init>:
  * @param  xSize: image width
  * @param  ysize: image Height
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	603a      	str	r2, [r7, #0]
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	460b      	mov	r3, r1
 80017a6:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 80017a8:	2302      	movs	r3, #2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]


  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10d      	bne.n	80017d2 <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 80017b6:	2302      	movs	r3, #2
 80017b8:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d025      	beq.n	8001814 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f1c3 0310 	rsb	r3, r3, #16
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	e020      	b.n	8001814 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d014      	beq.n	8001814 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f1c3 0308 	rsb	r3, r3, #8
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	e00f      	b.n	8001814 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d10c      	bne.n	8001814 <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 80017fa:	2301      	movs	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f1c3 0310 	rsb	r3, r3, #16
 8001812:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001814:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <DMA2D_Init+0xf0>)
 8001816:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800181a:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <DMA2D_Init+0xf0>)
 800181e:	2201      	movs	r2, #1
 8001820:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001828:	461a      	mov	r2, r3
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <DMA2D_Init+0xf0>)
 800182c:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <DMA2D_Init+0xf0>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <DMA2D_Init+0xf0>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <DMA2D_Init+0xf0>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <DMA2D_Init+0xf0>)
 8001842:	2200      	movs	r2, #0
 8001844:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <DMA2D_Init+0xf0>)
 8001848:	22ff      	movs	r2, #255	@ 0xff
 800184a:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <DMA2D_Init+0xf0>)
 800184e:	220b      	movs	r2, #11
 8001850:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001852:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <DMA2D_Init+0xf0>)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <DMA2D_Init+0xf0>)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <DMA2D_Init+0xf0>)
 8001860:	2200      	movs	r2, #0
 8001862:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <DMA2D_Init+0xf0>)
 8001866:	2200      	movs	r2, #0
 8001868:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <DMA2D_Init+0xf0>)
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <DMA2D_Init+0xf4>)
 800186e:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <DMA2D_Init+0xf0>)
 8001872:	f000 ff7f 	bl	8002774 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001876:	2101      	movs	r1, #1
 8001878:	4803      	ldr	r0, [pc, #12]	@ (8001888 <DMA2D_Init+0xf0>)
 800187a:	f001 fa03 	bl	8002c84 <HAL_DMA2D_ConfigLayer>

}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	240054b0 	.word	0x240054b0
 800188c:	52001000 	.word	0x52001000

08001890 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t xsize, uint16_t ysize)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	460b      	mov	r3, r1
 80018a0:	80fb      	strh	r3, [r7, #6]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]


  uint16_t x =  ( (LCD_WIDTH - xsize) / 2 );
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da00      	bge.n	80018b6 <DMA2D_CopyBuffer+0x26>
 80018b4:	3301      	adds	r3, #1
 80018b6:	105b      	asrs	r3, r3, #1
 80018b8:	827b      	strh	r3, [r7, #18]
  uint16_t y = ( (LCD_HEIGHT - ysize) / 2 );
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <DMA2D_CopyBuffer+0x36>
 80018c4:	3301      	adds	r3, #1
 80018c6:	105b      	asrs	r3, r3, #1
 80018c8:	823b      	strh	r3, [r7, #16]

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 80018ca:	8a3a      	ldrh	r2, [r7, #16]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	461a      	mov	r2, r3
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <DMA2D_CopyBuffer+0x78>)
 80018f2:	f000 ffa3 	bl	800283c <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80018f6:	2119      	movs	r1, #25
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <DMA2D_CopyBuffer+0x78>)
 80018fa:	f000 ffca 	bl	8002892 <HAL_DMA2D_PollForTransfer>

}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	240054b0 	.word	0x240054b0

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001916:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001918:	bf00      	nop
 800191a:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <main+0xb8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <main+0x24>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dcf4      	bgt.n	800191a <main+0xe>
  if ( timeout < 0 )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da01      	bge.n	800193a <main+0x2e>
  {
  Error_Handler();
 8001936:	f000 fad3 	bl	8001ee0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f000 fd49 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f843 	bl	80019c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001942:	f000 f8c5 	bl	8001ad0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <main+0xb8>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <main+0xb8>)
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <main+0xb8>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001964:	2000      	movs	r0, #0
 8001966:	f001 fcc3 	bl	80032f0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800196a:	2100      	movs	r1, #0
 800196c:	2000      	movs	r0, #0
 800196e:	f001 fcd9 	bl	8003324 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001976:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001978:	bf00      	nop
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <main+0xb8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <main+0x84>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dcf4      	bgt.n	800197a <main+0x6e>
if ( timeout < 0 )
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da01      	bge.n	800199a <main+0x8e>
{
Error_Handler();
 8001996:	f000 faa3 	bl	8001ee0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199a:	f000 f9db 	bl	8001d54 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800199e:	f000 f8c7 	bl	8001b30 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 80019a2:	f000 f913 	bl	8001bcc <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 80019a6:	f000 f935 	bl	8001c14 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80019aa:	f000 f987 	bl	8001cbc <MX_USART1_UART_Init>
  MX_JPEG_Init();
 80019ae:	f000 f8f9 	bl	8001ba4 <MX_JPEG_Init>
  MX_FATFS_Init();
 80019b2:	f00a ffb3 	bl	800c91c <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 80019b6:	f00b fa01 	bl	800cdbc <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80019ba:	f7ff fd19 	bl	80013f0 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 80019be:	f7ff fd21 	bl	8001404 <lcd_process>
 80019c2:	e7fc      	b.n	80019be <main+0xb2>
 80019c4:	58024400 	.word	0x58024400

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09c      	sub	sp, #112	@ 0x70
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d2:	224c      	movs	r2, #76	@ 0x4c
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00d ff66 	bl	800f8a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2220      	movs	r2, #32
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00d ff60 	bl	800f8a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80019e8:	2004      	movs	r0, #4
 80019ea:	f003 faa9 	bl	8004f40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <SystemClock_Config+0x100>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	4a34      	ldr	r2, [pc, #208]	@ (8001ac8 <SystemClock_Config+0x100>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019fe:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <SystemClock_Config+0x100>)
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	4b30      	ldr	r3, [pc, #192]	@ (8001acc <SystemClock_Config+0x104>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001acc <SystemClock_Config+0x104>)
 8001a0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <SystemClock_Config+0x104>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a20:	bf00      	nop
 8001a22:	4b2a      	ldr	r3, [pc, #168]	@ (8001acc <SystemClock_Config+0x104>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a2e:	d1f8      	bne.n	8001a22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a30:	230a      	movs	r3, #10
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a38:	2340      	movs	r3, #64	@ 0x40
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a40:	2302      	movs	r3, #2
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a50:	2302      	movs	r3, #2
 8001a52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fac0 	bl	8004ff4 <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a7a:	f000 fa31 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7e:	233f      	movs	r3, #63	@ 0x3f
 8001a80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	2303      	movs	r3, #3
 8001a84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a8e:	2340      	movs	r3, #64	@ 0x40
 8001a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a92:	2340      	movs	r3, #64	@ 0x40
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a9c:	2340      	movs	r3, #64	@ 0x40
 8001a9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 feff 	bl	80058a8 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001ab0:	f000 fa16 	bl	8001ee0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001ab4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2000      	movs	r0, #0
 8001abc:	f004 f8aa 	bl	8005c14 <HAL_RCC_MCOConfig>
}
 8001ac0:	bf00      	nop
 8001ac2:	3770      	adds	r7, #112	@ 0x70
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58000400 	.word	0x58000400
 8001acc:	58024800 	.word	0x58024800

08001ad0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0b2      	sub	sp, #200	@ 0xc8
 8001ad4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	22c8      	movs	r2, #200	@ 0xc8
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00d fee3 	bl	800f8a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001af2:	2309      	movs	r3, #9
 8001af4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001b06:	2320      	movs	r3, #32
 8001b08:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001b0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fabb 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001b24:	f000 f9dc 	bl	8001ee0 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	37c8      	adds	r7, #200	@ 0xc8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <MX_DMA2D_Init+0x70>)
 8001b38:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b78:	f000 fdfc 	bl	8002774 <HAL_DMA2D_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b82:	f000 f9ad 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b86:	2101      	movs	r1, #1
 8001b88:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <MX_DMA2D_Init+0x6c>)
 8001b8a:	f001 f87b 	bl	8002c84 <HAL_DMA2D_ConfigLayer>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001b94:	f000 f9a4 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	24071b7c 	.word	0x24071b7c
 8001ba0:	52001000 	.word	0x52001000

08001ba4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_JPEG_Init+0x20>)
 8001baa:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <MX_JPEG_Init+0x24>)
 8001bac:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_JPEG_Init+0x20>)
 8001bb0:	f001 fbcc 	bl	800334c <HAL_JPEG_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001bba:	f000 f991 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24071be4 	.word	0x24071be4
 8001bc8:	52003000 	.word	0x52003000

08001bcc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <MX_SDMMC1_SD_Init+0x44>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001be4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001be8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_SDMMC1_SD_Init+0x40>)
 8001bf8:	f006 ff8a 	bl	8008b10 <HAL_SD_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001c02:	f000 f96d 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	24071c3c 	.word	0x24071c3c
 8001c10:	52007000 	.word	0x52007000

08001c14 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c18:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c1a:	4a27      	ldr	r2, [pc, #156]	@ (8001cb8 <MX_SPI5_Init+0xa4>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c24:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c2e:	2207      	movs	r2, #7
 8001c30:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c44:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c82:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_SPI5_Init+0xa0>)
 8001ca2:	f008 fb99 	bl	800a3d8 <HAL_SPI_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001cac:	f000 f918 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24071cb8 	.word	0x24071cb8
 8001cb8:	40015000 	.word	0x40015000

08001cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cc2:	4a23      	ldr	r2, [pc, #140]	@ (8001d50 <MX_USART1_UART_Init+0x94>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d04:	4811      	ldr	r0, [pc, #68]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001d06:	f008 ff62 	bl	800abce <HAL_UART_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d10:	f000 f8e6 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001d18:	f009 ff6b 	bl	800bbf2 <HAL_UARTEx_SetTxFifoThreshold>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d22:	f000 f8dd 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001d2a:	f009 ffa0 	bl	800bc6e <HAL_UARTEx_SetRxFifoThreshold>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f000 f8d4 	bl	8001ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <MX_USART1_UART_Init+0x90>)
 8001d3a:	f009 ff21 	bl	800bb80 <HAL_UARTEx_DisableFifoMode>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d44:	f000 f8cc 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	24071d40 	.word	0x24071d40
 8001d50:	40011000 	.word	0x40011000

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b58      	ldr	r3, [pc, #352]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d88:	4b50      	ldr	r3, [pc, #320]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	4a4f      	ldr	r2, [pc, #316]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d98:	4b4c      	ldr	r3, [pc, #304]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b49      	ldr	r3, [pc, #292]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	4a47      	ldr	r2, [pc, #284]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db6:	4b45      	ldr	r3, [pc, #276]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dc4:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	4a40      	ldr	r2, [pc, #256]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	4a38      	ldr	r2, [pc, #224]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df2:	4b36      	ldr	r3, [pc, #216]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e00:	4b32      	ldr	r3, [pc, #200]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	4a29      	ldr	r2, [pc, #164]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <MX_GPIO_Init+0x178>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4823      	ldr	r0, [pc, #140]	@ (8001ed0 <MX_GPIO_Init+0x17c>)
 8001e42:	f001 fa3b 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2161      	movs	r1, #97	@ 0x61
 8001e4a:	4822      	ldr	r0, [pc, #136]	@ (8001ed4 <MX_GPIO_Init+0x180>)
 8001e4c:	f001 fa36 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	481c      	ldr	r0, [pc, #112]	@ (8001ed8 <MX_GPIO_Init+0x184>)
 8001e66:	f001 f861 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	4815      	ldr	r0, [pc, #84]	@ (8001edc <MX_GPIO_Init+0x188>)
 8001e88:	f001 f850 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <MX_GPIO_Init+0x17c>)
 8001ea4:	f001 f842 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001ea8:	2361      	movs	r3, #97	@ 0x61
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_GPIO_Init+0x180>)
 8001ec0:	f001 f834 	bl	8002f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	@ 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	58022800 	.word	0x58022800
 8001ed4:	58022400 	.word	0x58022400
 8001ed8:	58022000 	.word	0x58022000
 8001edc:	58020000 	.word	0x58020000

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <Error_Handler+0x8>

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_MspInit+0x30>)
 8001ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ef8:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <HAL_MspInit+0x30>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_MspInit+0x30>)
 8001f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	58024400 	.word	0x58024400

08001f20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <HAL_DMA2D_MspInit+0x48>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d116      	bne.n	8001f60 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_DMA2D_MspInit+0x4c>)
 8001f34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f38:	4a0c      	ldr	r2, [pc, #48]	@ (8001f6c <HAL_DMA2D_MspInit+0x4c>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_DMA2D_MspInit+0x4c>)
 8001f44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	205a      	movs	r0, #90	@ 0x5a
 8001f56:	f000 fbd8 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f5a:	205a      	movs	r0, #90	@ 0x5a
 8001f5c:	f000 fbef 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	52001000 	.word	0x52001000
 8001f6c:	58024400 	.word	0x58024400

08001f70 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <HAL_JPEG_MspInit+0x48>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d116      	bne.n	8001fb0 <HAL_JPEG_MspInit+0x40>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_JPEG_MspInit+0x4c>)
 8001f84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f88:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <HAL_JPEG_MspInit+0x4c>)
 8001f8a:	f043 0320 	orr.w	r3, r3, #32
 8001f8e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_JPEG_MspInit+0x4c>)
 8001f94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2079      	movs	r0, #121	@ 0x79
 8001fa6:	f000 fbb0 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001faa:	2079      	movs	r0, #121	@ 0x79
 8001fac:	f000 fbc7 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	52003000 	.word	0x52003000
 8001fbc:	58024400 	.word	0x58024400

08001fc0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0be      	sub	sp, #248	@ 0xf8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	22c8      	movs	r2, #200	@ 0xc8
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00d fc61 	bl	800f8a8 <memset>
  if(hsd->Instance==SDMMC1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3c      	ldr	r2, [pc, #240]	@ (80020dc <HAL_SD_MspInit+0x11c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d171      	bne.n	80020d4 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001ff0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f845 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002010:	f7ff ff66 	bl	8001ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002014:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002016:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800201a:	4a31      	ldr	r2, [pc, #196]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002024:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002026:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800202a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002038:	4a29      	ldr	r2, [pc, #164]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002042:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002050:	4b23      	ldr	r3, [pc, #140]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	4a22      	ldr	r2, [pc, #136]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <HAL_SD_MspInit+0x120>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 800206e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002088:	230c      	movs	r3, #12
 800208a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002092:	4619      	mov	r1, r3
 8002094:	4813      	ldr	r0, [pc, #76]	@ (80020e4 <HAL_SD_MspInit+0x124>)
 8002096:	f000 ff49 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800209a:	2304      	movs	r3, #4
 800209c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80020b2:	230c      	movs	r3, #12
 80020b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020bc:	4619      	mov	r1, r3
 80020be:	480a      	ldr	r0, [pc, #40]	@ (80020e8 <HAL_SD_MspInit+0x128>)
 80020c0:	f000 ff34 	bl	8002f2c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2031      	movs	r0, #49	@ 0x31
 80020ca:	f000 fb1e 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80020ce:	2031      	movs	r0, #49	@ 0x31
 80020d0:	f000 fb35 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80020d4:	bf00      	nop
 80020d6:	37f8      	adds	r7, #248	@ 0xf8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	52007000 	.word	0x52007000
 80020e0:	58024400 	.word	0x58024400
 80020e4:	58020800 	.word	0x58020800
 80020e8:	58020c00 	.word	0x58020c00

080020ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0be      	sub	sp, #248	@ 0xf8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	22c8      	movs	r2, #200	@ 0xc8
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f00d fbcb 	bl	800f8a8 <memset>
  if(hspi->Instance==SPI5)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a39      	ldr	r2, [pc, #228]	@ (80021fc <HAL_SPI_MspInit+0x110>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d16a      	bne.n	80021f2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800211c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	4618      	mov	r0, r3
 8002134:	f003 ffae 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800213e:	f7ff fecf 	bl	8001ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002142:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002148:	4a2d      	ldr	r2, [pc, #180]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 800214a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800214e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002152:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002160:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002166:	4a26      	ldr	r2, [pc, #152]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002168:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002170:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <HAL_SPI_MspInit+0x114>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021b4:	2305      	movs	r3, #5
 80021b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021be:	4619      	mov	r1, r3
 80021c0:	4810      	ldr	r0, [pc, #64]	@ (8002204 <HAL_SPI_MspInit+0x118>)
 80021c2:	f000 feb3 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80021c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021e0:	2305      	movs	r3, #5
 80021e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4806      	ldr	r0, [pc, #24]	@ (8002208 <HAL_SPI_MspInit+0x11c>)
 80021ee:	f000 fe9d 	bl	8002f2c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80021f2:	bf00      	nop
 80021f4:	37f8      	adds	r7, #248	@ 0xf8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40015000 	.word	0x40015000
 8002200:	58024400 	.word	0x58024400
 8002204:	58022800 	.word	0x58022800
 8002208:	58022400 	.word	0x58022400

0800220c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0bc      	sub	sp, #240	@ 0xf0
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	22c8      	movs	r2, #200	@ 0xc8
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f00d fb3b 	bl	800f8a8 <memset>
  if(huart->Instance==USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <HAL_UART_MspInit+0xc8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d146      	bne.n	80022ca <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800223c:	f04f 0201 	mov.w	r2, #1
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	4618      	mov	r0, r3
 8002254:	f003 ff1e 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800225e:	f7ff fe3f 	bl	8001ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002262:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <HAL_UART_MspInit+0xcc>)
 8002264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002268:	4a1b      	ldr	r2, [pc, #108]	@ (80022d8 <HAL_UART_MspInit+0xcc>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_UART_MspInit+0xcc>)
 8002274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <HAL_UART_MspInit+0xcc>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002286:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <HAL_UART_MspInit+0xcc>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_UART_MspInit+0xcc>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800229e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b8:	2307      	movs	r3, #7
 80022ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	@ (80022dc <HAL_UART_MspInit+0xd0>)
 80022c6:	f000 fe31 	bl	8002f2c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80022ca:	bf00      	nop
 80022cc:	37f0      	adds	r7, #240	@ 0xf0
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40011000 	.word	0x40011000
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58020000 	.word	0x58020000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <NMI_Handler+0x4>

080022e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <MemManage_Handler+0x4>

080022f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <UsageFault_Handler+0x4>

08002308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002336:	f000 f8bd 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <SDMMC1_IRQHandler+0x10>)
 8002346:	f006 fe53 	bl	8008ff0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	24071c3c 	.word	0x24071c3c

08002354 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <DMA2D_IRQHandler+0x10>)
 800235a:	f000 fb83 	bl	8002a64 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	24071b7c 	.word	0x24071b7c

08002368 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <JPEG_IRQHandler+0x10>)
 800236e:	f001 faaf 	bl	80038d0 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	24071be4 	.word	0x24071be4

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002380:	f7fe f922 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f00d fa85 	bl	800f8b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7ff faad 	bl	800190c <main>
  bx  lr
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023bc:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80023c0:	0800fcec 	.word	0x0800fcec
  ldr r2, =_sbss
 80023c4:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 80023c8:	24075e1c 	.word	0x24075e1c

080023cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC3_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d6:	2003      	movs	r0, #3
 80023d8:	f000 f98c 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023dc:	f003 fc84 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_Init+0x68>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	4913      	ldr	r1, [pc, #76]	@ (800243c <HAL_Init+0x6c>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_Init+0x68>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a0e      	ldr	r2, [pc, #56]	@ (800243c <HAL_Init+0x6c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <HAL_Init+0x70>)
 8002412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002414:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_Init+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241a:	2000      	movs	r0, #0
 800241c:	f000 f814 	bl	8002448 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e002      	b.n	8002430 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800242a:	f7ff fd5f 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58024400 	.word	0x58024400
 800243c:	0800f9b0 	.word	0x0800f9b0
 8002440:	24000004 	.word	0x24000004
 8002444:	24000000 	.word	0x24000000

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_InitTick+0x60>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e021      	b.n	80024a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_InitTick+0x64>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_InitTick+0x60>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f971 	bl	800275a <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f93b 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <HAL_InitTick+0x68>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	24000018 	.word	0x24000018
 80024ac:	24000000 	.word	0x24000000
 80024b0:	24000014 	.word	0x24000014

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	24000018 	.word	0x24000018
 80024d8:	24071dd4 	.word	0x24071dd4

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	24071dd4 	.word	0x24071dd4

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	24000018 	.word	0x24000018

0800253c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <HAL_GetREVID+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1b      	lsrs	r3, r3, #16
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	5c001000 	.word	0x5c001000

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff40 	bl	800259c <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff90 	bl	8002648 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5f 	bl	80025f4 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff33 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa4 	bl	80026b0 <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e04f      	b.n	8002826 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fbc0 	bl	8001f20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_DMA2D_Init+0xbc>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6851      	ldr	r1, [r2, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	69d2      	ldr	r2, [r2, #28]
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HAL_DMA2D_Init+0xc0>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6891      	ldr	r1, [r2, #8]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6992      	ldr	r2, [r2, #24]
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <HAL_DMA2D_Init+0xc4>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68d1      	ldr	r1, [r2, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	051a      	lsls	r2, r3, #20
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	055b      	lsls	r3, r3, #21
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	fff8ffbf 	.word	0xfff8ffbf
 8002834:	fffffef8 	.word	0xfffffef8
 8002838:	ffff0000 	.word	0xffff0000

0800283c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_DMA2D_Start+0x1c>
 8002854:	2302      	movs	r3, #2
 8002856:	e018      	b.n	800288a <HAL_DMA2D_Start+0x4e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fab4 	bl	8002de0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d056      	beq.n	800295c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80028ae:	f7ff fe15 	bl	80024dc <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80028b4:	e04b      	b.n	800294e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d023      	beq.n	8002910 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2221      	movs	r2, #33	@ 0x21
 80028fa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2204      	movs	r2, #4
 8002900:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0a5      	b.n	8002a5c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d01a      	beq.n	800294e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002918:	f7ff fde0 	bl	80024dc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d302      	bcc.n	800292e <HAL_DMA2D_PollForTransfer+0x9c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002932:	f043 0220 	orr.w	r2, r3, #32
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2203      	movs	r2, #3
 800293e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e086      	b.n	8002a5c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ac      	beq.n	80028b6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d061      	beq.n	8002a42 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800297e:	f7ff fdad 	bl	80024dc <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002984:	e056      	b.n	8002a34 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02e      	beq.n	80029f6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029a6:	f043 0204 	orr.w	r2, r3, #4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029bc:	f043 0202 	orr.w	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2229      	movs	r2, #41	@ 0x29
 80029e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e032      	b.n	8002a5c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d01a      	beq.n	8002a34 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7ff fd6d 	bl	80024dc <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <HAL_DMA2D_PollForTransfer+0x182>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e013      	b.n	8002a5c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0a1      	beq.n	8002986 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2212      	movs	r2, #18
 8002a48:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d026      	beq.n	8002ad4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d021      	beq.n	8002ad4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d026      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d021      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002af6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d026      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d021      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2208      	movs	r2, #8
 8002b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2204      	movs	r2, #4
 8002bae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f853 	bl	8002c5c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d024      	beq.n	8002c0a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01f      	beq.n	8002c0a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01f      	beq.n	8002c54 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01a      	beq.n	8002c54 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2210      	movs	r2, #16
 8002c34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f80e 	bl	8002c70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DMA2D_ConfigLayer+0x24>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e092      	b.n	8002dce <HAL_DMA2D_ConfigLayer+0x14a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	3328      	adds	r3, #40	@ 0x28
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cdc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ddc <HAL_DMA2D_ConfigLayer+0x158>)
 8002cea:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b0a      	cmp	r3, #10
 8002cf2:	d003      	beq.n	8002cfc <HAL_DMA2D_ConfigLayer+0x78>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e005      	b.n	8002d18 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d120      	bne.n	8002d60 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	ea02 0103 	and.w	r1, r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b0a      	cmp	r3, #10
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA2D_ConfigLayer+0xcc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	d135      	bne.n	8002dbc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5e:	e02d      	b.n	8002dbc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b0b      	cmp	r3, #11
 8002d66:	d109      	bne.n	8002d7c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	049b      	lsls	r3, r3, #18
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002d7a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	ea02 0103 	and.w	r1, r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d003      	beq.n	8002dae <HAL_DMA2D_ConfigLayer+0x12a>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b09      	cmp	r3, #9
 8002dac:	d106      	bne.n	8002dbc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002dba:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	ff33000f 	.word	0xff33000f

08002de0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b08b      	sub	sp, #44	@ 0x2c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	041a      	lsls	r2, r3, #16
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e18:	d174      	bne.n	8002f04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002e30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e053      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d106      	bne.n	8002e68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	e048      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d111      	bne.n	8002e94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	0cdb      	lsrs	r3, r3, #19
 8002e74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	0a9b      	lsrs	r3, r3, #10
 8002e7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	02db      	lsls	r3, r3, #11
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	e032      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d117      	bne.n	8002ecc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	0fdb      	lsrs	r3, r3, #31
 8002ea0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	0cdb      	lsrs	r3, r3, #19
 8002ea6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	03db      	lsls	r3, r3, #15
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	e016      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	0f1b      	lsrs	r3, r3, #28
 8002ed0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	0d1b      	lsrs	r3, r3, #20
 8002ed6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	0b1b      	lsrs	r3, r3, #12
 8002edc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	011a      	lsls	r2, r3, #4
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f02:	e00d      	b.n	8002f20 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f0c:	d104      	bne.n	8002f18 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	615a      	str	r2, [r3, #20]
}
 8002f16:	e003      	b.n	8002f20 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
}
 8002f20:	bf00      	nop
 8002f22:	372c      	adds	r7, #44	@ 0x2c
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f3a:	4b89      	ldr	r3, [pc, #548]	@ (8003160 <HAL_GPIO_Init+0x234>)
 8002f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f3e:	e194      	b.n	800326a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8186 	beq.w	8003264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d005      	beq.n	8002f70 <HAL_GPIO_Init+0x44>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d130      	bne.n	8002fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0201 	and.w	r2, r3, #1
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d017      	beq.n	800300e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d123      	bne.n	8003062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3208      	adds	r2, #8
 8003022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	69b9      	ldr	r1, [r7, #24]
 800305e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0203 	and.w	r2, r3, #3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80e0 	beq.w	8003264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <HAL_GPIO_Init+0x238>)
 80030a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003164 <HAL_GPIO_Init+0x238>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80030b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <HAL_GPIO_Init+0x238>)
 80030b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030c2:	4a29      	ldr	r2, [pc, #164]	@ (8003168 <HAL_GPIO_Init+0x23c>)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a20      	ldr	r2, [pc, #128]	@ (800316c <HAL_GPIO_Init+0x240>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d052      	beq.n	8003194 <HAL_GPIO_Init+0x268>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003170 <HAL_GPIO_Init+0x244>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_GPIO_Init+0x22e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003174 <HAL_GPIO_Init+0x248>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02b      	beq.n	8003156 <HAL_GPIO_Init+0x22a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_GPIO_Init+0x24c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x226>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1c      	ldr	r2, [pc, #112]	@ (800317c <HAL_GPIO_Init+0x250>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x222>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1b      	ldr	r2, [pc, #108]	@ (8003180 <HAL_GPIO_Init+0x254>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x21e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1a      	ldr	r2, [pc, #104]	@ (8003184 <HAL_GPIO_Init+0x258>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x21a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a19      	ldr	r2, [pc, #100]	@ (8003188 <HAL_GPIO_Init+0x25c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x216>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_GPIO_Init+0x260>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x212>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <HAL_GPIO_Init+0x264>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x20e>
 8003136:	2309      	movs	r3, #9
 8003138:	e02d      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 800313a:	230a      	movs	r3, #10
 800313c:	e02b      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 800313e:	2308      	movs	r3, #8
 8003140:	e029      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 8003142:	2307      	movs	r3, #7
 8003144:	e027      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 8003146:	2306      	movs	r3, #6
 8003148:	e025      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 800314a:	2305      	movs	r3, #5
 800314c:	e023      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 800314e:	2304      	movs	r3, #4
 8003150:	e021      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 8003152:	2303      	movs	r3, #3
 8003154:	e01f      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 8003156:	2302      	movs	r3, #2
 8003158:	e01d      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 800315a:	2301      	movs	r3, #1
 800315c:	e01b      	b.n	8003196 <HAL_GPIO_Init+0x26a>
 800315e:	bf00      	nop
 8003160:	58000080 	.word	0x58000080
 8003164:	58024400 	.word	0x58024400
 8003168:	58000400 	.word	0x58000400
 800316c:	58020000 	.word	0x58020000
 8003170:	58020400 	.word	0x58020400
 8003174:	58020800 	.word	0x58020800
 8003178:	58020c00 	.word	0x58020c00
 800317c:	58021000 	.word	0x58021000
 8003180:	58021400 	.word	0x58021400
 8003184:	58021800 	.word	0x58021800
 8003188:	58021c00 	.word	0x58021c00
 800318c:	58022000 	.word	0x58022000
 8003190:	58022400 	.word	0x58022400
 8003194:	2300      	movs	r3, #0
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	f002 0203 	and.w	r2, r2, #3
 800319c:	0092      	lsls	r2, r2, #2
 800319e:	4093      	lsls	r3, r2
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a6:	4938      	ldr	r1, [pc, #224]	@ (8003288 <HAL_GPIO_Init+0x35c>)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f ae63 	bne.w	8002f40 <HAL_GPIO_Init+0x14>
  }
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	3724      	adds	r7, #36	@ 0x24
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	58000400 	.word	0x58000400

0800328c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e001      	b.n	80032ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032d8:	e003      	b.n	80032e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	041a      	lsls	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	619a      	str	r2, [r3, #24]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80032f8:	4a08      	ldr	r2, [pc, #32]	@ (800331c <HAL_HSEM_FastTake+0x2c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3320      	adds	r3, #32
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	4a07      	ldr	r2, [pc, #28]	@ (8003320 <HAL_HSEM_FastTake+0x30>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	58026400 	.word	0x58026400
 8003320:	80000300 	.word	0x80000300

08003324 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800332e:	4906      	ldr	r1, [pc, #24]	@ (8003348 <HAL_HSEM_Release+0x24>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	58026400 	.word	0x58026400

0800334c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e070      	b.n	8003440 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fdfc 	bl	8001f70 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80033de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_JPEG_Init+0xfc>)
 80033e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <HAL_JPEG_Init+0x100>)
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fd9d 	bl	8003f38 <JPEG_Set_HuffEnc_Mem>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e018      	b.n	8003440 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800341c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	0800fba0 	.word	0x0800fba0
 800344c:	0800fbe0 	.word	0x0800fbe0

08003450 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_JPEG_GetInfo+0x16>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e083      	b.n	8003572 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d103      	bne.n	8003480 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2210      	movs	r2, #16
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e017      	b.n	80034b0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e00c      	b.n	80034b0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d103      	bne.n	80034ac <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2230      	movs	r2, #48	@ 0x30
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e001      	b.n	80034b0 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e060      	b.n	8003572 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d003      	beq.n	80034dc <HAL_JPEG_GetInfo+0x8c>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b30      	cmp	r3, #48	@ 0x30
 80034da:	d140      	bne.n	800355e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d109      	bne.n	8003520 <HAL_JPEG_GetInfo+0xd0>
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_JPEG_GetInfo+0xd0>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2202      	movs	r2, #2
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	e01d      	b.n	800355c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_JPEG_GetInfo+0xea>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_JPEG_GetInfo+0xea>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	e010      	b.n	800355c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d109      	bne.n	8003554 <HAL_JPEG_GetInfo+0x104>
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_JPEG_GetInfo+0x104>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	e003      	b.n	800355c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800355a:	e003      	b.n	8003564 <HAL_JPEG_GetInfo+0x114>
 800355c:	e002      	b.n	8003564 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f001 fc0b 	bl	8004d80 <JPEG_GetQuality>
 800356a:	4602      	mov	r2, r0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_JPEG_Decode+0x20>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_JPEG_Decode+0x20>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e075      	b.n	800368c <HAL_JPEG_Decode+0x110>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_JPEG_Decode+0x32>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e06e      	b.n	800368c <HAL_JPEG_Decode+0x110>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b6:	f7fe ff91 	bl	80024dc <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d15c      	bne.n	8003682 <HAL_JPEG_Decode+0x106>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	f023 020f 	bic.w	r2, r3, #15
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f043 0206 	orr.w	r2, r3, #6
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f023 0203 	bic.w	r2, r3, #3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 ff11 	bl	800443c <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while (( (JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING) && !(Jpeg_Decoding_End) ))
 800361a:	e01e      	b.n	800365a <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d01a      	beq.n	800365a <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003624:	f7fe ff5a 	bl	80024dc <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <HAL_JPEG_Decode+0xbe>
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	f043 0208 	orr.w	r2, r3, #8
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e018      	b.n	800368c <HAL_JPEG_Decode+0x110>
    while (( (JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING) && !(Jpeg_Decoding_End) ))
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 ff62 	bl	8004524 <JPEG_Process>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_JPEG_Decode+0xf2>
 8003666:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_JPEG_Decode+0x118>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0d6      	beq.n	800361c <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e004      	b.n	800368c <HAL_JPEG_Decode+0x110>
    __HAL_UNLOCK(hjpeg);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	24005040 	.word	0x24005040

08003698 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d116      	bne.n	80036e0 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d033      	beq.n	800373a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80036de:	e02c      	b.n	800373a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d126      	bne.n	800373a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f043 0306 	orr.w	r3, r3, #6
 8003708:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003726:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43da      	mvns	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	400a      	ands	r2, r1
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_JPEG_Abort>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Abort(JPEG_HandleTypeDef *hjpeg)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpContext;
  tmpContext = hjpeg->Context;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003778:	60fb      	str	r3, [r7, #12]

  /*Reset the Context operation and method*/
  hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800377e:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_JPEG_Abort+0x14c>)
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6553      	str	r3, [r2, #84]	@ 0x54

  if ((tmpContext & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d125      	bne.n	80037dc <HAL_JPEG_Abort+0x70>
  {
    /* Stop the DMA In/out Xfer*/
    if (HAL_MDMA_Abort(hjpeg->hdmaout) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fb51 	bl	8004e3c <HAL_MDMA_Abort>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_JPEG_Abort+0x4a>
    {
      if (hjpeg->hdmaout->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d105      	bne.n	80037b6 <HAL_JPEG_Abort+0x4a>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
    if (HAL_MDMA_Abort(hjpeg->hdmain) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fb3e 	bl	8004e3c <HAL_MDMA_Abort>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_JPEG_Abort+0x70>
    {
      if (hjpeg->hdmain->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	d105      	bne.n	80037dc <HAL_JPEG_Abort+0x70>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	651a      	str	r2, [r3, #80]	@ 0x50
    }

  }

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ec:	f7fe fe76 	bl	80024dc <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

  /* Check if the JPEG Codec is effectively disabled */
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 80037f2:	e012      	b.n	800381a <HAL_JPEG_Abort+0xae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > JPEG_TIMEOUT_VALUE)
 80037f4:	f7fe fe72 	bl	80024dc <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003802:	d90a      	bls.n	800381a <HAL_JPEG_Abort+0xae>
    {
      /* Update error code */
      hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003808:	f043 0208 	orr.w	r2, r3, #8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Change the DMA state */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2206      	movs	r2, #6
 8003814:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8003818:	e006      	b.n	8003828 <HAL_JPEG_Abort+0xbc>
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <HAL_JPEG_Abort+0x88>
    }
  }

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003856:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003866:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Reset the Context Pause*/
  hjpeg->Context &= ~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003878:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Change the DMA state*/
  if (hjpeg->ErrorCode != HAL_JPEG_ERROR_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_JPEG_Abort+0x130>
  {
    hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2206      	movs	r2, #6
 800388c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e008      	b.n	80038ae <HAL_JPEG_Abort+0x142>
  }
  else
  {
    hjpeg->State = HAL_JPEG_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
  }

}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	ffff7ff0 	.word	0xffff7ff0

080038bc <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	3b03      	subs	r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d813      	bhi.n	800390e <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d103      	bne.n	80038fa <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fe16 	bl	8004524 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80038f8:	e00b      	b.n	8003912 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d105      	bne.n	8003912 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f001 f8bb 	bl	8004a82 <JPEG_DMA_ContinueProcess>
      break;
 800390c:	e001      	b.n	8003912 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_JPEG_IRQHandler+0x44>
      break;
 8003912:	bf00      	nop
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800391c:	b480      	push	{r7}
 800391e:	b08b      	sub	sp, #44	@ 0x2c
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e020      	b.n	8003976 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	4413      	add	r3, r2
 8003944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003948:	d90f      	bls.n	800396a <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e055      	b.n	80039fa <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	440b      	add	r3, r1
 8003958:	3201      	adds	r2, #1
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]
      p++;
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	3301      	adds	r3, #1
 8003962:	623b      	str	r3, [r7, #32]
      i--;
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	3b01      	subs	r3, #1
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d9db      	bls.n	8003934 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	4413      	add	r3, r2
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	617b      	str	r3, [r7, #20]
  p = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800399a:	e027      	b.n	80039ec <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]
      p++;
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	3301      	adds	r3, #1
 80039ac:	623b      	str	r3, [r7, #32]
      code++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	4413      	add	r3, r2
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d0eb      	beq.n	800399c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b1f      	cmp	r3, #31
 80039c8:	d901      	bls.n	80039ce <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e015      	b.n	80039fa <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80039ce:	2201      	movs	r2, #1
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d301      	bcc.n	80039e0 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e00c      	b.n	80039fa <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]
    si++;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	4413      	add	r3, r2
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1dd      	bne.n	80039b4 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	372c      	adds	r7, #44	@ 0x2c
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a12:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003a16:	6018      	str	r0, [r3, #0]
 8003a18:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a1c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003a20:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003a22:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a26:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	f107 020c 	add.w	r2, r7, #12
 8003a34:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8003a38:	f7ff ff70 	bl	800391c <JPEG_Bits_To_SizeCodes>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8003a42:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003a4a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003a4e:	e075      	b.n	8003b3c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8003a56:	e067      	b.n	8003b28 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8003a58:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a5c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003a66:	4413      	add	r3, r2
 8003a68:	3310      	adds	r3, #16
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8003a70:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8003a78:	23a0      	movs	r3, #160	@ 0xa0
 8003a7a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a7e:	e021      	b.n	8003ac4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8003a80:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a84:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a86:	d103      	bne.n	8003a90 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8003a88:	23a1      	movs	r3, #161	@ 0xa1
 8003a8a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a8e:	e019      	b.n	8003ac4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8003a90:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8003a9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8003aaa:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003abc:	4413      	add	r3, r2
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8003ac4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003ac8:	2ba1      	cmp	r3, #161	@ 0xa1
 8003aca:	d901      	bls.n	8003ad0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003acc:	2301      	movs	r3, #1
 8003ace:	e035      	b.n	8003b3c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003ad0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003ad4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003ad8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003adc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ae0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003ae4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003aee:	3328      	adds	r3, #40	@ 0x28
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003af6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003afa:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003afe:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b2d9      	uxtb	r1, r3
 8003b0a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003b0e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003b18:	4413      	add	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	701a      	strb	r2, [r3, #0]
      k++;
 8003b1e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003b22:	3301      	adds	r3, #1
 8003b24:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8003b28:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003b2c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d38e      	bcc.n	8003a58 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b52:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003b56:	6018      	str	r0, [r3, #0]
 8003b58:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b5c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b60:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003b62:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b66:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8003b78:	f7ff fed0 	bl	800391c <JPEG_Bits_To_SizeCodes>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8003b82:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003b8a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b8e:	e048      	b.n	8003c22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8003b96:	e03d      	b.n	8003c14 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8003b98:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b9c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3310      	adds	r3, #16
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8003bb0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003bb4:	2b0b      	cmp	r3, #11
 8003bb6:	d901      	bls.n	8003bbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003bbc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003bc0:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8003bc4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003bc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bcc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003bd0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003bda:	3302      	adds	r3, #2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003be2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003be6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003bea:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b2d9      	uxtb	r1, r3
 8003bf6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003bfa:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003c04:	4413      	add	r3, r2
 8003c06:	460a      	mov	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
      k++;
 8003c0a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8003c14:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003c18:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d3bb      	bcc.n	8003b98 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b09a      	sub	sp, #104	@ 0x68
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d106      	bne.n	8003c54 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003c4e:	3318      	adds	r3, #24
 8003c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c52:	e00f      	b.n	8003c74 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d106      	bne.n	8003c70 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003c6a:	3318      	adds	r3, #24
 8003c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c6e:	e001      	b.n	8003c74 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e059      	b.n	8003d28 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d055      	beq.n	8003d26 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	68b8      	ldr	r0, [r7, #8]
 8003c82:	f7ff ff60 	bl	8003b46 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8003c94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c98:	e046      	b.n	8003d28 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8003c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ca0:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003ca4:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ca8:	3304      	adds	r3, #4
 8003caa:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cae:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003cb2:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8003cb8:	e032      	b.n	8003d20 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8003cba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8003cc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003cc6:	f107 0214 	add.w	r2, r7, #20
 8003cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ccc:	4413      	add	r3, r2
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cd8:	3302      	adds	r3, #2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	3368      	adds	r3, #104	@ 0x68
 8003cde:	443b      	add	r3, r7
 8003ce0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cec:	3b01      	subs	r3, #1
 8003cee:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003cf0:	f107 0214 	add.w	r2, r7, #20
 8003cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d02:	3302      	adds	r3, #2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	3368      	adds	r3, #104	@ 0x68
 8003d08:	443b      	add	r3, r7
 8003d0a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d16:	041a      	lsls	r2, r3, #16
 8003d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d1e:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d8c9      	bhi.n	8003cba <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3768      	adds	r7, #104	@ 0x68
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d3c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d40:	6018      	str	r0, [r3, #0]
 8003d42:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d46:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d4a:	6019      	str	r1, [r3, #0]
 8003d4c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d50:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003d54:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003d56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d5a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d66:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003d6a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d10c      	bne.n	8003d8e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003d74:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d78:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d84:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d88:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d8c:	e01d      	b.n	8003dca <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003d8e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d92:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d9e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003da2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d10c      	bne.n	8003dc6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003dac:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003db0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003dbc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003dc0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003dc4:	e001      	b.n	8003dca <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0a8      	b.n	8003f1c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8003dca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003dce:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a0 	beq.w	8003f1a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003dda:	f107 0214 	add.w	r2, r7, #20
 8003dde:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003de2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003de6:	4611      	mov	r1, r2
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	f7ff fe0c 	bl	8003a06 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003df4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003dfc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003e00:	e08c      	b.n	8003f1c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003e02:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e06:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003e10:	e00e      	b.n	8003e30 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8003e12:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e16:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003e1a:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003e1c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e20:	3304      	adds	r3, #4
 8003e22:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003e26:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003e30:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d9ec      	bls.n	8003e12 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003e38:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f28 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003e3e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003e40:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e44:	3304      	adds	r3, #4
 8003e46:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003e4a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e4e:	4a37      	ldr	r2, [pc, #220]	@ (8003f2c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003e50:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003e52:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e56:	3304      	adds	r3, #4
 8003e58:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003e5c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e60:	4a33      	ldr	r2, [pc, #204]	@ (8003f30 <JPEG_Set_HuffAC_Mem+0x200>)
 8003e62:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003e64:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e68:	3304      	adds	r3, #4
 8003e6a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003e6e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e72:	4a30      	ldr	r2, [pc, #192]	@ (8003f34 <JPEG_Set_HuffAC_Mem+0x204>)
 8003e74:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003e76:	23a2      	movs	r3, #162	@ 0xa2
 8003e78:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003e7c:	e049      	b.n	8003f12 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003e7e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e82:	3b01      	subs	r3, #1
 8003e84:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003e88:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e8c:	3b04      	subs	r3, #4
 8003e8e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e92:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e96:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e9a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e9e:	4413      	add	r3, r2
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003ea8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003eac:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003eb0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003eb4:	3328      	adds	r3, #40	@ 0x28
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8003ec4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003ece:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ed2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003ed6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003ee4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ee8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003eec:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ef0:	3328      	adds	r3, #40	@ 0x28
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003f00:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003f10:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003f12:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d8b1      	bhi.n	8003e7e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	0fd10fd0 	.word	0x0fd10fd0
 8003f2c:	0fd30fd2 	.word	0x0fd30fd2
 8003f30:	0fd50fd4 	.word	0x0fd50fd4
 8003f34:	0fd70fd6 	.word	0x0fd70fd6

08003f38 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f84d 	bl	8003fe0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003f4e:	461a      	mov	r2, r3
 8003f50:	491f      	ldr	r1, [pc, #124]	@ (8003fd0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff feec 	bl	8003d30 <JPEG_Set_HuffAC_Mem>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	e030      	b.n	8003fc8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4918      	ldr	r1, [pc, #96]	@ (8003fd4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fedc 	bl	8003d30 <JPEG_Set_HuffAC_Mem>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	e020      	b.n	8003fc8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4911      	ldr	r1, [pc, #68]	@ (8003fd8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fe4a 	bl	8003c2c <JPEG_Set_HuffDC_Mem>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	e010      	b.n	8003fc8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	490a      	ldr	r1, [pc, #40]	@ (8003fdc <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe3a 	bl	8003c2c <JPEG_Set_HuffDC_Mem>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	e000      	b.n	8003fc8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	0800f9f8 	.word	0x0800f9f8
 8003fd4:	0800faac 	.word	0x0800faac
 8003fd8:	0800f9c0 	.word	0x0800f9c0
 8003fdc:	0800f9dc 	.word	0x0800f9dc

08003fe0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b08b      	sub	sp, #44	@ 0x2c
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003fe8:	4b80      	ldr	r3, [pc, #512]	@ (80041ec <JPEG_Set_Huff_DHTMem+0x20c>)
 8003fea:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003fec:	4b80      	ldr	r3, [pc, #512]	@ (80041f0 <JPEG_Set_Huff_DHTMem+0x210>)
 8003fee:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003ff0:	4b80      	ldr	r3, [pc, #512]	@ (80041f4 <JPEG_Set_Huff_DHTMem+0x214>)
 8003ff2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003ff4:	4b80      	ldr	r3, [pc, #512]	@ (80041f8 <JPEG_Set_Huff_DHTMem+0x218>)
 8003ff6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004000:	330c      	adds	r3, #12
 8004002:	623b      	str	r3, [r7, #32]
  index = 16;
 8004004:	2310      	movs	r3, #16
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004008:	e01d      	b.n	8004046 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	3b01      	subs	r3, #1
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	5cd3      	ldrb	r3, [r2, r3]
 8004012:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	3b02      	subs	r3, #2
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800401e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	3b03      	subs	r3, #3
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800402a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800402c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402e:	3a04      	subs	r2, #4
 8004030:	6979      	ldr	r1, [r7, #20]
 8004032:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004034:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	601a      	str	r2, [r3, #0]
    address--;
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	3b04      	subs	r3, #4
 800403e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	3b04      	subs	r3, #4
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	2b03      	cmp	r3, #3
 800404a:	d8de      	bhi.n	800400a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004054:	3318      	adds	r3, #24
 8004056:	623b      	str	r3, [r7, #32]
  index = 12;
 8004058:	230c      	movs	r3, #12
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800405c:	e021      	b.n	80040a2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	3b01      	subs	r3, #1
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4413      	add	r3, r2
 8004066:	7c1b      	ldrb	r3, [r3, #16]
 8004068:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	3b02      	subs	r3, #2
 800406e:	6979      	ldr	r1, [r7, #20]
 8004070:	440b      	add	r3, r1
 8004072:	7c1b      	ldrb	r3, [r3, #16]
 8004074:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004076:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	3b03      	subs	r3, #3
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	440b      	add	r3, r1
 8004080:	7c1b      	ldrb	r3, [r3, #16]
 8004082:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004084:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004088:	3a04      	subs	r2, #4
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	440a      	add	r2, r1
 800408e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004090:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	601a      	str	r2, [r3, #0]
    address--;
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	3b04      	subs	r3, #4
 800409a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	3b04      	subs	r3, #4
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d8da      	bhi.n	800405e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80040b0:	3328      	adds	r3, #40	@ 0x28
 80040b2:	623b      	str	r3, [r7, #32]
  index = 16;
 80040b4:	2310      	movs	r3, #16
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040b8:	e01d      	b.n	80040f6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	3b01      	subs	r3, #1
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	5cd3      	ldrb	r3, [r2, r3]
 80040c2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	3b02      	subs	r3, #2
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80040ce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	3b03      	subs	r3, #3
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80040da:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80040dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040de:	3a04      	subs	r2, #4
 80040e0:	69f9      	ldr	r1, [r7, #28]
 80040e2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80040e4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	601a      	str	r2, [r3, #0]
    address--;
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	3b04      	subs	r3, #4
 80040ee:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	3b04      	subs	r3, #4
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d8de      	bhi.n	80040ba <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004104:	33cc      	adds	r3, #204	@ 0xcc
 8004106:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <JPEG_Set_Huff_DHTMem+0x21c>)
 800410e:	4013      	ands	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	3b04      	subs	r3, #4
 8004132:	623b      	str	r3, [r7, #32]
  index = 160;
 8004134:	23a0      	movs	r3, #160	@ 0xa0
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004138:	e021      	b.n	800417e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	3b01      	subs	r3, #1
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	7c1b      	ldrb	r3, [r3, #16]
 8004144:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	3b02      	subs	r3, #2
 800414a:	69f9      	ldr	r1, [r7, #28]
 800414c:	440b      	add	r3, r1
 800414e:	7c1b      	ldrb	r3, [r3, #16]
 8004150:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004152:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	3b03      	subs	r3, #3
 8004158:	69f9      	ldr	r1, [r7, #28]
 800415a:	440b      	add	r3, r1
 800415c:	7c1b      	ldrb	r3, [r3, #16]
 800415e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004160:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004164:	3a04      	subs	r2, #4
 8004166:	69f9      	ldr	r1, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800416c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	601a      	str	r2, [r3, #0]
    address--;
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	3b04      	subs	r3, #4
 8004176:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	3b04      	subs	r3, #4
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	2b03      	cmp	r3, #3
 8004182:	d8da      	bhi.n	800413a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800418c:	33cc      	adds	r3, #204	@ 0xcc
 800418e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	061a      	lsls	r2, r3, #24
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041ba:	33dc      	adds	r3, #220	@ 0xdc
 80041bc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b0e      	ldr	r3, [pc, #56]	@ (80041fc <JPEG_Set_Huff_DHTMem+0x21c>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	7bdb      	ldrb	r3, [r3, #15]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	7b92      	ldrb	r2, [r2, #14]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	3b04      	subs	r3, #4
 80041e4:	623b      	str	r3, [r7, #32]
  index = 12;
 80041e6:	230c      	movs	r3, #12
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041ea:	e027      	b.n	800423c <JPEG_Set_Huff_DHTMem+0x25c>
 80041ec:	0800f9f8 	.word	0x0800f9f8
 80041f0:	0800faac 	.word	0x0800faac
 80041f4:	0800f9c0 	.word	0x0800f9c0
 80041f8:	0800f9dc 	.word	0x0800f9dc
 80041fc:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	3301      	adds	r3, #1
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800420a:	6939      	ldr	r1, [r7, #16]
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	440b      	add	r3, r1
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004214:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	3b01      	subs	r3, #1
 800421a:	6939      	ldr	r1, [r7, #16]
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004220:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	3a02      	subs	r2, #2
 8004226:	6939      	ldr	r1, [r7, #16]
 8004228:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800422a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	601a      	str	r2, [r3, #0]
    address--;
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	3b04      	subs	r3, #4
 8004234:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	3b04      	subs	r3, #4
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	2b03      	cmp	r3, #3
 8004240:	d8de      	bhi.n	8004200 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800424a:	33dc      	adds	r3, #220	@ 0xdc
 800424c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	7c5b      	ldrb	r3, [r3, #17]
 800425a:	061a      	lsls	r2, r3, #24
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	431a      	orrs	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	7c1b      	ldrb	r3, [r3, #16]
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004278:	33e8      	adds	r3, #232	@ 0xe8
 800427a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b6d      	ldr	r3, [pc, #436]	@ (8004438 <JPEG_Set_Huff_DHTMem+0x458>)
 8004282:	4013      	ands	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	7edb      	ldrb	r3, [r3, #27]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	7e92      	ldrb	r2, [r2, #26]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	3b04      	subs	r3, #4
 80042a2:	623b      	str	r3, [r7, #32]
  index = 8;
 80042a4:	2308      	movs	r3, #8
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80042a8:	e021      	b.n	80042ee <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	3301      	adds	r3, #1
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	7c1b      	ldrb	r3, [r3, #16]
 80042b4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80042b6:	6939      	ldr	r1, [r7, #16]
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	440b      	add	r3, r1
 80042bc:	3310      	adds	r3, #16
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80042c2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	3b01      	subs	r3, #1
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	440b      	add	r3, r1
 80042cc:	7c1b      	ldrb	r3, [r3, #16]
 80042ce:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80042d0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	3a02      	subs	r2, #2
 80042d6:	6939      	ldr	r1, [r7, #16]
 80042d8:	440a      	add	r2, r1
 80042da:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80042dc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	601a      	str	r2, [r3, #0]
    address--;
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	3b04      	subs	r3, #4
 80042e6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	3b04      	subs	r3, #4
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d8da      	bhi.n	80042aa <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80042fc:	33e8      	adds	r3, #232	@ 0xe8
 80042fe:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	061a      	lsls	r2, r3, #24
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	431a      	orrs	r2, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800432a:	33f8      	adds	r3, #248	@ 0xf8
 800432c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b41      	ldr	r3, [pc, #260]	@ (8004438 <JPEG_Set_Huff_DHTMem+0x458>)
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	7bdb      	ldrb	r3, [r3, #15]
 800433c:	021a      	lsls	r2, r3, #8
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	7b92      	ldrb	r2, [r2, #14]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  *address = value;
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	3b04      	subs	r3, #4
 8004354:	623b      	str	r3, [r7, #32]
  index = 12;
 8004356:	230c      	movs	r3, #12
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800435a:	e01d      	b.n	8004398 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	3301      	adds	r3, #1
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	440b      	add	r3, r1
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004370:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	3b01      	subs	r3, #1
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	5ccb      	ldrb	r3, [r1, r3]
 800437a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800437c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800437e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004380:	3a02      	subs	r2, #2
 8004382:	69b9      	ldr	r1, [r7, #24]
 8004384:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004386:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	601a      	str	r2, [r3, #0]
    address--;
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	3b04      	subs	r3, #4
 8004390:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	3b04      	subs	r3, #4
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	2b03      	cmp	r3, #3
 800439c:	d8de      	bhi.n	800435c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80043a6:	33f8      	adds	r3, #248	@ 0xf8
 80043a8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	7c5b      	ldrb	r3, [r3, #17]
 80043b6:	061a      	lsls	r2, r3, #24
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	7c1b      	ldrb	r3, [r3, #16]
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80043d4:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80043d8:	623b      	str	r3, [r7, #32]
  index = 160;
 80043da:	23a0      	movs	r3, #160	@ 0xa0
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80043de:	e021      	b.n	8004424 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	3301      	adds	r3, #1
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4413      	add	r3, r2
 80043e8:	7c1b      	ldrb	r3, [r3, #16]
 80043ea:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	440b      	add	r3, r1
 80043f2:	3310      	adds	r3, #16
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80043f8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	3b01      	subs	r3, #1
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	440b      	add	r3, r1
 8004402:	7c1b      	ldrb	r3, [r3, #16]
 8004404:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004406:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440a:	3a02      	subs	r2, #2
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	440a      	add	r2, r1
 8004410:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004412:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	601a      	str	r2, [r3, #0]
    address--;
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	3b04      	subs	r3, #4
 800441c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	3b04      	subs	r3, #4
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	2b03      	cmp	r3, #3
 8004428:	d8da      	bhi.n	80043e0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	372c      	adds	r7, #44	@ 0x2c
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	ffff0000 	.word	0xffff0000

0800443c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004448:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d108      	bne.n	800446e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0208 	orr.w	r2, r2, #8
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	e007      	b.n	800447e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800449c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80044cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d108      	bne.n	80044fc <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80044fa:	e00d      	b.n	8004518 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b0c      	cmp	r3, #12
 8004506:	d107      	bne.n	8004518 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d125      	bne.n	8004584 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01e      	beq.n	8004584 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fe ff7f 	bl	8003450 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fef6 	bl	8001350 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004582:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d116      	bne.n	80045be <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800459e:	2108      	movs	r1, #8
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f988 	bl	80048b6 <JPEG_ReadInputData>
 80045a6:	e00a      	b.n	80045be <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80045b6:	2101      	movs	r1, #1
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f97c 	bl	80048b6 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80045d8:	2108      	movs	r1, #8
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f864 	bl	80046a8 <JPEG_StoreOutputData>
 80045e0:	e00a      	b.n	80045f8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80045f0:	2101      	movs	r1, #1
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f858 	bl	80046a8 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004602:	2b20      	cmp	r3, #32
 8004604:	d14b      	bne.n	800469e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b08      	cmp	r3, #8
 8004620:	d107      	bne.n	8004632 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004630:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004640:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69d9      	ldr	r1, [r3, #28]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	461a      	mov	r2, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fc fe91 	bl	800137c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d103      	bne.n	8004694 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fc fe9f 	bl	80013d0 <HAL_JPEG_DecodeCpltCallback>
 8004692:	e002      	b.n	800469a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff f911 	bl	80038bc <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d34b      	bcc.n	800475c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e031      	b.n	800472e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	4413      	add	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	0a19      	lsrs	r1, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	3301      	adds	r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	b2ca      	uxtb	r2, r1
 80046f4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	0c19      	lsrs	r1, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	3302      	adds	r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	b2ca      	uxtb	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	0e19      	lsrs	r1, r3, #24
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	3303      	adds	r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	b2ca      	uxtb	r2, r1
 800471c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d3c9      	bcc.n	80046ca <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	429a      	cmp	r2, r3
 8004740:	f040 80b5 	bne.w	80048ae <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	461a      	mov	r2, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fe14 	bl	800137c <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800475a:	e0a8      	b.n	80048ae <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	429a      	cmp	r2, r3
 8004766:	f240 80a2 	bls.w	80048ae <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e031      	b.n	80047e2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	4413      	add	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	0a19      	lsrs	r1, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	3301      	adds	r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	b2ca      	uxtb	r2, r1
 80047a8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0c19      	lsrs	r1, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	3302      	adds	r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	b2ca      	uxtb	r2, r1
 80047bc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	0e19      	lsrs	r1, r3, #24
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	3303      	adds	r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	b2ca      	uxtb	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	3301      	adds	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d3c9      	bcc.n	800477e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10b      	bne.n	800480e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69d9      	ldr	r1, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	461a      	mov	r2, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fc fdbb 	bl	800137c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800480c:	e04f      	b.n	80048ae <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004820:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e015      	b.n	8004854 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	fa22 f103 	lsr.w	r1, r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	4413      	add	r3, r2
 8004840:	b2ca      	uxtb	r2, r1
 8004842:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3301      	adds	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	429a      	cmp	r2, r3
 800485a:	d3e5      	bcc.n	8004828 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	461a      	mov	r2, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fd88 	bl	800137c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f1c3 0304 	rsb	r3, r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e013      	b.n	80048a8 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	fa22 f103 	lsr.w	r1, r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	4413      	add	r3, r2
 8004894:	b2ca      	uxtb	r2, r1
 8004896:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	3301      	adds	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d9e8      	bls.n	8004880 <JPEG_StoreOutputData+0x1d8>
}
 80048ae:	bf00      	nop
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b088      	sub	sp, #32
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <JPEG_ReadInputData+0x1c>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80048d2:	2101      	movs	r1, #1
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe fedf 	bl	8003698 <HAL_JPEG_Pause>
 80048da:	e028      	b.n	800492e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d906      	bls.n	80048f6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	e01b      	b.n	800492e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d115      	bne.n	800492e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fc fd2c 	bl	8001366 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	2b04      	cmp	r3, #4
 8004914:	d905      	bls.n	8004922 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 809f 	bne.w	8004a7a <JPEG_ReadInputData+0x1c4>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 809b 	beq.w	8004a7a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d335      	bcc.n	80049be <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e02d      	b.n	80049b4 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004978:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6999      	ldr	r1, [r3, #24]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3302      	adds	r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800498a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3303      	adds	r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80049a0:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	1d1a      	adds	r2, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3cd      	bcc.n	8004958 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80049bc:	e05d      	b.n	8004a7a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d035      	beq.n	8004a30 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	e02d      	b.n	8004a26 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4413      	add	r3, r2
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80049ea:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3302      	adds	r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80049fc:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3303      	adds	r3, #3
 8004a08:	4413      	add	r3, r2
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004a12:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d3cd      	bcc.n	80049ca <JPEG_ReadInputData+0x114>
}
 8004a2e:	e024      	b.n	8004a7a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e017      	b.n	8004a6a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d3e3      	bcc.n	8004a3a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004a7a:	bf00      	nop
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d125      	bne.n	8004ae2 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01e      	beq.n	8004ae2 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fe fcd0 	bl	8003450 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fc fc47 	bl	8001350 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ad0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d039      	beq.n	8004b64 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d104      	bne.n	8004b44 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f9d7 	bl	8004ef2 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d105      	bne.n	8004b5e <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f9cb 	bl	8004ef2 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8004b5c:	e002      	b.n	8004b64 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f804 	bl	8004b6c <JPEG_DMA_EndProcess>
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b84:	1ad2      	subs	r2, r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10a      	bne.n	8004bac <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69d9      	ldr	r1, [r3, #28]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fc fbeb 	bl	800137c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d134      	bne.n	8004c24 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69d9      	ldr	r1, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fc fbd5 	bl	800137c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bec:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d103      	bne.n	8004c1c <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fc fbdb 	bl	80013d0 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8004c1a:	e00c      	b.n	8004c36 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fe fe4d 	bl	80038bc <HAL_JPEG_EncodeCpltCallback>
}
 8004c22:	e008      	b.n	8004c36 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f804 	bl	8004c3e <JPEG_DMA_PollResidualData>
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b086      	sub	sp, #24
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004c46:	2310      	movs	r3, #16
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e04f      	b.n	8004cec <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d146      	bne.n	8004ce6 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03f      	beq.n	8004ce6 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6c:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	4413      	add	r3, r2
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	0a19      	lsrs	r1, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	b2ca      	uxtb	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0c19      	lsrs	r1, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	b2ca      	uxtb	r2, r1
 8004ca4:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	0e19      	lsrs	r1, r3, #24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	3303      	adds	r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	b2ca      	uxtb	r2, r1
 8004cb8:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d10a      	bne.n	8004ce6 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69d9      	ldr	r1, [r3, #28]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fb4e 	bl	800137c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ac      	bne.n	8004c4c <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <JPEG_DMA_PollResidualData+0xd2>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d133      	bne.n	8004d78 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	461a      	mov	r2, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc fb22 	bl	800137c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d48:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d103      	bne.n	8004d72 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc fb30 	bl	80013d0 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	e002      	b.n	8004d78 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fe fda2 	bl	80038bc <HAL_JPEG_EncodeCpltCallback>
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b08b      	sub	sp, #44	@ 0x2c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3350      	adds	r3, #80	@ 0x50
 8004d92:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d98:	e042      	b.n	8004e20 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	e033      	b.n	8004e0e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d103      	bne.n	8004dc2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	3364      	adds	r3, #100	@ 0x64
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc0:	e022      	b.n	8004e08 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2264      	movs	r2, #100	@ 0x64
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dce:	6a38      	ldr	r0, [r7, #32]
 8004dd0:	69f9      	ldr	r1, [r7, #28]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	4818      	ldr	r0, [pc, #96]	@ (8004e38 <JPEG_GetQuality+0xb8>)
 8004dd6:	5c41      	ldrb	r1, [r0, r1]
 8004dd8:	440a      	add	r2, r1
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b64      	cmp	r3, #100	@ 0x64
 8004de6:	d807      	bhi.n	8004df8 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df2:	4413      	add	r3, r2
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df6:	e007      	b.n	8004e08 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e04:	4413      	add	r3, r2
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d9c8      	bls.n	8004da6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	3304      	adds	r3, #4
 8004e18:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b3c      	cmp	r3, #60	@ 0x3c
 8004e24:	d9b9      	bls.n	8004d9a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	099b      	lsrs	r3, r3, #6
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	372c      	adds	r7, #44	@ 0x2c
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	0800fb60 	.word	0x0800fb60

08004e3c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8004e44:	f7fd fb4a 	bl	80024dc <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e04a      	b.n	8004eea <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d008      	beq.n	8004e72 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2280      	movs	r2, #128	@ 0x80
 8004e64:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e03b      	b.n	8004eea <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8004e80:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004e92:	e016      	b.n	8004ec2 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8004e94:	f7fd fb22 	bl	80024dc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d90f      	bls.n	8004ec2 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e013      	b.n	8004eea <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e1      	bne.n	8004e94 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	221f      	movs	r2, #31
 8004ed6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e017      	b.n	8004f34 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d004      	beq.n	8004f1a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2280      	movs	r2, #128	@ 0x80
 8004f14:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00c      	b.n	8004f34 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f48:	4b29      	ldr	r3, [pc, #164]	@ (8004ff0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d00a      	beq.n	8004f6a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f54:	4b26      	ldr	r3, [pc, #152]	@ (8004ff0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e040      	b.n	8004fe8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e03e      	b.n	8004fe8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f6a:	4b21      	ldr	r3, [pc, #132]	@ (8004ff0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004f72:	491f      	ldr	r1, [pc, #124]	@ (8004ff0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f7a:	f7fd faaf 	bl	80024dc <HAL_GetTick>
 8004f7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f80:	e009      	b.n	8004f96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f82:	f7fd faab 	bl	80024dc <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f90:	d901      	bls.n	8004f96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e028      	b.n	8004fe8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f96:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fa2:	d1ee      	bne.n	8004f82 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b1e      	cmp	r3, #30
 8004fa8:	d008      	beq.n	8004fbc <HAL_PWREx_ConfigSupply+0x7c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fae:	d005      	beq.n	8004fbc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b1d      	cmp	r3, #29
 8004fb4:	d002      	beq.n	8004fbc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b2d      	cmp	r3, #45	@ 0x2d
 8004fba:	d114      	bne.n	8004fe6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004fbc:	f7fd fa8e 	bl	80024dc <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fc2:	e009      	b.n	8004fd8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fc4:	f7fd fa8a 	bl	80024dc <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fd2:	d901      	bls.n	8004fd8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e007      	b.n	8004fe8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fd8:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe4:	d1ee      	bne.n	8004fc4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	58024800 	.word	0x58024800

08004ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	@ 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f000 bc48 	b.w	8005898 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8088 	beq.w	8005126 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005016:	4b99      	ldr	r3, [pc, #612]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005020:	4b96      	ldr	r3, [pc, #600]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005028:	2b10      	cmp	r3, #16
 800502a:	d007      	beq.n	800503c <HAL_RCC_OscConfig+0x48>
 800502c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502e:	2b18      	cmp	r3, #24
 8005030:	d111      	bne.n	8005056 <HAL_RCC_OscConfig+0x62>
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d10c      	bne.n	8005056 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	4b8f      	ldr	r3, [pc, #572]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d06d      	beq.n	8005124 <HAL_RCC_OscConfig+0x130>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d169      	bne.n	8005124 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f000 bc21 	b.w	8005898 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505e:	d106      	bne.n	800506e <HAL_RCC_OscConfig+0x7a>
 8005060:	4b86      	ldr	r3, [pc, #536]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a85      	ldr	r2, [pc, #532]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e02e      	b.n	80050cc <HAL_RCC_OscConfig+0xd8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0x9c>
 8005076:	4b81      	ldr	r3, [pc, #516]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a80      	ldr	r2, [pc, #512]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 800507c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b7e      	ldr	r3, [pc, #504]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7d      	ldr	r2, [pc, #500]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e01d      	b.n	80050cc <HAL_RCC_OscConfig+0xd8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0xc0>
 800509a:	4b78      	ldr	r3, [pc, #480]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a77      	ldr	r2, [pc, #476]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4b75      	ldr	r3, [pc, #468]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a74      	ldr	r2, [pc, #464]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0xd8>
 80050b4:	4b71      	ldr	r3, [pc, #452]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a70      	ldr	r2, [pc, #448]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b6e      	ldr	r3, [pc, #440]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a6d      	ldr	r2, [pc, #436]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fd fa02 	bl	80024dc <HAL_GetTick>
 80050d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fd f9fe 	bl	80024dc <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	@ 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e3d4      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ee:	4b63      	ldr	r3, [pc, #396]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0xe8>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd f9ee 	bl	80024dc <HAL_GetTick>
 8005100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005104:	f7fd f9ea 	bl	80024dc <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	@ 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e3c0      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005116:	4b59      	ldr	r3, [pc, #356]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x110>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 80ca 	beq.w	80052c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005134:	4b51      	ldr	r3, [pc, #324]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800513c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800513e:	4b4f      	ldr	r3, [pc, #316]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_RCC_OscConfig+0x166>
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	2b18      	cmp	r3, #24
 800514e:	d156      	bne.n	80051fe <HAL_RCC_OscConfig+0x20a>
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d151      	bne.n	80051fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800515a:	4b48      	ldr	r3, [pc, #288]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_RCC_OscConfig+0x17e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e392      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005172:	4b42      	ldr	r3, [pc, #264]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 0219 	bic.w	r2, r3, #25
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	493f      	ldr	r1, [pc, #252]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd f9aa 	bl	80024dc <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518c:	f7fd f9a6 	bl	80024dc <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e37c      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800519e:	4b37      	ldr	r3, [pc, #220]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	f7fd f9c7 	bl	800253c <HAL_GetREVID>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d817      	bhi.n	80051e8 <HAL_RCC_OscConfig+0x1f4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d108      	bne.n	80051d2 <HAL_RCC_OscConfig+0x1de>
 80051c0:	4b2e      	ldr	r3, [pc, #184]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80051c8:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d0:	e07a      	b.n	80052c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d2:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	031b      	lsls	r3, r3, #12
 80051e0:	4926      	ldr	r1, [pc, #152]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e6:	e06f      	b.n	80052c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e8:	4b24      	ldr	r3, [pc, #144]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	4921      	ldr	r1, [pc, #132]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fc:	e064      	b.n	80052c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d047      	beq.n	8005296 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005206:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 0219 	bic.w	r2, r3, #25
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	491a      	ldr	r1, [pc, #104]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fd f960 	bl	80024dc <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005220:	f7fd f95c 	bl	80024dc <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e332      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523e:	f7fd f97d 	bl	800253c <HAL_GetREVID>
 8005242:	4603      	mov	r3, r0
 8005244:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005248:	4293      	cmp	r3, r2
 800524a:	d819      	bhi.n	8005280 <HAL_RCC_OscConfig+0x28c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	d108      	bne.n	8005266 <HAL_RCC_OscConfig+0x272>
 8005254:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800525c:	4a07      	ldr	r2, [pc, #28]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005262:	6053      	str	r3, [r2, #4]
 8005264:	e030      	b.n	80052c8 <HAL_RCC_OscConfig+0x2d4>
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	031b      	lsls	r3, r3, #12
 8005274:	4901      	ldr	r1, [pc, #4]	@ (800527c <HAL_RCC_OscConfig+0x288>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
 800527a:	e025      	b.n	80052c8 <HAL_RCC_OscConfig+0x2d4>
 800527c:	58024400 	.word	0x58024400
 8005280:	4b9a      	ldr	r3, [pc, #616]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	4997      	ldr	r1, [pc, #604]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
 8005294:	e018      	b.n	80052c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005296:	4b95      	ldr	r3, [pc, #596]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a94      	ldr	r2, [pc, #592]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fd f91b 	bl	80024dc <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052aa:	f7fd f917 	bl	80024dc <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e2ed      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052bc:	4b8b      	ldr	r3, [pc, #556]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80a9 	beq.w	8005428 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d6:	4b85      	ldr	r3, [pc, #532]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052e0:	4b82      	ldr	r3, [pc, #520]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d007      	beq.n	80052fc <HAL_RCC_OscConfig+0x308>
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b18      	cmp	r3, #24
 80052f0:	d13a      	bne.n	8005368 <HAL_RCC_OscConfig+0x374>
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d135      	bne.n	8005368 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052fc:	4b7b      	ldr	r3, [pc, #492]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_OscConfig+0x320>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2b80      	cmp	r3, #128	@ 0x80
 800530e:	d001      	beq.n	8005314 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e2c1      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005314:	f7fd f912 	bl	800253c <HAL_GetREVID>
 8005318:	4603      	mov	r3, r0
 800531a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800531e:	4293      	cmp	r3, r2
 8005320:	d817      	bhi.n	8005352 <HAL_RCC_OscConfig+0x35e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	2b20      	cmp	r3, #32
 8005328:	d108      	bne.n	800533c <HAL_RCC_OscConfig+0x348>
 800532a:	4b70      	ldr	r3, [pc, #448]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005332:	4a6e      	ldr	r2, [pc, #440]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005334:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005338:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800533a:	e075      	b.n	8005428 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800533c:	4b6b      	ldr	r3, [pc, #428]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	069b      	lsls	r3, r3, #26
 800534a:	4968      	ldr	r1, [pc, #416]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005350:	e06a      	b.n	8005428 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005352:	4b66      	ldr	r3, [pc, #408]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	061b      	lsls	r3, r3, #24
 8005360:	4962      	ldr	r1, [pc, #392]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005366:	e05f      	b.n	8005428 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d042      	beq.n	80053f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005370:	4b5e      	ldr	r3, [pc, #376]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a5d      	ldr	r2, [pc, #372]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800537a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd f8ae 	bl	80024dc <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005384:	f7fd f8aa 	bl	80024dc <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e280      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005396:	4b55      	ldr	r3, [pc, #340]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053a2:	f7fd f8cb 	bl	800253c <HAL_GetREVID>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d817      	bhi.n	80053e0 <HAL_RCC_OscConfig+0x3ec>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d108      	bne.n	80053ca <HAL_RCC_OscConfig+0x3d6>
 80053b8:	4b4c      	ldr	r3, [pc, #304]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053c0:	4a4a      	ldr	r2, [pc, #296]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053c6:	6053      	str	r3, [r2, #4]
 80053c8:	e02e      	b.n	8005428 <HAL_RCC_OscConfig+0x434>
 80053ca:	4b48      	ldr	r3, [pc, #288]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	069b      	lsls	r3, r3, #26
 80053d8:	4944      	ldr	r1, [pc, #272]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
 80053de:	e023      	b.n	8005428 <HAL_RCC_OscConfig+0x434>
 80053e0:	4b42      	ldr	r3, [pc, #264]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	493f      	ldr	r1, [pc, #252]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60cb      	str	r3, [r1, #12]
 80053f4:	e018      	b.n	8005428 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053f6:	4b3d      	ldr	r3, [pc, #244]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3c      	ldr	r2, [pc, #240]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80053fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fd f86b 	bl	80024dc <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800540a:	f7fd f867 	bl	80024dc <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e23d      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800541c:	4b33      	ldr	r3, [pc, #204]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d036      	beq.n	80054a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d019      	beq.n	8005470 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800543c:	4b2b      	ldr	r3, [pc, #172]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 800543e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005440:	4a2a      	ldr	r2, [pc, #168]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fd f848 	bl	80024dc <HAL_GetTick>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005450:	f7fd f844 	bl	80024dc <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e21a      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005462:	4b22      	ldr	r3, [pc, #136]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0x45c>
 800546e:	e018      	b.n	80054a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005470:	4b1e      	ldr	r3, [pc, #120]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547c:	f7fd f82e 	bl	80024dc <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005484:	f7fd f82a 	bl	80024dc <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e200      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005496:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 8005498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d039      	beq.n	8005522 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a0c      	ldr	r2, [pc, #48]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80054bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054c2:	f7fd f80b 	bl	80024dc <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ca:	f7fd f807 	bl	80024dc <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1dd      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054dc:	4b03      	ldr	r3, [pc, #12]	@ (80054ec <HAL_RCC_OscConfig+0x4f8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x4d6>
 80054e8:	e01b      	b.n	8005522 <HAL_RCC_OscConfig+0x52e>
 80054ea:	bf00      	nop
 80054ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054f0:	4b9b      	ldr	r3, [pc, #620]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a9a      	ldr	r2, [pc, #616]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80054f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054fc:	f7fc ffee 	bl	80024dc <HAL_GetTick>
 8005500:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005504:	f7fc ffea 	bl	80024dc <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e1c0      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005516:	4b92      	ldr	r3, [pc, #584]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8081 	beq.w	8005632 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005530:	4b8c      	ldr	r3, [pc, #560]	@ (8005764 <HAL_RCC_OscConfig+0x770>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a8b      	ldr	r2, [pc, #556]	@ (8005764 <HAL_RCC_OscConfig+0x770>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800553a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553c:	f7fc ffce 	bl	80024dc <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fc ffca 	bl	80024dc <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	@ 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1a0      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005556:	4b83      	ldr	r3, [pc, #524]	@ (8005764 <HAL_RCC_OscConfig+0x770>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d106      	bne.n	8005578 <HAL_RCC_OscConfig+0x584>
 800556a:	4b7d      	ldr	r3, [pc, #500]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556e:	4a7c      	ldr	r2, [pc, #496]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6713      	str	r3, [r2, #112]	@ 0x70
 8005576:	e02d      	b.n	80055d4 <HAL_RCC_OscConfig+0x5e0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10c      	bne.n	800559a <HAL_RCC_OscConfig+0x5a6>
 8005580:	4b77      	ldr	r3, [pc, #476]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005584:	4a76      	ldr	r2, [pc, #472]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	6713      	str	r3, [r2, #112]	@ 0x70
 800558c:	4b74      	ldr	r3, [pc, #464]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005590:	4a73      	ldr	r2, [pc, #460]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005592:	f023 0304 	bic.w	r3, r3, #4
 8005596:	6713      	str	r3, [r2, #112]	@ 0x70
 8005598:	e01c      	b.n	80055d4 <HAL_RCC_OscConfig+0x5e0>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x5c8>
 80055a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055a8:	f043 0304 	orr.w	r3, r3, #4
 80055ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	4a6b      	ldr	r2, [pc, #428]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0x5e0>
 80055bc:	4b68      	ldr	r3, [pc, #416]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c0:	4a67      	ldr	r2, [pc, #412]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c8:	4b65      	ldr	r3, [pc, #404]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055cc:	4a64      	ldr	r2, [pc, #400]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055ce:	f023 0304 	bic.w	r3, r3, #4
 80055d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fc ff7e 	bl	80024dc <HAL_GetTick>
 80055e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fc ff7a 	bl	80024dc <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e14e      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055fa:	4b59      	ldr	r3, [pc, #356]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ee      	beq.n	80055e4 <HAL_RCC_OscConfig+0x5f0>
 8005606:	e014      	b.n	8005632 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fc ff68 	bl	80024dc <HAL_GetTick>
 800560c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fc ff64 	bl	80024dc <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e138      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005626:	4b4e      	ldr	r3, [pc, #312]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ee      	bne.n	8005610 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 812d 	beq.w	8005896 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800563c:	4b48      	ldr	r3, [pc, #288]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005644:	2b18      	cmp	r3, #24
 8005646:	f000 80bd 	beq.w	80057c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	2b02      	cmp	r3, #2
 8005650:	f040 809e 	bne.w	8005790 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005654:	4b42      	ldr	r3, [pc, #264]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a41      	ldr	r2, [pc, #260]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800565a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fc ff3c 	bl	80024dc <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005668:	f7fc ff38 	bl	80024dc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e10e      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800567a:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005686:	4b36      	ldr	r3, [pc, #216]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800568a:	4b37      	ldr	r3, [pc, #220]	@ (8005768 <HAL_RCC_OscConfig+0x774>)
 800568c:	4013      	ands	r3, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005696:	0112      	lsls	r2, r2, #4
 8005698:	430a      	orrs	r2, r1
 800569a:	4931      	ldr	r1, [pc, #196]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800569c:	4313      	orrs	r3, r2
 800569e:	628b      	str	r3, [r1, #40]	@ 0x28
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	3b01      	subs	r3, #1
 80056a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ae:	3b01      	subs	r3, #1
 80056b0:	025b      	lsls	r3, r3, #9
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	3b01      	subs	r3, #1
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	3b01      	subs	r3, #1
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056d0:	4923      	ldr	r1, [pc, #140]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056d6:	4b22      	ldr	r3, [pc, #136]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80056e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e6:	4b21      	ldr	r3, [pc, #132]	@ (800576c <HAL_RCC_OscConfig+0x778>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056ee:	00d2      	lsls	r2, r2, #3
 80056f0:	491b      	ldr	r1, [pc, #108]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	f023 020c 	bic.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	4917      	ldr	r1, [pc, #92]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005708:	4b15      	ldr	r3, [pc, #84]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	f023 0202 	bic.w	r2, r3, #2
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005714:	4912      	ldr	r1, [pc, #72]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800571a:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005726:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	4a0d      	ldr	r2, [pc, #52]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800572c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800573c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800574a:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <HAL_RCC_OscConfig+0x76c>)
 8005750:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fc fec1 	bl	80024dc <HAL_GetTick>
 800575a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800575c:	e011      	b.n	8005782 <HAL_RCC_OscConfig+0x78e>
 800575e:	bf00      	nop
 8005760:	58024400 	.word	0x58024400
 8005764:	58024800 	.word	0x58024800
 8005768:	fffffc0c 	.word	0xfffffc0c
 800576c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005770:	f7fc feb4 	bl	80024dc <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e08a      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005782:	4b47      	ldr	r3, [pc, #284]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x77c>
 800578e:	e082      	b.n	8005896 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	4b43      	ldr	r3, [pc, #268]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a42      	ldr	r2, [pc, #264]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800579a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fc fe9e 	bl	80024dc <HAL_GetTick>
 80057a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fc fe9a 	bl	80024dc <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e070      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b6:	4b3a      	ldr	r3, [pc, #232]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x7b0>
 80057c2:	e068      	b.n	8005896 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057c4:	4b36      	ldr	r3, [pc, #216]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057ca:	4b35      	ldr	r3, [pc, #212]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d031      	beq.n	800583c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f003 0203 	and.w	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d12a      	bne.n	800583c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d122      	bne.n	800583c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005802:	429a      	cmp	r2, r3
 8005804:	d11a      	bne.n	800583c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0a5b      	lsrs	r3, r3, #9
 800580a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005812:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d111      	bne.n	800583c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d108      	bne.n	800583c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	0e1b      	lsrs	r3, r3, #24
 800582e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005836:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e02b      	b.n	8005898 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005840:	4b17      	ldr	r3, [pc, #92]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005844:	08db      	lsrs	r3, r3, #3
 8005846:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800584a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	429a      	cmp	r2, r3
 8005854:	d01f      	beq.n	8005896 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005856:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005862:	f7fc fe3b 	bl	80024dc <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005868:	bf00      	nop
 800586a:	f7fc fe37 	bl	80024dc <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	4293      	cmp	r3, r2
 8005874:	d0f9      	beq.n	800586a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005876:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800587a:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <HAL_RCC_OscConfig+0x8b0>)
 800587c:	4013      	ands	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005882:	00d2      	lsls	r2, r2, #3
 8005884:	4906      	ldr	r1, [pc, #24]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005886:	4313      	orrs	r3, r2
 8005888:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800588a:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	4a04      	ldr	r2, [pc, #16]	@ (80058a0 <HAL_RCC_OscConfig+0x8ac>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3730      	adds	r7, #48	@ 0x30
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	58024400 	.word	0x58024400
 80058a4:	ffff0007 	.word	0xffff0007

080058a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e19c      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b8a      	ldr	r3, [pc, #552]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d910      	bls.n	80058ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b87      	ldr	r3, [pc, #540]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 020f 	bic.w	r2, r3, #15
 80058d2:	4985      	ldr	r1, [pc, #532]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b83      	ldr	r3, [pc, #524]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e184      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	4b7b      	ldr	r3, [pc, #492]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005904:	429a      	cmp	r2, r3
 8005906:	d908      	bls.n	800591a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005908:	4b78      	ldr	r3, [pc, #480]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	4975      	ldr	r1, [pc, #468]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005916:	4313      	orrs	r3, r2
 8005918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d010      	beq.n	8005948 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	4b70      	ldr	r3, [pc, #448]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005932:	429a      	cmp	r2, r3
 8005934:	d908      	bls.n	8005948 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005936:	4b6d      	ldr	r3, [pc, #436]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	496a      	ldr	r1, [pc, #424]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005944:	4313      	orrs	r3, r2
 8005946:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	4b64      	ldr	r3, [pc, #400]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005960:	429a      	cmp	r2, r3
 8005962:	d908      	bls.n	8005976 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005964:	4b61      	ldr	r3, [pc, #388]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	495e      	ldr	r1, [pc, #376]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005972:	4313      	orrs	r3, r2
 8005974:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d010      	beq.n	80059a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	4b59      	ldr	r3, [pc, #356]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800598e:	429a      	cmp	r2, r3
 8005990:	d908      	bls.n	80059a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005992:	4b56      	ldr	r3, [pc, #344]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	4953      	ldr	r1, [pc, #332]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	4b4d      	ldr	r3, [pc, #308]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	429a      	cmp	r2, r3
 80059be:	d908      	bls.n	80059d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c0:	4b4a      	ldr	r3, [pc, #296]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f023 020f 	bic.w	r2, r3, #15
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4947      	ldr	r1, [pc, #284]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d055      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059de:	4b43      	ldr	r3, [pc, #268]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4940      	ldr	r1, [pc, #256]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059f8:	4b3c      	ldr	r3, [pc, #240]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d121      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0f6      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a10:	4b36      	ldr	r3, [pc, #216]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d115      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0ea      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a28:	4b30      	ldr	r3, [pc, #192]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0de      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a38:	4b2c      	ldr	r3, [pc, #176]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0d6      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a48:	4b28      	ldr	r3, [pc, #160]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f023 0207 	bic.w	r2, r3, #7
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4925      	ldr	r1, [pc, #148]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5a:	f7fc fd3f 	bl	80024dc <HAL_GetTick>
 8005a5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a62:	f7fc fd3b 	bl	80024dc <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0be      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a78:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d1eb      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d010      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	4b14      	ldr	r3, [pc, #80]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d208      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa6:	4b11      	ldr	r3, [pc, #68]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f023 020f 	bic.w	r2, r3, #15
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	490e      	ldr	r1, [pc, #56]	@ (8005aec <HAL_RCC_ClockConfig+0x244>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d214      	bcs.n	8005af0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac6:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 020f 	bic.w	r2, r3, #15
 8005ace:	4906      	ldr	r1, [pc, #24]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b04      	ldr	r3, [pc, #16]	@ (8005ae8 <HAL_RCC_ClockConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e086      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x34e>
 8005ae8:	52002000 	.word	0x52002000
 8005aec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	4b3f      	ldr	r3, [pc, #252]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d208      	bcs.n	8005b1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	4939      	ldr	r1, [pc, #228]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d010      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	4b34      	ldr	r3, [pc, #208]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d208      	bcs.n	8005b4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b3a:	4b31      	ldr	r3, [pc, #196]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	492e      	ldr	r1, [pc, #184]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d010      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	4b28      	ldr	r3, [pc, #160]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d208      	bcs.n	8005b7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b68:	4b25      	ldr	r3, [pc, #148]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	4922      	ldr	r1, [pc, #136]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d010      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69da      	ldr	r2, [r3, #28]
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d208      	bcs.n	8005ba8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b96:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4917      	ldr	r1, [pc, #92]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ba8:	f000 f89e 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	4912      	ldr	r1, [pc, #72]	@ (8005c04 <HAL_RCC_ClockConfig+0x35c>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <HAL_RCC_ClockConfig+0x358>)
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	4a0d      	ldr	r2, [pc, #52]	@ (8005c04 <HAL_RCC_ClockConfig+0x35c>)
 8005bd0:	5cd3      	ldrb	r3, [r2, r3]
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8005c08 <HAL_RCC_ClockConfig+0x360>)
 8005bde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005be0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c0c <HAL_RCC_ClockConfig+0x364>)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <HAL_RCC_ClockConfig+0x368>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fc fc2c 	bl	8002448 <HAL_InitTick>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
 8005c04:	0800f9b0 	.word	0x0800f9b0
 8005c08:	24000004 	.word	0x24000004
 8005c0c:	24000000 	.word	0x24000000
 8005c10:	24000014 	.word	0x24000014

08005c14 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	@ 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d12a      	bne.n	8005c7c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005c26:	4b2d      	ldr	r3, [pc, #180]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c36:	4b29      	ldr	r3, [pc, #164]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005c44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c56:	2300      	movs	r3, #0
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005c5a:	f107 031c 	add.w	r3, r7, #28
 8005c5e:	4619      	mov	r1, r3
 8005c60:	481f      	ldr	r0, [pc, #124]	@ (8005ce0 <HAL_RCC_MCOConfig+0xcc>)
 8005c62:	f7fd f963 	bl	8002f2c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005c66:	4b1d      	ldr	r3, [pc, #116]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	430b      	orrs	r3, r1
 8005c74:	4919      	ldr	r1, [pc, #100]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005c7a:	e02a      	b.n	8005cd2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005c7c:	4b17      	ldr	r3, [pc, #92]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c82:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c84:	f043 0304 	orr.w	r3, r3, #4
 8005c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c8c:	4b13      	ldr	r3, [pc, #76]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005cb0:	f107 031c 	add.w	r3, r7, #28
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	480b      	ldr	r0, [pc, #44]	@ (8005ce4 <HAL_RCC_MCOConfig+0xd0>)
 8005cb8:	f7fd f938 	bl	8002f2c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	01d9      	lsls	r1, r3, #7
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	4903      	ldr	r1, [pc, #12]	@ (8005cdc <HAL_RCC_MCOConfig+0xc8>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	610b      	str	r3, [r1, #16]
}
 8005cd2:	bf00      	nop
 8005cd4:	3730      	adds	r7, #48	@ 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	58024400 	.word	0x58024400
 8005ce0:	58020000 	.word	0x58020000
 8005ce4:	58020800 	.word	0x58020800

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b089      	sub	sp, #36	@ 0x24
 8005cec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cee:	4bb3      	ldr	r3, [pc, #716]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cf6:	2b18      	cmp	r3, #24
 8005cf8:	f200 8155 	bhi.w	8005fa6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005fa7 	.word	0x08005fa7
 8005d0c:	08005fa7 	.word	0x08005fa7
 8005d10:	08005fa7 	.word	0x08005fa7
 8005d14:	08005fa7 	.word	0x08005fa7
 8005d18:	08005fa7 	.word	0x08005fa7
 8005d1c:	08005fa7 	.word	0x08005fa7
 8005d20:	08005fa7 	.word	0x08005fa7
 8005d24:	08005d8f 	.word	0x08005d8f
 8005d28:	08005fa7 	.word	0x08005fa7
 8005d2c:	08005fa7 	.word	0x08005fa7
 8005d30:	08005fa7 	.word	0x08005fa7
 8005d34:	08005fa7 	.word	0x08005fa7
 8005d38:	08005fa7 	.word	0x08005fa7
 8005d3c:	08005fa7 	.word	0x08005fa7
 8005d40:	08005fa7 	.word	0x08005fa7
 8005d44:	08005d95 	.word	0x08005d95
 8005d48:	08005fa7 	.word	0x08005fa7
 8005d4c:	08005fa7 	.word	0x08005fa7
 8005d50:	08005fa7 	.word	0x08005fa7
 8005d54:	08005fa7 	.word	0x08005fa7
 8005d58:	08005fa7 	.word	0x08005fa7
 8005d5c:	08005fa7 	.word	0x08005fa7
 8005d60:	08005fa7 	.word	0x08005fa7
 8005d64:	08005d9b 	.word	0x08005d9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d68:	4b94      	ldr	r3, [pc, #592]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d009      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d74:	4b91      	ldr	r3, [pc, #580]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	08db      	lsrs	r3, r3, #3
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	4a90      	ldr	r2, [pc, #576]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d86:	e111      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d88:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d8a:	61bb      	str	r3, [r7, #24]
      break;
 8005d8c:	e10e      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d90:	61bb      	str	r3, [r7, #24]
      break;
 8005d92:	e10b      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d94:	4b8c      	ldr	r3, [pc, #560]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d96:	61bb      	str	r3, [r7, #24]
      break;
 8005d98:	e108      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d9a:	4b88      	ldr	r3, [pc, #544]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005da4:	4b85      	ldr	r3, [pc, #532]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005db0:	4b82      	ldr	r3, [pc, #520]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005dba:	4b80      	ldr	r3, [pc, #512]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbe:	08db      	lsrs	r3, r3, #3
 8005dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80e1 	beq.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f000 8083 	beq.w	8005eec <HAL_RCC_GetSysClockFreq+0x204>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	f200 80a1 	bhi.w	8005f30 <HAL_RCC_GetSysClockFreq+0x248>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x114>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d056      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dfa:	e099      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02d      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e08:	4b6c      	ldr	r3, [pc, #432]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	4a6b      	ldr	r2, [pc, #428]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b62      	ldr	r3, [pc, #392]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e62:	e087      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005fd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b51      	ldr	r3, [pc, #324]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ea6:	e065      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b40      	ldr	r3, [pc, #256]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ece:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eea:	e043      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005fd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b2f      	ldr	r3, [pc, #188]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f2e:	e021      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b1e      	ldr	r3, [pc, #120]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f74:	4b11      	ldr	r3, [pc, #68]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f78:	0a5b      	lsrs	r3, r3, #9
 8005f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7e:	3301      	adds	r3, #1
 8005f80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f98:	ee17 3a90 	vmov	r3, s15
 8005f9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f9e:	e005      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
      break;
 8005fa4:	e002      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005fa6:	4b07      	ldr	r3, [pc, #28]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fa8:	61bb      	str	r3, [r7, #24]
      break;
 8005faa:	bf00      	nop
  }

  return sysclockfreq;
 8005fac:	69bb      	ldr	r3, [r7, #24]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3724      	adds	r7, #36	@ 0x24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	03d09000 	.word	0x03d09000
 8005fc4:	003d0900 	.word	0x003d0900
 8005fc8:	017d7840 	.word	0x017d7840
 8005fcc:	46000000 	.word	0x46000000
 8005fd0:	4c742400 	.word	0x4c742400
 8005fd4:	4a742400 	.word	0x4a742400
 8005fd8:	4bbebc20 	.word	0x4bbebc20

08005fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fe2:	f7ff fe81 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	4b10      	ldr	r3, [pc, #64]	@ (800602c <HAL_RCC_GetHCLKFreq+0x50>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	490f      	ldr	r1, [pc, #60]	@ (8006030 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ff4:	5ccb      	ldrb	r3, [r1, r3]
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006000:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <HAL_RCC_GetHCLKFreq+0x50>)
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	4a09      	ldr	r2, [pc, #36]	@ (8006030 <HAL_RCC_GetHCLKFreq+0x54>)
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	4a07      	ldr	r2, [pc, #28]	@ (8006034 <HAL_RCC_GetHCLKFreq+0x58>)
 8006018:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800601a:	4a07      	ldr	r2, [pc, #28]	@ (8006038 <HAL_RCC_GetHCLKFreq+0x5c>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006020:	4b04      	ldr	r3, [pc, #16]	@ (8006034 <HAL_RCC_GetHCLKFreq+0x58>)
 8006022:	681b      	ldr	r3, [r3, #0]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	58024400 	.word	0x58024400
 8006030:	0800f9b0 	.word	0x0800f9b0
 8006034:	24000004 	.word	0x24000004
 8006038:	24000000 	.word	0x24000000

0800603c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006040:	f7ff ffcc 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8006044:	4602      	mov	r2, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	091b      	lsrs	r3, r3, #4
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4904      	ldr	r1, [pc, #16]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006052:	5ccb      	ldrb	r3, [r1, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	58024400 	.word	0x58024400
 8006064:	0800f9b0 	.word	0x0800f9b0

08006068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800606c:	f7ff ffb6 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4904      	ldr	r1, [pc, #16]	@ (8006090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	58024400 	.word	0x58024400
 8006090:	0800f9b0 	.word	0x0800f9b0

08006094 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b0cc      	sub	sp, #304	@ 0x130
 800609a:	af00      	add	r7, sp, #0
 800609c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80060b8:	2500      	movs	r5, #0
 80060ba:	ea54 0305 	orrs.w	r3, r4, r5
 80060be:	d049      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ca:	d02f      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060d0:	d828      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060d6:	d01a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060dc:	d822      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e6:	d007      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060e8:	e01c      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ea:	4bb8      	ldr	r3, [pc, #736]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	4ab7      	ldr	r2, [pc, #732]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060f6:	e01a      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060fc:	3308      	adds	r3, #8
 80060fe:	2102      	movs	r1, #2
 8006100:	4618      	mov	r0, r3
 8006102:	f002 fba1 	bl	8008848 <RCCEx_PLL2_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800610e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006112:	3328      	adds	r3, #40	@ 0x28
 8006114:	2102      	movs	r1, #2
 8006116:	4618      	mov	r0, r3
 8006118:	f002 fc48 	bl	80089ac <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006136:	4ba5      	ldr	r3, [pc, #660]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800613e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006144:	4aa1      	ldr	r2, [pc, #644]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006146:	430b      	orrs	r3, r1
 8006148:	6513      	str	r3, [r2, #80]	@ 0x50
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006150:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006160:	f04f 0900 	mov.w	r9, #0
 8006164:	ea58 0309 	orrs.w	r3, r8, r9
 8006168:	d047      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800616a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006170:	2b04      	cmp	r3, #4
 8006172:	d82a      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006174:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	08006191 	.word	0x08006191
 8006180:	0800619f 	.word	0x0800619f
 8006184:	080061b5 	.word	0x080061b5
 8006188:	080061d3 	.word	0x080061d3
 800618c:	080061d3 	.word	0x080061d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006190:	4b8e      	ldr	r3, [pc, #568]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	4a8d      	ldr	r2, [pc, #564]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800619a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800619c:	e01a      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800619e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a2:	3308      	adds	r3, #8
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 fb4e 	bl	8008848 <RCCEx_PLL2_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061b2:	e00f      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b8:	3328      	adds	r3, #40	@ 0x28
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f002 fbf5 	bl	80089ac <RCCEx_PLL3_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061c8:	e004      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061dc:	4b7b      	ldr	r3, [pc, #492]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e0:	f023 0107 	bic.w	r1, r3, #7
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ea:	4a78      	ldr	r2, [pc, #480]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80061f0:	e003      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006206:	f04f 0b00 	mov.w	fp, #0
 800620a:	ea5a 030b 	orrs.w	r3, sl, fp
 800620e:	d04c      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006210:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800621a:	d030      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800621c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006220:	d829      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006222:	2bc0      	cmp	r3, #192	@ 0xc0
 8006224:	d02d      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006226:	2bc0      	cmp	r3, #192	@ 0xc0
 8006228:	d825      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800622a:	2b80      	cmp	r3, #128	@ 0x80
 800622c:	d018      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800622e:	2b80      	cmp	r3, #128	@ 0x80
 8006230:	d821      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d007      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800623a:	e01c      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623c:	4b63      	ldr	r3, [pc, #396]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	4a62      	ldr	r2, [pc, #392]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006248:	e01c      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800624a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624e:	3308      	adds	r3, #8
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f002 faf8 	bl	8008848 <RCCEx_PLL2_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800625e:	e011      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006264:	3328      	adds	r3, #40	@ 0x28
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f002 fb9f 	bl	80089ac <RCCEx_PLL3_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006274:	e006      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800627c:	e002      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006284:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800628c:	4b4f      	ldr	r3, [pc, #316]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006290:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629a:	4a4c      	ldr	r2, [pc, #304]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6513      	str	r3, [r2, #80]	@ 0x50
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80062b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80062c0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80062c4:	460b      	mov	r3, r1
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d053      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062d6:	d035      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062dc:	d82e      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062e2:	d031      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062e8:	d828      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ee:	d01a      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062f4:	d822      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80062fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062fe:	d007      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006300:	e01c      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006302:	4b32      	ldr	r3, [pc, #200]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	4a31      	ldr	r2, [pc, #196]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800630c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800630e:	e01c      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006314:	3308      	adds	r3, #8
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f002 fa95 	bl	8008848 <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006324:	e011      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800632a:	3328      	adds	r3, #40	@ 0x28
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f002 fb3c 	bl	80089ac <RCCEx_PLL3_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800633a:	e006      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006342:	e002      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006352:	4b1e      	ldr	r3, [pc, #120]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006356:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800635a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800635e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006362:	4a1a      	ldr	r2, [pc, #104]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006364:	430b      	orrs	r3, r1
 8006366:	6593      	str	r3, [r2, #88]	@ 0x58
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800636e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800637e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006388:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800638c:	460b      	mov	r3, r1
 800638e:	4313      	orrs	r3, r2
 8006390:	d056      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800639a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800639e:	d038      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063a4:	d831      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063aa:	d034      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80063ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063b0:	d82b      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063b6:	d01d      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80063b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063bc:	d825      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d006      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063c8:	e01f      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ca:	bf00      	nop
 80063cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d0:	4ba2      	ldr	r3, [pc, #648]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	4aa1      	ldr	r2, [pc, #644]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063dc:	e01c      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063e2:	3308      	adds	r3, #8
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f002 fa2e 	bl	8008848 <RCCEx_PLL2_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063f2:	e011      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f8:	3328      	adds	r3, #40	@ 0x28
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f002 fad5 	bl	80089ac <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006408:	e006      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006418:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006420:	4b8e      	ldr	r3, [pc, #568]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006424:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800642c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006430:	4a8a      	ldr	r2, [pc, #552]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006432:	430b      	orrs	r3, r1
 8006434:	6593      	str	r3, [r2, #88]	@ 0x58
 8006436:	e003      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800643c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800644c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006456:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800645a:	460b      	mov	r3, r1
 800645c:	4313      	orrs	r3, r2
 800645e:	d03a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d01f      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800646a:	2b30      	cmp	r3, #48	@ 0x30
 800646c:	d819      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800646e:	2b20      	cmp	r3, #32
 8006470:	d00c      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006472:	2b20      	cmp	r3, #32
 8006474:	d815      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d019      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800647a:	2b10      	cmp	r3, #16
 800647c:	d111      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647e:	4b77      	ldr	r3, [pc, #476]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	4a76      	ldr	r2, [pc, #472]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800648a:	e011      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800648c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006490:	3308      	adds	r3, #8
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f002 f9d7 	bl	8008848 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064a0:	e006      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064a8:	e002      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064b8:	4b68      	ldr	r3, [pc, #416]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80064c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c6:	4a65      	ldr	r2, [pc, #404]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c8:	430b      	orrs	r3, r1
 80064ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064cc:	e003      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80064e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064e6:	2300      	movs	r3, #0
 80064e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80064ec:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80064f0:	460b      	mov	r3, r1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	d051      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006500:	d035      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006506:	d82e      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006508:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800650c:	d031      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800650e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006512:	d828      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006518:	d01a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800651a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800651e:	d822      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006528:	d007      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800652a:	e01c      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652c:	4b4b      	ldr	r3, [pc, #300]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	4a4a      	ldr	r2, [pc, #296]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006538:	e01c      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800653a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653e:	3308      	adds	r3, #8
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f002 f980 	bl	8008848 <RCCEx_PLL2_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800654e:	e011      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006550:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006554:	3328      	adds	r3, #40	@ 0x28
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f002 fa27 	bl	80089ac <RCCEx_PLL3_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800657c:	4b37      	ldr	r3, [pc, #220]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800658a:	4a34      	ldr	r2, [pc, #208]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006590:	e003      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006592:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006596:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800659a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80065a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065aa:	2300      	movs	r3, #0
 80065ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d056      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065c4:	d033      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065ca:	d82c      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065d0:	d02f      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065d6:	d826      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065dc:	d02b      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065e2:	d820      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e8:	d012      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80065ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065ee:	d81a      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d022      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f8:	d115      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065fe:	3308      	adds	r3, #8
 8006600:	2101      	movs	r1, #1
 8006602:	4618      	mov	r0, r3
 8006604:	f002 f920 	bl	8008848 <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800660e:	e015      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006614:	3328      	adds	r3, #40	@ 0x28
 8006616:	2101      	movs	r1, #1
 8006618:	4618      	mov	r0, r3
 800661a:	f002 f9c7 	bl	80089ac <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006624:	e00a      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800662c:	e006      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800662e:	bf00      	nop
 8006630:	e004      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800663a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10d      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006644:	4b05      	ldr	r3, [pc, #20]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006648:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800664c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006652:	4a02      	ldr	r2, [pc, #8]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006654:	430b      	orrs	r3, r1
 8006656:	6513      	str	r3, [r2, #80]	@ 0x50
 8006658:	e006      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800665a:	bf00      	nop
 800665c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006660:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006664:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006674:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006678:	2300      	movs	r3, #0
 800667a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800667e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	d055      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006694:	d033      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800669a:	d82c      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a0:	d02f      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a6:	d826      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066ac:	d02b      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80066ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066b2:	d820      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b8:	d012      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80066ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066be:	d81a      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d022      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066c8:	d115      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ce:	3308      	adds	r3, #8
 80066d0:	2101      	movs	r1, #1
 80066d2:	4618      	mov	r0, r3
 80066d4:	f002 f8b8 	bl	8008848 <RCCEx_PLL2_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066de:	e015      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066e4:	3328      	adds	r3, #40	@ 0x28
 80066e6:	2101      	movs	r1, #1
 80066e8:	4618      	mov	r0, r3
 80066ea:	f002 f95f 	bl	80089ac <RCCEx_PLL3_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066f4:	e00a      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066fc:	e006      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800670a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006714:	4bb6      	ldr	r3, [pc, #728]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006718:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800671c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006720:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006724:	4ab2      	ldr	r2, [pc, #712]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006726:	430b      	orrs	r3, r1
 8006728:	6593      	str	r3, [r2, #88]	@ 0x58
 800672a:	e003      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006730:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006744:	2300      	movs	r3, #0
 8006746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800674a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800674e:	460b      	mov	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	d02a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d011      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800675e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006762:	d10a      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006768:	3308      	adds	r3, #8
 800676a:	2101      	movs	r1, #1
 800676c:	4618      	mov	r0, r3
 800676e:	f002 f86b 	bl	8008848 <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006778:	e004      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006780:	e000      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8006782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006784:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800678c:	4b98      	ldr	r3, [pc, #608]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800678e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006790:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	4a95      	ldr	r2, [pc, #596]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800679c:	430b      	orrs	r3, r1
 800679e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067a0:	e003      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067ba:	2300      	movs	r3, #0
 80067bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067c4:	460b      	mov	r3, r1
 80067c6:	4313      	orrs	r3, r2
 80067c8:	d037      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d4:	d00e      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067da:	d816      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x776>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d018      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80067e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067e4:	d111      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e6:	4b82      	ldr	r3, [pc, #520]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ea:	4a81      	ldr	r2, [pc, #516]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067f2:	e00f      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067f8:	3308      	adds	r3, #8
 80067fa:	2101      	movs	r1, #1
 80067fc:	4618      	mov	r0, r3
 80067fe:	f002 f823 	bl	8008848 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8006812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006814:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800681c:	4b74      	ldr	r3, [pc, #464]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800681e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006820:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682a:	4a71      	ldr	r2, [pc, #452]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800682c:	430b      	orrs	r3, r1
 800682e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006830:	e003      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006832:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006836:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800683a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006846:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800684a:	2300      	movs	r3, #0
 800684c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006850:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d03a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800685a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800685e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006860:	2b03      	cmp	r3, #3
 8006862:	d81d      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006864:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	080068a9 	.word	0x080068a9
 8006870:	0800687d 	.word	0x0800687d
 8006874:	0800688b 	.word	0x0800688b
 8006878:	080068a9 	.word	0x080068a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687c:	4b5c      	ldr	r3, [pc, #368]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	4a5b      	ldr	r2, [pc, #364]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006888:	e00f      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800688a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800688e:	3308      	adds	r3, #8
 8006890:	2102      	movs	r1, #2
 8006892:	4618      	mov	r0, r3
 8006894:	f001 ffd8 	bl	8008848 <RCCEx_PLL2_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800689e:	e004      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068a6:	e000      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80068a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068b2:	4b4f      	ldr	r3, [pc, #316]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b6:	f023 0103 	bic.w	r1, r3, #3
 80068ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c0:	4a4b      	ldr	r2, [pc, #300]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068c6:	e003      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f000 80a0 	beq.w	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068f2:	4b40      	ldr	r3, [pc, #256]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a3f      	ldr	r2, [pc, #252]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068fe:	f7fb fded 	bl	80024dc <HAL_GetTick>
 8006902:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006906:	e00b      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006908:	f7fb fde8 	bl	80024dc <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b64      	cmp	r3, #100	@ 0x64
 8006916:	d903      	bls.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800691e:	e005      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006920:	4b34      	ldr	r3, [pc, #208]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0ed      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800692c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006930:	2b00      	cmp	r3, #0
 8006932:	d17a      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006934:	4b2e      	ldr	r3, [pc, #184]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006936:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800693c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006940:	4053      	eors	r3, r2
 8006942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006946:	2b00      	cmp	r3, #0
 8006948:	d015      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694a:	4b29      	ldr	r3, [pc, #164]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006952:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006956:	4b26      	ldr	r3, [pc, #152]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695a:	4a25      	ldr	r2, [pc, #148]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800695c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006960:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006962:	4b23      	ldr	r3, [pc, #140]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	4a22      	ldr	r2, [pc, #136]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800696c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800696e:	4a20      	ldr	r2, [pc, #128]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006970:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006974:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006976:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800697a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800697e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006982:	d118      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006984:	f7fb fdaa 	bl	80024dc <HAL_GetTick>
 8006988:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800698c:	e00d      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fb fda5 	bl	80024dc <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006998:	1ad2      	subs	r2, r2, r3
 800699a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800699e:	429a      	cmp	r2, r3
 80069a0:	d903      	bls.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80069a8:	e005      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069aa:	4b11      	ldr	r3, [pc, #68]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0eb      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80069b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d130      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ce:	d115      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x968>
 80069d0:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069e0:	091a      	lsrs	r2, r3, #4
 80069e2:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	4a02      	ldr	r2, [pc, #8]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6113      	str	r3, [r2, #16]
 80069ec:	e00c      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80069ee:	bf00      	nop
 80069f0:	58024400 	.word	0x58024400
 80069f4:	58024800 	.word	0x58024800
 80069f8:	00ffffcf 	.word	0x00ffffcf
 80069fc:	4bd4      	ldr	r3, [pc, #848]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	4ad3      	ldr	r2, [pc, #844]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a02:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a06:	6113      	str	r3, [r2, #16]
 8006a08:	4bd1      	ldr	r3, [pc, #836]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a0a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a18:	4acd      	ldr	r2, [pc, #820]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a1e:	e008      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a24:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006a28:	e003      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f002 0301 	and.w	r3, r2, #1
 8006a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a42:	2300      	movs	r3, #0
 8006a44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f000 808b 	beq.w	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5c:	2b28      	cmp	r3, #40	@ 0x28
 8006a5e:	d86b      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006b41 	.word	0x08006b41
 8006a6c:	08006b39 	.word	0x08006b39
 8006a70:	08006b39 	.word	0x08006b39
 8006a74:	08006b39 	.word	0x08006b39
 8006a78:	08006b39 	.word	0x08006b39
 8006a7c:	08006b39 	.word	0x08006b39
 8006a80:	08006b39 	.word	0x08006b39
 8006a84:	08006b39 	.word	0x08006b39
 8006a88:	08006b0d 	.word	0x08006b0d
 8006a8c:	08006b39 	.word	0x08006b39
 8006a90:	08006b39 	.word	0x08006b39
 8006a94:	08006b39 	.word	0x08006b39
 8006a98:	08006b39 	.word	0x08006b39
 8006a9c:	08006b39 	.word	0x08006b39
 8006aa0:	08006b39 	.word	0x08006b39
 8006aa4:	08006b39 	.word	0x08006b39
 8006aa8:	08006b23 	.word	0x08006b23
 8006aac:	08006b39 	.word	0x08006b39
 8006ab0:	08006b39 	.word	0x08006b39
 8006ab4:	08006b39 	.word	0x08006b39
 8006ab8:	08006b39 	.word	0x08006b39
 8006abc:	08006b39 	.word	0x08006b39
 8006ac0:	08006b39 	.word	0x08006b39
 8006ac4:	08006b39 	.word	0x08006b39
 8006ac8:	08006b41 	.word	0x08006b41
 8006acc:	08006b39 	.word	0x08006b39
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006b39 	.word	0x08006b39
 8006adc:	08006b39 	.word	0x08006b39
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b39 	.word	0x08006b39
 8006ae8:	08006b41 	.word	0x08006b41
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b39 	.word	0x08006b39
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b39 	.word	0x08006b39
 8006b00:	08006b39 	.word	0x08006b39
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006b41 	.word	0x08006b41
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b10:	3308      	adds	r3, #8
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fe97 	bl	8008848 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b26:	3328      	adds	r3, #40	@ 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 ff3e 	bl	80089ac <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b4a:	4b81      	ldr	r3, [pc, #516]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f002 0302 	and.w	r3, r2, #2
 8006b76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b80:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d042      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d825      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006b94:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006bb5 	.word	0x08006bb5
 8006ba4:	08006bcb 	.word	0x08006bcb
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fe43 	bl	8008848 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bce:	3328      	adds	r3, #40	@ 0x28
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 feea 	bl	80089ac <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bf2:	4b57      	ldr	r3, [pc, #348]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf6:	f023 0107 	bic.w	r1, r3, #7
 8006bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c00:	4a53      	ldr	r2, [pc, #332]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c06:	e003      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c0c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f002 0304 	and.w	r3, r2, #4
 8006c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d044      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c38:	2b05      	cmp	r3, #5
 8006c3a:	d825      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c5d 	.word	0x08006c5d
 8006c4c:	08006c73 	.word	0x08006c73
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c60:	3308      	adds	r3, #8
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fdef 	bl	8008848 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c70:	e00f      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c76:	3328      	adds	r3, #40	@ 0x28
 8006c78:	2101      	movs	r1, #1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 fe96 	bl	80089ac <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9e:	f023 0107 	bic.w	r1, r3, #7
 8006ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006caa:	4a29      	ldr	r2, [pc, #164]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f002 0320 	and.w	r3, r2, #32
 8006cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	d057      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ce6:	d035      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cec:	d82c      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf2:	d031      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf8:	d826      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006cfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cfe:	d02d      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006d00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d04:	d820      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0a:	d012      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d10:	d81a      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d024      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d1a:	d115      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d20:	3308      	adds	r3, #8
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 fd8f 	bl	8008848 <RCCEx_PLL2_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d30:	e017      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d36:	3328      	adds	r3, #40	@ 0x28
 8006d38:	2102      	movs	r1, #2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fe36 	bl	80089ac <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d46:	e00c      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006d4e:	e008      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006d50:	58024400 	.word	0x58024400
        break;
 8006d54:	bf00      	nop
 8006d56:	e004      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e002      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d5c:	bf00      	nop
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d6a:	4bc2      	ldr	r3, [pc, #776]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d7a:	4abe      	ldr	r2, [pc, #760]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006da0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d055      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006db2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006db6:	d033      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006db8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006dbc:	d82c      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc2:	d02f      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc8:	d826      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006dca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dce:	d02b      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006dd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dd4:	d820      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dda:	d012      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006de0:	d81a      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d022      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dea:	d115      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006df0:	3308      	adds	r3, #8
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fd27 	bl	8008848 <RCCEx_PLL2_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e00:	e015      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e06:	3328      	adds	r3, #40	@ 0x28
 8006e08:	2102      	movs	r1, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 fdce 	bl	80089ac <RCCEx_PLL3_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e16:	e00a      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006e1e:	e006      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e20:	bf00      	nop
 8006e22:	e004      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e24:	bf00      	nop
 8006e26:	e002      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e28:	bf00      	nop
 8006e2a:	e000      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e36:	4b8f      	ldr	r3, [pc, #572]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e46:	4a8b      	ldr	r2, [pc, #556]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e4c:	e003      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e66:	2300      	movs	r3, #0
 8006e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e6c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d055      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e82:	d033      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006e84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e88:	d82c      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e8e:	d02f      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e94:	d826      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006e96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e9a:	d02b      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006e9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ea0:	d820      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006ea2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ea6:	d012      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eac:	d81a      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d022      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb6:	d115      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 fcc1 	bl	8008848 <RCCEx_PLL2_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e015      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ed2:	3328      	adds	r3, #40	@ 0x28
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 fd68 	bl	80089ac <RCCEx_PLL3_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ee2:	e00a      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006eea:	e006      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006eec:	bf00      	nop
 8006eee:	e004      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f02:	4b5c      	ldr	r3, [pc, #368]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f06:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f12:	4a58      	ldr	r2, [pc, #352]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f14:	430b      	orrs	r3, r1
 8006f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f18:	e003      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f002 0308 	and.w	r3, r2, #8
 8006f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f32:	2300      	movs	r3, #0
 8006f34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f38:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	d01e      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f4e:	d10c      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f54:	3328      	adds	r3, #40	@ 0x28
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fd27 	bl	80089ac <RCCEx_PLL3_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f6a:	4b42      	ldr	r3, [pc, #264]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f002 0310 	and.w	r3, r2, #16
 8006f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f96:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d01e      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fac:	d10c      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fb2:	3328      	adds	r3, #40	@ 0x28
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fcf8 	bl	80089ac <RCCEx_PLL3_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fcc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fd8:	4a26      	ldr	r2, [pc, #152]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ff4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	d040      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800700a:	d022      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800700c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007010:	d81b      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8007016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701a:	d00b      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800701c:	e015      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007022:	3308      	adds	r3, #8
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f001 fc0e 	bl	8008848 <RCCEx_PLL2_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007032:	e00f      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007038:	3328      	adds	r3, #40	@ 0x28
 800703a:	2102      	movs	r1, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fcb5 	bl	80089ac <RCCEx_PLL3_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007048:	e004      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007050:	e000      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8007052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007054:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10d      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800705e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007060:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007068:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800706c:	4a01      	ldr	r2, [pc, #4]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800706e:	430b      	orrs	r3, r1
 8007070:	6593      	str	r3, [r2, #88]	@ 0x58
 8007072:	e005      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800707c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800708c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800708e:	2300      	movs	r3, #0
 8007090:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007092:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007096:	460b      	mov	r3, r1
 8007098:	4313      	orrs	r3, r2
 800709a:	d03b      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800709c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070a8:	d01f      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80070aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070ae:	d818      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80070b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070b4:	d003      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80070b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ba:	d007      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80070bc:	e011      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070be:	4b64      	ldr	r3, [pc, #400]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c2:	4a63      	ldr	r2, [pc, #396]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070ca:	e00f      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070d0:	3328      	adds	r3, #40	@ 0x28
 80070d2:	2101      	movs	r1, #1
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fc69 	bl	80089ac <RCCEx_PLL3_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80070ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10b      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f4:	4b56      	ldr	r3, [pc, #344]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007104:	4a52      	ldr	r2, [pc, #328]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007106:	430b      	orrs	r3, r1
 8007108:	6553      	str	r3, [r2, #84]	@ 0x54
 800710a:	e003      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007110:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007120:	673b      	str	r3, [r7, #112]	@ 0x70
 8007122:	2300      	movs	r3, #0
 8007124:	677b      	str	r3, [r7, #116]	@ 0x74
 8007126:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d031      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800713a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800713e:	d007      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007140:	e011      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007142:	4b43      	ldr	r3, [pc, #268]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	4a42      	ldr	r2, [pc, #264]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800714e:	e00e      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007154:	3308      	adds	r3, #8
 8007156:	2102      	movs	r1, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fb75 	bl	8008848 <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007164:	e003      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800716c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007176:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800717e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007184:	4a32      	ldr	r2, [pc, #200]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007186:	430b      	orrs	r3, r1
 8007188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800718a:	e003      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007190:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071a2:	2300      	movs	r3, #0
 80071a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071aa:	460b      	mov	r3, r1
 80071ac:	4313      	orrs	r3, r2
 80071ae:	d00c      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071b4:	3328      	adds	r3, #40	@ 0x28
 80071b6:	2102      	movs	r1, #2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fbf7 	bl	80089ac <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80071d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80071d8:	2300      	movs	r3, #0
 80071da:	667b      	str	r3, [r7, #100]	@ 0x64
 80071dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071e0:	460b      	mov	r3, r1
 80071e2:	4313      	orrs	r3, r2
 80071e4:	d03a      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f2:	d018      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80071f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f8:	d811      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80071fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071fe:	d014      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8007200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007204:	d80b      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d011      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800720a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720e:	d106      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007210:	4b0f      	ldr	r3, [pc, #60]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007214:	4a0e      	ldr	r2, [pc, #56]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800721a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800721c:	e008      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007224:	e004      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007226:	bf00      	nop
 8007228:	e002      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800722a:	bf00      	nop
 800722c:	e000      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800722e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007230:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10d      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007238:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007248:	4a01      	ldr	r2, [pc, #4]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800724a:	430b      	orrs	r3, r1
 800724c:	6553      	str	r3, [r2, #84]	@ 0x54
 800724e:	e005      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007254:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007258:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800725c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007268:	65bb      	str	r3, [r7, #88]	@ 0x58
 800726a:	2300      	movs	r3, #0
 800726c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800726e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007272:	460b      	mov	r3, r1
 8007274:	4313      	orrs	r3, r2
 8007276:	d009      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007278:	4baa      	ldr	r3, [pc, #680]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800727a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800727c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007286:	4aa7      	ldr	r2, [pc, #668]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007288:	430b      	orrs	r3, r1
 800728a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800728c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007298:	653b      	str	r3, [r7, #80]	@ 0x50
 800729a:	2300      	movs	r3, #0
 800729c:	657b      	str	r3, [r7, #84]	@ 0x54
 800729e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072a8:	4b9e      	ldr	r3, [pc, #632]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80072b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072b8:	4a9a      	ldr	r2, [pc, #616]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072cc:	2300      	movs	r3, #0
 80072ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80072d4:	460b      	mov	r3, r1
 80072d6:	4313      	orrs	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072da:	4b92      	ldr	r3, [pc, #584]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e8:	4a8e      	ldr	r2, [pc, #568]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80072fc:	2300      	movs	r3, #0
 80072fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007300:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007304:	460b      	mov	r3, r1
 8007306:	4313      	orrs	r3, r2
 8007308:	d00e      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800730a:	4b86      	ldr	r3, [pc, #536]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	4a85      	ldr	r2, [pc, #532]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007310:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007314:	6113      	str	r3, [r2, #16]
 8007316:	4b83      	ldr	r3, [pc, #524]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007318:	6919      	ldr	r1, [r3, #16]
 800731a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800731e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007322:	4a80      	ldr	r2, [pc, #512]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007324:	430b      	orrs	r3, r1
 8007326:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007334:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007336:	2300      	movs	r3, #0
 8007338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800733e:	460b      	mov	r3, r1
 8007340:	4313      	orrs	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007344:	4b77      	ldr	r3, [pc, #476]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007348:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800734c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007352:	4a74      	ldr	r2, [pc, #464]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007354:	430b      	orrs	r3, r1
 8007356:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
 800736a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d00a      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007374:	4b6b      	ldr	r3, [pc, #428]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007378:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800737c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007384:	4a67      	ldr	r2, [pc, #412]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007386:	430b      	orrs	r3, r1
 8007388:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800738a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	2100      	movs	r1, #0
 8007394:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800739c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073a0:	460b      	mov	r3, r1
 80073a2:	4313      	orrs	r3, r2
 80073a4:	d011      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073aa:	3308      	adds	r3, #8
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fa4a 	bl	8008848 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80073ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	2100      	movs	r1, #0
 80073d4:	6239      	str	r1, [r7, #32]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	627b      	str	r3, [r7, #36]	@ 0x24
 80073dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d011      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073ea:	3308      	adds	r3, #8
 80073ec:	2101      	movs	r1, #1
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 fa2a 	bl	8008848 <RCCEx_PLL2_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80073fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007402:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007406:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800740a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	2100      	movs	r1, #0
 8007414:	61b9      	str	r1, [r7, #24]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007420:	460b      	mov	r3, r1
 8007422:	4313      	orrs	r3, r2
 8007424:	d011      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800742a:	3308      	adds	r3, #8
 800742c:	2102      	movs	r1, #2
 800742e:	4618      	mov	r0, r3
 8007430:	f001 fa0a 	bl	8008848 <RCCEx_PLL2_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800743a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007446:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800744a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	2100      	movs	r1, #0
 8007454:	6139      	str	r1, [r7, #16]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007460:	460b      	mov	r3, r1
 8007462:	4313      	orrs	r3, r2
 8007464:	d011      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800746a:	3328      	adds	r3, #40	@ 0x28
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fa9c 	bl	80089ac <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800747a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007482:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007486:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800748a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	2100      	movs	r1, #0
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074a0:	460b      	mov	r3, r1
 80074a2:	4313      	orrs	r3, r2
 80074a4:	d011      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074aa:	3328      	adds	r3, #40	@ 0x28
 80074ac:	2101      	movs	r1, #1
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 fa7c 	bl	80089ac <RCCEx_PLL3_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80074ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80074c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	2100      	movs	r1, #0
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d011      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80074ea:	3328      	adds	r3, #40	@ 0x28
 80074ec:	2102      	movs	r1, #2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fa5c 	bl	80089ac <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80074fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007506:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800750a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
}
 8007518:	4618      	mov	r0, r3
 800751a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800751e:	46bd      	mov	sp, r7
 8007520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007524:	58024400 	.word	0x58024400

08007528 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b090      	sub	sp, #64	@ 0x40
 800752c:	af00      	add	r7, sp, #0
 800752e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007536:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800753a:	430b      	orrs	r3, r1
 800753c:	f040 8094 	bne.w	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007540:	4b9e      	ldr	r3, [pc, #632]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2b04      	cmp	r3, #4
 800754e:	f200 8087 	bhi.w	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	0800756d 	.word	0x0800756d
 800755c:	08007595 	.word	0x08007595
 8007560:	080075bd 	.word	0x080075bd
 8007564:	08007659 	.word	0x08007659
 8007568:	080075e5 	.word	0x080075e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800756c:	4b93      	ldr	r3, [pc, #588]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007578:	d108      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800757a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f810 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007588:	f000 bd45 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007590:	f000 bd41 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007594:	4b89      	ldr	r3, [pc, #548]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800759c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a0:	d108      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a2:	f107 0318 	add.w	r3, r7, #24
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fd54 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b0:	f000 bd31 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b8:	f000 bd2d 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075bc:	4b7f      	ldr	r3, [pc, #508]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c8:	d108      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fe94 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d8:	f000 bd1d 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e0:	f000 bd19 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075e4:	4b75      	ldr	r3, [pc, #468]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ee:	4b73      	ldr	r3, [pc, #460]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d10c      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80075fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d109      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007600:	4b6e      	ldr	r3, [pc, #440]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	08db      	lsrs	r3, r3, #3
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	4a6d      	ldr	r2, [pc, #436]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007612:	e01f      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007614:	4b69      	ldr	r3, [pc, #420]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007620:	d106      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007628:	d102      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800762a:	4b66      	ldr	r3, [pc, #408]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800762c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800762e:	e011      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007630:	4b62      	ldr	r3, [pc, #392]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800763c:	d106      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800763e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007644:	d102      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007646:	4b60      	ldr	r3, [pc, #384]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800764a:	e003      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007650:	f000 bce1 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007654:	f000 bcdf 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007658:	4b5c      	ldr	r3, [pc, #368]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800765c:	f000 bcdb 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007664:	f000 bcd7 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007670:	430b      	orrs	r3, r1
 8007672:	f040 80ad 	bne.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007676:	4b51      	ldr	r3, [pc, #324]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800767a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007686:	d056      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800768e:	f200 8090 	bhi.w	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2bc0      	cmp	r3, #192	@ 0xc0
 8007696:	f000 8088 	beq.w	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	2bc0      	cmp	r3, #192	@ 0xc0
 800769e:	f200 8088 	bhi.w	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	2b80      	cmp	r3, #128	@ 0x80
 80076a6:	d032      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	2b80      	cmp	r3, #128	@ 0x80
 80076ac:	f200 8081 	bhi.w	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b8:	2b40      	cmp	r3, #64	@ 0x40
 80076ba:	d014      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80076bc:	e079      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076be:	4b3f      	ldr	r3, [pc, #252]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ca:	d108      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 ff67 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076da:	f000 bc9c 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e2:	f000 bc98 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076e6:	4b35      	ldr	r3, [pc, #212]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f2:	d108      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f4:	f107 0318 	add.w	r3, r7, #24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fcab 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007702:	f000 bc88 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770a:	f000 bc84 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800770e:	4b2b      	ldr	r3, [pc, #172]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771a:	d108      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fdeb 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772a:	f000 bc74 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007732:	f000 bc70 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007736:	4b21      	ldr	r3, [pc, #132]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007740:	4b1e      	ldr	r3, [pc, #120]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b04      	cmp	r3, #4
 800774a:	d10c      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800774c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007752:	4b1a      	ldr	r3, [pc, #104]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	08db      	lsrs	r3, r3, #3
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	4a18      	ldr	r2, [pc, #96]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800775e:	fa22 f303 	lsr.w	r3, r2, r3
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007764:	e01f      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007766:	4b15      	ldr	r3, [pc, #84]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007772:	d106      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800777a:	d102      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800777e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007780:	e011      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007782:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800778e:	d106      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007796:	d102      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007798:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800779a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800779c:	e003      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077a2:	f000 bc38 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077a6:	f000 bc36 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077aa:	4b08      	ldr	r3, [pc, #32]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ae:	f000 bc32 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b6:	f000 bc2e 	b.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	003d0900 	.word	0x003d0900
 80077c8:	017d7840 	.word	0x017d7840
 80077cc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80077d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80077d8:	430b      	orrs	r3, r1
 80077da:	f040 809c 	bne.w	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80077de:	4b9e      	ldr	r3, [pc, #632]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80077e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077ee:	d054      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077f6:	f200 808b 	bhi.w	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007800:	f000 8083 	beq.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800780a:	f200 8081 	bhi.w	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007814:	d02f      	beq.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800781c:	d878      	bhi.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800782a:	d012      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800782c:	e070      	b.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800782e:	4b8a      	ldr	r3, [pc, #552]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783a:	d107      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800783c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007840:	4618      	mov	r0, r3
 8007842:	f000 feaf 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784a:	e3e4      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e3e1      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007852:	4b81      	ldr	r3, [pc, #516]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800785e:	d107      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007860:	f107 0318 	add.w	r3, r7, #24
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fbf5 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	e3d2      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e3cf      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007876:	4b78      	ldr	r3, [pc, #480]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800787e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007882:	d107      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fd37 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007892:	e3c0      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007898:	e3bd      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800789a:	4b6f      	ldr	r3, [pc, #444]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800789c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d10c      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b6:	4b68      	ldr	r3, [pc, #416]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	08db      	lsrs	r3, r3, #3
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	4a66      	ldr	r2, [pc, #408]	@ (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c8:	e01e      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ca:	4b63      	ldr	r3, [pc, #396]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d6:	d106      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078de:	d102      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078e0:	4b5f      	ldr	r3, [pc, #380]	@ (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e4:	e010      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078e6:	4b5c      	ldr	r3, [pc, #368]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078fc:	4b59      	ldr	r3, [pc, #356]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007906:	e386      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007908:	e385      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800790a:	4b57      	ldr	r3, [pc, #348]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790e:	e382      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007914:	e37f      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800791e:	430b      	orrs	r3, r1
 8007920:	f040 80a7 	bne.w	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007924:	4b4c      	ldr	r3, [pc, #304]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007928:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800792c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007934:	d055      	beq.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800793c:	f200 8096 	bhi.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007946:	f000 8084 	beq.w	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007950:	f200 808c 	bhi.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800795a:	d030      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007962:	f200 8083 	bhi.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007972:	d012      	beq.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007974:	e07a      	b.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007976:	4b38      	ldr	r3, [pc, #224]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800797e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007982:	d107      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fe0b 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800798e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007992:	e340      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007998:	e33d      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800799a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079a6:	d107      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a8:	f107 0318 	add.w	r3, r7, #24
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fb51 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b6:	e32e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079bc:	e32b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079be:	4b26      	ldr	r3, [pc, #152]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ca:	d107      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fc93 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079da:	e31c      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e0:	e319      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d10c      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80079f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079fe:	4b16      	ldr	r3, [pc, #88]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	08db      	lsrs	r3, r3, #3
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	4a14      	ldr	r2, [pc, #80]	@ (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a10:	e01e      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a12:	4b11      	ldr	r3, [pc, #68]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a1e:	d106      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a26:	d102      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a28:	4b0d      	ldr	r3, [pc, #52]	@ (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a2c:	e010      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3a:	d106      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a42:	d102      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a44:	4b07      	ldr	r3, [pc, #28]	@ (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a48:	e002      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a4e:	e2e2      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a50:	e2e1      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a52:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a56:	e2de      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	03d09000 	.word	0x03d09000
 8007a60:	003d0900 	.word	0x003d0900
 8007a64:	017d7840 	.word	0x017d7840
 8007a68:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a70:	e2d1      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a76:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	f040 809c 	bne.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007a80:	4b93      	ldr	r3, [pc, #588]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a84:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007a88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a90:	d054      	beq.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a98:	f200 808b 	bhi.w	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aa2:	f000 8083 	beq.w	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aac:	f200 8081 	bhi.w	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ab6:	d02f      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007abe:	d878      	bhi.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007acc:	d012      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007ace:	e070      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007adc:	d107      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fd5e 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aec:	e293      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af2:	e290      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007af4:	4b76      	ldr	r3, [pc, #472]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007afc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b00:	d107      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b02:	f107 0318 	add.w	r3, r7, #24
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 faa4 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b10:	e281      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b16:	e27e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b18:	4b6d      	ldr	r3, [pc, #436]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b24:	d107      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b26:	f107 030c 	add.w	r3, r7, #12
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fbe6 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b34:	e26f      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b3a:	e26c      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b3c:	4b64      	ldr	r3, [pc, #400]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b46:	4b62      	ldr	r3, [pc, #392]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d10c      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b58:	4b5d      	ldr	r3, [pc, #372]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	4a5c      	ldr	r2, [pc, #368]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6a:	e01e      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b6c:	4b58      	ldr	r3, [pc, #352]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b78:	d106      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b80:	d102      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b82:	4b55      	ldr	r3, [pc, #340]	@ (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b86:	e010      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b88:	4b51      	ldr	r3, [pc, #324]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b94:	d106      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b9c:	d102      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba2:	e002      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ba8:	e235      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007baa:	e234      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bac:	4b4c      	ldr	r3, [pc, #304]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb0:	e231      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb6:	e22e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	f040 808f 	bne.w	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007bc6:	4b42      	ldr	r3, [pc, #264]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bca:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007bce:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bd6:	d06b      	beq.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bde:	d874      	bhi.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007be6:	d056      	beq.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bee:	d86c      	bhi.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bf6:	d03b      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bfe:	d864      	bhi.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c06:	d021      	beq.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c0e:	d85c      	bhi.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c1c:	d004      	beq.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007c1e:	e054      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fe fa0c 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8007c24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c26:	e1f6      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c28:	4b29      	ldr	r3, [pc, #164]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c34:	d107      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c36:	f107 0318 	add.w	r3, r7, #24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fa0a 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c44:	e1e7      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4a:	e1e4      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c4c:	4b20      	ldr	r3, [pc, #128]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c58:	d107      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5a:	f107 030c 	add.w	r3, r7, #12
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fb4c 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c68:	e1d5      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6e:	e1d2      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c70:	4b17      	ldr	r3, [pc, #92]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d109      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c7c:	4b14      	ldr	r3, [pc, #80]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	08db      	lsrs	r3, r3, #3
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	4a13      	ldr	r2, [pc, #76]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c8e:	e1c2      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c94:	e1bf      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c96:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca2:	d102      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca8:	e1b5      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cae:	e1b2      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cb0:	4b07      	ldr	r3, [pc, #28]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cbc:	d102      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007cbe:	4b07      	ldr	r3, [pc, #28]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cc2:	e1a8      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc8:	e1a5      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cce:	e1a2      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cd0:	58024400 	.word	0x58024400
 8007cd4:	03d09000 	.word	0x03d09000
 8007cd8:	003d0900 	.word	0x003d0900
 8007cdc:	017d7840 	.word	0x017d7840
 8007ce0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007cec:	430b      	orrs	r3, r1
 8007cee:	d173      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007cf0:	4b9c      	ldr	r3, [pc, #624]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cf8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d00:	d02f      	beq.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d08:	d863      	bhi.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d16:	d012      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007d18:	e05b      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d1a:	4b92      	ldr	r3, [pc, #584]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d28:	f107 0318 	add.w	r3, r7, #24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f991 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d36:	e16e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d3c:	e16b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d3e:	4b89      	ldr	r3, [pc, #548]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d4a:	d107      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4c:	f107 030c 	add.w	r3, r7, #12
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fad3 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d5a:	e15c      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d60:	e159      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d62:	4b80      	ldr	r3, [pc, #512]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d10c      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d7e:	4b79      	ldr	r3, [pc, #484]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	08db      	lsrs	r3, r3, #3
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	4a77      	ldr	r2, [pc, #476]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d90:	e01e      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d92:	4b74      	ldr	r3, [pc, #464]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d9e:	d106      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da6:	d102      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007da8:	4b70      	ldr	r3, [pc, #448]	@ (8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dac:	e010      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dae:	4b6d      	ldr	r3, [pc, #436]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007db6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dba:	d106      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc2:	d102      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dc8:	e002      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007dce:	e122      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dd0:	e121      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd6:	e11e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007de0:	430b      	orrs	r3, r1
 8007de2:	d133      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007de4:	4b5f      	ldr	r3, [pc, #380]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfa:	d012      	beq.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007dfc:	e023      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dfe:	4b59      	ldr	r3, [pc, #356]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e0a:	d107      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fbc7 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1a:	e0fc      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e20:	e0f9      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e22:	4b50      	ldr	r3, [pc, #320]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e2e:	d107      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e30:	f107 0318 	add.w	r3, r7, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f90d 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3e:	e0ea      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e44:	e0e7      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4a:	e0e4      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e50:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007e54:	430b      	orrs	r3, r1
 8007e56:	f040 808d 	bne.w	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e5a:	4b42      	ldr	r3, [pc, #264]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007e62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e6a:	d06b      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e72:	d874      	bhi.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7a:	d056      	beq.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e82:	d86c      	bhi.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e8a:	d03b      	beq.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e92:	d864      	bhi.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e9a:	d021      	beq.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea2:	d85c      	bhi.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eb0:	d004      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007eb2:	e054      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007eb4:	f000 f8b8 	bl	8008028 <HAL_RCCEx_GetD3PCLK1Freq>
 8007eb8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007eba:	e0ac      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ebc:	4b29      	ldr	r3, [pc, #164]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ec8:	d107      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eca:	f107 0318 	add.w	r3, r7, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f8c0 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed8:	e09d      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ede:	e09a      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ee0:	4b20      	ldr	r3, [pc, #128]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eec:	d107      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eee:	f107 030c 	add.w	r3, r7, #12
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fa02 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efc:	e08b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f02:	e088      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f04:	4b17      	ldr	r3, [pc, #92]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d109      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f10:	4b14      	ldr	r3, [pc, #80]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a13      	ldr	r2, [pc, #76]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f22:	e078      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f28:	e075      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f36:	d102      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007f38:	4b0c      	ldr	r3, [pc, #48]	@ (8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f3c:	e06b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f42:	e068      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f44:	4b07      	ldr	r3, [pc, #28]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f50:	d102      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007f52:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f56:	e05e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f5c:	e05b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f62:	e058      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f64:	58024400 	.word	0x58024400
 8007f68:	03d09000 	.word	0x03d09000
 8007f6c:	003d0900 	.word	0x003d0900
 8007f70:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f78:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	d148      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007f80:	4b27      	ldr	r3, [pc, #156]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f90:	d02a      	beq.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f98:	d838      	bhi.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fa6:	d00d      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007fa8:	e030      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007faa:	4b1d      	ldr	r3, [pc, #116]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fb6:	d102      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fbc:	e02b      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc2:	e028      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fc4:	4b16      	ldr	r3, [pc, #88]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fd0:	d107      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fae4 	bl	80085a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe0:	e019      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fe6:	e016      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ff4:	d107      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff6:	f107 0318 	add.w	r3, r7, #24
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f82a 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008004:	e007      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800a:	e004      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008010:	e001      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008018:	4618      	mov	r0, r3
 800801a:	3740      	adds	r7, #64	@ 0x40
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	58024400 	.word	0x58024400
 8008024:	017d7840 	.word	0x017d7840

08008028 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800802c:	f7fd ffd6 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8008030:	4602      	mov	r2, r0
 8008032:	4b06      	ldr	r3, [pc, #24]	@ (800804c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	4904      	ldr	r1, [pc, #16]	@ (8008050 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800803e:	5ccb      	ldrb	r3, [r1, r3]
 8008040:	f003 031f 	and.w	r3, r3, #31
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008048:	4618      	mov	r0, r3
 800804a:	bd80      	pop	{r7, pc}
 800804c:	58024400 	.word	0x58024400
 8008050:	0800f9b0 	.word	0x0800f9b0

08008054 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	@ 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800805c:	4ba1      	ldr	r3, [pc, #644]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008066:	4b9f      	ldr	r3, [pc, #636]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	0b1b      	lsrs	r3, r3, #12
 800806c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008070:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008072:	4b9c      	ldr	r3, [pc, #624]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800807e:	4b99      	ldr	r3, [pc, #612]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008082:	08db      	lsrs	r3, r3, #3
 8008084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	fb02 f303 	mul.w	r3, r2, r3
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8111 	beq.w	80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f000 8083 	beq.w	80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	f200 80a1 	bhi.w	80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d056      	beq.n	800816c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080be:	e099      	b.n	80081f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c0:	4b88      	ldr	r3, [pc, #544]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02d      	beq.n	8008128 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080cc:	4b85      	ldr	r3, [pc, #532]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	08db      	lsrs	r3, r3, #3
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	4a84      	ldr	r2, [pc, #528]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
 80080dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f6:	4b7b      	ldr	r3, [pc, #492]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008106:	ed97 6a03 	vldr	s12, [r7, #12]
 800810a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800810e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800811a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800811e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008126:	e087      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008132:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813a:	4b6a      	ldr	r3, [pc, #424]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814a:	ed97 6a03 	vldr	s12, [r7, #12]
 800814e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800815e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800816a:	e065      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800817a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817e:	4b59      	ldr	r3, [pc, #356]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008192:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ae:	e043      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c2:	4b48      	ldr	r3, [pc, #288]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f2:	e021      	b.n	8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008206:	4b37      	ldr	r3, [pc, #220]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008216:	ed97 6a03 	vldr	s12, [r7, #12]
 800821a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800821e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800822a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008236:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008238:	4b2a      	ldr	r3, [pc, #168]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823c:	0a5b      	lsrs	r3, r3, #9
 800823e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800824e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008252:	edd7 6a07 	vldr	s13, [r7, #28]
 8008256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825e:	ee17 2a90 	vmov	r2, s15
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008266:	4b1f      	ldr	r3, [pc, #124]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	0c1b      	lsrs	r3, r3, #16
 800826c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800827c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008280:	edd7 6a07 	vldr	s13, [r7, #28]
 8008284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800828c:	ee17 2a90 	vmov	r2, s15
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008294:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	0e1b      	lsrs	r3, r3, #24
 800829a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ba:	ee17 2a90 	vmov	r2, s15
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082c2:	e008      	b.n	80082d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	@ 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	46000000 	.word	0x46000000
 80082f0:	4c742400 	.word	0x4c742400
 80082f4:	4a742400 	.word	0x4a742400
 80082f8:	4bbebc20 	.word	0x4bbebc20

080082fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	@ 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008304:	4ba1      	ldr	r3, [pc, #644]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800830e:	4b9f      	ldr	r3, [pc, #636]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	0d1b      	lsrs	r3, r3, #20
 8008314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008318:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800831a:	4b9c      	ldr	r3, [pc, #624]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008326:	4b99      	ldr	r3, [pc, #612]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832a:	08db      	lsrs	r3, r3, #3
 800832c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8111 	beq.w	800856c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b02      	cmp	r3, #2
 800834e:	f000 8083 	beq.w	8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b02      	cmp	r3, #2
 8008356:	f200 80a1 	bhi.w	800849c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d056      	beq.n	8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008366:	e099      	b.n	800849c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008368:	4b88      	ldr	r3, [pc, #544]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	d02d      	beq.n	80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008374:	4b85      	ldr	r3, [pc, #532]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	08db      	lsrs	r3, r3, #3
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	4a84      	ldr	r2, [pc, #528]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008380:	fa22 f303 	lsr.w	r3, r2, r3
 8008384:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839e:	4b7b      	ldr	r3, [pc, #492]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083ce:	e087      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b6a      	ldr	r3, [pc, #424]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008412:	e065      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008426:	4b59      	ldr	r3, [pc, #356]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008436:	ed97 6a03 	vldr	s12, [r7, #12]
 800843a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800843e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008456:	e043      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b48      	ldr	r3, [pc, #288]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	ed97 6a03 	vldr	s12, [r7, #12]
 800847e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800849a:	e021      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ae:	4b37      	ldr	r3, [pc, #220]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084be:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084e0:	4b2a      	ldr	r3, [pc, #168]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e4:	0a5b      	lsrs	r3, r3, #9
 80084e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008506:	ee17 2a90 	vmov	r2, s15
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800850e:	4b1f      	ldr	r3, [pc, #124]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	0c1b      	lsrs	r3, r3, #16
 8008514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008528:	edd7 6a07 	vldr	s13, [r7, #28]
 800852c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008534:	ee17 2a90 	vmov	r2, s15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800853c:	4b13      	ldr	r3, [pc, #76]	@ (800858c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800853e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008540:	0e1b      	lsrs	r3, r3, #24
 8008542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008556:	edd7 6a07 	vldr	s13, [r7, #28]
 800855a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800855e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008562:	ee17 2a90 	vmov	r2, s15
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800856a:	e008      	b.n	800857e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	609a      	str	r2, [r3, #8]
}
 800857e:	bf00      	nop
 8008580:	3724      	adds	r7, #36	@ 0x24
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	58024400 	.word	0x58024400
 8008590:	03d09000 	.word	0x03d09000
 8008594:	46000000 	.word	0x46000000
 8008598:	4c742400 	.word	0x4c742400
 800859c:	4a742400 	.word	0x4a742400
 80085a0:	4bbebc20 	.word	0x4bbebc20

080085a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b089      	sub	sp, #36	@ 0x24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085ac:	4ba0      	ldr	r3, [pc, #640]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80085b6:	4b9e      	ldr	r3, [pc, #632]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085c2:	4b9b      	ldr	r3, [pc, #620]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085cc:	4b98      	ldr	r3, [pc, #608]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d0:	08db      	lsrs	r3, r3, #3
 80085d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	fb02 f303 	mul.w	r3, r2, r3
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8111 	beq.w	8008812 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	f000 8083 	beq.w	80086fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	f200 80a1 	bhi.w	8008742 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d056      	beq.n	80086ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800860c:	e099      	b.n	8008742 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800860e:	4b88      	ldr	r3, [pc, #544]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d02d      	beq.n	8008676 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800861a:	4b85      	ldr	r3, [pc, #532]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	08db      	lsrs	r3, r3, #3
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	4a83      	ldr	r2, [pc, #524]	@ (8008834 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008626:	fa22 f303 	lsr.w	r3, r2, r3
 800862a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	ee07 3a90 	vmov	s15, r3
 800863c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008644:	4b7a      	ldr	r3, [pc, #488]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008654:	ed97 6a03 	vldr	s12, [r7, #12]
 8008658:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800865c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008674:	e087      	b.n	8008786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008680:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800883c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008688:	4b69      	ldr	r3, [pc, #420]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008698:	ed97 6a03 	vldr	s12, [r7, #12]
 800869c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b8:	e065      	b.n	8008786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	ee07 3a90 	vmov	s15, r3
 80086c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008840 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80086c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086cc:	4b58      	ldr	r3, [pc, #352]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d4:	ee07 3a90 	vmov	s15, r3
 80086d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086fc:	e043      	b.n	8008786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008708:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008844 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800870c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008710:	4b47      	ldr	r3, [pc, #284]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008718:	ee07 3a90 	vmov	s15, r3
 800871c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008720:	ed97 6a03 	vldr	s12, [r7, #12]
 8008724:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008740:	e021      	b.n	8008786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800883c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008754:	4b36      	ldr	r3, [pc, #216]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008764:	ed97 6a03 	vldr	s12, [r7, #12]
 8008768:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800876c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008784:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008786:	4b2a      	ldr	r3, [pc, #168]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878a:	0a5b      	lsrs	r3, r3, #9
 800878c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008798:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800879c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ac:	ee17 2a90 	vmov	r2, s15
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80087b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087da:	ee17 2a90 	vmov	r2, s15
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80087e2:	4b13      	ldr	r3, [pc, #76]	@ (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e6:	0e1b      	lsrs	r3, r3, #24
 80087e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008808:	ee17 2a90 	vmov	r2, s15
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008810:	e008      	b.n	8008824 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	609a      	str	r2, [r3, #8]
}
 8008824:	bf00      	nop
 8008826:	3724      	adds	r7, #36	@ 0x24
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	58024400 	.word	0x58024400
 8008834:	03d09000 	.word	0x03d09000
 8008838:	46000000 	.word	0x46000000
 800883c:	4c742400 	.word	0x4c742400
 8008840:	4a742400 	.word	0x4a742400
 8008844:	4bbebc20 	.word	0x4bbebc20

08008848 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008856:	4b53      	ldr	r3, [pc, #332]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b03      	cmp	r3, #3
 8008860:	d101      	bne.n	8008866 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e099      	b.n	800899a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008866:	4b4f      	ldr	r3, [pc, #316]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a4e      	ldr	r2, [pc, #312]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800886c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008872:	f7f9 fe33 	bl	80024dc <HAL_GetTick>
 8008876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008878:	e008      	b.n	800888c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800887a:	f7f9 fe2f 	bl	80024dc <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e086      	b.n	800899a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800888c:	4b45      	ldr	r3, [pc, #276]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008898:	4b42      	ldr	r3, [pc, #264]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800889a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	031b      	lsls	r3, r3, #12
 80088a6:	493f      	ldr	r1, [pc, #252]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	025b      	lsls	r3, r3, #9
 80088be:	b29b      	uxth	r3, r3
 80088c0:	431a      	orrs	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088ce:	431a      	orrs	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	061b      	lsls	r3, r3, #24
 80088d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088dc:	4931      	ldr	r1, [pc, #196]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088e2:	4b30      	ldr	r3, [pc, #192]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	492d      	ldr	r1, [pc, #180]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088f4:	4b2b      	ldr	r3, [pc, #172]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	f023 0220 	bic.w	r2, r3, #32
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	4928      	ldr	r1, [pc, #160]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008906:	4b27      	ldr	r3, [pc, #156]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890a:	4a26      	ldr	r2, [pc, #152]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800890c:	f023 0310 	bic.w	r3, r3, #16
 8008910:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008912:	4b24      	ldr	r3, [pc, #144]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008916:	4b24      	ldr	r3, [pc, #144]	@ (80089a8 <RCCEx_PLL2_Config+0x160>)
 8008918:	4013      	ands	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	69d2      	ldr	r2, [r2, #28]
 800891e:	00d2      	lsls	r2, r2, #3
 8008920:	4920      	ldr	r1, [pc, #128]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008926:	4b1f      	ldr	r3, [pc, #124]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892a:	4a1e      	ldr	r2, [pc, #120]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800892c:	f043 0310 	orr.w	r3, r3, #16
 8008930:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008938:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	4a19      	ldr	r2, [pc, #100]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800893e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008942:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008944:	e00f      	b.n	8008966 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d106      	bne.n	800895a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800894c:	4b15      	ldr	r3, [pc, #84]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800894e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008950:	4a14      	ldr	r2, [pc, #80]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008956:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008958:	e005      	b.n	8008966 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800895a:	4b12      	ldr	r3, [pc, #72]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800895c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895e:	4a11      	ldr	r2, [pc, #68]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008964:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008966:	4b0f      	ldr	r3, [pc, #60]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a0e      	ldr	r2, [pc, #56]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800896c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008972:	f7f9 fdb3 	bl	80024dc <HAL_GetTick>
 8008976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008978:	e008      	b.n	800898c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800897a:	f7f9 fdaf 	bl	80024dc <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e006      	b.n	800899a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800898c:	4b05      	ldr	r3, [pc, #20]	@ (80089a4 <RCCEx_PLL2_Config+0x15c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f0      	beq.n	800897a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	58024400 	.word	0x58024400
 80089a8:	ffff0007 	.word	0xffff0007

080089ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089ba:	4b53      	ldr	r3, [pc, #332]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 80089bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d101      	bne.n	80089ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e099      	b.n	8008afe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 80089d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d6:	f7f9 fd81 	bl	80024dc <HAL_GetTick>
 80089da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089dc:	e008      	b.n	80089f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089de:	f7f9 fd7d 	bl	80024dc <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e086      	b.n	8008afe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089f0:	4b45      	ldr	r3, [pc, #276]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1f0      	bne.n	80089de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089fc:	4b42      	ldr	r3, [pc, #264]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 80089fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a00:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	051b      	lsls	r3, r3, #20
 8008a0a:	493f      	ldr	r1, [pc, #252]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	025b      	lsls	r3, r3, #9
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	041b      	lsls	r3, r3, #16
 8008a2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a40:	4931      	ldr	r1, [pc, #196]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a46:	4b30      	ldr	r3, [pc, #192]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	492d      	ldr	r1, [pc, #180]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a58:	4b2b      	ldr	r3, [pc, #172]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	4928      	ldr	r1, [pc, #160]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a6a:	4b27      	ldr	r3, [pc, #156]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	4a26      	ldr	r2, [pc, #152]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a76:	4b24      	ldr	r3, [pc, #144]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a7a:	4b24      	ldr	r3, [pc, #144]	@ (8008b0c <RCCEx_PLL3_Config+0x160>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	69d2      	ldr	r2, [r2, #28]
 8008a82:	00d2      	lsls	r2, r2, #3
 8008a84:	4920      	ldr	r1, [pc, #128]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa0:	4a19      	ldr	r2, [pc, #100]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008aa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008aa8:	e00f      	b.n	8008aca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d106      	bne.n	8008abe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ab0:	4b15      	ldr	r3, [pc, #84]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab4:	4a14      	ldr	r2, [pc, #80]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008aba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008abc:	e005      	b.n	8008aca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008abe:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac2:	4a11      	ldr	r2, [pc, #68]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008ac4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008aca:	4b0f      	ldr	r3, [pc, #60]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a0e      	ldr	r2, [pc, #56]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad6:	f7f9 fd01 	bl	80024dc <HAL_GetTick>
 8008ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008adc:	e008      	b.n	8008af0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ade:	f7f9 fcfd 	bl	80024dc <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e006      	b.n	8008afe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008af0:	4b05      	ldr	r3, [pc, #20]	@ (8008b08 <RCCEx_PLL3_Config+0x15c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0f0      	beq.n	8008ade <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
 8008b0c:	ffff0007 	.word	0xffff0007

08008b10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	@ 0x28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e075      	b.n	8008c0e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d105      	bne.n	8008b3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7f9 fa43 	bl	8001fc0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f868 	bl	8008c18 <HAL_SD_InitCard>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e05d      	b.n	8008c0e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008b52:	f107 0308 	add.w	r3, r7, #8
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fdaf 	bl	80096bc <HAL_SD_GetCardStatus>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e052      	b.n	8008c0e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008b68:	7e3b      	ldrb	r3, [r7, #24]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008b6e:	7e7b      	ldrb	r3, [r7, #25]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d10a      	bne.n	8008b92 <HAL_SD_Init+0x82>
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <HAL_SD_Init+0x78>
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b90:	e00b      	b.n	8008baa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d104      	bne.n	8008ba4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ba0:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ba2:	e002      	b.n	8008baa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fe6d 	bl	8009890 <HAL_SD_ConfigWideBusOperation>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e026      	b.n	8008c0e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008bc0:	f7f9 fc8c 	bl	80024dc <HAL_GetTick>
 8008bc4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bc6:	e011      	b.n	8008bec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008bc8:	f7f9 fc88 	bl	80024dc <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd6:	d109      	bne.n	8008bec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bde:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e010      	b.n	8008c0e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 ff61 	bl	8009ab4 <HAL_SD_GetCardState>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d1e7      	bne.n	8008bc8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3728      	adds	r7, #40	@ 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c18:	b590      	push	{r4, r7, lr}
 8008c1a:	b08d      	sub	sp, #52	@ 0x34
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c30:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008c34:	f04f 0100 	mov.w	r1, #0
 8008c38:	f7fe fc76 	bl	8007528 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c3c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008c52:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e070      	b.n	8008d3a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	0a1b      	lsrs	r3, r3, #8
 8008c5c:	4a39      	ldr	r2, [pc, #228]	@ (8008d44 <HAL_SD_InitCard+0x12c>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681c      	ldr	r4, [r3, #0]
 8008c6a:	466a      	mov	r2, sp
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c74:	e882 0003 	stmia.w	r2, {r0, r1}
 8008c78:	f107 030c 	add.w	r3, r7, #12
 8008c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f003 f882 	bl	800bd88 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f003 f8c5 	bl	800be18 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d007      	beq.n	8008cb6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008ca6:	4a28      	ldr	r2, [pc, #160]	@ (8008d48 <HAL_SD_InitCard+0x130>)
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	3301      	adds	r3, #1
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f9 fc1f 	bl	80024f4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 ffea 	bl	8009c90 <SD_PowerON>
 8008cbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e02e      	b.n	8008d3a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 ff09 	bl	8009af4 <SD_InitCard>
 8008ce2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e01b      	b.n	8008d3a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f003 f91a 	bl	800bf44 <SDMMC_CmdBlockLength>
 8008d10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00f      	beq.n	8008d38 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8008d4c <HAL_SD_InitCard+0x134>)
 8008d1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e000      	b.n	8008d3a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	372c      	adds	r7, #44	@ 0x2c
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	014f8b59 	.word	0x014f8b59
 8008d48:	00012110 	.word	0x00012110
 8008d4c:	1fe00fff 	.word	0x1fe00fff

08008d50 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08c      	sub	sp, #48	@ 0x30
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d107      	bne.n	8008d78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d6c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e08d      	b.n	8008e94 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	f040 8086 	bne.w	8008e92 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d907      	bls.n	8008daa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d9e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e074      	b.n	8008e94 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2203      	movs	r2, #3
 8008dae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2200      	movs	r2, #0
 8008db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	025a      	lsls	r2, r3, #9
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d002      	beq.n	8008dd6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	025b      	lsls	r3, r3, #9
 8008dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	025b      	lsls	r3, r3, #9
 8008de0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008de2:	2390      	movs	r3, #144	@ 0x90
 8008de4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008de6:	2302      	movs	r3, #2
 8008de8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f107 0210 	add.w	r2, r7, #16
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f003 f875 	bl	800beec <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e10:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d90a      	bls.n	8008e3e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2282      	movs	r2, #130	@ 0x82
 8008e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e34:	4618      	mov	r0, r3
 8008e36:	f003 f8cb 	bl	800bfd0 <SDMMC_CmdReadMultiBlock>
 8008e3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e3c:	e009      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2281      	movs	r2, #129	@ 0x81
 8008e42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f003 f89d 	bl	800bf8a <SDMMC_CmdReadSingleBlock>
 8008e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d012      	beq.n	8008e7e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e9c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e66:	431a      	orrs	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e00a      	b.n	8008e94 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008e8c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e000      	b.n	8008e94 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008e92:	2302      	movs	r3, #2
  }
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3730      	adds	r7, #48	@ 0x30
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	1fe00fff 	.word	0x1fe00fff

08008ea0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08c      	sub	sp, #48	@ 0x30
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d107      	bne.n	8008ec8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ebc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e08d      	b.n	8008fe4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	f040 8086 	bne.w	8008fe2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008edc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d907      	bls.n	8008efa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e074      	b.n	8008fe4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2200      	movs	r2, #0
 8008f08:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	025a      	lsls	r2, r3, #9
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d002      	beq.n	8008f26 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f22:	025b      	lsls	r3, r3, #9
 8008f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f26:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	025b      	lsls	r3, r3, #9
 8008f30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f32:	2390      	movs	r3, #144	@ 0x90
 8008f34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008f36:	2300      	movs	r3, #0
 8008f38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f107 0210 	add.w	r2, r7, #16
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f002 ffcd 	bl	800beec <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68da      	ldr	r2, [r3, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f60:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d90a      	bls.n	8008f8e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	22a0      	movs	r2, #160	@ 0xa0
 8008f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f84:	4618      	mov	r0, r3
 8008f86:	f003 f869 	bl	800c05c <SDMMC_CmdWriteMultiBlock>
 8008f8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008f8c:	e009      	b.n	8008fa2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2290      	movs	r2, #144	@ 0x90
 8008f92:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f003 f83b 	bl	800c016 <SDMMC_CmdWriteSingleBlock>
 8008fa0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d012      	beq.n	8008fce <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a0f      	ldr	r2, [pc, #60]	@ (8008fec <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008fae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e00a      	b.n	8008fe4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e000      	b.n	8008fe4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008fe2:	2302      	movs	r3, #2
  }
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3730      	adds	r7, #48	@ 0x30
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	1fe00fff 	.word	0x1fe00fff

08008ff0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d008      	beq.n	800901e <HAL_SD_IRQHandler+0x2e>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f003 0308 	and.w	r3, r3, #8
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 f926 	bl	800a268 <SD_Read_IT>
 800901c:	e19a      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80ac 	beq.w	8009186 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009036:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b59      	ldr	r3, [pc, #356]	@ (80091a8 <HAL_SD_IRQHandler+0x1b8>)
 8009044:	400b      	ands	r3, r1
 8009046:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009056:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009066:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d038      	beq.n	80090e4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d104      	bne.n	8009086 <HAL_SD_IRQHandler+0x96>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b00      	cmp	r3, #0
 8009084:	d011      	beq.n	80090aa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f003 f80a 	bl	800c0a4 <SDMMC_CmdStopTransfer>
 8009090:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f95b 	bl	8009360 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a3f      	ldr	r2, [pc, #252]	@ (80091ac <HAL_SD_IRQHandler+0x1bc>)
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <HAL_SD_IRQHandler+0xe4>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 fcbd 	bl	800ca54 <HAL_SD_RxCpltCallback>
 80090da:	e13b      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f003 fcaf 	bl	800ca40 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090e2:	e137      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 8132 	beq.w	8009354 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2200      	movs	r2, #0
 80090f6:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2200      	movs	r2, #0
 80090fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2200      	movs	r2, #0
 8009106:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <HAL_SD_IRQHandler+0x12c>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d011      	beq.n	8009140 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f002 ffbf 	bl	800c0a4 <SDMMC_CmdStopTransfer>
 8009126:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d008      	beq.n	8009140 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f910 	bl	8009360 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <HAL_SD_IRQHandler+0x172>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f003 fc6c 	bl	800ca40 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d105      	bne.n	800917e <HAL_SD_IRQHandler+0x18e>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80eb 	beq.w	8009354 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f003 fc68 	bl	800ca54 <HAL_SD_RxCpltCallback>
}
 8009184:	e0e6      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800918c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00d      	beq.n	80091b0 <HAL_SD_IRQHandler+0x1c0>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d008      	beq.n	80091b0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 f8a8 	bl	800a2f4 <SD_Write_IT>
 80091a4:	e0d6      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
 80091a6:	bf00      	nop
 80091a8:	ffff3ec5 	.word	0xffff3ec5
 80091ac:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 809d 	beq.w	80092fa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d2:	f043 0202 	orr.w	r2, r3, #2
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ec:	f043 0208 	orr.w	r2, r3, #8
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009206:	f043 0220 	orr.w	r2, r3, #32
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009220:	f043 0210 	orr.w	r2, r3, #16
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a4b      	ldr	r2, [pc, #300]	@ (800935c <HAL_SD_IRQHandler+0x36c>)
 800922e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800923e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800924e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800925e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800926e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f002 ff15 	bl	800c0a4 <SDMMC_CmdStopTransfer>
 800927a:	4602      	mov	r2, r0
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009294:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800929e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f003 0308 	and.w	r3, r3, #8
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00a      	beq.n	80092c0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f851 	bl	8009360 <HAL_SD_ErrorCallback>
}
 80092be:	e049      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d044      	beq.n	8009354 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d040      	beq.n	8009354 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80092e0:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2200      	movs	r2, #0
 80092e8:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f834 	bl	8009360 <HAL_SD_ErrorCallback>
}
 80092f8:	e02c      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d025      	beq.n	8009354 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009310:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 f84a 	bl	800a3c4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009330:	e010      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 f832 	bl	800a39c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009338:	e00c      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f833 	bl	800a3b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800934a:	e003      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 f81b 	bl	800a388 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009352:	e7ff      	b.n	8009354 <HAL_SD_IRQHandler+0x364>
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	18000f3a 	.word	0x18000f3a

08009360 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009382:	0f9b      	lsrs	r3, r3, #30
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800938e:	0e9b      	lsrs	r3, r3, #26
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093a0:	0e1b      	lsrs	r3, r3, #24
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d4:	0d1b      	lsrs	r3, r3, #20
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f2:	0bdb      	lsrs	r3, r3, #15
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009404:	0b9b      	lsrs	r3, r3, #14
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	b2da      	uxtb	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009416:	0b5b      	lsrs	r3, r3, #13
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009428:	0b1b      	lsrs	r3, r3, #12
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2200      	movs	r2, #0
 800943a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d163      	bne.n	800950c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009448:	009a      	lsls	r2, r3, #2
 800944a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800944e:	4013      	ands	r3, r2
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009454:	0f92      	lsrs	r2, r2, #30
 8009456:	431a      	orrs	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009460:	0edb      	lsrs	r3, r3, #27
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	b2da      	uxtb	r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009472:	0e1b      	lsrs	r3, r3, #24
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	b2da      	uxtb	r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009484:	0d5b      	lsrs	r3, r3, #21
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	b2da      	uxtb	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009496:	0c9b      	lsrs	r3, r3, #18
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094a8:	0bdb      	lsrs	r3, r3, #15
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	7e1b      	ldrb	r3, [r3, #24]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	3302      	adds	r3, #2
 80094cc:	2201      	movs	r2, #1
 80094ce:	fa02 f303 	lsl.w	r3, r2, r3
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094d6:	fb03 f202 	mul.w	r2, r3, r2
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	7a1b      	ldrb	r3, [r3, #8]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	2201      	movs	r2, #1
 80094ea:	409a      	lsls	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80094f8:	0a52      	lsrs	r2, r2, #9
 80094fa:	fb03 f202 	mul.w	r2, r3, r2
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009508:	655a      	str	r2, [r3, #84]	@ 0x54
 800950a:	e031      	b.n	8009570 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009510:	2b01      	cmp	r3, #1
 8009512:	d11d      	bne.n	8009550 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009522:	0c1b      	lsrs	r3, r3, #16
 8009524:	431a      	orrs	r2, r3
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	3301      	adds	r3, #1
 8009530:	029a      	lsls	r2, r3, #10
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009544:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	655a      	str	r2, [r3, #84]	@ 0x54
 800954e:	e00f      	b.n	8009570 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a58      	ldr	r2, [pc, #352]	@ (80096b8 <HAL_SD_GetCardCSD+0x344>)
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800955c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e09d      	b.n	80096ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009574:	0b9b      	lsrs	r3, r3, #14
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009586:	09db      	lsrs	r3, r3, #7
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095a8:	0fdb      	lsrs	r3, r3, #31
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095b4:	0f5b      	lsrs	r3, r3, #29
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095c6:	0e9b      	lsrs	r3, r3, #26
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095d8:	0d9b      	lsrs	r3, r3, #22
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095ea:	0d5b      	lsrs	r3, r3, #21
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009606:	0c1b      	lsrs	r3, r3, #16
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800961a:	0bdb      	lsrs	r3, r3, #15
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800962e:	0b9b      	lsrs	r3, r3, #14
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009642:	0b5b      	lsrs	r3, r3, #13
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009656:	0b1b      	lsrs	r3, r3, #12
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800966a:	0a9b      	lsrs	r3, r3, #10
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800967e:	0a1b      	lsrs	r3, r3, #8
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800969a:	b2da      	uxtb	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	1fe00fff 	.word	0x1fe00fff

080096bc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b094      	sub	sp, #80	@ 0x50
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d101      	bne.n	80096dc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e0a7      	b.n	800982c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80096dc:	f107 0308 	add.w	r3, r7, #8
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb62 	bl	8009dac <SD_SendSDStatus>
 80096e8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d011      	beq.n	8009714 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a4f      	ldr	r2, [pc, #316]	@ (8009834 <HAL_SD_GetCardStatus+0x178>)
 80096f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009712:	e070      	b.n	80097f6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	099b      	lsrs	r3, r3, #6
 8009718:	b2db      	uxtb	r3, r3
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	b2da      	uxtb	r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	b2db      	uxtb	r3, r3
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	b2da      	uxtb	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	0a1b      	lsrs	r3, r3, #8
 8009738:	b29b      	uxth	r3, r3
 800973a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800973e:	b29a      	uxth	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	0e1b      	lsrs	r3, r3, #24
 8009744:	b29b      	uxth	r3, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	b29a      	uxth	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	061a      	lsls	r2, r3, #24
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800975a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	0a1b      	lsrs	r3, r3, #8
 8009760:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009764:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	0e1b      	lsrs	r3, r3, #24
 800976a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	b2da      	uxtb	r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	0a1b      	lsrs	r3, r3, #8
 800977c:	b2da      	uxtb	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	0d1b      	lsrs	r3, r3, #20
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	b2da      	uxtb	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	b29b      	uxth	r3, r3
 8009798:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800979c:	b29a      	uxth	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	0a9b      	lsrs	r3, r3, #10
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	0a1b      	lsrs	r3, r3, #8
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0303 	and.w	r3, r3, #3
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	091b      	lsrs	r3, r3, #4
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	0e1b      	lsrs	r3, r3, #24
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80097fe:	4618      	mov	r0, r3
 8009800:	f002 fba0 	bl	800bf44 <SDMMC_CmdBlockLength>
 8009804:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00d      	beq.n	8009828 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a08      	ldr	r2, [pc, #32]	@ (8009834 <HAL_SD_GetCardStatus+0x178>)
 8009812:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009818:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009828:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800982c:	4618      	mov	r0, r3
 800982e:	3750      	adds	r7, #80	@ 0x50
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	1fe00fff 	.word	0x1fe00fff

08009838 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009890:	b590      	push	{r4, r7, lr}
 8009892:	b08d      	sub	sp, #52	@ 0x34
 8009894:	af02      	add	r7, sp, #8
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2203      	movs	r2, #3
 80098a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d02e      	beq.n	800990e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098b6:	d106      	bne.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80098c4:	e029      	b.n	800991a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098cc:	d10a      	bne.n	80098e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fb64 	bl	8009f9c <SD_WideBus_Enable>
 80098d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80098e2:	e01a      	b.n	800991a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fba1 	bl	800a032 <SD_WideBus_Disable>
 80098f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80098fe:	e00c      	b.n	800991a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009904:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	635a      	str	r2, [r3, #52]	@ 0x34
 800990c:	e005      	b.n	800991a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009912:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991e:	2b00      	cmp	r3, #0
 8009920:	d007      	beq.n	8009932 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a5f      	ldr	r2, [pc, #380]	@ (8009aa4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009928:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009930:	e096      	b.n	8009a60 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009932:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009936:	f04f 0100 	mov.w	r1, #0
 800993a:	f7fd fdf5 	bl	8007528 <HAL_RCCEx_GetPeriphCLKFreq>
 800993e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8083 	beq.w	8009a4e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4950      	ldr	r1, [pc, #320]	@ (8009aa8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009966:	fba1 1303 	umull	r1, r3, r1, r3
 800996a:	0e1b      	lsrs	r3, r3, #24
 800996c:	429a      	cmp	r2, r3
 800996e:	d303      	bcc.n	8009978 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e05a      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800997c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009980:	d103      	bne.n	800998a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	61bb      	str	r3, [r7, #24]
 8009988:	e051      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009992:	d126      	bne.n	80099e2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10e      	bne.n	80099ba <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	4a43      	ldr	r2, [pc, #268]	@ (8009aac <HAL_SD_ConfigWideBusOperation+0x21c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d906      	bls.n	80099b2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	4a40      	ldr	r2, [pc, #256]	@ (8009aa8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099a8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ac:	0e5b      	lsrs	r3, r3, #25
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	e03d      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	61bb      	str	r3, [r7, #24]
 80099b8:	e039      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c6:	4a39      	ldr	r2, [pc, #228]	@ (8009aac <HAL_SD_ConfigWideBusOperation+0x21c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d906      	bls.n	80099da <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4a36      	ldr	r2, [pc, #216]	@ (8009aa8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099d0:	fba2 2303 	umull	r2, r3, r2, r3
 80099d4:	0e5b      	lsrs	r3, r3, #25
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	e029      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	e025      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10e      	bne.n	8009a08 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4a30      	ldr	r2, [pc, #192]	@ (8009ab0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d906      	bls.n	8009a00 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	4a2c      	ldr	r2, [pc, #176]	@ (8009aa8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099f6:	fba2 2303 	umull	r2, r3, r2, r3
 80099fa:	0e1b      	lsrs	r3, r3, #24
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	e016      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	e012      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a14:	4a26      	ldr	r2, [pc, #152]	@ (8009ab0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d906      	bls.n	8009a28 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4a22      	ldr	r2, [pc, #136]	@ (8009aa8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a22:	0e1b      	lsrs	r3, r3, #24
 8009a24:	61bb      	str	r3, [r7, #24]
 8009a26:	e002      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681c      	ldr	r4, [r3, #0]
 8009a32:	466a      	mov	r2, sp
 8009a34:	f107 0314 	add.w	r3, r7, #20
 8009a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a46:	4620      	mov	r0, r4
 8009a48:	f002 f99e 	bl	800bd88 <SDMMC_Init>
 8009a4c:	e008      	b.n	8009a60 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a52:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 fa6b 	bl	800bf44 <SDMMC_CmdBlockLength>
 8009a6e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00c      	beq.n	8009a90 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009aa4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	431a      	orrs	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	372c      	adds	r7, #44	@ 0x2c
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd90      	pop	{r4, r7, pc}
 8009aa4:	1fe00fff 	.word	0x1fe00fff
 8009aa8:	55e63b89 	.word	0x55e63b89
 8009aac:	02faf080 	.word	0x02faf080
 8009ab0:	017d7840 	.word	0x017d7840

08009ab4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009ac0:	f107 030c 	add.w	r3, r7, #12
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa40 	bl	8009f4c <SD_SendStatus>
 8009acc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	0a5b      	lsrs	r3, r3, #9
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009aea:	693b      	ldr	r3, [r7, #16]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b090      	sub	sp, #64	@ 0x40
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009b00:	f7f8 fcec 	bl	80024dc <HAL_GetTick>
 8009b04:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f002 f995 	bl	800be3a <SDMMC_GetPowerState>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009b1a:	e0b5      	b.n	8009c88 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d02e      	beq.n	8009b82 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 fbe0 	bl	800c2ee <SDMMC_CmdSendCID>
 8009b2e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <SD_InitCard+0x46>
    {
      return errorstate;
 8009b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b38:	e0a6      	b.n	8009c88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f002 f9c0 	bl	800bec6 <SDMMC_GetResponse>
 8009b46:	4602      	mov	r2, r0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2104      	movs	r1, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f002 f9b7 	bl	800bec6 <SDMMC_GetResponse>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2108      	movs	r1, #8
 8009b64:	4618      	mov	r0, r3
 8009b66:	f002 f9ae 	bl	800bec6 <SDMMC_GetResponse>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	210c      	movs	r1, #12
 8009b76:	4618      	mov	r0, r3
 8009b78:	f002 f9a5 	bl	800bec6 <SDMMC_GetResponse>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d01d      	beq.n	8009bc6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009b8a:	e019      	b.n	8009bc0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f107 020a 	add.w	r2, r7, #10
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 fbe8 	bl	800c36c <SDMMC_CmdSetRelAdd>
 8009b9c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	e06f      	b.n	8009c88 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009ba8:	f7f8 fc98 	bl	80024dc <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d902      	bls.n	8009bc0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009bba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009bbe:	e063      	b.n	8009c88 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009bc0:	897b      	ldrh	r3, [r7, #10]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0e2      	beq.n	8009b8c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d036      	beq.n	8009c3c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bde:	041b      	lsls	r3, r3, #16
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f002 fba2 	bl	800c32c <SDMMC_CmdSendCSD>
 8009be8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <SD_InitCard+0x100>
    {
      return errorstate;
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	e049      	b.n	8009c88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f002 f963 	bl	800bec6 <SDMMC_GetResponse>
 8009c00:	4602      	mov	r2, r0
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2104      	movs	r1, #4
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f002 f95a 	bl	800bec6 <SDMMC_GetResponse>
 8009c12:	4602      	mov	r2, r0
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2108      	movs	r1, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 f951 	bl	800bec6 <SDMMC_GetResponse>
 8009c24:	4602      	mov	r2, r0
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	210c      	movs	r1, #12
 8009c30:	4618      	mov	r0, r3
 8009c32:	f002 f948 	bl	800bec6 <SDMMC_GetResponse>
 8009c36:	4602      	mov	r2, r0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2104      	movs	r1, #4
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 f93f 	bl	800bec6 <SDMMC_GetResponse>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	0d1a      	lsrs	r2, r3, #20
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c50:	f107 030c 	add.w	r3, r7, #12
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fb8c 	bl	8009374 <HAL_SD_GetCardCSD>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c66:	e00f      	b.n	8009c88 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c70:	041b      	lsls	r3, r3, #16
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f002 fa51 	bl	800c11c <SDMMC_CmdSelDesel>
 8009c7a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <SD_InitCard+0x192>
  {
    return errorstate;
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	e000      	b.n	8009c88 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3740      	adds	r7, #64	@ 0x40
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f002 fa5a 	bl	800c162 <SDMMC_CmdGoIdleState>
 8009cae:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	e072      	b.n	8009da0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f002 fa6d 	bl	800c19e <SDMMC_CmdOperCond>
 8009cc4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ccc:	d10d      	bne.n	8009cea <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f002 fa42 	bl	800c162 <SDMMC_CmdGoIdleState>
 8009cde:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <SD_PowerON+0x60>
    {
      return errorstate;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	e05a      	b.n	8009da0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d137      	bne.n	8009d68 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f002 fa6d 	bl	800c1de <SDMMC_CmdAppCommand>
 8009d04:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d02d      	beq.n	8009d68 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d10:	e046      	b.n	8009da0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 fa60 	bl	800c1de <SDMMC_CmdAppCommand>
 8009d1e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <SD_PowerON+0x9a>
    {
      return errorstate;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	e03a      	b.n	8009da0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	491e      	ldr	r1, [pc, #120]	@ (8009da8 <SD_PowerON+0x118>)
 8009d30:	4618      	mov	r0, r3
 8009d32:	f002 fa77 	bl	800c224 <SDMMC_CmdAppOperCommand>
 8009d36:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d42:	e02d      	b.n	8009da0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f002 f8bb 	bl	800bec6 <SDMMC_GetResponse>
 8009d50:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	0fdb      	lsrs	r3, r3, #31
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d101      	bne.n	8009d5e <SD_PowerON+0xce>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e000      	b.n	8009d60 <SD_PowerON+0xd0>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	613b      	str	r3, [r7, #16]

    count++;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	3301      	adds	r3, #1
 8009d66:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d802      	bhi.n	8009d78 <SD_PowerON+0xe8>
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0cc      	beq.n	8009d12 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d902      	bls.n	8009d88 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d86:	e00b      	b.n	8009da0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	c1100000 	.word	0xc1100000

08009dac <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08c      	sub	sp, #48	@ 0x30
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009db6:	f7f8 fb91 	bl	80024dc <HAL_GetTick>
 8009dba:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 f87d 	bl	800bec6 <SDMMC_GetResponse>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dd6:	d102      	bne.n	8009dde <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ddc:	e0b0      	b.n	8009f40 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2140      	movs	r1, #64	@ 0x40
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 f8ad 	bl	800bf44 <SDMMC_CmdBlockLength>
 8009dea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	e0a0      	b.n	8009f40 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f002 f9e7 	bl	800c1de <SDMMC_CmdAppCommand>
 8009e10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d005      	beq.n	8009e24 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	e08d      	b.n	8009f40 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e24:	f04f 33ff 	mov.w	r3, #4294967295
 8009e28:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009e2a:	2340      	movs	r3, #64	@ 0x40
 8009e2c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009e2e:	2360      	movs	r3, #96	@ 0x60
 8009e30:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e32:	2302      	movs	r3, #2
 8009e34:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f107 0208 	add.w	r2, r7, #8
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f002 f84f 	bl	800beec <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f002 facf 	bl	800c3f6 <SDMMC_CmdStatusRegister>
 8009e58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d02b      	beq.n	8009eb8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	e069      	b.n	8009f40 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d013      	beq.n	8009ea2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e7e:	e00d      	b.n	8009e9c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 ffa9 	bl	800bddc <SDMMC_ReadFIFO>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8e:	601a      	str	r2, [r3, #0]
        pData++;
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	3304      	adds	r3, #4
 8009e94:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e98:	3301      	adds	r3, #1
 8009e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9e:	2b07      	cmp	r3, #7
 8009ea0:	d9ee      	bls.n	8009e80 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ea2:	f7f8 fb1b 	bl	80024dc <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d102      	bne.n	8009eb8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009eb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009eb6:	e043      	b.n	8009f40 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ebe:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0d2      	beq.n	8009e6c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	e033      	b.n	8009f40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	e02a      	b.n	8009f40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d017      	beq.n	8009f28 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ef8:	2320      	movs	r3, #32
 8009efa:	e021      	b.n	8009f40 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 ff6b 	bl	800bddc <SDMMC_ReadFIFO>
 8009f06:	4602      	mov	r2, r0
 8009f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0a:	601a      	str	r2, [r3, #0]
    pData++;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0e:	3304      	adds	r3, #4
 8009f10:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f12:	f7f8 fae3 	bl	80024dc <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d102      	bne.n	8009f28 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f26:	e00b      	b.n	8009f40 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e2      	bne.n	8009efc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a03      	ldr	r2, [pc, #12]	@ (8009f48 <SD_SendSDStatus+0x19c>)
 8009f3c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3730      	adds	r7, #48	@ 0x30
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	18000f3a 	.word	0x18000f3a

08009f4c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f60:	e018      	b.n	8009f94 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f002 fa1e 	bl	800c3b0 <SDMMC_CmdSendStatus>
 8009f74:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	e009      	b.n	8009f94 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 ff9d 	bl	800bec6 <SDMMC_GetResponse>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 ff87 	bl	800bec6 <SDMMC_GetResponse>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fc2:	d102      	bne.n	8009fca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009fc8:	e02f      	b.n	800a02a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fca:	f107 030c 	add.w	r3, r7, #12
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f879 	bl	800a0c8 <SD_FindSCR>
 8009fd6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	e023      	b.n	800a02a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01c      	beq.n	800a026 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff4:	041b      	lsls	r3, r3, #16
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f002 f8f0 	bl	800c1de <SDMMC_CmdAppCommand>
 8009ffe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	e00f      	b.n	800a02a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2102      	movs	r1, #2
 800a010:	4618      	mov	r0, r3
 800a012:	f002 f927 	bl	800c264 <SDMMC_CmdBusWidth>
 800a016:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	e003      	b.n	800a02a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a022:	2300      	movs	r3, #0
 800a024:	e001      	b.n	800a02a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a026:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b086      	sub	sp, #24
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2100      	movs	r1, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 ff3c 	bl	800bec6 <SDMMC_GetResponse>
 800a04e:	4603      	mov	r3, r0
 800a050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a058:	d102      	bne.n	800a060 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a05a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a05e:	e02f      	b.n	800a0c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f82e 	bl	800a0c8 <SD_FindSCR>
 800a06c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	e023      	b.n	800a0c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01c      	beq.n	800a0bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a08a:	041b      	lsls	r3, r3, #16
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f002 f8a5 	bl	800c1de <SDMMC_CmdAppCommand>
 800a094:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	e00f      	b.n	800a0c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f002 f8dc 	bl	800c264 <SDMMC_CmdBusWidth>
 800a0ac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	e003      	b.n	800a0c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e001      	b.n	800a0c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08e      	sub	sp, #56	@ 0x38
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0d2:	f7f8 fa03 	bl	80024dc <HAL_GetTick>
 800a0d6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60bb      	str	r3, [r7, #8]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2108      	movs	r1, #8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 ff28 	bl	800bf44 <SDMMC_CmdBlockLength>
 800a0f4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	e0ad      	b.n	800a25c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	4619      	mov	r1, r3
 800a10c:	4610      	mov	r0, r2
 800a10e:	f002 f866 	bl	800c1de <SDMMC_CmdAppCommand>
 800a112:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11c:	e09e      	b.n	800a25c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a11e:	f04f 33ff 	mov.w	r3, #4294967295
 800a122:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a124:	2308      	movs	r3, #8
 800a126:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a128:	2330      	movs	r3, #48	@ 0x30
 800a12a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a12c:	2302      	movs	r3, #2
 800a12e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a130:	2300      	movs	r3, #0
 800a132:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a134:	2301      	movs	r3, #1
 800a136:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f107 0210 	add.w	r2, r7, #16
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f001 fed2 	bl	800beec <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f002 f8ac 	bl	800c2aa <SDMMC_CmdSendSCR>
 800a152:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a156:	2b00      	cmp	r3, #0
 800a158:	d027      	beq.n	800a1aa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15c:	e07e      	b.n	800a25c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a164:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d113      	bne.n	800a194 <SD_FindSCR+0xcc>
 800a16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d110      	bne.n	800a194 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f001 fe30 	bl	800bddc <SDMMC_ReadFIFO>
 800a17c:	4603      	mov	r3, r0
 800a17e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f001 fe29 	bl	800bddc <SDMMC_ReadFIFO>
 800a18a:	4603      	mov	r3, r0
 800a18c:	60fb      	str	r3, [r7, #12]
      index++;
 800a18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a190:	3301      	adds	r3, #1
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a194:	f7f8 f9a2 	bl	80024dc <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d102      	bne.n	800a1aa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1a8:	e058      	b.n	800a25c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1b0:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0d1      	beq.n	800a15e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	e043      	b.n	800a25c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e036      	b.n	800a25c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f4:	f003 0320 	and.w	r3, r3, #32
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2220      	movs	r2, #32
 800a202:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a204:	2320      	movs	r3, #32
 800a206:	e029      	b.n	800a25c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a15      	ldr	r2, [pc, #84]	@ (800a264 <SD_FindSCR+0x19c>)
 800a20e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	061a      	lsls	r2, r3, #24
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a21c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a226:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	0e1b      	lsrs	r3, r3, #24
 800a22c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a230:	601a      	str	r2, [r3, #0]
    scr++;
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	3304      	adds	r3, #4
 800a236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	061a      	lsls	r2, r3, #24
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a244:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	0a1b      	lsrs	r3, r3, #8
 800a24a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a24e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	0e1b      	lsrs	r3, r3, #24
 800a254:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a258:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3738      	adds	r7, #56	@ 0x38
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	18000f3a 	.word	0x18000f3a

0800a268 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a274:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27a:	2b1f      	cmp	r3, #31
 800a27c:	d936      	bls.n	800a2ec <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e027      	b.n	800a2d4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f001 fda7 	bl	800bddc <SDMMC_ReadFIFO>
 800a28e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	b2da      	uxtb	r2, r3
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	3301      	adds	r3, #1
 800a29c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	0a1b      	lsrs	r3, r3, #8
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	0c1b      	lsrs	r3, r3, #16
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	0e1b      	lsrs	r3, r3, #24
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b07      	cmp	r3, #7
 800a2d8:	d9d4      	bls.n	800a284 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e4:	f1a3 0220 	sub.w	r2, r3, #32
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	2b1f      	cmp	r3, #31
 800a308:	d93a      	bls.n	800a380 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	e02b      	b.n	800a368 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	3301      	adds	r3, #1
 800a31a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	021a      	lsls	r2, r3, #8
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	3301      	adds	r3, #1
 800a32c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	041a      	lsls	r2, r3, #16
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4313      	orrs	r3, r2
 800a338:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3301      	adds	r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	061a      	lsls	r2, r3, #24
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	4313      	orrs	r3, r2
 800a34a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	3301      	adds	r3, #1
 800a350:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f107 020c 	add.w	r2, r7, #12
 800a35a:	4611      	mov	r1, r2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fd4a 	bl	800bdf6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	3301      	adds	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b07      	cmp	r3, #7
 800a36c:	d9d0      	bls.n	800a310 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	f1a3 0220 	sub.w	r2, r3, #32
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	621a      	str	r2, [r3, #32]
  }
}
 800a380:	bf00      	nop
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e10f      	b.n	800a60a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a87      	ldr	r2, [pc, #540]	@ (800a614 <HAL_SPI_Init+0x23c>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d00f      	beq.n	800a41a <HAL_SPI_Init+0x42>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a86      	ldr	r2, [pc, #536]	@ (800a618 <HAL_SPI_Init+0x240>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d00a      	beq.n	800a41a <HAL_SPI_Init+0x42>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a84      	ldr	r2, [pc, #528]	@ (800a61c <HAL_SPI_Init+0x244>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d005      	beq.n	800a41a <HAL_SPI_Init+0x42>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	2b0f      	cmp	r3, #15
 800a414:	d901      	bls.n	800a41a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e0f7      	b.n	800a60a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fbbc 	bl	800ab98 <SPI_GetPacketSize>
 800a420:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a7b      	ldr	r2, [pc, #492]	@ (800a614 <HAL_SPI_Init+0x23c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00c      	beq.n	800a446 <HAL_SPI_Init+0x6e>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a79      	ldr	r2, [pc, #484]	@ (800a618 <HAL_SPI_Init+0x240>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <HAL_SPI_Init+0x6e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a78      	ldr	r2, [pc, #480]	@ (800a61c <HAL_SPI_Init+0x244>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d002      	beq.n	800a446 <HAL_SPI_Init+0x6e>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b08      	cmp	r3, #8
 800a444:	d811      	bhi.n	800a46a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a44a:	4a72      	ldr	r2, [pc, #456]	@ (800a614 <HAL_SPI_Init+0x23c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d009      	beq.n	800a464 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a70      	ldr	r2, [pc, #448]	@ (800a618 <HAL_SPI_Init+0x240>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d004      	beq.n	800a464 <HAL_SPI_Init+0x8c>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a6f      	ldr	r2, [pc, #444]	@ (800a61c <HAL_SPI_Init+0x244>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d104      	bne.n	800a46e <HAL_SPI_Init+0x96>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b10      	cmp	r3, #16
 800a468:	d901      	bls.n	800a46e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e0cd      	b.n	800a60a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7f7 fe32 	bl	80020ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0201 	bic.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a4aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4b4:	d119      	bne.n	800a4ea <HAL_SPI_Init+0x112>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4be:	d103      	bne.n	800a4c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d008      	beq.n	800a4da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10c      	bne.n	800a4ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4d8:	d107      	bne.n	800a4ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00f      	beq.n	800a516 <HAL_SPI_Init+0x13e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	2b06      	cmp	r3, #6
 800a4fc:	d90b      	bls.n	800a516 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	e007      	b.n	800a526 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a524:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69da      	ldr	r2, [r3, #28]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52e:	431a      	orrs	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	431a      	orrs	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a538:	ea42 0103 	orr.w	r1, r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a550:	431a      	orrs	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	431a      	orrs	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a586:	ea42 0103 	orr.w	r1, r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d113      	bne.n	800a5c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a5c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	40013000 	.word	0x40013000
 800a618:	40003800 	.word	0x40003800
 800a61c:	40003c00 	.word	0x40003c00

0800a620 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af02      	add	r7, sp, #8
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3320      	adds	r3, #32
 800a636:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a638:	f7f7 ff50 	bl	80024dc <HAL_GetTick>
 800a63c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b01      	cmp	r3, #1
 800a648:	d001      	beq.n	800a64e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a64a:	2302      	movs	r3, #2
 800a64c:	e1d1      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_SPI_Transmit+0x3a>
 800a654:	88fb      	ldrh	r3, [r7, #6]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e1c9      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a664:	2b01      	cmp	r3, #1
 800a666:	d101      	bne.n	800a66c <HAL_SPI_Transmit+0x4c>
 800a668:	2302      	movs	r3, #2
 800a66a:	e1c2      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2203      	movs	r2, #3
 800a678:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	88fa      	ldrh	r2, [r7, #6]
 800a68e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a6c4:	d108      	bne.n	800a6d8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	e009      	b.n	800a6ec <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a6ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	4b96      	ldr	r3, [pc, #600]	@ (800a94c <HAL_SPI_Transmit+0x32c>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	88f9      	ldrh	r1, [r7, #6]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a718:	d107      	bne.n	800a72a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a728:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d947      	bls.n	800a7c2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a732:	e03f      	b.n	800a7b4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d114      	bne.n	800a76c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a75e:	b29b      	uxth	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	b29a      	uxth	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a76a:	e023      	b.n	800a7b4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a76c:	f7f7 feb6 	bl	80024dc <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d803      	bhi.n	800a784 <HAL_SPI_Transmit+0x164>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a782:	d102      	bne.n	800a78a <HAL_SPI_Transmit+0x16a>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d114      	bne.n	800a7b4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f936 	bl	800a9fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a796:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e11e      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1b9      	bne.n	800a734 <HAL_SPI_Transmit+0x114>
 800a7c0:	e0f1      	b.n	800a9a6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2b07      	cmp	r3, #7
 800a7c8:	f240 80e6 	bls.w	800a998 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a7cc:	e05d      	b.n	800a88a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d132      	bne.n	800a842 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d918      	bls.n	800a81a <HAL_SPI_Transmit+0x1fa>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d014      	beq.n	800a81a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6812      	ldr	r2, [r2, #0]
 800a7fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a800:	1d1a      	adds	r2, r3, #4
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	3b02      	subs	r3, #2
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a818:	e037      	b.n	800a88a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a81e:	881a      	ldrh	r2, [r3, #0]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a828:	1c9a      	adds	r2, r3, #2
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a840:	e023      	b.n	800a88a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a842:	f7f7 fe4b 	bl	80024dc <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d803      	bhi.n	800a85a <HAL_SPI_Transmit+0x23a>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d102      	bne.n	800a860 <HAL_SPI_Transmit+0x240>
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d114      	bne.n	800a88a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 f8cb 	bl	800a9fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a86c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e0b3      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a890:	b29b      	uxth	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d19b      	bne.n	800a7ce <HAL_SPI_Transmit+0x1ae>
 800a896:	e086      	b.n	800a9a6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d154      	bne.n	800a950 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d918      	bls.n	800a8e4 <HAL_SPI_Transmit+0x2c4>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b6:	2b40      	cmp	r3, #64	@ 0x40
 800a8b8:	d914      	bls.n	800a8e4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8ca:	1d1a      	adds	r2, r3, #4
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3b04      	subs	r3, #4
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8e2:	e059      	b.n	800a998 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d917      	bls.n	800a920 <HAL_SPI_Transmit+0x300>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d013      	beq.n	800a920 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8fc:	881a      	ldrh	r2, [r3, #0]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a906:	1c9a      	adds	r2, r3, #2
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a912:	b29b      	uxth	r3, r3
 800a914:	3b02      	subs	r3, #2
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a91e:	e03b      	b.n	800a998 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3320      	adds	r3, #32
 800a92a:	7812      	ldrb	r2, [r2, #0]
 800a92c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a93e:	b29b      	uxth	r3, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	b29a      	uxth	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a94a:	e025      	b.n	800a998 <HAL_SPI_Transmit+0x378>
 800a94c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a950:	f7f7 fdc4 	bl	80024dc <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d803      	bhi.n	800a968 <HAL_SPI_Transmit+0x348>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d102      	bne.n	800a96e <HAL_SPI_Transmit+0x34e>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d114      	bne.n	800a998 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f000 f844 	bl	800a9fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a97a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e02c      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f47f af79 	bne.w	800a898 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2108      	movs	r1, #8
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 f8c3 	bl	800ab3c <SPI_WaitOnFlagUntilTimeout>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d007      	beq.n	800a9cc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9c2:	f043 0220 	orr.w	r2, r3, #32
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f815 	bl	800a9fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e000      	b.n	800a9f2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
  }
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop

0800a9fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699a      	ldr	r2, [r3, #24]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f042 0208 	orr.w	r2, r2, #8
 800aa1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	699a      	ldr	r2, [r3, #24]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f042 0210 	orr.w	r2, r2, #16
 800aa2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 0201 	bic.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6919      	ldr	r1, [r3, #16]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	4b3c      	ldr	r3, [pc, #240]	@ (800ab38 <SPI_CloseTransfer+0x13c>)
 800aa48:	400b      	ands	r3, r1
 800aa4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689a      	ldr	r2, [r3, #8]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aa5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	d014      	beq.n	800aa92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00f      	beq.n	800aa92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f042 0220 	orr.w	r2, r2, #32
 800aa90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d014      	beq.n	800aac8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00f      	beq.n	800aac8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaae:	f043 0204 	orr.w	r2, r3, #4
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aac6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00f      	beq.n	800aaf2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aad8:	f043 0201 	orr.w	r2, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaf0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00f      	beq.n	800ab1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab02:	f043 0208 	orr.w	r2, r3, #8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ab2c:	bf00      	nop
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	fffffc90 	.word	0xfffffc90

0800ab3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab4c:	e010      	b.n	800ab70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab4e:	f7f7 fcc5 	bl	80024dc <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d803      	bhi.n	800ab66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab64:	d102      	bne.n	800ab6c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e00f      	b.n	800ab90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	695a      	ldr	r2, [r3, #20]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	bf0c      	ite	eq
 800ab80:	2301      	moveq	r3, #1
 800ab82:	2300      	movne	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d0df      	beq.n	800ab4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	3301      	adds	r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	3301      	adds	r3, #1
 800abb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3307      	adds	r3, #7
 800abb6:	08db      	lsrs	r3, r3, #3
 800abb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	fb02 f303 	mul.w	r3, r2, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	e042      	b.n	800ac66 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7f7 fb0a 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2224      	movs	r2, #36	@ 0x24
 800abfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0201 	bic.w	r2, r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fd91 	bl	800b740 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f826 	bl	800ac70 <UART_SetConfig>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d101      	bne.n	800ac2e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e01b      	b.n	800ac66 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	689a      	ldr	r2, [r3, #8]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f042 0201 	orr.w	r2, r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fe10 	bl	800b884 <UART_CheckIdleState>
 800ac64:	4603      	mov	r3, r0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac74:	b092      	sub	sp, #72	@ 0x48
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4bbe      	ldr	r3, [pc, #760]	@ (800af98 <UART_SetConfig+0x328>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	6812      	ldr	r2, [r2, #0]
 800aca6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4ab3      	ldr	r2, [pc, #716]	@ (800af9c <UART_SetConfig+0x32c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acd8:	4313      	orrs	r3, r2
 800acda:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689a      	ldr	r2, [r3, #8]
 800ace2:	4baf      	ldr	r3, [pc, #700]	@ (800afa0 <UART_SetConfig+0x330>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800acec:	430b      	orrs	r3, r1
 800acee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf6:	f023 010f 	bic.w	r1, r3, #15
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4aa6      	ldr	r2, [pc, #664]	@ (800afa4 <UART_SetConfig+0x334>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d177      	bne.n	800ae00 <UART_SetConfig+0x190>
 800ad10:	4ba5      	ldr	r3, [pc, #660]	@ (800afa8 <UART_SetConfig+0x338>)
 800ad12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad18:	2b28      	cmp	r3, #40	@ 0x28
 800ad1a:	d86d      	bhi.n	800adf8 <UART_SetConfig+0x188>
 800ad1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <UART_SetConfig+0xb4>)
 800ad1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad22:	bf00      	nop
 800ad24:	0800adc9 	.word	0x0800adc9
 800ad28:	0800adf9 	.word	0x0800adf9
 800ad2c:	0800adf9 	.word	0x0800adf9
 800ad30:	0800adf9 	.word	0x0800adf9
 800ad34:	0800adf9 	.word	0x0800adf9
 800ad38:	0800adf9 	.word	0x0800adf9
 800ad3c:	0800adf9 	.word	0x0800adf9
 800ad40:	0800adf9 	.word	0x0800adf9
 800ad44:	0800add1 	.word	0x0800add1
 800ad48:	0800adf9 	.word	0x0800adf9
 800ad4c:	0800adf9 	.word	0x0800adf9
 800ad50:	0800adf9 	.word	0x0800adf9
 800ad54:	0800adf9 	.word	0x0800adf9
 800ad58:	0800adf9 	.word	0x0800adf9
 800ad5c:	0800adf9 	.word	0x0800adf9
 800ad60:	0800adf9 	.word	0x0800adf9
 800ad64:	0800add9 	.word	0x0800add9
 800ad68:	0800adf9 	.word	0x0800adf9
 800ad6c:	0800adf9 	.word	0x0800adf9
 800ad70:	0800adf9 	.word	0x0800adf9
 800ad74:	0800adf9 	.word	0x0800adf9
 800ad78:	0800adf9 	.word	0x0800adf9
 800ad7c:	0800adf9 	.word	0x0800adf9
 800ad80:	0800adf9 	.word	0x0800adf9
 800ad84:	0800ade1 	.word	0x0800ade1
 800ad88:	0800adf9 	.word	0x0800adf9
 800ad8c:	0800adf9 	.word	0x0800adf9
 800ad90:	0800adf9 	.word	0x0800adf9
 800ad94:	0800adf9 	.word	0x0800adf9
 800ad98:	0800adf9 	.word	0x0800adf9
 800ad9c:	0800adf9 	.word	0x0800adf9
 800ada0:	0800adf9 	.word	0x0800adf9
 800ada4:	0800ade9 	.word	0x0800ade9
 800ada8:	0800adf9 	.word	0x0800adf9
 800adac:	0800adf9 	.word	0x0800adf9
 800adb0:	0800adf9 	.word	0x0800adf9
 800adb4:	0800adf9 	.word	0x0800adf9
 800adb8:	0800adf9 	.word	0x0800adf9
 800adbc:	0800adf9 	.word	0x0800adf9
 800adc0:	0800adf9 	.word	0x0800adf9
 800adc4:	0800adf1 	.word	0x0800adf1
 800adc8:	2301      	movs	r3, #1
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adce:	e222      	b.n	800b216 <UART_SetConfig+0x5a6>
 800add0:	2304      	movs	r3, #4
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e21e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800add8:	2308      	movs	r3, #8
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e21a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ade0:	2310      	movs	r3, #16
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e216      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ade8:	2320      	movs	r3, #32
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e212      	b.n	800b216 <UART_SetConfig+0x5a6>
 800adf0:	2340      	movs	r3, #64	@ 0x40
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e20e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800adf8:	2380      	movs	r3, #128	@ 0x80
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e20a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a69      	ldr	r2, [pc, #420]	@ (800afac <UART_SetConfig+0x33c>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d130      	bne.n	800ae6c <UART_SetConfig+0x1fc>
 800ae0a:	4b67      	ldr	r3, [pc, #412]	@ (800afa8 <UART_SetConfig+0x338>)
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	d826      	bhi.n	800ae64 <UART_SetConfig+0x1f4>
 800ae16:	a201      	add	r2, pc, #4	@ (adr r2, 800ae1c <UART_SetConfig+0x1ac>)
 800ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1c:	0800ae35 	.word	0x0800ae35
 800ae20:	0800ae3d 	.word	0x0800ae3d
 800ae24:	0800ae45 	.word	0x0800ae45
 800ae28:	0800ae4d 	.word	0x0800ae4d
 800ae2c:	0800ae55 	.word	0x0800ae55
 800ae30:	0800ae5d 	.word	0x0800ae5d
 800ae34:	2300      	movs	r3, #0
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e1ec      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e1e8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae44:	2308      	movs	r3, #8
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e1e4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae4c:	2310      	movs	r3, #16
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e1e0      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae54:	2320      	movs	r3, #32
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e1dc      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae5c:	2340      	movs	r3, #64	@ 0x40
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e1d8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae64:	2380      	movs	r3, #128	@ 0x80
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e1d4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a4f      	ldr	r2, [pc, #316]	@ (800afb0 <UART_SetConfig+0x340>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d130      	bne.n	800aed8 <UART_SetConfig+0x268>
 800ae76:	4b4c      	ldr	r3, [pc, #304]	@ (800afa8 <UART_SetConfig+0x338>)
 800ae78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	2b05      	cmp	r3, #5
 800ae80:	d826      	bhi.n	800aed0 <UART_SetConfig+0x260>
 800ae82:	a201      	add	r2, pc, #4	@ (adr r2, 800ae88 <UART_SetConfig+0x218>)
 800ae84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae88:	0800aea1 	.word	0x0800aea1
 800ae8c:	0800aea9 	.word	0x0800aea9
 800ae90:	0800aeb1 	.word	0x0800aeb1
 800ae94:	0800aeb9 	.word	0x0800aeb9
 800ae98:	0800aec1 	.word	0x0800aec1
 800ae9c:	0800aec9 	.word	0x0800aec9
 800aea0:	2300      	movs	r3, #0
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e1b6      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aea8:	2304      	movs	r3, #4
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e1b2      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aeb0:	2308      	movs	r3, #8
 800aeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb6:	e1ae      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aeb8:	2310      	movs	r3, #16
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aebe:	e1aa      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aec0:	2320      	movs	r3, #32
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e1a6      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aec8:	2340      	movs	r3, #64	@ 0x40
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aece:	e1a2      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aed0:	2380      	movs	r3, #128	@ 0x80
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed6:	e19e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a35      	ldr	r2, [pc, #212]	@ (800afb4 <UART_SetConfig+0x344>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d130      	bne.n	800af44 <UART_SetConfig+0x2d4>
 800aee2:	4b31      	ldr	r3, [pc, #196]	@ (800afa8 <UART_SetConfig+0x338>)
 800aee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	2b05      	cmp	r3, #5
 800aeec:	d826      	bhi.n	800af3c <UART_SetConfig+0x2cc>
 800aeee:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <UART_SetConfig+0x284>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af0d 	.word	0x0800af0d
 800aef8:	0800af15 	.word	0x0800af15
 800aefc:	0800af1d 	.word	0x0800af1d
 800af00:	0800af25 	.word	0x0800af25
 800af04:	0800af2d 	.word	0x0800af2d
 800af08:	0800af35 	.word	0x0800af35
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af12:	e180      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af14:	2304      	movs	r3, #4
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e17c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af1c:	2308      	movs	r3, #8
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e178      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af24:	2310      	movs	r3, #16
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2a:	e174      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af2c:	2320      	movs	r3, #32
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e170      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af34:	2340      	movs	r3, #64	@ 0x40
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3a:	e16c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af3c:	2380      	movs	r3, #128	@ 0x80
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af42:	e168      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1b      	ldr	r2, [pc, #108]	@ (800afb8 <UART_SetConfig+0x348>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d142      	bne.n	800afd4 <UART_SetConfig+0x364>
 800af4e:	4b16      	ldr	r3, [pc, #88]	@ (800afa8 <UART_SetConfig+0x338>)
 800af50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	2b05      	cmp	r3, #5
 800af58:	d838      	bhi.n	800afcc <UART_SetConfig+0x35c>
 800af5a:	a201      	add	r2, pc, #4	@ (adr r2, 800af60 <UART_SetConfig+0x2f0>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af79 	.word	0x0800af79
 800af64:	0800af81 	.word	0x0800af81
 800af68:	0800af89 	.word	0x0800af89
 800af6c:	0800af91 	.word	0x0800af91
 800af70:	0800afbd 	.word	0x0800afbd
 800af74:	0800afc5 	.word	0x0800afc5
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e14a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af80:	2304      	movs	r3, #4
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e146      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af88:	2308      	movs	r3, #8
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e142      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af90:	2310      	movs	r3, #16
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af96:	e13e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af98:	cfff69f3 	.word	0xcfff69f3
 800af9c:	58000c00 	.word	0x58000c00
 800afa0:	11fff4ff 	.word	0x11fff4ff
 800afa4:	40011000 	.word	0x40011000
 800afa8:	58024400 	.word	0x58024400
 800afac:	40004400 	.word	0x40004400
 800afb0:	40004800 	.word	0x40004800
 800afb4:	40004c00 	.word	0x40004c00
 800afb8:	40005000 	.word	0x40005000
 800afbc:	2320      	movs	r3, #32
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc2:	e128      	b.n	800b216 <UART_SetConfig+0x5a6>
 800afc4:	2340      	movs	r3, #64	@ 0x40
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e124      	b.n	800b216 <UART_SetConfig+0x5a6>
 800afcc:	2380      	movs	r3, #128	@ 0x80
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e120      	b.n	800b216 <UART_SetConfig+0x5a6>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4acb      	ldr	r2, [pc, #812]	@ (800b308 <UART_SetConfig+0x698>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d176      	bne.n	800b0cc <UART_SetConfig+0x45c>
 800afde:	4bcb      	ldr	r3, [pc, #812]	@ (800b30c <UART_SetConfig+0x69c>)
 800afe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afe6:	2b28      	cmp	r3, #40	@ 0x28
 800afe8:	d86c      	bhi.n	800b0c4 <UART_SetConfig+0x454>
 800afea:	a201      	add	r2, pc, #4	@ (adr r2, 800aff0 <UART_SetConfig+0x380>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b095 	.word	0x0800b095
 800aff4:	0800b0c5 	.word	0x0800b0c5
 800aff8:	0800b0c5 	.word	0x0800b0c5
 800affc:	0800b0c5 	.word	0x0800b0c5
 800b000:	0800b0c5 	.word	0x0800b0c5
 800b004:	0800b0c5 	.word	0x0800b0c5
 800b008:	0800b0c5 	.word	0x0800b0c5
 800b00c:	0800b0c5 	.word	0x0800b0c5
 800b010:	0800b09d 	.word	0x0800b09d
 800b014:	0800b0c5 	.word	0x0800b0c5
 800b018:	0800b0c5 	.word	0x0800b0c5
 800b01c:	0800b0c5 	.word	0x0800b0c5
 800b020:	0800b0c5 	.word	0x0800b0c5
 800b024:	0800b0c5 	.word	0x0800b0c5
 800b028:	0800b0c5 	.word	0x0800b0c5
 800b02c:	0800b0c5 	.word	0x0800b0c5
 800b030:	0800b0a5 	.word	0x0800b0a5
 800b034:	0800b0c5 	.word	0x0800b0c5
 800b038:	0800b0c5 	.word	0x0800b0c5
 800b03c:	0800b0c5 	.word	0x0800b0c5
 800b040:	0800b0c5 	.word	0x0800b0c5
 800b044:	0800b0c5 	.word	0x0800b0c5
 800b048:	0800b0c5 	.word	0x0800b0c5
 800b04c:	0800b0c5 	.word	0x0800b0c5
 800b050:	0800b0ad 	.word	0x0800b0ad
 800b054:	0800b0c5 	.word	0x0800b0c5
 800b058:	0800b0c5 	.word	0x0800b0c5
 800b05c:	0800b0c5 	.word	0x0800b0c5
 800b060:	0800b0c5 	.word	0x0800b0c5
 800b064:	0800b0c5 	.word	0x0800b0c5
 800b068:	0800b0c5 	.word	0x0800b0c5
 800b06c:	0800b0c5 	.word	0x0800b0c5
 800b070:	0800b0b5 	.word	0x0800b0b5
 800b074:	0800b0c5 	.word	0x0800b0c5
 800b078:	0800b0c5 	.word	0x0800b0c5
 800b07c:	0800b0c5 	.word	0x0800b0c5
 800b080:	0800b0c5 	.word	0x0800b0c5
 800b084:	0800b0c5 	.word	0x0800b0c5
 800b088:	0800b0c5 	.word	0x0800b0c5
 800b08c:	0800b0c5 	.word	0x0800b0c5
 800b090:	0800b0bd 	.word	0x0800b0bd
 800b094:	2301      	movs	r3, #1
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b09a:	e0bc      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b09c:	2304      	movs	r3, #4
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0a2:	e0b8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0a4:	2308      	movs	r3, #8
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0aa:	e0b4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0ac:	2310      	movs	r3, #16
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b2:	e0b0      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0b4:	2320      	movs	r3, #32
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e0ac      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0bc:	2340      	movs	r3, #64	@ 0x40
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c2:	e0a8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0c4:	2380      	movs	r3, #128	@ 0x80
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ca:	e0a4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a8f      	ldr	r2, [pc, #572]	@ (800b310 <UART_SetConfig+0x6a0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d130      	bne.n	800b138 <UART_SetConfig+0x4c8>
 800b0d6:	4b8d      	ldr	r3, [pc, #564]	@ (800b30c <UART_SetConfig+0x69c>)
 800b0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	2b05      	cmp	r3, #5
 800b0e0:	d826      	bhi.n	800b130 <UART_SetConfig+0x4c0>
 800b0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e8 <UART_SetConfig+0x478>)
 800b0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e8:	0800b101 	.word	0x0800b101
 800b0ec:	0800b109 	.word	0x0800b109
 800b0f0:	0800b111 	.word	0x0800b111
 800b0f4:	0800b119 	.word	0x0800b119
 800b0f8:	0800b121 	.word	0x0800b121
 800b0fc:	0800b129 	.word	0x0800b129
 800b100:	2300      	movs	r3, #0
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b106:	e086      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b108:	2304      	movs	r3, #4
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10e:	e082      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b110:	2308      	movs	r3, #8
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b116:	e07e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b118:	2310      	movs	r3, #16
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11e:	e07a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b120:	2320      	movs	r3, #32
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b126:	e076      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b128:	2340      	movs	r3, #64	@ 0x40
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12e:	e072      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b130:	2380      	movs	r3, #128	@ 0x80
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b136:	e06e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a75      	ldr	r2, [pc, #468]	@ (800b314 <UART_SetConfig+0x6a4>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d130      	bne.n	800b1a4 <UART_SetConfig+0x534>
 800b142:	4b72      	ldr	r3, [pc, #456]	@ (800b30c <UART_SetConfig+0x69c>)
 800b144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b146:	f003 0307 	and.w	r3, r3, #7
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	d826      	bhi.n	800b19c <UART_SetConfig+0x52c>
 800b14e:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <UART_SetConfig+0x4e4>)
 800b150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b154:	0800b16d 	.word	0x0800b16d
 800b158:	0800b175 	.word	0x0800b175
 800b15c:	0800b17d 	.word	0x0800b17d
 800b160:	0800b185 	.word	0x0800b185
 800b164:	0800b18d 	.word	0x0800b18d
 800b168:	0800b195 	.word	0x0800b195
 800b16c:	2300      	movs	r3, #0
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b172:	e050      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b174:	2304      	movs	r3, #4
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17a:	e04c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b17c:	2308      	movs	r3, #8
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b182:	e048      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b184:	2310      	movs	r3, #16
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18a:	e044      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b18c:	2320      	movs	r3, #32
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b192:	e040      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b194:	2340      	movs	r3, #64	@ 0x40
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19a:	e03c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b19c:	2380      	movs	r3, #128	@ 0x80
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a2:	e038      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a5b      	ldr	r2, [pc, #364]	@ (800b318 <UART_SetConfig+0x6a8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d130      	bne.n	800b210 <UART_SetConfig+0x5a0>
 800b1ae:	4b57      	ldr	r3, [pc, #348]	@ (800b30c <UART_SetConfig+0x69c>)
 800b1b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	2b05      	cmp	r3, #5
 800b1b8:	d826      	bhi.n	800b208 <UART_SetConfig+0x598>
 800b1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c0 <UART_SetConfig+0x550>)
 800b1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c0:	0800b1d9 	.word	0x0800b1d9
 800b1c4:	0800b1e1 	.word	0x0800b1e1
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	0800b1f1 	.word	0x0800b1f1
 800b1d0:	0800b1f9 	.word	0x0800b1f9
 800b1d4:	0800b201 	.word	0x0800b201
 800b1d8:	2302      	movs	r3, #2
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1de:	e01a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e6:	e016      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ee:	e012      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f6:	e00e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fe:	e00a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b200:	2340      	movs	r3, #64	@ 0x40
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b206:	e006      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b208:	2380      	movs	r3, #128	@ 0x80
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20e:	e002      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b210:	2380      	movs	r3, #128	@ 0x80
 800b212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a3f      	ldr	r2, [pc, #252]	@ (800b318 <UART_SetConfig+0x6a8>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	f040 80f8 	bne.w	800b412 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b222:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b226:	2b20      	cmp	r3, #32
 800b228:	dc46      	bgt.n	800b2b8 <UART_SetConfig+0x648>
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	f2c0 8082 	blt.w	800b334 <UART_SetConfig+0x6c4>
 800b230:	3b02      	subs	r3, #2
 800b232:	2b1e      	cmp	r3, #30
 800b234:	d87e      	bhi.n	800b334 <UART_SetConfig+0x6c4>
 800b236:	a201      	add	r2, pc, #4	@ (adr r2, 800b23c <UART_SetConfig+0x5cc>)
 800b238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23c:	0800b2bf 	.word	0x0800b2bf
 800b240:	0800b335 	.word	0x0800b335
 800b244:	0800b2c7 	.word	0x0800b2c7
 800b248:	0800b335 	.word	0x0800b335
 800b24c:	0800b335 	.word	0x0800b335
 800b250:	0800b335 	.word	0x0800b335
 800b254:	0800b2d7 	.word	0x0800b2d7
 800b258:	0800b335 	.word	0x0800b335
 800b25c:	0800b335 	.word	0x0800b335
 800b260:	0800b335 	.word	0x0800b335
 800b264:	0800b335 	.word	0x0800b335
 800b268:	0800b335 	.word	0x0800b335
 800b26c:	0800b335 	.word	0x0800b335
 800b270:	0800b335 	.word	0x0800b335
 800b274:	0800b2e7 	.word	0x0800b2e7
 800b278:	0800b335 	.word	0x0800b335
 800b27c:	0800b335 	.word	0x0800b335
 800b280:	0800b335 	.word	0x0800b335
 800b284:	0800b335 	.word	0x0800b335
 800b288:	0800b335 	.word	0x0800b335
 800b28c:	0800b335 	.word	0x0800b335
 800b290:	0800b335 	.word	0x0800b335
 800b294:	0800b335 	.word	0x0800b335
 800b298:	0800b335 	.word	0x0800b335
 800b29c:	0800b335 	.word	0x0800b335
 800b2a0:	0800b335 	.word	0x0800b335
 800b2a4:	0800b335 	.word	0x0800b335
 800b2a8:	0800b335 	.word	0x0800b335
 800b2ac:	0800b335 	.word	0x0800b335
 800b2b0:	0800b335 	.word	0x0800b335
 800b2b4:	0800b327 	.word	0x0800b327
 800b2b8:	2b40      	cmp	r3, #64	@ 0x40
 800b2ba:	d037      	beq.n	800b32c <UART_SetConfig+0x6bc>
 800b2bc:	e03a      	b.n	800b334 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b2be:	f7fc feb3 	bl	8008028 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2c4:	e03c      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fc fec2 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e034      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2d6:	f107 0318 	add.w	r3, r7, #24
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd f80e 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e4:	e02c      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2e6:	4b09      	ldr	r3, [pc, #36]	@ (800b30c <UART_SetConfig+0x69c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d016      	beq.n	800b320 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2f2:	4b06      	ldr	r3, [pc, #24]	@ (800b30c <UART_SetConfig+0x69c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	f003 0303 	and.w	r3, r3, #3
 800b2fc:	4a07      	ldr	r2, [pc, #28]	@ (800b31c <UART_SetConfig+0x6ac>)
 800b2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b304:	e01c      	b.n	800b340 <UART_SetConfig+0x6d0>
 800b306:	bf00      	nop
 800b308:	40011400 	.word	0x40011400
 800b30c:	58024400 	.word	0x58024400
 800b310:	40007800 	.word	0x40007800
 800b314:	40007c00 	.word	0x40007c00
 800b318:	58000c00 	.word	0x58000c00
 800b31c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b320:	4b9d      	ldr	r3, [pc, #628]	@ (800b598 <UART_SetConfig+0x928>)
 800b322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b324:	e00c      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b326:	4b9d      	ldr	r3, [pc, #628]	@ (800b59c <UART_SetConfig+0x92c>)
 800b328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b32a:	e009      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b32c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b332:	e005      	b.n	800b340 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b334:	2300      	movs	r3, #0
 800b336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b33e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 81de 	beq.w	800b704 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34c:	4a94      	ldr	r2, [pc, #592]	@ (800b5a0 <UART_SetConfig+0x930>)
 800b34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b352:	461a      	mov	r2, r3
 800b354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b356:	fbb3 f3f2 	udiv	r3, r3, r2
 800b35a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4613      	mov	r3, r2
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	4413      	add	r3, r2
 800b366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b368:	429a      	cmp	r2, r3
 800b36a:	d305      	bcc.n	800b378 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b374:	429a      	cmp	r2, r3
 800b376:	d903      	bls.n	800b380 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b37e:	e1c1      	b.n	800b704 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b382:	2200      	movs	r2, #0
 800b384:	60bb      	str	r3, [r7, #8]
 800b386:	60fa      	str	r2, [r7, #12]
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38c:	4a84      	ldr	r2, [pc, #528]	@ (800b5a0 <UART_SetConfig+0x930>)
 800b38e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b392:	b29b      	uxth	r3, r3
 800b394:	2200      	movs	r2, #0
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b39e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3a2:	f7f4 ff99 	bl	80002d8 <__aeabi_uldivmod>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	f04f 0300 	mov.w	r3, #0
 800b3b6:	020b      	lsls	r3, r1, #8
 800b3b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3bc:	0202      	lsls	r2, r0, #8
 800b3be:	6979      	ldr	r1, [r7, #20]
 800b3c0:	6849      	ldr	r1, [r1, #4]
 800b3c2:	0849      	lsrs	r1, r1, #1
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	eb12 0804 	adds.w	r8, r2, r4
 800b3ce:	eb43 0905 	adc.w	r9, r3, r5
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	469a      	mov	sl, r3
 800b3da:	4693      	mov	fp, r2
 800b3dc:	4652      	mov	r2, sl
 800b3de:	465b      	mov	r3, fp
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	f7f4 ff78 	bl	80002d8 <__aeabi_uldivmod>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3f6:	d308      	bcc.n	800b40a <UART_SetConfig+0x79a>
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3fe:	d204      	bcs.n	800b40a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b406:	60da      	str	r2, [r3, #12]
 800b408:	e17c      	b.n	800b704 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b410:	e178      	b.n	800b704 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b41a:	f040 80c5 	bne.w	800b5a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b41e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b422:	2b20      	cmp	r3, #32
 800b424:	dc48      	bgt.n	800b4b8 <UART_SetConfig+0x848>
 800b426:	2b00      	cmp	r3, #0
 800b428:	db7b      	blt.n	800b522 <UART_SetConfig+0x8b2>
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	d879      	bhi.n	800b522 <UART_SetConfig+0x8b2>
 800b42e:	a201      	add	r2, pc, #4	@ (adr r2, 800b434 <UART_SetConfig+0x7c4>)
 800b430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b434:	0800b4bf 	.word	0x0800b4bf
 800b438:	0800b4c7 	.word	0x0800b4c7
 800b43c:	0800b523 	.word	0x0800b523
 800b440:	0800b523 	.word	0x0800b523
 800b444:	0800b4cf 	.word	0x0800b4cf
 800b448:	0800b523 	.word	0x0800b523
 800b44c:	0800b523 	.word	0x0800b523
 800b450:	0800b523 	.word	0x0800b523
 800b454:	0800b4df 	.word	0x0800b4df
 800b458:	0800b523 	.word	0x0800b523
 800b45c:	0800b523 	.word	0x0800b523
 800b460:	0800b523 	.word	0x0800b523
 800b464:	0800b523 	.word	0x0800b523
 800b468:	0800b523 	.word	0x0800b523
 800b46c:	0800b523 	.word	0x0800b523
 800b470:	0800b523 	.word	0x0800b523
 800b474:	0800b4ef 	.word	0x0800b4ef
 800b478:	0800b523 	.word	0x0800b523
 800b47c:	0800b523 	.word	0x0800b523
 800b480:	0800b523 	.word	0x0800b523
 800b484:	0800b523 	.word	0x0800b523
 800b488:	0800b523 	.word	0x0800b523
 800b48c:	0800b523 	.word	0x0800b523
 800b490:	0800b523 	.word	0x0800b523
 800b494:	0800b523 	.word	0x0800b523
 800b498:	0800b523 	.word	0x0800b523
 800b49c:	0800b523 	.word	0x0800b523
 800b4a0:	0800b523 	.word	0x0800b523
 800b4a4:	0800b523 	.word	0x0800b523
 800b4a8:	0800b523 	.word	0x0800b523
 800b4ac:	0800b523 	.word	0x0800b523
 800b4b0:	0800b523 	.word	0x0800b523
 800b4b4:	0800b515 	.word	0x0800b515
 800b4b8:	2b40      	cmp	r3, #64	@ 0x40
 800b4ba:	d02e      	beq.n	800b51a <UART_SetConfig+0x8aa>
 800b4bc:	e031      	b.n	800b522 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4be:	f7fa fdbd 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 800b4c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4c4:	e033      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4c6:	f7fa fdcf 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 800b4ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4cc:	e02f      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fc fdbe 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4dc:	e027      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4de:	f107 0318 	add.w	r3, r7, #24
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fc ff0a 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ec:	e01f      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ee:	4b2d      	ldr	r3, [pc, #180]	@ (800b5a4 <UART_SetConfig+0x934>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d009      	beq.n	800b50e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4fa:	4b2a      	ldr	r3, [pc, #168]	@ (800b5a4 <UART_SetConfig+0x934>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	08db      	lsrs	r3, r3, #3
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	4a24      	ldr	r2, [pc, #144]	@ (800b598 <UART_SetConfig+0x928>)
 800b506:	fa22 f303 	lsr.w	r3, r2, r3
 800b50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b50c:	e00f      	b.n	800b52e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b50e:	4b22      	ldr	r3, [pc, #136]	@ (800b598 <UART_SetConfig+0x928>)
 800b510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b512:	e00c      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b514:	4b21      	ldr	r3, [pc, #132]	@ (800b59c <UART_SetConfig+0x92c>)
 800b516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b518:	e009      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b51a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b520:	e005      	b.n	800b52e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b52c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 80e7 	beq.w	800b704 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53a:	4a19      	ldr	r2, [pc, #100]	@ (800b5a0 <UART_SetConfig+0x930>)
 800b53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b540:	461a      	mov	r2, r3
 800b542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b544:	fbb3 f3f2 	udiv	r3, r3, r2
 800b548:	005a      	lsls	r2, r3, #1
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	441a      	add	r2, r3
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55e:	2b0f      	cmp	r3, #15
 800b560:	d916      	bls.n	800b590 <UART_SetConfig+0x920>
 800b562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b568:	d212      	bcs.n	800b590 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f023 030f 	bic.w	r3, r3, #15
 800b572:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	b29b      	uxth	r3, r3
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	b29a      	uxth	r2, r3
 800b580:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b582:	4313      	orrs	r3, r2
 800b584:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	e0b9      	b.n	800b704 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b596:	e0b5      	b.n	800b704 <UART_SetConfig+0xa94>
 800b598:	03d09000 	.word	0x03d09000
 800b59c:	003d0900 	.word	0x003d0900
 800b5a0:	0800fc20 	.word	0x0800fc20
 800b5a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	dc49      	bgt.n	800b644 <UART_SetConfig+0x9d4>
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	db7c      	blt.n	800b6ae <UART_SetConfig+0xa3e>
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	d87a      	bhi.n	800b6ae <UART_SetConfig+0xa3e>
 800b5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c0 <UART_SetConfig+0x950>)
 800b5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5be:	bf00      	nop
 800b5c0:	0800b64b 	.word	0x0800b64b
 800b5c4:	0800b653 	.word	0x0800b653
 800b5c8:	0800b6af 	.word	0x0800b6af
 800b5cc:	0800b6af 	.word	0x0800b6af
 800b5d0:	0800b65b 	.word	0x0800b65b
 800b5d4:	0800b6af 	.word	0x0800b6af
 800b5d8:	0800b6af 	.word	0x0800b6af
 800b5dc:	0800b6af 	.word	0x0800b6af
 800b5e0:	0800b66b 	.word	0x0800b66b
 800b5e4:	0800b6af 	.word	0x0800b6af
 800b5e8:	0800b6af 	.word	0x0800b6af
 800b5ec:	0800b6af 	.word	0x0800b6af
 800b5f0:	0800b6af 	.word	0x0800b6af
 800b5f4:	0800b6af 	.word	0x0800b6af
 800b5f8:	0800b6af 	.word	0x0800b6af
 800b5fc:	0800b6af 	.word	0x0800b6af
 800b600:	0800b67b 	.word	0x0800b67b
 800b604:	0800b6af 	.word	0x0800b6af
 800b608:	0800b6af 	.word	0x0800b6af
 800b60c:	0800b6af 	.word	0x0800b6af
 800b610:	0800b6af 	.word	0x0800b6af
 800b614:	0800b6af 	.word	0x0800b6af
 800b618:	0800b6af 	.word	0x0800b6af
 800b61c:	0800b6af 	.word	0x0800b6af
 800b620:	0800b6af 	.word	0x0800b6af
 800b624:	0800b6af 	.word	0x0800b6af
 800b628:	0800b6af 	.word	0x0800b6af
 800b62c:	0800b6af 	.word	0x0800b6af
 800b630:	0800b6af 	.word	0x0800b6af
 800b634:	0800b6af 	.word	0x0800b6af
 800b638:	0800b6af 	.word	0x0800b6af
 800b63c:	0800b6af 	.word	0x0800b6af
 800b640:	0800b6a1 	.word	0x0800b6a1
 800b644:	2b40      	cmp	r3, #64	@ 0x40
 800b646:	d02e      	beq.n	800b6a6 <UART_SetConfig+0xa36>
 800b648:	e031      	b.n	800b6ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b64a:	f7fa fcf7 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 800b64e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b650:	e033      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b652:	f7fa fd09 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 800b656:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b658:	e02f      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b65a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fc fcf8 	bl	8008054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b668:	e027      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b66a:	f107 0318 	add.w	r3, r7, #24
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fc fe44 	bl	80082fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b678:	e01f      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b67a:	4b2d      	ldr	r3, [pc, #180]	@ (800b730 <UART_SetConfig+0xac0>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b00      	cmp	r3, #0
 800b684:	d009      	beq.n	800b69a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b686:	4b2a      	ldr	r3, [pc, #168]	@ (800b730 <UART_SetConfig+0xac0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	08db      	lsrs	r3, r3, #3
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	4a28      	ldr	r2, [pc, #160]	@ (800b734 <UART_SetConfig+0xac4>)
 800b692:	fa22 f303 	lsr.w	r3, r2, r3
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b698:	e00f      	b.n	800b6ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b69a:	4b26      	ldr	r3, [pc, #152]	@ (800b734 <UART_SetConfig+0xac4>)
 800b69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b69e:	e00c      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6a0:	4b25      	ldr	r3, [pc, #148]	@ (800b738 <UART_SetConfig+0xac8>)
 800b6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6a4:	e009      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ac:	e005      	b.n	800b6ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b6b8:	bf00      	nop
    }

    if (pclk != 0U)
 800b6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d021      	beq.n	800b704 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b73c <UART_SetConfig+0xacc>)
 800b6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	085b      	lsrs	r3, r3, #1
 800b6d8:	441a      	add	r2, r3
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e6:	2b0f      	cmp	r3, #15
 800b6e8:	d909      	bls.n	800b6fe <UART_SetConfig+0xa8e>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6f0:	d205      	bcs.n	800b6fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60da      	str	r2, [r3, #12]
 800b6fc:	e002      	b.n	800b704 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2201      	movs	r2, #1
 800b708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2201      	movs	r2, #1
 800b710:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2200      	movs	r2, #0
 800b718:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b720:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b724:	4618      	mov	r0, r3
 800b726:	3748      	adds	r7, #72	@ 0x48
 800b728:	46bd      	mov	sp, r7
 800b72a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b72e:	bf00      	nop
 800b730:	58024400 	.word	0x58024400
 800b734:	03d09000 	.word	0x03d09000
 800b738:	003d0900 	.word	0x003d0900
 800b73c:	0800fc20 	.word	0x0800fc20

0800b740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74c:	f003 0308 	and.w	r3, r3, #8
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b2:	f003 0304 	and.w	r3, r3, #4
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d4:	f003 0310 	and.w	r3, r3, #16
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f6:	f003 0320 	and.w	r3, r3, #32
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	430a      	orrs	r2, r1
 800b812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01a      	beq.n	800b856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	430a      	orrs	r2, r1
 800b834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b83a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b83e:	d10a      	bne.n	800b856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00a      	beq.n	800b878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	430a      	orrs	r2, r1
 800b876:	605a      	str	r2, [r3, #4]
  }
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b098      	sub	sp, #96	@ 0x60
 800b888:	af02      	add	r7, sp, #8
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b894:	f7f6 fe22 	bl	80024dc <HAL_GetTick>
 800b898:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0308 	and.w	r3, r3, #8
 800b8a4:	2b08      	cmp	r3, #8
 800b8a6:	d12f      	bne.n	800b908 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f88e 	bl	800b9d8 <UART_WaitOnFlagUntilTimeout>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d022      	beq.n	800b908 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ca:	e853 3f00 	ldrex	r3, [r3]
 800b8ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e6      	bne.n	800b8c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e063      	b.n	800b9d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b04      	cmp	r3, #4
 800b914:	d149      	bne.n	800b9aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b916:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b91e:	2200      	movs	r2, #0
 800b920:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f857 	bl	800b9d8 <UART_WaitOnFlagUntilTimeout>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d03c      	beq.n	800b9aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	623b      	str	r3, [r7, #32]
   return(result);
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b94e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b950:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e6      	bne.n	800b930 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	60fb      	str	r3, [r7, #12]
   return(result);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f023 0301 	bic.w	r3, r3, #1
 800b978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3308      	adds	r3, #8
 800b980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b982:	61fa      	str	r2, [r7, #28]
 800b984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b986:	69b9      	ldr	r1, [r7, #24]
 800b988:	69fa      	ldr	r2, [r7, #28]
 800b98a:	e841 2300 	strex	r3, r2, [r1]
 800b98e:	617b      	str	r3, [r7, #20]
   return(result);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1e5      	bne.n	800b962 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e012      	b.n	800b9d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3758      	adds	r7, #88	@ 0x58
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9e8:	e04f      	b.n	800ba8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f0:	d04b      	beq.n	800ba8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9f2:	f7f6 fd73 	bl	80024dc <HAL_GetTick>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	69ba      	ldr	r2, [r7, #24]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d302      	bcc.n	800ba08 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e04e      	b.n	800baaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d037      	beq.n	800ba8a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b80      	cmp	r3, #128	@ 0x80
 800ba1e:	d034      	beq.n	800ba8a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2b40      	cmp	r3, #64	@ 0x40
 800ba24:	d031      	beq.n	800ba8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69db      	ldr	r3, [r3, #28]
 800ba2c:	f003 0308 	and.w	r3, r3, #8
 800ba30:	2b08      	cmp	r3, #8
 800ba32:	d110      	bne.n	800ba56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2208      	movs	r2, #8
 800ba3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f839 	bl	800bab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2208      	movs	r2, #8
 800ba46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e029      	b.n	800baaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	69db      	ldr	r3, [r3, #28]
 800ba5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba64:	d111      	bne.n	800ba8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 f81f 	bl	800bab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2220      	movs	r2, #32
 800ba7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e00f      	b.n	800baaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	69da      	ldr	r2, [r3, #28]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	4013      	ands	r3, r2
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	bf0c      	ite	eq
 800ba9a:	2301      	moveq	r3, #1
 800ba9c:	2300      	movne	r3, #0
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	461a      	mov	r2, r3
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d0a0      	beq.n	800b9ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b095      	sub	sp, #84	@ 0x54
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800baca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bacc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bada:	643b      	str	r3, [r7, #64]	@ 0x40
 800badc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bae2:	e841 2300 	strex	r3, r2, [r1]
 800bae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1e6      	bne.n	800babc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3308      	adds	r3, #8
 800baf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	4b1e      	ldr	r3, [pc, #120]	@ (800bb7c <UART_EndRxTransfer+0xc8>)
 800bb02:	4013      	ands	r3, r2
 800bb04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e5      	bne.n	800baee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d118      	bne.n	800bb5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f023 0310 	bic.w	r3, r3, #16
 800bb3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb48:	61bb      	str	r3, [r7, #24]
 800bb4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	6979      	ldr	r1, [r7, #20]
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	613b      	str	r3, [r7, #16]
   return(result);
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e6      	bne.n	800bb2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb70:	bf00      	nop
 800bb72:	3754      	adds	r7, #84	@ 0x54
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	effffffe 	.word	0xeffffffe

0800bb80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e027      	b.n	800bbe6 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2224      	movs	r2, #36	@ 0x24
 800bba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f022 0201 	bic.w	r2, r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bbc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e02d      	b.n	800bc66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2224      	movs	r2, #36	@ 0x24
 800bc16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 0201 	bic.w	r2, r2, #1
 800bc30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	430a      	orrs	r2, r1
 800bc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f850 	bl	800bcec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d101      	bne.n	800bc86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc82:	2302      	movs	r3, #2
 800bc84:	e02d      	b.n	800bce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2224      	movs	r2, #36	@ 0x24
 800bc92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 0201 	bic.w	r2, r2, #1
 800bcac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	430a      	orrs	r2, r1
 800bcc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f812 	bl	800bcec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d108      	bne.n	800bd0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd0c:	e031      	b.n	800bd72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd0e:	2310      	movs	r3, #16
 800bd10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd12:	2310      	movs	r3, #16
 800bd14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	0e5b      	lsrs	r3, r3, #25
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	0f5b      	lsrs	r3, r3, #29
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	f003 0307 	and.w	r3, r3, #7
 800bd34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	7b3a      	ldrb	r2, [r7, #12]
 800bd3a:	4911      	ldr	r1, [pc, #68]	@ (800bd80 <UARTEx_SetNbDataToProcess+0x94>)
 800bd3c:	5c8a      	ldrb	r2, [r1, r2]
 800bd3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd42:	7b3a      	ldrb	r2, [r7, #12]
 800bd44:	490f      	ldr	r1, [pc, #60]	@ (800bd84 <UARTEx_SetNbDataToProcess+0x98>)
 800bd46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd48:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	7b7a      	ldrb	r2, [r7, #13]
 800bd58:	4909      	ldr	r1, [pc, #36]	@ (800bd80 <UARTEx_SetNbDataToProcess+0x94>)
 800bd5a:	5c8a      	ldrb	r2, [r1, r2]
 800bd5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd60:	7b7a      	ldrb	r2, [r7, #13]
 800bd62:	4908      	ldr	r1, [pc, #32]	@ (800bd84 <UARTEx_SetNbDataToProcess+0x98>)
 800bd64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd66:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd72:	bf00      	nop
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	0800fc38 	.word	0x0800fc38
 800bd84:	0800fc40 	.word	0x0800fc40

0800bd88 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bd88:	b084      	sub	sp, #16
 800bd8a:	b480      	push	{r7}
 800bd8c:	b085      	sub	sp, #20
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	f107 001c 	add.w	r0, r7, #28
 800bd96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bd9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bda0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bda2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bda6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bdaa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bdae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	685a      	ldr	r2, [r3, #4]
 800bdba:	4b07      	ldr	r3, [pc, #28]	@ (800bdd8 <SDMMC_Init+0x50>)
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	b004      	add	sp, #16
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	ffc02c00 	.word	0xffc02c00

0800bddc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f043 0203 	orr.w	r2, r3, #3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b083      	sub	sp, #12
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0303 	and.w	r3, r3, #3
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
	...

0800be58 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800be76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800be7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800be82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68da      	ldr	r2, [r3, #12]
 800be8e:	4b06      	ldr	r3, [pc, #24]	@ (800bea8 <SDMMC_SendCommand+0x50>)
 800be90:	4013      	ands	r3, r2
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	fffee0c0 	.word	0xfffee0c0

0800beac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	b2db      	uxtb	r3, r3
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b085      	sub	sp, #20
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	3314      	adds	r3, #20
 800bed4:	461a      	mov	r2, r3
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	4413      	add	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf12:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bf18:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bf1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	431a      	orrs	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bf36:	2300      	movs	r3, #0

}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bf52:	2310      	movs	r3, #16
 800bf54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf66:	f107 0308 	add.w	r3, r7, #8
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7ff ff73 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bf72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf76:	2110      	movs	r1, #16
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fa5f 	bl	800c43c <SDMMC_GetCmdResp1>
 800bf7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf80:	69fb      	ldr	r3, [r7, #28]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3720      	adds	r7, #32
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b088      	sub	sp, #32
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bf98:	2311      	movs	r3, #17
 800bf9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfac:	f107 0308 	add.w	r3, r7, #8
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff ff50 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bfb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfbc:	2111      	movs	r1, #17
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa3c 	bl	800c43c <SDMMC_GetCmdResp1>
 800bfc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfc6:	69fb      	ldr	r3, [r7, #28]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3720      	adds	r7, #32
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bfde:	2312      	movs	r3, #18
 800bfe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bff2:	f107 0308 	add.w	r3, r7, #8
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7ff ff2d 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c002:	2112      	movs	r1, #18
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa19 	bl	800c43c <SDMMC_GetCmdResp1>
 800c00a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c00c:	69fb      	ldr	r3, [r7, #28]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3720      	adds	r7, #32
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b088      	sub	sp, #32
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c024:	2318      	movs	r3, #24
 800c026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c02c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c02e:	2300      	movs	r3, #0
 800c030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c038:	f107 0308 	add.w	r3, r7, #8
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff ff0a 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c044:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c048:	2118      	movs	r1, #24
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f9f6 	bl	800c43c <SDMMC_GetCmdResp1>
 800c050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c052:	69fb      	ldr	r3, [r7, #28]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3720      	adds	r7, #32
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c06a:	2319      	movs	r3, #25
 800c06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c06e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c074:	2300      	movs	r3, #0
 800c076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff fee7 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c08a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c08e:	2119      	movs	r1, #25
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f9d3 	bl	800c43c <SDMMC_GetCmdResp1>
 800c096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c098:	69fb      	ldr	r3, [r7, #28]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3720      	adds	r7, #32
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0c2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0dc:	f107 0308 	add.w	r3, r7, #8
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff feb8 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c0e8:	4a0b      	ldr	r2, [pc, #44]	@ (800c118 <SDMMC_CmdStopTransfer+0x74>)
 800c0ea:	210c      	movs	r1, #12
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f9a5 	bl	800c43c <SDMMC_GetCmdResp1>
 800c0f2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c106:	d101      	bne.n	800c10c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c108:	2300      	movs	r3, #0
 800c10a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c10c:	69fb      	ldr	r3, [r7, #28]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	05f5e100 	.word	0x05f5e100

0800c11c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c12a:	2307      	movs	r3, #7
 800c12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c12e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c13c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fe87 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c14a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c14e:	2107      	movs	r1, #7
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f973 	bl	800c43c <SDMMC_GetCmdResp1>
 800c156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c158:	69fb      	ldr	r3, [r7, #28]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3720      	adds	r7, #32
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b088      	sub	sp, #32
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c172:	2300      	movs	r3, #0
 800c174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c176:	2300      	movs	r3, #0
 800c178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c17a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c17e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c180:	f107 0308 	add.w	r3, r7, #8
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff fe66 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fb97 	bl	800c8c0 <SDMMC_GetCmdError>
 800c192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c194:	69fb      	ldr	r3, [r7, #28]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3720      	adds	r7, #32
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b088      	sub	sp, #32
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c1a6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c1aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1c0:	f107 0308 	add.w	r3, r7, #8
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff fe46 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fb29 	bl	800c824 <SDMMC_GetCmdResp7>
 800c1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3720      	adds	r7, #32
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b088      	sub	sp, #32
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c1ec:	2337      	movs	r3, #55	@ 0x37
 800c1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c200:	f107 0308 	add.w	r3, r7, #8
 800c204:	4619      	mov	r1, r3
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fe26 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c20c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c210:	2137      	movs	r1, #55	@ 0x37
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f912 	bl	800c43c <SDMMC_GetCmdResp1>
 800c218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c21a:	69fb      	ldr	r3, [r7, #28]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3720      	adds	r7, #32
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b088      	sub	sp, #32
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c232:	2329      	movs	r3, #41	@ 0x29
 800c234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c23c:	2300      	movs	r3, #0
 800c23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c246:	f107 0308 	add.w	r3, r7, #8
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff fe03 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa2e 	bl	800c6b4 <SDMMC_GetCmdResp3>
 800c258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c25a:	69fb      	ldr	r3, [r7, #28]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3720      	adds	r7, #32
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c272:	2306      	movs	r3, #6
 800c274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c27a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c27c:	2300      	movs	r3, #0
 800c27e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c286:	f107 0308 	add.w	r3, r7, #8
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff fde3 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c292:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c296:	2106      	movs	r1, #6
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f8cf 	bl	800c43c <SDMMC_GetCmdResp1>
 800c29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2a0:	69fb      	ldr	r3, [r7, #28]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3720      	adds	r7, #32
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b088      	sub	sp, #32
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c2b6:	2333      	movs	r3, #51	@ 0x33
 800c2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff fdc1 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c2d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2da:	2133      	movs	r1, #51	@ 0x33
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f8ad 	bl	800c43c <SDMMC_GetCmdResp1>
 800c2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e4:	69fb      	ldr	r3, [r7, #28]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b088      	sub	sp, #32
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c2fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c30c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c30e:	f107 0308 	add.w	r3, r7, #8
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff fd9f 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f980 	bl	800c620 <SDMMC_GetCmdResp2>
 800c320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c322:	69fb      	ldr	r3, [r7, #28]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3720      	adds	r7, #32
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b088      	sub	sp, #32
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c33a:	2309      	movs	r3, #9
 800c33c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c33e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c344:	2300      	movs	r3, #0
 800c346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c34c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c34e:	f107 0308 	add.w	r3, r7, #8
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fd7f 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f960 	bl	800c620 <SDMMC_GetCmdResp2>
 800c360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c362:	69fb      	ldr	r3, [r7, #28]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3720      	adds	r7, #32
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c376:	2300      	movs	r3, #0
 800c378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c37a:	2303      	movs	r3, #3
 800c37c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c37e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c38c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c38e:	f107 0308 	add.w	r3, r7, #8
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7ff fd5f 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	2103      	movs	r1, #3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f9c8 	bl	800c734 <SDMMC_GetCmdResp6>
 800c3a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3720      	adds	r7, #32
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c3be:	230d      	movs	r3, #13
 800c3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c3d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3d2:	f107 0308 	add.w	r3, r7, #8
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff fd3d 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c3de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3e2:	210d      	movs	r1, #13
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 f829 	bl	800c43c <SDMMC_GetCmdResp1>
 800c3ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3ec:	69fb      	ldr	r3, [r7, #28]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3720      	adds	r7, #32
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b088      	sub	sp, #32
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c402:	230d      	movs	r3, #13
 800c404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c40a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c40c:	2300      	movs	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c416:	f107 0308 	add.w	r3, r7, #8
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff fd1b 	bl	800be58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c422:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c426:	210d      	movs	r1, #13
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 f807 	bl	800c43c <SDMMC_GetCmdResp1>
 800c42e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c430:	69fb      	ldr	r3, [r7, #28]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3720      	adds	r7, #32
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
	...

0800c43c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	460b      	mov	r3, r1
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c44a:	4b70      	ldr	r3, [pc, #448]	@ (800c60c <SDMMC_GetCmdResp1+0x1d0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a70      	ldr	r2, [pc, #448]	@ (800c610 <SDMMC_GetCmdResp1+0x1d4>)
 800c450:	fba2 2303 	umull	r2, r3, r2, r3
 800c454:	0a5a      	lsrs	r2, r3, #9
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	fb02 f303 	mul.w	r3, r2, r3
 800c45c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	1e5a      	subs	r2, r3, #1
 800c462:	61fa      	str	r2, [r7, #28]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d102      	bne.n	800c46e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c468:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c46c:	e0c9      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c472:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	4b67      	ldr	r3, [pc, #412]	@ (800c614 <SDMMC_GetCmdResp1+0x1d8>)
 800c478:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0ef      	beq.n	800c45e <SDMMC_GetCmdResp1+0x22>
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1ea      	bne.n	800c45e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d004      	beq.n	800c49e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2204      	movs	r2, #4
 800c498:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c49a:	2304      	movs	r3, #4
 800c49c:	e0b1      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d004      	beq.n	800c4b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e0a6      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4a58      	ldr	r2, [pc, #352]	@ (800c618 <SDMMC_GetCmdResp1+0x1dc>)
 800c4b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff fcf6 	bl	800beac <SDMMC_GetCommandResponse>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	7afb      	ldrb	r3, [r7, #11]
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d001      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e099      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f7ff fcf8 	bl	800bec6 <SDMMC_GetResponse>
 800c4d6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	4b50      	ldr	r3, [pc, #320]	@ (800c61c <SDMMC_GetCmdResp1+0x1e0>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e08d      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	da02      	bge.n	800c4f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c4ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c4f0:	e087      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c4fc:	2340      	movs	r3, #64	@ 0x40
 800c4fe:	e080      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c50a:	2380      	movs	r3, #128	@ 0x80
 800c50c:	e079      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c51c:	e071      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c52c:	e069      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c53c:	e061      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c548:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c54c:	e059      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c55c:	e051      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c56c:	e049      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c578:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c57c:	e041      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c58c:	e039      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c598:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c59c:	e031      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c5a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c5ac:	e029      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c5bc:	e021      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c5c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c5cc:	e019      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c5d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c5dc:	e011      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c5e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c5ec:	e009      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f003 0308 	and.w	r3, r3, #8
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c5f8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c5fc:	e001      	b.n	800c602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c602:	4618      	mov	r0, r3
 800c604:	3720      	adds	r7, #32
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	24000000 	.word	0x24000000
 800c610:	10624dd3 	.word	0x10624dd3
 800c614:	00200045 	.word	0x00200045
 800c618:	002000c5 	.word	0x002000c5
 800c61c:	fdffe008 	.word	0xfdffe008

0800c620 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c628:	4b1f      	ldr	r3, [pc, #124]	@ (800c6a8 <SDMMC_GetCmdResp2+0x88>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a1f      	ldr	r2, [pc, #124]	@ (800c6ac <SDMMC_GetCmdResp2+0x8c>)
 800c62e:	fba2 2303 	umull	r2, r3, r2, r3
 800c632:	0a5b      	lsrs	r3, r3, #9
 800c634:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c638:	fb02 f303 	mul.w	r3, r2, r3
 800c63c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	1e5a      	subs	r2, r3, #1
 800c642:	60fa      	str	r2, [r7, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c64c:	e026      	b.n	800c69c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c652:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0ef      	beq.n	800c63e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1ea      	bne.n	800c63e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66c:	f003 0304 	and.w	r3, r3, #4
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2204      	movs	r2, #4
 800c678:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c67a:	2304      	movs	r3, #4
 800c67c:	e00e      	b.n	800c69c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	2b00      	cmp	r3, #0
 800c688:	d004      	beq.n	800c694 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c690:	2301      	movs	r3, #1
 800c692:	e003      	b.n	800c69c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a06      	ldr	r2, [pc, #24]	@ (800c6b0 <SDMMC_GetCmdResp2+0x90>)
 800c698:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	24000000 	.word	0x24000000
 800c6ac:	10624dd3 	.word	0x10624dd3
 800c6b0:	002000c5 	.word	0x002000c5

0800c6b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c728 <SDMMC_GetCmdResp3+0x74>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800c72c <SDMMC_GetCmdResp3+0x78>)
 800c6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c6:	0a5b      	lsrs	r3, r3, #9
 800c6c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6cc:	fb02 f303 	mul.w	r3, r2, r3
 800c6d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	1e5a      	subs	r2, r3, #1
 800c6d6:	60fa      	str	r2, [r7, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c6e0:	e01b      	b.n	800c71a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d0ef      	beq.n	800c6d2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1ea      	bne.n	800c6d2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c700:	f003 0304 	and.w	r3, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	d004      	beq.n	800c712 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2204      	movs	r2, #4
 800c70c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c70e:	2304      	movs	r3, #4
 800c710:	e003      	b.n	800c71a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a06      	ldr	r2, [pc, #24]	@ (800c730 <SDMMC_GetCmdResp3+0x7c>)
 800c716:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	24000000 	.word	0x24000000
 800c72c:	10624dd3 	.word	0x10624dd3
 800c730:	002000c5 	.word	0x002000c5

0800c734 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	460b      	mov	r3, r1
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c742:	4b35      	ldr	r3, [pc, #212]	@ (800c818 <SDMMC_GetCmdResp6+0xe4>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a35      	ldr	r2, [pc, #212]	@ (800c81c <SDMMC_GetCmdResp6+0xe8>)
 800c748:	fba2 2303 	umull	r2, r3, r2, r3
 800c74c:	0a5b      	lsrs	r3, r3, #9
 800c74e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c752:	fb02 f303 	mul.w	r3, r2, r3
 800c756:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	1e5a      	subs	r2, r3, #1
 800c75c:	61fa      	str	r2, [r7, #28]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d102      	bne.n	800c768 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c762:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c766:	e052      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c76c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c774:	2b00      	cmp	r3, #0
 800c776:	d0ef      	beq.n	800c758 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1ea      	bne.n	800c758 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c786:	f003 0304 	and.w	r3, r3, #4
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d004      	beq.n	800c798 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2204      	movs	r2, #4
 800c792:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c794:	2304      	movs	r3, #4
 800c796:	e03a      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d004      	beq.n	800c7ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e02f      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f7ff fb7c 	bl	800beac <SDMMC_GetCommandResponse>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	7afb      	ldrb	r3, [r7, #11]
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d001      	beq.n	800c7c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e025      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	4a16      	ldr	r2, [pc, #88]	@ (800c820 <SDMMC_GetCmdResp6+0xec>)
 800c7c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7ff fb7b 	bl	800bec6 <SDMMC_GetResponse>
 800c7d0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d106      	bne.n	800c7ea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	0c1b      	lsrs	r3, r3, #16
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e011      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c7f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c7f8:	e009      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c808:	e001      	b.n	800c80e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c80a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	24000000 	.word	0x24000000
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	002000c5 	.word	0x002000c5

0800c824 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c82c:	4b22      	ldr	r3, [pc, #136]	@ (800c8b8 <SDMMC_GetCmdResp7+0x94>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a22      	ldr	r2, [pc, #136]	@ (800c8bc <SDMMC_GetCmdResp7+0x98>)
 800c832:	fba2 2303 	umull	r2, r3, r2, r3
 800c836:	0a5b      	lsrs	r3, r3, #9
 800c838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c83c:	fb02 f303 	mul.w	r3, r2, r3
 800c840:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	1e5a      	subs	r2, r3, #1
 800c846:	60fa      	str	r2, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c84c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c850:	e02c      	b.n	800c8ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c856:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0ef      	beq.n	800c842 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1ea      	bne.n	800c842 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c870:	f003 0304 	and.w	r3, r3, #4
 800c874:	2b00      	cmp	r3, #0
 800c876:	d004      	beq.n	800c882 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2204      	movs	r2, #4
 800c87c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c87e:	2304      	movs	r3, #4
 800c880:	e014      	b.n	800c8ac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c894:	2301      	movs	r3, #1
 800c896:	e009      	b.n	800c8ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2240      	movs	r2, #64	@ 0x40
 800c8a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c8aa:	2300      	movs	r3, #0

}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	24000000 	.word	0x24000000
 800c8bc:	10624dd3 	.word	0x10624dd3

0800c8c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8c8:	4b11      	ldr	r3, [pc, #68]	@ (800c910 <SDMMC_GetCmdError+0x50>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a11      	ldr	r2, [pc, #68]	@ (800c914 <SDMMC_GetCmdError+0x54>)
 800c8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d2:	0a5b      	lsrs	r3, r3, #9
 800c8d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8d8:	fb02 f303 	mul.w	r3, r2, r3
 800c8dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	1e5a      	subs	r2, r3, #1
 800c8e2:	60fa      	str	r2, [r7, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d102      	bne.n	800c8ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c8ec:	e009      	b.n	800c902 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d0f1      	beq.n	800c8de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a06      	ldr	r2, [pc, #24]	@ (800c918 <SDMMC_GetCmdError+0x58>)
 800c8fe:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	24000000 	.word	0x24000000
 800c914:	10624dd3 	.word	0x10624dd3
 800c918:	002000c5 	.word	0x002000c5

0800c91c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c920:	4904      	ldr	r1, [pc, #16]	@ (800c934 <MX_FATFS_Init+0x18>)
 800c922:	4805      	ldr	r0, [pc, #20]	@ (800c938 <MX_FATFS_Init+0x1c>)
 800c924:	f002 fdca 	bl	800f4bc <FATFS_LinkDriver>
 800c928:	4603      	mov	r3, r0
 800c92a:	461a      	mov	r2, r3
 800c92c:	4b03      	ldr	r3, [pc, #12]	@ (800c93c <MX_FATFS_Init+0x20>)
 800c92e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c930:	bf00      	nop
 800c932:	bd80      	pop	{r7, pc}
 800c934:	24071ddc 	.word	0x24071ddc
 800c938:	0800fc48 	.word	0x0800fc48
 800c93c:	24071dd8 	.word	0x24071dd8

0800c940 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c940:	b480      	push	{r7}
 800c942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c944:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c946:	4618      	mov	r0, r3
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c95a:	f000 f885 	bl	800ca68 <BSP_SD_IsDetected>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b01      	cmp	r3, #1
 800c962:	d001      	beq.n	800c968 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c964:	2302      	movs	r3, #2
 800c966:	e012      	b.n	800c98e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c968:	480b      	ldr	r0, [pc, #44]	@ (800c998 <BSP_SD_Init+0x48>)
 800c96a:	f7fc f8d1 	bl	8008b10 <HAL_SD_Init>
 800c96e:	4603      	mov	r3, r0
 800c970:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d109      	bne.n	800c98c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c978:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c97c:	4806      	ldr	r0, [pc, #24]	@ (800c998 <BSP_SD_Init+0x48>)
 800c97e:	f7fc ff87 	bl	8009890 <HAL_SD_ConfigWideBusOperation>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c98c:	79fb      	ldrb	r3, [r7, #7]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	24071c3c 	.word	0x24071c3c

0800c99c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	68f9      	ldr	r1, [r7, #12]
 800c9b2:	4806      	ldr	r0, [pc, #24]	@ (800c9cc <BSP_SD_ReadBlocks_DMA+0x30>)
 800c9b4:	f7fc f9cc 	bl	8008d50 <HAL_SD_ReadBlocks_DMA>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3718      	adds	r7, #24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	24071c3c 	.word	0x24071c3c

0800c9d0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	68f9      	ldr	r1, [r7, #12]
 800c9e6:	4806      	ldr	r0, [pc, #24]	@ (800ca00 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c9e8:	f7fc fa5a 	bl	8008ea0 <HAL_SD_WriteBlocks_DMA>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	24071c3c 	.word	0x24071c3c

0800ca04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca08:	4805      	ldr	r0, [pc, #20]	@ (800ca20 <BSP_SD_GetCardState+0x1c>)
 800ca0a:	f7fd f853 	bl	8009ab4 <HAL_SD_GetCardState>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b04      	cmp	r3, #4
 800ca12:	bf14      	ite	ne
 800ca14:	2301      	movne	r3, #1
 800ca16:	2300      	moveq	r3, #0
 800ca18:	b2db      	uxtb	r3, r3
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	24071c3c 	.word	0x24071c3c

0800ca24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	4803      	ldr	r0, [pc, #12]	@ (800ca3c <BSP_SD_GetCardInfo+0x18>)
 800ca30:	f7fc ff02 	bl	8009838 <HAL_SD_GetCardInfo>
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	24071c3c 	.word	0x24071c3c

0800ca40 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ca48:	f000 f9a0 	bl	800cd8c <BSP_SD_WriteCpltCallback>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ca5c:	f000 f9a2 	bl	800cda4 <BSP_SD_ReadCpltCallback>
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca72:	f000 f80b 	bl	800ca8c <BSP_PlatformIsDetected>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	b2db      	uxtb	r3, r3
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ca92:	2301      	movs	r3, #1
 800ca94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ca9a:	4806      	ldr	r0, [pc, #24]	@ (800cab4 <BSP_PlatformIsDetected+0x28>)
 800ca9c:	f7f6 fbf6 	bl	800328c <HAL_GPIO_ReadPin>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800caa6:	2300      	movs	r3, #0
 800caa8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800caaa:	79fb      	ldrb	r3, [r7, #7]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	58022000 	.word	0x58022000

0800cab8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800cac0:	f7f5 fd0c 	bl	80024dc <HAL_GetTick>
 800cac4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800cac6:	e006      	b.n	800cad6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cac8:	f7ff ff9c 	bl	800ca04 <BSP_SD_GetCardState>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	e009      	b.n	800caea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800cad6:	f7f5 fd01 	bl	80024dc <HAL_GetTick>
 800cada:	4602      	mov	r2, r0
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d8f0      	bhi.n	800cac8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cafe:	4b0b      	ldr	r3, [pc, #44]	@ (800cb2c <SD_CheckStatus+0x38>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cb04:	f7ff ff7e 	bl	800ca04 <BSP_SD_GetCardState>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d107      	bne.n	800cb1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cb0e:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <SD_CheckStatus+0x38>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f023 0301 	bic.w	r3, r3, #1
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	4b04      	ldr	r3, [pc, #16]	@ (800cb2c <SD_CheckStatus+0x38>)
 800cb1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cb1e:	4b03      	ldr	r3, [pc, #12]	@ (800cb2c <SD_CheckStatus+0x38>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	24000019 	.word	0x24000019

0800cb30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cb3a:	f7ff ff09 	bl	800c950 <BSP_SD_Init>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d107      	bne.n	800cb54 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff ffd4 	bl	800caf4 <SD_CheckStatus>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	461a      	mov	r2, r3
 800cb50:	4b04      	ldr	r3, [pc, #16]	@ (800cb64 <SD_initialize+0x34>)
 800cb52:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cb54:	4b03      	ldr	r3, [pc, #12]	@ (800cb64 <SD_initialize+0x34>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	b2db      	uxtb	r3, r3
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	24000019 	.word	0x24000019

0800cb68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cb72:	79fb      	ldrb	r3, [r7, #7]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7ff ffbd 	bl	800caf4 <SD_CheckStatus>
 800cb7a:	4603      	mov	r3, r0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	607a      	str	r2, [r7, #4]
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb98:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cb9c:	f7ff ff8c 	bl	800cab8 <SD_CheckStatusWithTimeout>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	da01      	bge.n	800cbaa <SD_read+0x26>
  {
    return res;
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	e03b      	b.n	800cc22 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	68b8      	ldr	r0, [r7, #8]
 800cbb0:	f7ff fef4 	bl	800c99c <BSP_SD_ReadBlocks_DMA>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d132      	bne.n	800cc20 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800cbba:	4b1c      	ldr	r3, [pc, #112]	@ (800cc2c <SD_read+0xa8>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800cbc0:	f7f5 fc8c 	bl	80024dc <HAL_GetTick>
 800cbc4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cbc6:	bf00      	nop
 800cbc8:	4b18      	ldr	r3, [pc, #96]	@ (800cc2c <SD_read+0xa8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d108      	bne.n	800cbe2 <SD_read+0x5e>
 800cbd0:	f7f5 fc84 	bl	80024dc <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d9f2      	bls.n	800cbc8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800cbe2:	4b12      	ldr	r3, [pc, #72]	@ (800cc2c <SD_read+0xa8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	75fb      	strb	r3, [r7, #23]
 800cbee:	e017      	b.n	800cc20 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800cbf0:	4b0e      	ldr	r3, [pc, #56]	@ (800cc2c <SD_read+0xa8>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cbf6:	f7f5 fc71 	bl	80024dc <HAL_GetTick>
 800cbfa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cbfc:	e007      	b.n	800cc0e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cbfe:	f7ff ff01 	bl	800ca04 <BSP_SD_GetCardState>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <SD_read+0x8a>
          {
            res = RES_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cc0c:	e008      	b.n	800cc20 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cc0e:	f7f5 fc65 	bl	80024dc <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d9ee      	bls.n	800cbfe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800cc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	24071de4 	.word	0x24071de4

0800cc30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	607a      	str	r2, [r7, #4]
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800cc44:	4b24      	ldr	r3, [pc, #144]	@ (800ccd8 <SD_write+0xa8>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cc4a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cc4e:	f7ff ff33 	bl	800cab8 <SD_CheckStatusWithTimeout>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da01      	bge.n	800cc5c <SD_write+0x2c>
  {
    return res;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	e038      	b.n	800ccce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	68b8      	ldr	r0, [r7, #8]
 800cc62:	f7ff feb5 	bl	800c9d0 <BSP_SD_WriteBlocks_DMA>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d12f      	bne.n	800cccc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cc6c:	f7f5 fc36 	bl	80024dc <HAL_GetTick>
 800cc70:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cc72:	bf00      	nop
 800cc74:	4b18      	ldr	r3, [pc, #96]	@ (800ccd8 <SD_write+0xa8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d108      	bne.n	800cc8e <SD_write+0x5e>
 800cc7c:	f7f5 fc2e 	bl	80024dc <HAL_GetTick>
 800cc80:	4602      	mov	r2, r0
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d9f2      	bls.n	800cc74 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800cc8e:	4b12      	ldr	r3, [pc, #72]	@ (800ccd8 <SD_write+0xa8>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d102      	bne.n	800cc9c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	75fb      	strb	r3, [r7, #23]
 800cc9a:	e017      	b.n	800cccc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800cc9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ccd8 <SD_write+0xa8>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cca2:	f7f5 fc1b 	bl	80024dc <HAL_GetTick>
 800cca6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cca8:	e007      	b.n	800ccba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ccaa:	f7ff feab 	bl	800ca04 <BSP_SD_GetCardState>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d102      	bne.n	800ccba <SD_write+0x8a>
          {
            res = RES_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	75fb      	strb	r3, [r7, #23]
            break;
 800ccb8:	e008      	b.n	800cccc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ccba:	f7f5 fc0f 	bl	80024dc <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d9ee      	bls.n	800ccaa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	24071de0 	.word	0x24071de0

0800ccdc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08c      	sub	sp, #48	@ 0x30
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	603a      	str	r2, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
 800cce8:	460b      	mov	r3, r1
 800ccea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccf2:	4b25      	ldr	r3, [pc, #148]	@ (800cd88 <SD_ioctl+0xac>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <SD_ioctl+0x28>
 800cd00:	2303      	movs	r3, #3
 800cd02:	e03c      	b.n	800cd7e <SD_ioctl+0xa2>

  switch (cmd)
 800cd04:	79bb      	ldrb	r3, [r7, #6]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d834      	bhi.n	800cd74 <SD_ioctl+0x98>
 800cd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd10 <SD_ioctl+0x34>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd21 	.word	0x0800cd21
 800cd14:	0800cd29 	.word	0x0800cd29
 800cd18:	0800cd41 	.word	0x0800cd41
 800cd1c:	0800cd5b 	.word	0x0800cd5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd26:	e028      	b.n	800cd7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fe79 	bl	800ca24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd32:	6a3a      	ldr	r2, [r7, #32]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd3e:	e01c      	b.n	800cd7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd40:	f107 0308 	add.w	r3, r7, #8
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7ff fe6d 	bl	800ca24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd58:	e00f      	b.n	800cd7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd5a:	f107 0308 	add.w	r3, r7, #8
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff fe60 	bl	800ca24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd66:	0a5a      	lsrs	r2, r3, #9
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd72:	e002      	b.n	800cd7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cd7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3730      	adds	r7, #48	@ 0x30
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	24000019 	.word	0x24000019

0800cd8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cd90:	4b03      	ldr	r3, [pc, #12]	@ (800cda0 <BSP_SD_WriteCpltCallback+0x14>)
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
}
 800cd96:	bf00      	nop
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	24071de0 	.word	0x24071de0

0800cda4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cda8:	4b03      	ldr	r3, [pc, #12]	@ (800cdb8 <BSP_SD_ReadCpltCallback+0x14>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	601a      	str	r2, [r3, #0]
}
 800cdae:	bf00      	nop
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	24071de4 	.word	0x24071de4

0800cdbc <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cdc0:	bf00      	nop
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
	...

0800cdcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	4a08      	ldr	r2, [pc, #32]	@ (800cdfc <disk_status+0x30>)
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	79fa      	ldrb	r2, [r7, #7]
 800cde4:	4905      	ldr	r1, [pc, #20]	@ (800cdfc <disk_status+0x30>)
 800cde6:	440a      	add	r2, r1
 800cde8:	7a12      	ldrb	r2, [r2, #8]
 800cdea:	4610      	mov	r0, r2
 800cdec:	4798      	blx	r3
 800cdee:	4603      	mov	r3, r0
 800cdf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	24071e10 	.word	0x24071e10

0800ce00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	4603      	mov	r3, r0
 800ce08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	4a0e      	ldr	r2, [pc, #56]	@ (800ce4c <disk_initialize+0x4c>)
 800ce12:	5cd3      	ldrb	r3, [r2, r3]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d114      	bne.n	800ce42 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ce4c <disk_initialize+0x4c>)
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	79fa      	ldrb	r2, [r7, #7]
 800ce26:	4909      	ldr	r1, [pc, #36]	@ (800ce4c <disk_initialize+0x4c>)
 800ce28:	440a      	add	r2, r1
 800ce2a:	7a12      	ldrb	r2, [r2, #8]
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	4798      	blx	r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d103      	bne.n	800ce42 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	4a03      	ldr	r2, [pc, #12]	@ (800ce4c <disk_initialize+0x4c>)
 800ce3e:	2101      	movs	r1, #1
 800ce40:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	24071e10 	.word	0x24071e10

0800ce50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ce50:	b590      	push	{r4, r7, lr}
 800ce52:	b087      	sub	sp, #28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
 800ce5a:	603b      	str	r3, [r7, #0]
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
 800ce62:	4a0a      	ldr	r2, [pc, #40]	@ (800ce8c <disk_read+0x3c>)
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	689c      	ldr	r4, [r3, #8]
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	4a07      	ldr	r2, [pc, #28]	@ (800ce8c <disk_read+0x3c>)
 800ce70:	4413      	add	r3, r2
 800ce72:	7a18      	ldrb	r0, [r3, #8]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	47a0      	blx	r4
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd90      	pop	{r4, r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	24071e10 	.word	0x24071e10

0800ce90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ce90:	b590      	push	{r4, r7, lr}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60b9      	str	r1, [r7, #8]
 800ce98:	607a      	str	r2, [r7, #4]
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
 800cea2:	4a0a      	ldr	r2, [pc, #40]	@ (800cecc <disk_write+0x3c>)
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	68dc      	ldr	r4, [r3, #12]
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	4a07      	ldr	r2, [pc, #28]	@ (800cecc <disk_write+0x3c>)
 800ceb0:	4413      	add	r3, r2
 800ceb2:	7a18      	ldrb	r0, [r3, #8]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	68b9      	ldr	r1, [r7, #8]
 800ceba:	47a0      	blx	r4
 800cebc:	4603      	mov	r3, r0
 800cebe:	75fb      	strb	r3, [r7, #23]
  return res;
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	371c      	adds	r7, #28
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd90      	pop	{r4, r7, pc}
 800ceca:	bf00      	nop
 800cecc:	24071e10 	.word	0x24071e10

0800ced0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	603a      	str	r2, [r7, #0]
 800ceda:	71fb      	strb	r3, [r7, #7]
 800cedc:	460b      	mov	r3, r1
 800cede:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	4a09      	ldr	r2, [pc, #36]	@ (800cf08 <disk_ioctl+0x38>)
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4413      	add	r3, r2
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	79fa      	ldrb	r2, [r7, #7]
 800ceee:	4906      	ldr	r1, [pc, #24]	@ (800cf08 <disk_ioctl+0x38>)
 800cef0:	440a      	add	r2, r1
 800cef2:	7a10      	ldrb	r0, [r2, #8]
 800cef4:	79b9      	ldrb	r1, [r7, #6]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	4798      	blx	r3
 800cefa:	4603      	mov	r3, r0
 800cefc:	73fb      	strb	r3, [r7, #15]
  return res;
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	24071e10 	.word	0x24071e10

0800cf0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3301      	adds	r3, #1
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cf1c:	89fb      	ldrh	r3, [r7, #14]
 800cf1e:	021b      	lsls	r3, r3, #8
 800cf20:	b21a      	sxth	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	b21b      	sxth	r3, r3
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	b21b      	sxth	r3, r3
 800cf2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cf2e:	89fb      	ldrh	r3, [r7, #14]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	3303      	adds	r3, #3
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	3202      	adds	r2, #2
 800cf54:	7812      	ldrb	r2, [r2, #0]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	021b      	lsls	r3, r3, #8
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	3201      	adds	r2, #1
 800cf62:	7812      	ldrb	r2, [r2, #0]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	021b      	lsls	r3, r3, #8
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7812      	ldrb	r2, [r2, #0]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
	return rv;
 800cf74:	68fb      	ldr	r3, [r7, #12]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	1c5a      	adds	r2, r3, #1
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	887a      	ldrh	r2, [r7, #2]
 800cf96:	b2d2      	uxtb	r2, r2
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	887b      	ldrh	r3, [r7, #2]
 800cf9c:	0a1b      	lsrs	r3, r3, #8
 800cf9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	607a      	str	r2, [r7, #4]
 800cfa6:	887a      	ldrh	r2, [r7, #2]
 800cfa8:	b2d2      	uxtb	r2, r2
 800cfaa:	701a      	strb	r2, [r3, #0]
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	b2d2      	uxtb	r2, r2
 800cfcc:	701a      	strb	r2, [r3, #0]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	0a1b      	lsrs	r3, r3, #8
 800cfd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	b2d2      	uxtb	r2, r2
 800cfde:	701a      	strb	r2, [r3, #0]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	0a1b      	lsrs	r3, r3, #8
 800cfe4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	0a1b      	lsrs	r3, r3, #8
 800cff6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	607a      	str	r2, [r7, #4]
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	b2d2      	uxtb	r2, r2
 800d002:	701a      	strb	r2, [r3, #0]
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d010:	b480      	push	{r7}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00d      	beq.n	800d046 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	1c53      	adds	r3, r2, #1
 800d02e:	613b      	str	r3, [r7, #16]
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	1c59      	adds	r1, r3, #1
 800d034:	6179      	str	r1, [r7, #20]
 800d036:	7812      	ldrb	r2, [r2, #0]
 800d038:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	607b      	str	r3, [r7, #4]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1f1      	bne.n	800d02a <mem_cpy+0x1a>
	}
}
 800d046:	bf00      	nop
 800d048:	371c      	adds	r7, #28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d052:	b480      	push	{r7}
 800d054:	b087      	sub	sp, #28
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	617a      	str	r2, [r7, #20]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	b2d2      	uxtb	r2, r2
 800d06c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3b01      	subs	r3, #1
 800d072:	607b      	str	r3, [r7, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f3      	bne.n	800d062 <mem_set+0x10>
}
 800d07a:	bf00      	nop
 800d07c:	bf00      	nop
 800d07e:	371c      	adds	r7, #28
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d088:	b480      	push	{r7}
 800d08a:	b089      	sub	sp, #36	@ 0x24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	61fb      	str	r3, [r7, #28]
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	1c5a      	adds	r2, r3, #1
 800d0a4:	61fa      	str	r2, [r7, #28]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	61ba      	str	r2, [r7, #24]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	1acb      	subs	r3, r1, r3
 800d0b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	607b      	str	r3, [r7, #4]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <mem_cmp+0x40>
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d0eb      	beq.n	800d0a0 <mem_cmp+0x18>

	return r;
 800d0c8:	697b      	ldr	r3, [r7, #20]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3724      	adds	r7, #36	@ 0x24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d0d6:	b480      	push	{r7}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d0e0:	e002      	b.n	800d0e8 <chk_chr+0x12>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	607b      	str	r3, [r7, #4]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <chk_chr+0x26>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d1f2      	bne.n	800d0e2 <chk_chr+0xc>
	return *str;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
}
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d116:	2300      	movs	r3, #0
 800d118:	60bb      	str	r3, [r7, #8]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e029      	b.n	800d174 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d120:	4a27      	ldr	r2, [pc, #156]	@ (800d1c0 <chk_lock+0xb4>)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	011b      	lsls	r3, r3, #4
 800d126:	4413      	add	r3, r2
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d01d      	beq.n	800d16a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d12e:	4a24      	ldr	r2, [pc, #144]	@ (800d1c0 <chk_lock+0xb4>)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	011b      	lsls	r3, r3, #4
 800d134:	4413      	add	r3, r2
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d116      	bne.n	800d16e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d140:	4a1f      	ldr	r2, [pc, #124]	@ (800d1c0 <chk_lock+0xb4>)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	011b      	lsls	r3, r3, #4
 800d146:	4413      	add	r3, r2
 800d148:	3304      	adds	r3, #4
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d150:	429a      	cmp	r2, r3
 800d152:	d10c      	bne.n	800d16e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d154:	4a1a      	ldr	r2, [pc, #104]	@ (800d1c0 <chk_lock+0xb4>)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	011b      	lsls	r3, r3, #4
 800d15a:	4413      	add	r3, r2
 800d15c:	3308      	adds	r3, #8
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d164:	429a      	cmp	r2, r3
 800d166:	d102      	bne.n	800d16e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d168:	e007      	b.n	800d17a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d16a:	2301      	movs	r3, #1
 800d16c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3301      	adds	r3, #1
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b01      	cmp	r3, #1
 800d178:	d9d2      	bls.n	800d120 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d109      	bne.n	800d194 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d102      	bne.n	800d18c <chk_lock+0x80>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d101      	bne.n	800d190 <chk_lock+0x84>
 800d18c:	2300      	movs	r3, #0
 800d18e:	e010      	b.n	800d1b2 <chk_lock+0xa6>
 800d190:	2312      	movs	r3, #18
 800d192:	e00e      	b.n	800d1b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d108      	bne.n	800d1ac <chk_lock+0xa0>
 800d19a:	4a09      	ldr	r2, [pc, #36]	@ (800d1c0 <chk_lock+0xb4>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	011b      	lsls	r3, r3, #4
 800d1a0:	4413      	add	r3, r2
 800d1a2:	330c      	adds	r3, #12
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1aa:	d101      	bne.n	800d1b0 <chk_lock+0xa4>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	e000      	b.n	800d1b2 <chk_lock+0xa6>
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	24071df0 	.word	0x24071df0

0800d1c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	607b      	str	r3, [r7, #4]
 800d1ce:	e002      	b.n	800d1d6 <enq_lock+0x12>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	607b      	str	r3, [r7, #4]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d806      	bhi.n	800d1ea <enq_lock+0x26>
 800d1dc:	4a09      	ldr	r2, [pc, #36]	@ (800d204 <enq_lock+0x40>)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	011b      	lsls	r3, r3, #4
 800d1e2:	4413      	add	r3, r2
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1f2      	bne.n	800d1d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	bf14      	ite	ne
 800d1f0:	2301      	movne	r3, #1
 800d1f2:	2300      	moveq	r3, #0
 800d1f4:	b2db      	uxtb	r3, r3
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	24071df0 	.word	0x24071df0

0800d208 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d212:	2300      	movs	r3, #0
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	e01f      	b.n	800d258 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d218:	4a41      	ldr	r2, [pc, #260]	@ (800d320 <inc_lock+0x118>)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	4413      	add	r3, r2
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d113      	bne.n	800d252 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d22a:	4a3d      	ldr	r2, [pc, #244]	@ (800d320 <inc_lock+0x118>)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	4413      	add	r3, r2
 800d232:	3304      	adds	r3, #4
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d109      	bne.n	800d252 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d23e:	4a38      	ldr	r2, [pc, #224]	@ (800d320 <inc_lock+0x118>)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	011b      	lsls	r3, r3, #4
 800d244:	4413      	add	r3, r2
 800d246:	3308      	adds	r3, #8
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d24e:	429a      	cmp	r2, r3
 800d250:	d006      	beq.n	800d260 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	3301      	adds	r3, #1
 800d256:	60fb      	str	r3, [r7, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d9dc      	bls.n	800d218 <inc_lock+0x10>
 800d25e:	e000      	b.n	800d262 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d260:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d132      	bne.n	800d2ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]
 800d26c:	e002      	b.n	800d274 <inc_lock+0x6c>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3301      	adds	r3, #1
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d806      	bhi.n	800d288 <inc_lock+0x80>
 800d27a:	4a29      	ldr	r2, [pc, #164]	@ (800d320 <inc_lock+0x118>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	011b      	lsls	r3, r3, #4
 800d280:	4413      	add	r3, r2
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1f2      	bne.n	800d26e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d101      	bne.n	800d292 <inc_lock+0x8a>
 800d28e:	2300      	movs	r3, #0
 800d290:	e040      	b.n	800d314 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	4922      	ldr	r1, [pc, #136]	@ (800d320 <inc_lock+0x118>)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	011b      	lsls	r3, r3, #4
 800d29c:	440b      	add	r3, r1
 800d29e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	491e      	ldr	r1, [pc, #120]	@ (800d320 <inc_lock+0x118>)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	440b      	add	r3, r1
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	695a      	ldr	r2, [r3, #20]
 800d2b4:	491a      	ldr	r1, [pc, #104]	@ (800d320 <inc_lock+0x118>)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	011b      	lsls	r3, r3, #4
 800d2ba:	440b      	add	r3, r1
 800d2bc:	3308      	adds	r3, #8
 800d2be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d2c0:	4a17      	ldr	r2, [pc, #92]	@ (800d320 <inc_lock+0x118>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	4413      	add	r3, r2
 800d2c8:	330c      	adds	r3, #12
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d009      	beq.n	800d2e8 <inc_lock+0xe0>
 800d2d4:	4a12      	ldr	r2, [pc, #72]	@ (800d320 <inc_lock+0x118>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	011b      	lsls	r3, r3, #4
 800d2da:	4413      	add	r3, r2
 800d2dc:	330c      	adds	r3, #12
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <inc_lock+0xe0>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e015      	b.n	800d314 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d108      	bne.n	800d300 <inc_lock+0xf8>
 800d2ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d320 <inc_lock+0x118>)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	011b      	lsls	r3, r3, #4
 800d2f4:	4413      	add	r3, r2
 800d2f6:	330c      	adds	r3, #12
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	e001      	b.n	800d304 <inc_lock+0xfc>
 800d300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d304:	4906      	ldr	r1, [pc, #24]	@ (800d320 <inc_lock+0x118>)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	440b      	add	r3, r1
 800d30c:	330c      	adds	r3, #12
 800d30e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3301      	adds	r3, #1
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	24071df0 	.word	0x24071df0

0800d324 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	3b01      	subs	r3, #1
 800d330:	607b      	str	r3, [r7, #4]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d825      	bhi.n	800d384 <dec_lock+0x60>
		n = Files[i].ctr;
 800d338:	4a17      	ldr	r2, [pc, #92]	@ (800d398 <dec_lock+0x74>)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	4413      	add	r3, r2
 800d340:	330c      	adds	r3, #12
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d346:	89fb      	ldrh	r3, [r7, #14]
 800d348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d34c:	d101      	bne.n	800d352 <dec_lock+0x2e>
 800d34e:	2300      	movs	r3, #0
 800d350:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d352:	89fb      	ldrh	r3, [r7, #14]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <dec_lock+0x3a>
 800d358:	89fb      	ldrh	r3, [r7, #14]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d35e:	4a0e      	ldr	r2, [pc, #56]	@ (800d398 <dec_lock+0x74>)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	011b      	lsls	r3, r3, #4
 800d364:	4413      	add	r3, r2
 800d366:	330c      	adds	r3, #12
 800d368:	89fa      	ldrh	r2, [r7, #14]
 800d36a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d36c:	89fb      	ldrh	r3, [r7, #14]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d105      	bne.n	800d37e <dec_lock+0x5a>
 800d372:	4a09      	ldr	r2, [pc, #36]	@ (800d398 <dec_lock+0x74>)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	4413      	add	r3, r2
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	737b      	strb	r3, [r7, #13]
 800d382:	e001      	b.n	800d388 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d384:	2302      	movs	r3, #2
 800d386:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d388:	7b7b      	ldrb	r3, [r7, #13]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3714      	adds	r7, #20
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	24071df0 	.word	0x24071df0

0800d39c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	e010      	b.n	800d3cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d3aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d3e0 <clear_lock+0x44>)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	4413      	add	r3, r2
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d105      	bne.n	800d3c6 <clear_lock+0x2a>
 800d3ba:	4a09      	ldr	r2, [pc, #36]	@ (800d3e0 <clear_lock+0x44>)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	011b      	lsls	r3, r3, #4
 800d3c0:	4413      	add	r3, r2
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d9eb      	bls.n	800d3aa <clear_lock+0xe>
	}
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	24071df0 	.word	0x24071df0

0800d3e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	78db      	ldrb	r3, [r3, #3]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d034      	beq.n	800d462 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7858      	ldrb	r0, [r3, #1]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d408:	2301      	movs	r3, #1
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	f7ff fd40 	bl	800ce90 <disk_write>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d416:	2301      	movs	r3, #1
 800d418:	73fb      	strb	r3, [r7, #15]
 800d41a:	e022      	b.n	800d462 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	1ad2      	subs	r2, r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d217      	bcs.n	800d462 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	789b      	ldrb	r3, [r3, #2]
 800d436:	613b      	str	r3, [r7, #16]
 800d438:	e010      	b.n	800d45c <sync_window+0x78>
					wsect += fs->fsize;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	4413      	add	r3, r2
 800d442:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7858      	ldrb	r0, [r3, #1]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d44e:	2301      	movs	r3, #1
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	f7ff fd1d 	bl	800ce90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	3b01      	subs	r3, #1
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d8eb      	bhi.n	800d43a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d462:	7bfb      	ldrb	r3, [r7, #15]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d01b      	beq.n	800d4bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff ffad 	bl	800d3e4 <sync_window>
 800d48a:	4603      	mov	r3, r0
 800d48c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d113      	bne.n	800d4bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7858      	ldrb	r0, [r3, #1]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d49e:	2301      	movs	r3, #1
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	f7ff fcd5 	bl	800ce50 <disk_read>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d004      	beq.n	800d4b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
	...

0800d4c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff ff87 	bl	800d3e4 <sync_window>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d158      	bne.n	800d592 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b03      	cmp	r3, #3
 800d4e6:	d148      	bne.n	800d57a <sync_fs+0xb2>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	791b      	ldrb	r3, [r3, #4]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d144      	bne.n	800d57a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	3330      	adds	r3, #48	@ 0x30
 800d4f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff fda9 	bl	800d052 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3330      	adds	r3, #48	@ 0x30
 800d504:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d508:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff fd38 	bl	800cf82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	3330      	adds	r3, #48	@ 0x30
 800d516:	4921      	ldr	r1, [pc, #132]	@ (800d59c <sync_fs+0xd4>)
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff fd4d 	bl	800cfb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	3330      	adds	r3, #48	@ 0x30
 800d522:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d526:	491e      	ldr	r1, [pc, #120]	@ (800d5a0 <sync_fs+0xd8>)
 800d528:	4618      	mov	r0, r3
 800d52a:	f7ff fd45 	bl	800cfb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	3330      	adds	r3, #48	@ 0x30
 800d532:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	4619      	mov	r1, r3
 800d53c:	4610      	mov	r0, r2
 800d53e:	f7ff fd3b 	bl	800cfb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3330      	adds	r3, #48	@ 0x30
 800d546:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	4619      	mov	r1, r3
 800d550:	4610      	mov	r0, r2
 800d552:	f7ff fd31 	bl	800cfb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	69db      	ldr	r3, [r3, #28]
 800d55a:	1c5a      	adds	r2, r3, #1
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7858      	ldrb	r0, [r3, #1]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d56e:	2301      	movs	r3, #1
 800d570:	f7ff fc8e 	bl	800ce90 <disk_write>
			fs->fsi_flag = 0;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	2200      	movs	r2, #0
 800d580:	2100      	movs	r1, #0
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff fca4 	bl	800ced0 <disk_ioctl>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <sync_fs+0xca>
 800d58e:	2301      	movs	r3, #1
 800d590:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	41615252 	.word	0x41615252
 800d5a0:	61417272 	.word	0x61417272

0800d5a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	3b02      	subs	r3, #2
 800d5b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	3b02      	subs	r3, #2
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d301      	bcc.n	800d5c4 <clust2sect+0x20>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	e008      	b.n	800d5d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	895b      	ldrh	r3, [r3, #10]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	fb03 f202 	mul.w	r2, r3, r2
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d4:	4413      	add	r3, r2
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	370c      	adds	r7, #12
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b086      	sub	sp, #24
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d904      	bls.n	800d602 <get_fat+0x20>
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	695b      	ldr	r3, [r3, #20]
 800d5fc:	683a      	ldr	r2, [r7, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d302      	bcc.n	800d608 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d602:	2301      	movs	r3, #1
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	e08e      	b.n	800d726 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d608:	f04f 33ff 	mov.w	r3, #4294967295
 800d60c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	2b03      	cmp	r3, #3
 800d614:	d061      	beq.n	800d6da <get_fat+0xf8>
 800d616:	2b03      	cmp	r3, #3
 800d618:	dc7b      	bgt.n	800d712 <get_fat+0x130>
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d002      	beq.n	800d624 <get_fat+0x42>
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d041      	beq.n	800d6a6 <get_fat+0xc4>
 800d622:	e076      	b.n	800d712 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	085b      	lsrs	r3, r3, #1
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	6a1a      	ldr	r2, [r3, #32]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	0a5b      	lsrs	r3, r3, #9
 800d63a:	4413      	add	r3, r2
 800d63c:	4619      	mov	r1, r3
 800d63e:	6938      	ldr	r0, [r7, #16]
 800d640:	f7ff ff14 	bl	800d46c <move_window>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d166      	bne.n	800d718 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	60fa      	str	r2, [r7, #12]
 800d650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	4413      	add	r3, r2
 800d658:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d65c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	6a1a      	ldr	r2, [r3, #32]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	0a5b      	lsrs	r3, r3, #9
 800d666:	4413      	add	r3, r2
 800d668:	4619      	mov	r1, r3
 800d66a:	6938      	ldr	r0, [r7, #16]
 800d66c:	f7ff fefe 	bl	800d46c <move_window>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d152      	bne.n	800d71c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	4413      	add	r3, r2
 800d680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d684:	021b      	lsls	r3, r3, #8
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	4313      	orrs	r3, r2
 800d68a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <get_fat+0xba>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	091b      	lsrs	r3, r3, #4
 800d69a:	e002      	b.n	800d6a2 <get_fat+0xc0>
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6a2:	617b      	str	r3, [r7, #20]
			break;
 800d6a4:	e03f      	b.n	800d726 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	6a1a      	ldr	r2, [r3, #32]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	0a1b      	lsrs	r3, r3, #8
 800d6ae:	4413      	add	r3, r2
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6938      	ldr	r0, [r7, #16]
 800d6b4:	f7ff feda 	bl	800d46c <move_window>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d130      	bne.n	800d720 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d6cc:	4413      	add	r3, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7ff fc1c 	bl	800cf0c <ld_word>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	617b      	str	r3, [r7, #20]
			break;
 800d6d8:	e025      	b.n	800d726 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	6a1a      	ldr	r2, [r3, #32]
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	09db      	lsrs	r3, r3, #7
 800d6e2:	4413      	add	r3, r2
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6938      	ldr	r0, [r7, #16]
 800d6e8:	f7ff fec0 	bl	800d46c <move_window>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d118      	bne.n	800d724 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d700:	4413      	add	r3, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fc1a 	bl	800cf3c <ld_dword>
 800d708:	4603      	mov	r3, r0
 800d70a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d70e:	617b      	str	r3, [r7, #20]
			break;
 800d710:	e009      	b.n	800d726 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d712:	2301      	movs	r3, #1
 800d714:	617b      	str	r3, [r7, #20]
 800d716:	e006      	b.n	800d726 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d718:	bf00      	nop
 800d71a:	e004      	b.n	800d726 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d71c:	bf00      	nop
 800d71e:	e002      	b.n	800d726 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d720:	bf00      	nop
 800d722:	e000      	b.n	800d726 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d724:	bf00      	nop
		}
	}

	return val;
 800d726:	697b      	ldr	r3, [r7, #20]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d730:	b590      	push	{r4, r7, lr}
 800d732:	b089      	sub	sp, #36	@ 0x24
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d73c:	2302      	movs	r3, #2
 800d73e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2b01      	cmp	r3, #1
 800d744:	f240 80d9 	bls.w	800d8fa <put_fat+0x1ca>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	429a      	cmp	r2, r3
 800d750:	f080 80d3 	bcs.w	800d8fa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b03      	cmp	r3, #3
 800d75a:	f000 8096 	beq.w	800d88a <put_fat+0x15a>
 800d75e:	2b03      	cmp	r3, #3
 800d760:	f300 80cb 	bgt.w	800d8fa <put_fat+0x1ca>
 800d764:	2b01      	cmp	r3, #1
 800d766:	d002      	beq.n	800d76e <put_fat+0x3e>
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d06e      	beq.n	800d84a <put_fat+0x11a>
 800d76c:	e0c5      	b.n	800d8fa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	61bb      	str	r3, [r7, #24]
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	085b      	lsrs	r3, r3, #1
 800d776:	69ba      	ldr	r2, [r7, #24]
 800d778:	4413      	add	r3, r2
 800d77a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6a1a      	ldr	r2, [r3, #32]
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	0a5b      	lsrs	r3, r3, #9
 800d784:	4413      	add	r3, r2
 800d786:	4619      	mov	r1, r3
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fe6f 	bl	800d46c <move_window>
 800d78e:	4603      	mov	r3, r0
 800d790:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d792:	7ffb      	ldrb	r3, [r7, #31]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f040 80a9 	bne.w	800d8ec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	1c59      	adds	r1, r3, #1
 800d7a4:	61b9      	str	r1, [r7, #24]
 800d7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7aa:	4413      	add	r3, r2
 800d7ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00d      	beq.n	800d7d4 <put_fat+0xa4>
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	b25b      	sxtb	r3, r3
 800d7be:	f003 030f 	and.w	r3, r3, #15
 800d7c2:	b25a      	sxtb	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	b25b      	sxtb	r3, r3
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	b25b      	sxtb	r3, r3
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	e001      	b.n	800d7d8 <put_fat+0xa8>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a1a      	ldr	r2, [r3, #32]
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	0a5b      	lsrs	r3, r3, #9
 800d7ea:	4413      	add	r3, r2
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff fe3c 	bl	800d46c <move_window>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7f8:	7ffb      	ldrb	r3, [r7, #31]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d178      	bne.n	800d8f0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80a:	4413      	add	r3, r2
 800d80c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <put_fat+0xf0>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	091b      	lsrs	r3, r3, #4
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	e00e      	b.n	800d83e <put_fat+0x10e>
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	b25b      	sxtb	r3, r3
 800d826:	f023 030f 	bic.w	r3, r3, #15
 800d82a:	b25a      	sxtb	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	0a1b      	lsrs	r3, r3, #8
 800d830:	b25b      	sxtb	r3, r3
 800d832:	f003 030f 	and.w	r3, r3, #15
 800d836:	b25b      	sxtb	r3, r3
 800d838:	4313      	orrs	r3, r2
 800d83a:	b25b      	sxtb	r3, r3
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2201      	movs	r2, #1
 800d846:	70da      	strb	r2, [r3, #3]
			break;
 800d848:	e057      	b.n	800d8fa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6a1a      	ldr	r2, [r3, #32]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	0a1b      	lsrs	r3, r3, #8
 800d852:	4413      	add	r3, r2
 800d854:	4619      	mov	r1, r3
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	f7ff fe08 	bl	800d46c <move_window>
 800d85c:	4603      	mov	r3, r0
 800d85e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d860:	7ffb      	ldrb	r3, [r7, #31]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d146      	bne.n	800d8f4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d874:	4413      	add	r3, r2
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	b292      	uxth	r2, r2
 800d87a:	4611      	mov	r1, r2
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff fb80 	bl	800cf82 <st_word>
			fs->wflag = 1;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2201      	movs	r2, #1
 800d886:	70da      	strb	r2, [r3, #3]
			break;
 800d888:	e037      	b.n	800d8fa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6a1a      	ldr	r2, [r3, #32]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	09db      	lsrs	r3, r3, #7
 800d892:	4413      	add	r3, r2
 800d894:	4619      	mov	r1, r3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff fde8 	bl	800d46c <move_window>
 800d89c:	4603      	mov	r3, r0
 800d89e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8a0:	7ffb      	ldrb	r3, [r7, #31]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d128      	bne.n	800d8f8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d8ba:	4413      	add	r3, r2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fb3d 	bl	800cf3c <ld_dword>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d8c8:	4323      	orrs	r3, r4
 800d8ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d8da:	4413      	add	r3, r2
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fb6a 	bl	800cfb8 <st_dword>
			fs->wflag = 1;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	70da      	strb	r2, [r3, #3]
			break;
 800d8ea:	e006      	b.n	800d8fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d8ec:	bf00      	nop
 800d8ee:	e004      	b.n	800d8fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d8f0:	bf00      	nop
 800d8f2:	e002      	b.n	800d8fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d8f4:	bf00      	nop
 800d8f6:	e000      	b.n	800d8fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d8f8:	bf00      	nop
		}
	}
	return res;
 800d8fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3724      	adds	r7, #36	@ 0x24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd90      	pop	{r4, r7, pc}

0800d904 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d910:	2300      	movs	r3, #0
 800d912:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d904      	bls.n	800d92a <remove_chain+0x26>
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	429a      	cmp	r2, r3
 800d928:	d301      	bcc.n	800d92e <remove_chain+0x2a>
 800d92a:	2302      	movs	r3, #2
 800d92c:	e04b      	b.n	800d9c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00c      	beq.n	800d94e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d934:	f04f 32ff 	mov.w	r2, #4294967295
 800d938:	6879      	ldr	r1, [r7, #4]
 800d93a:	69b8      	ldr	r0, [r7, #24]
 800d93c:	f7ff fef8 	bl	800d730 <put_fat>
 800d940:	4603      	mov	r3, r0
 800d942:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d944:	7ffb      	ldrb	r3, [r7, #31]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <remove_chain+0x4a>
 800d94a:	7ffb      	ldrb	r3, [r7, #31]
 800d94c:	e03b      	b.n	800d9c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff fe46 	bl	800d5e2 <get_fat>
 800d956:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d031      	beq.n	800d9c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d101      	bne.n	800d968 <remove_chain+0x64>
 800d964:	2302      	movs	r3, #2
 800d966:	e02e      	b.n	800d9c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96e:	d101      	bne.n	800d974 <remove_chain+0x70>
 800d970:	2301      	movs	r3, #1
 800d972:	e028      	b.n	800d9c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d974:	2200      	movs	r2, #0
 800d976:	68b9      	ldr	r1, [r7, #8]
 800d978:	69b8      	ldr	r0, [r7, #24]
 800d97a:	f7ff fed9 	bl	800d730 <put_fat>
 800d97e:	4603      	mov	r3, r0
 800d980:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d982:	7ffb      	ldrb	r3, [r7, #31]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <remove_chain+0x88>
 800d988:	7ffb      	ldrb	r3, [r7, #31]
 800d98a:	e01c      	b.n	800d9c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	691a      	ldr	r2, [r3, #16]
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	695b      	ldr	r3, [r3, #20]
 800d994:	3b02      	subs	r3, #2
 800d996:	429a      	cmp	r2, r3
 800d998:	d20b      	bcs.n	800d9b2 <remove_chain+0xae>
			fs->free_clst++;
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	791b      	ldrb	r3, [r3, #4]
 800d9a8:	f043 0301 	orr.w	r3, r3, #1
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d3c6      	bcc.n	800d94e <remove_chain+0x4a>
 800d9c0:	e000      	b.n	800d9c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d9c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3720      	adds	r7, #32
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b088      	sub	sp, #32
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10d      	bne.n	800da00 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d004      	beq.n	800d9fa <create_chain+0x2c>
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	695b      	ldr	r3, [r3, #20]
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d31b      	bcc.n	800da32 <create_chain+0x64>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	61bb      	str	r3, [r7, #24]
 800d9fe:	e018      	b.n	800da32 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff fded 	bl	800d5e2 <get_fat>
 800da08:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d801      	bhi.n	800da14 <create_chain+0x46>
 800da10:	2301      	movs	r3, #1
 800da12:	e070      	b.n	800daf6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1a:	d101      	bne.n	800da20 <create_chain+0x52>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	e06a      	b.n	800daf6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	429a      	cmp	r2, r3
 800da28:	d201      	bcs.n	800da2e <create_chain+0x60>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	e063      	b.n	800daf6 <create_chain+0x128>
		scl = clst;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	3301      	adds	r3, #1
 800da3a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	69fa      	ldr	r2, [r7, #28]
 800da42:	429a      	cmp	r2, r3
 800da44:	d307      	bcc.n	800da56 <create_chain+0x88>
				ncl = 2;
 800da46:	2302      	movs	r3, #2
 800da48:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800da4a:	69fa      	ldr	r2, [r7, #28]
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d901      	bls.n	800da56 <create_chain+0x88>
 800da52:	2300      	movs	r3, #0
 800da54:	e04f      	b.n	800daf6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800da56:	69f9      	ldr	r1, [r7, #28]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff fdc2 	bl	800d5e2 <get_fat>
 800da5e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00e      	beq.n	800da84 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d003      	beq.n	800da74 <create_chain+0xa6>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da72:	d101      	bne.n	800da78 <create_chain+0xaa>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	e03e      	b.n	800daf6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800da78:	69fa      	ldr	r2, [r7, #28]
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d1da      	bne.n	800da36 <create_chain+0x68>
 800da80:	2300      	movs	r3, #0
 800da82:	e038      	b.n	800daf6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800da84:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800da86:	f04f 32ff 	mov.w	r2, #4294967295
 800da8a:	69f9      	ldr	r1, [r7, #28]
 800da8c:	6938      	ldr	r0, [r7, #16]
 800da8e:	f7ff fe4f 	bl	800d730 <put_fat>
 800da92:	4603      	mov	r3, r0
 800da94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d109      	bne.n	800dab0 <create_chain+0xe2>
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d006      	beq.n	800dab0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800daa2:	69fa      	ldr	r2, [r7, #28]
 800daa4:	6839      	ldr	r1, [r7, #0]
 800daa6:	6938      	ldr	r0, [r7, #16]
 800daa8:	f7ff fe42 	bl	800d730 <put_fat>
 800daac:	4603      	mov	r3, r0
 800daae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dab0:	7dfb      	ldrb	r3, [r7, #23]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d116      	bne.n	800dae4 <create_chain+0x116>
		fs->last_clst = ncl;
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	69fa      	ldr	r2, [r7, #28]
 800daba:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	691a      	ldr	r2, [r3, #16]
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	695b      	ldr	r3, [r3, #20]
 800dac4:	3b02      	subs	r3, #2
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d804      	bhi.n	800dad4 <create_chain+0x106>
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	1e5a      	subs	r2, r3, #1
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	791b      	ldrb	r3, [r3, #4]
 800dad8:	f043 0301 	orr.w	r3, r3, #1
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	711a      	strb	r2, [r3, #4]
 800dae2:	e007      	b.n	800daf4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dae4:	7dfb      	ldrb	r3, [r7, #23]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d102      	bne.n	800daf0 <create_chain+0x122>
 800daea:	f04f 33ff 	mov.w	r3, #4294967295
 800daee:	e000      	b.n	800daf2 <create_chain+0x124>
 800daf0:	2301      	movs	r3, #1
 800daf2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800daf4:	69fb      	ldr	r3, [r7, #28]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dafe:	b480      	push	{r7}
 800db00:	b087      	sub	sp, #28
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db12:	3304      	adds	r3, #4
 800db14:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	0a5b      	lsrs	r3, r3, #9
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	8952      	ldrh	r2, [r2, #10]
 800db1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db22:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	1d1a      	adds	r2, r3, #4
 800db28:	613a      	str	r2, [r7, #16]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <clmt_clust+0x3a>
 800db34:	2300      	movs	r3, #0
 800db36:	e010      	b.n	800db5a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d307      	bcc.n	800db50 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800db40:	697a      	ldr	r2, [r7, #20]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	3304      	adds	r3, #4
 800db4c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db4e:	e7e9      	b.n	800db24 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800db50:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	4413      	add	r3, r2
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b086      	sub	sp, #24
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db7c:	d204      	bcs.n	800db88 <dir_sdi+0x22>
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	f003 031f 	and.w	r3, r3, #31
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <dir_sdi+0x26>
		return FR_INT_ERR;
 800db88:	2302      	movs	r3, #2
 800db8a:	e063      	b.n	800dc54 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d106      	bne.n	800dbac <dir_sdi+0x46>
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d902      	bls.n	800dbac <dir_sdi+0x46>
		clst = fs->dirbase;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbaa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10c      	bne.n	800dbcc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	095b      	lsrs	r3, r3, #5
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	8912      	ldrh	r2, [r2, #8]
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d301      	bcc.n	800dbc2 <dir_sdi+0x5c>
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	e048      	b.n	800dc54 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	61da      	str	r2, [r3, #28]
 800dbca:	e029      	b.n	800dc20 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	895b      	ldrh	r3, [r3, #10]
 800dbd0:	025b      	lsls	r3, r3, #9
 800dbd2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dbd4:	e019      	b.n	800dc0a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6979      	ldr	r1, [r7, #20]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fd01 	bl	800d5e2 <get_fat>
 800dbe0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe8:	d101      	bne.n	800dbee <dir_sdi+0x88>
 800dbea:	2301      	movs	r3, #1
 800dbec:	e032      	b.n	800dc54 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d904      	bls.n	800dbfe <dir_sdi+0x98>
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	695b      	ldr	r3, [r3, #20]
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d301      	bcc.n	800dc02 <dir_sdi+0x9c>
 800dbfe:	2302      	movs	r3, #2
 800dc00:	e028      	b.n	800dc54 <dir_sdi+0xee>
			ofs -= csz;
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d2e1      	bcs.n	800dbd6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dc12:	6979      	ldr	r1, [r7, #20]
 800dc14:	6938      	ldr	r0, [r7, #16]
 800dc16:	f7ff fcc5 	bl	800d5a4 <clust2sect>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	69db      	ldr	r3, [r3, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <dir_sdi+0xcc>
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e010      	b.n	800dc54 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	69da      	ldr	r2, [r3, #28]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	0a5b      	lsrs	r3, r3, #9
 800dc3a:	441a      	add	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc4c:	441a      	add	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	3320      	adds	r3, #32
 800dc72:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d003      	beq.n	800dc84 <dir_next+0x28>
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc82:	d301      	bcc.n	800dc88 <dir_next+0x2c>
 800dc84:	2304      	movs	r3, #4
 800dc86:	e0aa      	b.n	800ddde <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f040 8098 	bne.w	800ddc4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	1c5a      	adds	r2, r3, #1
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10b      	bne.n	800dcbe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	095b      	lsrs	r3, r3, #5
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	8912      	ldrh	r2, [r2, #8]
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	f0c0 8088 	bcc.w	800ddc4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	61da      	str	r2, [r3, #28]
 800dcba:	2304      	movs	r3, #4
 800dcbc:	e08f      	b.n	800ddde <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	0a5b      	lsrs	r3, r3, #9
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	8952      	ldrh	r2, [r2, #10]
 800dcc6:	3a01      	subs	r2, #1
 800dcc8:	4013      	ands	r3, r2
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d17a      	bne.n	800ddc4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	4610      	mov	r0, r2
 800dcd8:	f7ff fc83 	bl	800d5e2 <get_fat>
 800dcdc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d801      	bhi.n	800dce8 <dir_next+0x8c>
 800dce4:	2302      	movs	r3, #2
 800dce6:	e07a      	b.n	800ddde <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d101      	bne.n	800dcf4 <dir_next+0x98>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e074      	b.n	800ddde <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	695b      	ldr	r3, [r3, #20]
 800dcf8:	697a      	ldr	r2, [r7, #20]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d358      	bcc.n	800ddb0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d104      	bne.n	800dd0e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	61da      	str	r2, [r3, #28]
 800dd0a:	2304      	movs	r3, #4
 800dd0c:	e067      	b.n	800ddde <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4610      	mov	r0, r2
 800dd18:	f7ff fe59 	bl	800d9ce <create_chain>
 800dd1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <dir_next+0xcc>
 800dd24:	2307      	movs	r3, #7
 800dd26:	e05a      	b.n	800ddde <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d101      	bne.n	800dd32 <dir_next+0xd6>
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e055      	b.n	800ddde <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd38:	d101      	bne.n	800dd3e <dir_next+0xe2>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e04f      	b.n	800ddde <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f7ff fb50 	bl	800d3e4 <sync_window>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <dir_next+0xf2>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e047      	b.n	800ddde <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3330      	adds	r3, #48	@ 0x30
 800dd52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd56:	2100      	movs	r1, #0
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff f97a 	bl	800d052 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd5e:	2300      	movs	r3, #0
 800dd60:	613b      	str	r3, [r7, #16]
 800dd62:	6979      	ldr	r1, [r7, #20]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff fc1d 	bl	800d5a4 <clust2sect>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dd70:	e012      	b.n	800dd98 <dir_next+0x13c>
						fs->wflag = 1;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2201      	movs	r2, #1
 800dd76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f7ff fb33 	bl	800d3e4 <sync_window>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <dir_next+0x12c>
 800dd84:	2301      	movs	r3, #1
 800dd86:	e02a      	b.n	800ddde <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	613b      	str	r3, [r7, #16]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	895b      	ldrh	r3, [r3, #10]
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d3e6      	bcc.n	800dd72 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	1ad2      	subs	r2, r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ddb6:	6979      	ldr	r1, [r7, #20]
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff fbf3 	bl	800d5a4 <clust2sect>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddd6:	441a      	add	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3718      	adds	r7, #24
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b086      	sub	sp, #24
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff feb4 	bl	800db66 <dir_sdi>
 800ddfe:	4603      	mov	r3, r0
 800de00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de02:	7dfb      	ldrb	r3, [r7, #23]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d12b      	bne.n	800de60 <dir_alloc+0x7a>
		n = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	69db      	ldr	r3, [r3, #28]
 800de10:	4619      	mov	r1, r3
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff fb2a 	bl	800d46c <move_window>
 800de18:	4603      	mov	r3, r0
 800de1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d11d      	bne.n	800de5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2be5      	cmp	r3, #229	@ 0xe5
 800de2a:	d004      	beq.n	800de36 <dir_alloc+0x50>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a1b      	ldr	r3, [r3, #32]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d107      	bne.n	800de46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	3301      	adds	r3, #1
 800de3a:	613b      	str	r3, [r7, #16]
 800de3c:	693a      	ldr	r2, [r7, #16]
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	429a      	cmp	r2, r3
 800de42:	d102      	bne.n	800de4a <dir_alloc+0x64>
 800de44:	e00c      	b.n	800de60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800de46:	2300      	movs	r3, #0
 800de48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800de4a:	2101      	movs	r1, #1
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff ff05 	bl	800dc5c <dir_next>
 800de52:	4603      	mov	r3, r0
 800de54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0d7      	beq.n	800de0c <dir_alloc+0x26>
 800de5c:	e000      	b.n	800de60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800de5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de60:	7dfb      	ldrb	r3, [r7, #23]
 800de62:	2b04      	cmp	r3, #4
 800de64:	d101      	bne.n	800de6a <dir_alloc+0x84>
 800de66:	2307      	movs	r3, #7
 800de68:	75fb      	strb	r3, [r7, #23]
	return res;
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3718      	adds	r7, #24
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	331a      	adds	r3, #26
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff f842 	bl	800cf0c <ld_word>
 800de88:	4603      	mov	r3, r0
 800de8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	2b03      	cmp	r3, #3
 800de92:	d109      	bne.n	800dea8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	3314      	adds	r3, #20
 800de98:	4618      	mov	r0, r3
 800de9a:	f7ff f837 	bl	800cf0c <ld_word>
 800de9e:	4603      	mov	r3, r0
 800dea0:	041b      	lsls	r3, r3, #16
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dea8:	68fb      	ldr	r3, [r7, #12]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	331a      	adds	r3, #26
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	b292      	uxth	r2, r2
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7ff f85a 	bl	800cf82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b03      	cmp	r3, #3
 800ded4:	d109      	bne.n	800deea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	f103 0214 	add.w	r2, r3, #20
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	0c1b      	lsrs	r3, r3, #16
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4619      	mov	r1, r3
 800dee4:	4610      	mov	r0, r2
 800dee6:	f7ff f84c 	bl	800cf82 <st_word>
	}
}
 800deea:	bf00      	nop
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b086      	sub	sp, #24
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df00:	2100      	movs	r1, #0
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff fe2f 	bl	800db66 <dir_sdi>
 800df08:	4603      	mov	r3, r0
 800df0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <dir_find+0x24>
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	e03e      	b.n	800df94 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	69db      	ldr	r3, [r3, #28]
 800df1a:	4619      	mov	r1, r3
 800df1c:	6938      	ldr	r0, [r7, #16]
 800df1e:	f7ff faa5 	bl	800d46c <move_window>
 800df22:	4603      	mov	r3, r0
 800df24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800df26:	7dfb      	ldrb	r3, [r7, #23]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d12f      	bne.n	800df8c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a1b      	ldr	r3, [r3, #32]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800df34:	7bfb      	ldrb	r3, [r7, #15]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d102      	bne.n	800df40 <dir_find+0x4e>
 800df3a:	2304      	movs	r3, #4
 800df3c:	75fb      	strb	r3, [r7, #23]
 800df3e:	e028      	b.n	800df92 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	330b      	adds	r3, #11
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	330b      	adds	r3, #11
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	f003 0308 	and.w	r3, r3, #8
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <dir_find+0x86>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a18      	ldr	r0, [r3, #32]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	3324      	adds	r3, #36	@ 0x24
 800df6a:	220b      	movs	r2, #11
 800df6c:	4619      	mov	r1, r3
 800df6e:	f7ff f88b 	bl	800d088 <mem_cmp>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00b      	beq.n	800df90 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800df78:	2100      	movs	r1, #0
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff fe6e 	bl	800dc5c <dir_next>
 800df80:	4603      	mov	r3, r0
 800df82:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800df84:	7dfb      	ldrb	r3, [r7, #23]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0c5      	beq.n	800df16 <dir_find+0x24>
 800df8a:	e002      	b.n	800df92 <dir_find+0xa0>
		if (res != FR_OK) break;
 800df8c:	bf00      	nop
 800df8e:	e000      	b.n	800df92 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800df90:	bf00      	nop

	return res;
 800df92:	7dfb      	ldrb	r3, [r7, #23]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dfaa:	2101      	movs	r1, #1
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff ff1a 	bl	800dde6 <dir_alloc>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dfb6:	7bfb      	ldrb	r3, [r7, #15]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d11c      	bne.n	800dff6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	69db      	ldr	r3, [r3, #28]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	68b8      	ldr	r0, [r7, #8]
 800dfc4:	f7ff fa52 	bl	800d46c <move_window>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d111      	bne.n	800dff6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	2220      	movs	r2, #32
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7ff f839 	bl	800d052 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a18      	ldr	r0, [r3, #32]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3324      	adds	r3, #36	@ 0x24
 800dfe8:	220b      	movs	r2, #11
 800dfea:	4619      	mov	r1, r3
 800dfec:	f7ff f810 	bl	800d010 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2201      	movs	r2, #1
 800dff4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b088      	sub	sp, #32
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3324      	adds	r3, #36	@ 0x24
 800e014:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e016:	220b      	movs	r2, #11
 800e018:	2120      	movs	r1, #32
 800e01a:	68b8      	ldr	r0, [r7, #8]
 800e01c:	f7ff f819 	bl	800d052 <mem_set>
	si = i = 0; ni = 8;
 800e020:	2300      	movs	r3, #0
 800e022:	613b      	str	r3, [r7, #16]
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	2308      	movs	r3, #8
 800e02a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	61fa      	str	r2, [r7, #28]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	4413      	add	r3, r2
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e03a:	7efb      	ldrb	r3, [r7, #27]
 800e03c:	2b20      	cmp	r3, #32
 800e03e:	d94e      	bls.n	800e0de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e040:	7efb      	ldrb	r3, [r7, #27]
 800e042:	2b2f      	cmp	r3, #47	@ 0x2f
 800e044:	d006      	beq.n	800e054 <create_name+0x54>
 800e046:	7efb      	ldrb	r3, [r7, #27]
 800e048:	2b5c      	cmp	r3, #92	@ 0x5c
 800e04a:	d110      	bne.n	800e06e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e04c:	e002      	b.n	800e054 <create_name+0x54>
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	3301      	adds	r3, #1
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	4413      	add	r3, r2
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e05e:	d0f6      	beq.n	800e04e <create_name+0x4e>
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4413      	add	r3, r2
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b5c      	cmp	r3, #92	@ 0x5c
 800e06a:	d0f0      	beq.n	800e04e <create_name+0x4e>
			break;
 800e06c:	e038      	b.n	800e0e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e06e:	7efb      	ldrb	r3, [r7, #27]
 800e070:	2b2e      	cmp	r3, #46	@ 0x2e
 800e072:	d003      	beq.n	800e07c <create_name+0x7c>
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d30c      	bcc.n	800e096 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	2b0b      	cmp	r3, #11
 800e080:	d002      	beq.n	800e088 <create_name+0x88>
 800e082:	7efb      	ldrb	r3, [r7, #27]
 800e084:	2b2e      	cmp	r3, #46	@ 0x2e
 800e086:	d001      	beq.n	800e08c <create_name+0x8c>
 800e088:	2306      	movs	r3, #6
 800e08a:	e044      	b.n	800e116 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e08c:	2308      	movs	r3, #8
 800e08e:	613b      	str	r3, [r7, #16]
 800e090:	230b      	movs	r3, #11
 800e092:	617b      	str	r3, [r7, #20]
			continue;
 800e094:	e022      	b.n	800e0dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e096:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	da04      	bge.n	800e0a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e09e:	7efb      	ldrb	r3, [r7, #27]
 800e0a0:	3b80      	subs	r3, #128	@ 0x80
 800e0a2:	4a1f      	ldr	r2, [pc, #124]	@ (800e120 <create_name+0x120>)
 800e0a4:	5cd3      	ldrb	r3, [r2, r3]
 800e0a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e0a8:	7efb      	ldrb	r3, [r7, #27]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	481d      	ldr	r0, [pc, #116]	@ (800e124 <create_name+0x124>)
 800e0ae:	f7ff f812 	bl	800d0d6 <chk_chr>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <create_name+0xbc>
 800e0b8:	2306      	movs	r3, #6
 800e0ba:	e02c      	b.n	800e116 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e0bc:	7efb      	ldrb	r3, [r7, #27]
 800e0be:	2b60      	cmp	r3, #96	@ 0x60
 800e0c0:	d905      	bls.n	800e0ce <create_name+0xce>
 800e0c2:	7efb      	ldrb	r3, [r7, #27]
 800e0c4:	2b7a      	cmp	r3, #122	@ 0x7a
 800e0c6:	d802      	bhi.n	800e0ce <create_name+0xce>
 800e0c8:	7efb      	ldrb	r3, [r7, #27]
 800e0ca:	3b20      	subs	r3, #32
 800e0cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	613a      	str	r2, [r7, #16]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	7efa      	ldrb	r2, [r7, #27]
 800e0da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e0dc:	e7a6      	b.n	800e02c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e0de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	441a      	add	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <create_name+0xf4>
 800e0f0:	2306      	movs	r3, #6
 800e0f2:	e010      	b.n	800e116 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2be5      	cmp	r3, #229	@ 0xe5
 800e0fa:	d102      	bne.n	800e102 <create_name+0x102>
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	2205      	movs	r2, #5
 800e100:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e102:	7efb      	ldrb	r3, [r7, #27]
 800e104:	2b20      	cmp	r3, #32
 800e106:	d801      	bhi.n	800e10c <create_name+0x10c>
 800e108:	2204      	movs	r2, #4
 800e10a:	e000      	b.n	800e10e <create_name+0x10e>
 800e10c:	2200      	movs	r2, #0
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	330b      	adds	r3, #11
 800e112:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e114:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e116:	4618      	mov	r0, r3
 800e118:	3720      	adds	r7, #32
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0800fc5c 	.word	0x0800fc5c
 800e124:	0800f96c 	.word	0x0800f96c

0800e128 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e13c:	e002      	b.n	800e144 <follow_path+0x1c>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	3301      	adds	r3, #1
 800e142:	603b      	str	r3, [r7, #0]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b2f      	cmp	r3, #47	@ 0x2f
 800e14a:	d0f8      	beq.n	800e13e <follow_path+0x16>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b5c      	cmp	r3, #92	@ 0x5c
 800e152:	d0f4      	beq.n	800e13e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2200      	movs	r2, #0
 800e158:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b1f      	cmp	r3, #31
 800e160:	d80a      	bhi.n	800e178 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2280      	movs	r2, #128	@ 0x80
 800e166:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e16a:	2100      	movs	r1, #0
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fcfa 	bl	800db66 <dir_sdi>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
 800e176:	e043      	b.n	800e200 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e178:	463b      	mov	r3, r7
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ff3f 	bl	800e000 <create_name>
 800e182:	4603      	mov	r3, r0
 800e184:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e186:	7dfb      	ldrb	r3, [r7, #23]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d134      	bne.n	800e1f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff feb0 	bl	800def2 <dir_find>
 800e192:	4603      	mov	r3, r0
 800e194:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e19c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00a      	beq.n	800e1ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
 800e1a6:	2b04      	cmp	r3, #4
 800e1a8:	d127      	bne.n	800e1fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d122      	bne.n	800e1fa <follow_path+0xd2>
 800e1b4:	2305      	movs	r3, #5
 800e1b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e1b8:	e01f      	b.n	800e1fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1ba:	7afb      	ldrb	r3, [r7, #11]
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d11c      	bne.n	800e1fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	799b      	ldrb	r3, [r3, #6]
 800e1c8:	f003 0310 	and.w	r3, r3, #16
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d102      	bne.n	800e1d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e1d0:	2305      	movs	r3, #5
 800e1d2:	75fb      	strb	r3, [r7, #23]
 800e1d4:	e014      	b.n	800e200 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	695b      	ldr	r3, [r3, #20]
 800e1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e4:	4413      	add	r3, r2
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f7ff fe43 	bl	800de74 <ld_clust>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e1f4:	e7c0      	b.n	800e178 <follow_path+0x50>
			if (res != FR_OK) break;
 800e1f6:	bf00      	nop
 800e1f8:	e002      	b.n	800e200 <follow_path+0xd8>
				break;
 800e1fa:	bf00      	nop
 800e1fc:	e000      	b.n	800e200 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1fe:	bf00      	nop
			}
		}
	}

	return res;
 800e200:	7dfb      	ldrb	r3, [r7, #23]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3718      	adds	r7, #24
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b087      	sub	sp, #28
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e212:	f04f 33ff 	mov.w	r3, #4294967295
 800e216:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d031      	beq.n	800e284 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	617b      	str	r3, [r7, #20]
 800e226:	e002      	b.n	800e22e <get_ldnumber+0x24>
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	3301      	adds	r3, #1
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	2b20      	cmp	r3, #32
 800e234:	d903      	bls.n	800e23e <get_ldnumber+0x34>
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e23c:	d1f4      	bne.n	800e228 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b3a      	cmp	r3, #58	@ 0x3a
 800e244:	d11c      	bne.n	800e280 <get_ldnumber+0x76>
			tp = *path;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	60fa      	str	r2, [r7, #12]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	3b30      	subs	r3, #48	@ 0x30
 800e256:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	2b09      	cmp	r3, #9
 800e25c:	d80e      	bhi.n	800e27c <get_ldnumber+0x72>
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	429a      	cmp	r2, r3
 800e264:	d10a      	bne.n	800e27c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d107      	bne.n	800e27c <get_ldnumber+0x72>
					vol = (int)i;
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	3301      	adds	r3, #1
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	e002      	b.n	800e286 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e280:	2300      	movs	r3, #0
 800e282:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e284:	693b      	ldr	r3, [r7, #16]
}
 800e286:	4618      	mov	r0, r3
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
	...

0800e294 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	70da      	strb	r2, [r3, #3]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7ff f8dc 	bl	800d46c <move_window>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <check_fs+0x2a>
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	e038      	b.n	800e330 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3330      	adds	r3, #48	@ 0x30
 800e2c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fe20 	bl	800cf0c <ld_word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d001      	beq.n	800e2dc <check_fs+0x48>
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e029      	b.n	800e330 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2e2:	2be9      	cmp	r3, #233	@ 0xe9
 800e2e4:	d009      	beq.n	800e2fa <check_fs+0x66>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2ec:	2beb      	cmp	r3, #235	@ 0xeb
 800e2ee:	d11e      	bne.n	800e32e <check_fs+0x9a>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e2f6:	2b90      	cmp	r3, #144	@ 0x90
 800e2f8:	d119      	bne.n	800e32e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3330      	adds	r3, #48	@ 0x30
 800e2fe:	3336      	adds	r3, #54	@ 0x36
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fe1b 	bl	800cf3c <ld_dword>
 800e306:	4603      	mov	r3, r0
 800e308:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e30c:	4a0a      	ldr	r2, [pc, #40]	@ (800e338 <check_fs+0xa4>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d101      	bne.n	800e316 <check_fs+0x82>
 800e312:	2300      	movs	r3, #0
 800e314:	e00c      	b.n	800e330 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3330      	adds	r3, #48	@ 0x30
 800e31a:	3352      	adds	r3, #82	@ 0x52
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe fe0d 	bl	800cf3c <ld_dword>
 800e322:	4603      	mov	r3, r0
 800e324:	4a05      	ldr	r2, [pc, #20]	@ (800e33c <check_fs+0xa8>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d101      	bne.n	800e32e <check_fs+0x9a>
 800e32a:	2300      	movs	r3, #0
 800e32c:	e000      	b.n	800e330 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e32e:	2302      	movs	r3, #2
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	00544146 	.word	0x00544146
 800e33c:	33544146 	.word	0x33544146

0800e340 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b096      	sub	sp, #88	@ 0x58
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	4613      	mov	r3, r2
 800e34c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff ff58 	bl	800e20a <get_ldnumber>
 800e35a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	da01      	bge.n	800e366 <find_volume+0x26>
 800e362:	230b      	movs	r3, #11
 800e364:	e22d      	b.n	800e7c2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e366:	4aa1      	ldr	r2, [pc, #644]	@ (800e5ec <find_volume+0x2ac>)
 800e368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e36e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <find_volume+0x3a>
 800e376:	230c      	movs	r3, #12
 800e378:	e223      	b.n	800e7c2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e37e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	f023 0301 	bic.w	r3, r3, #1
 800e386:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d01a      	beq.n	800e3c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e392:	785b      	ldrb	r3, [r3, #1]
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fd19 	bl	800cdcc <disk_status>
 800e39a:	4603      	mov	r3, r0
 800e39c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10c      	bne.n	800e3c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e3ac:	79fb      	ldrb	r3, [r7, #7]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d007      	beq.n	800e3c2 <find_volume+0x82>
 800e3b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3b6:	f003 0304 	and.w	r3, r3, #4
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e3be:	230a      	movs	r3, #10
 800e3c0:	e1ff      	b.n	800e7c2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e1fd      	b.n	800e7c2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d6:	785b      	ldrb	r3, [r3, #1]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fd11 	bl	800ce00 <disk_initialize>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e1e6      	b.n	800e7c2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d007      	beq.n	800e40a <find_volume+0xca>
 800e3fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3fe:	f003 0304 	and.w	r3, r3, #4
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e406:	230a      	movs	r3, #10
 800e408:	e1db      	b.n	800e7c2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e40e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e410:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e412:	f7ff ff3f 	bl	800e294 <check_fs>
 800e416:	4603      	mov	r3, r0
 800e418:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e41c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e420:	2b02      	cmp	r3, #2
 800e422:	d149      	bne.n	800e4b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e424:	2300      	movs	r3, #0
 800e426:	643b      	str	r3, [r7, #64]	@ 0x40
 800e428:	e01e      	b.n	800e468 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e432:	011b      	lsls	r3, r3, #4
 800e434:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e438:	4413      	add	r3, r2
 800e43a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43e:	3304      	adds	r3, #4
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d006      	beq.n	800e454 <find_volume+0x114>
 800e446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e448:	3308      	adds	r3, #8
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fd76 	bl	800cf3c <ld_dword>
 800e450:	4602      	mov	r2, r0
 800e452:	e000      	b.n	800e456 <find_volume+0x116>
 800e454:	2200      	movs	r2, #0
 800e456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	3358      	adds	r3, #88	@ 0x58
 800e45c:	443b      	add	r3, r7
 800e45e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e464:	3301      	adds	r3, #1
 800e466:	643b      	str	r3, [r7, #64]	@ 0x40
 800e468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e46a:	2b03      	cmp	r3, #3
 800e46c:	d9dd      	bls.n	800e42a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e46e:	2300      	movs	r3, #0
 800e470:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e474:	2b00      	cmp	r3, #0
 800e476:	d002      	beq.n	800e47e <find_volume+0x13e>
 800e478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e47a:	3b01      	subs	r3, #1
 800e47c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e47e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	3358      	adds	r3, #88	@ 0x58
 800e484:	443b      	add	r3, r7
 800e486:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e48a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e48c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d005      	beq.n	800e49e <find_volume+0x15e>
 800e492:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e494:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e496:	f7ff fefd 	bl	800e294 <check_fs>
 800e49a:	4603      	mov	r3, r0
 800e49c:	e000      	b.n	800e4a0 <find_volume+0x160>
 800e49e:	2303      	movs	r3, #3
 800e4a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e4a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d905      	bls.n	800e4b8 <find_volume+0x178>
 800e4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d9e2      	bls.n	800e47e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d101      	bne.n	800e4c4 <find_volume+0x184>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e17e      	b.n	800e7c2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e4c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d901      	bls.n	800e4d0 <find_volume+0x190>
 800e4cc:	230d      	movs	r3, #13
 800e4ce:	e178      	b.n	800e7c2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d2:	3330      	adds	r3, #48	@ 0x30
 800e4d4:	330b      	adds	r3, #11
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fd18 	bl	800cf0c <ld_word>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4e2:	d001      	beq.n	800e4e8 <find_volume+0x1a8>
 800e4e4:	230d      	movs	r3, #13
 800e4e6:	e16c      	b.n	800e7c2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ea:	3330      	adds	r3, #48	@ 0x30
 800e4ec:	3316      	adds	r3, #22
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe fd0c 	bl	800cf0c <ld_word>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e4f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d106      	bne.n	800e50c <find_volume+0x1cc>
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e500:	3330      	adds	r3, #48	@ 0x30
 800e502:	3324      	adds	r3, #36	@ 0x24
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe fd19 	bl	800cf3c <ld_dword>
 800e50a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e510:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e514:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51e:	789b      	ldrb	r3, [r3, #2]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d005      	beq.n	800e530 <find_volume+0x1f0>
 800e524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e526:	789b      	ldrb	r3, [r3, #2]
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d001      	beq.n	800e530 <find_volume+0x1f0>
 800e52c:	230d      	movs	r3, #13
 800e52e:	e148      	b.n	800e7c2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e532:	789b      	ldrb	r3, [r3, #2]
 800e534:	461a      	mov	r2, r3
 800e536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e538:	fb02 f303 	mul.w	r3, r2, r3
 800e53c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e544:	461a      	mov	r2, r3
 800e546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e548:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54c:	895b      	ldrh	r3, [r3, #10]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d008      	beq.n	800e564 <find_volume+0x224>
 800e552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e554:	895b      	ldrh	r3, [r3, #10]
 800e556:	461a      	mov	r2, r3
 800e558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55a:	895b      	ldrh	r3, [r3, #10]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4013      	ands	r3, r2
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <find_volume+0x228>
 800e564:	230d      	movs	r3, #13
 800e566:	e12c      	b.n	800e7c2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56a:	3330      	adds	r3, #48	@ 0x30
 800e56c:	3311      	adds	r3, #17
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe fccc 	bl	800cf0c <ld_word>
 800e574:	4603      	mov	r3, r0
 800e576:	461a      	mov	r2, r3
 800e578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57e:	891b      	ldrh	r3, [r3, #8]
 800e580:	f003 030f 	and.w	r3, r3, #15
 800e584:	b29b      	uxth	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <find_volume+0x24e>
 800e58a:	230d      	movs	r3, #13
 800e58c:	e119      	b.n	800e7c2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e590:	3330      	adds	r3, #48	@ 0x30
 800e592:	3313      	adds	r3, #19
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fcb9 	bl	800cf0c <ld_word>
 800e59a:	4603      	mov	r3, r0
 800e59c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e59e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d106      	bne.n	800e5b2 <find_volume+0x272>
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a6:	3330      	adds	r3, #48	@ 0x30
 800e5a8:	3320      	adds	r3, #32
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe fcc6 	bl	800cf3c <ld_dword>
 800e5b0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b4:	3330      	adds	r3, #48	@ 0x30
 800e5b6:	330e      	adds	r3, #14
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fe fca7 	bl	800cf0c <ld_word>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e5c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d101      	bne.n	800e5cc <find_volume+0x28c>
 800e5c8:	230d      	movs	r3, #13
 800e5ca:	e0fa      	b.n	800e7c2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e5cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e5ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5d0:	4413      	add	r3, r2
 800e5d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5d4:	8912      	ldrh	r2, [r2, #8]
 800e5d6:	0912      	lsrs	r2, r2, #4
 800e5d8:	b292      	uxth	r2, r2
 800e5da:	4413      	add	r3, r2
 800e5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e5de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d204      	bcs.n	800e5f0 <find_volume+0x2b0>
 800e5e6:	230d      	movs	r3, #13
 800e5e8:	e0eb      	b.n	800e7c2 <find_volume+0x482>
 800e5ea:	bf00      	nop
 800e5ec:	24071de8 	.word	0x24071de8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e5f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5f8:	8952      	ldrh	r2, [r2, #10]
 800e5fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <find_volume+0x2ca>
 800e606:	230d      	movs	r3, #13
 800e608:	e0db      	b.n	800e7c2 <find_volume+0x482>
		fmt = FS_FAT32;
 800e60a:	2303      	movs	r3, #3
 800e60c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e612:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e616:	4293      	cmp	r3, r2
 800e618:	d802      	bhi.n	800e620 <find_volume+0x2e0>
 800e61a:	2302      	movs	r3, #2
 800e61c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e622:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e626:	4293      	cmp	r3, r2
 800e628:	d802      	bhi.n	800e630 <find_volume+0x2f0>
 800e62a:	2301      	movs	r3, #1
 800e62c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e632:	1c9a      	adds	r2, r3, #2
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e63c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e63e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e642:	441a      	add	r2, r3
 800e644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e646:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e648:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64c:	441a      	add	r2, r3
 800e64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e650:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e652:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e656:	2b03      	cmp	r3, #3
 800e658:	d11e      	bne.n	800e698 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65c:	3330      	adds	r3, #48	@ 0x30
 800e65e:	332a      	adds	r3, #42	@ 0x2a
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe fc53 	bl	800cf0c <ld_word>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <find_volume+0x330>
 800e66c:	230d      	movs	r3, #13
 800e66e:	e0a8      	b.n	800e7c2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e672:	891b      	ldrh	r3, [r3, #8]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d001      	beq.n	800e67c <find_volume+0x33c>
 800e678:	230d      	movs	r3, #13
 800e67a:	e0a2      	b.n	800e7c2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67e:	3330      	adds	r3, #48	@ 0x30
 800e680:	332c      	adds	r3, #44	@ 0x2c
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe fc5a 	bl	800cf3c <ld_dword>
 800e688:	4602      	mov	r2, r0
 800e68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	647b      	str	r3, [r7, #68]	@ 0x44
 800e696:	e01f      	b.n	800e6d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69a:	891b      	ldrh	r3, [r3, #8]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d101      	bne.n	800e6a4 <find_volume+0x364>
 800e6a0:	230d      	movs	r3, #13
 800e6a2:	e08e      	b.n	800e7c2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a6:	6a1a      	ldr	r2, [r3, #32]
 800e6a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6aa:	441a      	add	r2, r3
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ae:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e6b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	d103      	bne.n	800e6c0 <find_volume+0x380>
 800e6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ba:	695b      	ldr	r3, [r3, #20]
 800e6bc:	005b      	lsls	r3, r3, #1
 800e6be:	e00a      	b.n	800e6d6 <find_volume+0x396>
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c2:	695a      	ldr	r2, [r3, #20]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	4413      	add	r3, r2
 800e6ca:	085a      	lsrs	r2, r3, #1
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	f003 0301 	and.w	r3, r3, #1
 800e6d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e6d6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6da:	699a      	ldr	r2, [r3, #24]
 800e6dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6de:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e6e2:	0a5b      	lsrs	r3, r3, #9
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d201      	bcs.n	800e6ec <find_volume+0x3ac>
 800e6e8:	230d      	movs	r3, #13
 800e6ea:	e06a      	b.n	800e7c2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f2:	611a      	str	r2, [r3, #16]
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f6:	691a      	ldr	r2, [r3, #16]
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fe:	2280      	movs	r2, #128	@ 0x80
 800e700:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e702:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e706:	2b03      	cmp	r3, #3
 800e708:	d149      	bne.n	800e79e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70c:	3330      	adds	r3, #48	@ 0x30
 800e70e:	3330      	adds	r3, #48	@ 0x30
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe fbfb 	bl	800cf0c <ld_word>
 800e716:	4603      	mov	r3, r0
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d140      	bne.n	800e79e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e71e:	3301      	adds	r3, #1
 800e720:	4619      	mov	r1, r3
 800e722:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e724:	f7fe fea2 	bl	800d46c <move_window>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d137      	bne.n	800e79e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e730:	2200      	movs	r2, #0
 800e732:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e736:	3330      	adds	r3, #48	@ 0x30
 800e738:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe fbe5 	bl	800cf0c <ld_word>
 800e742:	4603      	mov	r3, r0
 800e744:	461a      	mov	r2, r3
 800e746:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d127      	bne.n	800e79e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e750:	3330      	adds	r3, #48	@ 0x30
 800e752:	4618      	mov	r0, r3
 800e754:	f7fe fbf2 	bl	800cf3c <ld_dword>
 800e758:	4603      	mov	r3, r0
 800e75a:	4a1c      	ldr	r2, [pc, #112]	@ (800e7cc <find_volume+0x48c>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d11e      	bne.n	800e79e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e762:	3330      	adds	r3, #48	@ 0x30
 800e764:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fe fbe7 	bl	800cf3c <ld_dword>
 800e76e:	4603      	mov	r3, r0
 800e770:	4a17      	ldr	r2, [pc, #92]	@ (800e7d0 <find_volume+0x490>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d113      	bne.n	800e79e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e778:	3330      	adds	r3, #48	@ 0x30
 800e77a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fe fbdc 	bl	800cf3c <ld_dword>
 800e784:	4602      	mov	r2, r0
 800e786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e788:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78c:	3330      	adds	r3, #48	@ 0x30
 800e78e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe fbd2 	bl	800cf3c <ld_dword>
 800e798:	4602      	mov	r2, r0
 800e79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e7a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e7d4 <find_volume+0x494>)
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	4b09      	ldr	r3, [pc, #36]	@ (800e7d4 <find_volume+0x494>)
 800e7b0:	801a      	strh	r2, [r3, #0]
 800e7b2:	4b08      	ldr	r3, [pc, #32]	@ (800e7d4 <find_volume+0x494>)
 800e7b4:	881a      	ldrh	r2, [r3, #0]
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e7ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e7bc:	f7fe fdee 	bl	800d39c <clear_lock>
#endif
	return FR_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3758      	adds	r7, #88	@ 0x58
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	41615252 	.word	0x41615252
 800e7d0:	61417272 	.word	0x61417272
 800e7d4:	24071dec 	.word	0x24071dec

0800e7d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e7e2:	2309      	movs	r3, #9
 800e7e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01c      	beq.n	800e826 <validate+0x4e>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d018      	beq.n	800e826 <validate+0x4e>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d013      	beq.n	800e826 <validate+0x4e>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	889a      	ldrh	r2, [r3, #4]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	88db      	ldrh	r3, [r3, #6]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d10c      	bne.n	800e826 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	785b      	ldrb	r3, [r3, #1]
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe fada 	bl	800cdcc <disk_status>
 800e818:	4603      	mov	r3, r0
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <validate+0x4e>
			res = FR_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e826:	7bfb      	ldrb	r3, [r7, #15]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d102      	bne.n	800e832 <validate+0x5a>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	e000      	b.n	800e834 <validate+0x5c>
 800e832:	2300      	movs	r3, #0
 800e834:	683a      	ldr	r2, [r7, #0]
 800e836:	6013      	str	r3, [r2, #0]
	return res;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e856:	f107 0310 	add.w	r3, r7, #16
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff fcd5 	bl	800e20a <get_ldnumber>
 800e860:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	2b00      	cmp	r3, #0
 800e866:	da01      	bge.n	800e86c <f_mount+0x28>
 800e868:	230b      	movs	r3, #11
 800e86a:	e02b      	b.n	800e8c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e86c:	4a17      	ldr	r2, [pc, #92]	@ (800e8cc <f_mount+0x88>)
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e874:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d005      	beq.n	800e888 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e87c:	69b8      	ldr	r0, [r7, #24]
 800e87e:	f7fe fd8d 	bl	800d39c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d002      	beq.n	800e894 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	490d      	ldr	r1, [pc, #52]	@ (800e8cc <f_mount+0x88>)
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <f_mount+0x66>
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d001      	beq.n	800e8ae <f_mount+0x6a>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e00a      	b.n	800e8c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e8ae:	f107 010c 	add.w	r1, r7, #12
 800e8b2:	f107 0308 	add.w	r3, r7, #8
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff fd41 	bl	800e340 <find_volume>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3720      	adds	r7, #32
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	24071de8 	.word	0x24071de8

0800e8d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b098      	sub	sp, #96	@ 0x60
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <f_open+0x18>
 800e8e4:	2309      	movs	r3, #9
 800e8e6:	e1a9      	b.n	800ec3c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e8f0:	79fa      	ldrb	r2, [r7, #7]
 800e8f2:	f107 0110 	add.w	r1, r7, #16
 800e8f6:	f107 0308 	add.w	r3, r7, #8
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7ff fd20 	bl	800e340 <find_volume>
 800e900:	4603      	mov	r3, r0
 800e902:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e906:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f040 818d 	bne.w	800ec2a <f_open+0x35a>
		dj.obj.fs = fs;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	f107 0314 	add.w	r3, r7, #20
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff fc03 	bl	800e128 <follow_path>
 800e922:	4603      	mov	r3, r0
 800e924:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e928:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d118      	bne.n	800e962 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e930:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e934:	b25b      	sxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	da03      	bge.n	800e942 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e93a:	2306      	movs	r3, #6
 800e93c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e940:	e00f      	b.n	800e962 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	2b01      	cmp	r3, #1
 800e946:	bf8c      	ite	hi
 800e948:	2301      	movhi	r3, #1
 800e94a:	2300      	movls	r3, #0
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	461a      	mov	r2, r3
 800e950:	f107 0314 	add.w	r3, r7, #20
 800e954:	4611      	mov	r1, r2
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fbd8 	bl	800d10c <chk_lock>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	f003 031c 	and.w	r3, r3, #28
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d07f      	beq.n	800ea6c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e96c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e970:	2b00      	cmp	r3, #0
 800e972:	d017      	beq.n	800e9a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e974:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e978:	2b04      	cmp	r3, #4
 800e97a:	d10e      	bne.n	800e99a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e97c:	f7fe fc22 	bl	800d1c4 <enq_lock>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d006      	beq.n	800e994 <f_open+0xc4>
 800e986:	f107 0314 	add.w	r3, r7, #20
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7ff fb06 	bl	800df9c <dir_register>
 800e990:	4603      	mov	r3, r0
 800e992:	e000      	b.n	800e996 <f_open+0xc6>
 800e994:	2312      	movs	r3, #18
 800e996:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	f043 0308 	orr.w	r3, r3, #8
 800e9a0:	71fb      	strb	r3, [r7, #7]
 800e9a2:	e010      	b.n	800e9c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e9a4:	7ebb      	ldrb	r3, [r7, #26]
 800e9a6:	f003 0311 	and.w	r3, r3, #17
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d003      	beq.n	800e9b6 <f_open+0xe6>
					res = FR_DENIED;
 800e9ae:	2307      	movs	r3, #7
 800e9b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e9b4:	e007      	b.n	800e9c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e9b6:	79fb      	ldrb	r3, [r7, #7]
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d002      	beq.n	800e9c6 <f_open+0xf6>
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d168      	bne.n	800eaa0 <f_open+0x1d0>
 800e9ce:	79fb      	ldrb	r3, [r7, #7]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d063      	beq.n	800eaa0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e9d8:	f7fd ffb2 	bl	800c940 <get_fattime>
 800e9dc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9e0:	330e      	adds	r3, #14
 800e9e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fe fae7 	bl	800cfb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ec:	3316      	adds	r3, #22
 800e9ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe fae1 	bl	800cfb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9f8:	330b      	adds	r3, #11
 800e9fa:	2220      	movs	r2, #32
 800e9fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea02:	4611      	mov	r1, r2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff fa35 	bl	800de74 <ld_clust>
 800ea0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ea10:	2200      	movs	r2, #0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff fa4d 	bl	800deb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ea18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea1a:	331c      	adds	r3, #28
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe faca 	bl	800cfb8 <st_dword>
					fs->wflag = 1;
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	2201      	movs	r2, #1
 800ea28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ea2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d037      	beq.n	800eaa0 <f_open+0x1d0>
						dw = fs->winsect;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea34:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ea36:	f107 0314 	add.w	r3, r7, #20
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fe ff60 	bl	800d904 <remove_chain>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ea4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d126      	bne.n	800eaa0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fe fd08 	bl	800d46c <move_window>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea66:	3a01      	subs	r2, #1
 800ea68:	60da      	str	r2, [r3, #12]
 800ea6a:	e019      	b.n	800eaa0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ea6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d115      	bne.n	800eaa0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ea74:	7ebb      	ldrb	r3, [r7, #26]
 800ea76:	f003 0310 	and.w	r3, r3, #16
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <f_open+0x1b6>
					res = FR_NO_FILE;
 800ea7e:	2304      	movs	r3, #4
 800ea80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea84:	e00c      	b.n	800eaa0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d007      	beq.n	800eaa0 <f_open+0x1d0>
 800ea90:	7ebb      	ldrb	r3, [r7, #26]
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d002      	beq.n	800eaa0 <f_open+0x1d0>
						res = FR_DENIED;
 800ea9a:	2307      	movs	r3, #7
 800ea9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800eaa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d126      	bne.n	800eaf6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eaa8:	79fb      	ldrb	r3, [r7, #7]
 800eaaa:	f003 0308 	and.w	r3, r3, #8
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d003      	beq.n	800eaba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eab8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800eac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eac8:	79fb      	ldrb	r3, [r7, #7]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	bf8c      	ite	hi
 800eace:	2301      	movhi	r3, #1
 800ead0:	2300      	movls	r3, #0
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	461a      	mov	r2, r3
 800ead6:	f107 0314 	add.w	r3, r7, #20
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fe fb93 	bl	800d208 <inc_lock>
 800eae2:	4602      	mov	r2, r0
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d102      	bne.n	800eaf6 <f_open+0x226>
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eaf6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f040 8095 	bne.w	800ec2a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7ff f9b4 	bl	800de74 <ld_clust>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eb12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb14:	331c      	adds	r3, #28
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fe fa10 	bl	800cf3c <ld_dword>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	88da      	ldrh	r2, [r3, #6]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	79fa      	ldrb	r2, [r7, #7]
 800eb3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2200      	movs	r2, #0
 800eb46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	3330      	adds	r3, #48	@ 0x30
 800eb52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb56:	2100      	movs	r1, #0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fe fa7a 	bl	800d052 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800eb5e:	79fb      	ldrb	r3, [r7, #7]
 800eb60:	f003 0320 	and.w	r3, r3, #32
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d060      	beq.n	800ec2a <f_open+0x35a>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d05c      	beq.n	800ec2a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68da      	ldr	r2, [r3, #12]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	895b      	ldrh	r3, [r3, #10]
 800eb7c:	025b      	lsls	r3, r3, #9
 800eb7e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb8c:	e016      	b.n	800ebbc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fe fd25 	bl	800d5e2 <get_fat>
 800eb98:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800eb9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d802      	bhi.n	800eba6 <f_open+0x2d6>
 800eba0:	2302      	movs	r3, #2
 800eba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebac:	d102      	bne.n	800ebb4 <f_open+0x2e4>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ebb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ebb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	657b      	str	r3, [r7, #84]	@ 0x54
 800ebbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d103      	bne.n	800ebcc <f_open+0x2fc>
 800ebc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ebc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d8e0      	bhi.n	800eb8e <f_open+0x2be>
				}
				fp->clust = clst;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ebd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d127      	bne.n	800ec2a <f_open+0x35a>
 800ebda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d022      	beq.n	800ec2a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe fcdb 	bl	800d5a4 <clust2sect>
 800ebee:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d103      	bne.n	800ebfe <f_open+0x32e>
						res = FR_INT_ERR;
 800ebf6:	2302      	movs	r3, #2
 800ebf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ebfc:	e015      	b.n	800ec2a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ebfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec00:	0a5a      	lsrs	r2, r3, #9
 800ec02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec04:	441a      	add	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	7858      	ldrb	r0, [r3, #1]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6a1a      	ldr	r2, [r3, #32]
 800ec18:	2301      	movs	r3, #1
 800ec1a:	f7fe f919 	bl	800ce50 <disk_read>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <f_open+0x35a>
 800ec24:	2301      	movs	r3, #1
 800ec26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ec2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d002      	beq.n	800ec38 <f_open+0x368>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ec38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3760      	adds	r7, #96	@ 0x60
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08e      	sub	sp, #56	@ 0x38
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f107 0214 	add.w	r2, r7, #20
 800ec62:	4611      	mov	r1, r2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff fdb7 	bl	800e7d8 <validate>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d107      	bne.n	800ec88 <f_read+0x44>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	7d5b      	ldrb	r3, [r3, #21]
 800ec7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <f_read+0x4a>
 800ec88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ec8c:	e115      	b.n	800eeba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	7d1b      	ldrb	r3, [r3, #20]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <f_read+0x5a>
 800ec9a:	2307      	movs	r3, #7
 800ec9c:	e10d      	b.n	800eeba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	68da      	ldr	r2, [r3, #12]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	699b      	ldr	r3, [r3, #24]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	f240 80fe 	bls.w	800eeb0 <f_read+0x26c>
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ecb8:	e0fa      	b.n	800eeb0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f040 80c6 	bne.w	800ee54 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	699b      	ldr	r3, [r3, #24]
 800eccc:	0a5b      	lsrs	r3, r3, #9
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	8952      	ldrh	r2, [r2, #10]
 800ecd2:	3a01      	subs	r2, #1
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d12f      	bne.n	800ed3e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	699b      	ldr	r3, [r3, #24]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d103      	bne.n	800ecee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	633b      	str	r3, [r7, #48]	@ 0x30
 800ecec:	e013      	b.n	800ed16 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d007      	beq.n	800ed06 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7fe fefe 	bl	800dafe <clmt_clust>
 800ed02:	6338      	str	r0, [r7, #48]	@ 0x30
 800ed04:	e007      	b.n	800ed16 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	69db      	ldr	r3, [r3, #28]
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	4610      	mov	r0, r2
 800ed10:	f7fe fc67 	bl	800d5e2 <get_fat>
 800ed14:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ed16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d804      	bhi.n	800ed26 <f_read+0xe2>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	755a      	strb	r2, [r3, #21]
 800ed22:	2302      	movs	r3, #2
 800ed24:	e0c9      	b.n	800eeba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed2c:	d104      	bne.n	800ed38 <f_read+0xf4>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2201      	movs	r2, #1
 800ed32:	755a      	strb	r2, [r3, #21]
 800ed34:	2301      	movs	r3, #1
 800ed36:	e0c0      	b.n	800eeba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed3c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	69db      	ldr	r3, [r3, #28]
 800ed44:	4619      	mov	r1, r3
 800ed46:	4610      	mov	r0, r2
 800ed48:	f7fe fc2c 	bl	800d5a4 <clust2sect>
 800ed4c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d104      	bne.n	800ed5e <f_read+0x11a>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2202      	movs	r2, #2
 800ed58:	755a      	strb	r2, [r3, #21]
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	e0ad      	b.n	800eeba <f_read+0x276>
			sect += csect;
 800ed5e:	69ba      	ldr	r2, [r7, #24]
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	4413      	add	r3, r2
 800ed64:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	0a5b      	lsrs	r3, r3, #9
 800ed6a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ed6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d039      	beq.n	800ede6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ed72:	69fa      	ldr	r2, [r7, #28]
 800ed74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed76:	4413      	add	r3, r2
 800ed78:	697a      	ldr	r2, [r7, #20]
 800ed7a:	8952      	ldrh	r2, [r2, #10]
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d905      	bls.n	800ed8c <f_read+0x148>
					cc = fs->csize - csect;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	895b      	ldrh	r3, [r3, #10]
 800ed84:	461a      	mov	r2, r3
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	7858      	ldrb	r0, [r3, #1]
 800ed90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed92:	69ba      	ldr	r2, [r7, #24]
 800ed94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed96:	f7fe f85b 	bl	800ce50 <disk_read>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d004      	beq.n	800edaa <f_read+0x166>
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2201      	movs	r2, #1
 800eda4:	755a      	strb	r2, [r3, #21]
 800eda6:	2301      	movs	r3, #1
 800eda8:	e087      	b.n	800eeba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	7d1b      	ldrb	r3, [r3, #20]
 800edae:	b25b      	sxtb	r3, r3
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	da14      	bge.n	800edde <f_read+0x19a>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6a1a      	ldr	r2, [r3, #32]
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d90d      	bls.n	800edde <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6a1a      	ldr	r2, [r3, #32]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	025b      	lsls	r3, r3, #9
 800edcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edce:	18d0      	adds	r0, r2, r3
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3330      	adds	r3, #48	@ 0x30
 800edd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edd8:	4619      	mov	r1, r3
 800edda:	f7fe f919 	bl	800d010 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800edde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede0:	025b      	lsls	r3, r3, #9
 800ede2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ede4:	e050      	b.n	800ee88 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	429a      	cmp	r2, r3
 800edee:	d02e      	beq.n	800ee4e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	7d1b      	ldrb	r3, [r3, #20]
 800edf4:	b25b      	sxtb	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	da18      	bge.n	800ee2c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	7858      	ldrb	r0, [r3, #1]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6a1a      	ldr	r2, [r3, #32]
 800ee08:	2301      	movs	r3, #1
 800ee0a:	f7fe f841 	bl	800ce90 <disk_write>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d004      	beq.n	800ee1e <f_read+0x1da>
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2201      	movs	r2, #1
 800ee18:	755a      	strb	r2, [r3, #21]
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e04d      	b.n	800eeba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	7d1b      	ldrb	r3, [r3, #20]
 800ee22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee26:	b2da      	uxtb	r2, r3
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	7858      	ldrb	r0, [r3, #1]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee36:	2301      	movs	r3, #1
 800ee38:	69ba      	ldr	r2, [r7, #24]
 800ee3a:	f7fe f809 	bl	800ce50 <disk_read>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d004      	beq.n	800ee4e <f_read+0x20a>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2201      	movs	r2, #1
 800ee48:	755a      	strb	r2, [r3, #21]
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e035      	b.n	800eeba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee5c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ee60:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ee62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d901      	bls.n	800ee6e <f_read+0x22a>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee7c:	4413      	add	r3, r2
 800ee7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee80:	4619      	mov	r1, r3
 800ee82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee84:	f7fe f8c4 	bl	800d010 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ee88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8c:	4413      	add	r3, r2
 800ee8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	699a      	ldr	r2, [r3, #24]
 800ee94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee96:	441a      	add	r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	619a      	str	r2, [r3, #24]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea2:	441a      	add	r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	601a      	str	r2, [r3, #0]
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f47f af01 	bne.w	800ecba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3738      	adds	r7, #56	@ 0x38
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b086      	sub	sp, #24
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f107 0208 	add.w	r2, r7, #8
 800eed0:	4611      	mov	r1, r2
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff fc80 	bl	800e7d8 <validate>
 800eed8:	4603      	mov	r3, r0
 800eeda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eedc:	7dfb      	ldrb	r3, [r7, #23]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d168      	bne.n	800efb4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	7d1b      	ldrb	r3, [r3, #20]
 800eee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d062      	beq.n	800efb4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	7d1b      	ldrb	r3, [r3, #20]
 800eef2:	b25b      	sxtb	r3, r3
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	da15      	bge.n	800ef24 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	7858      	ldrb	r0, [r3, #1]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a1a      	ldr	r2, [r3, #32]
 800ef06:	2301      	movs	r3, #1
 800ef08:	f7fd ffc2 	bl	800ce90 <disk_write>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <f_sync+0x54>
 800ef12:	2301      	movs	r3, #1
 800ef14:	e04f      	b.n	800efb6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ef24:	f7fd fd0c 	bl	800c940 <get_fattime>
 800ef28:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef30:	4619      	mov	r1, r3
 800ef32:	4610      	mov	r0, r2
 800ef34:	f7fe fa9a 	bl	800d46c <move_window>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ef3c:	7dfb      	ldrb	r3, [r7, #23]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d138      	bne.n	800efb4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef46:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	330b      	adds	r3, #11
 800ef4c:	781a      	ldrb	r2, [r3, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	330b      	adds	r3, #11
 800ef52:	f042 0220 	orr.w	r2, r2, #32
 800ef56:	b2d2      	uxtb	r2, r2
 800ef58:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6818      	ldr	r0, [r3, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	461a      	mov	r2, r3
 800ef64:	68f9      	ldr	r1, [r7, #12]
 800ef66:	f7fe ffa4 	bl	800deb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f103 021c 	add.w	r2, r3, #28
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	f7fe f81e 	bl	800cfb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	3316      	adds	r3, #22
 800ef80:	6939      	ldr	r1, [r7, #16]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe f818 	bl	800cfb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	3312      	adds	r3, #18
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fd fff7 	bl	800cf82 <st_word>
					fs->wflag = 1;
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	2201      	movs	r2, #1
 800ef98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fe fa93 	bl	800d4c8 <sync_fs>
 800efa2:	4603      	mov	r3, r0
 800efa4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	7d1b      	ldrb	r3, [r3, #20]
 800efaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800efb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}

0800efbe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b084      	sub	sp, #16
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7ff ff7b 	bl	800eec2 <f_sync>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d118      	bne.n	800f008 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f107 0208 	add.w	r2, r7, #8
 800efdc:	4611      	mov	r1, r2
 800efde:	4618      	mov	r0, r3
 800efe0:	f7ff fbfa 	bl	800e7d8 <validate>
 800efe4:	4603      	mov	r3, r0
 800efe6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10c      	bne.n	800f008 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe f996 	bl	800d324 <dec_lock>
 800eff8:	4603      	mov	r3, r0
 800effa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800effc:	7bfb      	ldrb	r3, [r7, #15]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d102      	bne.n	800f008 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f008:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b090      	sub	sp, #64	@ 0x40
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
 800f01a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f107 0208 	add.w	r2, r7, #8
 800f022:	4611      	mov	r1, r2
 800f024:	4618      	mov	r0, r3
 800f026:	f7ff fbd7 	bl	800e7d8 <validate>
 800f02a:	4603      	mov	r3, r0
 800f02c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f030:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f034:	2b00      	cmp	r3, #0
 800f036:	d103      	bne.n	800f040 <f_lseek+0x2e>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	7d5b      	ldrb	r3, [r3, #21]
 800f03c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f040:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <f_lseek+0x3c>
 800f048:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f04c:	e1e6      	b.n	800f41c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 80d1 	beq.w	800f1fa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05e:	d15a      	bne.n	800f116 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f064:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f068:	1d1a      	adds	r2, r3, #4
 800f06a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	617b      	str	r3, [r7, #20]
 800f070:	2302      	movs	r3, #2
 800f072:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800f07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d03a      	beq.n	800f0f6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f082:	613b      	str	r3, [r7, #16]
 800f084:	2300      	movs	r3, #0
 800f086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08a:	3302      	adds	r3, #2
 800f08c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800f08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f094:	3301      	adds	r3, #1
 800f096:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fe faa0 	bl	800d5e2 <get_fat>
 800f0a2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d804      	bhi.n	800f0b4 <f_lseek+0xa2>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2202      	movs	r2, #2
 800f0ae:	755a      	strb	r2, [r3, #21]
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	e1b3      	b.n	800f41c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ba:	d104      	bne.n	800f0c6 <f_lseek+0xb4>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	755a      	strb	r2, [r3, #21]
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e1aa      	b.n	800f41c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d0de      	beq.n	800f08e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f0d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d809      	bhi.n	800f0ec <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0da:	1d1a      	adds	r2, r3, #4
 800f0dc:	627a      	str	r2, [r7, #36]	@ 0x24
 800f0de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e4:	1d1a      	adds	r2, r3, #4
 800f0e6:	627a      	str	r2, [r7, #36]	@ 0x24
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d3c4      	bcc.n	800f080 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0fc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f0fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	429a      	cmp	r2, r3
 800f104:	d803      	bhi.n	800f10e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	e184      	b.n	800f418 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f10e:	2311      	movs	r3, #17
 800f110:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f114:	e180      	b.n	800f418 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d902      	bls.n	800f126 <f_lseek+0x114>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f000 8172 	beq.w	800f418 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	3b01      	subs	r3, #1
 800f138:	4619      	mov	r1, r3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7fe fcdf 	bl	800dafe <clmt_clust>
 800f140:	4602      	mov	r2, r0
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f146:	68ba      	ldr	r2, [r7, #8]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	69db      	ldr	r3, [r3, #28]
 800f14c:	4619      	mov	r1, r3
 800f14e:	4610      	mov	r0, r2
 800f150:	f7fe fa28 	bl	800d5a4 <clust2sect>
 800f154:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d104      	bne.n	800f166 <f_lseek+0x154>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2202      	movs	r2, #2
 800f160:	755a      	strb	r2, [r3, #21]
 800f162:	2302      	movs	r3, #2
 800f164:	e15a      	b.n	800f41c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	3b01      	subs	r3, #1
 800f16a:	0a5b      	lsrs	r3, r3, #9
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	8952      	ldrh	r2, [r2, #10]
 800f170:	3a01      	subs	r2, #1
 800f172:	4013      	ands	r3, r2
 800f174:	69ba      	ldr	r2, [r7, #24]
 800f176:	4413      	add	r3, r2
 800f178:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	699b      	ldr	r3, [r3, #24]
 800f17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 8148 	beq.w	800f418 <f_lseek+0x406>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6a1b      	ldr	r3, [r3, #32]
 800f18c:	69ba      	ldr	r2, [r7, #24]
 800f18e:	429a      	cmp	r2, r3
 800f190:	f000 8142 	beq.w	800f418 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7d1b      	ldrb	r3, [r3, #20]
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	da18      	bge.n	800f1d0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	7858      	ldrb	r0, [r3, #1]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a1a      	ldr	r2, [r3, #32]
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	f7fd fe6f 	bl	800ce90 <disk_write>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d004      	beq.n	800f1c2 <f_lseek+0x1b0>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	755a      	strb	r2, [r3, #21]
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e12c      	b.n	800f41c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
 800f1c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	7858      	ldrb	r0, [r3, #1]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f1da:	2301      	movs	r3, #1
 800f1dc:	69ba      	ldr	r2, [r7, #24]
 800f1de:	f7fd fe37 	bl	800ce50 <disk_read>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d004      	beq.n	800f1f2 <f_lseek+0x1e0>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	755a      	strb	r2, [r3, #21]
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e114      	b.n	800f41c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	69ba      	ldr	r2, [r7, #24]
 800f1f6:	621a      	str	r2, [r3, #32]
 800f1f8:	e10e      	b.n	800f418 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d908      	bls.n	800f216 <f_lseek+0x204>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7d1b      	ldrb	r3, [r3, #20]
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d102      	bne.n	800f216 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	699b      	ldr	r3, [r3, #24]
 800f21a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f21c:	2300      	movs	r3, #0
 800f21e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f224:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f000 80a7 	beq.w	800f37c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	895b      	ldrh	r3, [r3, #10]
 800f232:	025b      	lsls	r3, r3, #9
 800f234:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d01b      	beq.n	800f274 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	1e5a      	subs	r2, r3, #1
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	fbb2 f2f3 	udiv	r2, r2, r3
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	1e59      	subs	r1, r3, #1
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f250:	429a      	cmp	r2, r3
 800f252:	d30f      	bcc.n	800f274 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	1e5a      	subs	r2, r3, #1
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	425b      	negs	r3, r3
 800f25c:	401a      	ands	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	699b      	ldr	r3, [r3, #24]
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	69db      	ldr	r3, [r3, #28]
 800f270:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f272:	e022      	b.n	800f2ba <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d119      	bne.n	800f2b4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2100      	movs	r1, #0
 800f284:	4618      	mov	r0, r3
 800f286:	f7fe fba2 	bl	800d9ce <create_chain>
 800f28a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d104      	bne.n	800f29c <f_lseek+0x28a>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2202      	movs	r2, #2
 800f296:	755a      	strb	r2, [r3, #21]
 800f298:	2302      	movs	r3, #2
 800f29a:	e0bf      	b.n	800f41c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a2:	d104      	bne.n	800f2ae <f_lseek+0x29c>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	755a      	strb	r2, [r3, #21]
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e0b6      	b.n	800f41c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d05d      	beq.n	800f37c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f2c0:	e03a      	b.n	800f338 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	603b      	str	r3, [r7, #0]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	699a      	ldr	r2, [r3, #24]
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	441a      	add	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	7d1b      	ldrb	r3, [r3, #20]
 800f2da:	f003 0302 	and.w	r3, r3, #2
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00b      	beq.n	800f2fa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe fb71 	bl	800d9ce <create_chain>
 800f2ec:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d108      	bne.n	800f306 <f_lseek+0x2f4>
							ofs = 0; break;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	603b      	str	r3, [r7, #0]
 800f2f8:	e022      	b.n	800f340 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe f96f 	bl	800d5e2 <get_fat>
 800f304:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f30c:	d104      	bne.n	800f318 <f_lseek+0x306>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2201      	movs	r2, #1
 800f312:	755a      	strb	r2, [r3, #21]
 800f314:	2301      	movs	r3, #1
 800f316:	e081      	b.n	800f41c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d904      	bls.n	800f328 <f_lseek+0x316>
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	695b      	ldr	r3, [r3, #20]
 800f322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f324:	429a      	cmp	r2, r3
 800f326:	d304      	bcc.n	800f332 <f_lseek+0x320>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2202      	movs	r2, #2
 800f32c:	755a      	strb	r2, [r3, #21]
 800f32e:	2302      	movs	r3, #2
 800f330:	e074      	b.n	800f41c <f_lseek+0x40a>
					fp->clust = clst;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f336:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d8c0      	bhi.n	800f2c2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	699a      	ldr	r2, [r3, #24]
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	441a      	add	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f352:	2b00      	cmp	r3, #0
 800f354:	d012      	beq.n	800f37c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fe f922 	bl	800d5a4 <clust2sect>
 800f360:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f364:	2b00      	cmp	r3, #0
 800f366:	d104      	bne.n	800f372 <f_lseek+0x360>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2202      	movs	r2, #2
 800f36c:	755a      	strb	r2, [r3, #21]
 800f36e:	2302      	movs	r3, #2
 800f370:	e054      	b.n	800f41c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	0a5b      	lsrs	r3, r3, #9
 800f376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f378:	4413      	add	r3, r2
 800f37a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	699a      	ldr	r2, [r3, #24]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	429a      	cmp	r2, r3
 800f386:	d90a      	bls.n	800f39e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	699a      	ldr	r2, [r3, #24]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	7d1b      	ldrb	r3, [r3, #20]
 800f394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f398:	b2da      	uxtb	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	699b      	ldr	r3, [r3, #24]
 800f3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d036      	beq.n	800f418 <f_lseek+0x406>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a1b      	ldr	r3, [r3, #32]
 800f3ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d031      	beq.n	800f418 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7d1b      	ldrb	r3, [r3, #20]
 800f3b8:	b25b      	sxtb	r3, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	da18      	bge.n	800f3f0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	7858      	ldrb	r0, [r3, #1]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a1a      	ldr	r2, [r3, #32]
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	f7fd fd5f 	bl	800ce90 <disk_write>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d004      	beq.n	800f3e2 <f_lseek+0x3d0>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	755a      	strb	r2, [r3, #21]
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e01c      	b.n	800f41c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	7d1b      	ldrb	r3, [r3, #20]
 800f3e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	7858      	ldrb	r0, [r3, #1]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f3fe:	f7fd fd27 	bl	800ce50 <disk_read>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d004      	beq.n	800f412 <f_lseek+0x400>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2201      	movs	r2, #1
 800f40c:	755a      	strb	r2, [r3, #21]
 800f40e:	2301      	movs	r3, #1
 800f410:	e004      	b.n	800f41c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f416:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f418:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3740      	adds	r7, #64	@ 0x40
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f424:	b480      	push	{r7}
 800f426:	b087      	sub	sp, #28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	4613      	mov	r3, r2
 800f430:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f432:	2301      	movs	r3, #1
 800f434:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f43a:	4b1f      	ldr	r3, [pc, #124]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f43c:	7a5b      	ldrb	r3, [r3, #9]
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	2b00      	cmp	r3, #0
 800f442:	d131      	bne.n	800f4a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f444:	4b1c      	ldr	r3, [pc, #112]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f446:	7a5b      	ldrb	r3, [r3, #9]
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	461a      	mov	r2, r3
 800f44c:	4b1a      	ldr	r3, [pc, #104]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f44e:	2100      	movs	r1, #0
 800f450:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f452:	4b19      	ldr	r3, [pc, #100]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f454:	7a5b      	ldrb	r3, [r3, #9]
 800f456:	b2db      	uxtb	r3, r3
 800f458:	4a17      	ldr	r2, [pc, #92]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f462:	4b15      	ldr	r3, [pc, #84]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f464:	7a5b      	ldrb	r3, [r3, #9]
 800f466:	b2db      	uxtb	r3, r3
 800f468:	461a      	mov	r2, r3
 800f46a:	4b13      	ldr	r3, [pc, #76]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f46c:	4413      	add	r3, r2
 800f46e:	79fa      	ldrb	r2, [r7, #7]
 800f470:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f472:	4b11      	ldr	r3, [pc, #68]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f474:	7a5b      	ldrb	r3, [r3, #9]
 800f476:	b2db      	uxtb	r3, r3
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	b2d1      	uxtb	r1, r2
 800f47c:	4a0e      	ldr	r2, [pc, #56]	@ (800f4b8 <FATFS_LinkDriverEx+0x94>)
 800f47e:	7251      	strb	r1, [r2, #9]
 800f480:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f482:	7dbb      	ldrb	r3, [r7, #22]
 800f484:	3330      	adds	r3, #48	@ 0x30
 800f486:	b2da      	uxtb	r2, r3
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	3301      	adds	r3, #1
 800f490:	223a      	movs	r2, #58	@ 0x3a
 800f492:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	3302      	adds	r3, #2
 800f498:	222f      	movs	r2, #47	@ 0x2f
 800f49a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	3303      	adds	r3, #3
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	371c      	adds	r7, #28
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	24071e10 	.word	0x24071e10

0800f4bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7ff ffaa 	bl	800f424 <FATFS_LinkDriverEx>
 800f4d0:	4603      	mov	r3, r0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
	...

0800f4dc <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	607b      	str	r3, [r7, #4]
 800f4e6:	e02e      	b.n	800f546 <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	3b80      	subs	r3, #128	@ 0x80
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800f4f6:	fb02 f303 	mul.w	r3, r2, r3
 800f4fa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4fe:	141a      	asrs	r2, r3, #16
 800f500:	4916      	ldr	r1, [pc, #88]	@ (800f55c <JPEG_InitPostProcColorTables+0x80>)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800f50e:	fb02 f303 	mul.w	r3, r2, r3
 800f512:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f516:	141a      	asrs	r2, r3, #16
 800f518:	4911      	ldr	r1, [pc, #68]	@ (800f560 <JPEG_InitPostProcColorTables+0x84>)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	4a10      	ldr	r2, [pc, #64]	@ (800f564 <JPEG_InitPostProcColorTables+0x88>)
 800f524:	fb03 f202 	mul.w	r2, r3, r2
 800f528:	490f      	ldr	r1, [pc, #60]	@ (800f568 <JPEG_InitPostProcColorTables+0x8c>)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	4a0e      	ldr	r2, [pc, #56]	@ (800f56c <JPEG_InitPostProcColorTables+0x90>)
 800f534:	fb03 f202 	mul.w	r2, r3, r2
 800f538:	490d      	ldr	r1, [pc, #52]	@ (800f570 <JPEG_InitPostProcColorTables+0x94>)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3301      	adds	r3, #1
 800f544:	607b      	str	r3, [r7, #4]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2bff      	cmp	r3, #255	@ 0xff
 800f54a:	ddcd      	ble.n	800f4e8 <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800f54c:	bf00      	nop
 800f54e:	bf00      	nop
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	24071e1c 	.word	0x24071e1c
 800f560:	2407221c 	.word	0x2407221c
 800f564:	ffffa498 	.word	0xffffa498
 800f568:	2407261c 	.word	0x2407261c
 800f56c:	ffffd3f4 	.word	0xffffd3f4
 800f570:	24072a1c 	.word	0x24072a1c

0800f574 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800f578:	f000 f806 	bl	800f588 <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800f57c:	f000 f888 	bl	800f690 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800f580:	f7ff ffac 	bl	800f4dc <JPEG_InitPostProcColorTables>
#endif

}
 800f584:	bf00      	nop
 800f586:	bd80      	pop	{r7, pc}

0800f588 <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800f58e:	2300      	movs	r3, #0
 800f590:	607b      	str	r3, [r7, #4]
 800f592:	e05a      	b.n	800f64a <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800f59a:	fb02 f303 	mul.w	r3, r2, r3
 800f59e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f5a2:	141a      	asrs	r2, r3, #16
 800f5a4:	492e      	ldr	r1, [pc, #184]	@ (800f660 <JPEG_InitPreProcColorTables+0xd8>)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f249 6245 	movw	r2, #38469	@ 0x9645
 800f5b2:	fb02 f303 	mul.w	r3, r2, r3
 800f5b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f5ba:	141a      	asrs	r2, r3, #16
 800f5bc:	4929      	ldr	r1, [pc, #164]	@ (800f664 <JPEG_InitPreProcColorTables+0xdc>)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800f5ca:	fb02 f303 	mul.w	r3, r2, r3
 800f5ce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f5d2:	141a      	asrs	r2, r3, #16
 800f5d4:	4924      	ldr	r1, [pc, #144]	@ (800f668 <JPEG_InitPreProcColorTables+0xe0>)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a23      	ldr	r2, [pc, #140]	@ (800f66c <JPEG_InitPreProcColorTables+0xe4>)
 800f5e0:	fb02 f303 	mul.w	r3, r2, r3
 800f5e4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f5e8:	141a      	asrs	r2, r3, #16
 800f5ea:	4921      	ldr	r1, [pc, #132]	@ (800f670 <JPEG_InitPreProcColorTables+0xe8>)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a1f      	ldr	r2, [pc, #124]	@ (800f674 <JPEG_InitPreProcColorTables+0xec>)
 800f5f6:	fb02 f303 	mul.w	r3, r2, r3
 800f5fa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f5fe:	141a      	asrs	r2, r3, #16
 800f600:	491d      	ldr	r1, [pc, #116]	@ (800f678 <JPEG_InitPreProcColorTables+0xf0>)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3301      	adds	r3, #1
 800f60c:	03db      	lsls	r3, r3, #15
 800f60e:	141a      	asrs	r2, r3, #16
 800f610:	491a      	ldr	r1, [pc, #104]	@ (800f67c <JPEG_InitPreProcColorTables+0xf4>)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a19      	ldr	r2, [pc, #100]	@ (800f680 <JPEG_InitPreProcColorTables+0xf8>)
 800f61c:	fb02 f303 	mul.w	r3, r2, r3
 800f620:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f624:	141a      	asrs	r2, r3, #16
 800f626:	4917      	ldr	r1, [pc, #92]	@ (800f684 <JPEG_InitPreProcColorTables+0xfc>)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a15      	ldr	r2, [pc, #84]	@ (800f688 <JPEG_InitPreProcColorTables+0x100>)
 800f632:	fb02 f303 	mul.w	r3, r2, r3
 800f636:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f63a:	141a      	asrs	r2, r3, #16
 800f63c:	4913      	ldr	r1, [pc, #76]	@ (800f68c <JPEG_InitPreProcColorTables+0x104>)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3301      	adds	r3, #1
 800f648:	607b      	str	r3, [r7, #4]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2bff      	cmp	r3, #255	@ 0xff
 800f64e:	dda1      	ble.n	800f594 <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800f650:	bf00      	nop
 800f652:	bf00      	nop
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	24072e1c 	.word	0x24072e1c
 800f664:	24073a1c 	.word	0x24073a1c
 800f668:	2407461c 	.word	0x2407461c
 800f66c:	ffffd4d1 	.word	0xffffd4d1
 800f670:	2407321c 	.word	0x2407321c
 800f674:	ffffab30 	.word	0xffffab30
 800f678:	2407421c 	.word	0x2407421c
 800f67c:	2407361c 	.word	0x2407361c
 800f680:	ffff94d1 	.word	0xffff94d1
 800f684:	24073e1c 	.word	0x24073e1c
 800f688:	ffffeb30 	.word	0xffffeb30
 800f68c:	24074a1c 	.word	0x24074a1c

0800f690 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800f696:	2300      	movs	r3, #0
 800f698:	60fb      	str	r3, [r7, #12]
 800f69a:	e036      	b.n	800f70a <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800f69c:	2300      	movs	r3, #0
 800f69e:	60bb      	str	r3, [r7, #8]
 800f6a0:	e02d      	b.n	800f6fe <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	00db      	lsls	r3, r3, #3
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	2b07      	cmp	r3, #7
 800f6b0:	d906      	bls.n	800f6c0 <JPEG_Init_MCU_LUT+0x30>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2b07      	cmp	r3, #7
 800f6b6:	d903      	bls.n	800f6c0 <JPEG_Init_MCU_LUT+0x30>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3378      	adds	r3, #120	@ 0x78
 800f6bc:	607b      	str	r3, [r7, #4]
 800f6be:	e012      	b.n	800f6e6 <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	2b07      	cmp	r3, #7
 800f6c4:	d906      	bls.n	800f6d4 <JPEG_Init_MCU_LUT+0x44>
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b07      	cmp	r3, #7
 800f6ca:	d803      	bhi.n	800f6d4 <JPEG_Init_MCU_LUT+0x44>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3338      	adds	r3, #56	@ 0x38
 800f6d0:	607b      	str	r3, [r7, #4]
 800f6d2:	e008      	b.n	800f6e6 <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2b07      	cmp	r3, #7
 800f6d8:	d805      	bhi.n	800f6e6 <JPEG_Init_MCU_LUT+0x56>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2b07      	cmp	r3, #7
 800f6de:	d902      	bls.n	800f6e6 <JPEG_Init_MCU_LUT+0x56>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	3340      	adds	r3, #64	@ 0x40
 800f6e4:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	011a      	lsls	r2, r3, #4
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	b291      	uxth	r1, r2
 800f6f2:	4a62      	ldr	r2, [pc, #392]	@ (800f87c <JPEG_Init_MCU_LUT+0x1ec>)
 800f6f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	60bb      	str	r3, [r7, #8]
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2b0f      	cmp	r3, #15
 800f702:	d9ce      	bls.n	800f6a2 <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	3301      	adds	r3, #1
 800f708:	60fb      	str	r3, [r7, #12]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2b0f      	cmp	r3, #15
 800f70e:	d9c5      	bls.n	800f69c <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800f710:	2300      	movs	r3, #0
 800f712:	60fb      	str	r3, [r7, #12]
 800f714:	e072      	b.n	800f7fc <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800f716:	2300      	movs	r3, #0
 800f718:	60bb      	str	r3, [r7, #8]
 800f71a:	e069      	b.n	800f7f0 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	011b      	lsls	r3, r3, #4
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	4413      	add	r3, r2
 800f724:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	085b      	lsrs	r3, r3, #1
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	085b      	lsrs	r3, r3, #1
 800f730:	b29b      	uxth	r3, r3
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	b29b      	uxth	r3, r3
 800f736:	4413      	add	r3, r2
 800f738:	b29b      	uxth	r3, r3
 800f73a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f73e:	b299      	uxth	r1, r3
 800f740:	4a4f      	ldr	r2, [pc, #316]	@ (800f880 <JPEG_Init_MCU_LUT+0x1f0>)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	085b      	lsrs	r3, r3, #1
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	b29b      	uxth	r3, r3
 800f752:	00db      	lsls	r3, r3, #3
 800f754:	b29b      	uxth	r3, r3
 800f756:	4413      	add	r3, r2
 800f758:	b29b      	uxth	r3, r3
 800f75a:	3380      	adds	r3, #128	@ 0x80
 800f75c:	b299      	uxth	r1, r3
 800f75e:	4a49      	ldr	r2, [pc, #292]	@ (800f884 <JPEG_Init_MCU_LUT+0x1f4>)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	085b      	lsrs	r3, r3, #1
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	085b      	lsrs	r3, r3, #1
 800f770:	b29b      	uxth	r3, r3
 800f772:	00db      	lsls	r3, r3, #3
 800f774:	b29b      	uxth	r3, r3
 800f776:	4413      	add	r3, r2
 800f778:	b29b      	uxth	r3, r3
 800f77a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f77e:	b299      	uxth	r1, r3
 800f780:	4a41      	ldr	r2, [pc, #260]	@ (800f888 <JPEG_Init_MCU_LUT+0x1f8>)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	085b      	lsrs	r3, r3, #1
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	b29b      	uxth	r3, r3
 800f792:	00db      	lsls	r3, r3, #3
 800f794:	b29b      	uxth	r3, r3
 800f796:	4413      	add	r3, r2
 800f798:	b29b      	uxth	r3, r3
 800f79a:	33c0      	adds	r3, #192	@ 0xc0
 800f79c:	b299      	uxth	r1, r3
 800f79e:	4a3b      	ldr	r2, [pc, #236]	@ (800f88c <JPEG_Init_MCU_LUT+0x1fc>)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	085b      	lsrs	r3, r3, #1
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	085b      	lsrs	r3, r3, #1
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	4413      	add	r3, r2
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f7be:	b299      	uxth	r1, r3
 800f7c0:	4a33      	ldr	r2, [pc, #204]	@ (800f890 <JPEG_Init_MCU_LUT+0x200>)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	085b      	lsrs	r3, r3, #1
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	085b      	lsrs	r3, r3, #1
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	4413      	add	r3, r2
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f7e0:	b299      	uxth	r1, r3
 800f7e2:	4a2c      	ldr	r2, [pc, #176]	@ (800f894 <JPEG_Init_MCU_LUT+0x204>)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	60bb      	str	r3, [r7, #8]
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b0f      	cmp	r3, #15
 800f7f4:	d992      	bls.n	800f71c <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2b0f      	cmp	r3, #15
 800f800:	d989      	bls.n	800f716 <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800f802:	2300      	movs	r3, #0
 800f804:	60fb      	str	r3, [r7, #12]
 800f806:	e02e      	b.n	800f866 <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800f808:	2300      	movs	r3, #0
 800f80a:	60bb      	str	r3, [r7, #8]
 800f80c:	e025      	b.n	800f85a <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	4413      	add	r3, r2
 800f816:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	b299      	uxth	r1, r3
 800f81c:	4a1e      	ldr	r2, [pc, #120]	@ (800f898 <JPEG_Init_MCU_LUT+0x208>)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	b29b      	uxth	r3, r3
 800f828:	3340      	adds	r3, #64	@ 0x40
 800f82a:	b299      	uxth	r1, r3
 800f82c:	4a1b      	ldr	r2, [pc, #108]	@ (800f89c <JPEG_Init_MCU_LUT+0x20c>)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	b29b      	uxth	r3, r3
 800f838:	3380      	adds	r3, #128	@ 0x80
 800f83a:	b299      	uxth	r1, r3
 800f83c:	4a18      	ldr	r2, [pc, #96]	@ (800f8a0 <JPEG_Init_MCU_LUT+0x210>)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	b29b      	uxth	r3, r3
 800f848:	33c0      	adds	r3, #192	@ 0xc0
 800f84a:	b299      	uxth	r1, r3
 800f84c:	4a15      	ldr	r2, [pc, #84]	@ (800f8a4 <JPEG_Init_MCU_LUT+0x214>)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	3301      	adds	r3, #1
 800f858:	60bb      	str	r3, [r7, #8]
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2b07      	cmp	r3, #7
 800f85e:	d9d6      	bls.n	800f80e <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	3301      	adds	r3, #1
 800f864:	60fb      	str	r3, [r7, #12]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2b07      	cmp	r3, #7
 800f86a:	d9cd      	bls.n	800f808 <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800f86c:	bf00      	nop
 800f86e:	bf00      	nop
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	24074e1c 	.word	0x24074e1c
 800f880:	2407509c 	.word	0x2407509c
 800f884:	2407529c 	.word	0x2407529c
 800f888:	2407551c 	.word	0x2407551c
 800f88c:	2407571c 	.word	0x2407571c
 800f890:	2407599c 	.word	0x2407599c
 800f894:	24075b9c 	.word	0x24075b9c
 800f898:	2407501c 	.word	0x2407501c
 800f89c:	2407549c 	.word	0x2407549c
 800f8a0:	2407591c 	.word	0x2407591c
 800f8a4:	24075d9c 	.word	0x24075d9c

0800f8a8 <memset>:
 800f8a8:	4402      	add	r2, r0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d100      	bne.n	800f8b2 <memset+0xa>
 800f8b0:	4770      	bx	lr
 800f8b2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8b6:	e7f9      	b.n	800f8ac <memset+0x4>

0800f8b8 <__libc_init_array>:
 800f8b8:	b570      	push	{r4, r5, r6, lr}
 800f8ba:	4d0d      	ldr	r5, [pc, #52]	@ (800f8f0 <__libc_init_array+0x38>)
 800f8bc:	4c0d      	ldr	r4, [pc, #52]	@ (800f8f4 <__libc_init_array+0x3c>)
 800f8be:	1b64      	subs	r4, r4, r5
 800f8c0:	10a4      	asrs	r4, r4, #2
 800f8c2:	2600      	movs	r6, #0
 800f8c4:	42a6      	cmp	r6, r4
 800f8c6:	d109      	bne.n	800f8dc <__libc_init_array+0x24>
 800f8c8:	4d0b      	ldr	r5, [pc, #44]	@ (800f8f8 <__libc_init_array+0x40>)
 800f8ca:	4c0c      	ldr	r4, [pc, #48]	@ (800f8fc <__libc_init_array+0x44>)
 800f8cc:	f000 f826 	bl	800f91c <_init>
 800f8d0:	1b64      	subs	r4, r4, r5
 800f8d2:	10a4      	asrs	r4, r4, #2
 800f8d4:	2600      	movs	r6, #0
 800f8d6:	42a6      	cmp	r6, r4
 800f8d8:	d105      	bne.n	800f8e6 <__libc_init_array+0x2e>
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
 800f8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8e0:	4798      	blx	r3
 800f8e2:	3601      	adds	r6, #1
 800f8e4:	e7ee      	b.n	800f8c4 <__libc_init_array+0xc>
 800f8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8ea:	4798      	blx	r3
 800f8ec:	3601      	adds	r6, #1
 800f8ee:	e7f2      	b.n	800f8d6 <__libc_init_array+0x1e>
 800f8f0:	0800fce4 	.word	0x0800fce4
 800f8f4:	0800fce4 	.word	0x0800fce4
 800f8f8:	0800fce4 	.word	0x0800fce4
 800f8fc:	0800fce8 	.word	0x0800fce8

0800f900 <memcpy>:
 800f900:	440a      	add	r2, r1
 800f902:	4291      	cmp	r1, r2
 800f904:	f100 33ff 	add.w	r3, r0, #4294967295
 800f908:	d100      	bne.n	800f90c <memcpy+0xc>
 800f90a:	4770      	bx	lr
 800f90c:	b510      	push	{r4, lr}
 800f90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f912:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f916:	4291      	cmp	r1, r2
 800f918:	d1f9      	bne.n	800f90e <memcpy+0xe>
 800f91a:	bd10      	pop	{r4, pc}

0800f91c <_init>:
 800f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91e:	bf00      	nop
 800f920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f922:	bc08      	pop	{r3}
 800f924:	469e      	mov	lr, r3
 800f926:	4770      	bx	lr

0800f928 <_fini>:
 800f928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92a:	bf00      	nop
 800f92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f92e:	bc08      	pop	{r3}
 800f930:	469e      	mov	lr, r3
 800f932:	4770      	bx	lr
