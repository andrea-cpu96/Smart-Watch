
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f554  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800f7ec  0800f7ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb94  0800fb94  00011014  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb94  0800fb94  00010b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb9c  0800fb9c  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb9c  0800fb9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fba0  0800fba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  0800fba4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004800  24000014  0800fbb8  00011014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004814  0800fbb8  00011814  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fa9  00000000  00000000  00011042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472f  00000000  00000000  00034feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00039720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f6  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004481c  00000000  00000000  0003c4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c05  00000000  00000000  00080d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a669a  00000000  00000000  000a991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024ffb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be8  00000000  00000000  0024fffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00256be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f7d4 	.word	0x0800f7d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800f7d4 	.word	0x0800f7d4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b04      	subs	r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e02a      	b.n	8000762 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d11f      	bne.n	800075c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d115      	bne.n	800075c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	3302      	adds	r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d10b      	bne.n	800075c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3303      	adds	r3, #3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3303      	adds	r3, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <__AVI_SearchID+0x68>
            return i;  
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	e007      	b.n	800076c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8d0      	bhi.n	800070c <__AVI_SearchID+0x18>
  }
  return 0;    
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3303      	adds	r3, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	431a      	orrs	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3306      	adds	r3, #6
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3307      	adds	r3, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	4313      	orrs	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8bdb      	ldrh	r3, [r3, #30]
 80007e4:	f246 4263 	movw	r2, #25699	@ 0x6463
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d005      	beq.n	80007f8 <__AVI_GetStreamInfo+0x80>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8bdb      	ldrh	r3, [r3, #30]
 80007f0:	f247 7262 	movw	r2, #30562	@ 0x7762
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d101      	bne.n	80007fc <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80007fc:	230b      	movs	r3, #11
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <__AVI_Init+0x23c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d001      	beq.n	8000834 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 8000830:	2301      	movs	r3, #1
 8000832:	e170      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a84      	ldr	r2, [pc, #528]	@ (8000a4c <__AVI_Init+0x240>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d001      	beq.n	8000842 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800083e:	2302      	movs	r3, #2
 8000840:	e169      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330c      	adds	r3, #12
 8000846:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <__AVI_Init+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d001      	beq.n	800085a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000856:	2303      	movs	r3, #3
 8000858:	e15d      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a54 <__AVI_Init+0x248>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d001      	beq.n	8000868 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000864:	2304      	movs	r3, #4
 8000866:	e156      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a78      	ldr	r2, [pc, #480]	@ (8000a58 <__AVI_Init+0x24c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d001      	beq.n	8000880 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800087c:	2305      	movs	r3, #5
 800087e:	e14a      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	3308      	adds	r3, #8
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80008a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <__AVI_Init+0x244>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d001      	beq.n	80008ae <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e133      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <__AVI_Init+0x250>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 80008b8:	2306      	movs	r3, #6
 80008ba:	e12c      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	330c      	adds	r3, #12
 80008c0:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a66      	ldr	r2, [pc, #408]	@ (8000a60 <__AVI_Init+0x254>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d001      	beq.n	80008d0 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 80008cc:	2307      	movs	r3, #7
 80008ce:	e122      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	@ (8000a64 <__AVI_Init+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <__AVI_Init+0x25c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d001      	beq.n	80008e8 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 80008e4:	230a      	movs	r3, #10
 80008e6:	e116      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <__AVI_Init+0x260>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80008ee:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <__AVI_Init+0x264>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	3314      	adds	r3, #20
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a5b      	ldr	r2, [pc, #364]	@ (8000a74 <__AVI_Init+0x268>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d001      	beq.n	800090e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800090a:	2308      	movs	r3, #8
 800090c:	e103      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3308      	adds	r3, #8
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <__AVI_Init+0x244>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d009      	beq.n	800094c <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	839a      	strh	r2, [r3, #28]
 800094a:	e0b7      	b.n	8000abc <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <__AVI_Init+0x250>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d001      	beq.n	800095a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000956:	2306      	movs	r3, #6
 8000958:	e0dd      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <__AVI_Init+0x254>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d001      	beq.n	800096e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800096a:	2307      	movs	r3, #7
 800096c:	e0d3      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <__AVI_Init+0x26c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d001      	beq.n	800097c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000978:	230a      	movs	r3, #10
 800097a:	e0cc      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	3314      	adds	r3, #20
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <__AVI_Init+0x268>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d001      	beq.n	8000996 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 8000992:	2308      	movs	r3, #8
 8000994:	e0bf      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	895a      	ldrh	r2, [r3, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	891a      	ldrh	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	839a      	strh	r2, [r3, #28]
 80009ae:	e085      	b.n	8000abc <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <__AVI_Init+0x26c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 8080 	bne.w	8000abc <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <__AVI_Init+0x270>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <__AVI_Init+0x274>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3314      	adds	r3, #20
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <__AVI_Init+0x268>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d001      	beq.n	80009e2 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 80009de:	2308      	movs	r3, #8
 80009e0:	e099      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	895a      	ldrh	r2, [r3, #10]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	891a      	ldrh	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	3308      	adds	r3, #8
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <__AVI_Init+0x244>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d001      	beq.n	8000a18 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 8000a14:	2303      	movs	r3, #3
 8000a16:	e07e      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <__AVI_Init+0x250>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d001      	beq.n	8000a26 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 8000a22:	2306      	movs	r3, #6
 8000a24:	e077      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <__AVI_Init+0x254>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d001      	beq.n	8000a3a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 8000a36:	2307      	movs	r3, #7
 8000a38:	e06d      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <__AVI_Init+0x258>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 8000a44:	230a      	movs	r3, #10
 8000a46:	e066      	b.n	8000b16 <__AVI_Init+0x30a>
 8000a48:	46464952 	.word	0x46464952
 8000a4c:	20495641 	.word	0x20495641
 8000a50:	5453494c 	.word	0x5453494c
 8000a54:	6c726468 	.word	0x6c726468
 8000a58:	68697661 	.word	0x68697661
 8000a5c:	6c727473 	.word	0x6c727473
 8000a60:	68727473 	.word	0x68727473
 8000a64:	73646976 	.word	0x73646976
 8000a68:	47504a4d 	.word	0x47504a4d
 8000a6c:	0800f7ec 	.word	0x0800f7ec
 8000a70:	0800f804 	.word	0x0800f804
 8000a74:	66727473 	.word	0x66727473
 8000a78:	73647561 	.word	0x73647561
 8000a7c:	0800f7f4 	.word	0x0800f7f4
 8000a80:	0800f7fc 	.word	0x0800f7fc
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	3314      	adds	r3, #20
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <__AVI_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d001      	beq.n	8000a9e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	e03b      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <__AVI_Init+0x318>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d001      	beq.n	8000aac <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	e034      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <__AVI_Init+0x31c>)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac2:	f7ff fe17 	bl	80006f4 <__AVI_SearchID>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	e020      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01a      	beq.n	8000b12 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aee:	f7ff fe01 	bl	80006f4 <__AVI_SearchID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000afc:	230b      	movs	r3, #11
 8000afe:	e00a      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3304      	adds	r3, #4
 8000b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	@ 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	66727473 	.word	0x66727473
 8000b24:	47504a4d 	.word	0x47504a4d
 8000b28:	0800f80c 	.word	0x0800f80c

08000b2c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT *pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]

  UINT readSize= 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  

  // Initialize some parameters for the AVI file handler
  pavi->pVideoBuffer = pVideoBuffer;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38
  pavi->pAudioBuffer = pAudioBuffer;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
  
  // Go to the beginning of the file
  f_lseek(file, 0 );
 8000b56:	2100      	movs	r1, #0
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f00e f9c4 	bl	800eee6 <f_lseek>
  
  // Fill the videoBuffer with the first 96kB of the file
  f_read(file, pavi->pVideoBuffer, VideoBufferSize, &readSize);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f00d ffd5 	bl	800eb18 <f_read>

  // Manage the error if present
  if(readSize != VideoBufferSize)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d001      	beq.n	8000b7a <AVI_ParserInit+0x4e>
    return 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e013      	b.n	8000ba2 <AVI_ParserInit+0x76>
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe42 	bl	800080c <__AVI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <AVI_ParserInit+0x66>
    return 1;    
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e007      	b.n	8000ba2 <AVI_ParserInit+0x76>

  // Initialize other parameters for the AVI file handler
  pavi->FileSize= f_size(file);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 8000ba0:	2300      	movs	r3, #0

}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT *pavi, FIL *file)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]

  uint32_t  offset ;
  uint32_t readSize = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  

  if(pavi->CurrentImage== 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d124      	bne.n	8000c0c <AVI_GetFrame+0x60>
  {
    
	// Go to the beginning of the file
    f_lseek(file, 0 );
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f00e f98e 	bl	800eee6 <f_lseek>

    // File the videoBuffer with the first 96kB of file data
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00d ff9e 	bl	800eb18 <f_read>
    
    // Check for "movi" tag
    offset = __AVI_SearchID(pavi->pVideoBuffer, pavi->VideoBufferSize, (uint8_t*)"movi");
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <AVI_GetFrame+0xe4>)
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__AVI_SearchID>
 8000bec:	60f8      	str	r0, [r7, #12]

    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdbc 	bl	8000778 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	330c      	adds	r3, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f00e f96d 	bl	800eee6 <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8bdb      	ldrh	r3, [r3, #30]
 8000c18:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d115      	bne.n	8000c4c <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f103 0208 	add.w	r2, r3, #8
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f00d ff71 	bl	800eb18 <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fd98 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e01c      	b.n	8000c86 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8bdb      	ldrh	r3, [r3, #30]
 8000c50:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d115      	bne.n	8000c84 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f103 0208 	add.w	r2, r3, #8
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f00d ff55 	bl	800eb18 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	4413      	add	r3, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fd7c 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 8000c80:	2302      	movs	r3, #2
 8000c82:	e000      	b.n	8000c86 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800f80c 	.word	0x0800f80c

08000c94 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000caa:	f002 fb67 	bl	800337c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 8000cae:	e004      	b.n	8000cba <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000cb6:	f002 fb61 	bl	800337c <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58022400 	.word	0x58022400

08000cc8 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cde:	f002 fb4d 	bl	800337c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000ce2:	e004      	b.n	8000cee <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cea:	f002 fb47 	bl	800337c <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58022400 	.word	0x58022400

08000cfc <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d12:	f002 fb33 	bl	800337c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000d16:	e004      	b.n	8000d22 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d1e:	f002 fb2d 	bl	800337c <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58022800 	.word	0x58022800

08000d30 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffc4 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ffdb 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa92 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffd3 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffad 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffc4 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa7a 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ffbb 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffde 	bl	8000d5e <GC9A01_write_data>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000db4:	202c      	movs	r0, #44	@ 0x2c
 8000db6:	f7ff ffbb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffce 	bl	8000d5e <GC9A01_write_data>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000dd4:	203c      	movs	r0, #60	@ 0x3c
 8000dd6:	f7ff ffab 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffbe 	bl	8000d5e <GC9A01_write_data>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <GC9A01_init>:

void GC9A01_init(void) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff84 	bl	8000cfc <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f001 fbdd 	bl	80025b4 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ff4a 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(10);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 fbd7 	bl	80025b4 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff ff44 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(120);
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f001 fbd1 	bl	80025b4 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000e12:	20ef      	movs	r0, #239	@ 0xef
 8000e14:	f7ff ff8c 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e18:	20eb      	movs	r0, #235	@ 0xeb
 8000e1a:	f7ff ff89 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f7ff ffb5 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000e24:	20fe      	movs	r0, #254	@ 0xfe
 8000e26:	f7ff ff83 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000e2a:	20ef      	movs	r0, #239	@ 0xef
 8000e2c:	f7ff ff80 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e30:	20eb      	movs	r0, #235	@ 0xeb
 8000e32:	f7ff ff7d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ffa9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000e3c:	2084      	movs	r0, #132	@ 0x84
 8000e3e:	f7ff ff77 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e42:	2040      	movs	r0, #64	@ 0x40
 8000e44:	f7ff ffa3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000e48:	2085      	movs	r0, #133	@ 0x85
 8000e4a:	f7ff ff71 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	f7ff ff9d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000e54:	2086      	movs	r0, #134	@ 0x86
 8000e56:	f7ff ff6b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	f7ff ff97 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000e60:	2087      	movs	r0, #135	@ 0x87
 8000e62:	f7ff ff65 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e66:	20ff      	movs	r0, #255	@ 0xff
 8000e68:	f7ff ff91 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000e6c:	2088      	movs	r0, #136	@ 0x88
 8000e6e:	f7ff ff5f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff8b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000e78:	2089      	movs	r0, #137	@ 0x89
 8000e7a:	f7ff ff59 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000e7e:	2021      	movs	r0, #33	@ 0x21
 8000e80:	f7ff ff85 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000e84:	208a      	movs	r0, #138	@ 0x8a
 8000e86:	f7ff ff53 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff7f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000e90:	208b      	movs	r0, #139	@ 0x8b
 8000e92:	f7ff ff4d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e96:	2080      	movs	r0, #128	@ 0x80
 8000e98:	f7ff ff79 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000e9c:	208c      	movs	r0, #140	@ 0x8c
 8000e9e:	f7ff ff47 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ff73 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000ea8:	208d      	movs	r0, #141	@ 0x8d
 8000eaa:	f7ff ff41 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff6d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000eb4:	208e      	movs	r0, #142	@ 0x8e
 8000eb6:	f7ff ff3b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000eba:	20ff      	movs	r0, #255	@ 0xff
 8000ebc:	f7ff ff67 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000ec0:	208f      	movs	r0, #143	@ 0x8f
 8000ec2:	f7ff ff35 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	f7ff ff61 	bl	8000d8e <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ecc:	20b6      	movs	r0, #182	@ 0xb6
 8000ece:	f7ff ff2f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff5b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff ff58 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000ede:	2036      	movs	r0, #54	@ 0x36
 8000ee0:	f7ff ff26 	bl	8000d30 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000ee4:	2048      	movs	r0, #72	@ 0x48
 8000ee6:	f7ff ff52 	bl	8000d8e <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000eea:	203a      	movs	r0, #58	@ 0x3a
 8000eec:	f7ff ff20 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f7ff ff4c 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000ef6:	2090      	movs	r0, #144	@ 0x90
 8000ef8:	f7ff ff1a 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff ff46 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f02:	2008      	movs	r0, #8
 8000f04:	f7ff ff43 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f08:	2008      	movs	r0, #8
 8000f0a:	f7ff ff40 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f7ff ff3d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000f14:	20bd      	movs	r0, #189	@ 0xbd
 8000f16:	f7ff ff0b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f7ff ff37 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000f20:	20bc      	movs	r0, #188	@ 0xbc
 8000f22:	f7ff ff05 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ff31 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000f2c:	20ff      	movs	r0, #255	@ 0xff
 8000f2e:	f7ff feff 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f32:	2060      	movs	r0, #96	@ 0x60
 8000f34:	f7ff ff2b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff28 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff25 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000f44:	20c3      	movs	r0, #195	@ 0xc3
 8000f46:	f7ff fef3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f7ff ff1f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000f50:	20c4      	movs	r0, #196	@ 0xc4
 8000f52:	f7ff feed 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f7ff ff19 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000f5c:	20c9      	movs	r0, #201	@ 0xc9
 8000f5e:	f7ff fee7 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f62:	2022      	movs	r0, #34	@ 0x22
 8000f64:	f7ff ff13 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000f68:	20be      	movs	r0, #190	@ 0xbe
 8000f6a:	f7ff fee1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f7ff ff0d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000f74:	20e1      	movs	r0, #225	@ 0xe1
 8000f76:	f7ff fedb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff07 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f7ff ff04 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000f86:	20df      	movs	r0, #223	@ 0xdf
 8000f88:	f7ff fed2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000f8c:	2021      	movs	r0, #33	@ 0x21
 8000f8e:	f7ff fefe 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fefb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fef8 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000f9e:	20f0      	movs	r0, #240	@ 0xf0
 8000fa0:	f7ff fec6 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f7ff fef2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000faa:	2009      	movs	r0, #9
 8000fac:	f7ff feef 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff feec 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff fee9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000fbc:	2026      	movs	r0, #38	@ 0x26
 8000fbe:	f7ff fee6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000fc2:	202a      	movs	r0, #42	@ 0x2a
 8000fc4:	f7ff fee3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000fc8:	20f1      	movs	r0, #241	@ 0xf1
 8000fca:	f7ff feb1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000fce:	2043      	movs	r0, #67	@ 0x43
 8000fd0:	f7ff fedd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000fd4:	2070      	movs	r0, #112	@ 0x70
 8000fd6:	f7ff feda 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000fda:	2072      	movs	r0, #114	@ 0x72
 8000fdc:	f7ff fed7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000fe0:	2036      	movs	r0, #54	@ 0x36
 8000fe2:	f7ff fed4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000fe6:	2037      	movs	r0, #55	@ 0x37
 8000fe8:	f7ff fed1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000fec:	206f      	movs	r0, #111	@ 0x6f
 8000fee:	f7ff fece 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000ff2:	20f2      	movs	r0, #242	@ 0xf2
 8000ff4:	f7ff fe9c 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000ff8:	2045      	movs	r0, #69	@ 0x45
 8000ffa:	f7ff fec8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000ffe:	2009      	movs	r0, #9
 8001000:	f7ff fec5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff fec2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800100a:	2008      	movs	r0, #8
 800100c:	f7ff febf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8001010:	2026      	movs	r0, #38	@ 0x26
 8001012:	f7ff febc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8001016:	202a      	movs	r0, #42	@ 0x2a
 8001018:	f7ff feb9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800101c:	20f3      	movs	r0, #243	@ 0xf3
 800101e:	f7ff fe87 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001022:	2043      	movs	r0, #67	@ 0x43
 8001024:	f7ff feb3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001028:	2070      	movs	r0, #112	@ 0x70
 800102a:	f7ff feb0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800102e:	2072      	movs	r0, #114	@ 0x72
 8001030:	f7ff fead 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8001034:	2036      	movs	r0, #54	@ 0x36
 8001036:	f7ff feaa 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fea7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8001040:	206f      	movs	r0, #111	@ 0x6f
 8001042:	f7ff fea4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8001046:	20ed      	movs	r0, #237	@ 0xed
 8001048:	f7ff fe72 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800104c:	201b      	movs	r0, #27
 800104e:	f7ff fe9e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fe9b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8001058:	20ae      	movs	r0, #174	@ 0xae
 800105a:	f7ff fe69 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800105e:	2077      	movs	r0, #119	@ 0x77
 8001060:	f7ff fe95 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8001064:	20cd      	movs	r0, #205	@ 0xcd
 8001066:	f7ff fe63 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800106a:	2063      	movs	r0, #99	@ 0x63
 800106c:	f7ff fe8f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8001070:	2070      	movs	r0, #112	@ 0x70
 8001072:	f7ff fe5d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fe89 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800107c:	2007      	movs	r0, #7
 800107e:	f7ff fe86 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff fe83 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8001088:	200e      	movs	r0, #14
 800108a:	f7ff fe80 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800108e:	200f      	movs	r0, #15
 8001090:	f7ff fe7d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fe7a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800109a:	2007      	movs	r0, #7
 800109c:	f7ff fe77 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe74 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fe71 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80010ac:	20e8      	movs	r0, #232	@ 0xe8
 80010ae:	f7ff fe3f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80010b2:	2034      	movs	r0, #52	@ 0x34
 80010b4:	f7ff fe6b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80010b8:	2062      	movs	r0, #98	@ 0x62
 80010ba:	f7ff fe39 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80010be:	2018      	movs	r0, #24
 80010c0:	f7ff fe65 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80010c4:	200d      	movs	r0, #13
 80010c6:	f7ff fe62 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ca:	2071      	movs	r0, #113	@ 0x71
 80010cc:	f7ff fe5f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 80010d0:	20ed      	movs	r0, #237	@ 0xed
 80010d2:	f7ff fe5c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010d6:	2070      	movs	r0, #112	@ 0x70
 80010d8:	f7ff fe59 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010dc:	2070      	movs	r0, #112	@ 0x70
 80010de:	f7ff fe56 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f7ff fe53 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f7ff fe50 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ee:	2071      	movs	r0, #113	@ 0x71
 80010f0:	f7ff fe4d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 80010f4:	20ef      	movs	r0, #239	@ 0xef
 80010f6:	f7ff fe4a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010fa:	2070      	movs	r0, #112	@ 0x70
 80010fc:	f7ff fe47 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001100:	2070      	movs	r0, #112	@ 0x70
 8001102:	f7ff fe44 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8001106:	2063      	movs	r0, #99	@ 0x63
 8001108:	f7ff fe12 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800110c:	2018      	movs	r0, #24
 800110e:	f7ff fe3e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8001112:	2011      	movs	r0, #17
 8001114:	f7ff fe3b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001118:	2071      	movs	r0, #113	@ 0x71
 800111a:	f7ff fe38 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800111e:	20f1      	movs	r0, #241	@ 0xf1
 8001120:	f7ff fe35 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001124:	2070      	movs	r0, #112	@ 0x70
 8001126:	f7ff fe32 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800112a:	2070      	movs	r0, #112	@ 0x70
 800112c:	f7ff fe2f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8001130:	2018      	movs	r0, #24
 8001132:	f7ff fe2c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8001136:	2013      	movs	r0, #19
 8001138:	f7ff fe29 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800113c:	2071      	movs	r0, #113	@ 0x71
 800113e:	f7ff fe26 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8001142:	20f3      	movs	r0, #243	@ 0xf3
 8001144:	f7ff fe23 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001148:	2070      	movs	r0, #112	@ 0x70
 800114a:	f7ff fe20 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800114e:	2070      	movs	r0, #112	@ 0x70
 8001150:	f7ff fe1d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f7ff fdeb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800115a:	2028      	movs	r0, #40	@ 0x28
 800115c:	f7ff fe17 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8001160:	2029      	movs	r0, #41	@ 0x29
 8001162:	f7ff fe14 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001166:	20f1      	movs	r0, #241	@ 0xf1
 8001168:	f7ff fe11 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fe0e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001172:	20f1      	movs	r0, #241	@ 0xf1
 8001174:	f7ff fe0b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe08 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800117e:	2007      	movs	r0, #7
 8001180:	f7ff fe05 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8001184:	2066      	movs	r0, #102	@ 0x66
 8001186:	f7ff fdd3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800118a:	203c      	movs	r0, #60	@ 0x3c
 800118c:	f7ff fdff 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fdfc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8001196:	20cd      	movs	r0, #205	@ 0xcd
 8001198:	f7ff fdf9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800119c:	2067      	movs	r0, #103	@ 0x67
 800119e:	f7ff fdf6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a2:	2045      	movs	r0, #69	@ 0x45
 80011a4:	f7ff fdf3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a8:	2045      	movs	r0, #69	@ 0x45
 80011aa:	f7ff fdf0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fded 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fdea 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fde7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fde4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80011c6:	2067      	movs	r0, #103	@ 0x67
 80011c8:	f7ff fdb2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdde 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 80011d2:	203c      	movs	r0, #60	@ 0x3c
 80011d4:	f7ff fddb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fdd8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fdd5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fdd2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fdcf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 80011f0:	2054      	movs	r0, #84	@ 0x54
 80011f2:	f7ff fdcc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff fdc9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f7ff fdc6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8001202:	2098      	movs	r0, #152	@ 0x98
 8001204:	f7ff fdc3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8001208:	2074      	movs	r0, #116	@ 0x74
 800120a:	f7ff fd91 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff fdbd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8001214:	2085      	movs	r0, #133	@ 0x85
 8001216:	f7ff fdba 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	f7ff fdb7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdb4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fdb1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800122c:	204e      	movs	r0, #78	@ 0x4e
 800122e:	f7ff fdae 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fdab 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8001238:	2098      	movs	r0, #152	@ 0x98
 800123a:	f7ff fd79 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800123e:	203e      	movs	r0, #62	@ 0x3e
 8001240:	f7ff fda5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fda2 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800124a:	2035      	movs	r0, #53	@ 0x35
 800124c:	f7ff fd70 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001250:	2021      	movs	r0, #33	@ 0x21
 8001252:	f7ff fd6d 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fd6a 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(120);
 800125c:	2078      	movs	r0, #120	@ 0x78
 800125e:	f001 f9a9 	bl	80025b4 <HAL_Delay>
    GC9A01_write_command(0x29);
 8001262:	2029      	movs	r0, #41	@ 0x29
 8001264:	f7ff fd64 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(20);
 8001268:	2014      	movs	r0, #20
 800126a:	f001 f9a3 	bl	80025b4 <HAL_Delay>
    
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <GC9A01_spi_tx+0x30>)
 800128a:	f009 f933 	bl	800a4f4 <HAL_SPI_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001294:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
		return;

}
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	240006b0 	.word	0x240006b0
 80012a8:	24000030 	.word	0x24000030

080012ac <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <JPEG_Decode_DMA+0x5c>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <JPEG_Decode_DMA+0x60>)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <JPEG_Decode_DMA+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 80012cc:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <JPEG_Decode_DMA+0x68>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <JPEG_Decode_DMA+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  //HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
  HAL_JPEG_Decode(hjpeg, (uint8_t *)JPEGSourceAddress, CHUNK_SIZE_IN, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT, HAL_MAX_DELAY);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <JPEG_Decode_DMA+0x5c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <JPEG_Decode_DMA+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f002 f99f 	bl	800363a <HAL_JPEG_Decode>
  
  return 0;
 80012fc:	2300      	movs	r3, #0
  
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2400003c 	.word	0x2400003c
 800130c:	24000038 	.word	0x24000038
 8001310:	24000044 	.word	0x24000044
 8001314:	24000040 	.word	0x24000040
 8001318:	24000034 	.word	0x24000034

0800131c <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001348:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d218      	bcs.n	8001388 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 8001360:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001370:	d303      	bcc.n	800137a <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e008      	b.n	800138c <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e001      	b.n	800138c <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f002 fa30 	bl	80037fa <HAL_JPEG_ConfigInputBuffer>
  
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000044 	.word	0x24000044
 80013a8:	24000040 	.word	0x24000040
 80013ac:	2400003c 	.word	0x2400003c

080013b0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013c6:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f002 fa23 	bl	800381e <HAL_JPEG_ConfigOutputBuffer>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24000038 	.word	0x24000038

080013e4 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	24000034 	.word	0x24000034

08001404 <lcd_init>:




void lcd_init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8001408:	f000 f9a2 	bl	8001750 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 800140c:	f00e f81c 	bl	800f448 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8001410:	f7ff fceb 	bl	8000dea <GC9A01_init>

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <lcd_process>:


void lcd_process(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	//jpeg_demo();

	mjpeg_demo();
 800141c:	f000 f842 	bl	80014a4 <mjpeg_demo>

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e022      	b.n	800148e <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e016      	b.n	800147c <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d108      	bne.n	8001468 <lcd_draw+0x44>
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d104      	bne.n	8001468 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	6a38      	ldr	r0, [r7, #32]
 8001462:	f7ff fca2 	bl	8000daa <GC9A01_write>
 8001466:	e003      	b.n	8001470 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001468:	2102      	movs	r1, #2
 800146a:	6a38      	ldr	r0, [r7, #32]
 800146c:	f7ff fcad 	bl	8000dca <GC9A01_write_continue>

			}

			data += 2;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	3302      	adds	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	883a      	ldrh	r2, [r7, #0]
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbe2      	blt.n	800144e <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbd6      	blt.n	8001448 <lcd_draw+0x24>

		}

	}

}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <mjpeg_demo>:
uint32_t startTime = 0;

#ifdef MJPEG_ON

void mjpeg_demo(void)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	f5ad 2dd8 	sub.w	sp, sp, #442368	@ 0x6c000
 80014aa:	f2ad 6d24 	subw	sp, sp, #1572	@ 0x624
 80014ae:	af02      	add	r7, sp, #8

	uint8_t JPEG_OutputBuffer_0[MAX_BUFFER_SIZE]; 					// RAW buffer 0
	//uint8_t JPEG_OutputBuffer_1[MAX_BUFFER_SIZE]; 				// RAW buffer 1
	uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer

	uint32_t jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80014b0:	4b91      	ldr	r3, [pc, #580]	@ (80016f8 <mjpeg_demo+0x254>)
 80014b2:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 80014b6:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80014ba:	443b      	add	r3, r7
 80014bc:	4a8f      	ldr	r2, [pc, #572]	@ (80016fc <mjpeg_demo+0x258>)
 80014be:	443a      	add	r2, r7
 80014c0:	6013      	str	r3, [r2, #0]
	uint32_t FrameType = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001700 <mjpeg_demo+0x25c>)
 80014c6:	443a      	add	r2, r7
 80014c8:	6013      	str	r3, [r2, #0]

	// Open the MJPEG avi file with read access
    if(f_open(&file, FILE_NAME, FA_READ) == FR_OK)
 80014ca:	2201      	movs	r2, #1
 80014cc:	498d      	ldr	r1, [pc, #564]	@ (8001704 <mjpeg_demo+0x260>)
 80014ce:	488e      	ldr	r0, [pc, #568]	@ (8001708 <mjpeg_demo+0x264>)
 80014d0:	f00d f968 	bl	800e7a4 <f_open>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 8106 	bne.w	80016e8 <mjpeg_demo+0x244>
    {

    	isfirstFrame = 1; // First frame flag
 80014dc:	4b8b      	ldr	r3, [pc, #556]	@ (800170c <mjpeg_demo+0x268>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
    	FrameRate = 0;
 80014e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001710 <mjpeg_demo+0x26c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]

    	// Parse the AVI file Header
    	if(AVI_ParserInit(&AVI_Handel, &file, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 80014e8:	4a8a      	ldr	r2, [pc, #552]	@ (8001714 <mjpeg_demo+0x270>)
 80014ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001718 <mjpeg_demo+0x274>)
 80014ec:	4413      	add	r3, r2
 80014ee:	19da      	adds	r2, r3, r7
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	4b87      	ldr	r3, [pc, #540]	@ (8001714 <mjpeg_demo+0x270>)
 80014f6:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 80014fa:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80014fe:	443b      	add	r3, r7
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8001506:	4980      	ldr	r1, [pc, #512]	@ (8001708 <mjpeg_demo+0x264>)
 8001508:	4884      	ldr	r0, [pc, #528]	@ (800171c <mjpeg_demo+0x278>)
 800150a:	f7ff fb0f 	bl	8000b2c <AVI_ParserInit>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <mjpeg_demo+0x74>
    		while(1);
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <mjpeg_demo+0x70>

    	// Get current tick to track the frame time
    	startTime = HAL_GetTick();
 8001518:	f001 f840 	bl	800259c <HAL_GetTick>
 800151c:	4603      	mov	r3, r0
 800151e:	4a80      	ldr	r2, [pc, #512]	@ (8001720 <mjpeg_demo+0x27c>)
 8001520:	6013      	str	r3, [r2, #0]

    	do
    	{

    		FrameType = AVI_GetFrame(&AVI_Handel, &file);
 8001522:	4979      	ldr	r1, [pc, #484]	@ (8001708 <mjpeg_demo+0x264>)
 8001524:	487d      	ldr	r0, [pc, #500]	@ (800171c <mjpeg_demo+0x278>)
 8001526:	f7ff fb41 	bl	8000bac <AVI_GetFrame>
 800152a:	4b75      	ldr	r3, [pc, #468]	@ (8001700 <mjpeg_demo+0x25c>)
 800152c:	443b      	add	r3, r7
 800152e:	6018      	str	r0, [r3, #0]

    		if(FrameType == AVI_VIDEO_FRAME)
 8001530:	4b73      	ldr	r3, [pc, #460]	@ (8001700 <mjpeg_demo+0x25c>)
 8001532:	443b      	add	r3, r7
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	f040 809b 	bne.w	8001672 <mjpeg_demo+0x1ce>
    		{

    			AVI_Handel.CurrentImage ++;
 800153c:	4b77      	ldr	r3, [pc, #476]	@ (800171c <mjpeg_demo+0x278>)
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	3301      	adds	r3, #1
 8001542:	4a76      	ldr	r2, [pc, #472]	@ (800171c <mjpeg_demo+0x278>)
 8001544:	62d3      	str	r3, [r2, #44]	@ 0x2c

    			// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
    			JPEG_Decode_DMA(&hjpeg,(uint32_t) MJPEG_VideoBuffer ,AVI_Handel.FrameSize, jpegOutDataAdreess );
 8001546:	4973      	ldr	r1, [pc, #460]	@ (8001714 <mjpeg_demo+0x270>)
 8001548:	4b73      	ldr	r3, [pc, #460]	@ (8001718 <mjpeg_demo+0x274>)
 800154a:	440b      	add	r3, r1
 800154c:	19d9      	adds	r1, r3, r7
 800154e:	4b73      	ldr	r3, [pc, #460]	@ (800171c <mjpeg_demo+0x278>)
 8001550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001552:	4b6a      	ldr	r3, [pc, #424]	@ (80016fc <mjpeg_demo+0x258>)
 8001554:	443b      	add	r3, r7
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4872      	ldr	r0, [pc, #456]	@ (8001724 <mjpeg_demo+0x280>)
 800155a:	f7ff fea7 	bl	80012ac <JPEG_Decode_DMA>

    			// Wait till end of JPEG decoding
    			while(Jpeg_HWDecodingEnd == 0);
 800155e:	bf00      	nop
 8001560:	4b71      	ldr	r3, [pc, #452]	@ (8001728 <mjpeg_demo+0x284>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0fb      	beq.n	8001560 <mjpeg_demo+0xbc>

    			if(isfirstFrame == 1)
 8001568:	4b68      	ldr	r3, [pc, #416]	@ (800170c <mjpeg_demo+0x268>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d111      	bne.n	8001594 <mjpeg_demo+0xf0>
    			{

    				// First time

    				isfirstFrame = 0;
 8001570:	4b66      	ldr	r3, [pc, #408]	@ (800170c <mjpeg_demo+0x268>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]

    				// Get JPEG Info
    				HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8001576:	496d      	ldr	r1, [pc, #436]	@ (800172c <mjpeg_demo+0x288>)
 8001578:	486a      	ldr	r0, [pc, #424]	@ (8001724 <mjpeg_demo+0x280>)
 800157a:	f001 ffc9 	bl	8003510 <HAL_JPEG_GetInfo>

    				// Initialize the DMA2D
    				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800157e:	4b6b      	ldr	r3, [pc, #428]	@ (800172c <mjpeg_demo+0x288>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4a69      	ldr	r2, [pc, #420]	@ (800172c <mjpeg_demo+0x288>)
 8001586:	6892      	ldr	r2, [r2, #8]
 8001588:	b291      	uxth	r1, r2
 800158a:	4a68      	ldr	r2, [pc, #416]	@ (800172c <mjpeg_demo+0x288>)
 800158c:	6852      	ldr	r2, [r2, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f962 	bl	8001858 <DMA2D_Init>

    			}


    			// Copy the Decoded frame to the display frame buffer using the DMA2D
    			DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)DECODED_OutputBuffer, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001594:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <mjpeg_demo+0x258>)
 8001596:	443b      	add	r3, r7
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	4b64      	ldr	r3, [pc, #400]	@ (800172c <mjpeg_demo+0x288>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b62      	ldr	r3, [pc, #392]	@ (800172c <mjpeg_demo+0x288>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4962      	ldr	r1, [pc, #392]	@ (8001730 <mjpeg_demo+0x28c>)
 80015a8:	f501 21d8 	add.w	r1, r1, #442368	@ 0x6c000
 80015ac:	f501 61c3 	add.w	r1, r1, #1560	@ 0x618
 80015b0:	4439      	add	r1, r7
 80015b2:	f000 f9cd 	bl	8001950 <DMA2D_CopyBuffer>

    			// Change frame buffer
    			//jpegOutDataAdreess = (jpegOutDataAdreess == (uint32_t)JPEG_OutputBuffer_0) ? (uint32_t)JPEG_OutputBuffer_1 : (uint32_t)JPEG_OutputBuffer_0;
    			jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80015b6:	4b50      	ldr	r3, [pc, #320]	@ (80016f8 <mjpeg_demo+0x254>)
 80015b8:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 80015bc:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80015c0:	443b      	add	r3, r7
 80015c2:	4a4e      	ldr	r2, [pc, #312]	@ (80016fc <mjpeg_demo+0x258>)
 80015c4:	443a      	add	r2, r7
 80015c6:	6013      	str	r3, [r2, #0]

//
    		    uint16_t width = JPEG_Info.ImageWidth;
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <mjpeg_demo+0x288>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a59      	ldr	r2, [pc, #356]	@ (8001734 <mjpeg_demo+0x290>)
 80015ce:	443a      	add	r2, r7
 80015d0:	8013      	strh	r3, [r2, #0]
    			uint16_t height = JPEG_Info.ImageHeight;
 80015d2:	4b56      	ldr	r3, [pc, #344]	@ (800172c <mjpeg_demo+0x288>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <mjpeg_demo+0x294>)
 80015d8:	443a      	add	r2, r7
 80015da:	8013      	strh	r3, [r2, #0]

    		    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 80015dc:	4b55      	ldr	r3, [pc, #340]	@ (8001734 <mjpeg_demo+0x290>)
 80015de:	443b      	add	r3, r7
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da00      	bge.n	80015ec <mjpeg_demo+0x148>
 80015ea:	3301      	adds	r3, #1
 80015ec:	105b      	asrs	r3, r3, #1
 80015ee:	4a53      	ldr	r2, [pc, #332]	@ (800173c <mjpeg_demo+0x298>)
 80015f0:	443a      	add	r2, r7
 80015f2:	8013      	strh	r3, [r2, #0]
    		    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 80015f4:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <mjpeg_demo+0x294>)
 80015f6:	443b      	add	r3, r7
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da00      	bge.n	8001604 <mjpeg_demo+0x160>
 8001602:	3301      	adds	r3, #1
 8001604:	105b      	asrs	r3, r3, #1
 8001606:	4a4e      	ldr	r2, [pc, #312]	@ (8001740 <mjpeg_demo+0x29c>)
 8001608:	443a      	add	r2, r7
 800160a:	8013      	strh	r3, [r2, #0]

    		    doubleFormat pOut;
    		    pOut.u8Arr = DECODED_OutputBuffer;
 800160c:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 8001610:	f2a3 6214 	subw	r2, r3, #1556	@ 0x614
 8001614:	4b46      	ldr	r3, [pc, #280]	@ (8001730 <mjpeg_demo+0x28c>)
 8001616:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 800161a:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800161e:	443b      	add	r3, r7
 8001620:	6013      	str	r3, [r2, #0]

    		    depth24To16(&pOut, width*height, 3);
 8001622:	4b44      	ldr	r3, [pc, #272]	@ (8001734 <mjpeg_demo+0x290>)
 8001624:	443b      	add	r3, r7
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	4b43      	ldr	r3, [pc, #268]	@ (8001738 <mjpeg_demo+0x294>)
 800162a:	443b      	add	r3, r7
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	fb12 f303 	smulbb	r3, r2, r3
 8001632:	b299      	uxth	r1, r3
 8001634:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <mjpeg_demo+0x2a0>)
 8001636:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 800163a:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800163e:	443b      	add	r3, r7
 8001640:	2203      	movs	r2, #3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f89a 	bl	800177c <depth24To16>

    		    // Display the image
    		    lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 8001648:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800164c:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a39      	ldr	r2, [pc, #228]	@ (8001738 <mjpeg_demo+0x294>)
 8001654:	443a      	add	r2, r7
 8001656:	8814      	ldrh	r4, [r2, #0]
 8001658:	4a36      	ldr	r2, [pc, #216]	@ (8001734 <mjpeg_demo+0x290>)
 800165a:	443a      	add	r2, r7
 800165c:	8812      	ldrh	r2, [r2, #0]
 800165e:	4938      	ldr	r1, [pc, #224]	@ (8001740 <mjpeg_demo+0x29c>)
 8001660:	4439      	add	r1, r7
 8001662:	8809      	ldrh	r1, [r1, #0]
 8001664:	4835      	ldr	r0, [pc, #212]	@ (800173c <mjpeg_demo+0x298>)
 8001666:	4438      	add	r0, r7
 8001668:	8800      	ldrh	r0, [r0, #0]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4623      	mov	r3, r4
 800166e:	f7ff fed9 	bl	8001424 <lcd_draw>
    		}

#ifdef USE_FRAMERATE_REGULATION

              // Regulate the frame rate to the video native frame rate by inserting delays
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 8001672:	f000 ff93 	bl	800259c <HAL_GetTick>
 8001676:	4603      	mov	r3, r0
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <mjpeg_demo+0x27c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <mjpeg_demo+0x26c>)
 800168a:	701a      	strb	r2, [r3, #0]

              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 800168c:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <mjpeg_demo+0x26c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <mjpeg_demo+0x278>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2c      	ldr	r2, [pc, #176]	@ (8001748 <mjpeg_demo+0x2a4>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <mjpeg_demo+0x278>)
 80016a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4299      	cmp	r1, r3
 80016a8:	d20f      	bcs.n	80016ca <mjpeg_demo+0x226>
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <mjpeg_demo+0x278>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <mjpeg_demo+0x2a4>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	4a19      	ldr	r2, [pc, #100]	@ (800171c <mjpeg_demo+0x278>)
 80016b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <mjpeg_demo+0x26c>)
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 ff75 	bl	80025b4 <HAL_Delay>

#endif /* USE_FRAMERATE_REGULATION */

    	}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <mjpeg_demo+0x278>)
 80016cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <mjpeg_demo+0x278>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	f4ff af25 	bcc.w	8001522 <mjpeg_demo+0x7e>

    	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 80016d8:	2132      	movs	r1, #50	@ 0x32
 80016da:	481c      	ldr	r0, [pc, #112]	@ (800174c <mjpeg_demo+0x2a8>)
 80016dc:	f001 f939 	bl	8002952 <HAL_DMA2D_PollForTransfer>


      f_close(&file);
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <mjpeg_demo+0x264>)
 80016e2:	f00d fbd6 	bl	800ee92 <f_close>

      while(1);

    }

}
 80016e6:	e000      	b.n	80016ea <mjpeg_demo+0x246>
      while(1);
 80016e8:	e7fe      	b.n	80016e8 <mjpeg_demo+0x244>
}
 80016ea:	f507 27d8 	add.w	r7, r7, #442368	@ 0x6c000
 80016ee:	f207 671c 	addw	r7, r7, #1564	@ 0x61c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd90      	pop	{r4, r7, pc}
 80016f6:	bf00      	nop
 80016f8:	fffbdcf0 	.word	0xfffbdcf0
 80016fc:	0006c614 	.word	0x0006c614
 8001700:	0006c610 	.word	0x0006c610
 8001704:	0800f814 	.word	0x0800f814
 8001708:	24000278 	.word	0x24000278
 800170c:	24000008 	.word	0x24000008
 8001710:	2400056c 	.word	0x2400056c
 8001714:	fffe7ff0 	.word	0xfffe7ff0
 8001718:	0006c618 	.word	0x0006c618
 800171c:	24000524 	.word	0x24000524
 8001720:	24000570 	.word	0x24000570
 8001724:	240005dc 	.word	0x240005dc
 8001728:	24000034 	.word	0x24000034
 800172c:	24000510 	.word	0x24000510
 8001730:	fff939f0 	.word	0xfff939f0
 8001734:	0006c60e 	.word	0x0006c60e
 8001738:	0006c60c 	.word	0x0006c60c
 800173c:	0006c60a 	.word	0x0006c60a
 8001740:	0006c608 	.word	0x0006c608
 8001744:	fff939ec 	.word	0xfff939ec
 8001748:	10624dd3 	.word	0x10624dd3
 800174c:	240004a8 	.word	0x240004a8

08001750 <sd_init>:


// SD

static void sd_init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8001754:	2201      	movs	r2, #1
 8001756:	4905      	ldr	r1, [pc, #20]	@ (800176c <sd_init+0x1c>)
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <sd_init+0x20>)
 800175a:	f00c ffdd 	bl	800e718 <f_mount>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <sd_init+0x18>
    	sd_error_handler();
 8001764:	f000 f806 	bl	8001774 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	0800f820 	.word	0x0800f820
 8001770:	24000048 	.word	0x24000048

08001774 <sd_error_handler>:


static void sd_error_handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

	while(1);
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <sd_error_handler+0x4>

0800177c <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e054      	b.n	800183c <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	787a      	ldrb	r2, [r7, #1]
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	fb01 f202 	mul.w	r2, r1, r2
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	3302      	adds	r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 80017cc:	7a7b      	ldrb	r3, [r7, #9]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <depth24To16+0xd8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	7abb      	ldrb	r3, [r7, #10]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	b21b      	sxth	r3, r3
 80017de:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b219      	sxth	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	b28a      	uxth	r2, r1
 8001800:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	440b      	add	r3, r1
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b219      	sxth	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	b28a      	uxth	r2, r1
 8001834:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	dba6      	blt.n	8001792 <depth24To16+0x16>

	}

}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	fffff800 	.word	0xfffff800

08001858 <DMA2D_Init>:
  * @param  xSize: image width
  * @param  ysize: image Height
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	603a      	str	r2, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
 8001864:	460b      	mov	r3, r1
 8001866:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 8001868:	2302      	movs	r3, #2
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]


  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10d      	bne.n	8001892 <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 8001876:	2302      	movs	r3, #2
 8001878:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d025      	beq.n	80018d4 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f1c3 0310 	rsb	r3, r3, #16
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	e020      	b.n	80018d4 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d014      	beq.n	80018d4 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f1c3 0308 	rsb	r3, r3, #8
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	e00f      	b.n	80018d4 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d10c      	bne.n	80018d4 <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 80018ba:	2301      	movs	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f1c3 0310 	rsb	r3, r3, #16
 80018d2:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <DMA2D_Init+0xf0>)
 80018d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018da:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <DMA2D_Init+0xf0>)
 80018de:	2201      	movs	r2, #1
 80018e0:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <DMA2D_Init+0xf0>)
 80018ec:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <DMA2D_Init+0xf0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <DMA2D_Init+0xf0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <DMA2D_Init+0xf0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <DMA2D_Init+0xf0>)
 8001902:	2200      	movs	r2, #0
 8001904:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <DMA2D_Init+0xf0>)
 8001908:	22ff      	movs	r2, #255	@ 0xff
 800190a:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800190c:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <DMA2D_Init+0xf0>)
 800190e:	220b      	movs	r2, #11
 8001910:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001912:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <DMA2D_Init+0xf0>)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <DMA2D_Init+0xf0>)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <DMA2D_Init+0xf0>)
 8001920:	2200      	movs	r2, #0
 8001922:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <DMA2D_Init+0xf0>)
 8001926:	2200      	movs	r2, #0
 8001928:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 800192a:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <DMA2D_Init+0xf0>)
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <DMA2D_Init+0xf4>)
 800192e:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <DMA2D_Init+0xf0>)
 8001932:	f000 ff7f 	bl	8002834 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001936:	2101      	movs	r1, #1
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <DMA2D_Init+0xf0>)
 800193a:	f001 fa03 	bl	8002d44 <HAL_DMA2D_ConfigLayer>

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	240004a8 	.word	0x240004a8
 800194c:	52001000 	.word	0x52001000

08001950 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t xsize, uint16_t ysize)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	460b      	mov	r3, r1
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4613      	mov	r3, r2
 8001964:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]


  uint16_t x =  ( (LCD_WIDTH - xsize) / 2 );
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001970:	2b00      	cmp	r3, #0
 8001972:	da00      	bge.n	8001976 <DMA2D_CopyBuffer+0x26>
 8001974:	3301      	adds	r3, #1
 8001976:	105b      	asrs	r3, r3, #1
 8001978:	827b      	strh	r3, [r7, #18]
  uint16_t y = ( (LCD_HEIGHT - ysize) / 2 );
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001980:	2b00      	cmp	r3, #0
 8001982:	da00      	bge.n	8001986 <DMA2D_CopyBuffer+0x36>
 8001984:	3301      	adds	r3, #1
 8001986:	105b      	asrs	r3, r3, #1
 8001988:	823b      	strh	r3, [r7, #16]

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 800198a:	8a3a      	ldrh	r2, [r7, #16]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	461a      	mov	r2, r3
 8001996:	8a7b      	ldrh	r3, [r7, #18]
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 80019a4:	68f9      	ldr	r1, [r7, #12]
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <DMA2D_CopyBuffer+0x78>)
 80019b2:	f000 ffa3 	bl	80028fc <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80019b6:	2119      	movs	r1, #25
 80019b8:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <DMA2D_CopyBuffer+0x78>)
 80019ba:	f000 ffca 	bl	8002952 <HAL_DMA2D_PollForTransfer>

}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	240004a8 	.word	0x240004a8

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80019d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80019d8:	bf00      	nop
 80019da:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <main+0xb8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <main+0x24>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dcf4      	bgt.n	80019da <main+0xe>
  if ( timeout < 0 )
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da01      	bge.n	80019fa <main+0x2e>
  {
  Error_Handler();
 80019f6:	f000 fad3 	bl	8001fa0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fa:	f000 fd49 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fe:	f000 f843 	bl	8001a88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a02:	f000 f8c5 	bl	8001b90 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001a06:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <main+0xb8>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <main+0xb8>)
 8001a0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <main+0xb8>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f001 fcc3 	bl	80033b0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f001 fcd9 	bl	80033e4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a36:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001a38:	bf00      	nop
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <main+0xb8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <main+0x84>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1e5a      	subs	r2, r3, #1
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	dcf4      	bgt.n	8001a3a <main+0x6e>
if ( timeout < 0 )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da01      	bge.n	8001a5a <main+0x8e>
{
Error_Handler();
 8001a56:	f000 faa3 	bl	8001fa0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5a:	f000 f9db 	bl	8001e14 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001a5e:	f000 f8c7 	bl	8001bf0 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8001a62:	f000 f913 	bl	8001c8c <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 8001a66:	f000 f935 	bl	8001cd4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001a6a:	f000 f987 	bl	8001d7c <MX_USART1_UART_Init>
  MX_JPEG_Init();
 8001a6e:	f000 f8f9 	bl	8001c64 <MX_JPEG_Init>
  MX_FATFS_Init();
 8001a72:	f00a febd 	bl	800c7f0 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001a76:	f00b f90b 	bl	800cc90 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001a7a:	f7ff fcc3 	bl	8001404 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8001a7e:	f7ff fccb 	bl	8001418 <lcd_process>
 8001a82:	e7fc      	b.n	8001a7e <main+0xb2>
 8001a84:	58024400 	.word	0x58024400

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09c      	sub	sp, #112	@ 0x70
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a92:	224c      	movs	r2, #76	@ 0x4c
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00d fe70 	bl	800f77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00d fe6a 	bl	800f77c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001aa8:	2004      	movs	r0, #4
 8001aaa:	f003 f9b3 	bl	8004e14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b35      	ldr	r3, [pc, #212]	@ (8001b88 <SystemClock_Config+0x100>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	4a34      	ldr	r2, [pc, #208]	@ (8001b88 <SystemClock_Config+0x100>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001abe:	4b32      	ldr	r3, [pc, #200]	@ (8001b88 <SystemClock_Config+0x100>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <SystemClock_Config+0x104>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a2f      	ldr	r2, [pc, #188]	@ (8001b8c <SystemClock_Config+0x104>)
 8001ace:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <SystemClock_Config+0x104>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ae0:	bf00      	nop
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <SystemClock_Config+0x104>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aee:	d1f8      	bne.n	8001ae2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001af0:	230a      	movs	r3, #10
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af8:	2340      	movs	r3, #64	@ 0x40
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001afc:	2301      	movs	r3, #1
 8001afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b00:	2302      	movs	r3, #2
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 f9ca 	bl	8004ec8 <HAL_RCC_OscConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b3a:	f000 fa31 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3e:	233f      	movs	r3, #63	@ 0x3f
 8001b40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b42:	2303      	movs	r3, #3
 8001b44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b4e:	2340      	movs	r3, #64	@ 0x40
 8001b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b52:	2340      	movs	r3, #64	@ 0x40
 8001b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b5c:	2340      	movs	r3, #64	@ 0x40
 8001b5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2101      	movs	r1, #1
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fe09 	bl	800577c <HAL_RCC_ClockConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001b70:	f000 fa16 	bl	8001fa0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f003 ffb4 	bl	8005ae8 <HAL_RCC_MCOConfig>
}
 8001b80:	bf00      	nop
 8001b82:	3770      	adds	r7, #112	@ 0x70
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	58000400 	.word	0x58000400
 8001b8c:	58024800 	.word	0x58024800

08001b90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0b2      	sub	sp, #200	@ 0xc8
 8001b94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b96:	463b      	mov	r3, r7
 8001b98:	22c8      	movs	r2, #200	@ 0xc8
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00d fded 	bl	800f77c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bae:	2304      	movs	r3, #4
 8001bb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001bb2:	2309      	movs	r3, #9
 8001bb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bc2:	23c0      	movs	r3, #192	@ 0xc0
 8001bc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001bca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 f9c5 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001be4:	f000 f9dc 	bl	8001fa0 <Error_Handler>
  }
}
 8001be8:	bf00      	nop
 8001bea:	37c8      	adds	r7, #200	@ 0xc8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c60 <MX_DMA2D_Init+0x70>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c36:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c38:	f000 fdfc 	bl	8002834 <HAL_DMA2D_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c42:	f000 f9ad 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c46:	2101      	movs	r1, #1
 8001c48:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <MX_DMA2D_Init+0x6c>)
 8001c4a:	f001 f87b 	bl	8002d44 <HAL_DMA2D_ConfigLayer>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001c54:	f000 f9a4 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	24000574 	.word	0x24000574
 8001c60:	52001000 	.word	0x52001000

08001c64 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <MX_JPEG_Init+0x20>)
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <MX_JPEG_Init+0x24>)
 8001c6c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MX_JPEG_Init+0x20>)
 8001c70:	f001 fbcc 	bl	800340c <HAL_JPEG_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001c7a:	f000 f991 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	240005dc 	.word	0x240005dc
 8001c88:	52003000 	.word	0x52003000

08001c8c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001c92:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x44>)
 8001c94:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001ca4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ca8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_SDMMC1_SD_Init+0x40>)
 8001cb8:	f006 fe94 	bl	80089e4 <HAL_SD_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001cc2:	f000 f96d 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	24000634 	.word	0x24000634
 8001cd0:	52007000 	.word	0x52007000

08001cd4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001cd8:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001cda:	4a27      	ldr	r2, [pc, #156]	@ (8001d78 <MX_SPI5_Init+0xa4>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001ce0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001cee:	2207      	movs	r2, #7
 8001cf0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d00:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d12:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d18:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d30:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d60:	4804      	ldr	r0, [pc, #16]	@ (8001d74 <MX_SPI5_Init+0xa0>)
 8001d62:	f008 faa3 	bl	800a2ac <HAL_SPI_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001d6c:	f000 f918 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	240006b0 	.word	0x240006b0
 8001d78:	40015000 	.word	0x40015000

08001d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d80:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	@ (8001e10 <MX_USART1_UART_Init+0x94>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d86:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc4:	4811      	ldr	r0, [pc, #68]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dc6:	f008 fe6c 	bl	800aaa2 <HAL_UART_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dd0:	f000 f8e6 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dd8:	f009 fe75 	bl	800bac6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001de2:	f000 f8dd 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de6:	2100      	movs	r1, #0
 8001de8:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dea:	f009 feaa 	bl	800bb42 <HAL_UARTEx_SetRxFifoThreshold>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001df4:	f000 f8d4 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	@ (8001e0c <MX_USART1_UART_Init+0x90>)
 8001dfa:	f009 fe2b 	bl	800ba54 <HAL_UARTEx_DisableFifoMode>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e04:	f000 f8cc 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	24000738 	.word	0x24000738
 8001e10:	40011000 	.word	0x40011000

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	@ 0x30
 8001e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b58      	ldr	r3, [pc, #352]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e30:	4a56      	ldr	r2, [pc, #344]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3a:	4b54      	ldr	r3, [pc, #336]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e48:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b49      	ldr	r3, [pc, #292]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6c:	4a47      	ldr	r2, [pc, #284]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e76:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e84:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8a:	4a40      	ldr	r2, [pc, #256]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e94:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea8:	4a38      	ldr	r2, [pc, #224]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ec0:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec6:	4a31      	ldr	r2, [pc, #196]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ede:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee4:	4a29      	ldr	r2, [pc, #164]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eee:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <MX_GPIO_Init+0x178>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2102      	movs	r1, #2
 8001f00:	4823      	ldr	r0, [pc, #140]	@ (8001f90 <MX_GPIO_Init+0x17c>)
 8001f02:	f001 fa3b 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2161      	movs	r1, #97	@ 0x61
 8001f0a:	4822      	ldr	r0, [pc, #136]	@ (8001f94 <MX_GPIO_Init+0x180>)
 8001f0c:	f001 fa36 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	481c      	ldr	r0, [pc, #112]	@ (8001f98 <MX_GPIO_Init+0x184>)
 8001f26:	f001 f861 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4815      	ldr	r0, [pc, #84]	@ (8001f9c <MX_GPIO_Init+0x188>)
 8001f48:	f001 f850 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	480b      	ldr	r0, [pc, #44]	@ (8001f90 <MX_GPIO_Init+0x17c>)
 8001f64:	f001 f842 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001f68:	2361      	movs	r3, #97	@ 0x61
 8001f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_GPIO_Init+0x180>)
 8001f80:	f001 f834 	bl	8002fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	@ 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58022800 	.word	0x58022800
 8001f94:	58022400 	.word	0x58022400
 8001f98:	58022000 	.word	0x58022000
 8001f9c:	58020000 	.word	0x58020000

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <Error_Handler+0x8>

08001fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_MspInit+0x30>)
 8001fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fb8:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <HAL_MspInit+0x30>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_MspInit+0x30>)
 8001fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	58024400 	.word	0x58024400

08001fe0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <HAL_DMA2D_MspInit+0x48>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d116      	bne.n	8002020 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_DMA2D_MspInit+0x4c>)
 8001ff4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800202c <HAL_DMA2D_MspInit+0x4c>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_DMA2D_MspInit+0x4c>)
 8002004:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	205a      	movs	r0, #90	@ 0x5a
 8002016:	f000 fbd8 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800201a:	205a      	movs	r0, #90	@ 0x5a
 800201c:	f000 fbef 	bl	80027fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	52001000 	.word	0x52001000
 800202c:	58024400 	.word	0x58024400

08002030 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0e      	ldr	r2, [pc, #56]	@ (8002078 <HAL_JPEG_MspInit+0x48>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d116      	bne.n	8002070 <HAL_JPEG_MspInit+0x40>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_JPEG_MspInit+0x4c>)
 8002044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002048:	4a0c      	ldr	r2, [pc, #48]	@ (800207c <HAL_JPEG_MspInit+0x4c>)
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_JPEG_MspInit+0x4c>)
 8002054:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	2079      	movs	r0, #121	@ 0x79
 8002066:	f000 fbb0 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800206a:	2079      	movs	r0, #121	@ 0x79
 800206c:	f000 fbc7 	bl	80027fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	52003000 	.word	0x52003000
 800207c:	58024400 	.word	0x58024400

08002080 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0be      	sub	sp, #248	@ 0xf8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	22c8      	movs	r2, #200	@ 0xc8
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00d fb6b 	bl	800f77c <memset>
  if(hsd->Instance==SDMMC1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3c      	ldr	r2, [pc, #240]	@ (800219c <HAL_SD_MspInit+0x11c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d171      	bne.n	8002194 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80020bc:	2300      	movs	r3, #0
 80020be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 ff4f 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80020d0:	f7ff ff66 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020d4:	4b32      	ldr	r3, [pc, #200]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 80020d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020da:	4a31      	ldr	r2, [pc, #196]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020e4:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 80020e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b2b      	ldr	r3, [pc, #172]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002102:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002110:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002116:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_SD_MspInit+0x120>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 800212e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002148:	230c      	movs	r3, #12
 800214a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002152:	4619      	mov	r1, r3
 8002154:	4813      	ldr	r0, [pc, #76]	@ (80021a4 <HAL_SD_MspInit+0x124>)
 8002156:	f000 ff49 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800215a:	2304      	movs	r3, #4
 800215c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002172:	230c      	movs	r3, #12
 8002174:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800217c:	4619      	mov	r1, r3
 800217e:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <HAL_SD_MspInit+0x128>)
 8002180:	f000 ff34 	bl	8002fec <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2031      	movs	r0, #49	@ 0x31
 800218a:	f000 fb1e 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800218e:	2031      	movs	r0, #49	@ 0x31
 8002190:	f000 fb35 	bl	80027fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002194:	bf00      	nop
 8002196:	37f8      	adds	r7, #248	@ 0xf8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	52007000 	.word	0x52007000
 80021a0:	58024400 	.word	0x58024400
 80021a4:	58020800 	.word	0x58020800
 80021a8:	58020c00 	.word	0x58020c00

080021ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0be      	sub	sp, #248	@ 0xf8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	22c8      	movs	r2, #200	@ 0xc8
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00d fad5 	bl	800f77c <memset>
  if(hspi->Instance==SPI5)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a39      	ldr	r2, [pc, #228]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d16a      	bne.n	80022b2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80021dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 feb8 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80021fe:	f7ff fecf 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002202:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002208:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800220e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002212:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002220:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002226:	4a26      	ldr	r2, [pc, #152]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002244:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800225c:	2301      	movs	r3, #1
 800225e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002274:	2305      	movs	r3, #5
 8002276:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800227e:	4619      	mov	r1, r3
 8002280:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <HAL_SPI_MspInit+0x118>)
 8002282:	f000 feb3 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002286:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800228a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022a0:	2305      	movs	r3, #5
 80022a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022a6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80022ae:	f000 fe9d 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	37f8      	adds	r7, #248	@ 0xf8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40015000 	.word	0x40015000
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58022800 	.word	0x58022800
 80022c8:	58022400 	.word	0x58022400

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0bc      	sub	sp, #240	@ 0xf0
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	22c8      	movs	r2, #200	@ 0xc8
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f00d fa45 	bl	800f77c <memset>
  if(huart->Instance==USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a27      	ldr	r2, [pc, #156]	@ (8002394 <HAL_UART_MspInit+0xc8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d146      	bne.n	800238a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022fc:	f04f 0201 	mov.w	r2, #1
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fe28 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800231e:	f7ff fe3f 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_UART_MspInit+0xcc>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002328:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <HAL_UART_MspInit+0xcc>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <HAL_UART_MspInit+0xcc>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_UART_MspInit+0xcc>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002346:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <HAL_UART_MspInit+0xcc>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_UART_MspInit+0xcc>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800235e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	@ (800239c <HAL_UART_MspInit+0xd0>)
 8002386:	f000 fe31 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800238a:	bf00      	nop
 800238c:	37f0      	adds	r7, #240	@ 0xf0
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40011000 	.word	0x40011000
 8002398:	58024400 	.word	0x58024400
 800239c:	58020000 	.word	0x58020000

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <NMI_Handler+0x4>

080023a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <MemManage_Handler+0x4>

080023b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f6:	f000 f8bd 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <SDMMC1_IRQHandler+0x10>)
 8002406:	f006 fd5d 	bl	8008ec4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	24000634 	.word	0x24000634

08002414 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <DMA2D_IRQHandler+0x10>)
 800241a:	f000 fb83 	bl	8002b24 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	24000574 	.word	0x24000574

08002428 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <JPEG_IRQHandler+0x10>)
 800242e:	f001 fa12 	bl	8003856 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	240005dc 	.word	0x240005dc

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002440:	f7fe f8c2 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f00d f98f 	bl	800f78c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7ff faad 	bl	80019cc <main>
  bx  lr
 8002472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002478:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800247c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002480:	0800fba4 	.word	0x0800fba4
  ldr r2, =_sbss
 8002484:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8002488:	24004814 	.word	0x24004814

0800248c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC3_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
 8002498:	f000 f98c 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800249c:	f003 fb8e 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_Init+0x68>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4913      	ldr	r1, [pc, #76]	@ (80024fc <HAL_Init+0x6c>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_Init+0x68>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <HAL_Init+0x6c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <HAL_Init+0x70>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_Init+0x74>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f814 	bl	8002508 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e002      	b.n	80024f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ea:	f7ff fd5f 	bl	8001fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400
 80024fc:	0800f868 	.word	0x0800f868
 8002500:	24000004 	.word	0x24000004
 8002504:	24000000 	.word	0x24000000

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002510:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_InitTick+0x60>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e021      	b.n	8002560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <HAL_InitTick+0x64>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_InitTick+0x60>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f971 	bl	800281a <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f93b 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <HAL_InitTick+0x68>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	24000010 	.word	0x24000010
 800256c:	24000000 	.word	0x24000000
 8002570:	2400000c 	.word	0x2400000c

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	24000010 	.word	0x24000010
 8002598:	240007cc 	.word	0x240007cc

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	240007cc 	.word	0x240007cc

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000010 	.word	0x24000010

080025fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_GetREVID+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0c1b      	lsrs	r3, r3, #16
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	5c001000 	.word	0x5c001000

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	05fa0000 	.word	0x05fa0000

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff40 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff90 	bl	8002708 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5f 	bl	80026b4 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff33 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa4 	bl	8002770 <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e04f      	b.n	80028e6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fbc0 	bl	8001fe0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_DMA2D_Init+0xbc>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6851      	ldr	r1, [r2, #4]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	69d2      	ldr	r2, [r2, #28]
 800287a:	4311      	orrs	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	430b      	orrs	r3, r1
 8002882:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <HAL_DMA2D_Init+0xc0>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6891      	ldr	r1, [r2, #8]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6992      	ldr	r2, [r2, #24]
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a6:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_DMA2D_Init+0xc4>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68d1      	ldr	r1, [r2, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028bc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	051a      	lsls	r2, r3, #20
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	055b      	lsls	r3, r3, #21
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	fff8ffbf 	.word	0xfff8ffbf
 80028f4:	fffffef8 	.word	0xfffffef8
 80028f8:	ffff0000 	.word	0xffff0000

080028fc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_DMA2D_Start+0x1c>
 8002914:	2302      	movs	r3, #2
 8002916:	e018      	b.n	800294a <HAL_DMA2D_Start+0x4e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fab4 	bl	8002ea0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d056      	beq.n	8002a1c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800296e:	f7ff fe15 	bl	800259c <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002974:	e04b      	b.n	8002a0e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002984:	2b00      	cmp	r3, #0
 8002986:	d023      	beq.n	80029d0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2221      	movs	r2, #33	@ 0x21
 80029ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0a5      	b.n	8002b1c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d01a      	beq.n	8002a0e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029d8:	f7ff fde0 	bl	800259c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d302      	bcc.n	80029ee <HAL_DMA2D_PollForTransfer+0x9c>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e086      	b.n	8002b1c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ac      	beq.n	8002976 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d061      	beq.n	8002b02 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3e:	f7ff fdad 	bl	800259c <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a44:	e056      	b.n	8002af4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d02e      	beq.n	8002ab6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a7c:	f043 0202 	orr.w	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2229      	movs	r2, #41	@ 0x29
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e032      	b.n	8002b1c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d01a      	beq.n	8002af4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7ff fd6d 	bl	800259c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <HAL_DMA2D_PollForTransfer+0x182>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e013      	b.n	8002b1c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0a1      	beq.n	8002a46 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2212      	movs	r2, #18
 8002b08:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d026      	beq.n	8002b94 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d021      	beq.n	8002b94 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2204      	movs	r2, #4
 8002b78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d026      	beq.n	8002bec <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d021      	beq.n	8002bec <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d026      	beq.n	8002c44 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d021      	beq.n	8002c44 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2208      	movs	r2, #8
 8002c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2204      	movs	r2, #4
 8002c28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c66:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f853 	bl	8002d1c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d024      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01f      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c98:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01f      	beq.n	8002d14 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01a      	beq.n	8002d14 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f80e 	bl	8002d30 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_DMA2D_ConfigLayer+0x24>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e092      	b.n	8002e8e <HAL_DMA2D_ConfigLayer+0x14a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	3328      	adds	r3, #40	@ 0x28
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d9c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002da8:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <HAL_DMA2D_ConfigLayer+0x158>)
 8002daa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b0a      	cmp	r3, #10
 8002db2:	d003      	beq.n	8002dbc <HAL_DMA2D_ConfigLayer+0x78>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d107      	bne.n	8002dcc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e005      	b.n	8002dd8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d120      	bne.n	8002e20 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	ea02 0103 	and.w	r1, r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b0a      	cmp	r3, #10
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA2D_ConfigLayer+0xcc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d135      	bne.n	8002e7c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e1e:	e02d      	b.n	8002e7c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b0b      	cmp	r3, #11
 8002e26:	d109      	bne.n	8002e3c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	049b      	lsls	r3, r3, #18
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002e3a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	ea02 0103 	and.w	r1, r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b0a      	cmp	r3, #10
 8002e64:	d003      	beq.n	8002e6e <HAL_DMA2D_ConfigLayer+0x12a>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b09      	cmp	r3, #9
 8002e6c:	d106      	bne.n	8002e7c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e7a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	ff33000f 	.word	0xff33000f

08002ea0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b08b      	sub	sp, #44	@ 0x2c
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	041a      	lsls	r2, r3, #16
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ed8:	d174      	bne.n	8002fc4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ee0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002ee8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ef0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d108      	bne.n	8002f12 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f10:	e053      	b.n	8002fba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d106      	bne.n	8002f28 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f26:	e048      	b.n	8002fba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d111      	bne.n	8002f54 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	0cdb      	lsrs	r3, r3, #19
 8002f34:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	0a9b      	lsrs	r3, r3, #10
 8002f3a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	08db      	lsrs	r3, r3, #3
 8002f40:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	02db      	lsls	r3, r3, #11
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f52:	e032      	b.n	8002fba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d117      	bne.n	8002f8c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	0fdb      	lsrs	r3, r3, #31
 8002f60:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	0cdb      	lsrs	r3, r3, #19
 8002f66:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	0adb      	lsrs	r3, r3, #11
 8002f6c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	03db      	lsls	r3, r3, #15
 8002f82:	4313      	orrs	r3, r2
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	e016      	b.n	8002fba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	0f1b      	lsrs	r3, r3, #28
 8002f90:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	0d1b      	lsrs	r3, r3, #20
 8002f96:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	0b1b      	lsrs	r3, r3, #12
 8002f9c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	011a      	lsls	r2, r3, #4
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	431a      	orrs	r2, r3
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	031b      	lsls	r3, r3, #12
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002fc2:	e00d      	b.n	8002fe0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fcc:	d104      	bne.n	8002fd8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	615a      	str	r2, [r3, #20]
}
 8002fd6:	e003      	b.n	8002fe0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	372c      	adds	r7, #44	@ 0x2c
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ffa:	4b89      	ldr	r3, [pc, #548]	@ (8003220 <HAL_GPIO_Init+0x234>)
 8002ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ffe:	e194      	b.n	800332a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8186 	beq.w	8003324 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d005      	beq.n	8003030 <HAL_GPIO_Init+0x44>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d130      	bne.n	8003092 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003066:	2201      	movs	r2, #1
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0201 	and.w	r2, r3, #1
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b03      	cmp	r3, #3
 800309c:	d017      	beq.n	80030ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d123      	bne.n	8003122 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0203 	and.w	r2, r3, #3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80e0 	beq.w	8003324 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003164:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <HAL_GPIO_Init+0x238>)
 8003166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800316a:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <HAL_GPIO_Init+0x238>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_GPIO_Init+0x238>)
 8003176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003182:	4a29      	ldr	r2, [pc, #164]	@ (8003228 <HAL_GPIO_Init+0x23c>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a20      	ldr	r2, [pc, #128]	@ (800322c <HAL_GPIO_Init+0x240>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d052      	beq.n	8003254 <HAL_GPIO_Init+0x268>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003230 <HAL_GPIO_Init+0x244>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_GPIO_Init+0x22e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003234 <HAL_GPIO_Init+0x248>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02b      	beq.n	8003216 <HAL_GPIO_Init+0x22a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003238 <HAL_GPIO_Init+0x24c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d025      	beq.n	8003212 <HAL_GPIO_Init+0x226>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <HAL_GPIO_Init+0x250>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <HAL_GPIO_Init+0x222>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003240 <HAL_GPIO_Init+0x254>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x21e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003244 <HAL_GPIO_Init+0x258>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x21a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a19      	ldr	r2, [pc, #100]	@ (8003248 <HAL_GPIO_Init+0x25c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x216>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a18      	ldr	r2, [pc, #96]	@ (800324c <HAL_GPIO_Init+0x260>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x212>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <HAL_GPIO_Init+0x264>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x20e>
 80031f6:	2309      	movs	r3, #9
 80031f8:	e02d      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 80031fa:	230a      	movs	r3, #10
 80031fc:	e02b      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 80031fe:	2308      	movs	r3, #8
 8003200:	e029      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003202:	2307      	movs	r3, #7
 8003204:	e027      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003206:	2306      	movs	r3, #6
 8003208:	e025      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800320a:	2305      	movs	r3, #5
 800320c:	e023      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800320e:	2304      	movs	r3, #4
 8003210:	e021      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003212:	2303      	movs	r3, #3
 8003214:	e01f      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003216:	2302      	movs	r3, #2
 8003218:	e01d      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800321a:	2301      	movs	r3, #1
 800321c:	e01b      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800321e:	bf00      	nop
 8003220:	58000080 	.word	0x58000080
 8003224:	58024400 	.word	0x58024400
 8003228:	58000400 	.word	0x58000400
 800322c:	58020000 	.word	0x58020000
 8003230:	58020400 	.word	0x58020400
 8003234:	58020800 	.word	0x58020800
 8003238:	58020c00 	.word	0x58020c00
 800323c:	58021000 	.word	0x58021000
 8003240:	58021400 	.word	0x58021400
 8003244:	58021800 	.word	0x58021800
 8003248:	58021c00 	.word	0x58021c00
 800324c:	58022000 	.word	0x58022000
 8003250:	58022400 	.word	0x58022400
 8003254:	2300      	movs	r3, #0
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	f002 0203 	and.w	r2, r2, #3
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	4093      	lsls	r3, r2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003266:	4938      	ldr	r1, [pc, #224]	@ (8003348 <HAL_GPIO_Init+0x35c>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800329a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	3301      	adds	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f ae63 	bne.w	8003000 <HAL_GPIO_Init+0x14>
  }
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	3724      	adds	r7, #36	@ 0x24
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	58000400 	.word	0x58000400

0800334c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e001      	b.n	800336e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	4613      	mov	r3, r2
 800338a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003398:	e003      	b.n	80033a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	041a      	lsls	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	619a      	str	r2, [r3, #24]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033b8:	4a08      	ldr	r2, [pc, #32]	@ (80033dc <HAL_HSEM_FastTake+0x2c>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3320      	adds	r3, #32
 80033be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c2:	4a07      	ldr	r2, [pc, #28]	@ (80033e0 <HAL_HSEM_FastTake+0x30>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	58026400 	.word	0x58026400
 80033e0:	80000300 	.word	0x80000300

080033e4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80033ee:	4906      	ldr	r1, [pc, #24]	@ (8003408 <HAL_HSEM_Release+0x24>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	58026400 	.word	0x58026400

0800340c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e070      	b.n	8003500 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fdfc 	bl	8002030 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_JPEG_Init+0xfc>)
 80034a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a18      	ldr	r2, [pc, #96]	@ (800350c <HAL_JPEG_Init+0x100>)
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fd01 	bl	8003ec0 <JPEG_Set_HuffEnc_Mem>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e018      	b.n	8003500 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034dc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	0800fa58 	.word	0x0800fa58
 800350c:	0800fa98 	.word	0x0800fa98

08003510 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_JPEG_GetInfo+0x16>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e083      	b.n	8003632 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d103      	bne.n	8003540 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2210      	movs	r2, #16
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e017      	b.n	8003570 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e00c      	b.n	8003570 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b03      	cmp	r3, #3
 8003562:	d103      	bne.n	800356c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2230      	movs	r2, #48	@ 0x30
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e001      	b.n	8003570 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e060      	b.n	8003632 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b29a      	uxth	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	b29a      	uxth	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b10      	cmp	r3, #16
 8003592:	d003      	beq.n	800359c <HAL_JPEG_GetInfo+0x8c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b30      	cmp	r3, #48	@ 0x30
 800359a:	d140      	bne.n	800361e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d109      	bne.n	80035e0 <HAL_JPEG_GetInfo+0xd0>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_JPEG_GetInfo+0xd0>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2202      	movs	r2, #2
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	e01d      	b.n	800361c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_JPEG_GetInfo+0xea>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <HAL_JPEG_GetInfo+0xea>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2200      	movs	r2, #0
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e010      	b.n	800361c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d109      	bne.n	8003614 <HAL_JPEG_GetInfo+0x104>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_JPEG_GetInfo+0x104>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e003      	b.n	800361c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800361a:	e003      	b.n	8003624 <HAL_JPEG_GetInfo+0x114>
 800361c:	e002      	b.n	8003624 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f001 fb6f 	bl	8004d08 <JPEG_GetQuality>
 800362a:	4602      	mov	r2, r0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_JPEG_Decode+0x20>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_JPEG_Decode+0x20>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e071      	b.n	8003742 <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_JPEG_Decode+0x32>
 8003668:	2302      	movs	r3, #2
 800366a:	e06a      	b.n	8003742 <HAL_JPEG_Decode+0x108>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8003674:	f7fe ff92 	bl	800259c <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d158      	bne.n	8003738 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2204      	movs	r2, #4
 800368a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003692:	f023 020f 	bic.w	r2, r3, #15
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	f043 0206 	orr.w	r2, r3, #6
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f023 0203 	bic.w	r2, r3, #3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fe76 	bl	80043c4 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80036d8:	e01e      	b.n	8003718 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d01a      	beq.n	8003718 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036e2:	f7fe ff5b 	bl	800259c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <HAL_JPEG_Decode+0xbe>
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10f      	bne.n	8003718 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fc:	f043 0208 	orr.w	r2, r3, #8
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e014      	b.n	8003742 <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fec7 	bl	80044ac <JPEG_Process>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0da      	beq.n	80036da <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e004      	b.n	8003742 <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d116      	bne.n	8003792 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003772:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d033      	beq.n	80037ec <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003788:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003790:	e02c      	b.n	80037ec <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d126      	bne.n	80037ec <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f043 0306 	orr.w	r3, r3, #6
 80037ba:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80037d8:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43da      	mvns	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3b03      	subs	r3, #3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d813      	bhi.n	8003894 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d103      	bne.n	8003880 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fe17 	bl	80044ac <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800387e:	e00b      	b.n	8003898 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b0c      	cmp	r3, #12
 800388a:	d105      	bne.n	8003898 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f001 f8bc 	bl	8004a0a <JPEG_DMA_ContinueProcess>
      break;
 8003892:	e001      	b.n	8003898 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_JPEG_IRQHandler+0x44>
      break;
 8003898:	bf00      	nop
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b08b      	sub	sp, #44	@ 0x2c
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e020      	b.n	80038fc <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	4413      	add	r3, r2
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ce:	d90f      	bls.n	80038f0 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e055      	b.n	8003980 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	440b      	add	r3, r1
 80038de:	3201      	adds	r2, #1
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
      p++;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	3301      	adds	r3, #1
 80038e8:	623b      	str	r3, [r7, #32]
      i--;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	3b01      	subs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ee      	bne.n	80038d4 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d9db      	bls.n	80038ba <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	4413      	add	r3, r2
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]
  p = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8003920:	e027      	b.n	8003972 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	601a      	str	r2, [r3, #0]
      p++;
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	3301      	adds	r3, #1
 8003932:	623b      	str	r3, [r7, #32]
      code++;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	3301      	adds	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	4413      	add	r3, r2
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4293      	cmp	r3, r2
 8003948:	d0eb      	beq.n	8003922 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b1f      	cmp	r3, #31
 800394e:	d901      	bls.n	8003954 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e015      	b.n	8003980 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8003954:	2201      	movs	r2, #1
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d301      	bcc.n	8003966 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e00c      	b.n	8003980 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	61bb      	str	r3, [r7, #24]
    si++;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1dd      	bne.n	800393a <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	372c      	adds	r7, #44	@ 0x2c
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003992:	af00      	add	r7, sp, #0
 8003994:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003998:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800399c:	6018      	str	r0, [r3, #0]
 800399e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039a2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80039a6:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80039a8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039ac:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	f107 020c 	add.w	r2, r7, #12
 80039ba:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80039be:	f7ff ff70 	bl	80038a2 <JPEG_Bits_To_SizeCodes>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80039c8:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80039d0:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80039d4:	e075      	b.n	8003ac2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80039dc:	e067      	b.n	8003aae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80039de:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039e2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80039ec:	4413      	add	r3, r2
 80039ee:	3310      	adds	r3, #16
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80039f6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80039fe:	23a0      	movs	r3, #160	@ 0xa0
 8003a00:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a04:	e021      	b.n	8003a4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8003a06:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a0c:	d103      	bne.n	8003a16 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8003a0e:	23a1      	movs	r3, #161	@ 0xa1
 8003a10:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a14:	e019      	b.n	8003a4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8003a16:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8003a24:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8003a30:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a42:	4413      	add	r3, r2
 8003a44:	3b01      	subs	r3, #1
 8003a46:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8003a4a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a4e:	2ba1      	cmp	r3, #161	@ 0xa1
 8003a50:	d901      	bls.n	8003a56 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003a52:	2301      	movs	r3, #1
 8003a54:	e035      	b.n	8003ac2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003a56:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a5a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003a5e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003a62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a66:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a6a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a74:	3328      	adds	r3, #40	@ 0x28
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003a7c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a80:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003a84:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003a88:	4413      	add	r3, r2
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b2d9      	uxtb	r1, r3
 8003a90:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a94:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a9e:	4413      	add	r3, r2
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	701a      	strb	r2, [r3, #0]
      k++;
 8003aa4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8003aae:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003ab2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d38e      	bcc.n	80039de <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003ad8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003adc:	6018      	str	r0, [r3, #0]
 8003ade:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003ae2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003ae6:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003ae8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003aec:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003af6:	f107 0208 	add.w	r2, r7, #8
 8003afa:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8003afe:	f7ff fed0 	bl	80038a2 <JPEG_Bits_To_SizeCodes>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8003b08:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003b10:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b14:	e048      	b.n	8003ba8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8003b1c:	e03d      	b.n	8003b9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8003b1e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b22:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3310      	adds	r3, #16
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8003b36:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b3a:	2b0b      	cmp	r3, #11
 8003b3c:	d901      	bls.n	8003b42 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e032      	b.n	8003ba8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003b42:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b46:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8003b4a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003b4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b52:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b56:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b60:	3302      	adds	r3, #2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003b68:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b6c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003b70:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b74:	4413      	add	r3, r2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b2d9      	uxtb	r1, r3
 8003b7c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b80:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b8a:	4413      	add	r3, r2
 8003b8c:	460a      	mov	r2, r1
 8003b8e:	701a      	strb	r2, [r3, #0]
      k++;
 8003b90:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b94:	3301      	adds	r3, #1
 8003b96:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8003b9a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003b9e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3bb      	bcc.n	8003b1e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b09a      	sub	sp, #104	@ 0x68
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003bd4:	3318      	adds	r3, #24
 8003bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bd8:	e00f      	b.n	8003bfa <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d106      	bne.n	8003bf6 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf4:	e001      	b.n	8003bfa <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e059      	b.n	8003cae <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d055      	beq.n	8003cac <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4619      	mov	r1, r3
 8003c06:	68b8      	ldr	r0, [r7, #8]
 8003c08:	f7ff ff60 	bl	8003acc <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003c12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8003c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c1e:	e046      	b.n	8003cae <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8003c20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c22:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c26:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c2a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003c2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c2e:	3304      	adds	r3, #4
 8003c30:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c34:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c38:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8003c3e:	e032      	b.n	8003ca6 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8003c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c42:	3b01      	subs	r3, #1
 8003c44:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8003c46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c48:	3b04      	subs	r3, #4
 8003c4a:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003c4c:	f107 0214 	add.w	r2, r7, #20
 8003c50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c52:	4413      	add	r3, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5e:	3302      	adds	r3, #2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	3368      	adds	r3, #104	@ 0x68
 8003c64:	443b      	add	r3, r7
 8003c66:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c72:	3b01      	subs	r3, #1
 8003c74:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003c76:	f107 0214 	add.w	r2, r7, #20
 8003c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c7c:	4413      	add	r3, r2
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c88:	3302      	adds	r3, #2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3368      	adds	r3, #104	@ 0x68
 8003c8e:	443b      	add	r3, r7
 8003c90:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9c:	041a      	lsls	r2, r3, #16
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d8c9      	bhi.n	8003c40 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3768      	adds	r7, #104	@ 0x68
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cc4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003cc8:	6018      	str	r0, [r3, #0]
 8003cca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cce:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003cd2:	6019      	str	r1, [r3, #0]
 8003cd4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cd8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003cdc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003cde:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ce2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cee:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003cf2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10c      	bne.n	8003d16 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003cfc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d00:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d0c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d10:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d14:	e01d      	b.n	8003d52 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003d16:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d1a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d26:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003d2a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d10c      	bne.n	8003d4e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003d34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d38:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d44:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d48:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d4c:	e001      	b.n	8003d52 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0a8      	b.n	8003ea4 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8003d52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d56:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a0 	beq.w	8003ea2 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003d62:	f107 0214 	add.w	r2, r7, #20
 8003d66:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d6a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d6e:	4611      	mov	r1, r2
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f7ff fe0b 	bl	800398c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003d7c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003d84:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003d88:	e08c      	b.n	8003ea4 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003d8a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003d8e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003d98:	e00e      	b.n	8003db8 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8003d9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003d9e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003da2:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003da4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003da8:	3304      	adds	r3, #4
 8003daa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003dae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003db2:	3301      	adds	r3, #1
 8003db4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003db8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d9ec      	bls.n	8003d9a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003dc0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb0 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003dc6:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003dc8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dcc:	3304      	adds	r3, #4
 8003dce:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003dd2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dd6:	4a37      	ldr	r2, [pc, #220]	@ (8003eb4 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003dd8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003dda:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dde:	3304      	adds	r3, #4
 8003de0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003de4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003de8:	4a33      	ldr	r2, [pc, #204]	@ (8003eb8 <JPEG_Set_HuffAC_Mem+0x200>)
 8003dea:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003dec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003df0:	3304      	adds	r3, #4
 8003df2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003df6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dfa:	4a30      	ldr	r2, [pc, #192]	@ (8003ebc <JPEG_Set_HuffAC_Mem+0x204>)
 8003dfc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003dfe:	23a2      	movs	r3, #162	@ 0xa2
 8003e00:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003e04:	e049      	b.n	8003e9a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003e06:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003e10:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e14:	3b04      	subs	r3, #4
 8003e16:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e1a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e1e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e22:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e30:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e34:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003e38:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e3c:	3328      	adds	r3, #40	@ 0x28
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8003e4c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e5a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e5e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e6c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e70:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003e74:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e78:	3328      	adds	r3, #40	@ 0x28
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003e88:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e98:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003e9a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d8b1      	bhi.n	8003e06 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	0fd10fd0 	.word	0x0fd10fd0
 8003eb4:	0fd30fd2 	.word	0x0fd30fd2
 8003eb8:	0fd50fd4 	.word	0x0fd50fd4
 8003ebc:	0fd70fd6 	.word	0x0fd70fd6

08003ec0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f84d 	bl	8003f68 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	491f      	ldr	r1, [pc, #124]	@ (8003f58 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff feec 	bl	8003cb8 <JPEG_Set_HuffAC_Mem>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	e030      	b.n	8003f50 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4918      	ldr	r1, [pc, #96]	@ (8003f5c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fedc 	bl	8003cb8 <JPEG_Set_HuffAC_Mem>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	e020      	b.n	8003f50 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003f16:	461a      	mov	r2, r3
 8003f18:	4911      	ldr	r1, [pc, #68]	@ (8003f60 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe49 	bl	8003bb2 <JPEG_Set_HuffDC_Mem>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	e010      	b.n	8003f50 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003f36:	461a      	mov	r2, r3
 8003f38:	490a      	ldr	r1, [pc, #40]	@ (8003f64 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fe39 	bl	8003bb2 <JPEG_Set_HuffDC_Mem>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	e000      	b.n	8003f50 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	0800f8b0 	.word	0x0800f8b0
 8003f5c:	0800f964 	.word	0x0800f964
 8003f60:	0800f878 	.word	0x0800f878
 8003f64:	0800f894 	.word	0x0800f894

08003f68 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b08b      	sub	sp, #44	@ 0x2c
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003f70:	4b80      	ldr	r3, [pc, #512]	@ (8004174 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003f72:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003f74:	4b80      	ldr	r3, [pc, #512]	@ (8004178 <JPEG_Set_Huff_DHTMem+0x210>)
 8003f76:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003f78:	4b80      	ldr	r3, [pc, #512]	@ (800417c <JPEG_Set_Huff_DHTMem+0x214>)
 8003f7a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003f7c:	4b80      	ldr	r3, [pc, #512]	@ (8004180 <JPEG_Set_Huff_DHTMem+0x218>)
 8003f7e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f88:	330c      	adds	r3, #12
 8003f8a:	623b      	str	r3, [r7, #32]
  index = 16;
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f90:	e01d      	b.n	8003fce <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	3b01      	subs	r3, #1
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
 8003f9a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	3b02      	subs	r3, #2
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fa6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	3b03      	subs	r3, #3
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fb2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb6:	3a04      	subs	r2, #4
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fbc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	601a      	str	r2, [r3, #0]
    address--;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	3b04      	subs	r3, #4
 8003fc6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	3b04      	subs	r3, #4
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d8de      	bhi.n	8003f92 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003fdc:	3318      	adds	r3, #24
 8003fde:	623b      	str	r3, [r7, #32]
  index = 12;
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fe4:	e021      	b.n	800402a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	7c1b      	ldrb	r3, [r3, #16]
 8003ff0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	3b02      	subs	r3, #2
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	440b      	add	r3, r1
 8003ffa:	7c1b      	ldrb	r3, [r3, #16]
 8003ffc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003ffe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	3b03      	subs	r3, #3
 8004004:	6979      	ldr	r1, [r7, #20]
 8004006:	440b      	add	r3, r1
 8004008:	7c1b      	ldrb	r3, [r3, #16]
 800400a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800400c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800400e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004010:	3a04      	subs	r2, #4
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	440a      	add	r2, r1
 8004016:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004018:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	601a      	str	r2, [r3, #0]
    address--;
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	3b04      	subs	r3, #4
 8004022:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	3b04      	subs	r3, #4
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	2b03      	cmp	r3, #3
 800402e:	d8da      	bhi.n	8003fe6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004038:	3328      	adds	r3, #40	@ 0x28
 800403a:	623b      	str	r3, [r7, #32]
  index = 16;
 800403c:	2310      	movs	r3, #16
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004040:	e01d      	b.n	800407e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	3b01      	subs	r3, #1
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	3b02      	subs	r3, #2
 8004050:	69f9      	ldr	r1, [r7, #28]
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004056:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	3b03      	subs	r3, #3
 800405c:	69f9      	ldr	r1, [r7, #28]
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004062:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004066:	3a04      	subs	r2, #4
 8004068:	69f9      	ldr	r1, [r7, #28]
 800406a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800406c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	601a      	str	r2, [r3, #0]
    address--;
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	3b04      	subs	r3, #4
 8004076:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	3b04      	subs	r3, #4
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	2b03      	cmp	r3, #3
 8004082:	d8de      	bhi.n	8004042 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800408c:	33cc      	adds	r3, #204	@ 0xcc
 800408e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80040a0:	021a      	lsls	r2, r3, #8
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  *address = value;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	3b04      	subs	r3, #4
 80040ba:	623b      	str	r3, [r7, #32]
  index = 160;
 80040bc:	23a0      	movs	r3, #160	@ 0xa0
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040c0:	e021      	b.n	8004106 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	3b01      	subs	r3, #1
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	7c1b      	ldrb	r3, [r3, #16]
 80040cc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	3b02      	subs	r3, #2
 80040d2:	69f9      	ldr	r1, [r7, #28]
 80040d4:	440b      	add	r3, r1
 80040d6:	7c1b      	ldrb	r3, [r3, #16]
 80040d8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040da:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	3b03      	subs	r3, #3
 80040e0:	69f9      	ldr	r1, [r7, #28]
 80040e2:	440b      	add	r3, r1
 80040e4:	7c1b      	ldrb	r3, [r3, #16]
 80040e6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80040e8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	3a04      	subs	r2, #4
 80040ee:	69f9      	ldr	r1, [r7, #28]
 80040f0:	440a      	add	r2, r1
 80040f2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80040f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	601a      	str	r2, [r3, #0]
    address--;
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	3b04      	subs	r3, #4
 80040fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	3b04      	subs	r3, #4
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	2b03      	cmp	r3, #3
 800410a:	d8da      	bhi.n	80040c2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004114:	33cc      	adds	r3, #204	@ 0xcc
 8004116:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	061a      	lsls	r2, r3, #24
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	431a      	orrs	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	041b      	lsls	r3, r3, #16
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004142:	33dc      	adds	r3, #220	@ 0xdc
 8004144:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <JPEG_Set_Huff_DHTMem+0x21c>)
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	7bdb      	ldrb	r3, [r3, #15]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	7b92      	ldrb	r2, [r2, #14]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	3b04      	subs	r3, #4
 800416c:	623b      	str	r3, [r7, #32]
  index = 12;
 800416e:	230c      	movs	r3, #12
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004172:	e027      	b.n	80041c4 <JPEG_Set_Huff_DHTMem+0x25c>
 8004174:	0800f8b0 	.word	0x0800f8b0
 8004178:	0800f964 	.word	0x0800f964
 800417c:	0800f878 	.word	0x0800f878
 8004180:	0800f894 	.word	0x0800f894
 8004184:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	3301      	adds	r3, #1
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004192:	6939      	ldr	r1, [r7, #16]
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	440b      	add	r3, r1
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800419c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	3b01      	subs	r3, #1
 80041a2:	6939      	ldr	r1, [r7, #16]
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80041a8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80041aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ac:	3a02      	subs	r2, #2
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041b2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	601a      	str	r2, [r3, #0]
    address--;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	3b04      	subs	r3, #4
 80041bc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	3b04      	subs	r3, #4
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d8de      	bhi.n	8004188 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041d2:	33dc      	adds	r3, #220	@ 0xdc
 80041d4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	7c5b      	ldrb	r3, [r3, #17]
 80041e2:	061a      	lsls	r2, r3, #24
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	7c1b      	ldrb	r3, [r3, #16]
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004200:	33e8      	adds	r3, #232	@ 0xe8
 8004202:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b6d      	ldr	r3, [pc, #436]	@ (80043c0 <JPEG_Set_Huff_DHTMem+0x458>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	7edb      	ldrb	r3, [r3, #27]
 8004212:	021a      	lsls	r2, r3, #8
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	7e92      	ldrb	r2, [r2, #26]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	3b04      	subs	r3, #4
 800422a:	623b      	str	r3, [r7, #32]
  index = 8;
 800422c:	2308      	movs	r3, #8
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004230:	e021      	b.n	8004276 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	3301      	adds	r3, #1
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4413      	add	r3, r2
 800423a:	7c1b      	ldrb	r3, [r3, #16]
 800423c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	440b      	add	r3, r1
 8004244:	3310      	adds	r3, #16
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800424a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	3b01      	subs	r3, #1
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	440b      	add	r3, r1
 8004254:	7c1b      	ldrb	r3, [r3, #16]
 8004256:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004258:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800425a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425c:	3a02      	subs	r2, #2
 800425e:	6939      	ldr	r1, [r7, #16]
 8004260:	440a      	add	r2, r1
 8004262:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004264:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	601a      	str	r2, [r3, #0]
    address--;
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	3b04      	subs	r3, #4
 800426e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	3b04      	subs	r3, #4
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	2b03      	cmp	r3, #3
 800427a:	d8da      	bhi.n	8004232 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004284:	33e8      	adds	r3, #232	@ 0xe8
 8004286:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	061a      	lsls	r2, r3, #24
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	431a      	orrs	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80042b2:	33f8      	adds	r3, #248	@ 0xf8
 80042b4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <JPEG_Set_Huff_DHTMem+0x458>)
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	7bdb      	ldrb	r3, [r3, #15]
 80042c4:	021a      	lsls	r2, r3, #8
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	7b92      	ldrb	r2, [r2, #14]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	3b04      	subs	r3, #4
 80042dc:	623b      	str	r3, [r7, #32]
  index = 12;
 80042de:	230c      	movs	r3, #12
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80042e2:	e01d      	b.n	8004320 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	3301      	adds	r3, #1
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	440b      	add	r3, r1
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80042f8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	3b01      	subs	r3, #1
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	5ccb      	ldrb	r3, [r1, r3]
 8004302:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004304:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	3a02      	subs	r2, #2
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800430e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	601a      	str	r2, [r3, #0]
    address--;
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	3b04      	subs	r3, #4
 8004318:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	3b04      	subs	r3, #4
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	2b03      	cmp	r3, #3
 8004324:	d8de      	bhi.n	80042e4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800432e:	33f8      	adds	r3, #248	@ 0xf8
 8004330:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	7c5b      	ldrb	r3, [r3, #17]
 800433e:	061a      	lsls	r2, r3, #24
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	431a      	orrs	r2, r3
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	7c1b      	ldrb	r3, [r3, #16]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800435c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8004360:	623b      	str	r3, [r7, #32]
  index = 160;
 8004362:	23a0      	movs	r3, #160	@ 0xa0
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004366:	e021      	b.n	80043ac <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	3301      	adds	r3, #1
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4413      	add	r3, r2
 8004370:	7c1b      	ldrb	r3, [r3, #16]
 8004372:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	440b      	add	r3, r1
 800437a:	3310      	adds	r3, #16
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004380:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	3b01      	subs	r3, #1
 8004386:	69b9      	ldr	r1, [r7, #24]
 8004388:	440b      	add	r3, r1
 800438a:	7c1b      	ldrb	r3, [r3, #16]
 800438c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800438e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004392:	3a02      	subs	r2, #2
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	440a      	add	r2, r1
 8004398:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800439a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	601a      	str	r2, [r3, #0]
    address--;
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	3b04      	subs	r3, #4
 80043a4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	3b04      	subs	r3, #4
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d8da      	bhi.n	8004368 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	372c      	adds	r7, #44	@ 0x2c
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	ffff0000 	.word	0xffff0000

080043c4 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d108      	bne.n	80043f6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0208 	orr.w	r2, r2, #8
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	e007      	b.n	8004406 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0208 	bic.w	r2, r2, #8
 8004404:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004434:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004444:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004454:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d108      	bne.n	8004484 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8004480:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8004482:	e00d      	b.n	80044a0 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d107      	bne.n	80044a0 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d125      	bne.n	800450c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01e      	beq.n	800450c <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff f81b 	bl	8003510 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fc ff18 	bl	800131c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004526:	2108      	movs	r1, #8
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f988 	bl	800483e <JPEG_ReadInputData>
 800452e:	e00a      	b.n	8004546 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800453e:	2101      	movs	r1, #1
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f97c 	bl	800483e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004560:	2108      	movs	r1, #8
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f864 	bl	8004630 <JPEG_StoreOutputData>
 8004568:	e00a      	b.n	8004580 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8004578:	2101      	movs	r1, #1
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f858 	bl	8004630 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800458a:	2b20      	cmp	r3, #32
 800458c:	d14b      	bne.n	8004626 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d107      	bne.n	80045ba <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80045c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69d9      	ldr	r1, [r3, #28]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	461a      	mov	r2, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fc fee7 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d103      	bne.n	800461c <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc fee5 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
 800461a:	e002      	b.n	8004622 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff f910 	bl	8003842 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	429a      	cmp	r2, r3
 800464a:	d34b      	bcc.n	80046e4 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e031      	b.n	80046b6 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004658:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	4413      	add	r3, r2
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	0a19      	lsrs	r1, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	3301      	adds	r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	b2ca      	uxtb	r2, r1
 800467c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	0c19      	lsrs	r1, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	3302      	adds	r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	b2ca      	uxtb	r2, r1
 8004690:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	0e19      	lsrs	r1, r3, #24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	3303      	adds	r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	b2ca      	uxtb	r2, r1
 80046a4:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3301      	adds	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3c9      	bcc.n	8004652 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f040 80b5 	bne.w	8004836 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	461a      	mov	r2, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fe6a 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80046e2:	e0a8      	b.n	8004836 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f240 80a2 	bls.w	8004836 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e031      	b.n	800476a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	4413      	add	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0a19      	lsrs	r1, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	3301      	adds	r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	b2ca      	uxtb	r2, r1
 8004730:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	0c19      	lsrs	r1, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	3302      	adds	r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	b2ca      	uxtb	r2, r1
 8004744:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	0e19      	lsrs	r1, r3, #24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	3303      	adds	r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	b2ca      	uxtb	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3301      	adds	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	429a      	cmp	r2, r3
 8004770:	d3c9      	bcc.n	8004706 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	429a      	cmp	r2, r3
 800477c:	d10b      	bne.n	8004796 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69d9      	ldr	r1, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	461a      	mov	r2, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fe11 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004794:	e04f      	b.n	8004836 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a8:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e015      	b.n	80047dc <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	fa22 f103 	lsr.w	r1, r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	4413      	add	r3, r2
 80047c8:	b2ca      	uxtb	r2, r1
 80047ca:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3301      	adds	r3, #1
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d3e5      	bcc.n	80047b0 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	461a      	mov	r2, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fdde 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f1c3 0304 	rsb	r3, r3, #4
 8004800:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e013      	b.n	8004830 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	fa22 f103 	lsr.w	r1, r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	4413      	add	r3, r2
 800481c:	b2ca      	uxtb	r2, r1
 800481e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d9e8      	bls.n	8004808 <JPEG_StoreOutputData+0x1d8>
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <JPEG_ReadInputData+0x1c>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800485a:	2101      	movs	r1, #1
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fe ff74 	bl	800374a <HAL_JPEG_Pause>
 8004862:	e028      	b.n	80048b6 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	429a      	cmp	r2, r3
 800486e:	d906      	bls.n	800487e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e01b      	b.n	80048b6 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	429a      	cmp	r2, r3
 8004888:	d115      	bne.n	80048b6 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc fd4f 	bl	8001334 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	2b04      	cmp	r3, #4
 800489c:	d905      	bls.n	80048aa <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 809f 	bne.w	8004a02 <JPEG_ReadInputData+0x1c4>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 809b 	beq.w	8004a02 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d335      	bcc.n	8004946 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e02d      	b.n	800493c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004900:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6999      	ldr	r1, [r3, #24]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3302      	adds	r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004912:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3303      	adds	r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004928:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800492a:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3301      	adds	r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d3cd      	bcc.n	80048e0 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8004944:	e05d      	b.n	8004a02 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d035      	beq.n	80049b8 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	e02d      	b.n	80049ae <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004972:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3302      	adds	r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004984:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3303      	adds	r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800499a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d3cd      	bcc.n	8004952 <JPEG_ReadInputData+0x114>
}
 80049b6:	e024      	b.n	8004a02 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e017      	b.n	80049f2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4413      	add	r3, r2
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	3301      	adds	r3, #1
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3e3      	bcc.n	80049c2 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004a02:	bf00      	nop
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d125      	bne.n	8004a6a <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01e      	beq.n	8004a6a <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fe fd6c 	bl	8003510 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fc fc69 	bl	800131c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d039      	beq.n	8004aec <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004ab2:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d104      	bne.n	8004acc <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f97c 	bl	8004dc4 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d105      	bne.n	8004ae6 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f970 	bl	8004dc4 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8004ae4:	e002      	b.n	8004aec <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f804 	bl	8004af4 <JPEG_DMA_EndProcess>
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d10a      	bne.n	8004b34 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69d9      	ldr	r1, [r3, #28]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	461a      	mov	r2, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fc fc41 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d134      	bne.n	8004bac <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69d9      	ldr	r1, [r3, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	461a      	mov	r2, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fc fc2b 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b74:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d103      	bne.n	8004ba4 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc fc21 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8004ba2:	e00c      	b.n	8004bbe <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fe fe4c 	bl	8003842 <HAL_JPEG_EncodeCpltCallback>
}
 8004baa:	e008      	b.n	8004bbe <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f804 	bl	8004bc6 <JPEG_DMA_PollResidualData>
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004bce:	2310      	movs	r3, #16
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e04f      	b.n	8004c74 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d146      	bne.n	8004c6e <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d03f      	beq.n	8004c6e <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	4413      	add	r3, r2
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0a19      	lsrs	r1, r3, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	3301      	adds	r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	b2ca      	uxtb	r2, r1
 8004c18:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	0c19      	lsrs	r1, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	3302      	adds	r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	b2ca      	uxtb	r2, r1
 8004c2c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0e19      	lsrs	r1, r3, #24
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	3303      	adds	r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	b2ca      	uxtb	r2, r1
 8004c40:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d10a      	bne.n	8004c6e <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	461a      	mov	r2, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fba4 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1ac      	bne.n	8004bd4 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <JPEG_DMA_PollResidualData+0xd2>
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d133      	bne.n	8004d00 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69d9      	ldr	r1, [r3, #28]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc fb78 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d103      	bne.n	8004cfa <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc fb76 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8004cf8:	e002      	b.n	8004d00 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fe fda1 	bl	8003842 <HAL_JPEG_EncodeCpltCallback>
}
 8004d00:	bf00      	nop
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08b      	sub	sp, #44	@ 0x2c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3350      	adds	r3, #80	@ 0x50
 8004d1a:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d20:	e042      	b.n	8004da8 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e033      	b.n	8004d96 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d103      	bne.n	8004d4a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	3364      	adds	r3, #100	@ 0x64
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d48:	e022      	b.n	8004d90 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2264      	movs	r2, #100	@ 0x64
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d56:	6a38      	ldr	r0, [r7, #32]
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	4401      	add	r1, r0
 8004d5c:	4818      	ldr	r0, [pc, #96]	@ (8004dc0 <JPEG_GetQuality+0xb8>)
 8004d5e:	5c41      	ldrb	r1, [r0, r1]
 8004d60:	440a      	add	r2, r1
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d807      	bhi.n	8004d80 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7a:	4413      	add	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7e:	e007      	b.n	8004d90 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8c:	4413      	add	r3, r2
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d9c8      	bls.n	8004d2e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3304      	adds	r3, #4
 8004da6:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b3c      	cmp	r3, #60	@ 0x3c
 8004dac:	d9b9      	bls.n	8004d22 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	099b      	lsrs	r3, r3, #6
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	372c      	adds	r7, #44	@ 0x2c
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	0800fa18 	.word	0x0800fa18

08004dc4 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e017      	b.n	8004e06 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d004      	beq.n	8004dec <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2280      	movs	r2, #128	@ 0x80
 8004de6:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e00c      	b.n	8004e06 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2204      	movs	r2, #4
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	2b06      	cmp	r3, #6
 8004e26:	d00a      	beq.n	8004e3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e28:	4b26      	ldr	r3, [pc, #152]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e040      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e03e      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004e46:	491f      	ldr	r1, [pc, #124]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e4e:	f7fd fba5 	bl	800259c <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e54:	e009      	b.n	8004e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e56:	f7fd fba1 	bl	800259c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e64:	d901      	bls.n	8004e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e028      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e76:	d1ee      	bne.n	8004e56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b1e      	cmp	r3, #30
 8004e7c:	d008      	beq.n	8004e90 <HAL_PWREx_ConfigSupply+0x7c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e82:	d005      	beq.n	8004e90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b1d      	cmp	r3, #29
 8004e88:	d002      	beq.n	8004e90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004e8e:	d114      	bne.n	8004eba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e90:	f7fd fb84 	bl	800259c <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e96:	e009      	b.n	8004eac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e98:	f7fd fb80 	bl	800259c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ea6:	d901      	bls.n	8004eac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e007      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb8:	d1ee      	bne.n	8004e98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	58024800 	.word	0x58024800

08004ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08c      	sub	sp, #48	@ 0x30
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d102      	bne.n	8004edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f000 bc48 	b.w	800576c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8088 	beq.w	8004ffa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eea:	4b99      	ldr	r3, [pc, #612]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ef4:	4b96      	ldr	r3, [pc, #600]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d007      	beq.n	8004f10 <HAL_RCC_OscConfig+0x48>
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	2b18      	cmp	r3, #24
 8004f04:	d111      	bne.n	8004f2a <HAL_RCC_OscConfig+0x62>
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d10c      	bne.n	8004f2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	4b8f      	ldr	r3, [pc, #572]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d06d      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x130>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d169      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f000 bc21 	b.w	800576c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x7a>
 8004f34:	4b86      	ldr	r3, [pc, #536]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a85      	ldr	r2, [pc, #532]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	e02e      	b.n	8004fa0 <HAL_RCC_OscConfig+0xd8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x9c>
 8004f4a:	4b81      	ldr	r3, [pc, #516]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a80      	ldr	r2, [pc, #512]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4b7e      	ldr	r3, [pc, #504]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a7d      	ldr	r2, [pc, #500]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCC_OscConfig+0xd8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	4b78      	ldr	r3, [pc, #480]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a77      	ldr	r2, [pc, #476]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b75      	ldr	r3, [pc, #468]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a74      	ldr	r2, [pc, #464]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0xd8>
 8004f88:	4b71      	ldr	r3, [pc, #452]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a70      	ldr	r2, [pc, #448]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b6e      	ldr	r3, [pc, #440]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6d      	ldr	r2, [pc, #436]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd faf8 	bl	800259c <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fd faf4 	bl	800259c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e3d4      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fc2:	4b63      	ldr	r3, [pc, #396]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xe8>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fae4 	bl	800259c <HAL_GetTick>
 8004fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7fd fae0 	bl	800259c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	@ 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e3c0      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fea:	4b59      	ldr	r3, [pc, #356]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x110>
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80ca 	beq.w	800519c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005008:	4b51      	ldr	r3, [pc, #324]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005010:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005012:	4b4f      	ldr	r3, [pc, #316]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_RCC_OscConfig+0x166>
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2b18      	cmp	r3, #24
 8005022:	d156      	bne.n	80050d2 <HAL_RCC_OscConfig+0x20a>
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d151      	bne.n	80050d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800502e:	4b48      	ldr	r3, [pc, #288]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_RCC_OscConfig+0x17e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e392      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005046:	4b42      	ldr	r3, [pc, #264]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 0219 	bic.w	r2, r3, #25
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	493f      	ldr	r1, [pc, #252]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fd faa0 	bl	800259c <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005060:	f7fd fa9c 	bl	800259c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e37c      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005072:	4b37      	ldr	r3, [pc, #220]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	f7fd fabd 	bl	80025fc <HAL_GetREVID>
 8005082:	4603      	mov	r3, r0
 8005084:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005088:	4293      	cmp	r3, r2
 800508a:	d817      	bhi.n	80050bc <HAL_RCC_OscConfig+0x1f4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	d108      	bne.n	80050a6 <HAL_RCC_OscConfig+0x1de>
 8005094:	4b2e      	ldr	r3, [pc, #184]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800509c:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 800509e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050a4:	e07a      	b.n	800519c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	031b      	lsls	r3, r3, #12
 80050b4:	4926      	ldr	r1, [pc, #152]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ba:	e06f      	b.n	800519c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050bc:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	061b      	lsls	r3, r3, #24
 80050ca:	4921      	ldr	r1, [pc, #132]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050d0:	e064      	b.n	800519c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d047      	beq.n	800516a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050da:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 0219 	bic.w	r2, r3, #25
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	491a      	ldr	r1, [pc, #104]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd fa56 	bl	800259c <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fd fa52 	bl	800259c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e332      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005106:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005112:	f7fd fa73 	bl	80025fc <HAL_GetREVID>
 8005116:	4603      	mov	r3, r0
 8005118:	f241 0203 	movw	r2, #4099	@ 0x1003
 800511c:	4293      	cmp	r3, r2
 800511e:	d819      	bhi.n	8005154 <HAL_RCC_OscConfig+0x28c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b40      	cmp	r3, #64	@ 0x40
 8005126:	d108      	bne.n	800513a <HAL_RCC_OscConfig+0x272>
 8005128:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005130:	4a07      	ldr	r2, [pc, #28]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 8005132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005136:	6053      	str	r3, [r2, #4]
 8005138:	e030      	b.n	800519c <HAL_RCC_OscConfig+0x2d4>
 800513a:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	4901      	ldr	r1, [pc, #4]	@ (8005150 <HAL_RCC_OscConfig+0x288>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]
 800514e:	e025      	b.n	800519c <HAL_RCC_OscConfig+0x2d4>
 8005150:	58024400 	.word	0x58024400
 8005154:	4b9a      	ldr	r3, [pc, #616]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	4997      	ldr	r1, [pc, #604]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	604b      	str	r3, [r1, #4]
 8005168:	e018      	b.n	800519c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516a:	4b95      	ldr	r3, [pc, #596]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a94      	ldr	r2, [pc, #592]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd fa11 	bl	800259c <HAL_GetTick>
 800517a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd fa0d 	bl	800259c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e2ed      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005190:	4b8b      	ldr	r3, [pc, #556]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f0      	bne.n	800517e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80a9 	beq.w	80052fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051aa:	4b85      	ldr	r3, [pc, #532]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051b4:	4b82      	ldr	r3, [pc, #520]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80051b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d007      	beq.n	80051d0 <HAL_RCC_OscConfig+0x308>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b18      	cmp	r3, #24
 80051c4:	d13a      	bne.n	800523c <HAL_RCC_OscConfig+0x374>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d135      	bne.n	800523c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051d0:	4b7b      	ldr	r3, [pc, #492]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_OscConfig+0x320>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b80      	cmp	r3, #128	@ 0x80
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e2c1      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051e8:	f7fd fa08 	bl	80025fc <HAL_GetREVID>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d817      	bhi.n	8005226 <HAL_RCC_OscConfig+0x35e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d108      	bne.n	8005210 <HAL_RCC_OscConfig+0x348>
 80051fe:	4b70      	ldr	r3, [pc, #448]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005206:	4a6e      	ldr	r2, [pc, #440]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800520c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800520e:	e075      	b.n	80052fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005210:	4b6b      	ldr	r3, [pc, #428]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	069b      	lsls	r3, r3, #26
 800521e:	4968      	ldr	r1, [pc, #416]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005224:	e06a      	b.n	80052fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005226:	4b66      	ldr	r3, [pc, #408]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	4962      	ldr	r1, [pc, #392]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005236:	4313      	orrs	r3, r2
 8005238:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800523a:	e05f      	b.n	80052fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d042      	beq.n	80052ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005244:	4b5e      	ldr	r3, [pc, #376]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a5d      	ldr	r2, [pc, #372]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800524a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd f9a4 	bl	800259c <HAL_GetTick>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005258:	f7fd f9a0 	bl	800259c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e280      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800526a:	4b55      	ldr	r3, [pc, #340]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005276:	f7fd f9c1 	bl	80025fc <HAL_GetREVID>
 800527a:	4603      	mov	r3, r0
 800527c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005280:	4293      	cmp	r3, r2
 8005282:	d817      	bhi.n	80052b4 <HAL_RCC_OscConfig+0x3ec>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	2b20      	cmp	r3, #32
 800528a:	d108      	bne.n	800529e <HAL_RCC_OscConfig+0x3d6>
 800528c:	4b4c      	ldr	r3, [pc, #304]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005294:	4a4a      	ldr	r2, [pc, #296]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005296:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800529a:	6053      	str	r3, [r2, #4]
 800529c:	e02e      	b.n	80052fc <HAL_RCC_OscConfig+0x434>
 800529e:	4b48      	ldr	r3, [pc, #288]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	069b      	lsls	r3, r3, #26
 80052ac:	4944      	ldr	r1, [pc, #272]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]
 80052b2:	e023      	b.n	80052fc <HAL_RCC_OscConfig+0x434>
 80052b4:	4b42      	ldr	r3, [pc, #264]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	493f      	ldr	r1, [pc, #252]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60cb      	str	r3, [r1, #12]
 80052c8:	e018      	b.n	80052fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052ca:	4b3d      	ldr	r3, [pc, #244]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fd f961 	bl	800259c <HAL_GetTick>
 80052da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052de:	f7fd f95d 	bl	800259c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e23d      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052f0:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f0      	bne.n	80052de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d036      	beq.n	8005376 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d019      	beq.n	8005344 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005310:	4b2b      	ldr	r3, [pc, #172]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005314:	4a2a      	ldr	r2, [pc, #168]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fd f93e 	bl	800259c <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005324:	f7fd f93a 	bl	800259c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e21a      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005336:	4b22      	ldr	r3, [pc, #136]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x45c>
 8005342:	e018      	b.n	8005376 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005344:	4b1e      	ldr	r3, [pc, #120]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005348:	4a1d      	ldr	r2, [pc, #116]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fd f924 	bl	800259c <HAL_GetTick>
 8005354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005358:	f7fd f920 	bl	800259c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e200      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800536a:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800536c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d039      	beq.n	80053f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0c      	ldr	r2, [pc, #48]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 8005390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005394:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005396:	f7fd f901 	bl	800259c <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800539e:	f7fd f8fd 	bl	800259c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e1dd      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053b0:	4b03      	ldr	r3, [pc, #12]	@ (80053c0 <HAL_RCC_OscConfig+0x4f8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x4d6>
 80053bc:	e01b      	b.n	80053f6 <HAL_RCC_OscConfig+0x52e>
 80053be:	bf00      	nop
 80053c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053c4:	4b9b      	ldr	r3, [pc, #620]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a9a      	ldr	r2, [pc, #616]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053d0:	f7fd f8e4 	bl	800259c <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d8:	f7fd f8e0 	bl	800259c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1c0      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053ea:	4b92      	ldr	r3, [pc, #584]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8081 	beq.w	8005506 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005404:	4b8c      	ldr	r3, [pc, #560]	@ (8005638 <HAL_RCC_OscConfig+0x770>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a8b      	ldr	r2, [pc, #556]	@ (8005638 <HAL_RCC_OscConfig+0x770>)
 800540a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800540e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005410:	f7fd f8c4 	bl	800259c <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005418:	f7fd f8c0 	bl	800259c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	@ 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e1a0      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542a:	4b83      	ldr	r3, [pc, #524]	@ (8005638 <HAL_RCC_OscConfig+0x770>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d106      	bne.n	800544c <HAL_RCC_OscConfig+0x584>
 800543e:	4b7d      	ldr	r3, [pc, #500]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	4a7c      	ldr	r2, [pc, #496]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	@ 0x70
 800544a:	e02d      	b.n	80054a8 <HAL_RCC_OscConfig+0x5e0>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10c      	bne.n	800546e <HAL_RCC_OscConfig+0x5a6>
 8005454:	4b77      	ldr	r3, [pc, #476]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005458:	4a76      	ldr	r2, [pc, #472]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005460:	4b74      	ldr	r3, [pc, #464]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a73      	ldr	r2, [pc, #460]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005466:	f023 0304 	bic.w	r3, r3, #4
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	e01c      	b.n	80054a8 <HAL_RCC_OscConfig+0x5e0>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b05      	cmp	r3, #5
 8005474:	d10c      	bne.n	8005490 <HAL_RCC_OscConfig+0x5c8>
 8005476:	4b6f      	ldr	r3, [pc, #444]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547a:	4a6e      	ldr	r2, [pc, #440]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	6713      	str	r3, [r2, #112]	@ 0x70
 8005482:	4b6c      	ldr	r3, [pc, #432]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a6b      	ldr	r2, [pc, #428]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	e00b      	b.n	80054a8 <HAL_RCC_OscConfig+0x5e0>
 8005490:	4b68      	ldr	r3, [pc, #416]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4a67      	ldr	r2, [pc, #412]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6713      	str	r3, [r2, #112]	@ 0x70
 800549c:	4b65      	ldr	r3, [pc, #404]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	4a64      	ldr	r2, [pc, #400]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80054a2:	f023 0304 	bic.w	r3, r3, #4
 80054a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fd f874 	bl	800259c <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fd f870 	bl	800259c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e14e      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ce:	4b59      	ldr	r3, [pc, #356]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ee      	beq.n	80054b8 <HAL_RCC_OscConfig+0x5f0>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fd f85e 	bl	800259c <HAL_GetTick>
 80054e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fd f85a 	bl	800259c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e138      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ee      	bne.n	80054e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 812d 	beq.w	800576a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005510:	4b48      	ldr	r3, [pc, #288]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005518:	2b18      	cmp	r3, #24
 800551a:	f000 80bd 	beq.w	8005698 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	2b02      	cmp	r3, #2
 8005524:	f040 809e 	bne.w	8005664 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005528:	4b42      	ldr	r3, [pc, #264]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a41      	ldr	r2, [pc, #260]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800552e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fd f832 	bl	800259c <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553c:	f7fd f82e 	bl	800259c <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e10e      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800554e:	4b39      	ldr	r3, [pc, #228]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800555a:	4b36      	ldr	r3, [pc, #216]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800555c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800555e:	4b37      	ldr	r3, [pc, #220]	@ (800563c <HAL_RCC_OscConfig+0x774>)
 8005560:	4013      	ands	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800556a:	0112      	lsls	r2, r2, #4
 800556c:	430a      	orrs	r2, r1
 800556e:	4931      	ldr	r1, [pc, #196]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	628b      	str	r3, [r1, #40]	@ 0x28
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	3b01      	subs	r3, #1
 800557a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005582:	3b01      	subs	r3, #1
 8005584:	025b      	lsls	r3, r3, #9
 8005586:	b29b      	uxth	r3, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	3b01      	subs	r3, #1
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	3b01      	subs	r3, #1
 800559e:	061b      	lsls	r3, r3, #24
 80055a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055a4:	4923      	ldr	r1, [pc, #140]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055aa:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ba:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <HAL_RCC_OscConfig+0x778>)
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055c2:	00d2      	lsls	r2, r2, #3
 80055c4:	491b      	ldr	r1, [pc, #108]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ce:	f023 020c 	bic.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	4917      	ldr	r1, [pc, #92]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055dc:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	f023 0202 	bic.w	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e8:	4912      	ldr	r1, [pc, #72]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ee:	4b11      	ldr	r3, [pc, #68]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f2:	4a10      	ldr	r2, [pc, #64]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005606:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800560c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005612:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	4a07      	ldr	r2, [pc, #28]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800561e:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a04      	ldr	r2, [pc, #16]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 8005624:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fc ffb7 	bl	800259c <HAL_GetTick>
 800562e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005630:	e011      	b.n	8005656 <HAL_RCC_OscConfig+0x78e>
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
 8005638:	58024800 	.word	0x58024800
 800563c:	fffffc0c 	.word	0xfffffc0c
 8005640:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005644:	f7fc ffaa 	bl	800259c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e08a      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005656:	4b47      	ldr	r3, [pc, #284]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0x77c>
 8005662:	e082      	b.n	800576a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005664:	4b43      	ldr	r3, [pc, #268]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a42      	ldr	r2, [pc, #264]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 800566a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800566e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fc ff94 	bl	800259c <HAL_GetTick>
 8005674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005678:	f7fc ff90 	bl	800259c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e070      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800568a:	4b3a      	ldr	r3, [pc, #232]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x7b0>
 8005696:	e068      	b.n	800576a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005698:	4b36      	ldr	r3, [pc, #216]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800569e:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d031      	beq.n	8005710 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f003 0203 	and.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d12a      	bne.n	8005710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d122      	bne.n	8005710 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d11a      	bne.n	8005710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	0a5b      	lsrs	r3, r3, #9
 80056de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d111      	bne.n	8005710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d108      	bne.n	8005710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	0e1b      	lsrs	r3, r3, #24
 8005702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e02b      	b.n	800576c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005714:	4b17      	ldr	r3, [pc, #92]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 8005716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800571e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d01f      	beq.n	800576a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800572a:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	4a11      	ldr	r2, [pc, #68]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005736:	f7fc ff31 	bl	800259c <HAL_GetTick>
 800573a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800573c:	bf00      	nop
 800573e:	f7fc ff2d 	bl	800259c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	4293      	cmp	r3, r2
 8005748:	d0f9      	beq.n	800573e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800574a:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 800574c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800574e:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <HAL_RCC_OscConfig+0x8b0>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005756:	00d2      	lsls	r2, r2, #3
 8005758:	4906      	ldr	r1, [pc, #24]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 800575a:	4313      	orrs	r3, r2
 800575c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800575e:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <HAL_RCC_OscConfig+0x8ac>)
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3730      	adds	r7, #48	@ 0x30
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	58024400 	.word	0x58024400
 8005778:	ffff0007 	.word	0xffff0007

0800577c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e19c      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005790:	4b8a      	ldr	r3, [pc, #552]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d910      	bls.n	80057c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b87      	ldr	r3, [pc, #540]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 020f 	bic.w	r2, r3, #15
 80057a6:	4985      	ldr	r1, [pc, #532]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b83      	ldr	r3, [pc, #524]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e184      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	4b7b      	ldr	r3, [pc, #492]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057d8:	429a      	cmp	r2, r3
 80057da:	d908      	bls.n	80057ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057dc:	4b78      	ldr	r3, [pc, #480]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	4975      	ldr	r1, [pc, #468]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	4b70      	ldr	r3, [pc, #448]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005806:	429a      	cmp	r2, r3
 8005808:	d908      	bls.n	800581c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800580a:	4b6d      	ldr	r3, [pc, #436]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	496a      	ldr	r1, [pc, #424]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005818:	4313      	orrs	r3, r2
 800581a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	4b64      	ldr	r3, [pc, #400]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005834:	429a      	cmp	r2, r3
 8005836:	d908      	bls.n	800584a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005838:	4b61      	ldr	r3, [pc, #388]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	495e      	ldr	r1, [pc, #376]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005846:	4313      	orrs	r3, r2
 8005848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	4b59      	ldr	r3, [pc, #356]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005862:	429a      	cmp	r2, r3
 8005864:	d908      	bls.n	8005878 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005866:	4b56      	ldr	r3, [pc, #344]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4953      	ldr	r1, [pc, #332]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005874:	4313      	orrs	r3, r2
 8005876:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	4b4d      	ldr	r3, [pc, #308]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	429a      	cmp	r2, r3
 8005892:	d908      	bls.n	80058a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005894:	4b4a      	ldr	r3, [pc, #296]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f023 020f 	bic.w	r2, r3, #15
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4947      	ldr	r1, [pc, #284]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d055      	beq.n	800595e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058b2:	4b43      	ldr	r3, [pc, #268]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4940      	ldr	r1, [pc, #256]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058cc:	4b3c      	ldr	r3, [pc, #240]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d121      	bne.n	800591c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0f6      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e4:	4b36      	ldr	r3, [pc, #216]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d115      	bne.n	800591c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0ea      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058fc:	4b30      	ldr	r3, [pc, #192]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0de      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800590c:	4b2c      	ldr	r3, [pc, #176]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0d6      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f023 0207 	bic.w	r2, r3, #7
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4925      	ldr	r1, [pc, #148]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800592a:	4313      	orrs	r3, r2
 800592c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592e:	f7fc fe35 	bl	800259c <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005934:	e00a      	b.n	800594c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005936:	f7fc fe31 	bl	800259c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e0be      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594c:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	429a      	cmp	r2, r3
 800595c:	d1eb      	bne.n	8005936 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	429a      	cmp	r2, r3
 8005978:	d208      	bcs.n	800598c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597a:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f023 020f 	bic.w	r2, r3, #15
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	490e      	ldr	r1, [pc, #56]	@ (80059c0 <HAL_RCC_ClockConfig+0x244>)
 8005988:	4313      	orrs	r3, r2
 800598a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800598c:	4b0b      	ldr	r3, [pc, #44]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d214      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599a:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 020f 	bic.w	r2, r3, #15
 80059a2:	4906      	ldr	r1, [pc, #24]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059aa:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <HAL_RCC_ClockConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e086      	b.n	8005aca <HAL_RCC_ClockConfig+0x34e>
 80059bc:	52002000 	.word	0x52002000
 80059c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059dc:	429a      	cmp	r2, r3
 80059de:	d208      	bcs.n	80059f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059e0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	4939      	ldr	r1, [pc, #228]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	4b34      	ldr	r3, [pc, #208]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d208      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	492e      	ldr	r1, [pc, #184]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	4b28      	ldr	r3, [pc, #160]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d208      	bcs.n	8005a4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a3c:	4b25      	ldr	r3, [pc, #148]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	4922      	ldr	r1, [pc, #136]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d208      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	4917      	ldr	r1, [pc, #92]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a7c:	f000 f89e 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4b14      	ldr	r3, [pc, #80]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	4912      	ldr	r1, [pc, #72]	@ (8005ad8 <HAL_RCC_ClockConfig+0x35c>)
 8005a8e:	5ccb      	ldrb	r3, [r1, r3]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad4 <HAL_RCC_ClockConfig+0x358>)
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad8 <HAL_RCC_ClockConfig+0x35c>)
 8005aa4:	5cd3      	ldrb	r3, [r2, r3]
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <HAL_RCC_ClockConfig+0x360>)
 8005ab2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <HAL_RCC_ClockConfig+0x364>)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005aba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <HAL_RCC_ClockConfig+0x368>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fc fd22 	bl	8002508 <HAL_InitTick>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	0800f868 	.word	0x0800f868
 8005adc:	24000004 	.word	0x24000004
 8005ae0:	24000000 	.word	0x24000000
 8005ae4:	2400000c 	.word	0x2400000c

08005ae8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08c      	sub	sp, #48	@ 0x30
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d12a      	bne.n	8005b50 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005afa:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b00:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b0a:	4b29      	ldr	r3, [pc, #164]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b22:	2303      	movs	r3, #3
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b2e:	f107 031c 	add.w	r3, r7, #28
 8005b32:	4619      	mov	r1, r3
 8005b34:	481f      	ldr	r0, [pc, #124]	@ (8005bb4 <HAL_RCC_MCOConfig+0xcc>)
 8005b36:	f7fd fa59 	bl	8002fec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	430b      	orrs	r3, r1
 8005b48:	4919      	ldr	r1, [pc, #100]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005b4e:	e02a      	b.n	8005ba6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b50:	4b17      	ldr	r3, [pc, #92]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b56:	4a16      	ldr	r2, [pc, #88]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b60:	4b13      	ldr	r3, [pc, #76]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b74:	2302      	movs	r3, #2
 8005b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005b84:	f107 031c 	add.w	r3, r7, #28
 8005b88:	4619      	mov	r1, r3
 8005b8a:	480b      	ldr	r0, [pc, #44]	@ (8005bb8 <HAL_RCC_MCOConfig+0xd0>)
 8005b8c:	f7fd fa2e 	bl	8002fec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005b90:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	01d9      	lsls	r1, r3, #7
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	4903      	ldr	r1, [pc, #12]	@ (8005bb0 <HAL_RCC_MCOConfig+0xc8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
}
 8005ba6:	bf00      	nop
 8005ba8:	3730      	adds	r7, #48	@ 0x30
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	58020000 	.word	0x58020000
 8005bb8:	58020800 	.word	0x58020800

08005bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	@ 0x24
 8005bc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc2:	4bb3      	ldr	r3, [pc, #716]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bca:	2b18      	cmp	r3, #24
 8005bcc:	f200 8155 	bhi.w	8005e7a <HAL_RCC_GetSysClockFreq+0x2be>
 8005bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005e7b 	.word	0x08005e7b
 8005be0:	08005e7b 	.word	0x08005e7b
 8005be4:	08005e7b 	.word	0x08005e7b
 8005be8:	08005e7b 	.word	0x08005e7b
 8005bec:	08005e7b 	.word	0x08005e7b
 8005bf0:	08005e7b 	.word	0x08005e7b
 8005bf4:	08005e7b 	.word	0x08005e7b
 8005bf8:	08005c63 	.word	0x08005c63
 8005bfc:	08005e7b 	.word	0x08005e7b
 8005c00:	08005e7b 	.word	0x08005e7b
 8005c04:	08005e7b 	.word	0x08005e7b
 8005c08:	08005e7b 	.word	0x08005e7b
 8005c0c:	08005e7b 	.word	0x08005e7b
 8005c10:	08005e7b 	.word	0x08005e7b
 8005c14:	08005e7b 	.word	0x08005e7b
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005e7b 	.word	0x08005e7b
 8005c20:	08005e7b 	.word	0x08005e7b
 8005c24:	08005e7b 	.word	0x08005e7b
 8005c28:	08005e7b 	.word	0x08005e7b
 8005c2c:	08005e7b 	.word	0x08005e7b
 8005c30:	08005e7b 	.word	0x08005e7b
 8005c34:	08005e7b 	.word	0x08005e7b
 8005c38:	08005c6f 	.word	0x08005c6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c3c:	4b94      	ldr	r3, [pc, #592]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c48:	4b91      	ldr	r3, [pc, #580]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	08db      	lsrs	r3, r3, #3
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	4a90      	ldr	r2, [pc, #576]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
 8005c58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c5a:	e111      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c5e:	61bb      	str	r3, [r7, #24]
      break;
 8005c60:	e10e      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c62:	4b8d      	ldr	r3, [pc, #564]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c64:	61bb      	str	r3, [r7, #24]
      break;
 8005c66:	e10b      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c68:	4b8c      	ldr	r3, [pc, #560]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c6a:	61bb      	str	r3, [r7, #24]
      break;
 8005c6c:	e108      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c6e:	4b88      	ldr	r3, [pc, #544]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c78:	4b85      	ldr	r3, [pc, #532]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c84:	4b82      	ldr	r3, [pc, #520]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c8e:	4b80      	ldr	r3, [pc, #512]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	08db      	lsrs	r3, r3, #3
 8005c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80e1 	beq.w	8005e74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f000 8083 	beq.w	8005dc0 <HAL_RCC_GetSysClockFreq+0x204>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	f200 80a1 	bhi.w	8005e04 <HAL_RCC_GetSysClockFreq+0x248>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x114>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d056      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cce:	e099      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02d      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	08db      	lsrs	r3, r3, #3
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b62      	ldr	r3, [pc, #392]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d36:	e087      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b51      	ldr	r3, [pc, #324]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d7a:	e065      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ea8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b40      	ldr	r3, [pc, #256]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005da2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dbe:	e043      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005de6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e02:	e021      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ea8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e16:	4b1e      	ldr	r3, [pc, #120]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e48:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	0a5b      	lsrs	r3, r3, #9
 8005e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e52:	3301      	adds	r3, #1
 8005e54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6c:	ee17 3a90 	vmov	r3, s15
 8005e70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e72:	e005      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61bb      	str	r3, [r7, #24]
      break;
 8005e78:	e002      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e7a:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e7c:	61bb      	str	r3, [r7, #24]
      break;
 8005e7e:	bf00      	nop
  }

  return sysclockfreq;
 8005e80:	69bb      	ldr	r3, [r7, #24]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3724      	adds	r7, #36	@ 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
 8005e94:	03d09000 	.word	0x03d09000
 8005e98:	003d0900 	.word	0x003d0900
 8005e9c:	017d7840 	.word	0x017d7840
 8005ea0:	46000000 	.word	0x46000000
 8005ea4:	4c742400 	.word	0x4c742400
 8005ea8:	4a742400 	.word	0x4a742400
 8005eac:	4bbebc20 	.word	0x4bbebc20

08005eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005eb6:	f7ff fe81 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	4b10      	ldr	r3, [pc, #64]	@ (8005f00 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	490f      	ldr	r1, [pc, #60]	@ (8005f04 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ec8:	5ccb      	ldrb	r3, [r1, r3]
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ede:	5cd3      	ldrb	r3, [r2, r3]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eea:	4a07      	ldr	r2, [pc, #28]	@ (8005f08 <HAL_RCC_GetHCLKFreq+0x58>)
 8005eec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eee:	4a07      	ldr	r2, [pc, #28]	@ (8005f0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ef4:	4b04      	ldr	r3, [pc, #16]	@ (8005f08 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	58024400 	.word	0x58024400
 8005f04:	0800f868 	.word	0x0800f868
 8005f08:	24000004 	.word	0x24000004
 8005f0c:	24000000 	.word	0x24000000

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f14:	f7ff ffcc 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4904      	ldr	r1, [pc, #16]	@ (8005f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	58024400 	.word	0x58024400
 8005f38:	0800f868 	.word	0x0800f868

08005f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f40:	f7ff ffb6 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4904      	ldr	r1, [pc, #16]	@ (8005f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	58024400 	.word	0x58024400
 8005f64:	0800f868 	.word	0x0800f868

08005f68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6c:	b0cc      	sub	sp, #304	@ 0x130
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f8c:	2500      	movs	r5, #0
 8005f8e:	ea54 0305 	orrs.w	r3, r4, r5
 8005f92:	d049      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f9e:	d02f      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005fa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fa4:	d828      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005faa:	d01a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fb0:	d822      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fba:	d007      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fbc:	e01c      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fbe:	4bb8      	ldr	r3, [pc, #736]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	4ab7      	ldr	r2, [pc, #732]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fca:	e01a      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 fba1 	bl	800871c <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fe0:	e00f      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe6:	3328      	adds	r3, #40	@ 0x28
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 fc48 	bl	8008880 <RCCEx_PLL3_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ff6:	e004      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800600a:	4ba5      	ldr	r3, [pc, #660]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800600c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006018:	4aa1      	ldr	r2, [pc, #644]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800601a:	430b      	orrs	r3, r1
 800601c:	6513      	str	r3, [r2, #80]	@ 0x50
 800601e:	e003      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006024:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006034:	f04f 0900 	mov.w	r9, #0
 8006038:	ea58 0309 	orrs.w	r3, r8, r9
 800603c:	d047      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800603e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006044:	2b04      	cmp	r3, #4
 8006046:	d82a      	bhi.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006048:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006065 	.word	0x08006065
 8006054:	08006073 	.word	0x08006073
 8006058:	08006089 	.word	0x08006089
 800605c:	080060a7 	.word	0x080060a7
 8006060:	080060a7 	.word	0x080060a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006064:	4b8e      	ldr	r3, [pc, #568]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	4a8d      	ldr	r2, [pc, #564]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800606a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800606e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006070:	e01a      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006076:	3308      	adds	r3, #8
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f002 fb4e 	bl	800871c <RCCEx_PLL2_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006086:	e00f      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800608c:	3328      	adds	r3, #40	@ 0x28
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f002 fbf5 	bl	8008880 <RCCEx_PLL3_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800609c:	e004      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060a4:	e000      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060b0:	4b7b      	ldr	r3, [pc, #492]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b4:	f023 0107 	bic.w	r1, r3, #7
 80060b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060be:	4a78      	ldr	r2, [pc, #480]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c0:	430b      	orrs	r3, r1
 80060c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060c4:	e003      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80060ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80060da:	f04f 0b00 	mov.w	fp, #0
 80060de:	ea5a 030b 	orrs.w	r3, sl, fp
 80060e2:	d04c      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80060e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ee:	d030      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80060f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f4:	d829      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80060f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060f8:	d02d      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80060fc:	d825      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80060fe:	2b80      	cmp	r3, #128	@ 0x80
 8006100:	d018      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006102:	2b80      	cmp	r3, #128	@ 0x80
 8006104:	d821      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800610a:	2b40      	cmp	r3, #64	@ 0x40
 800610c:	d007      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800610e:	e01c      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006110:	4b63      	ldr	r3, [pc, #396]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	4a62      	ldr	r2, [pc, #392]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800611c:	e01c      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800611e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006122:	3308      	adds	r3, #8
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f002 faf8 	bl	800871c <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006132:	e011      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006138:	3328      	adds	r3, #40	@ 0x28
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f002 fb9f 	bl	8008880 <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006148:	e006      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006150:	e002      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006158:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006160:	4b4f      	ldr	r3, [pc, #316]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006164:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616e:	4a4c      	ldr	r2, [pc, #304]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006170:	430b      	orrs	r3, r1
 8006172:	6513      	str	r3, [r2, #80]	@ 0x50
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006176:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800617a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800618a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800618e:	2300      	movs	r3, #0
 8006190:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006194:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8006198:	460b      	mov	r3, r1
 800619a:	4313      	orrs	r3, r2
 800619c:	d053      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800619e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061aa:	d035      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80061ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061b0:	d82e      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061b6:	d031      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80061b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061bc:	d828      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c2:	d01a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80061c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c8:	d822      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80061ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061d2:	d007      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80061d4:	e01c      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d6:	4b32      	ldr	r3, [pc, #200]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	4a31      	ldr	r2, [pc, #196]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e2:	e01c      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	3308      	adds	r3, #8
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f002 fa95 	bl	800871c <RCCEx_PLL2_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061f8:	e011      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061fe:	3328      	adds	r3, #40	@ 0x28
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f002 fb3c 	bl	8008880 <RCCEx_PLL3_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800620e:	e006      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006216:	e002      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006226:	4b1e      	ldr	r3, [pc, #120]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800622e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006236:	4a1a      	ldr	r2, [pc, #104]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6593      	str	r3, [r2, #88]	@ 0x58
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006242:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006252:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800625c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006260:	460b      	mov	r3, r1
 8006262:	4313      	orrs	r3, r2
 8006264:	d056      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800626e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006272:	d038      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006274:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006278:	d831      	bhi.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800627a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800627e:	d034      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006280:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006284:	d82b      	bhi.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800628a:	d01d      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800628c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006290:	d825      	bhi.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d006      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800629c:	e01f      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800629e:	bf00      	nop
 80062a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4ba2      	ldr	r3, [pc, #648]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	4aa1      	ldr	r2, [pc, #644]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b0:	e01c      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b6:	3308      	adds	r3, #8
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f002 fa2e 	bl	800871c <RCCEx_PLL2_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062c6:	e011      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062cc:	3328      	adds	r3, #40	@ 0x28
 80062ce:	2100      	movs	r1, #0
 80062d0:	4618      	mov	r0, r3
 80062d2:	f002 fad5 	bl	8008880 <RCCEx_PLL3_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062dc:	e006      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062e4:	e002      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80062ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10b      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062f4:	4b8e      	ldr	r3, [pc, #568]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80062fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006304:	4a8a      	ldr	r2, [pc, #552]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006306:	430b      	orrs	r3, r1
 8006308:	6593      	str	r3, [r2, #88]	@ 0x58
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006310:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006320:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006324:	2300      	movs	r3, #0
 8006326:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800632a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800632e:	460b      	mov	r3, r1
 8006330:	4313      	orrs	r3, r2
 8006332:	d03a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800633a:	2b30      	cmp	r3, #48	@ 0x30
 800633c:	d01f      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800633e:	2b30      	cmp	r3, #48	@ 0x30
 8006340:	d819      	bhi.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006342:	2b20      	cmp	r3, #32
 8006344:	d00c      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006346:	2b20      	cmp	r3, #32
 8006348:	d815      	bhi.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d019      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800634e:	2b10      	cmp	r3, #16
 8006350:	d111      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006352:	4b77      	ldr	r3, [pc, #476]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006356:	4a76      	ldr	r2, [pc, #472]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800635e:	e011      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006364:	3308      	adds	r3, #8
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f002 f9d7 	bl	800871c <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006374:	e006      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800637c:	e002      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800637e:	bf00      	nop
 8006380:	e000      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800638c:	4b68      	ldr	r3, [pc, #416]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800638e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006390:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639a:	4a65      	ldr	r2, [pc, #404]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639c:	430b      	orrs	r3, r1
 800639e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80063b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063c0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d051      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80063ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d4:	d035      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80063d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063da:	d82e      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063e0:	d031      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80063e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063e6:	d828      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ec:	d01a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f2:	d822      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d007      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80063fe:	e01c      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4b4b      	ldr	r3, [pc, #300]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4a4a      	ldr	r2, [pc, #296]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800640c:	e01c      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800640e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006412:	3308      	adds	r3, #8
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f002 f980 	bl	800871c <RCCEx_PLL2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006422:	e011      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006428:	3328      	adds	r3, #40	@ 0x28
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f002 fa27 	bl	8008880 <RCCEx_PLL3_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006438:	e006      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006440:	e002      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006450:	4b37      	ldr	r3, [pc, #220]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006454:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800645c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800645e:	4a34      	ldr	r2, [pc, #208]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006460:	430b      	orrs	r3, r1
 8006462:	6513      	str	r3, [r2, #80]	@ 0x50
 8006464:	e003      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800646a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800647a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006484:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d056      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800648e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006498:	d033      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800649a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800649e:	d82c      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064a4:	d02f      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80064a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064aa:	d826      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b0:	d02b      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80064b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b6:	d820      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064bc:	d012      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80064be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c2:	d81a      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d022      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d115      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064d2:	3308      	adds	r3, #8
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f002 f920 	bl	800871c <RCCEx_PLL2_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064e2:	e015      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e8:	3328      	adds	r3, #40	@ 0x28
 80064ea:	2101      	movs	r1, #1
 80064ec:	4618      	mov	r0, r3
 80064ee:	f002 f9c7 	bl	8008880 <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064f8:	e00a      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006500:	e006      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006502:	bf00      	nop
 8006504:	e004      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006506:	bf00      	nop
 8006508:	e002      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800650a:	bf00      	nop
 800650c:	e000      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800650e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006510:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10d      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800651a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006526:	4a02      	ldr	r2, [pc, #8]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6513      	str	r3, [r2, #80]	@ 0x50
 800652c:	e006      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800652e:	bf00      	nop
 8006530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006538:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800653c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006548:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006552:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006556:	460b      	mov	r3, r1
 8006558:	4313      	orrs	r3, r2
 800655a:	d055      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800655c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006568:	d033      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800656a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800656e:	d82c      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d02f      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657a:	d826      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800657c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006580:	d02b      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006582:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006586:	d820      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800658c:	d012      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006592:	d81a      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d022      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800659c:	d115      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800659e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065a2:	3308      	adds	r3, #8
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 f8b8 	bl	800871c <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065b2:	e015      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065b8:	3328      	adds	r3, #40	@ 0x28
 80065ba:	2101      	movs	r1, #1
 80065bc:	4618      	mov	r0, r3
 80065be:	f002 f95f 	bl	8008880 <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065c8:	e00a      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065d0:	e006      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065d2:	bf00      	nop
 80065d4:	e004      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065d6:	bf00      	nop
 80065d8:	e002      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065e8:	4bb6      	ldr	r3, [pc, #728]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065f8:	4ab2      	ldr	r2, [pc, #712]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80065fe:	e003      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006600:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006604:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006618:	2300      	movs	r3, #0
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800661e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006622:	460b      	mov	r3, r1
 8006624:	4313      	orrs	r3, r2
 8006626:	d02a      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800662c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662e:	2b00      	cmp	r3, #0
 8006630:	d011      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006638:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800663c:	3308      	adds	r3, #8
 800663e:	2101      	movs	r1, #1
 8006640:	4618      	mov	r0, r3
 8006642:	f002 f86b 	bl	800871c <RCCEx_PLL2_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800664c:	e004      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006660:	4b98      	ldr	r3, [pc, #608]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006664:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800666c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666e:	4a95      	ldr	r2, [pc, #596]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006670:	430b      	orrs	r3, r1
 8006672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800667a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800667e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800668a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006694:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d037      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800669e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a8:	d00e      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80066aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ae:	d816      	bhi.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x776>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d018      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80066b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b8:	d111      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ba:	4b82      	ldr	r3, [pc, #520]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4a81      	ldr	r2, [pc, #516]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066c6:	e00f      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066cc:	3308      	adds	r3, #8
 80066ce:	2101      	movs	r1, #1
 80066d0:	4618      	mov	r0, r3
 80066d2:	f002 f823 	bl	800871c <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066dc:	e004      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80066e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066f0:	4b74      	ldr	r3, [pc, #464]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fe:	4a71      	ldr	r2, [pc, #452]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006700:	430b      	orrs	r3, r1
 8006702:	6513      	str	r3, [r2, #80]	@ 0x50
 8006704:	e003      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006706:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800670a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800670e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800671a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800671e:	2300      	movs	r3, #0
 8006720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006724:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d03a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800672e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006734:	2b03      	cmp	r3, #3
 8006736:	d81d      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006738:	a201      	add	r2, pc, #4	@ (adr r2, 8006740 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	0800677d 	.word	0x0800677d
 8006744:	08006751 	.word	0x08006751
 8006748:	0800675f 	.word	0x0800675f
 800674c:	0800677d 	.word	0x0800677d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4b5c      	ldr	r3, [pc, #368]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	4a5b      	ldr	r2, [pc, #364]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800675c:	e00f      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800675e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006762:	3308      	adds	r3, #8
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f001 ffd8 	bl	800871c <RCCEx_PLL2_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800677c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006786:	4b4f      	ldr	r3, [pc, #316]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800678a:	f023 0103 	bic.w	r1, r3, #3
 800678e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006794:	4a4b      	ldr	r2, [pc, #300]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006796:	430b      	orrs	r3, r1
 8006798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800679a:	e003      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f000 80a0 	beq.w	8006906 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c6:	4b40      	ldr	r3, [pc, #256]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a3f      	ldr	r2, [pc, #252]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d2:	f7fb fee3 	bl	800259c <HAL_GetTick>
 80067d6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067da:	e00b      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067dc:	f7fb fede 	bl	800259c <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b64      	cmp	r3, #100	@ 0x64
 80067ea:	d903      	bls.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067f2:	e005      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f4:	4b34      	ldr	r3, [pc, #208]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0ed      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006804:	2b00      	cmp	r3, #0
 8006806:	d17a      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006808:	4b2e      	ldr	r3, [pc, #184]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800680a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800680c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006810:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006814:	4053      	eors	r3, r2
 8006816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681a:	2b00      	cmp	r3, #0
 800681c:	d015      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800681e:	4b29      	ldr	r3, [pc, #164]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006826:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800682a:	4b26      	ldr	r3, [pc, #152]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682e:	4a25      	ldr	r2, [pc, #148]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006834:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006836:	4b23      	ldr	r3, [pc, #140]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683a:	4a22      	ldr	r2, [pc, #136]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800683c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006840:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006842:	4a20      	ldr	r2, [pc, #128]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006844:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006848:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800684a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800684e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006856:	d118      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006858:	f7fb fea0 	bl	800259c <HAL_GetTick>
 800685c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006860:	e00d      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fb fe9b 	bl	800259c <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800686c:	1ad2      	subs	r2, r2, r3
 800686e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006872:	429a      	cmp	r2, r3
 8006874:	d903      	bls.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800687c:	e005      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800687e:	4b11      	ldr	r3, [pc, #68]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0eb      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800688a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d130      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006896:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800689a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800689e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068a2:	d115      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80068a4:	4b07      	ldr	r3, [pc, #28]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068b4:	091a      	lsrs	r2, r3, #4
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	4a02      	ldr	r2, [pc, #8]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6113      	str	r3, [r2, #16]
 80068c0:	e00c      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400
 80068c8:	58024800 	.word	0x58024800
 80068cc:	00ffffcf 	.word	0x00ffffcf
 80068d0:	4bd4      	ldr	r3, [pc, #848]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	4ad3      	ldr	r2, [pc, #844]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068da:	6113      	str	r3, [r2, #16]
 80068dc:	4bd1      	ldr	r3, [pc, #836]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ec:	4acd      	ldr	r2, [pc, #820]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f2:	e008      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80068fc:	e003      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006902:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f002 0301 	and.w	r3, r2, #1
 8006912:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800691c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	f000 808b 	beq.w	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006928:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800692c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006930:	2b28      	cmp	r3, #40	@ 0x28
 8006932:	d86b      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006934:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	08006a15 	.word	0x08006a15
 8006940:	08006a0d 	.word	0x08006a0d
 8006944:	08006a0d 	.word	0x08006a0d
 8006948:	08006a0d 	.word	0x08006a0d
 800694c:	08006a0d 	.word	0x08006a0d
 8006950:	08006a0d 	.word	0x08006a0d
 8006954:	08006a0d 	.word	0x08006a0d
 8006958:	08006a0d 	.word	0x08006a0d
 800695c:	080069e1 	.word	0x080069e1
 8006960:	08006a0d 	.word	0x08006a0d
 8006964:	08006a0d 	.word	0x08006a0d
 8006968:	08006a0d 	.word	0x08006a0d
 800696c:	08006a0d 	.word	0x08006a0d
 8006970:	08006a0d 	.word	0x08006a0d
 8006974:	08006a0d 	.word	0x08006a0d
 8006978:	08006a0d 	.word	0x08006a0d
 800697c:	080069f7 	.word	0x080069f7
 8006980:	08006a0d 	.word	0x08006a0d
 8006984:	08006a0d 	.word	0x08006a0d
 8006988:	08006a0d 	.word	0x08006a0d
 800698c:	08006a0d 	.word	0x08006a0d
 8006990:	08006a0d 	.word	0x08006a0d
 8006994:	08006a0d 	.word	0x08006a0d
 8006998:	08006a0d 	.word	0x08006a0d
 800699c:	08006a15 	.word	0x08006a15
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006a0d 	.word	0x08006a0d
 80069ac:	08006a0d 	.word	0x08006a0d
 80069b0:	08006a0d 	.word	0x08006a0d
 80069b4:	08006a0d 	.word	0x08006a0d
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a0d 	.word	0x08006a0d
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	08006a0d 	.word	0x08006a0d
 80069cc:	08006a0d 	.word	0x08006a0d
 80069d0:	08006a0d 	.word	0x08006a0d
 80069d4:	08006a0d 	.word	0x08006a0d
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006a15 	.word	0x08006a15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069e4:	3308      	adds	r3, #8
 80069e6:	2101      	movs	r1, #1
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fe97 	bl	800871c <RCCEx_PLL2_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f4:	e00f      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069fa:	3328      	adds	r3, #40	@ 0x28
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 ff3e 	bl	8008880 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e004      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a12:	e000      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a1e:	4b81      	ldr	r3, [pc, #516]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a34:	e003      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f002 0302 	and.w	r3, r2, #2
 8006a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a54:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	d042      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	d825      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006a68:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006a89 	.word	0x08006a89
 8006a78:	08006a9f 	.word	0x08006a9f
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fe43 	bl	800871c <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e00f      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 feea 	bl	8008880 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ac6:	4b57      	ldr	r3, [pc, #348]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aca:	f023 0107 	bic.w	r1, r3, #7
 8006ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ad4:	4a53      	ldr	r2, [pc, #332]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ae0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 0304 	and.w	r3, r2, #4
 8006af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006afa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d044      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b0c:	2b05      	cmp	r3, #5
 8006b0e:	d825      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006b10:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b65 	.word	0x08006b65
 8006b1c:	08006b31 	.word	0x08006b31
 8006b20:	08006b47 	.word	0x08006b47
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b65 	.word	0x08006b65
 8006b2c:	08006b65 	.word	0x08006b65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b34:	3308      	adds	r3, #8
 8006b36:	2101      	movs	r1, #1
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fdef 	bl	800871c <RCCEx_PLL2_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b44:	e00f      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fe96 	bl	8008880 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006b62:	e000      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b72:	f023 0107 	bic.w	r1, r3, #7
 8006b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b7e:	4a29      	ldr	r2, [pc, #164]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f002 0320 	and.w	r3, r2, #32
 8006b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d057      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bba:	d035      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bc0:	d82c      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc6:	d031      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bcc:	d826      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bd2:	d02d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bd8:	d820      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bde:	d012      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be4:	d81a      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d024      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bee:	d115      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fd8f 	bl	800871c <RCCEx_PLL2_Config>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c04:	e017      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c0a:	3328      	adds	r3, #40	@ 0x28
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 fe36 	bl	8008880 <RCCEx_PLL3_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c1a:	e00c      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c22:	e008      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006c24:	58024400 	.word	0x58024400
        break;
 8006c28:	bf00      	nop
 8006c2a:	e004      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c2c:	bf00      	nop
 8006c2e:	e002      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c3e:	4bc2      	ldr	r3, [pc, #776]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4e:	4abe      	ldr	r2, [pc, #760]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c54:	e003      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	d055      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c8a:	d033      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006c8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c90:	d82c      	bhi.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c96:	d02f      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9c:	d826      	bhi.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006c9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca2:	d02b      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca8:	d820      	bhi.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cae:	d012      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb4:	d81a      	bhi.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d022      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cbe:	d115      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 fd27 	bl	800871c <RCCEx_PLL2_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cd4:	e015      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cda:	3328      	adds	r3, #40	@ 0x28
 8006cdc:	2102      	movs	r1, #2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fdce 	bl	8008880 <RCCEx_PLL3_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cea:	e00a      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006cf2:	e006      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006cf4:	bf00      	nop
 8006cf6:	e004      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006cf8:	bf00      	nop
 8006cfa:	e002      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d1a:	4a8b      	ldr	r2, [pc, #556]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d20:	e003      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d44:	460b      	mov	r3, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	d055      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d56:	d033      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006d58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d5c:	d82c      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d62:	d02f      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d68:	d826      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d6e:	d02b      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006d70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d74:	d820      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d7a:	d012      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d80:	d81a      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d022      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8a:	d115      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d90:	3308      	adds	r3, #8
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 fcc1 	bl	800871c <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006da0:	e015      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006da6:	3328      	adds	r3, #40	@ 0x28
 8006da8:	2102      	movs	r1, #2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fd68 	bl	8008880 <RCCEx_PLL3_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006db6:	e00a      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006dbe:	e006      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e004      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e002      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dc8:	bf00      	nop
 8006dca:	e000      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dda:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006de6:	4a58      	ldr	r2, [pc, #352]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dec:	e003      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006df2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f002 0308 	and.w	r3, r2, #8
 8006e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e06:	2300      	movs	r3, #0
 8006e08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e0c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e10:	460b      	mov	r3, r1
 8006e12:	4313      	orrs	r3, r2
 8006e14:	d01e      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e22:	d10c      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e28:	3328      	adds	r3, #40	@ 0x28
 8006e2a:	2102      	movs	r1, #2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 fd27 	bl	8008880 <RCCEx_PLL3_Config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e3e:	4b42      	ldr	r3, [pc, #264]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e50:	430b      	orrs	r3, r1
 8006e52:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f002 0310 	and.w	r3, r2, #16
 8006e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d01e      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e86:	3328      	adds	r3, #40	@ 0x28
 8006e88:	2102      	movs	r1, #2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 fcf8 	bl	8008880 <RCCEx_PLL3_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eac:	4a26      	ldr	r2, [pc, #152]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ebe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ec8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d040      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ede:	d022      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee4:	d81b      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eee:	d00b      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006ef0:	e015      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fc0e 	bl	800871c <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f06:	e00f      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f0c:	3328      	adds	r3, #40	@ 0x28
 8006f0e:	2102      	movs	r1, #2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 fcb5 	bl	8008880 <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f1c:	e004      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f24:	e000      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10d      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f30:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f34:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f40:	4a01      	ldr	r2, [pc, #4]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f42:	430b      	orrs	r3, r1
 8006f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f46:	e005      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f62:	2300      	movs	r3, #0
 8006f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f66:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	d03b      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f7c:	d01f      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006f7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f82:	d818      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f88:	d003      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f8e:	d007      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006f90:	e011      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f92:	4b64      	ldr	r3, [pc, #400]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	4a63      	ldr	r2, [pc, #396]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f9e:	e00f      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fa4:	3328      	adds	r3, #40	@ 0x28
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 fc69 	bl	8008880 <RCCEx_PLL3_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fb4:	e004      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006fbc:	e000      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fc8:	4b56      	ldr	r3, [pc, #344]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fcc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fd8:	4a52      	ldr	r2, [pc, #328]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fde:	e003      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fe4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ffa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ffe:	460b      	mov	r3, r1
 8007000:	4313      	orrs	r3, r2
 8007002:	d031      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007012:	d007      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007014:	e011      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007016:	4b43      	ldr	r3, [pc, #268]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	4a42      	ldr	r2, [pc, #264]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007022:	e00e      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007028:	3308      	adds	r3, #8
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f001 fb75 	bl	800871c <RCCEx_PLL2_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007038:	e003      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800704a:	4b36      	ldr	r3, [pc, #216]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007058:	4a32      	ldr	r2, [pc, #200]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800705a:	430b      	orrs	r3, r1
 800705c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800705e:	e003      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007060:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007064:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007076:	2300      	movs	r3, #0
 8007078:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800707a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800707e:	460b      	mov	r3, r1
 8007080:	4313      	orrs	r3, r2
 8007082:	d00c      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007088:	3328      	adds	r3, #40	@ 0x28
 800708a:	2102      	movs	r1, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fbf7 	bl	8008880 <RCCEx_PLL3_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800709e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80070ac:	2300      	movs	r3, #0
 80070ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80070b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070b4:	460b      	mov	r3, r1
 80070b6:	4313      	orrs	r3, r2
 80070b8:	d03a      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070c6:	d018      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80070c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070cc:	d811      	bhi.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80070ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d2:	d014      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80070d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d8:	d80b      	bhi.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d011      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80070de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e2:	d106      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070f0:	e008      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80070f8:	e004      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80070fa:	bf00      	nop
 80070fc:	e002      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007104:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10d      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800710c:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800710e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800711c:	4a01      	ldr	r2, [pc, #4]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800711e:	430b      	orrs	r3, r1
 8007120:	6553      	str	r3, [r2, #84]	@ 0x54
 8007122:	e005      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800712c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800713c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800713e:	2300      	movs	r3, #0
 8007140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800714c:	4baa      	ldr	r3, [pc, #680]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007150:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800715a:	4aa7      	ldr	r2, [pc, #668]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800715c:	430b      	orrs	r3, r1
 800715e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800716c:	653b      	str	r3, [r7, #80]	@ 0x50
 800716e:	2300      	movs	r3, #0
 8007170:	657b      	str	r3, [r7, #84]	@ 0x54
 8007172:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007176:	460b      	mov	r3, r1
 8007178:	4313      	orrs	r3, r2
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800717c:	4b9e      	ldr	r3, [pc, #632]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007188:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800718c:	4a9a      	ldr	r2, [pc, #616]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800718e:	430b      	orrs	r3, r1
 8007190:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007192:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800719e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a0:	2300      	movs	r3, #0
 80071a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071a8:	460b      	mov	r3, r1
 80071aa:	4313      	orrs	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071ae:	4b92      	ldr	r3, [pc, #584]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071bc:	4a8e      	ldr	r2, [pc, #568]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071be:	430b      	orrs	r3, r1
 80071c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d0:	2300      	movs	r3, #0
 80071d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80071d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071d8:	460b      	mov	r3, r1
 80071da:	4313      	orrs	r3, r2
 80071dc:	d00e      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071de:	4b86      	ldr	r3, [pc, #536]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	4a85      	ldr	r2, [pc, #532]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071e8:	6113      	str	r3, [r2, #16]
 80071ea:	4b83      	ldr	r3, [pc, #524]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071ec:	6919      	ldr	r1, [r3, #16]
 80071ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071f6:	4a80      	ldr	r2, [pc, #512]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007208:	63bb      	str	r3, [r7, #56]	@ 0x38
 800720a:	2300      	movs	r3, #0
 800720c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800720e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007218:	4b77      	ldr	r3, [pc, #476]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800721a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007226:	4a74      	ldr	r2, [pc, #464]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007228:	430b      	orrs	r3, r1
 800722a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800722c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007238:	633b      	str	r3, [r7, #48]	@ 0x30
 800723a:	2300      	movs	r3, #0
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
 800723e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007248:	4b6b      	ldr	r3, [pc, #428]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800724a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007258:	4a67      	ldr	r2, [pc, #412]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800725e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	2100      	movs	r1, #0
 8007268:	62b9      	str	r1, [r7, #40]	@ 0x28
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007270:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d011      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800727e:	3308      	adds	r3, #8
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fa4a 	bl	800871c <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800728e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007296:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800729a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800729e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	2100      	movs	r1, #0
 80072a8:	6239      	str	r1, [r7, #32]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d011      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072be:	3308      	adds	r3, #8
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fa2a 	bl	800871c <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80072ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	2100      	movs	r1, #0
 80072e8:	61b9      	str	r1, [r7, #24]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072f4:	460b      	mov	r3, r1
 80072f6:	4313      	orrs	r3, r2
 80072f8:	d011      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072fe:	3308      	adds	r3, #8
 8007300:	2102      	movs	r1, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fa0a 	bl	800871c <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800730e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007316:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800731a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800731e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	2100      	movs	r1, #0
 8007328:	6139      	str	r1, [r7, #16]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d011      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800733a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800733e:	3328      	adds	r3, #40	@ 0x28
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fa9c 	bl	8008880 <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800734e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800735a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800735e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	2100      	movs	r1, #0
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d011      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800737a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800737e:	3328      	adds	r3, #40	@ 0x28
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f001 fa7c 	bl	8008880 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800738e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800739a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800739e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	2100      	movs	r1, #0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	607b      	str	r3, [r7, #4]
 80073b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d011      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fa5c 	bl	8008880 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80073ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80073de:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80073f2:	46bd      	mov	sp, r7
 80073f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f8:	58024400 	.word	0x58024400

080073fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b090      	sub	sp, #64	@ 0x40
 8007400:	af00      	add	r7, sp, #0
 8007402:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800740e:	430b      	orrs	r3, r1
 8007410:	f040 8094 	bne.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007414:	4b9e      	ldr	r3, [pc, #632]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	2b04      	cmp	r3, #4
 8007422:	f200 8087 	bhi.w	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007441 	.word	0x08007441
 8007430:	08007469 	.word	0x08007469
 8007434:	08007491 	.word	0x08007491
 8007438:	0800752d 	.word	0x0800752d
 800743c:	080074b9 	.word	0x080074b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007440:	4b93      	ldr	r3, [pc, #588]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800744c:	d108      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800744e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f810 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800745c:	f000 bd45 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007464:	f000 bd41 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007468:	4b89      	ldr	r3, [pc, #548]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007474:	d108      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0318 	add.w	r3, r7, #24
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fd54 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007484:	f000 bd31 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800748c:	f000 bd2d 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007490:	4b7f      	ldr	r3, [pc, #508]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800749c:	d108      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fe94 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ac:	f000 bd1d 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b4:	f000 bd19 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074b8:	4b75      	ldr	r3, [pc, #468]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074c2:	4b73      	ldr	r3, [pc, #460]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d10c      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d4:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	08db      	lsrs	r3, r3, #3
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	4a6d      	ldr	r2, [pc, #436]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074e0:	fa22 f303 	lsr.w	r3, r2, r3
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e6:	e01f      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074e8:	4b69      	ldr	r3, [pc, #420]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074fe:	4b66      	ldr	r3, [pc, #408]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007502:	e011      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007504:	4b62      	ldr	r3, [pc, #392]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800750c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007510:	d106      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007518:	d102      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800751a:	4b60      	ldr	r3, [pc, #384]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800751c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800751e:	e003      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007524:	f000 bce1 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007528:	f000 bcdf 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800752c:	4b5c      	ldr	r3, [pc, #368]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007530:	f000 bcdb 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007538:	f000 bcd7 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007544:	430b      	orrs	r3, r1
 8007546:	f040 80ad 	bne.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800754a:	4b51      	ldr	r3, [pc, #324]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800754c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800755a:	d056      	beq.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007562:	f200 8090 	bhi.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2bc0      	cmp	r3, #192	@ 0xc0
 800756a:	f000 8088 	beq.w	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	2bc0      	cmp	r3, #192	@ 0xc0
 8007572:	f200 8088 	bhi.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	2b80      	cmp	r3, #128	@ 0x80
 800757a:	d032      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	2b80      	cmp	r3, #128	@ 0x80
 8007580:	f200 8081 	bhi.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b40      	cmp	r3, #64	@ 0x40
 800758e:	d014      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007590:	e079      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007592:	4b3f      	ldr	r3, [pc, #252]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800759e:	d108      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 ff67 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ae:	f000 bc9c 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b6:	f000 bc98 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ba:	4b35      	ldr	r3, [pc, #212]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075c6:	d108      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c8:	f107 0318 	add.w	r3, r7, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fcab 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d6:	f000 bc88 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075de:	f000 bc84 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ee:	d108      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075f0:	f107 030c 	add.w	r3, r7, #12
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fdeb 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fe:	f000 bc74 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007606:	f000 bc70 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800760a:	4b21      	ldr	r3, [pc, #132]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800760c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007612:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007614:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b04      	cmp	r3, #4
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007626:	4b1a      	ldr	r3, [pc, #104]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	08db      	lsrs	r3, r3, #3
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007638:	e01f      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800763a:	4b15      	ldr	r3, [pc, #84]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007650:	4b11      	ldr	r3, [pc, #68]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007654:	e011      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007656:	4b0e      	ldr	r3, [pc, #56]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007662:	d106      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800766a:	d102      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800766c:	4b0b      	ldr	r3, [pc, #44]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800766e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007670:	e003      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007676:	f000 bc38 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800767a:	f000 bc36 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800767e:	4b08      	ldr	r3, [pc, #32]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007682:	f000 bc32 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768a:	f000 bc2e 	b.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800768e:	bf00      	nop
 8007690:	58024400 	.word	0x58024400
 8007694:	03d09000 	.word	0x03d09000
 8007698:	003d0900 	.word	0x003d0900
 800769c:	017d7840 	.word	0x017d7840
 80076a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80076ac:	430b      	orrs	r3, r1
 80076ae:	f040 809c 	bne.w	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80076b2:	4b9e      	ldr	r3, [pc, #632]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80076ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076c2:	d054      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ca:	f200 808b 	bhi.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076d4:	f000 8083 	beq.w	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076de:	f200 8081 	bhi.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076e8:	d02f      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f0:	d878      	bhi.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076fe:	d012      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007700:	e070      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007702:	4b8a      	ldr	r3, [pc, #552]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800770a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800770e:	d107      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007714:	4618      	mov	r0, r3
 8007716:	f000 feaf 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771e:	e3e4      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007724:	e3e1      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007726:	4b81      	ldr	r3, [pc, #516]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800772e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007732:	d107      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007734:	f107 0318 	add.w	r3, r7, #24
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fbf5 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007742:	e3d2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007748:	e3cf      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800774a:	4b78      	ldr	r3, [pc, #480]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007756:	d107      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fd37 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007766:	e3c0      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776c:	e3bd      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800776e:	4b6f      	ldr	r3, [pc, #444]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007772:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007778:	4b6c      	ldr	r3, [pc, #432]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b04      	cmp	r3, #4
 8007782:	d10c      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800778a:	4b68      	ldr	r3, [pc, #416]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	08db      	lsrs	r3, r3, #3
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	4a66      	ldr	r2, [pc, #408]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007796:	fa22 f303 	lsr.w	r3, r2, r3
 800779a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800779c:	e01e      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800779e:	4b63      	ldr	r3, [pc, #396]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077aa:	d106      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077b2:	d102      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077b4:	4b5f      	ldr	r3, [pc, #380]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b8:	e010      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077ba:	4b5c      	ldr	r3, [pc, #368]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077c6:	d106      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ce:	d102      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077d0:	4b59      	ldr	r3, [pc, #356]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077d4:	e002      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077da:	e386      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077dc:	e385      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077de:	4b57      	ldr	r3, [pc, #348]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e2:	e382      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e8:	e37f      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80077f2:	430b      	orrs	r3, r1
 80077f4:	f040 80a7 	bne.w	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077f8:	4b4c      	ldr	r3, [pc, #304]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077fc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007800:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007808:	d055      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007810:	f200 8096 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800781a:	f000 8084 	beq.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007824:	f200 808c 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800782e:	d030      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007836:	f200 8083 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007846:	d012      	beq.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007848:	e07a      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800784a:	4b38      	ldr	r3, [pc, #224]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007856:	d107      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fe0b 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007866:	e340      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786c:	e33d      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800786e:	4b2f      	ldr	r3, [pc, #188]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800787c:	f107 0318 	add.w	r3, r7, #24
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fb51 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788a:	e32e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007890:	e32b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007892:	4b26      	ldr	r3, [pc, #152]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800789a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800789e:	d107      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fc93 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ae:	e31c      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b4:	e319      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078b6:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c0:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d10c      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078d2:	4b16      	ldr	r3, [pc, #88]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	08db      	lsrs	r3, r3, #3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	4a14      	ldr	r2, [pc, #80]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e4:	e01e      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078e6:	4b11      	ldr	r3, [pc, #68]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007900:	e010      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007902:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800790e:	d106      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007916:	d102      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800791c:	e002      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007922:	e2e2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007924:	e2e1      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007926:	4b05      	ldr	r3, [pc, #20]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792a:	e2de      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800792c:	58024400 	.word	0x58024400
 8007930:	03d09000 	.word	0x03d09000
 8007934:	003d0900 	.word	0x003d0900
 8007938:	017d7840 	.word	0x017d7840
 800793c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007944:	e2d1      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800794e:	430b      	orrs	r3, r1
 8007950:	f040 809c 	bne.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007954:	4b93      	ldr	r3, [pc, #588]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007958:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800795c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007964:	d054      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800796c:	f200 808b 	bhi.w	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007976:	f000 8083 	beq.w	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007980:	f200 8081 	bhi.w	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800798a:	d02f      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007992:	d878      	bhi.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800799a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a0:	d012      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80079a2:	e070      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079a4:	4b7f      	ldr	r3, [pc, #508]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079b0:	d107      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fd5e 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c0:	e293      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c6:	e290      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079c8:	4b76      	ldr	r3, [pc, #472]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d6:	f107 0318 	add.w	r3, r7, #24
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 faa4 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e4:	e281      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ea:	e27e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ec:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f8:	d107      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fa:	f107 030c 	add.w	r3, r7, #12
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fbe6 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a08:	e26f      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a0e:	e26c      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a10:	4b64      	ldr	r3, [pc, #400]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a1a:	4b62      	ldr	r3, [pc, #392]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d10c      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d109      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	08db      	lsrs	r3, r3, #3
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	4a5c      	ldr	r2, [pc, #368]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a38:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3e:	e01e      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a40:	4b58      	ldr	r3, [pc, #352]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a56:	4b55      	ldr	r3, [pc, #340]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5a:	e010      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a5c:	4b51      	ldr	r3, [pc, #324]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a68:	d106      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a70:	d102      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a72:	4b4f      	ldr	r3, [pc, #316]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a76:	e002      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a7c:	e235      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a7e:	e234      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a80:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a84:	e231      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8a:	e22e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a90:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007a94:	430b      	orrs	r3, r1
 8007a96:	f040 808f 	bne.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a9a:	4b42      	ldr	r3, [pc, #264]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a9e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007aaa:	d06b      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ab2:	d874      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007aba:	d056      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ac2:	d86c      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007aca:	d03b      	beq.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ad2:	d864      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ada:	d021      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ae2:	d85c      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af0:	d004      	beq.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007af2:	e054      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007af4:	f7fe fa0c 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8007af8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007afa:	e1f6      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007afc:	4b29      	ldr	r3, [pc, #164]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b08:	d107      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fa0a 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b18:	e1e7      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b1e:	e1e4      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b20:	4b20      	ldr	r3, [pc, #128]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fb4c 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3c:	e1d5      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b42:	e1d2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b44:	4b17      	ldr	r3, [pc, #92]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d109      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b50:	4b14      	ldr	r3, [pc, #80]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	08db      	lsrs	r3, r3, #3
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	4a13      	ldr	r2, [pc, #76]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b62:	e1c2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	e1bf      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b76:	d102      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b78:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7c:	e1b5      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b82:	e1b2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b84:	4b07      	ldr	r3, [pc, #28]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b90:	d102      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b92:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b96:	e1a8      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9c:	e1a5      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba2:	e1a2      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ba4:	58024400 	.word	0x58024400
 8007ba8:	03d09000 	.word	0x03d09000
 8007bac:	003d0900 	.word	0x003d0900
 8007bb0:	017d7840 	.word	0x017d7840
 8007bb4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	d173      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd4:	d02f      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bdc:	d863      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bea:	d012      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bec:	e05b      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bee:	4b92      	ldr	r3, [pc, #584]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfc:	f107 0318 	add.w	r3, r7, #24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f991 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0a:	e16e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c10:	e16b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c12:	4b89      	ldr	r3, [pc, #548]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c20:	f107 030c 	add.w	r3, r7, #12
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fad3 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2e:	e15c      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c34:	e159      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c36:	4b80      	ldr	r3, [pc, #512]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c40:	4b7d      	ldr	r3, [pc, #500]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d10c      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c52:	4b79      	ldr	r3, [pc, #484]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	08db      	lsrs	r3, r3, #3
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	4a77      	ldr	r2, [pc, #476]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c64:	e01e      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c66:	4b74      	ldr	r3, [pc, #464]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c7c:	4b70      	ldr	r3, [pc, #448]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c80:	e010      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c82:	4b6d      	ldr	r3, [pc, #436]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c98:	4b6a      	ldr	r3, [pc, #424]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c9c:	e002      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ca2:	e122      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ca4:	e121      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007caa:	e11e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	d133      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cce:	d012      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cd0:	e023      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd2:	4b59      	ldr	r3, [pc, #356]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fbc7 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cee:	e0fc      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e0f9      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cf6:	4b50      	ldr	r3, [pc, #320]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d02:	d107      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f90d 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d12:	e0ea      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d18:	e0e7      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1e:	e0e4      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	f040 808d 	bne.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d2e:	4b42      	ldr	r3, [pc, #264]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d32:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d36:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d3e:	d06b      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d46:	d874      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d4e:	d056      	beq.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d56:	d86c      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d5e:	d03b      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d66:	d864      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d6e:	d021      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d76:	d85c      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d84:	d004      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d86:	e054      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d88:	f000 f8b8 	bl	8007efc <HAL_RCCEx_GetD3PCLK1Freq>
 8007d8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d8e:	e0ac      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d90:	4b29      	ldr	r3, [pc, #164]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9e:	f107 0318 	add.w	r3, r7, #24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f8c0 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dac:	e09d      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db2:	e09a      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007db4:	4b20      	ldr	r3, [pc, #128]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc2:	f107 030c 	add.w	r3, r7, #12
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fa02 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd0:	e08b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd6:	e088      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dd8:	4b17      	ldr	r3, [pc, #92]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d109      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007de4:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	08db      	lsrs	r3, r3, #3
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	4a13      	ldr	r2, [pc, #76]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
 8007df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df6:	e078      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfc:	e075      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e10:	e06b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e16:	e068      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e18:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e24:	d102      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e26:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2a:	e05e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e05b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e36:	e058      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	03d09000 	.word	0x03d09000
 8007e40:	003d0900 	.word	0x003d0900
 8007e44:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e50:	430b      	orrs	r3, r1
 8007e52:	d148      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e54:	4b27      	ldr	r3, [pc, #156]	@ (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e64:	d02a      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6c:	d838      	bhi.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e7a:	d00d      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e7c:	e030      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e90:	e02b      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e96:	e028      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e98:	4b16      	ldr	r3, [pc, #88]	@ (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fae4 	bl	8008478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb4:	e019      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eba:	e016      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ec8:	d107      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eca:	f107 0318 	add.w	r3, r7, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f82a 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed8:	e007      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee4:	e001      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3740      	adds	r7, #64	@ 0x40
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	017d7840 	.word	0x017d7840

08007efc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f00:	f7fd ffd6 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8007f04:	4602      	mov	r2, r0
 8007f06:	4b06      	ldr	r3, [pc, #24]	@ (8007f20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	4904      	ldr	r1, [pc, #16]	@ (8007f24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f12:	5ccb      	ldrb	r3, [r1, r3]
 8007f14:	f003 031f 	and.w	r3, r3, #31
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	58024400 	.word	0x58024400
 8007f24:	0800f868 	.word	0x0800f868

08007f28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b089      	sub	sp, #36	@ 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f30:	4ba1      	ldr	r3, [pc, #644]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3e:	0b1b      	lsrs	r3, r3, #12
 8007f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f46:	4b9c      	ldr	r3, [pc, #624]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f52:	4b99      	ldr	r3, [pc, #612]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f56:	08db      	lsrs	r3, r3, #3
 8007f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8111 	beq.w	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	f000 8083 	beq.w	8008084 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	f200 80a1 	bhi.w	80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d056      	beq.n	8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f92:	e099      	b.n	80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f94:	4b88      	ldr	r3, [pc, #544]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02d      	beq.n	8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa0:	4b85      	ldr	r3, [pc, #532]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	08db      	lsrs	r3, r3, #3
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	4a84      	ldr	r2, [pc, #528]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b7b      	ldr	r3, [pc, #492]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ffa:	e087      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800800a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800e:	4b6a      	ldr	r3, [pc, #424]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008022:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800803e:	e065      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800804e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008052:	4b59      	ldr	r3, [pc, #356]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008062:	ed97 6a03 	vldr	s12, [r7, #12]
 8008066:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008082:	e043      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008096:	4b48      	ldr	r3, [pc, #288]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080c6:	e021      	b.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080da:	4b37      	ldr	r3, [pc, #220]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800810c:	4b2a      	ldr	r3, [pc, #168]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	0a5b      	lsrs	r3, r3, #9
 8008112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008126:	edd7 6a07 	vldr	s13, [r7, #28]
 800812a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008132:	ee17 2a90 	vmov	r2, s15
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800813a:	4b1f      	ldr	r3, [pc, #124]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	0c1b      	lsrs	r3, r3, #16
 8008140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008154:	edd7 6a07 	vldr	s13, [r7, #28]
 8008158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008160:	ee17 2a90 	vmov	r2, s15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008168:	4b13      	ldr	r3, [pc, #76]	@ (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816c:	0e1b      	lsrs	r3, r3, #24
 800816e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800817e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008182:	edd7 6a07 	vldr	s13, [r7, #28]
 8008186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818e:	ee17 2a90 	vmov	r2, s15
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008196:	e008      	b.n	80081aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	609a      	str	r2, [r3, #8]
}
 80081aa:	bf00      	nop
 80081ac:	3724      	adds	r7, #36	@ 0x24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	58024400 	.word	0x58024400
 80081bc:	03d09000 	.word	0x03d09000
 80081c0:	46000000 	.word	0x46000000
 80081c4:	4c742400 	.word	0x4c742400
 80081c8:	4a742400 	.word	0x4a742400
 80081cc:	4bbebc20 	.word	0x4bbebc20

080081d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b089      	sub	sp, #36	@ 0x24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081e2:	4b9f      	ldr	r3, [pc, #636]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	0d1b      	lsrs	r3, r3, #20
 80081e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081fa:	4b99      	ldr	r3, [pc, #612]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8111 	beq.w	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b02      	cmp	r3, #2
 8008222:	f000 8083 	beq.w	800832c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b02      	cmp	r3, #2
 800822a:	f200 80a1 	bhi.w	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d056      	beq.n	80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800823a:	e099      	b.n	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800823c:	4b88      	ldr	r3, [pc, #544]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02d      	beq.n	80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008248:	4b85      	ldr	r3, [pc, #532]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	4a84      	ldr	r2, [pc, #528]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
 8008258:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008272:	4b7b      	ldr	r3, [pc, #492]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a03 	vldr	s12, [r7, #12]
 8008286:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082a2:	e087      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082e6:	e065      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fa:	4b59      	ldr	r3, [pc, #356]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830a:	ed97 6a03 	vldr	s12, [r7, #12]
 800830e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800831e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800832a:	e043      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b48      	ldr	r3, [pc, #288]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008352:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800836e:	e021      	b.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b37      	ldr	r3, [pc, #220]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b8:	0a5b      	lsrs	r3, r3, #9
 80083ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083da:	ee17 2a90 	vmov	r2, s15
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008408:	ee17 2a90 	vmov	r2, s15
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008410:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	0e1b      	lsrs	r3, r3, #24
 8008416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842a:	edd7 6a07 	vldr	s13, [r7, #28]
 800842e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008436:	ee17 2a90 	vmov	r2, s15
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800843e:	e008      	b.n	8008452 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	609a      	str	r2, [r3, #8]
}
 8008452:	bf00      	nop
 8008454:	3724      	adds	r7, #36	@ 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
 8008464:	03d09000 	.word	0x03d09000
 8008468:	46000000 	.word	0x46000000
 800846c:	4c742400 	.word	0x4c742400
 8008470:	4a742400 	.word	0x4a742400
 8008474:	4bbebc20 	.word	0x4bbebc20

08008478 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	@ 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008480:	4ba0      	ldr	r3, [pc, #640]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800848a:	4b9e      	ldr	r3, [pc, #632]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008494:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008496:	4b9b      	ldr	r3, [pc, #620]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084a0:	4b98      	ldr	r3, [pc, #608]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a4:	08db      	lsrs	r3, r3, #3
 80084a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	fb02 f303 	mul.w	r3, r2, r3
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8111 	beq.w	80086e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	f000 8083 	beq.w	80085d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	f200 80a1 	bhi.w	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d056      	beq.n	800858e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084e0:	e099      	b.n	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e2:	4b88      	ldr	r3, [pc, #544]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d02d      	beq.n	800854a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ee:	4b85      	ldr	r3, [pc, #532]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	08db      	lsrs	r3, r3, #3
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	4a83      	ldr	r2, [pc, #524]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084fa:	fa22 f303 	lsr.w	r3, r2, r3
 80084fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008518:	4b7a      	ldr	r3, [pc, #488]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800851a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008528:	ed97 6a03 	vldr	s12, [r7, #12]
 800852c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800853c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008544:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008548:	e087      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008554:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855c:	4b69      	ldr	r3, [pc, #420]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800855e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008570:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800858c:	e065      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008598:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008714 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800859c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a0:	4b58      	ldr	r3, [pc, #352]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a8:	ee07 3a90 	vmov	s15, r3
 80085ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085d0:	e043      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e4:	4b47      	ldr	r3, [pc, #284]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008614:	e021      	b.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008628:	4b36      	ldr	r3, [pc, #216]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008638:	ed97 6a03 	vldr	s12, [r7, #12]
 800863c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800870c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800864c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008658:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800865a:	4b2a      	ldr	r3, [pc, #168]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800865e:	0a5b      	lsrs	r3, r3, #9
 8008660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008664:	ee07 3a90 	vmov	s15, r3
 8008668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008674:	edd7 6a07 	vldr	s13, [r7, #28]
 8008678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800867c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008680:	ee17 2a90 	vmov	r2, s15
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008688:	4b1e      	ldr	r3, [pc, #120]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800869e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ae:	ee17 2a90 	vmov	r2, s15
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086b6:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ba:	0e1b      	lsrs	r3, r3, #24
 80086bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086dc:	ee17 2a90 	vmov	r2, s15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086e4:	e008      	b.n	80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	609a      	str	r2, [r3, #8]
}
 80086f8:	bf00      	nop
 80086fa:	3724      	adds	r7, #36	@ 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	58024400 	.word	0x58024400
 8008708:	03d09000 	.word	0x03d09000
 800870c:	46000000 	.word	0x46000000
 8008710:	4c742400 	.word	0x4c742400
 8008714:	4a742400 	.word	0x4a742400
 8008718:	4bbebc20 	.word	0x4bbebc20

0800871c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800872a:	4b53      	ldr	r3, [pc, #332]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	2b03      	cmp	r3, #3
 8008734:	d101      	bne.n	800873a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e099      	b.n	800886e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800873a:	4b4f      	ldr	r3, [pc, #316]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a4e      	ldr	r2, [pc, #312]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008740:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008746:	f7f9 ff29 	bl	800259c <HAL_GetTick>
 800874a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800874c:	e008      	b.n	8008760 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800874e:	f7f9 ff25 	bl	800259c <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e086      	b.n	800886e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008760:	4b45      	ldr	r3, [pc, #276]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1f0      	bne.n	800874e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800876c:	4b42      	ldr	r3, [pc, #264]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	031b      	lsls	r3, r3, #12
 800877a:	493f      	ldr	r1, [pc, #252]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 800877c:	4313      	orrs	r3, r2
 800877e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	3b01      	subs	r3, #1
 8008790:	025b      	lsls	r3, r3, #9
 8008792:	b29b      	uxth	r3, r3
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087a2:	431a      	orrs	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	061b      	lsls	r3, r3, #24
 80087ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087b0:	4931      	ldr	r1, [pc, #196]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087b6:	4b30      	ldr	r3, [pc, #192]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	492d      	ldr	r1, [pc, #180]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	f023 0220 	bic.w	r2, r3, #32
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	4928      	ldr	r1, [pc, #160]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087da:	4b27      	ldr	r3, [pc, #156]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087de:	4a26      	ldr	r2, [pc, #152]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087e0:	f023 0310 	bic.w	r3, r3, #16
 80087e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087e6:	4b24      	ldr	r3, [pc, #144]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ea:	4b24      	ldr	r3, [pc, #144]	@ (800887c <RCCEx_PLL2_Config+0x160>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	69d2      	ldr	r2, [r2, #28]
 80087f2:	00d2      	lsls	r2, r2, #3
 80087f4:	4920      	ldr	r1, [pc, #128]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008800:	f043 0310 	orr.w	r3, r3, #16
 8008804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800880c:	4b1a      	ldr	r3, [pc, #104]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 800880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008810:	4a19      	ldr	r2, [pc, #100]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008812:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008818:	e00f      	b.n	800883a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d106      	bne.n	800882e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008820:	4b15      	ldr	r3, [pc, #84]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008824:	4a14      	ldr	r2, [pc, #80]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800882a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800882c:	e005      	b.n	800883a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800882e:	4b12      	ldr	r3, [pc, #72]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008832:	4a11      	ldr	r2, [pc, #68]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008834:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008838:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800883a:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a0e      	ldr	r2, [pc, #56]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008840:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008846:	f7f9 fea9 	bl	800259c <HAL_GetTick>
 800884a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800884c:	e008      	b.n	8008860 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800884e:	f7f9 fea5 	bl	800259c <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e006      	b.n	800886e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008860:	4b05      	ldr	r3, [pc, #20]	@ (8008878 <RCCEx_PLL2_Config+0x15c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0f0      	beq.n	800884e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	ffff0007 	.word	0xffff0007

08008880 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800888e:	4b53      	ldr	r3, [pc, #332]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d101      	bne.n	800889e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e099      	b.n	80089d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800889e:	4b4f      	ldr	r3, [pc, #316]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a4e      	ldr	r2, [pc, #312]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088aa:	f7f9 fe77 	bl	800259c <HAL_GetTick>
 80088ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088b0:	e008      	b.n	80088c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088b2:	f7f9 fe73 	bl	800259c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e086      	b.n	80089d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088c4:	4b45      	ldr	r3, [pc, #276]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f0      	bne.n	80088b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088d0:	4b42      	ldr	r3, [pc, #264]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	051b      	lsls	r3, r3, #20
 80088de:	493f      	ldr	r1, [pc, #252]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	025b      	lsls	r3, r3, #9
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	3b01      	subs	r3, #1
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	3b01      	subs	r3, #1
 800890e:	061b      	lsls	r3, r3, #24
 8008910:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008914:	4931      	ldr	r1, [pc, #196]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008916:	4313      	orrs	r3, r2
 8008918:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800891a:	4b30      	ldr	r3, [pc, #192]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 800891c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	492d      	ldr	r1, [pc, #180]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008928:	4313      	orrs	r3, r2
 800892a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800892c:	4b2b      	ldr	r3, [pc, #172]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 800892e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008930:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	4928      	ldr	r1, [pc, #160]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 800893a:	4313      	orrs	r3, r2
 800893c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800893e:	4b27      	ldr	r3, [pc, #156]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	4a26      	ldr	r2, [pc, #152]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800894a:	4b24      	ldr	r3, [pc, #144]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 800894c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800894e:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <RCCEx_PLL3_Config+0x160>)
 8008950:	4013      	ands	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	69d2      	ldr	r2, [r2, #28]
 8008956:	00d2      	lsls	r2, r2, #3
 8008958:	4920      	ldr	r1, [pc, #128]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 800895a:	4313      	orrs	r3, r2
 800895c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800895e:	4b1f      	ldr	r3, [pc, #124]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008962:	4a1e      	ldr	r2, [pc, #120]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008968:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008970:	4b1a      	ldr	r3, [pc, #104]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008974:	4a19      	ldr	r2, [pc, #100]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008976:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800897a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800897c:	e00f      	b.n	800899e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d106      	bne.n	8008992 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008984:	4b15      	ldr	r3, [pc, #84]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008988:	4a14      	ldr	r2, [pc, #80]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 800898a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800898e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008990:	e005      	b.n	800899e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008992:	4b12      	ldr	r3, [pc, #72]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	4a11      	ldr	r2, [pc, #68]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 8008998:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800899c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800899e:	4b0f      	ldr	r3, [pc, #60]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a0e      	ldr	r2, [pc, #56]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80089a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089aa:	f7f9 fdf7 	bl	800259c <HAL_GetTick>
 80089ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089b0:	e008      	b.n	80089c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089b2:	f7f9 fdf3 	bl	800259c <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e006      	b.n	80089d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089c4:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <RCCEx_PLL3_Config+0x15c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0f0      	beq.n	80089b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	58024400 	.word	0x58024400
 80089e0:	ffff0007 	.word	0xffff0007

080089e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	@ 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e075      	b.n	8008ae2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7f9 fb39 	bl	8002080 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2204      	movs	r2, #4
 8008a12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f868 	bl	8008aec <HAL_SD_InitCard>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e05d      	b.n	8008ae2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fdaf 	bl	8009590 <HAL_SD_GetCardStatus>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e052      	b.n	8008ae2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a3c:	7e3b      	ldrb	r3, [r7, #24]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a42:	7e7b      	ldrb	r3, [r7, #25]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10a      	bne.n	8008a66 <HAL_SD_Init+0x82>
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <HAL_SD_Init+0x78>
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a62:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a64:	e00b      	b.n	8008a7e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d104      	bne.n	8008a78 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a74:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a76:	e002      	b.n	8008a7e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fe6d 	bl	8009764 <HAL_SD_ConfigWideBusOperation>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e026      	b.n	8008ae2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008a94:	f7f9 fd82 	bl	800259c <HAL_GetTick>
 8008a98:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008a9a:	e011      	b.n	8008ac0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a9c:	f7f9 fd7e 	bl	800259c <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aaa:	d109      	bne.n	8008ac0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ab2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e010      	b.n	8008ae2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 ff61 	bl	8009988 <HAL_SD_GetCardState>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d1e7      	bne.n	8008a9c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3728      	adds	r7, #40	@ 0x28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b08d      	sub	sp, #52	@ 0x34
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008af8:	2300      	movs	r3, #0
 8008afa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b04:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008b08:	f04f 0100 	mov.w	r1, #0
 8008b0c:	f7fe fc76 	bl	80073fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b10:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b26:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e070      	b.n	8008c0e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	0a1b      	lsrs	r3, r3, #8
 8008b30:	4a39      	ldr	r2, [pc, #228]	@ (8008c18 <HAL_SD_InitCard+0x12c>)
 8008b32:	fba2 2303 	umull	r2, r3, r2, r3
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681c      	ldr	r4, [r3, #0]
 8008b3e:	466a      	mov	r2, sp
 8008b40:	f107 0318 	add.w	r3, r7, #24
 8008b44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b48:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b4c:	f107 030c 	add.w	r3, r7, #12
 8008b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b52:	4620      	mov	r0, r4
 8008b54:	f003 f882 	bl	800bc5c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f003 f8c5 	bl	800bcec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008b7a:	4a28      	ldr	r2, [pc, #160]	@ (8008c1c <HAL_SD_InitCard+0x130>)
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	3301      	adds	r3, #1
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f9 fd15 	bl	80025b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 ffea 	bl	8009b64 <SD_PowerON>
 8008b90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e02e      	b.n	8008c0e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 ff09 	bl	80099c8 <SD_InitCard>
 8008bb6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e01b      	b.n	8008c0e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008bde:	4618      	mov	r0, r3
 8008be0:	f003 f91a 	bl	800be18 <SDMMC_CmdBlockLength>
 8008be4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00f      	beq.n	8008c0c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8008c20 <HAL_SD_InitCard+0x134>)
 8008bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	372c      	adds	r7, #44	@ 0x2c
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd90      	pop	{r4, r7, pc}
 8008c16:	bf00      	nop
 8008c18:	014f8b59 	.word	0x014f8b59
 8008c1c:	00012110 	.word	0x00012110
 8008c20:	1fe00fff 	.word	0x1fe00fff

08008c24 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08c      	sub	sp, #48	@ 0x30
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d107      	bne.n	8008c4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c40:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e08d      	b.n	8008d68 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	f040 8086 	bne.w	8008d66 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d907      	bls.n	8008c7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c72:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e074      	b.n	8008d68 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2203      	movs	r2, #3
 8008c82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	025a      	lsls	r2, r3, #9
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d002      	beq.n	8008caa <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	025b      	lsls	r3, r3, #9
 8008ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	025b      	lsls	r3, r3, #9
 8008cb4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cb6:	2390      	movs	r3, #144	@ 0x90
 8008cb8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f107 0210 	add.w	r2, r7, #16
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f003 f875 	bl	800bdc0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ce4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d90a      	bls.n	8008d12 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2282      	movs	r2, #130	@ 0x82
 8008d00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f003 f8cb 	bl	800bea4 <SDMMC_CmdReadMultiBlock>
 8008d0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d10:	e009      	b.n	8008d26 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2281      	movs	r2, #129	@ 0x81
 8008d16:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f003 f89d 	bl	800be5e <SDMMC_CmdReadSingleBlock>
 8008d24:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d012      	beq.n	8008d52 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a0f      	ldr	r2, [pc, #60]	@ (8008d70 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008d32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e00a      	b.n	8008d68 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008d60:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e000      	b.n	8008d68 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008d66:	2302      	movs	r3, #2
  }
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3730      	adds	r7, #48	@ 0x30
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	1fe00fff 	.word	0x1fe00fff

08008d74 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08c      	sub	sp, #48	@ 0x30
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e08d      	b.n	8008eb8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	f040 8086 	bne.w	8008eb6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	441a      	add	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d907      	bls.n	8008dce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e074      	b.n	8008eb8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2203      	movs	r2, #3
 8008dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	025a      	lsls	r2, r3, #9
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d002      	beq.n	8008dfa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df6:	025b      	lsls	r3, r3, #9
 8008df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	025b      	lsls	r3, r3, #9
 8008e04:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e06:	2390      	movs	r3, #144	@ 0x90
 8008e08:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f107 0210 	add.w	r2, r7, #16
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f002 ffcd 	bl	800bdc0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e34:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d90a      	bls.n	8008e62 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	22a0      	movs	r2, #160	@ 0xa0
 8008e50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f003 f869 	bl	800bf30 <SDMMC_CmdWriteMultiBlock>
 8008e5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e60:	e009      	b.n	8008e76 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2290      	movs	r2, #144	@ 0x90
 8008e66:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f003 f83b 	bl	800beea <SDMMC_CmdWriteSingleBlock>
 8008e74:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d012      	beq.n	8008ea2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008e82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e00a      	b.n	8008eb8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e000      	b.n	8008eb8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008eb6:	2302      	movs	r3, #2
  }
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3730      	adds	r7, #48	@ 0x30
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	1fe00fff 	.word	0x1fe00fff

08008ec4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <HAL_SD_IRQHandler+0x2e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f003 0308 	and.w	r3, r3, #8
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f926 	bl	800a13c <SD_Read_IT>
 8008ef0:	e19a      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80ac 	beq.w	800905a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f0a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	4b59      	ldr	r3, [pc, #356]	@ (800907c <HAL_SD_IRQHandler+0x1b8>)
 8008f18:	400b      	ands	r3, r1
 8008f1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f3a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f003 0308 	and.w	r3, r3, #8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d038      	beq.n	8008fb8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d104      	bne.n	8008f5a <HAL_SD_IRQHandler+0x96>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d011      	beq.n	8008f7e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f003 f80a 	bl	800bf78 <SDMMC_CmdStopTransfer>
 8008f64:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f95b 	bl	8009234 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a3f      	ldr	r2, [pc, #252]	@ (8009080 <HAL_SD_IRQHandler+0x1bc>)
 8008f84:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <HAL_SD_IRQHandler+0xe4>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f003 fcbd 	bl	800c928 <HAL_SD_RxCpltCallback>
 8008fae:	e13b      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f003 fcaf 	bl	800c914 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fb6:	e137      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8132 	beq.w	8009228 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <HAL_SD_IRQHandler+0x12c>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d011      	beq.n	8009014 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f002 ffbf 	bl	800bf78 <SDMMC_CmdStopTransfer>
 8008ffa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f910 	bl	8009234 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <HAL_SD_IRQHandler+0x172>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f003 fc6c 	bl	800c914 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d105      	bne.n	8009052 <HAL_SD_IRQHandler+0x18e>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80eb 	beq.w	8009228 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f003 fc68 	bl	800c928 <HAL_SD_RxCpltCallback>
}
 8009058:	e0e6      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00d      	beq.n	8009084 <HAL_SD_IRQHandler+0x1c0>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 f8a8 	bl	800a1c8 <SD_Write_IT>
 8009078:	e0d6      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
 800907a:	bf00      	nop
 800907c:	ffff3ec5 	.word	0xffff3ec5
 8009080:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 809d 	beq.w	80091ce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a6:	f043 0202 	orr.w	r2, r3, #2
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c0:	f043 0208 	orr.w	r2, r3, #8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090da:	f043 0220 	orr.w	r2, r3, #32
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f4:	f043 0210 	orr.w	r2, r3, #16
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a4b      	ldr	r2, [pc, #300]	@ (8009230 <HAL_SD_IRQHandler+0x36c>)
 8009102:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009112:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009122:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009132:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009142:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f002 ff15 	bl	800bf78 <SDMMC_CmdStopTransfer>
 800914e:	4602      	mov	r2, r0
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009168:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009172:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f851 	bl	8009234 <HAL_SD_ErrorCallback>
}
 8009192:	e049      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919a:	2b00      	cmp	r3, #0
 800919c:	d044      	beq.n	8009228 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d040      	beq.n	8009228 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80091b4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2200      	movs	r2, #0
 80091bc:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f834 	bl	8009234 <HAL_SD_ErrorCallback>
}
 80091cc:	e02c      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d025      	beq.n	8009228 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f001 f84a 	bl	800a298 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009204:	e010      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 f832 	bl	800a270 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800920c:	e00c      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 f833 	bl	800a284 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800921e:	e003      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f001 f81b 	bl	800a25c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009226:	e7ff      	b.n	8009228 <HAL_SD_IRQHandler+0x364>
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	18000f3a 	.word	0x18000f3a

08009234 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009256:	0f9b      	lsrs	r3, r3, #30
 8009258:	b2da      	uxtb	r2, r3
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009262:	0e9b      	lsrs	r3, r3, #26
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	b2da      	uxtb	r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009274:	0e1b      	lsrs	r3, r3, #24
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	b2da      	uxtb	r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	b2da      	uxtb	r2, r3
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	b2da      	uxtb	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a8:	0d1b      	lsrs	r3, r3, #20
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092b4:	0c1b      	lsrs	r3, r3, #16
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 030f 	and.w	r3, r3, #15
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c6:	0bdb      	lsrs	r3, r3, #15
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d8:	0b9b      	lsrs	r3, r3, #14
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ea:	0b5b      	lsrs	r3, r3, #13
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092fc:	0b1b      	lsrs	r3, r3, #12
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	b2da      	uxtb	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	2b00      	cmp	r3, #0
 8009316:	d163      	bne.n	80093e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800931c:	009a      	lsls	r2, r3, #2
 800931e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009322:	4013      	ands	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009328:	0f92      	lsrs	r2, r2, #30
 800932a:	431a      	orrs	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009334:	0edb      	lsrs	r3, r3, #27
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	b2da      	uxtb	r2, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009346:	0e1b      	lsrs	r3, r3, #24
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	b2da      	uxtb	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009358:	0d5b      	lsrs	r3, r3, #21
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800936a:	0c9b      	lsrs	r3, r3, #18
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	b2da      	uxtb	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800937c:	0bdb      	lsrs	r3, r3, #15
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	7e1b      	ldrb	r3, [r3, #24]
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	3302      	adds	r3, #2
 80093a0:	2201      	movs	r2, #1
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80093aa:	fb03 f202 	mul.w	r2, r3, r2
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	7a1b      	ldrb	r3, [r3, #8]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f003 030f 	and.w	r3, r3, #15
 80093bc:	2201      	movs	r2, #1
 80093be:	409a      	lsls	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80093cc:	0a52      	lsrs	r2, r2, #9
 80093ce:	fb03 f202 	mul.w	r2, r3, r2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80093de:	e031      	b.n	8009444 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d11d      	bne.n	8009424 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ec:	041b      	lsls	r3, r3, #16
 80093ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	431a      	orrs	r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	3301      	adds	r3, #1
 8009404:	029a      	lsls	r2, r3, #10
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009418:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	655a      	str	r2, [r3, #84]	@ 0x54
 8009422:	e00f      	b.n	8009444 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a58      	ldr	r2, [pc, #352]	@ (800958c <HAL_SD_GetCardCSD+0x344>)
 800942a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009430:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e09d      	b.n	8009580 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009448:	0b9b      	lsrs	r3, r3, #14
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	b2da      	uxtb	r2, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800945a:	09db      	lsrs	r3, r3, #7
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009462:	b2da      	uxtb	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009472:	b2da      	uxtb	r2, r3
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800947c:	0fdb      	lsrs	r3, r3, #31
 800947e:	b2da      	uxtb	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009488:	0f5b      	lsrs	r3, r3, #29
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0303 	and.w	r3, r3, #3
 8009490:	b2da      	uxtb	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800949a:	0e9b      	lsrs	r3, r3, #26
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ac:	0d9b      	lsrs	r3, r3, #22
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094be:	0d5b      	lsrs	r3, r3, #21
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ee:	0bdb      	lsrs	r3, r3, #15
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009502:	0b9b      	lsrs	r3, r3, #14
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	b2da      	uxtb	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009516:	0b5b      	lsrs	r3, r3, #13
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800952a:	0b1b      	lsrs	r3, r3, #12
 800952c:	b2db      	uxtb	r3, r3
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800953e:	0a9b      	lsrs	r3, r3, #10
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 0303 	and.w	r3, r3, #3
 8009546:	b2da      	uxtb	r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	b2da      	uxtb	r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009566:	085b      	lsrs	r3, r3, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800956e:	b2da      	uxtb	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	1fe00fff 	.word	0x1fe00fff

08009590 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b094      	sub	sp, #80	@ 0x50
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d101      	bne.n	80095b0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e0a7      	b.n	8009700 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095b0:	f107 0308 	add.w	r3, r7, #8
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fb62 	bl	8009c80 <SD_SendSDStatus>
 80095bc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d011      	beq.n	80095e8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a4f      	ldr	r2, [pc, #316]	@ (8009708 <HAL_SD_GetCardStatus+0x178>)
 80095ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80095e6:	e070      	b.n	80096ca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	099b      	lsrs	r3, r3, #6
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	0a1b      	lsrs	r3, r3, #8
 800960c:	b29b      	uxth	r3, r3
 800960e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009612:	b29a      	uxth	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	0e1b      	lsrs	r3, r3, #24
 8009618:	b29b      	uxth	r3, r3
 800961a:	4313      	orrs	r3, r2
 800961c:	b29a      	uxth	r2, r3
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	061a      	lsls	r2, r3, #24
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800962e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009638:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	0e1b      	lsrs	r3, r3, #24
 800963e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	b2da      	uxtb	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	b2da      	uxtb	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	0d1b      	lsrs	r3, r3, #20
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	b2da      	uxtb	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	0c1b      	lsrs	r3, r3, #16
 800966a:	b29b      	uxth	r3, r3
 800966c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009670:	b29a      	uxth	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	b29b      	uxth	r3, r3
 8009676:	b2db      	uxtb	r3, r3
 8009678:	b29b      	uxth	r3, r3
 800967a:	4313      	orrs	r3, r2
 800967c:	b29a      	uxth	r2, r3
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	0a9b      	lsrs	r3, r3, #10
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800968c:	b2da      	uxtb	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	0a1b      	lsrs	r3, r3, #8
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	b2da      	uxtb	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	091b      	lsrs	r3, r3, #4
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	f003 030f 	and.w	r3, r3, #15
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	0e1b      	lsrs	r3, r3, #24
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096d2:	4618      	mov	r0, r3
 80096d4:	f002 fba0 	bl	800be18 <SDMMC_CmdBlockLength>
 80096d8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00d      	beq.n	80096fc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a08      	ldr	r2, [pc, #32]	@ (8009708 <HAL_SD_GetCardStatus+0x178>)
 80096e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ec:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80096fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009700:	4618      	mov	r0, r3
 8009702:	3750      	adds	r7, #80	@ 0x50
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	1fe00fff 	.word	0x1fe00fff

0800970c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009764:	b590      	push	{r4, r7, lr}
 8009766:	b08d      	sub	sp, #52	@ 0x34
 8009768:	af02      	add	r7, sp, #8
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2203      	movs	r2, #3
 8009778:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	2b03      	cmp	r3, #3
 8009782:	d02e      	beq.n	80097e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800978a:	d106      	bne.n	800979a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009790:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	635a      	str	r2, [r3, #52]	@ 0x34
 8009798:	e029      	b.n	80097ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a0:	d10a      	bne.n	80097b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fb64 	bl	8009e70 <SD_WideBus_Enable>
 80097a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80097b6:	e01a      	b.n	80097ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fba1 	bl	8009f06 <SD_WideBus_Disable>
 80097c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80097d2:	e00c      	b.n	80097ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	635a      	str	r2, [r3, #52]	@ 0x34
 80097e0:	e005      	b.n	80097ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a5f      	ldr	r2, [pc, #380]	@ (8009978 <HAL_SD_ConfigWideBusOperation+0x214>)
 80097fc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009804:	e096      	b.n	8009934 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009806:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800980a:	f04f 0100 	mov.w	r1, #0
 800980e:	f7fd fdf5 	bl	80073fc <HAL_RCCEx_GetPeriphCLKFreq>
 8009812:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 8083 	beq.w	8009922 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695a      	ldr	r2, [r3, #20]
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4950      	ldr	r1, [pc, #320]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x218>)
 800983a:	fba1 1303 	umull	r1, r3, r1, r3
 800983e:	0e1b      	lsrs	r3, r3, #24
 8009840:	429a      	cmp	r2, r3
 8009842:	d303      	bcc.n	800984c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	e05a      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009854:	d103      	bne.n	800985e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	e051      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009866:	d126      	bne.n	80098b6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10e      	bne.n	800988e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	4a43      	ldr	r2, [pc, #268]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d906      	bls.n	8009886 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4a40      	ldr	r2, [pc, #256]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x218>)
 800987c:	fba2 2303 	umull	r2, r3, r2, r3
 8009880:	0e5b      	lsrs	r3, r3, #25
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	e03d      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e039      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	4a39      	ldr	r2, [pc, #228]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d906      	bls.n	80098ae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	4a36      	ldr	r2, [pc, #216]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x218>)
 80098a4:	fba2 2303 	umull	r2, r3, r2, r3
 80098a8:	0e5b      	lsrs	r3, r3, #25
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	e029      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	61bb      	str	r3, [r7, #24]
 80098b4:	e025      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10e      	bne.n	80098dc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4a30      	ldr	r2, [pc, #192]	@ (8009984 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d906      	bls.n	80098d4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4a2c      	ldr	r2, [pc, #176]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x218>)
 80098ca:	fba2 2303 	umull	r2, r3, r2, r3
 80098ce:	0e1b      	lsrs	r3, r3, #24
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e016      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	e012      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e8:	4a26      	ldr	r2, [pc, #152]	@ (8009984 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d906      	bls.n	80098fc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4a22      	ldr	r2, [pc, #136]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x218>)
 80098f2:	fba2 2303 	umull	r2, r3, r2, r3
 80098f6:	0e1b      	lsrs	r3, r3, #24
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	e002      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681c      	ldr	r4, [r3, #0]
 8009906:	466a      	mov	r2, sp
 8009908:	f107 0314 	add.w	r3, r7, #20
 800990c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009910:	e882 0003 	stmia.w	r2, {r0, r1}
 8009914:	f107 0308 	add.w	r3, r7, #8
 8009918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800991a:	4620      	mov	r0, r4
 800991c:	f002 f99e 	bl	800bc5c <SDMMC_Init>
 8009920:	e008      	b.n	8009934 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009926:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800993c:	4618      	mov	r0, r3
 800993e:	f002 fa6b 	bl	800be18 <SDMMC_CmdBlockLength>
 8009942:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00c      	beq.n	8009964 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0a      	ldr	r2, [pc, #40]	@ (8009978 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009950:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009970:	4618      	mov	r0, r3
 8009972:	372c      	adds	r7, #44	@ 0x2c
 8009974:	46bd      	mov	sp, r7
 8009976:	bd90      	pop	{r4, r7, pc}
 8009978:	1fe00fff 	.word	0x1fe00fff
 800997c:	55e63b89 	.word	0x55e63b89
 8009980:	02faf080 	.word	0x02faf080
 8009984:	017d7840 	.word	0x017d7840

08009988 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009994:	f107 030c 	add.w	r3, r7, #12
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fa40 	bl	8009e20 <SD_SendStatus>
 80099a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0a5b      	lsrs	r3, r3, #9
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099be:	693b      	ldr	r3, [r7, #16]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b090      	sub	sp, #64	@ 0x40
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80099d4:	f7f8 fde2 	bl	800259c <HAL_GetTick>
 80099d8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f002 f995 	bl	800bd0e <SDMMC_GetPowerState>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80099ee:	e0b5      	b.n	8009b5c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d02e      	beq.n	8009a56 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f002 fbe0 	bl	800c1c2 <SDMMC_CmdSendCID>
 8009a02:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <SD_InitCard+0x46>
    {
      return errorstate;
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	e0a6      	b.n	8009b5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 f9c0 	bl	800bd9a <SDMMC_GetResponse>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2104      	movs	r1, #4
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 f9b7 	bl	800bd9a <SDMMC_GetResponse>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2108      	movs	r1, #8
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 f9ae 	bl	800bd9a <SDMMC_GetResponse>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	210c      	movs	r1, #12
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 f9a5 	bl	800bd9a <SDMMC_GetResponse>
 8009a50:	4602      	mov	r2, r0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d01d      	beq.n	8009a9a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a5e:	e019      	b.n	8009a94 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f107 020a 	add.w	r2, r7, #10
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 fbe8 	bl	800c240 <SDMMC_CmdSetRelAdd>
 8009a70:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <SD_InitCard+0xb4>
      {
        return errorstate;
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	e06f      	b.n	8009b5c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009a7c:	f7f8 fd8e 	bl	800259c <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d902      	bls.n	8009a94 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009a8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a92:	e063      	b.n	8009b5c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009a94:	897b      	ldrh	r3, [r7, #10]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0e2      	beq.n	8009a60 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d036      	beq.n	8009b10 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009aa2:	897b      	ldrh	r3, [r7, #10]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab2:	041b      	lsls	r3, r3, #16
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f002 fba2 	bl	800c200 <SDMMC_CmdSendCSD>
 8009abc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <SD_InitCard+0x100>
    {
      return errorstate;
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac6:	e049      	b.n	8009b5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2100      	movs	r1, #0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f002 f963 	bl	800bd9a <SDMMC_GetResponse>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2104      	movs	r1, #4
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f002 f95a 	bl	800bd9a <SDMMC_GetResponse>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2108      	movs	r1, #8
 8009af2:	4618      	mov	r0, r3
 8009af4:	f002 f951 	bl	800bd9a <SDMMC_GetResponse>
 8009af8:	4602      	mov	r2, r0
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	210c      	movs	r1, #12
 8009b04:	4618      	mov	r0, r3
 8009b06:	f002 f948 	bl	800bd9a <SDMMC_GetResponse>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2104      	movs	r1, #4
 8009b16:	4618      	mov	r0, r3
 8009b18:	f002 f93f 	bl	800bd9a <SDMMC_GetResponse>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	0d1a      	lsrs	r2, r3, #20
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b24:	f107 030c 	add.w	r3, r7, #12
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fb8c 	bl	8009248 <HAL_SD_GetCardCSD>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b3a:	e00f      	b.n	8009b5c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	4619      	mov	r1, r3
 8009b48:	4610      	mov	r0, r2
 8009b4a:	f002 fa51 	bl	800bff0 <SDMMC_CmdSelDesel>
 8009b4e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <SD_InitCard+0x192>
  {
    return errorstate;
 8009b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b58:	e000      	b.n	8009b5c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3740      	adds	r7, #64	@ 0x40
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 fa5a 	bl	800c036 <SDMMC_CmdGoIdleState>
 8009b82:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	e072      	b.n	8009c74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f002 fa6d 	bl	800c072 <SDMMC_CmdOperCond>
 8009b98:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ba0:	d10d      	bne.n	8009bbe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 fa42 	bl	800c036 <SDMMC_CmdGoIdleState>
 8009bb2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <SD_PowerON+0x60>
    {
      return errorstate;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	e05a      	b.n	8009c74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d137      	bne.n	8009c3c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 fa6d 	bl	800c0b2 <SDMMC_CmdAppCommand>
 8009bd8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d02d      	beq.n	8009c3c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009be0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009be4:	e046      	b.n	8009c74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2100      	movs	r1, #0
 8009bec:	4618      	mov	r0, r3
 8009bee:	f002 fa60 	bl	800c0b2 <SDMMC_CmdAppCommand>
 8009bf2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <SD_PowerON+0x9a>
    {
      return errorstate;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	e03a      	b.n	8009c74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	491e      	ldr	r1, [pc, #120]	@ (8009c7c <SD_PowerON+0x118>)
 8009c04:	4618      	mov	r0, r3
 8009c06:	f002 fa77 	bl	800c0f8 <SDMMC_CmdAppOperCommand>
 8009c0a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c16:	e02d      	b.n	8009c74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 f8bb 	bl	800bd9a <SDMMC_GetResponse>
 8009c24:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	0fdb      	lsrs	r3, r3, #31
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <SD_PowerON+0xce>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <SD_PowerON+0xd0>
 8009c32:	2300      	movs	r3, #0
 8009c34:	613b      	str	r3, [r7, #16]

    count++;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d802      	bhi.n	8009c4c <SD_PowerON+0xe8>
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0cc      	beq.n	8009be6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d902      	bls.n	8009c5c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c5a:	e00b      	b.n	8009c74 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	c1100000 	.word	0xc1100000

08009c80 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08c      	sub	sp, #48	@ 0x30
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c8a:	f7f8 fc87 	bl	800259c <HAL_GetTick>
 8009c8e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f002 f87d 	bl	800bd9a <SDMMC_GetResponse>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009caa:	d102      	bne.n	8009cb2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cb0:	e0b0      	b.n	8009e14 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2140      	movs	r1, #64	@ 0x40
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f002 f8ad 	bl	800be18 <SDMMC_CmdBlockLength>
 8009cbe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d005      	beq.n	8009cd2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	e0a0      	b.n	8009e14 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f002 f9e7 	bl	800c0b2 <SDMMC_CmdAppCommand>
 8009ce4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	e08d      	b.n	8009e14 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009cfe:	2340      	movs	r3, #64	@ 0x40
 8009d00:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d02:	2360      	movs	r3, #96	@ 0x60
 8009d04:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d06:	2302      	movs	r3, #2
 8009d08:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f107 0208 	add.w	r2, r7, #8
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f002 f84f 	bl	800bdc0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f002 facf 	bl	800c2ca <SDMMC_CmdStatusRegister>
 8009d2c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d02b      	beq.n	8009d8c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	e069      	b.n	8009e14 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d013      	beq.n	8009d76 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d4e:	2300      	movs	r3, #0
 8009d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d52:	e00d      	b.n	8009d70 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 ffa9 	bl	800bcb0 <SDMMC_ReadFIFO>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d62:	601a      	str	r2, [r3, #0]
        pData++;
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	3304      	adds	r3, #4
 8009d68:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	2b07      	cmp	r3, #7
 8009d74:	d9ee      	bls.n	8009d54 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d76:	f7f8 fc11 	bl	800259c <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d84:	d102      	bne.n	8009d8c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d86:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d8a:	e043      	b.n	8009e14 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d92:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0d2      	beq.n	8009d40 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da0:	f003 0308 	and.w	r3, r3, #8
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009da8:	2308      	movs	r3, #8
 8009daa:	e033      	b.n	8009e14 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	e02a      	b.n	8009e14 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc4:	f003 0320 	and.w	r3, r3, #32
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d017      	beq.n	8009dfc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009dcc:	2320      	movs	r3, #32
 8009dce:	e021      	b.n	8009e14 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 ff6b 	bl	800bcb0 <SDMMC_ReadFIFO>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dde:	601a      	str	r2, [r3, #0]
    pData++;
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	3304      	adds	r3, #4
 8009de4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009de6:	f7f8 fbd9 	bl	800259c <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df4:	d102      	bne.n	8009dfc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009df6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dfa:	e00b      	b.n	8009e14 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e2      	bne.n	8009dd0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a03      	ldr	r2, [pc, #12]	@ (8009e1c <SD_SendSDStatus+0x19c>)
 8009e10:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3730      	adds	r7, #48	@ 0x30
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	18000f3a 	.word	0x18000f3a

08009e20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e34:	e018      	b.n	8009e68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3e:	041b      	lsls	r3, r3, #16
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f002 fa1e 	bl	800c284 <SDMMC_CmdSendStatus>
 8009e48:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	e009      	b.n	8009e68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 ff9d 	bl	800bd9a <SDMMC_GetResponse>
 8009e60:	4602      	mov	r2, r0
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2100      	movs	r1, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f001 ff87 	bl	800bd9a <SDMMC_GetResponse>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e96:	d102      	bne.n	8009e9e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e9c:	e02f      	b.n	8009efe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e9e:	f107 030c 	add.w	r3, r7, #12
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f879 	bl	8009f9c <SD_FindSCR>
 8009eaa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	e023      	b.n	8009efe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01c      	beq.n	8009efa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ec8:	041b      	lsls	r3, r3, #16
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f002 f8f0 	bl	800c0b2 <SDMMC_CmdAppCommand>
 8009ed2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	e00f      	b.n	8009efe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2102      	movs	r1, #2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f002 f927 	bl	800c138 <SDMMC_CmdBusWidth>
 8009eea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	e003      	b.n	8009efe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e001      	b.n	8009efe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009efa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	2300      	movs	r3, #0
 8009f14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 ff3c 	bl	800bd9a <SDMMC_GetResponse>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f2c:	d102      	bne.n	8009f34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f32:	e02f      	b.n	8009f94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f34:	f107 030c 	add.w	r3, r7, #12
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f82e 	bl	8009f9c <SD_FindSCR>
 8009f40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	e023      	b.n	8009f94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01c      	beq.n	8009f90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5e:	041b      	lsls	r3, r3, #16
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f002 f8a5 	bl	800c0b2 <SDMMC_CmdAppCommand>
 8009f68:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	e00f      	b.n	8009f94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f002 f8dc 	bl	800c138 <SDMMC_CmdBusWidth>
 8009f80:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	e003      	b.n	8009f94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e001      	b.n	8009f94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f90:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08e      	sub	sp, #56	@ 0x38
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fa6:	f7f8 faf9 	bl	800259c <HAL_GetTick>
 8009faa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60bb      	str	r3, [r7, #8]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2108      	movs	r1, #8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 ff28 	bl	800be18 <SDMMC_CmdBlockLength>
 8009fc8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	e0ad      	b.n	800a130 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fdc:	041b      	lsls	r3, r3, #16
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f002 f866 	bl	800c0b2 <SDMMC_CmdAppCommand>
 8009fe6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff0:	e09e      	b.n	800a130 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009ffc:	2330      	movs	r3, #48	@ 0x30
 8009ffe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a000:	2302      	movs	r3, #2
 800a002:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a004:	2300      	movs	r3, #0
 800a006:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a008:	2301      	movs	r3, #1
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f107 0210 	add.w	r2, r7, #16
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f001 fed2 	bl	800bdc0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4618      	mov	r0, r3
 800a022:	f002 f8ac 	bl	800c17e <SDMMC_CmdSendSCR>
 800a026:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d027      	beq.n	800a07e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	e07e      	b.n	800a130 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d113      	bne.n	800a068 <SD_FindSCR+0xcc>
 800a040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a042:	2b00      	cmp	r3, #0
 800a044:	d110      	bne.n	800a068 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 fe30 	bl	800bcb0 <SDMMC_ReadFIFO>
 800a050:	4603      	mov	r3, r0
 800a052:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fe29 	bl	800bcb0 <SDMMC_ReadFIFO>
 800a05e:	4603      	mov	r3, r0
 800a060:	60fb      	str	r3, [r7, #12]
      index++;
 800a062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a064:	3301      	adds	r3, #1
 800a066:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a068:	f7f8 fa98 	bl	800259c <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a076:	d102      	bne.n	800a07e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a078:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a07c:	e058      	b.n	800a130 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a084:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0d1      	beq.n	800a032 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0a4:	2308      	movs	r3, #8
 800a0a6:	e043      	b.n	800a130 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e036      	b.n	800a130 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a0d8:	2320      	movs	r3, #32
 800a0da:	e029      	b.n	800a130 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a15      	ldr	r2, [pc, #84]	@ (800a138 <SD_FindSCR+0x19c>)
 800a0e2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	061a      	lsls	r2, r3, #24
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	0a1b      	lsrs	r3, r3, #8
 800a0f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	0e1b      	lsrs	r3, r3, #24
 800a100:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a104:	601a      	str	r2, [r3, #0]
    scr++;
 800a106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a108:	3304      	adds	r3, #4
 800a10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	061a      	lsls	r2, r3, #24
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a118:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	0a1b      	lsrs	r3, r3, #8
 800a11e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a122:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	0e1b      	lsrs	r3, r3, #24
 800a128:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3738      	adds	r7, #56	@ 0x38
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	18000f3a 	.word	0x18000f3a

0800a13c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a148:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14e:	2b1f      	cmp	r3, #31
 800a150:	d936      	bls.n	800a1c0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	e027      	b.n	800a1a8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 fda7 	bl	800bcb0 <SDMMC_ReadFIFO>
 800a162:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	b2da      	uxtb	r2, r3
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	3301      	adds	r3, #1
 800a170:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	0a1b      	lsrs	r3, r3, #8
 800a176:	b2da      	uxtb	r2, r3
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3301      	adds	r3, #1
 800a180:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	0c1b      	lsrs	r3, r3, #16
 800a186:	b2da      	uxtb	r2, r3
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	3301      	adds	r3, #1
 800a190:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	0e1b      	lsrs	r3, r3, #24
 800a196:	b2da      	uxtb	r2, r3
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b07      	cmp	r3, #7
 800a1ac:	d9d4      	bls.n	800a158 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b8:	f1a3 0220 	sub.w	r2, r3, #32
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a1c0:	bf00      	nop
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	2b1f      	cmp	r3, #31
 800a1dc:	d93a      	bls.n	800a254 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	e02b      	b.n	800a23c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	021a      	lsls	r2, r3, #8
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	3301      	adds	r3, #1
 800a200:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	041a      	lsls	r2, r3, #16
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	061a      	lsls	r2, r3, #24
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	3301      	adds	r3, #1
 800a224:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f107 020c 	add.w	r2, r7, #12
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f001 fd4a 	bl	800bcca <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	3301      	adds	r3, #1
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b07      	cmp	r3, #7
 800a240:	d9d0      	bls.n	800a1e4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	f1a3 0220 	sub.w	r2, r3, #32
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	621a      	str	r2, [r3, #32]
  }
}
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e10f      	b.n	800a4de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a87      	ldr	r2, [pc, #540]	@ (800a4e8 <HAL_SPI_Init+0x23c>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00f      	beq.n	800a2ee <HAL_SPI_Init+0x42>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a86      	ldr	r2, [pc, #536]	@ (800a4ec <HAL_SPI_Init+0x240>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d00a      	beq.n	800a2ee <HAL_SPI_Init+0x42>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a84      	ldr	r2, [pc, #528]	@ (800a4f0 <HAL_SPI_Init+0x244>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d005      	beq.n	800a2ee <HAL_SPI_Init+0x42>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d901      	bls.n	800a2ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e0f7      	b.n	800a4de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fbbc 	bl	800aa6c <SPI_GetPacketSize>
 800a2f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a7b      	ldr	r2, [pc, #492]	@ (800a4e8 <HAL_SPI_Init+0x23c>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00c      	beq.n	800a31a <HAL_SPI_Init+0x6e>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a79      	ldr	r2, [pc, #484]	@ (800a4ec <HAL_SPI_Init+0x240>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d007      	beq.n	800a31a <HAL_SPI_Init+0x6e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a78      	ldr	r2, [pc, #480]	@ (800a4f0 <HAL_SPI_Init+0x244>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d002      	beq.n	800a31a <HAL_SPI_Init+0x6e>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b08      	cmp	r3, #8
 800a318:	d811      	bhi.n	800a33e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a31e:	4a72      	ldr	r2, [pc, #456]	@ (800a4e8 <HAL_SPI_Init+0x23c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d009      	beq.n	800a338 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a70      	ldr	r2, [pc, #448]	@ (800a4ec <HAL_SPI_Init+0x240>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d004      	beq.n	800a338 <HAL_SPI_Init+0x8c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a6f      	ldr	r2, [pc, #444]	@ (800a4f0 <HAL_SPI_Init+0x244>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d104      	bne.n	800a342 <HAL_SPI_Init+0x96>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b10      	cmp	r3, #16
 800a33c:	d901      	bls.n	800a342 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e0cd      	b.n	800a4de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d106      	bne.n	800a35c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7f7 ff28 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a37e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a388:	d119      	bne.n	800a3be <HAL_SPI_Init+0x112>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a392:	d103      	bne.n	800a39c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d008      	beq.n	800a3ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10c      	bne.n	800a3be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ac:	d107      	bne.n	800a3be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00f      	beq.n	800a3ea <HAL_SPI_Init+0x13e>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	2b06      	cmp	r3, #6
 800a3d0:	d90b      	bls.n	800a3ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	e007      	b.n	800a3fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a3f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69da      	ldr	r2, [r3, #28]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	431a      	orrs	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a40c:	ea42 0103 	orr.w	r1, r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	431a      	orrs	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	431a      	orrs	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a45a:	ea42 0103 	orr.w	r1, r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d113      	bne.n	800a49a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a484:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a498:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 0201 	bic.w	r2, r2, #1
 800a4a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00a      	beq.n	800a4cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	40013000 	.word	0x40013000
 800a4ec:	40003800 	.word	0x40003800
 800a4f0:	40003c00 	.word	0x40003c00

0800a4f4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4613      	mov	r3, r2
 800a502:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3320      	adds	r3, #32
 800a50a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a50c:	f7f8 f846 	bl	800259c <HAL_GetTick>
 800a510:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d001      	beq.n	800a522 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a51e:	2302      	movs	r3, #2
 800a520:	e1d1      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <HAL_SPI_Transmit+0x3a>
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e1c9      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d101      	bne.n	800a540 <HAL_SPI_Transmit+0x4c>
 800a53c:	2302      	movs	r3, #2
 800a53e:	e1c2      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2203      	movs	r2, #3
 800a54c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	88fa      	ldrh	r2, [r7, #6]
 800a562:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	88fa      	ldrh	r2, [r7, #6]
 800a56a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a598:	d108      	bne.n	800a5ac <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	e009      	b.n	800a5c0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a5be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	4b96      	ldr	r3, [pc, #600]	@ (800a820 <HAL_SPI_Transmit+0x32c>)
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	88f9      	ldrh	r1, [r7, #6]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5ec:	d107      	bne.n	800a5fe <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	2b0f      	cmp	r3, #15
 800a604:	d947      	bls.n	800a696 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a606:	e03f      	b.n	800a688 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b02      	cmp	r3, #2
 800a614:	d114      	bne.n	800a640 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a632:	b29b      	uxth	r3, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	b29a      	uxth	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a63e:	e023      	b.n	800a688 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a640:	f7f7 ffac 	bl	800259c <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d803      	bhi.n	800a658 <HAL_SPI_Transmit+0x164>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a656:	d102      	bne.n	800a65e <HAL_SPI_Transmit+0x16a>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d114      	bne.n	800a688 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f936 	bl	800a8d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a66a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e11e      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a68e:	b29b      	uxth	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1b9      	bne.n	800a608 <HAL_SPI_Transmit+0x114>
 800a694:	e0f1      	b.n	800a87a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	2b07      	cmp	r3, #7
 800a69c:	f240 80e6 	bls.w	800a86c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6a0:	e05d      	b.n	800a75e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d132      	bne.n	800a716 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d918      	bls.n	800a6ee <HAL_SPI_Transmit+0x1fa>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d014      	beq.n	800a6ee <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6d4:	1d1a      	adds	r2, r3, #4
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b02      	subs	r3, #2
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a6ec:	e037      	b.n	800a75e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6f2:	881a      	ldrh	r2, [r3, #0]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6fc:	1c9a      	adds	r2, r3, #2
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a714:	e023      	b.n	800a75e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a716:	f7f7 ff41 	bl	800259c <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d803      	bhi.n	800a72e <HAL_SPI_Transmit+0x23a>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d102      	bne.n	800a734 <HAL_SPI_Transmit+0x240>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d114      	bne.n	800a75e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 f8cb 	bl	800a8d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a740:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e0b3      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a764:	b29b      	uxth	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d19b      	bne.n	800a6a2 <HAL_SPI_Transmit+0x1ae>
 800a76a:	e086      	b.n	800a87a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	f003 0302 	and.w	r3, r3, #2
 800a776:	2b02      	cmp	r3, #2
 800a778:	d154      	bne.n	800a824 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a780:	b29b      	uxth	r3, r3
 800a782:	2b03      	cmp	r3, #3
 800a784:	d918      	bls.n	800a7b8 <HAL_SPI_Transmit+0x2c4>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a78a:	2b40      	cmp	r3, #64	@ 0x40
 800a78c:	d914      	bls.n	800a7b8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	3b04      	subs	r3, #4
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7b6:	e059      	b.n	800a86c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d917      	bls.n	800a7f4 <HAL_SPI_Transmit+0x300>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d013      	beq.n	800a7f4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7d0:	881a      	ldrh	r2, [r3, #0]
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7da:	1c9a      	adds	r2, r3, #2
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	3b02      	subs	r3, #2
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7f2:	e03b      	b.n	800a86c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3320      	adds	r3, #32
 800a7fe:	7812      	ldrb	r2, [r2, #0]
 800a800:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a81e:	e025      	b.n	800a86c <HAL_SPI_Transmit+0x378>
 800a820:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a824:	f7f7 feba 	bl	800259c <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d803      	bhi.n	800a83c <HAL_SPI_Transmit+0x348>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d102      	bne.n	800a842 <HAL_SPI_Transmit+0x34e>
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d114      	bne.n	800a86c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f844 	bl	800a8d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a84e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e02c      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a872:	b29b      	uxth	r3, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	f47f af79 	bne.w	800a76c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2200      	movs	r2, #0
 800a882:	2108      	movs	r1, #8
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 f8c3 	bl	800aa10 <SPI_WaitOnFlagUntilTimeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d007      	beq.n	800a8a0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a896:	f043 0220 	orr.w	r2, r3, #32
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 f815 	bl	800a8d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e000      	b.n	800a8c6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
  }
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop

0800a8d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f042 0208 	orr.w	r2, r2, #8
 800a8ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699a      	ldr	r2, [r3, #24]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f042 0210 	orr.w	r2, r2, #16
 800a8fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0201 	bic.w	r2, r2, #1
 800a90e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6919      	ldr	r1, [r3, #16]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	4b3c      	ldr	r3, [pc, #240]	@ (800aa0c <SPI_CloseTransfer+0x13c>)
 800a91c:	400b      	ands	r3, r1
 800a91e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a92e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d014      	beq.n	800a966 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f003 0320 	and.w	r3, r3, #32
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00f      	beq.n	800a966 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a94c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	699a      	ldr	r2, [r3, #24]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f042 0220 	orr.w	r2, r2, #32
 800a964:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d014      	beq.n	800a99c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00f      	beq.n	800a99c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a982:	f043 0204 	orr.w	r2, r3, #4
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699a      	ldr	r2, [r3, #24]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a99a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00f      	beq.n	800a9c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9ac:	f043 0201 	orr.w	r2, r3, #1
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	699a      	ldr	r2, [r3, #24]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00f      	beq.n	800a9f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9d6:	f043 0208 	orr.w	r2, r3, #8
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa00:	bf00      	nop
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	fffffc90 	.word	0xfffffc90

0800aa10 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	603b      	str	r3, [r7, #0]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa20:	e010      	b.n	800aa44 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa22:	f7f7 fdbb 	bl	800259c <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d803      	bhi.n	800aa3a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d102      	bne.n	800aa40 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e00f      	b.n	800aa64 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695a      	ldr	r2, [r3, #20]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	bf0c      	ite	eq
 800aa54:	2301      	moveq	r3, #1
 800aa56:	2300      	movne	r3, #0
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	79fb      	ldrb	r3, [r7, #7]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d0df      	beq.n	800aa22 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	3307      	adds	r3, #7
 800aa8a:	08db      	lsrs	r3, r3, #3
 800aa8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e042      	b.n	800ab3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7f7 fc00 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2224      	movs	r2, #36	@ 0x24
 800aad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0201 	bic.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fd91 	bl	800b614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f826 	bl	800ab44 <UART_SetConfig>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e01b      	b.n	800ab3a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	689a      	ldr	r2, [r3, #8]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0201 	orr.w	r2, r2, #1
 800ab30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fe10 	bl	800b758 <UART_CheckIdleState>
 800ab38:	4603      	mov	r3, r0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab48:	b092      	sub	sp, #72	@ 0x48
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	689a      	ldr	r2, [r3, #8]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	431a      	orrs	r2, r3
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	4bbe      	ldr	r3, [pc, #760]	@ (800ae6c <UART_SetConfig+0x328>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	6812      	ldr	r2, [r2, #0]
 800ab7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4ab3      	ldr	r2, [pc, #716]	@ (800ae70 <UART_SetConfig+0x32c>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d004      	beq.n	800abb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abac:	4313      	orrs	r3, r2
 800abae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	689a      	ldr	r2, [r3, #8]
 800abb6:	4baf      	ldr	r3, [pc, #700]	@ (800ae74 <UART_SetConfig+0x330>)
 800abb8:	4013      	ands	r3, r2
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	6812      	ldr	r2, [r2, #0]
 800abbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abc0:	430b      	orrs	r3, r1
 800abc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abca:	f023 010f 	bic.w	r1, r3, #15
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4aa6      	ldr	r2, [pc, #664]	@ (800ae78 <UART_SetConfig+0x334>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d177      	bne.n	800acd4 <UART_SetConfig+0x190>
 800abe4:	4ba5      	ldr	r3, [pc, #660]	@ (800ae7c <UART_SetConfig+0x338>)
 800abe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abec:	2b28      	cmp	r3, #40	@ 0x28
 800abee:	d86d      	bhi.n	800accc <UART_SetConfig+0x188>
 800abf0:	a201      	add	r2, pc, #4	@ (adr r2, 800abf8 <UART_SetConfig+0xb4>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ac9d 	.word	0x0800ac9d
 800abfc:	0800accd 	.word	0x0800accd
 800ac00:	0800accd 	.word	0x0800accd
 800ac04:	0800accd 	.word	0x0800accd
 800ac08:	0800accd 	.word	0x0800accd
 800ac0c:	0800accd 	.word	0x0800accd
 800ac10:	0800accd 	.word	0x0800accd
 800ac14:	0800accd 	.word	0x0800accd
 800ac18:	0800aca5 	.word	0x0800aca5
 800ac1c:	0800accd 	.word	0x0800accd
 800ac20:	0800accd 	.word	0x0800accd
 800ac24:	0800accd 	.word	0x0800accd
 800ac28:	0800accd 	.word	0x0800accd
 800ac2c:	0800accd 	.word	0x0800accd
 800ac30:	0800accd 	.word	0x0800accd
 800ac34:	0800accd 	.word	0x0800accd
 800ac38:	0800acad 	.word	0x0800acad
 800ac3c:	0800accd 	.word	0x0800accd
 800ac40:	0800accd 	.word	0x0800accd
 800ac44:	0800accd 	.word	0x0800accd
 800ac48:	0800accd 	.word	0x0800accd
 800ac4c:	0800accd 	.word	0x0800accd
 800ac50:	0800accd 	.word	0x0800accd
 800ac54:	0800accd 	.word	0x0800accd
 800ac58:	0800acb5 	.word	0x0800acb5
 800ac5c:	0800accd 	.word	0x0800accd
 800ac60:	0800accd 	.word	0x0800accd
 800ac64:	0800accd 	.word	0x0800accd
 800ac68:	0800accd 	.word	0x0800accd
 800ac6c:	0800accd 	.word	0x0800accd
 800ac70:	0800accd 	.word	0x0800accd
 800ac74:	0800accd 	.word	0x0800accd
 800ac78:	0800acbd 	.word	0x0800acbd
 800ac7c:	0800accd 	.word	0x0800accd
 800ac80:	0800accd 	.word	0x0800accd
 800ac84:	0800accd 	.word	0x0800accd
 800ac88:	0800accd 	.word	0x0800accd
 800ac8c:	0800accd 	.word	0x0800accd
 800ac90:	0800accd 	.word	0x0800accd
 800ac94:	0800accd 	.word	0x0800accd
 800ac98:	0800acc5 	.word	0x0800acc5
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e222      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800aca4:	2304      	movs	r3, #4
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e21e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800acac:	2308      	movs	r3, #8
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e21a      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800acb4:	2310      	movs	r3, #16
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e216      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800acbc:	2320      	movs	r3, #32
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e212      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800acc4:	2340      	movs	r3, #64	@ 0x40
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acca:	e20e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800accc:	2380      	movs	r3, #128	@ 0x80
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e20a      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a69      	ldr	r2, [pc, #420]	@ (800ae80 <UART_SetConfig+0x33c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d130      	bne.n	800ad40 <UART_SetConfig+0x1fc>
 800acde:	4b67      	ldr	r3, [pc, #412]	@ (800ae7c <UART_SetConfig+0x338>)
 800ace0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	2b05      	cmp	r3, #5
 800ace8:	d826      	bhi.n	800ad38 <UART_SetConfig+0x1f4>
 800acea:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <UART_SetConfig+0x1ac>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad09 	.word	0x0800ad09
 800acf4:	0800ad11 	.word	0x0800ad11
 800acf8:	0800ad19 	.word	0x0800ad19
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad29 	.word	0x0800ad29
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e1ec      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad10:	2304      	movs	r3, #4
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e1e8      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad18:	2308      	movs	r3, #8
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e1e4      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad20:	2310      	movs	r3, #16
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e1e0      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad28:	2320      	movs	r3, #32
 800ad2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2e:	e1dc      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad30:	2340      	movs	r3, #64	@ 0x40
 800ad32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad36:	e1d8      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad38:	2380      	movs	r3, #128	@ 0x80
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3e:	e1d4      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a4f      	ldr	r2, [pc, #316]	@ (800ae84 <UART_SetConfig+0x340>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d130      	bne.n	800adac <UART_SetConfig+0x268>
 800ad4a:	4b4c      	ldr	r3, [pc, #304]	@ (800ae7c <UART_SetConfig+0x338>)
 800ad4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	d826      	bhi.n	800ada4 <UART_SetConfig+0x260>
 800ad56:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <UART_SetConfig+0x218>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800ad75 	.word	0x0800ad75
 800ad60:	0800ad7d 	.word	0x0800ad7d
 800ad64:	0800ad85 	.word	0x0800ad85
 800ad68:	0800ad8d 	.word	0x0800ad8d
 800ad6c:	0800ad95 	.word	0x0800ad95
 800ad70:	0800ad9d 	.word	0x0800ad9d
 800ad74:	2300      	movs	r3, #0
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e1b6      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e1b2      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e1ae      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e1aa      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad94:	2320      	movs	r3, #32
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e1a6      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ad9c:	2340      	movs	r3, #64	@ 0x40
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada2:	e1a2      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ada4:	2380      	movs	r3, #128	@ 0x80
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e19e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a35      	ldr	r2, [pc, #212]	@ (800ae88 <UART_SetConfig+0x344>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d130      	bne.n	800ae18 <UART_SetConfig+0x2d4>
 800adb6:	4b31      	ldr	r3, [pc, #196]	@ (800ae7c <UART_SetConfig+0x338>)
 800adb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adba:	f003 0307 	and.w	r3, r3, #7
 800adbe:	2b05      	cmp	r3, #5
 800adc0:	d826      	bhi.n	800ae10 <UART_SetConfig+0x2cc>
 800adc2:	a201      	add	r2, pc, #4	@ (adr r2, 800adc8 <UART_SetConfig+0x284>)
 800adc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc8:	0800ade1 	.word	0x0800ade1
 800adcc:	0800ade9 	.word	0x0800ade9
 800add0:	0800adf1 	.word	0x0800adf1
 800add4:	0800adf9 	.word	0x0800adf9
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae09 	.word	0x0800ae09
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e180      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ade8:	2304      	movs	r3, #4
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e17c      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800adf0:	2308      	movs	r3, #8
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e178      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800adf8:	2310      	movs	r3, #16
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e174      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae00:	2320      	movs	r3, #32
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e170      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae08:	2340      	movs	r3, #64	@ 0x40
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e16c      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae16:	e168      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ae8c <UART_SetConfig+0x348>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d142      	bne.n	800aea8 <UART_SetConfig+0x364>
 800ae22:	4b16      	ldr	r3, [pc, #88]	@ (800ae7c <UART_SetConfig+0x338>)
 800ae24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	d838      	bhi.n	800aea0 <UART_SetConfig+0x35c>
 800ae2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae34 <UART_SetConfig+0x2f0>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800ae4d 	.word	0x0800ae4d
 800ae38:	0800ae55 	.word	0x0800ae55
 800ae3c:	0800ae5d 	.word	0x0800ae5d
 800ae40:	0800ae65 	.word	0x0800ae65
 800ae44:	0800ae91 	.word	0x0800ae91
 800ae48:	0800ae99 	.word	0x0800ae99
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e14a      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae54:	2304      	movs	r3, #4
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e146      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae5c:	2308      	movs	r3, #8
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e142      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae64:	2310      	movs	r3, #16
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e13e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae6c:	cfff69f3 	.word	0xcfff69f3
 800ae70:	58000c00 	.word	0x58000c00
 800ae74:	11fff4ff 	.word	0x11fff4ff
 800ae78:	40011000 	.word	0x40011000
 800ae7c:	58024400 	.word	0x58024400
 800ae80:	40004400 	.word	0x40004400
 800ae84:	40004800 	.word	0x40004800
 800ae88:	40004c00 	.word	0x40004c00
 800ae8c:	40005000 	.word	0x40005000
 800ae90:	2320      	movs	r3, #32
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e128      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800ae98:	2340      	movs	r3, #64	@ 0x40
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e124      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800aea0:	2380      	movs	r3, #128	@ 0x80
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e120      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4acb      	ldr	r2, [pc, #812]	@ (800b1dc <UART_SetConfig+0x698>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d176      	bne.n	800afa0 <UART_SetConfig+0x45c>
 800aeb2:	4bcb      	ldr	r3, [pc, #812]	@ (800b1e0 <UART_SetConfig+0x69c>)
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aeba:	2b28      	cmp	r3, #40	@ 0x28
 800aebc:	d86c      	bhi.n	800af98 <UART_SetConfig+0x454>
 800aebe:	a201      	add	r2, pc, #4	@ (adr r2, 800aec4 <UART_SetConfig+0x380>)
 800aec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec4:	0800af69 	.word	0x0800af69
 800aec8:	0800af99 	.word	0x0800af99
 800aecc:	0800af99 	.word	0x0800af99
 800aed0:	0800af99 	.word	0x0800af99
 800aed4:	0800af99 	.word	0x0800af99
 800aed8:	0800af99 	.word	0x0800af99
 800aedc:	0800af99 	.word	0x0800af99
 800aee0:	0800af99 	.word	0x0800af99
 800aee4:	0800af71 	.word	0x0800af71
 800aee8:	0800af99 	.word	0x0800af99
 800aeec:	0800af99 	.word	0x0800af99
 800aef0:	0800af99 	.word	0x0800af99
 800aef4:	0800af99 	.word	0x0800af99
 800aef8:	0800af99 	.word	0x0800af99
 800aefc:	0800af99 	.word	0x0800af99
 800af00:	0800af99 	.word	0x0800af99
 800af04:	0800af79 	.word	0x0800af79
 800af08:	0800af99 	.word	0x0800af99
 800af0c:	0800af99 	.word	0x0800af99
 800af10:	0800af99 	.word	0x0800af99
 800af14:	0800af99 	.word	0x0800af99
 800af18:	0800af99 	.word	0x0800af99
 800af1c:	0800af99 	.word	0x0800af99
 800af20:	0800af99 	.word	0x0800af99
 800af24:	0800af81 	.word	0x0800af81
 800af28:	0800af99 	.word	0x0800af99
 800af2c:	0800af99 	.word	0x0800af99
 800af30:	0800af99 	.word	0x0800af99
 800af34:	0800af99 	.word	0x0800af99
 800af38:	0800af99 	.word	0x0800af99
 800af3c:	0800af99 	.word	0x0800af99
 800af40:	0800af99 	.word	0x0800af99
 800af44:	0800af89 	.word	0x0800af89
 800af48:	0800af99 	.word	0x0800af99
 800af4c:	0800af99 	.word	0x0800af99
 800af50:	0800af99 	.word	0x0800af99
 800af54:	0800af99 	.word	0x0800af99
 800af58:	0800af99 	.word	0x0800af99
 800af5c:	0800af99 	.word	0x0800af99
 800af60:	0800af99 	.word	0x0800af99
 800af64:	0800af91 	.word	0x0800af91
 800af68:	2301      	movs	r3, #1
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6e:	e0bc      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800af70:	2304      	movs	r3, #4
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af76:	e0b8      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800af78:	2308      	movs	r3, #8
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e0b4      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800af80:	2310      	movs	r3, #16
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e0b0      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800af88:	2320      	movs	r3, #32
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e0ac      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800af90:	2340      	movs	r3, #64	@ 0x40
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af96:	e0a8      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800af98:	2380      	movs	r3, #128	@ 0x80
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e0a4      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a8f      	ldr	r2, [pc, #572]	@ (800b1e4 <UART_SetConfig+0x6a0>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d130      	bne.n	800b00c <UART_SetConfig+0x4c8>
 800afaa:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e0 <UART_SetConfig+0x69c>)
 800afac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d826      	bhi.n	800b004 <UART_SetConfig+0x4c0>
 800afb6:	a201      	add	r2, pc, #4	@ (adr r2, 800afbc <UART_SetConfig+0x478>)
 800afb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbc:	0800afd5 	.word	0x0800afd5
 800afc0:	0800afdd 	.word	0x0800afdd
 800afc4:	0800afe5 	.word	0x0800afe5
 800afc8:	0800afed 	.word	0x0800afed
 800afcc:	0800aff5 	.word	0x0800aff5
 800afd0:	0800affd 	.word	0x0800affd
 800afd4:	2300      	movs	r3, #0
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e086      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800afdc:	2304      	movs	r3, #4
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e082      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800afe4:	2308      	movs	r3, #8
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e07e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800afec:	2310      	movs	r3, #16
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e07a      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800aff4:	2320      	movs	r3, #32
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e076      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800affc:	2340      	movs	r3, #64	@ 0x40
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b002:	e072      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b004:	2380      	movs	r3, #128	@ 0x80
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e06e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a75      	ldr	r2, [pc, #468]	@ (800b1e8 <UART_SetConfig+0x6a4>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d130      	bne.n	800b078 <UART_SetConfig+0x534>
 800b016:	4b72      	ldr	r3, [pc, #456]	@ (800b1e0 <UART_SetConfig+0x69c>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	2b05      	cmp	r3, #5
 800b020:	d826      	bhi.n	800b070 <UART_SetConfig+0x52c>
 800b022:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <UART_SetConfig+0x4e4>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b041 	.word	0x0800b041
 800b02c:	0800b049 	.word	0x0800b049
 800b030:	0800b051 	.word	0x0800b051
 800b034:	0800b059 	.word	0x0800b059
 800b038:	0800b061 	.word	0x0800b061
 800b03c:	0800b069 	.word	0x0800b069
 800b040:	2300      	movs	r3, #0
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b046:	e050      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b048:	2304      	movs	r3, #4
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04e:	e04c      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b056:	e048      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b058:	2310      	movs	r3, #16
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05e:	e044      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b060:	2320      	movs	r3, #32
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b066:	e040      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b068:	2340      	movs	r3, #64	@ 0x40
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06e:	e03c      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b070:	2380      	movs	r3, #128	@ 0x80
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b076:	e038      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a5b      	ldr	r2, [pc, #364]	@ (800b1ec <UART_SetConfig+0x6a8>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d130      	bne.n	800b0e4 <UART_SetConfig+0x5a0>
 800b082:	4b57      	ldr	r3, [pc, #348]	@ (800b1e0 <UART_SetConfig+0x69c>)
 800b084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d826      	bhi.n	800b0dc <UART_SetConfig+0x598>
 800b08e:	a201      	add	r2, pc, #4	@ (adr r2, 800b094 <UART_SetConfig+0x550>)
 800b090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0b5 	.word	0x0800b0b5
 800b09c:	0800b0bd 	.word	0x0800b0bd
 800b0a0:	0800b0c5 	.word	0x0800b0c5
 800b0a4:	0800b0cd 	.word	0x0800b0cd
 800b0a8:	0800b0d5 	.word	0x0800b0d5
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b2:	e01a      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e016      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c2:	e012      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ca:	e00e      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0cc:	2320      	movs	r3, #32
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d2:	e00a      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0d4:	2340      	movs	r3, #64	@ 0x40
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0da:	e006      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0dc:	2380      	movs	r3, #128	@ 0x80
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e2:	e002      	b.n	800b0ea <UART_SetConfig+0x5a6>
 800b0e4:	2380      	movs	r3, #128	@ 0x80
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a3f      	ldr	r2, [pc, #252]	@ (800b1ec <UART_SetConfig+0x6a8>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	f040 80f8 	bne.w	800b2e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	dc46      	bgt.n	800b18c <UART_SetConfig+0x648>
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	f2c0 8082 	blt.w	800b208 <UART_SetConfig+0x6c4>
 800b104:	3b02      	subs	r3, #2
 800b106:	2b1e      	cmp	r3, #30
 800b108:	d87e      	bhi.n	800b208 <UART_SetConfig+0x6c4>
 800b10a:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <UART_SetConfig+0x5cc>)
 800b10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b110:	0800b193 	.word	0x0800b193
 800b114:	0800b209 	.word	0x0800b209
 800b118:	0800b19b 	.word	0x0800b19b
 800b11c:	0800b209 	.word	0x0800b209
 800b120:	0800b209 	.word	0x0800b209
 800b124:	0800b209 	.word	0x0800b209
 800b128:	0800b1ab 	.word	0x0800b1ab
 800b12c:	0800b209 	.word	0x0800b209
 800b130:	0800b209 	.word	0x0800b209
 800b134:	0800b209 	.word	0x0800b209
 800b138:	0800b209 	.word	0x0800b209
 800b13c:	0800b209 	.word	0x0800b209
 800b140:	0800b209 	.word	0x0800b209
 800b144:	0800b209 	.word	0x0800b209
 800b148:	0800b1bb 	.word	0x0800b1bb
 800b14c:	0800b209 	.word	0x0800b209
 800b150:	0800b209 	.word	0x0800b209
 800b154:	0800b209 	.word	0x0800b209
 800b158:	0800b209 	.word	0x0800b209
 800b15c:	0800b209 	.word	0x0800b209
 800b160:	0800b209 	.word	0x0800b209
 800b164:	0800b209 	.word	0x0800b209
 800b168:	0800b209 	.word	0x0800b209
 800b16c:	0800b209 	.word	0x0800b209
 800b170:	0800b209 	.word	0x0800b209
 800b174:	0800b209 	.word	0x0800b209
 800b178:	0800b209 	.word	0x0800b209
 800b17c:	0800b209 	.word	0x0800b209
 800b180:	0800b209 	.word	0x0800b209
 800b184:	0800b209 	.word	0x0800b209
 800b188:	0800b1fb 	.word	0x0800b1fb
 800b18c:	2b40      	cmp	r3, #64	@ 0x40
 800b18e:	d037      	beq.n	800b200 <UART_SetConfig+0x6bc>
 800b190:	e03a      	b.n	800b208 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b192:	f7fc feb3 	bl	8007efc <HAL_RCCEx_GetD3PCLK1Freq>
 800b196:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b198:	e03c      	b.n	800b214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fc fec2 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a8:	e034      	b.n	800b214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1aa:	f107 0318 	add.w	r3, r7, #24
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fd f80e 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b8:	e02c      	b.n	800b214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ba:	4b09      	ldr	r3, [pc, #36]	@ (800b1e0 <UART_SetConfig+0x69c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0320 	and.w	r3, r3, #32
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d016      	beq.n	800b1f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1c6:	4b06      	ldr	r3, [pc, #24]	@ (800b1e0 <UART_SetConfig+0x69c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	08db      	lsrs	r3, r3, #3
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	4a07      	ldr	r2, [pc, #28]	@ (800b1f0 <UART_SetConfig+0x6ac>)
 800b1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1d8:	e01c      	b.n	800b214 <UART_SetConfig+0x6d0>
 800b1da:	bf00      	nop
 800b1dc:	40011400 	.word	0x40011400
 800b1e0:	58024400 	.word	0x58024400
 800b1e4:	40007800 	.word	0x40007800
 800b1e8:	40007c00 	.word	0x40007c00
 800b1ec:	58000c00 	.word	0x58000c00
 800b1f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b1f4:	4b9d      	ldr	r3, [pc, #628]	@ (800b46c <UART_SetConfig+0x928>)
 800b1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f8:	e00c      	b.n	800b214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1fa:	4b9d      	ldr	r3, [pc, #628]	@ (800b470 <UART_SetConfig+0x92c>)
 800b1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fe:	e009      	b.n	800b214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b206:	e005      	b.n	800b214 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b212:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 81de 	beq.w	800b5d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b220:	4a94      	ldr	r2, [pc, #592]	@ (800b474 <UART_SetConfig+0x930>)
 800b222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b226:	461a      	mov	r2, r3
 800b228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b22e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	4413      	add	r3, r2
 800b23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d305      	bcc.n	800b24c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b248:	429a      	cmp	r2, r3
 800b24a:	d903      	bls.n	800b254 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b252:	e1c1      	b.n	800b5d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b256:	2200      	movs	r2, #0
 800b258:	60bb      	str	r3, [r7, #8]
 800b25a:	60fa      	str	r2, [r7, #12]
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b260:	4a84      	ldr	r2, [pc, #528]	@ (800b474 <UART_SetConfig+0x930>)
 800b262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b266:	b29b      	uxth	r3, r3
 800b268:	2200      	movs	r2, #0
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b276:	f7f5 f82f 	bl	80002d8 <__aeabi_uldivmod>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4610      	mov	r0, r2
 800b280:	4619      	mov	r1, r3
 800b282:	f04f 0200 	mov.w	r2, #0
 800b286:	f04f 0300 	mov.w	r3, #0
 800b28a:	020b      	lsls	r3, r1, #8
 800b28c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b290:	0202      	lsls	r2, r0, #8
 800b292:	6979      	ldr	r1, [r7, #20]
 800b294:	6849      	ldr	r1, [r1, #4]
 800b296:	0849      	lsrs	r1, r1, #1
 800b298:	2000      	movs	r0, #0
 800b29a:	460c      	mov	r4, r1
 800b29c:	4605      	mov	r5, r0
 800b29e:	eb12 0804 	adds.w	r8, r2, r4
 800b2a2:	eb43 0905 	adc.w	r9, r3, r5
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	469a      	mov	sl, r3
 800b2ae:	4693      	mov	fp, r2
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	465b      	mov	r3, fp
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	f7f5 f80e 	bl	80002d8 <__aeabi_uldivmod>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ca:	d308      	bcc.n	800b2de <UART_SetConfig+0x79a>
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2d2:	d204      	bcs.n	800b2de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2da:	60da      	str	r2, [r3, #12]
 800b2dc:	e17c      	b.n	800b5d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2e4:	e178      	b.n	800b5d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2ee:	f040 80c5 	bne.w	800b47c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b2f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2f6:	2b20      	cmp	r3, #32
 800b2f8:	dc48      	bgt.n	800b38c <UART_SetConfig+0x848>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	db7b      	blt.n	800b3f6 <UART_SetConfig+0x8b2>
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d879      	bhi.n	800b3f6 <UART_SetConfig+0x8b2>
 800b302:	a201      	add	r2, pc, #4	@ (adr r2, 800b308 <UART_SetConfig+0x7c4>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b393 	.word	0x0800b393
 800b30c:	0800b39b 	.word	0x0800b39b
 800b310:	0800b3f7 	.word	0x0800b3f7
 800b314:	0800b3f7 	.word	0x0800b3f7
 800b318:	0800b3a3 	.word	0x0800b3a3
 800b31c:	0800b3f7 	.word	0x0800b3f7
 800b320:	0800b3f7 	.word	0x0800b3f7
 800b324:	0800b3f7 	.word	0x0800b3f7
 800b328:	0800b3b3 	.word	0x0800b3b3
 800b32c:	0800b3f7 	.word	0x0800b3f7
 800b330:	0800b3f7 	.word	0x0800b3f7
 800b334:	0800b3f7 	.word	0x0800b3f7
 800b338:	0800b3f7 	.word	0x0800b3f7
 800b33c:	0800b3f7 	.word	0x0800b3f7
 800b340:	0800b3f7 	.word	0x0800b3f7
 800b344:	0800b3f7 	.word	0x0800b3f7
 800b348:	0800b3c3 	.word	0x0800b3c3
 800b34c:	0800b3f7 	.word	0x0800b3f7
 800b350:	0800b3f7 	.word	0x0800b3f7
 800b354:	0800b3f7 	.word	0x0800b3f7
 800b358:	0800b3f7 	.word	0x0800b3f7
 800b35c:	0800b3f7 	.word	0x0800b3f7
 800b360:	0800b3f7 	.word	0x0800b3f7
 800b364:	0800b3f7 	.word	0x0800b3f7
 800b368:	0800b3f7 	.word	0x0800b3f7
 800b36c:	0800b3f7 	.word	0x0800b3f7
 800b370:	0800b3f7 	.word	0x0800b3f7
 800b374:	0800b3f7 	.word	0x0800b3f7
 800b378:	0800b3f7 	.word	0x0800b3f7
 800b37c:	0800b3f7 	.word	0x0800b3f7
 800b380:	0800b3f7 	.word	0x0800b3f7
 800b384:	0800b3f7 	.word	0x0800b3f7
 800b388:	0800b3e9 	.word	0x0800b3e9
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	d02e      	beq.n	800b3ee <UART_SetConfig+0x8aa>
 800b390:	e031      	b.n	800b3f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b392:	f7fa fdbd 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 800b396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b398:	e033      	b.n	800b402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b39a:	f7fa fdcf 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 800b39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3a0:	e02f      	b.n	800b402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fc fdbe 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b0:	e027      	b.n	800b402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3b2:	f107 0318 	add.w	r3, r7, #24
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fc ff0a 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c0:	e01f      	b.n	800b402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b478 <UART_SetConfig+0x934>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0320 	and.w	r3, r3, #32
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3ce:	4b2a      	ldr	r3, [pc, #168]	@ (800b478 <UART_SetConfig+0x934>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	08db      	lsrs	r3, r3, #3
 800b3d4:	f003 0303 	and.w	r3, r3, #3
 800b3d8:	4a24      	ldr	r2, [pc, #144]	@ (800b46c <UART_SetConfig+0x928>)
 800b3da:	fa22 f303 	lsr.w	r3, r2, r3
 800b3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3e0:	e00f      	b.n	800b402 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3e2:	4b22      	ldr	r3, [pc, #136]	@ (800b46c <UART_SetConfig+0x928>)
 800b3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e6:	e00c      	b.n	800b402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3e8:	4b21      	ldr	r3, [pc, #132]	@ (800b470 <UART_SetConfig+0x92c>)
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ec:	e009      	b.n	800b402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f4:	e005      	b.n	800b402 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 80e7 	beq.w	800b5d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40e:	4a19      	ldr	r2, [pc, #100]	@ (800b474 <UART_SetConfig+0x930>)
 800b410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b414:	461a      	mov	r2, r3
 800b416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b418:	fbb3 f3f2 	udiv	r3, r3, r2
 800b41c:	005a      	lsls	r2, r3, #1
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	085b      	lsrs	r3, r3, #1
 800b424:	441a      	add	r2, r3
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d916      	bls.n	800b464 <UART_SetConfig+0x920>
 800b436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b43c:	d212      	bcs.n	800b464 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b440:	b29b      	uxth	r3, r3
 800b442:	f023 030f 	bic.w	r3, r3, #15
 800b446:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44a:	085b      	lsrs	r3, r3, #1
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	f003 0307 	and.w	r3, r3, #7
 800b452:	b29a      	uxth	r2, r3
 800b454:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b456:	4313      	orrs	r3, r2
 800b458:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b460:	60da      	str	r2, [r3, #12]
 800b462:	e0b9      	b.n	800b5d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b46a:	e0b5      	b.n	800b5d8 <UART_SetConfig+0xa94>
 800b46c:	03d09000 	.word	0x03d09000
 800b470:	003d0900 	.word	0x003d0900
 800b474:	0800fad8 	.word	0x0800fad8
 800b478:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b47c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b480:	2b20      	cmp	r3, #32
 800b482:	dc49      	bgt.n	800b518 <UART_SetConfig+0x9d4>
 800b484:	2b00      	cmp	r3, #0
 800b486:	db7c      	blt.n	800b582 <UART_SetConfig+0xa3e>
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d87a      	bhi.n	800b582 <UART_SetConfig+0xa3e>
 800b48c:	a201      	add	r2, pc, #4	@ (adr r2, 800b494 <UART_SetConfig+0x950>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b51f 	.word	0x0800b51f
 800b498:	0800b527 	.word	0x0800b527
 800b49c:	0800b583 	.word	0x0800b583
 800b4a0:	0800b583 	.word	0x0800b583
 800b4a4:	0800b52f 	.word	0x0800b52f
 800b4a8:	0800b583 	.word	0x0800b583
 800b4ac:	0800b583 	.word	0x0800b583
 800b4b0:	0800b583 	.word	0x0800b583
 800b4b4:	0800b53f 	.word	0x0800b53f
 800b4b8:	0800b583 	.word	0x0800b583
 800b4bc:	0800b583 	.word	0x0800b583
 800b4c0:	0800b583 	.word	0x0800b583
 800b4c4:	0800b583 	.word	0x0800b583
 800b4c8:	0800b583 	.word	0x0800b583
 800b4cc:	0800b583 	.word	0x0800b583
 800b4d0:	0800b583 	.word	0x0800b583
 800b4d4:	0800b54f 	.word	0x0800b54f
 800b4d8:	0800b583 	.word	0x0800b583
 800b4dc:	0800b583 	.word	0x0800b583
 800b4e0:	0800b583 	.word	0x0800b583
 800b4e4:	0800b583 	.word	0x0800b583
 800b4e8:	0800b583 	.word	0x0800b583
 800b4ec:	0800b583 	.word	0x0800b583
 800b4f0:	0800b583 	.word	0x0800b583
 800b4f4:	0800b583 	.word	0x0800b583
 800b4f8:	0800b583 	.word	0x0800b583
 800b4fc:	0800b583 	.word	0x0800b583
 800b500:	0800b583 	.word	0x0800b583
 800b504:	0800b583 	.word	0x0800b583
 800b508:	0800b583 	.word	0x0800b583
 800b50c:	0800b583 	.word	0x0800b583
 800b510:	0800b583 	.word	0x0800b583
 800b514:	0800b575 	.word	0x0800b575
 800b518:	2b40      	cmp	r3, #64	@ 0x40
 800b51a:	d02e      	beq.n	800b57a <UART_SetConfig+0xa36>
 800b51c:	e031      	b.n	800b582 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b51e:	f7fa fcf7 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 800b522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b524:	e033      	b.n	800b58e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b526:	f7fa fd09 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 800b52a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b52c:	e02f      	b.n	800b58e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b52e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b532:	4618      	mov	r0, r3
 800b534:	f7fc fcf8 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b53c:	e027      	b.n	800b58e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b53e:	f107 0318 	add.w	r3, r7, #24
 800b542:	4618      	mov	r0, r3
 800b544:	f7fc fe44 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b54c:	e01f      	b.n	800b58e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b54e:	4b2d      	ldr	r3, [pc, #180]	@ (800b604 <UART_SetConfig+0xac0>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0320 	and.w	r3, r3, #32
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b55a:	4b2a      	ldr	r3, [pc, #168]	@ (800b604 <UART_SetConfig+0xac0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	08db      	lsrs	r3, r3, #3
 800b560:	f003 0303 	and.w	r3, r3, #3
 800b564:	4a28      	ldr	r2, [pc, #160]	@ (800b608 <UART_SetConfig+0xac4>)
 800b566:	fa22 f303 	lsr.w	r3, r2, r3
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b56c:	e00f      	b.n	800b58e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b56e:	4b26      	ldr	r3, [pc, #152]	@ (800b608 <UART_SetConfig+0xac4>)
 800b570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b572:	e00c      	b.n	800b58e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b574:	4b25      	ldr	r3, [pc, #148]	@ (800b60c <UART_SetConfig+0xac8>)
 800b576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b578:	e009      	b.n	800b58e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b57a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b580:	e005      	b.n	800b58e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b58c:	bf00      	nop
    }

    if (pclk != 0U)
 800b58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d021      	beq.n	800b5d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b598:	4a1d      	ldr	r2, [pc, #116]	@ (800b610 <UART_SetConfig+0xacc>)
 800b59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	085b      	lsrs	r3, r3, #1
 800b5ac:	441a      	add	r2, r3
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ba:	2b0f      	cmp	r3, #15
 800b5bc:	d909      	bls.n	800b5d2 <UART_SetConfig+0xa8e>
 800b5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5c4:	d205      	bcs.n	800b5d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	60da      	str	r2, [r3, #12]
 800b5d0:	e002      	b.n	800b5d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3748      	adds	r7, #72	@ 0x48
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
 800b608:	03d09000 	.word	0x03d09000
 800b60c:	003d0900 	.word	0x003d0900
 800b610:	0800fad8 	.word	0x0800fad8

0800b614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b620:	f003 0308 	and.w	r3, r3, #8
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00a      	beq.n	800b682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b686:	f003 0304 	and.w	r3, r3, #4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00a      	beq.n	800b6c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ca:	f003 0320 	and.w	r3, r3, #32
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d01a      	beq.n	800b72a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	430a      	orrs	r2, r1
 800b708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b70e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b712:	d10a      	bne.n	800b72a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	605a      	str	r2, [r3, #4]
  }
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b098      	sub	sp, #96	@ 0x60
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b768:	f7f6 ff18 	bl	800259c <HAL_GetTick>
 800b76c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d12f      	bne.n	800b7dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b77c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b784:	2200      	movs	r2, #0
 800b786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f88e 	bl	800b8ac <UART_WaitOnFlagUntilTimeout>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d022      	beq.n	800b7dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e6      	bne.n	800b796 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e063      	b.n	800b8a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 0304 	and.w	r3, r3, #4
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	d149      	bne.n	800b87e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f857 	bl	800b8ac <UART_WaitOnFlagUntilTimeout>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d03c      	beq.n	800b87e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	e853 3f00 	ldrex	r3, [r3]
 800b810:	623b      	str	r3, [r7, #32]
   return(result);
 800b812:	6a3b      	ldr	r3, [r7, #32]
 800b814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b822:	633b      	str	r3, [r7, #48]	@ 0x30
 800b824:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b82a:	e841 2300 	strex	r3, r2, [r1]
 800b82e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1e6      	bne.n	800b804 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3308      	adds	r3, #8
 800b83c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	e853 3f00 	ldrex	r3, [r3]
 800b844:	60fb      	str	r3, [r7, #12]
   return(result);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f023 0301 	bic.w	r3, r3, #1
 800b84c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3308      	adds	r3, #8
 800b854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b856:	61fa      	str	r2, [r7, #28]
 800b858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	69b9      	ldr	r1, [r7, #24]
 800b85c:	69fa      	ldr	r2, [r7, #28]
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	617b      	str	r3, [r7, #20]
   return(result);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1e5      	bne.n	800b836 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2220      	movs	r2, #32
 800b86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	e012      	b.n	800b8a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2220      	movs	r2, #32
 800b882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3758      	adds	r7, #88	@ 0x58
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8bc:	e04f      	b.n	800b95e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c4:	d04b      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8c6:	f7f6 fe69 	bl	800259c <HAL_GetTick>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	69ba      	ldr	r2, [r7, #24]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d302      	bcc.n	800b8dc <UART_WaitOnFlagUntilTimeout+0x30>
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e04e      	b.n	800b97e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0304 	and.w	r3, r3, #4
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d037      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2b80      	cmp	r3, #128	@ 0x80
 800b8f2:	d034      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b40      	cmp	r3, #64	@ 0x40
 800b8f8:	d031      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	f003 0308 	and.w	r3, r3, #8
 800b904:	2b08      	cmp	r3, #8
 800b906:	d110      	bne.n	800b92a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2208      	movs	r2, #8
 800b90e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 f839 	bl	800b988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2208      	movs	r2, #8
 800b91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e029      	b.n	800b97e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b938:	d111      	bne.n	800b95e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f81f 	bl	800b988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e00f      	b.n	800b97e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69da      	ldr	r2, [r3, #28]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4013      	ands	r3, r2
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	bf0c      	ite	eq
 800b96e:	2301      	moveq	r3, #1
 800b970:	2300      	movne	r3, #0
 800b972:	b2db      	uxtb	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d0a0      	beq.n	800b8be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b095      	sub	sp, #84	@ 0x54
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b998:	e853 3f00 	ldrex	r3, [r3]
 800b99c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9b6:	e841 2300 	strex	r3, r2, [r1]
 800b9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e6      	bne.n	800b990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d2:	69fa      	ldr	r2, [r7, #28]
 800b9d4:	4b1e      	ldr	r3, [pc, #120]	@ (800ba50 <UART_EndRxTransfer+0xc8>)
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e5      	bne.n	800b9c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d118      	bne.n	800ba30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f023 0310 	bic.w	r3, r3, #16
 800ba12:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba1c:	61bb      	str	r3, [r7, #24]
 800ba1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6979      	ldr	r1, [r7, #20]
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e6      	bne.n	800b9fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba44:	bf00      	nop
 800ba46:	3754      	adds	r7, #84	@ 0x54
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	effffffe 	.word	0xeffffffe

0800ba54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d101      	bne.n	800ba6a <HAL_UARTEx_DisableFifoMode+0x16>
 800ba66:	2302      	movs	r3, #2
 800ba68:	e027      	b.n	800baba <HAL_UARTEx_DisableFifoMode+0x66>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2224      	movs	r2, #36	@ 0x24
 800ba76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0201 	bic.w	r2, r2, #1
 800ba90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2220      	movs	r2, #32
 800baac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d101      	bne.n	800bade <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bada:	2302      	movs	r3, #2
 800badc:	e02d      	b.n	800bb3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2224      	movs	r2, #36	@ 0x24
 800baea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0201 	bic.w	r2, r2, #1
 800bb04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	430a      	orrs	r2, r1
 800bb18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f850 	bl	800bbc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e02d      	b.n	800bbb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2224      	movs	r2, #36	@ 0x24
 800bb66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f022 0201 	bic.w	r2, r2, #1
 800bb80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f812 	bl	800bbc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2220      	movs	r2, #32
 800bba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d108      	bne.n	800bbe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbe0:	e031      	b.n	800bc46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbe2:	2310      	movs	r3, #16
 800bbe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbe6:	2310      	movs	r3, #16
 800bbe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	0e5b      	lsrs	r3, r3, #25
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f003 0307 	and.w	r3, r3, #7
 800bbf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	0f5b      	lsrs	r3, r3, #29
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	f003 0307 	and.w	r3, r3, #7
 800bc08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	7b3a      	ldrb	r2, [r7, #12]
 800bc0e:	4911      	ldr	r1, [pc, #68]	@ (800bc54 <UARTEx_SetNbDataToProcess+0x94>)
 800bc10:	5c8a      	ldrb	r2, [r1, r2]
 800bc12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc16:	7b3a      	ldrb	r2, [r7, #12]
 800bc18:	490f      	ldr	r1, [pc, #60]	@ (800bc58 <UARTEx_SetNbDataToProcess+0x98>)
 800bc1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	7b7a      	ldrb	r2, [r7, #13]
 800bc2c:	4909      	ldr	r1, [pc, #36]	@ (800bc54 <UARTEx_SetNbDataToProcess+0x94>)
 800bc2e:	5c8a      	ldrb	r2, [r1, r2]
 800bc30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc34:	7b7a      	ldrb	r2, [r7, #13]
 800bc36:	4908      	ldr	r1, [pc, #32]	@ (800bc58 <UARTEx_SetNbDataToProcess+0x98>)
 800bc38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc46:	bf00      	nop
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	0800faf0 	.word	0x0800faf0
 800bc58:	0800faf8 	.word	0x0800faf8

0800bc5c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	f107 001c 	add.w	r0, r7, #28
 800bc6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bc72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bc74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bc76:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bc7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bc7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bc82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	4b07      	ldr	r3, [pc, #28]	@ (800bcac <SDMMC_Init+0x50>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	431a      	orrs	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	b004      	add	sp, #16
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	ffc02c00 	.word	0xffc02c00

0800bcb0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f043 0203 	orr.w	r2, r3, #3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0303 	and.w	r3, r3, #3
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bd50:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bd56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68da      	ldr	r2, [r3, #12]
 800bd62:	4b06      	ldr	r3, [pc, #24]	@ (800bd7c <SDMMC_SendCommand+0x50>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	fffee0c0 	.word	0xfffee0c0

0800bd80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	b2db      	uxtb	r3, r3
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b085      	sub	sp, #20
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3314      	adds	r3, #20
 800bda8:	461a      	mov	r2, r3
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	4413      	add	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bde6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bdec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bdf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	431a      	orrs	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0

}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be26:	2310      	movs	r3, #16
 800be28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be30:	2300      	movs	r3, #0
 800be32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff ff73 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800be46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be4a:	2110      	movs	r1, #16
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fa5f 	bl	800c310 <SDMMC_GetCmdResp1>
 800be52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be54:	69fb      	ldr	r3, [r7, #28]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3720      	adds	r7, #32
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b088      	sub	sp, #32
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be6c:	2311      	movs	r3, #17
 800be6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be80:	f107 0308 	add.w	r3, r7, #8
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff ff50 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be90:	2111      	movs	r1, #17
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fa3c 	bl	800c310 <SDMMC_GetCmdResp1>
 800be98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be9a:	69fb      	ldr	r3, [r7, #28]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3720      	adds	r7, #32
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800beb2:	2312      	movs	r3, #18
 800beb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800beba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bebc:	2300      	movs	r3, #0
 800bebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bec6:	f107 0308 	add.w	r3, r7, #8
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff2d 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bed6:	2112      	movs	r1, #18
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa19 	bl	800c310 <SDMMC_GetCmdResp1>
 800bede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee0:	69fb      	ldr	r3, [r7, #28]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3720      	adds	r7, #32
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b088      	sub	sp, #32
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bef8:	2318      	movs	r3, #24
 800befa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800befc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf02:	2300      	movs	r3, #0
 800bf04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ff0a 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf1c:	2118      	movs	r1, #24
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f9f6 	bl	800c310 <SDMMC_GetCmdResp1>
 800bf24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf3e:	2319      	movs	r3, #25
 800bf40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf52:	f107 0308 	add.w	r3, r7, #8
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7ff fee7 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf62:	2119      	movs	r1, #25
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f9d3 	bl	800c310 <SDMMC_GetCmdResp1>
 800bf6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3720      	adds	r7, #32
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
	...

0800bf78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf84:	230c      	movs	r3, #12
 800bf86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf96:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb0:	f107 0308 	add.w	r3, r7, #8
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7ff feb8 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bfbc:	4a0b      	ldr	r2, [pc, #44]	@ (800bfec <SDMMC_CmdStopTransfer+0x74>)
 800bfbe:	210c      	movs	r1, #12
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f9a5 	bl	800c310 <SDMMC_GetCmdResp1>
 800bfc6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfda:	d101      	bne.n	800bfe0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bfe0:	69fb      	ldr	r3, [r7, #28]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3720      	adds	r7, #32
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	05f5e100 	.word	0x05f5e100

0800bff0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bffe:	2307      	movs	r3, #7
 800c000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c008:	2300      	movs	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c00c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c012:	f107 0308 	add.w	r3, r7, #8
 800c016:	4619      	mov	r1, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff fe87 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c01e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c022:	2107      	movs	r1, #7
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f973 	bl	800c310 <SDMMC_GetCmdResp1>
 800c02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c02c:	69fb      	ldr	r3, [r7, #28]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3720      	adds	r7, #32
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b088      	sub	sp, #32
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c046:	2300      	movs	r3, #0
 800c048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c04e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7ff fe66 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fb97 	bl	800c794 <SDMMC_GetCmdError>
 800c066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c068:	69fb      	ldr	r3, [r7, #28]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3720      	adds	r7, #32
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b088      	sub	sp, #32
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c07a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c07e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c080:	2308      	movs	r3, #8
 800c082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c08a:	2300      	movs	r3, #0
 800c08c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c08e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c092:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c094:	f107 0308 	add.w	r3, r7, #8
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7ff fe46 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fb29 	bl	800c6f8 <SDMMC_GetCmdResp7>
 800c0a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0a8:	69fb      	ldr	r3, [r7, #28]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3720      	adds	r7, #32
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b088      	sub	sp, #32
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c0c0:	2337      	movs	r3, #55	@ 0x37
 800c0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0d4:	f107 0308 	add.w	r3, r7, #8
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff fe26 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c0e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0e4:	2137      	movs	r1, #55	@ 0x37
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f912 	bl	800c310 <SDMMC_GetCmdResp1>
 800c0ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3720      	adds	r7, #32
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c106:	2329      	movs	r3, #41	@ 0x29
 800c108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c10a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c10e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c110:	2300      	movs	r3, #0
 800c112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c118:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c11a:	f107 0308 	add.w	r3, r7, #8
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff fe03 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa2e 	bl	800c588 <SDMMC_GetCmdResp3>
 800c12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c12e:	69fb      	ldr	r3, [r7, #28]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c146:	2306      	movs	r3, #6
 800c148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c14a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c14e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c150:	2300      	movs	r3, #0
 800c152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c15a:	f107 0308 	add.w	r3, r7, #8
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff fde3 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c16a:	2106      	movs	r1, #6
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f8cf 	bl	800c310 <SDMMC_GetCmdResp1>
 800c172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c174:	69fb      	ldr	r3, [r7, #28]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3720      	adds	r7, #32
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b088      	sub	sp, #32
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c186:	2300      	movs	r3, #0
 800c188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c18a:	2333      	movs	r3, #51	@ 0x33
 800c18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c18e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c194:	2300      	movs	r3, #0
 800c196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c19c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c19e:	f107 0308 	add.w	r3, r7, #8
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff fdc1 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1ae:	2133      	movs	r1, #51	@ 0x33
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f8ad 	bl	800c310 <SDMMC_GetCmdResp1>
 800c1b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1b8:	69fb      	ldr	r3, [r7, #28]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3720      	adds	r7, #32
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b088      	sub	sp, #32
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c1d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1e2:	f107 0308 	add.w	r3, r7, #8
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff fd9f 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f980 	bl	800c4f4 <SDMMC_GetCmdResp2>
 800c1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3720      	adds	r7, #32
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c20e:	2309      	movs	r3, #9
 800c210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c212:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c21c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c220:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c222:	f107 0308 	add.w	r3, r7, #8
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fd7f 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f960 	bl	800c4f4 <SDMMC_GetCmdResp2>
 800c234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c236:	69fb      	ldr	r3, [r7, #28]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3720      	adds	r7, #32
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c24e:	2303      	movs	r3, #3
 800c250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c258:	2300      	movs	r3, #0
 800c25a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c25c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c262:	f107 0308 	add.w	r3, r7, #8
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff fd5f 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	2103      	movs	r1, #3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f9c8 	bl	800c608 <SDMMC_GetCmdResp6>
 800c278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c27a:	69fb      	ldr	r3, [r7, #28]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3720      	adds	r7, #32
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c292:	230d      	movs	r3, #13
 800c294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c29c:	2300      	movs	r3, #0
 800c29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2a6:	f107 0308 	add.w	r3, r7, #8
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff fd3d 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2b6:	210d      	movs	r1, #13
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f829 	bl	800c310 <SDMMC_GetCmdResp1>
 800c2be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b088      	sub	sp, #32
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c2d6:	230d      	movs	r3, #13
 800c2d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ea:	f107 0308 	add.w	r3, r7, #8
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff fd1b 	bl	800bd2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c2f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2fa:	210d      	movs	r1, #13
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f807 	bl	800c310 <SDMMC_GetCmdResp1>
 800c302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c304:	69fb      	ldr	r3, [r7, #28]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3720      	adds	r7, #32
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	460b      	mov	r3, r1
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c31e:	4b70      	ldr	r3, [pc, #448]	@ (800c4e0 <SDMMC_GetCmdResp1+0x1d0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a70      	ldr	r2, [pc, #448]	@ (800c4e4 <SDMMC_GetCmdResp1+0x1d4>)
 800c324:	fba2 2303 	umull	r2, r3, r2, r3
 800c328:	0a5a      	lsrs	r2, r3, #9
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	fb02 f303 	mul.w	r3, r2, r3
 800c330:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	1e5a      	subs	r2, r3, #1
 800c336:	61fa      	str	r2, [r7, #28]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c33c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c340:	e0c9      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c346:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c348:	69ba      	ldr	r2, [r7, #24]
 800c34a:	4b67      	ldr	r3, [pc, #412]	@ (800c4e8 <SDMMC_GetCmdResp1+0x1d8>)
 800c34c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d0ef      	beq.n	800c332 <SDMMC_GetCmdResp1+0x22>
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1ea      	bne.n	800c332 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c360:	f003 0304 	and.w	r3, r3, #4
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2204      	movs	r2, #4
 800c36c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c36e:	2304      	movs	r3, #4
 800c370:	e0b1      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2201      	movs	r2, #1
 800c382:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c384:	2301      	movs	r3, #1
 800c386:	e0a6      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4a58      	ldr	r2, [pc, #352]	@ (800c4ec <SDMMC_GetCmdResp1+0x1dc>)
 800c38c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f7ff fcf6 	bl	800bd80 <SDMMC_GetCommandResponse>
 800c394:	4603      	mov	r3, r0
 800c396:	461a      	mov	r2, r3
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d001      	beq.n	800c3a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e099      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f7ff fcf8 	bl	800bd9a <SDMMC_GetResponse>
 800c3aa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	4b50      	ldr	r3, [pc, #320]	@ (800c4f0 <SDMMC_GetCmdResp1+0x1e0>)
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	e08d      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	da02      	bge.n	800c3c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c3c4:	e087      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3d0:	2340      	movs	r3, #64	@ 0x40
 800c3d2:	e080      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3de:	2380      	movs	r3, #128	@ 0x80
 800c3e0:	e079      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3f0:	e071      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c3fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c400:	e069      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c40c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c410:	e061      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c41c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c420:	e059      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c42c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c430:	e051      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c43c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c440:	e049      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c44c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c450:	e041      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c45c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c460:	e039      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c46c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c470:	e031      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c47c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c480:	e029      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c48c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c490:	e021      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c49c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c4a0:	e019      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d002      	beq.n	800c4b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c4b0:	e011      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c4c0:	e009      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f003 0308 	and.w	r3, r3, #8
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4cc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c4d0:	e001      	b.n	800c4d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	24000000 	.word	0x24000000
 800c4e4:	10624dd3 	.word	0x10624dd3
 800c4e8:	00200045 	.word	0x00200045
 800c4ec:	002000c5 	.word	0x002000c5
 800c4f0:	fdffe008 	.word	0xfdffe008

0800c4f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4fc:	4b1f      	ldr	r3, [pc, #124]	@ (800c57c <SDMMC_GetCmdResp2+0x88>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a1f      	ldr	r2, [pc, #124]	@ (800c580 <SDMMC_GetCmdResp2+0x8c>)
 800c502:	fba2 2303 	umull	r2, r3, r2, r3
 800c506:	0a5b      	lsrs	r3, r3, #9
 800c508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c50c:	fb02 f303 	mul.w	r3, r2, r3
 800c510:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	60fa      	str	r2, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c51c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c520:	e026      	b.n	800c570 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c526:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0ef      	beq.n	800c512 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1ea      	bne.n	800c512 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2204      	movs	r2, #4
 800c54c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c54e:	2304      	movs	r3, #4
 800c550:	e00e      	b.n	800c570 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c564:	2301      	movs	r3, #1
 800c566:	e003      	b.n	800c570 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a06      	ldr	r2, [pc, #24]	@ (800c584 <SDMMC_GetCmdResp2+0x90>)
 800c56c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	24000000 	.word	0x24000000
 800c580:	10624dd3 	.word	0x10624dd3
 800c584:	002000c5 	.word	0x002000c5

0800c588 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c590:	4b1a      	ldr	r3, [pc, #104]	@ (800c5fc <SDMMC_GetCmdResp3+0x74>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a1a      	ldr	r2, [pc, #104]	@ (800c600 <SDMMC_GetCmdResp3+0x78>)
 800c596:	fba2 2303 	umull	r2, r3, r2, r3
 800c59a:	0a5b      	lsrs	r3, r3, #9
 800c59c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5a0:	fb02 f303 	mul.w	r3, r2, r3
 800c5a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1e5a      	subs	r2, r3, #1
 800c5aa:	60fa      	str	r2, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d102      	bne.n	800c5b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c5b4:	e01b      	b.n	800c5ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0ef      	beq.n	800c5a6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1ea      	bne.n	800c5a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2204      	movs	r2, #4
 800c5e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5e2:	2304      	movs	r3, #4
 800c5e4:	e003      	b.n	800c5ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a06      	ldr	r2, [pc, #24]	@ (800c604 <SDMMC_GetCmdResp3+0x7c>)
 800c5ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	24000000 	.word	0x24000000
 800c600:	10624dd3 	.word	0x10624dd3
 800c604:	002000c5 	.word	0x002000c5

0800c608 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	460b      	mov	r3, r1
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c616:	4b35      	ldr	r3, [pc, #212]	@ (800c6ec <SDMMC_GetCmdResp6+0xe4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a35      	ldr	r2, [pc, #212]	@ (800c6f0 <SDMMC_GetCmdResp6+0xe8>)
 800c61c:	fba2 2303 	umull	r2, r3, r2, r3
 800c620:	0a5b      	lsrs	r3, r3, #9
 800c622:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c626:	fb02 f303 	mul.w	r3, r2, r3
 800c62a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	1e5a      	subs	r2, r3, #1
 800c630:	61fa      	str	r2, [r7, #28]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d102      	bne.n	800c63c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c636:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c63a:	e052      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c640:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d0ef      	beq.n	800c62c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1ea      	bne.n	800c62c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65a:	f003 0304 	and.w	r3, r3, #4
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d004      	beq.n	800c66c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2204      	movs	r2, #4
 800c666:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c668:	2304      	movs	r3, #4
 800c66a:	e03a      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d004      	beq.n	800c682 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2201      	movs	r2, #1
 800c67c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c67e:	2301      	movs	r3, #1
 800c680:	e02f      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f7ff fb7c 	bl	800bd80 <SDMMC_GetCommandResponse>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	7afb      	ldrb	r3, [r7, #11]
 800c68e:	4293      	cmp	r3, r2
 800c690:	d001      	beq.n	800c696 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c692:	2301      	movs	r3, #1
 800c694:	e025      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4a16      	ldr	r2, [pc, #88]	@ (800c6f4 <SDMMC_GetCmdResp6+0xec>)
 800c69a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c69c:	2100      	movs	r1, #0
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff fb7b 	bl	800bd9a <SDMMC_GetResponse>
 800c6a4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d106      	bne.n	800c6be <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	0c1b      	lsrs	r3, r3, #16
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e011      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c6cc:	e009      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6dc:	e001      	b.n	800c6e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3720      	adds	r7, #32
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	24000000 	.word	0x24000000
 800c6f0:	10624dd3 	.word	0x10624dd3
 800c6f4:	002000c5 	.word	0x002000c5

0800c6f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c700:	4b22      	ldr	r3, [pc, #136]	@ (800c78c <SDMMC_GetCmdResp7+0x94>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a22      	ldr	r2, [pc, #136]	@ (800c790 <SDMMC_GetCmdResp7+0x98>)
 800c706:	fba2 2303 	umull	r2, r3, r2, r3
 800c70a:	0a5b      	lsrs	r3, r3, #9
 800c70c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c710:	fb02 f303 	mul.w	r3, r2, r3
 800c714:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	1e5a      	subs	r2, r3, #1
 800c71a:	60fa      	str	r2, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c720:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c724:	e02c      	b.n	800c780 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c72a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c732:	2b00      	cmp	r3, #0
 800c734:	d0ef      	beq.n	800c716 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ea      	bne.n	800c716 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c744:	f003 0304 	and.w	r3, r3, #4
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d004      	beq.n	800c756 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2204      	movs	r2, #4
 800c750:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c752:	2304      	movs	r3, #4
 800c754:	e014      	b.n	800c780 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d004      	beq.n	800c76c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c768:	2301      	movs	r3, #1
 800c76a:	e009      	b.n	800c780 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2240      	movs	r2, #64	@ 0x40
 800c77c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c77e:	2300      	movs	r3, #0

}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr
 800c78c:	24000000 	.word	0x24000000
 800c790:	10624dd3 	.word	0x10624dd3

0800c794 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c79c:	4b11      	ldr	r3, [pc, #68]	@ (800c7e4 <SDMMC_GetCmdError+0x50>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a11      	ldr	r2, [pc, #68]	@ (800c7e8 <SDMMC_GetCmdError+0x54>)
 800c7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a6:	0a5b      	lsrs	r3, r3, #9
 800c7a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7ac:	fb02 f303 	mul.w	r3, r2, r3
 800c7b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	1e5a      	subs	r2, r3, #1
 800c7b6:	60fa      	str	r2, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7c0:	e009      	b.n	800c7d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0f1      	beq.n	800c7b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a06      	ldr	r2, [pc, #24]	@ (800c7ec <SDMMC_GetCmdError+0x58>)
 800c7d2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	24000000 	.word	0x24000000
 800c7e8:	10624dd3 	.word	0x10624dd3
 800c7ec:	002000c5 	.word	0x002000c5

0800c7f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c7f4:	4904      	ldr	r1, [pc, #16]	@ (800c808 <MX_FATFS_Init+0x18>)
 800c7f6:	4805      	ldr	r0, [pc, #20]	@ (800c80c <MX_FATFS_Init+0x1c>)
 800c7f8:	f002 fdca 	bl	800f390 <FATFS_LinkDriver>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	461a      	mov	r2, r3
 800c800:	4b03      	ldr	r3, [pc, #12]	@ (800c810 <MX_FATFS_Init+0x20>)
 800c802:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c804:	bf00      	nop
 800c806:	bd80      	pop	{r7, pc}
 800c808:	240007d4 	.word	0x240007d4
 800c80c:	0800fb00 	.word	0x0800fb00
 800c810:	240007d0 	.word	0x240007d0

0800c814 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c814:	b480      	push	{r7}
 800c816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c818:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c82e:	f000 f885 	bl	800c93c <BSP_SD_IsDetected>
 800c832:	4603      	mov	r3, r0
 800c834:	2b01      	cmp	r3, #1
 800c836:	d001      	beq.n	800c83c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c838:	2302      	movs	r3, #2
 800c83a:	e012      	b.n	800c862 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c83c:	480b      	ldr	r0, [pc, #44]	@ (800c86c <BSP_SD_Init+0x48>)
 800c83e:	f7fc f8d1 	bl	80089e4 <HAL_SD_Init>
 800c842:	4603      	mov	r3, r0
 800c844:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d109      	bne.n	800c860 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c84c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c850:	4806      	ldr	r0, [pc, #24]	@ (800c86c <BSP_SD_Init+0x48>)
 800c852:	f7fc ff87 	bl	8009764 <HAL_SD_ConfigWideBusOperation>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c860:	79fb      	ldrb	r3, [r7, #7]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	24000634 	.word	0x24000634

0800c870 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	68f9      	ldr	r1, [r7, #12]
 800c886:	4806      	ldr	r0, [pc, #24]	@ (800c8a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c888:	f7fc f9cc 	bl	8008c24 <HAL_SD_ReadBlocks_DMA>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c896:	7dfb      	ldrb	r3, [r7, #23]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	24000634 	.word	0x24000634

0800c8a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	68f9      	ldr	r1, [r7, #12]
 800c8ba:	4806      	ldr	r0, [pc, #24]	@ (800c8d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c8bc:	f7fc fa5a 	bl	8008d74 <HAL_SD_WriteBlocks_DMA>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	24000634 	.word	0x24000634

0800c8d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c8dc:	4805      	ldr	r0, [pc, #20]	@ (800c8f4 <BSP_SD_GetCardState+0x1c>)
 800c8de:	f7fd f853 	bl	8009988 <HAL_SD_GetCardState>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b04      	cmp	r3, #4
 800c8e6:	bf14      	ite	ne
 800c8e8:	2301      	movne	r3, #1
 800c8ea:	2300      	moveq	r3, #0
 800c8ec:	b2db      	uxtb	r3, r3
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	24000634 	.word	0x24000634

0800c8f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	4803      	ldr	r0, [pc, #12]	@ (800c910 <BSP_SD_GetCardInfo+0x18>)
 800c904:	f7fc ff02 	bl	800970c <HAL_SD_GetCardInfo>
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	24000634 	.word	0x24000634

0800c914 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c91c:	f000 f9a0 	bl	800cc60 <BSP_SD_WriteCpltCallback>
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c930:	f000 f9a2 	bl	800cc78 <BSP_SD_ReadCpltCallback>
}
 800c934:	bf00      	nop
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c942:	2301      	movs	r3, #1
 800c944:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c946:	f000 f80b 	bl	800c960 <BSP_PlatformIsDetected>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c950:	2300      	movs	r3, #0
 800c952:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c954:	79fb      	ldrb	r3, [r7, #7]
 800c956:	b2db      	uxtb	r3, r3
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c966:	2301      	movs	r3, #1
 800c968:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c96a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c96e:	4806      	ldr	r0, [pc, #24]	@ (800c988 <BSP_PlatformIsDetected+0x28>)
 800c970:	f7f6 fcec 	bl	800334c <HAL_GPIO_ReadPin>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c97a:	2300      	movs	r3, #0
 800c97c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c97e:	79fb      	ldrb	r3, [r7, #7]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	58022000 	.word	0x58022000

0800c98c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c994:	f7f5 fe02 	bl	800259c <HAL_GetTick>
 800c998:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c99a:	e006      	b.n	800c9aa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c99c:	f7ff ff9c 	bl	800c8d8 <BSP_SD_GetCardState>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e009      	b.n	800c9be <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c9aa:	f7f5 fdf7 	bl	800259c <HAL_GetTick>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d8f0      	bhi.n	800c99c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
	...

0800c9c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca00 <SD_CheckStatus+0x38>)
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c9d8:	f7ff ff7e 	bl	800c8d8 <BSP_SD_GetCardState>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d107      	bne.n	800c9f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c9e2:	4b07      	ldr	r3, [pc, #28]	@ (800ca00 <SD_CheckStatus+0x38>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	f023 0301 	bic.w	r3, r3, #1
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ca00 <SD_CheckStatus+0x38>)
 800c9f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9f2:	4b03      	ldr	r3, [pc, #12]	@ (800ca00 <SD_CheckStatus+0x38>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	b2db      	uxtb	r3, r3
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	24000011 	.word	0x24000011

0800ca04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca0e:	f7ff ff09 	bl	800c824 <BSP_SD_Init>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d107      	bne.n	800ca28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff ffd4 	bl	800c9c8 <SD_CheckStatus>
 800ca20:	4603      	mov	r3, r0
 800ca22:	461a      	mov	r2, r3
 800ca24:	4b04      	ldr	r3, [pc, #16]	@ (800ca38 <SD_initialize+0x34>)
 800ca26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ca28:	4b03      	ldr	r3, [pc, #12]	@ (800ca38 <SD_initialize+0x34>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b2db      	uxtb	r3, r3
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	24000011 	.word	0x24000011

0800ca3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	4603      	mov	r3, r0
 800ca44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff ffbd 	bl	800c9c8 <SD_CheckStatus>
 800ca4e:	4603      	mov	r3, r0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60b9      	str	r1, [r7, #8]
 800ca60:	607a      	str	r2, [r7, #4]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4603      	mov	r3, r0
 800ca66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca6c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ca70:	f7ff ff8c 	bl	800c98c <SD_CheckStatusWithTimeout>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	da01      	bge.n	800ca7e <SD_read+0x26>
  {
    return res;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	e03b      	b.n	800caf6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	6879      	ldr	r1, [r7, #4]
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f7ff fef4 	bl	800c870 <BSP_SD_ReadBlocks_DMA>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d132      	bne.n	800caf4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ca8e:	4b1c      	ldr	r3, [pc, #112]	@ (800cb00 <SD_read+0xa8>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ca94:	f7f5 fd82 	bl	800259c <HAL_GetTick>
 800ca98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ca9a:	bf00      	nop
 800ca9c:	4b18      	ldr	r3, [pc, #96]	@ (800cb00 <SD_read+0xa8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d108      	bne.n	800cab6 <SD_read+0x5e>
 800caa4:	f7f5 fd7a 	bl	800259c <HAL_GetTick>
 800caa8:	4602      	mov	r2, r0
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d9f2      	bls.n	800ca9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800cab6:	4b12      	ldr	r3, [pc, #72]	@ (800cb00 <SD_read+0xa8>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d102      	bne.n	800cac4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	75fb      	strb	r3, [r7, #23]
 800cac2:	e017      	b.n	800caf4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800cac4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb00 <SD_read+0xa8>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800caca:	f7f5 fd67 	bl	800259c <HAL_GetTick>
 800cace:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cad0:	e007      	b.n	800cae2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cad2:	f7ff ff01 	bl	800c8d8 <BSP_SD_GetCardState>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d102      	bne.n	800cae2 <SD_read+0x8a>
          {
            res = RES_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cae0:	e008      	b.n	800caf4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cae2:	f7f5 fd5b 	bl	800259c <HAL_GetTick>
 800cae6:	4602      	mov	r2, r0
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	f247 522f 	movw	r2, #29999	@ 0x752f
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d9ee      	bls.n	800cad2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	240007dc 	.word	0x240007dc

0800cb04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	603b      	str	r3, [r7, #0]
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800cb18:	4b24      	ldr	r3, [pc, #144]	@ (800cbac <SD_write+0xa8>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb1e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cb22:	f7ff ff33 	bl	800c98c <SD_CheckStatusWithTimeout>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	da01      	bge.n	800cb30 <SD_write+0x2c>
  {
    return res;
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
 800cb2e:	e038      	b.n	800cba2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	6879      	ldr	r1, [r7, #4]
 800cb34:	68b8      	ldr	r0, [r7, #8]
 800cb36:	f7ff feb5 	bl	800c8a4 <BSP_SD_WriteBlocks_DMA>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d12f      	bne.n	800cba0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cb40:	f7f5 fd2c 	bl	800259c <HAL_GetTick>
 800cb44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cb46:	bf00      	nop
 800cb48:	4b18      	ldr	r3, [pc, #96]	@ (800cbac <SD_write+0xa8>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d108      	bne.n	800cb62 <SD_write+0x5e>
 800cb50:	f7f5 fd24 	bl	800259c <HAL_GetTick>
 800cb54:	4602      	mov	r2, r0
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	1ad3      	subs	r3, r2, r3
 800cb5a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d9f2      	bls.n	800cb48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800cb62:	4b12      	ldr	r3, [pc, #72]	@ (800cbac <SD_write+0xa8>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d102      	bne.n	800cb70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	75fb      	strb	r3, [r7, #23]
 800cb6e:	e017      	b.n	800cba0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800cb70:	4b0e      	ldr	r3, [pc, #56]	@ (800cbac <SD_write+0xa8>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cb76:	f7f5 fd11 	bl	800259c <HAL_GetTick>
 800cb7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb7c:	e007      	b.n	800cb8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb7e:	f7ff feab 	bl	800c8d8 <BSP_SD_GetCardState>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <SD_write+0x8a>
          {
            res = RES_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	75fb      	strb	r3, [r7, #23]
            break;
 800cb8c:	e008      	b.n	800cba0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb8e:	f7f5 fd05 	bl	800259c <HAL_GetTick>
 800cb92:	4602      	mov	r2, r0
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d9ee      	bls.n	800cb7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	240007d8 	.word	0x240007d8

0800cbb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b08c      	sub	sp, #48	@ 0x30
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	603a      	str	r2, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbc6:	4b25      	ldr	r3, [pc, #148]	@ (800cc5c <SD_ioctl+0xac>)
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <SD_ioctl+0x28>
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	e03c      	b.n	800cc52 <SD_ioctl+0xa2>

  switch (cmd)
 800cbd8:	79bb      	ldrb	r3, [r7, #6]
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d834      	bhi.n	800cc48 <SD_ioctl+0x98>
 800cbde:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe4 <SD_ioctl+0x34>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cbf5 	.word	0x0800cbf5
 800cbe8:	0800cbfd 	.word	0x0800cbfd
 800cbec:	0800cc15 	.word	0x0800cc15
 800cbf0:	0800cc2f 	.word	0x0800cc2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cbfa:	e028      	b.n	800cc4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbfc:	f107 0308 	add.w	r3, r7, #8
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fe79 	bl	800c8f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc06:	6a3a      	ldr	r2, [r7, #32]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc12:	e01c      	b.n	800cc4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc14:	f107 0308 	add.w	r3, r7, #8
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff fe6d 	bl	800c8f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc26:	2300      	movs	r3, #0
 800cc28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc2c:	e00f      	b.n	800cc4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc2e:	f107 0308 	add.w	r3, r7, #8
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff fe60 	bl	800c8f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3a:	0a5a      	lsrs	r2, r3, #9
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc46:	e002      	b.n	800cc4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc48:	2304      	movs	r3, #4
 800cc4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cc4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3730      	adds	r7, #48	@ 0x30
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	24000011 	.word	0x24000011

0800cc60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cc60:	b480      	push	{r7}
 800cc62:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cc64:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <BSP_SD_WriteCpltCallback+0x14>)
 800cc66:	2201      	movs	r2, #1
 800cc68:	601a      	str	r2, [r3, #0]
}
 800cc6a:	bf00      	nop
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	240007d8 	.word	0x240007d8

0800cc78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cc7c:	4b03      	ldr	r3, [pc, #12]	@ (800cc8c <BSP_SD_ReadCpltCallback+0x14>)
 800cc7e:	2201      	movs	r2, #1
 800cc80:	601a      	str	r2, [r3, #0]
}
 800cc82:	bf00      	nop
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	240007dc 	.word	0x240007dc

0800cc90 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800cc90:	b480      	push	{r7}
 800cc92:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cc94:	bf00      	nop
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
	...

0800cca0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	4a08      	ldr	r2, [pc, #32]	@ (800ccd0 <disk_status+0x30>)
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	79fa      	ldrb	r2, [r7, #7]
 800ccb8:	4905      	ldr	r1, [pc, #20]	@ (800ccd0 <disk_status+0x30>)
 800ccba:	440a      	add	r2, r1
 800ccbc:	7a12      	ldrb	r2, [r2, #8]
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	4798      	blx	r3
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	24000808 	.word	0x24000808

0800ccd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	4a0e      	ldr	r2, [pc, #56]	@ (800cd20 <disk_initialize+0x4c>)
 800cce6:	5cd3      	ldrb	r3, [r2, r3]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d114      	bne.n	800cd16 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	4a0c      	ldr	r2, [pc, #48]	@ (800cd20 <disk_initialize+0x4c>)
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	79fa      	ldrb	r2, [r7, #7]
 800ccfa:	4909      	ldr	r1, [pc, #36]	@ (800cd20 <disk_initialize+0x4c>)
 800ccfc:	440a      	add	r2, r1
 800ccfe:	7a12      	ldrb	r2, [r2, #8]
 800cd00:	4610      	mov	r0, r2
 800cd02:	4798      	blx	r3
 800cd04:	4603      	mov	r3, r0
 800cd06:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d103      	bne.n	800cd16 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	4a03      	ldr	r2, [pc, #12]	@ (800cd20 <disk_initialize+0x4c>)
 800cd12:	2101      	movs	r1, #1
 800cd14:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	24000808 	.word	0x24000808

0800cd24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cd24:	b590      	push	{r4, r7, lr}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	4a0a      	ldr	r2, [pc, #40]	@ (800cd60 <disk_read+0x3c>)
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	689c      	ldr	r4, [r3, #8]
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	4a07      	ldr	r2, [pc, #28]	@ (800cd60 <disk_read+0x3c>)
 800cd44:	4413      	add	r3, r2
 800cd46:	7a18      	ldrb	r0, [r3, #8]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	68b9      	ldr	r1, [r7, #8]
 800cd4e:	47a0      	blx	r4
 800cd50:	4603      	mov	r3, r0
 800cd52:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd90      	pop	{r4, r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	24000808 	.word	0x24000808

0800cd64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd64:	b590      	push	{r4, r7, lr}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	4a0a      	ldr	r2, [pc, #40]	@ (800cda0 <disk_write+0x3c>)
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	68dc      	ldr	r4, [r3, #12]
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	4a07      	ldr	r2, [pc, #28]	@ (800cda0 <disk_write+0x3c>)
 800cd84:	4413      	add	r3, r2
 800cd86:	7a18      	ldrb	r0, [r3, #8]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	68b9      	ldr	r1, [r7, #8]
 800cd8e:	47a0      	blx	r4
 800cd90:	4603      	mov	r3, r0
 800cd92:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	371c      	adds	r7, #28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd90      	pop	{r4, r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	24000808 	.word	0x24000808

0800cda4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	4603      	mov	r3, r0
 800cdac:	603a      	str	r2, [r7, #0]
 800cdae:	71fb      	strb	r3, [r7, #7]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	4a09      	ldr	r2, [pc, #36]	@ (800cddc <disk_ioctl+0x38>)
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	79fa      	ldrb	r2, [r7, #7]
 800cdc2:	4906      	ldr	r1, [pc, #24]	@ (800cddc <disk_ioctl+0x38>)
 800cdc4:	440a      	add	r2, r1
 800cdc6:	7a10      	ldrb	r0, [r2, #8]
 800cdc8:	79b9      	ldrb	r1, [r7, #6]
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	4798      	blx	r3
 800cdce:	4603      	mov	r3, r0
 800cdd0:	73fb      	strb	r3, [r7, #15]
  return res;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	24000808 	.word	0x24000808

0800cde0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3301      	adds	r3, #1
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cdf0:	89fb      	ldrh	r3, [r7, #14]
 800cdf2:	021b      	lsls	r3, r3, #8
 800cdf4:	b21a      	sxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	b21b      	sxth	r3, r3
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	b21b      	sxth	r3, r3
 800ce00:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ce02:	89fb      	ldrh	r3, [r7, #14]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3303      	adds	r3, #3
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	021b      	lsls	r3, r3, #8
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	3202      	adds	r2, #2
 800ce28:	7812      	ldrb	r2, [r2, #0]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	3201      	adds	r2, #1
 800ce36:	7812      	ldrb	r2, [r2, #0]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	7812      	ldrb	r2, [r2, #0]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce48:	68fb      	ldr	r3, [r7, #12]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	1c5a      	adds	r2, r3, #1
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	887a      	ldrh	r2, [r7, #2]
 800ce6a:	b2d2      	uxtb	r2, r2
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	887b      	ldrh	r3, [r7, #2]
 800ce70:	0a1b      	lsrs	r3, r3, #8
 800ce72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	607a      	str	r2, [r7, #4]
 800ce7a:	887a      	ldrh	r2, [r7, #2]
 800ce7c:	b2d2      	uxtb	r2, r2
 800ce7e:	701a      	strb	r2, [r3, #0]
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	b2d2      	uxtb	r2, r2
 800cea0:	701a      	strb	r2, [r3, #0]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	0a1b      	lsrs	r3, r3, #8
 800cea6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	607a      	str	r2, [r7, #4]
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	b2d2      	uxtb	r2, r2
 800ceb2:	701a      	strb	r2, [r3, #0]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	0a1b      	lsrs	r3, r3, #8
 800ceb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	1c5a      	adds	r2, r3, #1
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	b2d2      	uxtb	r2, r2
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	0a1b      	lsrs	r3, r3, #8
 800ceca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	607a      	str	r2, [r7, #4]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	b2d2      	uxtb	r2, r2
 800ced6:	701a      	strb	r2, [r3, #0]
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00d      	beq.n	800cf1a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cefe:	693a      	ldr	r2, [r7, #16]
 800cf00:	1c53      	adds	r3, r2, #1
 800cf02:	613b      	str	r3, [r7, #16]
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	1c59      	adds	r1, r3, #1
 800cf08:	6179      	str	r1, [r7, #20]
 800cf0a:	7812      	ldrb	r2, [r2, #0]
 800cf0c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	607b      	str	r3, [r7, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1f1      	bne.n	800cefe <mem_cpy+0x1a>
	}
}
 800cf1a:	bf00      	nop
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cf26:	b480      	push	{r7}
 800cf28:	b087      	sub	sp, #28
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	617a      	str	r2, [r7, #20]
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	b2d2      	uxtb	r2, r2
 800cf40:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	607b      	str	r3, [r7, #4]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f3      	bne.n	800cf36 <mem_set+0x10>
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	371c      	adds	r7, #28
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf5c:	b480      	push	{r7}
 800cf5e:	b089      	sub	sp, #36	@ 0x24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	61fb      	str	r3, [r7, #28]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	61fa      	str	r2, [r7, #28]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	61ba      	str	r2, [r7, #24]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	1acb      	subs	r3, r1, r3
 800cf88:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	607b      	str	r3, [r7, #4]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <mem_cmp+0x40>
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0eb      	beq.n	800cf74 <mem_cmp+0x18>

	return r;
 800cf9c:	697b      	ldr	r3, [r7, #20]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3724      	adds	r7, #36	@ 0x24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cfaa:	b480      	push	{r7}
 800cfac:	b083      	sub	sp, #12
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cfb4:	e002      	b.n	800cfbc <chk_chr+0x12>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	607b      	str	r3, [r7, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d005      	beq.n	800cfd0 <chk_chr+0x26>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d1f2      	bne.n	800cfb6 <chk_chr+0xc>
	return *str;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	781b      	ldrb	r3, [r3, #0]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cfea:	2300      	movs	r3, #0
 800cfec:	60bb      	str	r3, [r7, #8]
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	e029      	b.n	800d048 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cff4:	4a27      	ldr	r2, [pc, #156]	@ (800d094 <chk_lock+0xb4>)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	011b      	lsls	r3, r3, #4
 800cffa:	4413      	add	r3, r2
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d01d      	beq.n	800d03e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d002:	4a24      	ldr	r2, [pc, #144]	@ (800d094 <chk_lock+0xb4>)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	4413      	add	r3, r2
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d116      	bne.n	800d042 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d014:	4a1f      	ldr	r2, [pc, #124]	@ (800d094 <chk_lock+0xb4>)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	011b      	lsls	r3, r3, #4
 800d01a:	4413      	add	r3, r2
 800d01c:	3304      	adds	r3, #4
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d024:	429a      	cmp	r2, r3
 800d026:	d10c      	bne.n	800d042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d028:	4a1a      	ldr	r2, [pc, #104]	@ (800d094 <chk_lock+0xb4>)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	011b      	lsls	r3, r3, #4
 800d02e:	4413      	add	r3, r2
 800d030:	3308      	adds	r3, #8
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d038:	429a      	cmp	r2, r3
 800d03a:	d102      	bne.n	800d042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d03c:	e007      	b.n	800d04e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d03e:	2301      	movs	r3, #1
 800d040:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	3301      	adds	r3, #1
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d9d2      	bls.n	800cff4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b02      	cmp	r3, #2
 800d052:	d109      	bne.n	800d068 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d102      	bne.n	800d060 <chk_lock+0x80>
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d101      	bne.n	800d064 <chk_lock+0x84>
 800d060:	2300      	movs	r3, #0
 800d062:	e010      	b.n	800d086 <chk_lock+0xa6>
 800d064:	2312      	movs	r3, #18
 800d066:	e00e      	b.n	800d086 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d108      	bne.n	800d080 <chk_lock+0xa0>
 800d06e:	4a09      	ldr	r2, [pc, #36]	@ (800d094 <chk_lock+0xb4>)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	330c      	adds	r3, #12
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d07e:	d101      	bne.n	800d084 <chk_lock+0xa4>
 800d080:	2310      	movs	r3, #16
 800d082:	e000      	b.n	800d086 <chk_lock+0xa6>
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	240007e8 	.word	0x240007e8

0800d098 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	607b      	str	r3, [r7, #4]
 800d0a2:	e002      	b.n	800d0aa <enq_lock+0x12>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	607b      	str	r3, [r7, #4]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d806      	bhi.n	800d0be <enq_lock+0x26>
 800d0b0:	4a09      	ldr	r2, [pc, #36]	@ (800d0d8 <enq_lock+0x40>)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	011b      	lsls	r3, r3, #4
 800d0b6:	4413      	add	r3, r2
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f2      	bne.n	800d0a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	bf14      	ite	ne
 800d0c4:	2301      	movne	r3, #1
 800d0c6:	2300      	moveq	r3, #0
 800d0c8:	b2db      	uxtb	r3, r3
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	240007e8 	.word	0x240007e8

0800d0dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
 800d0ea:	e01f      	b.n	800d12c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d0ec:	4a41      	ldr	r2, [pc, #260]	@ (800d1f4 <inc_lock+0x118>)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	4413      	add	r3, r2
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d113      	bne.n	800d126 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d0fe:	4a3d      	ldr	r2, [pc, #244]	@ (800d1f4 <inc_lock+0x118>)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	011b      	lsls	r3, r3, #4
 800d104:	4413      	add	r3, r2
 800d106:	3304      	adds	r3, #4
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d10e:	429a      	cmp	r2, r3
 800d110:	d109      	bne.n	800d126 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d112:	4a38      	ldr	r2, [pc, #224]	@ (800d1f4 <inc_lock+0x118>)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	011b      	lsls	r3, r3, #4
 800d118:	4413      	add	r3, r2
 800d11a:	3308      	adds	r3, #8
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d122:	429a      	cmp	r2, r3
 800d124:	d006      	beq.n	800d134 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3301      	adds	r3, #1
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d9dc      	bls.n	800d0ec <inc_lock+0x10>
 800d132:	e000      	b.n	800d136 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d134:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d132      	bne.n	800d1a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	e002      	b.n	800d148 <inc_lock+0x6c>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3301      	adds	r3, #1
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d806      	bhi.n	800d15c <inc_lock+0x80>
 800d14e:	4a29      	ldr	r2, [pc, #164]	@ (800d1f4 <inc_lock+0x118>)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	011b      	lsls	r3, r3, #4
 800d154:	4413      	add	r3, r2
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1f2      	bne.n	800d142 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d101      	bne.n	800d166 <inc_lock+0x8a>
 800d162:	2300      	movs	r3, #0
 800d164:	e040      	b.n	800d1e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	4922      	ldr	r1, [pc, #136]	@ (800d1f4 <inc_lock+0x118>)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	011b      	lsls	r3, r3, #4
 800d170:	440b      	add	r3, r1
 800d172:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	689a      	ldr	r2, [r3, #8]
 800d178:	491e      	ldr	r1, [pc, #120]	@ (800d1f4 <inc_lock+0x118>)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	011b      	lsls	r3, r3, #4
 800d17e:	440b      	add	r3, r1
 800d180:	3304      	adds	r3, #4
 800d182:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	695a      	ldr	r2, [r3, #20]
 800d188:	491a      	ldr	r1, [pc, #104]	@ (800d1f4 <inc_lock+0x118>)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	011b      	lsls	r3, r3, #4
 800d18e:	440b      	add	r3, r1
 800d190:	3308      	adds	r3, #8
 800d192:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d194:	4a17      	ldr	r2, [pc, #92]	@ (800d1f4 <inc_lock+0x118>)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	4413      	add	r3, r2
 800d19c:	330c      	adds	r3, #12
 800d19e:	2200      	movs	r2, #0
 800d1a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d009      	beq.n	800d1bc <inc_lock+0xe0>
 800d1a8:	4a12      	ldr	r2, [pc, #72]	@ (800d1f4 <inc_lock+0x118>)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	011b      	lsls	r3, r3, #4
 800d1ae:	4413      	add	r3, r2
 800d1b0:	330c      	adds	r3, #12
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <inc_lock+0xe0>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e015      	b.n	800d1e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d108      	bne.n	800d1d4 <inc_lock+0xf8>
 800d1c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f4 <inc_lock+0x118>)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	4413      	add	r3, r2
 800d1ca:	330c      	adds	r3, #12
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	e001      	b.n	800d1d8 <inc_lock+0xfc>
 800d1d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1d8:	4906      	ldr	r1, [pc, #24]	@ (800d1f4 <inc_lock+0x118>)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	011b      	lsls	r3, r3, #4
 800d1de:	440b      	add	r3, r1
 800d1e0:	330c      	adds	r3, #12
 800d1e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	240007e8 	.word	0x240007e8

0800d1f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3b01      	subs	r3, #1
 800d204:	607b      	str	r3, [r7, #4]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d825      	bhi.n	800d258 <dec_lock+0x60>
		n = Files[i].ctr;
 800d20c:	4a17      	ldr	r2, [pc, #92]	@ (800d26c <dec_lock+0x74>)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	011b      	lsls	r3, r3, #4
 800d212:	4413      	add	r3, r2
 800d214:	330c      	adds	r3, #12
 800d216:	881b      	ldrh	r3, [r3, #0]
 800d218:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d21a:	89fb      	ldrh	r3, [r7, #14]
 800d21c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d220:	d101      	bne.n	800d226 <dec_lock+0x2e>
 800d222:	2300      	movs	r3, #0
 800d224:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d226:	89fb      	ldrh	r3, [r7, #14]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <dec_lock+0x3a>
 800d22c:	89fb      	ldrh	r3, [r7, #14]
 800d22e:	3b01      	subs	r3, #1
 800d230:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d232:	4a0e      	ldr	r2, [pc, #56]	@ (800d26c <dec_lock+0x74>)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	011b      	lsls	r3, r3, #4
 800d238:	4413      	add	r3, r2
 800d23a:	330c      	adds	r3, #12
 800d23c:	89fa      	ldrh	r2, [r7, #14]
 800d23e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d105      	bne.n	800d252 <dec_lock+0x5a>
 800d246:	4a09      	ldr	r2, [pc, #36]	@ (800d26c <dec_lock+0x74>)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	011b      	lsls	r3, r3, #4
 800d24c:	4413      	add	r3, r2
 800d24e:	2200      	movs	r2, #0
 800d250:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	737b      	strb	r3, [r7, #13]
 800d256:	e001      	b.n	800d25c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d258:	2302      	movs	r3, #2
 800d25a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d25c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	240007e8 	.word	0x240007e8

0800d270 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d278:	2300      	movs	r3, #0
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	e010      	b.n	800d2a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d27e:	4a0d      	ldr	r2, [pc, #52]	@ (800d2b4 <clear_lock+0x44>)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	011b      	lsls	r3, r3, #4
 800d284:	4413      	add	r3, r2
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d105      	bne.n	800d29a <clear_lock+0x2a>
 800d28e:	4a09      	ldr	r2, [pc, #36]	@ (800d2b4 <clear_lock+0x44>)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	011b      	lsls	r3, r3, #4
 800d294:	4413      	add	r3, r2
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3301      	adds	r3, #1
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d9eb      	bls.n	800d27e <clear_lock+0xe>
	}
}
 800d2a6:	bf00      	nop
 800d2a8:	bf00      	nop
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr
 800d2b4:	240007e8 	.word	0x240007e8

0800d2b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	78db      	ldrb	r3, [r3, #3]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d034      	beq.n	800d336 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	7858      	ldrb	r0, [r3, #1]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2dc:	2301      	movs	r3, #1
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	f7ff fd40 	bl	800cd64 <disk_write>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	73fb      	strb	r3, [r7, #15]
 800d2ee:	e022      	b.n	800d336 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	1ad2      	subs	r2, r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	429a      	cmp	r2, r3
 800d304:	d217      	bcs.n	800d336 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	789b      	ldrb	r3, [r3, #2]
 800d30a:	613b      	str	r3, [r7, #16]
 800d30c:	e010      	b.n	800d330 <sync_window+0x78>
					wsect += fs->fsize;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	4413      	add	r3, r2
 800d316:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7858      	ldrb	r0, [r3, #1]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d322:	2301      	movs	r3, #1
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	f7ff fd1d 	bl	800cd64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d8eb      	bhi.n	800d30e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d336:	7bfb      	ldrb	r3, [r7, #15]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d34a:	2300      	movs	r3, #0
 800d34c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d01b      	beq.n	800d390 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff ffad 	bl	800d2b8 <sync_window>
 800d35e:	4603      	mov	r3, r0
 800d360:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d362:	7bfb      	ldrb	r3, [r7, #15]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d113      	bne.n	800d390 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7858      	ldrb	r0, [r3, #1]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d372:	2301      	movs	r3, #1
 800d374:	683a      	ldr	r2, [r7, #0]
 800d376:	f7ff fcd5 	bl	800cd24 <disk_read>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d380:	f04f 33ff 	mov.w	r3, #4294967295
 800d384:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d386:	2301      	movs	r3, #1
 800d388:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff ff87 	bl	800d2b8 <sync_window>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3ae:	7bfb      	ldrb	r3, [r7, #15]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d158      	bne.n	800d466 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d148      	bne.n	800d44e <sync_fs+0xb2>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	791b      	ldrb	r3, [r3, #4]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d144      	bne.n	800d44e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3330      	adds	r3, #48	@ 0x30
 800d3c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff fda9 	bl	800cf26 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3330      	adds	r3, #48	@ 0x30
 800d3d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d3dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff fd38 	bl	800ce56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	3330      	adds	r3, #48	@ 0x30
 800d3ea:	4921      	ldr	r1, [pc, #132]	@ (800d470 <sync_fs+0xd4>)
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff fd4d 	bl	800ce8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3330      	adds	r3, #48	@ 0x30
 800d3f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d3fa:	491e      	ldr	r1, [pc, #120]	@ (800d474 <sync_fs+0xd8>)
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff fd45 	bl	800ce8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3330      	adds	r3, #48	@ 0x30
 800d406:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7ff fd3b 	bl	800ce8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3330      	adds	r3, #48	@ 0x30
 800d41a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	4619      	mov	r1, r3
 800d424:	4610      	mov	r0, r2
 800d426:	f7ff fd31 	bl	800ce8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	1c5a      	adds	r2, r3, #1
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7858      	ldrb	r0, [r3, #1]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d442:	2301      	movs	r3, #1
 800d444:	f7ff fc8e 	bl	800cd64 <disk_write>
			fs->fsi_flag = 0;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	785b      	ldrb	r3, [r3, #1]
 800d452:	2200      	movs	r2, #0
 800d454:	2100      	movs	r1, #0
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff fca4 	bl	800cda4 <disk_ioctl>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <sync_fs+0xca>
 800d462:	2301      	movs	r3, #1
 800d464:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d466:	7bfb      	ldrb	r3, [r7, #15]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	41615252 	.word	0x41615252
 800d474:	61417272 	.word	0x61417272

0800d478 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	3b02      	subs	r3, #2
 800d486:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	3b02      	subs	r3, #2
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	429a      	cmp	r2, r3
 800d492:	d301      	bcc.n	800d498 <clust2sect+0x20>
 800d494:	2300      	movs	r3, #0
 800d496:	e008      	b.n	800d4aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	895b      	ldrh	r3, [r3, #10]
 800d49c:	461a      	mov	r2, r3
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	fb03 f202 	mul.w	r2, r3, r2
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a8:	4413      	add	r3, r2
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b086      	sub	sp, #24
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d904      	bls.n	800d4d6 <get_fat+0x20>
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d302      	bcc.n	800d4dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	617b      	str	r3, [r7, #20]
 800d4da:	e08e      	b.n	800d5fa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d061      	beq.n	800d5ae <get_fat+0xf8>
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	dc7b      	bgt.n	800d5e6 <get_fat+0x130>
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d002      	beq.n	800d4f8 <get_fat+0x42>
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d041      	beq.n	800d57a <get_fat+0xc4>
 800d4f6:	e076      	b.n	800d5e6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	60fb      	str	r3, [r7, #12]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	085b      	lsrs	r3, r3, #1
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	4413      	add	r3, r2
 800d504:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	6a1a      	ldr	r2, [r3, #32]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	0a5b      	lsrs	r3, r3, #9
 800d50e:	4413      	add	r3, r2
 800d510:	4619      	mov	r1, r3
 800d512:	6938      	ldr	r0, [r7, #16]
 800d514:	f7ff ff14 	bl	800d340 <move_window>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d166      	bne.n	800d5ec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	60fa      	str	r2, [r7, #12]
 800d524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d528:	693a      	ldr	r2, [r7, #16]
 800d52a:	4413      	add	r3, r2
 800d52c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d530:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	6a1a      	ldr	r2, [r3, #32]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	0a5b      	lsrs	r3, r3, #9
 800d53a:	4413      	add	r3, r2
 800d53c:	4619      	mov	r1, r3
 800d53e:	6938      	ldr	r0, [r7, #16]
 800d540:	f7ff fefe 	bl	800d340 <move_window>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d152      	bne.n	800d5f0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	4413      	add	r3, r2
 800d554:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d558:	021b      	lsls	r3, r3, #8
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <get_fat+0xba>
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	091b      	lsrs	r3, r3, #4
 800d56e:	e002      	b.n	800d576 <get_fat+0xc0>
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d576:	617b      	str	r3, [r7, #20]
			break;
 800d578:	e03f      	b.n	800d5fa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	6a1a      	ldr	r2, [r3, #32]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	0a1b      	lsrs	r3, r3, #8
 800d582:	4413      	add	r3, r2
 800d584:	4619      	mov	r1, r3
 800d586:	6938      	ldr	r0, [r7, #16]
 800d588:	f7ff feda 	bl	800d340 <move_window>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d130      	bne.n	800d5f4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d5a0:	4413      	add	r3, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fc1c 	bl	800cde0 <ld_word>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	617b      	str	r3, [r7, #20]
			break;
 800d5ac:	e025      	b.n	800d5fa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	6a1a      	ldr	r2, [r3, #32]
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	09db      	lsrs	r3, r3, #7
 800d5b6:	4413      	add	r3, r2
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6938      	ldr	r0, [r7, #16]
 800d5bc:	f7ff fec0 	bl	800d340 <move_window>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d118      	bne.n	800d5f8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d5d4:	4413      	add	r3, r2
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fc1a 	bl	800ce10 <ld_dword>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d5e2:	617b      	str	r3, [r7, #20]
			break;
 800d5e4:	e009      	b.n	800d5fa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	617b      	str	r3, [r7, #20]
 800d5ea:	e006      	b.n	800d5fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5ec:	bf00      	nop
 800d5ee:	e004      	b.n	800d5fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5f0:	bf00      	nop
 800d5f2:	e002      	b.n	800d5fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5f8:	bf00      	nop
		}
	}

	return val;
 800d5fa:	697b      	ldr	r3, [r7, #20]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3718      	adds	r7, #24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b089      	sub	sp, #36	@ 0x24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d610:	2302      	movs	r3, #2
 800d612:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2b01      	cmp	r3, #1
 800d618:	f240 80d9 	bls.w	800d7ce <put_fat+0x1ca>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	695b      	ldr	r3, [r3, #20]
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	429a      	cmp	r2, r3
 800d624:	f080 80d3 	bcs.w	800d7ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	f000 8096 	beq.w	800d75e <put_fat+0x15a>
 800d632:	2b03      	cmp	r3, #3
 800d634:	f300 80cb 	bgt.w	800d7ce <put_fat+0x1ca>
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d002      	beq.n	800d642 <put_fat+0x3e>
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d06e      	beq.n	800d71e <put_fat+0x11a>
 800d640:	e0c5      	b.n	800d7ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	61bb      	str	r3, [r7, #24]
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	085b      	lsrs	r3, r3, #1
 800d64a:	69ba      	ldr	r2, [r7, #24]
 800d64c:	4413      	add	r3, r2
 800d64e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6a1a      	ldr	r2, [r3, #32]
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	0a5b      	lsrs	r3, r3, #9
 800d658:	4413      	add	r3, r2
 800d65a:	4619      	mov	r1, r3
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fe6f 	bl	800d340 <move_window>
 800d662:	4603      	mov	r3, r0
 800d664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d666:	7ffb      	ldrb	r3, [r7, #31]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f040 80a9 	bne.w	800d7c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	1c59      	adds	r1, r3, #1
 800d678:	61b9      	str	r1, [r7, #24]
 800d67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67e:	4413      	add	r3, r2
 800d680:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00d      	beq.n	800d6a8 <put_fat+0xa4>
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	b25b      	sxtb	r3, r3
 800d692:	f003 030f 	and.w	r3, r3, #15
 800d696:	b25a      	sxtb	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	b25b      	sxtb	r3, r3
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	e001      	b.n	800d6ac <put_fat+0xa8>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6a1a      	ldr	r2, [r3, #32]
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	0a5b      	lsrs	r3, r3, #9
 800d6be:	4413      	add	r3, r2
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f7ff fe3c 	bl	800d340 <move_window>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6cc:	7ffb      	ldrb	r3, [r7, #31]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d178      	bne.n	800d7c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6de:	4413      	add	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d003      	beq.n	800d6f4 <put_fat+0xf0>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	091b      	lsrs	r3, r3, #4
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	e00e      	b.n	800d712 <put_fat+0x10e>
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b25b      	sxtb	r3, r3
 800d6fa:	f023 030f 	bic.w	r3, r3, #15
 800d6fe:	b25a      	sxtb	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	0a1b      	lsrs	r3, r3, #8
 800d704:	b25b      	sxtb	r3, r3
 800d706:	f003 030f 	and.w	r3, r3, #15
 800d70a:	b25b      	sxtb	r3, r3
 800d70c:	4313      	orrs	r3, r2
 800d70e:	b25b      	sxtb	r3, r3
 800d710:	b2db      	uxtb	r3, r3
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2201      	movs	r2, #1
 800d71a:	70da      	strb	r2, [r3, #3]
			break;
 800d71c:	e057      	b.n	800d7ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6a1a      	ldr	r2, [r3, #32]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	0a1b      	lsrs	r3, r3, #8
 800d726:	4413      	add	r3, r2
 800d728:	4619      	mov	r1, r3
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f7ff fe08 	bl	800d340 <move_window>
 800d730:	4603      	mov	r3, r0
 800d732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d734:	7ffb      	ldrb	r3, [r7, #31]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d146      	bne.n	800d7c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d748:	4413      	add	r3, r2
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	b292      	uxth	r2, r2
 800d74e:	4611      	mov	r1, r2
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff fb80 	bl	800ce56 <st_word>
			fs->wflag = 1;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2201      	movs	r2, #1
 800d75a:	70da      	strb	r2, [r3, #3]
			break;
 800d75c:	e037      	b.n	800d7ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6a1a      	ldr	r2, [r3, #32]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	09db      	lsrs	r3, r3, #7
 800d766:	4413      	add	r3, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7ff fde8 	bl	800d340 <move_window>
 800d770:	4603      	mov	r3, r0
 800d772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d774:	7ffb      	ldrb	r3, [r7, #31]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d128      	bne.n	800d7cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d78e:	4413      	add	r3, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fb3d 	bl	800ce10 <ld_dword>
 800d796:	4603      	mov	r3, r0
 800d798:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d79c:	4323      	orrs	r3, r4
 800d79e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d7ae:	4413      	add	r3, r2
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7ff fb6a 	bl	800ce8c <st_dword>
			fs->wflag = 1;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	70da      	strb	r2, [r3, #3]
			break;
 800d7be:	e006      	b.n	800d7ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7c0:	bf00      	nop
 800d7c2:	e004      	b.n	800d7ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7c4:	bf00      	nop
 800d7c6:	e002      	b.n	800d7ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7c8:	bf00      	nop
 800d7ca:	e000      	b.n	800d7ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7cc:	bf00      	nop
		}
	}
	return res;
 800d7ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3724      	adds	r7, #36	@ 0x24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd90      	pop	{r4, r7, pc}

0800d7d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d904      	bls.n	800d7fe <remove_chain+0x26>
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d301      	bcc.n	800d802 <remove_chain+0x2a>
 800d7fe:	2302      	movs	r3, #2
 800d800:	e04b      	b.n	800d89a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00c      	beq.n	800d822 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d808:	f04f 32ff 	mov.w	r2, #4294967295
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	69b8      	ldr	r0, [r7, #24]
 800d810:	f7ff fef8 	bl	800d604 <put_fat>
 800d814:	4603      	mov	r3, r0
 800d816:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d818:	7ffb      	ldrb	r3, [r7, #31]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <remove_chain+0x4a>
 800d81e:	7ffb      	ldrb	r3, [r7, #31]
 800d820:	e03b      	b.n	800d89a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff fe46 	bl	800d4b6 <get_fat>
 800d82a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d031      	beq.n	800d896 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d101      	bne.n	800d83c <remove_chain+0x64>
 800d838:	2302      	movs	r3, #2
 800d83a:	e02e      	b.n	800d89a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d101      	bne.n	800d848 <remove_chain+0x70>
 800d844:	2301      	movs	r3, #1
 800d846:	e028      	b.n	800d89a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d848:	2200      	movs	r2, #0
 800d84a:	68b9      	ldr	r1, [r7, #8]
 800d84c:	69b8      	ldr	r0, [r7, #24]
 800d84e:	f7ff fed9 	bl	800d604 <put_fat>
 800d852:	4603      	mov	r3, r0
 800d854:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d856:	7ffb      	ldrb	r3, [r7, #31]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <remove_chain+0x88>
 800d85c:	7ffb      	ldrb	r3, [r7, #31]
 800d85e:	e01c      	b.n	800d89a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	691a      	ldr	r2, [r3, #16]
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	3b02      	subs	r3, #2
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d20b      	bcs.n	800d886 <remove_chain+0xae>
			fs->free_clst++;
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	691b      	ldr	r3, [r3, #16]
 800d872:	1c5a      	adds	r2, r3, #1
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	791b      	ldrb	r3, [r3, #4]
 800d87c:	f043 0301 	orr.w	r3, r3, #1
 800d880:	b2da      	uxtb	r2, r3
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	429a      	cmp	r2, r3
 800d892:	d3c6      	bcc.n	800d822 <remove_chain+0x4a>
 800d894:	e000      	b.n	800d898 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d896:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3720      	adds	r7, #32
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b088      	sub	sp, #32
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10d      	bne.n	800d8d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <create_chain+0x2c>
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d31b      	bcc.n	800d906 <create_chain+0x64>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	61bb      	str	r3, [r7, #24]
 800d8d2:	e018      	b.n	800d906 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff fded 	bl	800d4b6 <get_fat>
 800d8dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d801      	bhi.n	800d8e8 <create_chain+0x46>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e070      	b.n	800d9ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ee:	d101      	bne.n	800d8f4 <create_chain+0x52>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	e06a      	b.n	800d9ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d201      	bcs.n	800d902 <create_chain+0x60>
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	e063      	b.n	800d9ca <create_chain+0x128>
		scl = clst;
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	3301      	adds	r3, #1
 800d90e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	695b      	ldr	r3, [r3, #20]
 800d914:	69fa      	ldr	r2, [r7, #28]
 800d916:	429a      	cmp	r2, r3
 800d918:	d307      	bcc.n	800d92a <create_chain+0x88>
				ncl = 2;
 800d91a:	2302      	movs	r3, #2
 800d91c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d91e:	69fa      	ldr	r2, [r7, #28]
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	429a      	cmp	r2, r3
 800d924:	d901      	bls.n	800d92a <create_chain+0x88>
 800d926:	2300      	movs	r3, #0
 800d928:	e04f      	b.n	800d9ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d92a:	69f9      	ldr	r1, [r7, #28]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff fdc2 	bl	800d4b6 <get_fat>
 800d932:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00e      	beq.n	800d958 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d003      	beq.n	800d948 <create_chain+0xa6>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d101      	bne.n	800d94c <create_chain+0xaa>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	e03e      	b.n	800d9ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d94c:	69fa      	ldr	r2, [r7, #28]
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	429a      	cmp	r2, r3
 800d952:	d1da      	bne.n	800d90a <create_chain+0x68>
 800d954:	2300      	movs	r3, #0
 800d956:	e038      	b.n	800d9ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d958:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d95a:	f04f 32ff 	mov.w	r2, #4294967295
 800d95e:	69f9      	ldr	r1, [r7, #28]
 800d960:	6938      	ldr	r0, [r7, #16]
 800d962:	f7ff fe4f 	bl	800d604 <put_fat>
 800d966:	4603      	mov	r3, r0
 800d968:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d109      	bne.n	800d984 <create_chain+0xe2>
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	6938      	ldr	r0, [r7, #16]
 800d97c:	f7ff fe42 	bl	800d604 <put_fat>
 800d980:	4603      	mov	r3, r0
 800d982:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d984:	7dfb      	ldrb	r3, [r7, #23]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d116      	bne.n	800d9b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	69fa      	ldr	r2, [r7, #28]
 800d98e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	691a      	ldr	r2, [r3, #16]
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	695b      	ldr	r3, [r3, #20]
 800d998:	3b02      	subs	r3, #2
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d804      	bhi.n	800d9a8 <create_chain+0x106>
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	1e5a      	subs	r2, r3, #1
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	791b      	ldrb	r3, [r3, #4]
 800d9ac:	f043 0301 	orr.w	r3, r3, #1
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	711a      	strb	r2, [r3, #4]
 800d9b6:	e007      	b.n	800d9c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d102      	bne.n	800d9c4 <create_chain+0x122>
 800d9be:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c2:	e000      	b.n	800d9c6 <create_chain+0x124>
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d9c8:	69fb      	ldr	r3, [r7, #28]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3720      	adds	r7, #32
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	b087      	sub	sp, #28
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	0a5b      	lsrs	r3, r3, #9
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	8952      	ldrh	r2, [r2, #10]
 800d9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	1d1a      	adds	r2, r3, #4
 800d9fc:	613a      	str	r2, [r7, #16]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <clmt_clust+0x3a>
 800da08:	2300      	movs	r3, #0
 800da0a:	e010      	b.n	800da2e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	429a      	cmp	r2, r3
 800da12:	d307      	bcc.n	800da24 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	617b      	str	r3, [r7, #20]
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	3304      	adds	r3, #4
 800da20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da22:	e7e9      	b.n	800d9f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800da24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	4413      	add	r3, r2
}
 800da2e:	4618      	mov	r0, r3
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b086      	sub	sp, #24
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da50:	d204      	bcs.n	800da5c <dir_sdi+0x22>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	f003 031f 	and.w	r3, r3, #31
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <dir_sdi+0x26>
		return FR_INT_ERR;
 800da5c:	2302      	movs	r3, #2
 800da5e:	e063      	b.n	800db28 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <dir_sdi+0x46>
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d902      	bls.n	800da80 <dir_sdi+0x46>
		clst = fs->dirbase;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10c      	bne.n	800daa0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	095b      	lsrs	r3, r3, #5
 800da8a:	693a      	ldr	r2, [r7, #16]
 800da8c:	8912      	ldrh	r2, [r2, #8]
 800da8e:	4293      	cmp	r3, r2
 800da90:	d301      	bcc.n	800da96 <dir_sdi+0x5c>
 800da92:	2302      	movs	r3, #2
 800da94:	e048      	b.n	800db28 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	61da      	str	r2, [r3, #28]
 800da9e:	e029      	b.n	800daf4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	895b      	ldrh	r3, [r3, #10]
 800daa4:	025b      	lsls	r3, r3, #9
 800daa6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800daa8:	e019      	b.n	800dade <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6979      	ldr	r1, [r7, #20]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff fd01 	bl	800d4b6 <get_fat>
 800dab4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dabc:	d101      	bne.n	800dac2 <dir_sdi+0x88>
 800dabe:	2301      	movs	r3, #1
 800dac0:	e032      	b.n	800db28 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d904      	bls.n	800dad2 <dir_sdi+0x98>
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	697a      	ldr	r2, [r7, #20]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d301      	bcc.n	800dad6 <dir_sdi+0x9c>
 800dad2:	2302      	movs	r3, #2
 800dad4:	e028      	b.n	800db28 <dir_sdi+0xee>
			ofs -= csz;
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d2e1      	bcs.n	800daaa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dae6:	6979      	ldr	r1, [r7, #20]
 800dae8:	6938      	ldr	r0, [r7, #16]
 800daea:	f7ff fcc5 	bl	800d478 <clust2sect>
 800daee:	4602      	mov	r2, r0
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	69db      	ldr	r3, [r3, #28]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d101      	bne.n	800db06 <dir_sdi+0xcc>
 800db02:	2302      	movs	r3, #2
 800db04:	e010      	b.n	800db28 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	69da      	ldr	r2, [r3, #28]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	0a5b      	lsrs	r3, r3, #9
 800db0e:	441a      	add	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db20:	441a      	add	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3718      	adds	r7, #24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	3320      	adds	r3, #32
 800db46:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	69db      	ldr	r3, [r3, #28]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d003      	beq.n	800db58 <dir_next+0x28>
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db56:	d301      	bcc.n	800db5c <dir_next+0x2c>
 800db58:	2304      	movs	r3, #4
 800db5a:	e0aa      	b.n	800dcb2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db62:	2b00      	cmp	r3, #0
 800db64:	f040 8098 	bne.w	800dc98 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	69db      	ldr	r3, [r3, #28]
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10b      	bne.n	800db92 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	095b      	lsrs	r3, r3, #5
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	8912      	ldrh	r2, [r2, #8]
 800db82:	4293      	cmp	r3, r2
 800db84:	f0c0 8088 	bcc.w	800dc98 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	61da      	str	r2, [r3, #28]
 800db8e:	2304      	movs	r3, #4
 800db90:	e08f      	b.n	800dcb2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	0a5b      	lsrs	r3, r3, #9
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	8952      	ldrh	r2, [r2, #10]
 800db9a:	3a01      	subs	r2, #1
 800db9c:	4013      	ands	r3, r2
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d17a      	bne.n	800dc98 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	4610      	mov	r0, r2
 800dbac:	f7ff fc83 	bl	800d4b6 <get_fat>
 800dbb0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d801      	bhi.n	800dbbc <dir_next+0x8c>
 800dbb8:	2302      	movs	r3, #2
 800dbba:	e07a      	b.n	800dcb2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc2:	d101      	bne.n	800dbc8 <dir_next+0x98>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e074      	b.n	800dcb2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d358      	bcc.n	800dc84 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d104      	bne.n	800dbe2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	61da      	str	r2, [r3, #28]
 800dbde:	2304      	movs	r3, #4
 800dbe0:	e067      	b.n	800dcb2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4610      	mov	r0, r2
 800dbec:	f7ff fe59 	bl	800d8a2 <create_chain>
 800dbf0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d101      	bne.n	800dbfc <dir_next+0xcc>
 800dbf8:	2307      	movs	r3, #7
 800dbfa:	e05a      	b.n	800dcb2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d101      	bne.n	800dc06 <dir_next+0xd6>
 800dc02:	2302      	movs	r3, #2
 800dc04:	e055      	b.n	800dcb2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0c:	d101      	bne.n	800dc12 <dir_next+0xe2>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e04f      	b.n	800dcb2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff fb50 	bl	800d2b8 <sync_window>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <dir_next+0xf2>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e047      	b.n	800dcb2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3330      	adds	r3, #48	@ 0x30
 800dc26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff f97a 	bl	800cf26 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc32:	2300      	movs	r3, #0
 800dc34:	613b      	str	r3, [r7, #16]
 800dc36:	6979      	ldr	r1, [r7, #20]
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f7ff fc1d 	bl	800d478 <clust2sect>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dc44:	e012      	b.n	800dc6c <dir_next+0x13c>
						fs->wflag = 1;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f7ff fb33 	bl	800d2b8 <sync_window>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <dir_next+0x12c>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e02a      	b.n	800dcb2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	613b      	str	r3, [r7, #16]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	895b      	ldrh	r3, [r3, #10]
 800dc70:	461a      	mov	r2, r3
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d3e6      	bcc.n	800dc46 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dc8a:	6979      	ldr	r1, [r7, #20]
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f7ff fbf3 	bl	800d478 <clust2sect>
 800dc92:	4602      	mov	r2, r0
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcaa:	441a      	add	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3718      	adds	r7, #24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b086      	sub	sp, #24
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
 800dcc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dcca:	2100      	movs	r1, #0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff feb4 	bl	800da3a <dir_sdi>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d12b      	bne.n	800dd34 <dir_alloc+0x7a>
		n = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	4619      	mov	r1, r3
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7ff fb2a 	bl	800d340 <move_window>
 800dcec:	4603      	mov	r3, r0
 800dcee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcf0:	7dfb      	ldrb	r3, [r7, #23]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d11d      	bne.n	800dd32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2be5      	cmp	r3, #229	@ 0xe5
 800dcfe:	d004      	beq.n	800dd0a <dir_alloc+0x50>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d107      	bne.n	800dd1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	613b      	str	r3, [r7, #16]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d102      	bne.n	800dd1e <dir_alloc+0x64>
 800dd18:	e00c      	b.n	800dd34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dd1e:	2101      	movs	r1, #1
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff ff05 	bl	800db30 <dir_next>
 800dd26:	4603      	mov	r3, r0
 800dd28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0d7      	beq.n	800dce0 <dir_alloc+0x26>
 800dd30:	e000      	b.n	800dd34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dd32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd34:	7dfb      	ldrb	r3, [r7, #23]
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	d101      	bne.n	800dd3e <dir_alloc+0x84>
 800dd3a:	2307      	movs	r3, #7
 800dd3c:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3718      	adds	r7, #24
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	331a      	adds	r3, #26
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff f842 	bl	800cde0 <ld_word>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b03      	cmp	r3, #3
 800dd66:	d109      	bne.n	800dd7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	3314      	adds	r3, #20
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff f837 	bl	800cde0 <ld_word>
 800dd72:	4603      	mov	r3, r0
 800dd74:	041b      	lsls	r3, r3, #16
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	60b9      	str	r1, [r7, #8]
 800dd90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	331a      	adds	r3, #26
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	b292      	uxth	r2, r2
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff f85a 	bl	800ce56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d109      	bne.n	800ddbe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f103 0214 	add.w	r2, r3, #20
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	0c1b      	lsrs	r3, r3, #16
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4610      	mov	r0, r2
 800ddba:	f7ff f84c 	bl	800ce56 <st_word>
	}
}
 800ddbe:	bf00      	nop
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b086      	sub	sp, #24
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fe2f 	bl	800da3a <dir_sdi>
 800dddc:	4603      	mov	r3, r0
 800ddde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dde0:	7dfb      	ldrb	r3, [r7, #23]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d001      	beq.n	800ddea <dir_find+0x24>
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	e03e      	b.n	800de68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	69db      	ldr	r3, [r3, #28]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6938      	ldr	r0, [r7, #16]
 800ddf2:	f7ff faa5 	bl	800d340 <move_window>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ddfa:	7dfb      	ldrb	r3, [r7, #23]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d12f      	bne.n	800de60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a1b      	ldr	r3, [r3, #32]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de08:	7bfb      	ldrb	r3, [r7, #15]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d102      	bne.n	800de14 <dir_find+0x4e>
 800de0e:	2304      	movs	r3, #4
 800de10:	75fb      	strb	r3, [r7, #23]
 800de12:	e028      	b.n	800de66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	330b      	adds	r3, #11
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de20:	b2da      	uxtb	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	330b      	adds	r3, #11
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	f003 0308 	and.w	r3, r3, #8
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <dir_find+0x86>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a18      	ldr	r0, [r3, #32]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3324      	adds	r3, #36	@ 0x24
 800de3e:	220b      	movs	r2, #11
 800de40:	4619      	mov	r1, r3
 800de42:	f7ff f88b 	bl	800cf5c <mem_cmp>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00b      	beq.n	800de64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800de4c:	2100      	movs	r1, #0
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff fe6e 	bl	800db30 <dir_next>
 800de54:	4603      	mov	r3, r0
 800de56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d0c5      	beq.n	800ddea <dir_find+0x24>
 800de5e:	e002      	b.n	800de66 <dir_find+0xa0>
		if (res != FR_OK) break;
 800de60:	bf00      	nop
 800de62:	e000      	b.n	800de66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de64:	bf00      	nop

	return res;
 800de66:	7dfb      	ldrb	r3, [r7, #23]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3718      	adds	r7, #24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800de7e:	2101      	movs	r1, #1
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff ff1a 	bl	800dcba <dir_alloc>
 800de86:	4603      	mov	r3, r0
 800de88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d11c      	bne.n	800deca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	69db      	ldr	r3, [r3, #28]
 800de94:	4619      	mov	r1, r3
 800de96:	68b8      	ldr	r0, [r7, #8]
 800de98:	f7ff fa52 	bl	800d340 <move_window>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dea0:	7bfb      	ldrb	r3, [r7, #15]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d111      	bne.n	800deca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	2220      	movs	r2, #32
 800deac:	2100      	movs	r1, #0
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff f839 	bl	800cf26 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a18      	ldr	r0, [r3, #32]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3324      	adds	r3, #36	@ 0x24
 800debc:	220b      	movs	r2, #11
 800debe:	4619      	mov	r1, r3
 800dec0:	f7ff f810 	bl	800cee4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2201      	movs	r2, #1
 800dec8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800deca:	7bfb      	ldrb	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3324      	adds	r3, #36	@ 0x24
 800dee8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800deea:	220b      	movs	r2, #11
 800deec:	2120      	movs	r1, #32
 800deee:	68b8      	ldr	r0, [r7, #8]
 800def0:	f7ff f819 	bl	800cf26 <mem_set>
	si = i = 0; ni = 8;
 800def4:	2300      	movs	r3, #0
 800def6:	613b      	str	r3, [r7, #16]
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	61fb      	str	r3, [r7, #28]
 800defc:	2308      	movs	r3, #8
 800defe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	61fa      	str	r2, [r7, #28]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4413      	add	r3, r2
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800df0e:	7efb      	ldrb	r3, [r7, #27]
 800df10:	2b20      	cmp	r3, #32
 800df12:	d94e      	bls.n	800dfb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800df14:	7efb      	ldrb	r3, [r7, #27]
 800df16:	2b2f      	cmp	r3, #47	@ 0x2f
 800df18:	d006      	beq.n	800df28 <create_name+0x54>
 800df1a:	7efb      	ldrb	r3, [r7, #27]
 800df1c:	2b5c      	cmp	r3, #92	@ 0x5c
 800df1e:	d110      	bne.n	800df42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df20:	e002      	b.n	800df28 <create_name+0x54>
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	3301      	adds	r3, #1
 800df26:	61fb      	str	r3, [r7, #28]
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	4413      	add	r3, r2
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b2f      	cmp	r3, #47	@ 0x2f
 800df32:	d0f6      	beq.n	800df22 <create_name+0x4e>
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b5c      	cmp	r3, #92	@ 0x5c
 800df3e:	d0f0      	beq.n	800df22 <create_name+0x4e>
			break;
 800df40:	e038      	b.n	800dfb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800df42:	7efb      	ldrb	r3, [r7, #27]
 800df44:	2b2e      	cmp	r3, #46	@ 0x2e
 800df46:	d003      	beq.n	800df50 <create_name+0x7c>
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d30c      	bcc.n	800df6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	2b0b      	cmp	r3, #11
 800df54:	d002      	beq.n	800df5c <create_name+0x88>
 800df56:	7efb      	ldrb	r3, [r7, #27]
 800df58:	2b2e      	cmp	r3, #46	@ 0x2e
 800df5a:	d001      	beq.n	800df60 <create_name+0x8c>
 800df5c:	2306      	movs	r3, #6
 800df5e:	e044      	b.n	800dfea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800df60:	2308      	movs	r3, #8
 800df62:	613b      	str	r3, [r7, #16]
 800df64:	230b      	movs	r3, #11
 800df66:	617b      	str	r3, [r7, #20]
			continue;
 800df68:	e022      	b.n	800dfb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800df6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da04      	bge.n	800df7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800df72:	7efb      	ldrb	r3, [r7, #27]
 800df74:	3b80      	subs	r3, #128	@ 0x80
 800df76:	4a1f      	ldr	r2, [pc, #124]	@ (800dff4 <create_name+0x120>)
 800df78:	5cd3      	ldrb	r3, [r2, r3]
 800df7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800df7c:	7efb      	ldrb	r3, [r7, #27]
 800df7e:	4619      	mov	r1, r3
 800df80:	481d      	ldr	r0, [pc, #116]	@ (800dff8 <create_name+0x124>)
 800df82:	f7ff f812 	bl	800cfaa <chk_chr>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <create_name+0xbc>
 800df8c:	2306      	movs	r3, #6
 800df8e:	e02c      	b.n	800dfea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800df90:	7efb      	ldrb	r3, [r7, #27]
 800df92:	2b60      	cmp	r3, #96	@ 0x60
 800df94:	d905      	bls.n	800dfa2 <create_name+0xce>
 800df96:	7efb      	ldrb	r3, [r7, #27]
 800df98:	2b7a      	cmp	r3, #122	@ 0x7a
 800df9a:	d802      	bhi.n	800dfa2 <create_name+0xce>
 800df9c:	7efb      	ldrb	r3, [r7, #27]
 800df9e:	3b20      	subs	r3, #32
 800dfa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	613a      	str	r2, [r7, #16]
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	4413      	add	r3, r2
 800dfac:	7efa      	ldrb	r2, [r7, #27]
 800dfae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dfb0:	e7a6      	b.n	800df00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dfb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	441a      	add	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d101      	bne.n	800dfc8 <create_name+0xf4>
 800dfc4:	2306      	movs	r3, #6
 800dfc6:	e010      	b.n	800dfea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2be5      	cmp	r3, #229	@ 0xe5
 800dfce:	d102      	bne.n	800dfd6 <create_name+0x102>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2205      	movs	r2, #5
 800dfd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dfd6:	7efb      	ldrb	r3, [r7, #27]
 800dfd8:	2b20      	cmp	r3, #32
 800dfda:	d801      	bhi.n	800dfe0 <create_name+0x10c>
 800dfdc:	2204      	movs	r2, #4
 800dfde:	e000      	b.n	800dfe2 <create_name+0x10e>
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	330b      	adds	r3, #11
 800dfe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dfe8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3720      	adds	r7, #32
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	0800fb14 	.word	0x0800fb14
 800dff8:	0800f824 	.word	0x0800f824

0800dffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e010:	e002      	b.n	800e018 <follow_path+0x1c>
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	3301      	adds	r3, #1
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e01e:	d0f8      	beq.n	800e012 <follow_path+0x16>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	2b5c      	cmp	r3, #92	@ 0x5c
 800e026:	d0f4      	beq.n	800e012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	2200      	movs	r2, #0
 800e02c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b1f      	cmp	r3, #31
 800e034:	d80a      	bhi.n	800e04c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2280      	movs	r2, #128	@ 0x80
 800e03a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e03e:	2100      	movs	r1, #0
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff fcfa 	bl	800da3a <dir_sdi>
 800e046:	4603      	mov	r3, r0
 800e048:	75fb      	strb	r3, [r7, #23]
 800e04a:	e043      	b.n	800e0d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e04c:	463b      	mov	r3, r7
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7ff ff3f 	bl	800ded4 <create_name>
 800e056:	4603      	mov	r3, r0
 800e058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d134      	bne.n	800e0ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff feb0 	bl	800ddc6 <dir_find>
 800e066:	4603      	mov	r3, r0
 800e068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e072:	7dfb      	ldrb	r3, [r7, #23]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00a      	beq.n	800e08e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	2b04      	cmp	r3, #4
 800e07c:	d127      	bne.n	800e0ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e07e:	7afb      	ldrb	r3, [r7, #11]
 800e080:	f003 0304 	and.w	r3, r3, #4
 800e084:	2b00      	cmp	r3, #0
 800e086:	d122      	bne.n	800e0ce <follow_path+0xd2>
 800e088:	2305      	movs	r3, #5
 800e08a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e08c:	e01f      	b.n	800e0ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e08e:	7afb      	ldrb	r3, [r7, #11]
 800e090:	f003 0304 	and.w	r3, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	d11c      	bne.n	800e0d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	799b      	ldrb	r3, [r3, #6]
 800e09c:	f003 0310 	and.w	r3, r3, #16
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0a4:	2305      	movs	r3, #5
 800e0a6:	75fb      	strb	r3, [r7, #23]
 800e0a8:	e014      	b.n	800e0d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0b8:	4413      	add	r3, r2
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f7ff fe43 	bl	800dd48 <ld_clust>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e0c8:	e7c0      	b.n	800e04c <follow_path+0x50>
			if (res != FR_OK) break;
 800e0ca:	bf00      	nop
 800e0cc:	e002      	b.n	800e0d4 <follow_path+0xd8>
				break;
 800e0ce:	bf00      	nop
 800e0d0:	e000      	b.n	800e0d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0d2:	bf00      	nop
			}
		}
	}

	return res;
 800e0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3718      	adds	r7, #24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e0de:	b480      	push	{r7}
 800e0e0:	b087      	sub	sp, #28
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d031      	beq.n	800e158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	e002      	b.n	800e102 <get_ldnumber+0x24>
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	3301      	adds	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b20      	cmp	r3, #32
 800e108:	d903      	bls.n	800e112 <get_ldnumber+0x34>
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b3a      	cmp	r3, #58	@ 0x3a
 800e110:	d1f4      	bne.n	800e0fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	2b3a      	cmp	r3, #58	@ 0x3a
 800e118:	d11c      	bne.n	800e154 <get_ldnumber+0x76>
			tp = *path;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	1c5a      	adds	r2, r3, #1
 800e124:	60fa      	str	r2, [r7, #12]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	3b30      	subs	r3, #48	@ 0x30
 800e12a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2b09      	cmp	r3, #9
 800e130:	d80e      	bhi.n	800e150 <get_ldnumber+0x72>
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	429a      	cmp	r2, r3
 800e138:	d10a      	bne.n	800e150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d107      	bne.n	800e150 <get_ldnumber+0x72>
					vol = (int)i;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	3301      	adds	r3, #1
 800e148:	617b      	str	r3, [r7, #20]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	697a      	ldr	r2, [r7, #20]
 800e14e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	e002      	b.n	800e15a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e154:	2300      	movs	r3, #0
 800e156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e158:	693b      	ldr	r3, [r7, #16]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	371c      	adds	r7, #28
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
	...

0800e168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	70da      	strb	r2, [r3, #3]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f04f 32ff 	mov.w	r2, #4294967295
 800e17e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff f8dc 	bl	800d340 <move_window>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <check_fs+0x2a>
 800e18e:	2304      	movs	r3, #4
 800e190:	e038      	b.n	800e204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3330      	adds	r3, #48	@ 0x30
 800e196:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fe20 	bl	800cde0 <ld_word>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d001      	beq.n	800e1b0 <check_fs+0x48>
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e029      	b.n	800e204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1b6:	2be9      	cmp	r3, #233	@ 0xe9
 800e1b8:	d009      	beq.n	800e1ce <check_fs+0x66>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1c0:	2beb      	cmp	r3, #235	@ 0xeb
 800e1c2:	d11e      	bne.n	800e202 <check_fs+0x9a>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e1ca:	2b90      	cmp	r3, #144	@ 0x90
 800e1cc:	d119      	bne.n	800e202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	3330      	adds	r3, #48	@ 0x30
 800e1d2:	3336      	adds	r3, #54	@ 0x36
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe fe1b 	bl	800ce10 <ld_dword>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e20c <check_fs+0xa4>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d101      	bne.n	800e1ea <check_fs+0x82>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	e00c      	b.n	800e204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	3330      	adds	r3, #48	@ 0x30
 800e1ee:	3352      	adds	r3, #82	@ 0x52
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fe fe0d 	bl	800ce10 <ld_dword>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	4a05      	ldr	r2, [pc, #20]	@ (800e210 <check_fs+0xa8>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d101      	bne.n	800e202 <check_fs+0x9a>
 800e1fe:	2300      	movs	r3, #0
 800e200:	e000      	b.n	800e204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e202:	2302      	movs	r3, #2
}
 800e204:	4618      	mov	r0, r3
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	00544146 	.word	0x00544146
 800e210:	33544146 	.word	0x33544146

0800e214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b096      	sub	sp, #88	@ 0x58
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	4613      	mov	r3, r2
 800e220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f7ff ff58 	bl	800e0de <get_ldnumber>
 800e22e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e232:	2b00      	cmp	r3, #0
 800e234:	da01      	bge.n	800e23a <find_volume+0x26>
 800e236:	230b      	movs	r3, #11
 800e238:	e22d      	b.n	800e696 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e23a:	4aa1      	ldr	r2, [pc, #644]	@ (800e4c0 <find_volume+0x2ac>)
 800e23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e242:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e246:	2b00      	cmp	r3, #0
 800e248:	d101      	bne.n	800e24e <find_volume+0x3a>
 800e24a:	230c      	movs	r3, #12
 800e24c:	e223      	b.n	800e696 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e252:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e254:	79fb      	ldrb	r3, [r7, #7]
 800e256:	f023 0301 	bic.w	r3, r3, #1
 800e25a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d01a      	beq.n	800e29a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e266:	785b      	ldrb	r3, [r3, #1]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe fd19 	bl	800cca0 <disk_status>
 800e26e:	4603      	mov	r3, r0
 800e270:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e274:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e278:	f003 0301 	and.w	r3, r3, #1
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10c      	bne.n	800e29a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e280:	79fb      	ldrb	r3, [r7, #7]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d007      	beq.n	800e296 <find_volume+0x82>
 800e286:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e28a:	f003 0304 	and.w	r3, r3, #4
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e292:	230a      	movs	r3, #10
 800e294:	e1ff      	b.n	800e696 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e296:	2300      	movs	r3, #0
 800e298:	e1fd      	b.n	800e696 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29c:	2200      	movs	r2, #0
 800e29e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2aa:	785b      	ldrb	r3, [r3, #1]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fe fd11 	bl	800ccd4 <disk_initialize>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2bc:	f003 0301 	and.w	r3, r3, #1
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2c4:	2303      	movs	r3, #3
 800e2c6:	e1e6      	b.n	800e696 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d007      	beq.n	800e2de <find_volume+0xca>
 800e2ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2d2:	f003 0304 	and.w	r3, r3, #4
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e2da:	230a      	movs	r3, #10
 800e2dc:	e1db      	b.n	800e696 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e2e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e2e6:	f7ff ff3f 	bl	800e168 <check_fs>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d149      	bne.n	800e38c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2fc:	e01e      	b.n	800e33c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e300:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e306:	011b      	lsls	r3, r3, #4
 800e308:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e30c:	4413      	add	r3, r2
 800e30e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e312:	3304      	adds	r3, #4
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d006      	beq.n	800e328 <find_volume+0x114>
 800e31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31c:	3308      	adds	r3, #8
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe fd76 	bl	800ce10 <ld_dword>
 800e324:	4602      	mov	r2, r0
 800e326:	e000      	b.n	800e32a <find_volume+0x116>
 800e328:	2200      	movs	r2, #0
 800e32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	3358      	adds	r3, #88	@ 0x58
 800e330:	443b      	add	r3, r7
 800e332:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e338:	3301      	adds	r3, #1
 800e33a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d9dd      	bls.n	800e2fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e342:	2300      	movs	r3, #0
 800e344:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <find_volume+0x13e>
 800e34c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e34e:	3b01      	subs	r3, #1
 800e350:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	3358      	adds	r3, #88	@ 0x58
 800e358:	443b      	add	r3, r7
 800e35a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e35e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e362:	2b00      	cmp	r3, #0
 800e364:	d005      	beq.n	800e372 <find_volume+0x15e>
 800e366:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e368:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e36a:	f7ff fefd 	bl	800e168 <check_fs>
 800e36e:	4603      	mov	r3, r0
 800e370:	e000      	b.n	800e374 <find_volume+0x160>
 800e372:	2303      	movs	r3, #3
 800e374:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e378:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d905      	bls.n	800e38c <find_volume+0x178>
 800e380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e382:	3301      	adds	r3, #1
 800e384:	643b      	str	r3, [r7, #64]	@ 0x40
 800e386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d9e2      	bls.n	800e352 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e38c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e390:	2b04      	cmp	r3, #4
 800e392:	d101      	bne.n	800e398 <find_volume+0x184>
 800e394:	2301      	movs	r3, #1
 800e396:	e17e      	b.n	800e696 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d901      	bls.n	800e3a4 <find_volume+0x190>
 800e3a0:	230d      	movs	r3, #13
 800e3a2:	e178      	b.n	800e696 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a6:	3330      	adds	r3, #48	@ 0x30
 800e3a8:	330b      	adds	r3, #11
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe fd18 	bl	800cde0 <ld_word>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3b6:	d001      	beq.n	800e3bc <find_volume+0x1a8>
 800e3b8:	230d      	movs	r3, #13
 800e3ba:	e16c      	b.n	800e696 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3be:	3330      	adds	r3, #48	@ 0x30
 800e3c0:	3316      	adds	r3, #22
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe fd0c 	bl	800cde0 <ld_word>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e3cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <find_volume+0x1cc>
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d4:	3330      	adds	r3, #48	@ 0x30
 800e3d6:	3324      	adds	r3, #36	@ 0x24
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fd19 	bl	800ce10 <ld_dword>
 800e3de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e3e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	789b      	ldrb	r3, [r3, #2]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d005      	beq.n	800e404 <find_volume+0x1f0>
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fa:	789b      	ldrb	r3, [r3, #2]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d001      	beq.n	800e404 <find_volume+0x1f0>
 800e400:	230d      	movs	r3, #13
 800e402:	e148      	b.n	800e696 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e406:	789b      	ldrb	r3, [r3, #2]
 800e408:	461a      	mov	r2, r3
 800e40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e40c:	fb02 f303 	mul.w	r3, r2, r3
 800e410:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e418:	461a      	mov	r2, r3
 800e41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e41c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e420:	895b      	ldrh	r3, [r3, #10]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d008      	beq.n	800e438 <find_volume+0x224>
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	895b      	ldrh	r3, [r3, #10]
 800e42a:	461a      	mov	r2, r3
 800e42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42e:	895b      	ldrh	r3, [r3, #10]
 800e430:	3b01      	subs	r3, #1
 800e432:	4013      	ands	r3, r2
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <find_volume+0x228>
 800e438:	230d      	movs	r3, #13
 800e43a:	e12c      	b.n	800e696 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43e:	3330      	adds	r3, #48	@ 0x30
 800e440:	3311      	adds	r3, #17
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fccc 	bl	800cde0 <ld_word>
 800e448:	4603      	mov	r3, r0
 800e44a:	461a      	mov	r2, r3
 800e44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e452:	891b      	ldrh	r3, [r3, #8]
 800e454:	f003 030f 	and.w	r3, r3, #15
 800e458:	b29b      	uxth	r3, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <find_volume+0x24e>
 800e45e:	230d      	movs	r3, #13
 800e460:	e119      	b.n	800e696 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e464:	3330      	adds	r3, #48	@ 0x30
 800e466:	3313      	adds	r3, #19
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fcb9 	bl	800cde0 <ld_word>
 800e46e:	4603      	mov	r3, r0
 800e470:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e474:	2b00      	cmp	r3, #0
 800e476:	d106      	bne.n	800e486 <find_volume+0x272>
 800e478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47a:	3330      	adds	r3, #48	@ 0x30
 800e47c:	3320      	adds	r3, #32
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fe fcc6 	bl	800ce10 <ld_dword>
 800e484:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e488:	3330      	adds	r3, #48	@ 0x30
 800e48a:	330e      	adds	r3, #14
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe fca7 	bl	800cde0 <ld_word>
 800e492:	4603      	mov	r3, r0
 800e494:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e496:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <find_volume+0x28c>
 800e49c:	230d      	movs	r3, #13
 800e49e:	e0fa      	b.n	800e696 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a4:	4413      	add	r3, r2
 800e4a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4a8:	8912      	ldrh	r2, [r2, #8]
 800e4aa:	0912      	lsrs	r2, r2, #4
 800e4ac:	b292      	uxth	r2, r2
 800e4ae:	4413      	add	r3, r2
 800e4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d204      	bcs.n	800e4c4 <find_volume+0x2b0>
 800e4ba:	230d      	movs	r3, #13
 800e4bc:	e0eb      	b.n	800e696 <find_volume+0x482>
 800e4be:	bf00      	nop
 800e4c0:	240007e0 	.word	0x240007e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4cc:	8952      	ldrh	r2, [r2, #10]
 800e4ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4d2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <find_volume+0x2ca>
 800e4da:	230d      	movs	r3, #13
 800e4dc:	e0db      	b.n	800e696 <find_volume+0x482>
		fmt = FS_FAT32;
 800e4de:	2303      	movs	r3, #3
 800e4e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d802      	bhi.n	800e4f4 <find_volume+0x2e0>
 800e4ee:	2302      	movs	r3, #2
 800e4f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d802      	bhi.n	800e504 <find_volume+0x2f0>
 800e4fe:	2301      	movs	r3, #1
 800e500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	1c9a      	adds	r2, r3, #2
 800e508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e510:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e512:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e516:	441a      	add	r2, r3
 800e518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e51c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e520:	441a      	add	r2, r3
 800e522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e524:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e526:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	d11e      	bne.n	800e56c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	3330      	adds	r3, #48	@ 0x30
 800e532:	332a      	adds	r3, #42	@ 0x2a
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe fc53 	bl	800cde0 <ld_word>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <find_volume+0x330>
 800e540:	230d      	movs	r3, #13
 800e542:	e0a8      	b.n	800e696 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e546:	891b      	ldrh	r3, [r3, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <find_volume+0x33c>
 800e54c:	230d      	movs	r3, #13
 800e54e:	e0a2      	b.n	800e696 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e552:	3330      	adds	r3, #48	@ 0x30
 800e554:	332c      	adds	r3, #44	@ 0x2c
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fc5a 	bl	800ce10 <ld_dword>
 800e55c:	4602      	mov	r2, r0
 800e55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e560:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e564:	695b      	ldr	r3, [r3, #20]
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	647b      	str	r3, [r7, #68]	@ 0x44
 800e56a:	e01f      	b.n	800e5ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	891b      	ldrh	r3, [r3, #8]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d101      	bne.n	800e578 <find_volume+0x364>
 800e574:	230d      	movs	r3, #13
 800e576:	e08e      	b.n	800e696 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57a:	6a1a      	ldr	r2, [r3, #32]
 800e57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e57e:	441a      	add	r2, r3
 800e580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e582:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e584:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d103      	bne.n	800e594 <find_volume+0x380>
 800e58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	005b      	lsls	r3, r3, #1
 800e592:	e00a      	b.n	800e5aa <find_volume+0x396>
 800e594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e596:	695a      	ldr	r2, [r3, #20]
 800e598:	4613      	mov	r3, r2
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	4413      	add	r3, r2
 800e59e:	085a      	lsrs	r2, r3, #1
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	f003 0301 	and.w	r3, r3, #1
 800e5a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5aa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ae:	699a      	ldr	r2, [r3, #24]
 800e5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e5b6:	0a5b      	lsrs	r3, r3, #9
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d201      	bcs.n	800e5c0 <find_volume+0x3ac>
 800e5bc:	230d      	movs	r3, #13
 800e5be:	e06a      	b.n	800e696 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c6:	611a      	str	r2, [r3, #16]
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ca:	691a      	ldr	r2, [r3, #16]
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d2:	2280      	movs	r2, #128	@ 0x80
 800e5d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e5d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5da:	2b03      	cmp	r3, #3
 800e5dc:	d149      	bne.n	800e672 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e0:	3330      	adds	r3, #48	@ 0x30
 800e5e2:	3330      	adds	r3, #48	@ 0x30
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe fbfb 	bl	800cde0 <ld_word>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d140      	bne.n	800e672 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e5f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5f8:	f7fe fea2 	bl	800d340 <move_window>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d137      	bne.n	800e672 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e604:	2200      	movs	r2, #0
 800e606:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60a:	3330      	adds	r3, #48	@ 0x30
 800e60c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e610:	4618      	mov	r0, r3
 800e612:	f7fe fbe5 	bl	800cde0 <ld_word>
 800e616:	4603      	mov	r3, r0
 800e618:	461a      	mov	r2, r3
 800e61a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e61e:	429a      	cmp	r2, r3
 800e620:	d127      	bne.n	800e672 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e624:	3330      	adds	r3, #48	@ 0x30
 800e626:	4618      	mov	r0, r3
 800e628:	f7fe fbf2 	bl	800ce10 <ld_dword>
 800e62c:	4603      	mov	r3, r0
 800e62e:	4a1c      	ldr	r2, [pc, #112]	@ (800e6a0 <find_volume+0x48c>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d11e      	bne.n	800e672 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	3330      	adds	r3, #48	@ 0x30
 800e638:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fe fbe7 	bl	800ce10 <ld_dword>
 800e642:	4603      	mov	r3, r0
 800e644:	4a17      	ldr	r2, [pc, #92]	@ (800e6a4 <find_volume+0x490>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d113      	bne.n	800e672 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64c:	3330      	adds	r3, #48	@ 0x30
 800e64e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fbdc 	bl	800ce10 <ld_dword>
 800e658:	4602      	mov	r2, r0
 800e65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e660:	3330      	adds	r3, #48	@ 0x30
 800e662:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e666:	4618      	mov	r0, r3
 800e668:	f7fe fbd2 	bl	800ce10 <ld_dword>
 800e66c:	4602      	mov	r2, r0
 800e66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e670:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e674:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e678:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e67a:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a8 <find_volume+0x494>)
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	3301      	adds	r3, #1
 800e680:	b29a      	uxth	r2, r3
 800e682:	4b09      	ldr	r3, [pc, #36]	@ (800e6a8 <find_volume+0x494>)
 800e684:	801a      	strh	r2, [r3, #0]
 800e686:	4b08      	ldr	r3, [pc, #32]	@ (800e6a8 <find_volume+0x494>)
 800e688:	881a      	ldrh	r2, [r3, #0]
 800e68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e68e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e690:	f7fe fdee 	bl	800d270 <clear_lock>
#endif
	return FR_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3758      	adds	r7, #88	@ 0x58
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	41615252 	.word	0x41615252
 800e6a4:	61417272 	.word	0x61417272
 800e6a8:	240007e4 	.word	0x240007e4

0800e6ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e6b6:	2309      	movs	r3, #9
 800e6b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d01c      	beq.n	800e6fa <validate+0x4e>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d018      	beq.n	800e6fa <validate+0x4e>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d013      	beq.n	800e6fa <validate+0x4e>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	889a      	ldrh	r2, [r3, #4]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	88db      	ldrh	r3, [r3, #6]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d10c      	bne.n	800e6fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	785b      	ldrb	r3, [r3, #1]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fe fada 	bl	800cca0 <disk_status>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d101      	bne.n	800e6fa <validate+0x4e>
			res = FR_OK;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e6fa:	7bfb      	ldrb	r3, [r7, #15]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d102      	bne.n	800e706 <validate+0x5a>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	e000      	b.n	800e708 <validate+0x5c>
 800e706:	2300      	movs	r3, #0
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	6013      	str	r3, [r2, #0]
	return res;
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
	...

0800e718 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	4613      	mov	r3, r2
 800e724:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e72a:	f107 0310 	add.w	r3, r7, #16
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fcd5 	bl	800e0de <get_ldnumber>
 800e734:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da01      	bge.n	800e740 <f_mount+0x28>
 800e73c:	230b      	movs	r3, #11
 800e73e:	e02b      	b.n	800e798 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e740:	4a17      	ldr	r2, [pc, #92]	@ (800e7a0 <f_mount+0x88>)
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e748:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d005      	beq.n	800e75c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e750:	69b8      	ldr	r0, [r7, #24]
 800e752:	f7fe fd8d 	bl	800d270 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	2200      	movs	r2, #0
 800e75a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	490d      	ldr	r1, [pc, #52]	@ (800e7a0 <f_mount+0x88>)
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <f_mount+0x66>
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d001      	beq.n	800e782 <f_mount+0x6a>
 800e77e:	2300      	movs	r3, #0
 800e780:	e00a      	b.n	800e798 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e782:	f107 010c 	add.w	r1, r7, #12
 800e786:	f107 0308 	add.w	r3, r7, #8
 800e78a:	2200      	movs	r2, #0
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7ff fd41 	bl	800e214 <find_volume>
 800e792:	4603      	mov	r3, r0
 800e794:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e796:	7dfb      	ldrb	r3, [r7, #23]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3720      	adds	r7, #32
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	240007e0 	.word	0x240007e0

0800e7a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b098      	sub	sp, #96	@ 0x60
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <f_open+0x18>
 800e7b8:	2309      	movs	r3, #9
 800e7ba:	e1a9      	b.n	800eb10 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e7c4:	79fa      	ldrb	r2, [r7, #7]
 800e7c6:	f107 0110 	add.w	r1, r7, #16
 800e7ca:	f107 0308 	add.w	r3, r7, #8
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff fd20 	bl	800e214 <find_volume>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e7da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f040 818d 	bne.w	800eafe <f_open+0x35a>
		dj.obj.fs = fs;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	f107 0314 	add.w	r3, r7, #20
 800e7ee:	4611      	mov	r1, r2
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff fc03 	bl	800dffc <follow_path>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e7fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e800:	2b00      	cmp	r3, #0
 800e802:	d118      	bne.n	800e836 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e804:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e808:	b25b      	sxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	da03      	bge.n	800e816 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e80e:	2306      	movs	r3, #6
 800e810:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e814:	e00f      	b.n	800e836 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e816:	79fb      	ldrb	r3, [r7, #7]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	bf8c      	ite	hi
 800e81c:	2301      	movhi	r3, #1
 800e81e:	2300      	movls	r3, #0
 800e820:	b2db      	uxtb	r3, r3
 800e822:	461a      	mov	r2, r3
 800e824:	f107 0314 	add.w	r3, r7, #20
 800e828:	4611      	mov	r1, r2
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe fbd8 	bl	800cfe0 <chk_lock>
 800e830:	4603      	mov	r3, r0
 800e832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e836:	79fb      	ldrb	r3, [r7, #7]
 800e838:	f003 031c 	and.w	r3, r3, #28
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d07f      	beq.n	800e940 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e840:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e844:	2b00      	cmp	r3, #0
 800e846:	d017      	beq.n	800e878 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e848:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	d10e      	bne.n	800e86e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e850:	f7fe fc22 	bl	800d098 <enq_lock>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d006      	beq.n	800e868 <f_open+0xc4>
 800e85a:	f107 0314 	add.w	r3, r7, #20
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff fb06 	bl	800de70 <dir_register>
 800e864:	4603      	mov	r3, r0
 800e866:	e000      	b.n	800e86a <f_open+0xc6>
 800e868:	2312      	movs	r3, #18
 800e86a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	f043 0308 	orr.w	r3, r3, #8
 800e874:	71fb      	strb	r3, [r7, #7]
 800e876:	e010      	b.n	800e89a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e878:	7ebb      	ldrb	r3, [r7, #26]
 800e87a:	f003 0311 	and.w	r3, r3, #17
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d003      	beq.n	800e88a <f_open+0xe6>
					res = FR_DENIED;
 800e882:	2307      	movs	r3, #7
 800e884:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e888:	e007      	b.n	800e89a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e88a:	79fb      	ldrb	r3, [r7, #7]
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <f_open+0xf6>
 800e894:	2308      	movs	r3, #8
 800e896:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e89a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d168      	bne.n	800e974 <f_open+0x1d0>
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	f003 0308 	and.w	r3, r3, #8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d063      	beq.n	800e974 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e8ac:	f7fd ffb2 	bl	800c814 <get_fattime>
 800e8b0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b4:	330e      	adds	r3, #14
 800e8b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fae7 	bl	800ce8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c0:	3316      	adds	r3, #22
 800e8c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe fae1 	bl	800ce8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8cc:	330b      	adds	r3, #11
 800e8ce:	2220      	movs	r2, #32
 800e8d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff fa35 	bl	800dd48 <ld_clust>
 800e8de:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7ff fa4d 	bl	800dd86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ee:	331c      	adds	r3, #28
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe faca 	bl	800ce8c <st_dword>
					fs->wflag = 1;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e8fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e900:	2b00      	cmp	r3, #0
 800e902:	d037      	beq.n	800e974 <f_open+0x1d0>
						dw = fs->winsect;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e908:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e90a:	f107 0314 	add.w	r3, r7, #20
 800e90e:	2200      	movs	r2, #0
 800e910:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe ff60 	bl	800d7d8 <remove_chain>
 800e918:	4603      	mov	r3, r0
 800e91a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e91e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e922:	2b00      	cmp	r3, #0
 800e924:	d126      	bne.n	800e974 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe fd08 	bl	800d340 <move_window>
 800e930:	4603      	mov	r3, r0
 800e932:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e93a:	3a01      	subs	r2, #1
 800e93c:	60da      	str	r2, [r3, #12]
 800e93e:	e019      	b.n	800e974 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e944:	2b00      	cmp	r3, #0
 800e946:	d115      	bne.n	800e974 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e948:	7ebb      	ldrb	r3, [r7, #26]
 800e94a:	f003 0310 	and.w	r3, r3, #16
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d003      	beq.n	800e95a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e952:	2304      	movs	r3, #4
 800e954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e958:	e00c      	b.n	800e974 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e95a:	79fb      	ldrb	r3, [r7, #7]
 800e95c:	f003 0302 	and.w	r3, r3, #2
 800e960:	2b00      	cmp	r3, #0
 800e962:	d007      	beq.n	800e974 <f_open+0x1d0>
 800e964:	7ebb      	ldrb	r3, [r7, #26]
 800e966:	f003 0301 	and.w	r3, r3, #1
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d002      	beq.n	800e974 <f_open+0x1d0>
						res = FR_DENIED;
 800e96e:	2307      	movs	r3, #7
 800e970:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e974:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d126      	bne.n	800e9ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e97c:	79fb      	ldrb	r3, [r7, #7]
 800e97e:	f003 0308 	and.w	r3, r3, #8
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e986:	79fb      	ldrb	r3, [r7, #7]
 800e988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e98c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e99c:	79fb      	ldrb	r3, [r7, #7]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	bf8c      	ite	hi
 800e9a2:	2301      	movhi	r3, #1
 800e9a4:	2300      	movls	r3, #0
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f107 0314 	add.w	r3, r7, #20
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fe fb93 	bl	800d0dc <inc_lock>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	691b      	ldr	r3, [r3, #16]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d102      	bne.n	800e9ca <f_open+0x226>
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e9ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f040 8095 	bne.w	800eafe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9d8:	4611      	mov	r1, r2
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff f9b4 	bl	800dd48 <ld_clust>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9e8:	331c      	adds	r3, #28
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fe fa10 	bl	800ce10 <ld_dword>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	88da      	ldrh	r2, [r3, #6]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	79fa      	ldrb	r2, [r7, #7]
 800ea0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	3330      	adds	r3, #48	@ 0x30
 800ea26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe fa7a 	bl	800cf26 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea32:	79fb      	ldrb	r3, [r7, #7]
 800ea34:	f003 0320 	and.w	r3, r3, #32
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d060      	beq.n	800eafe <f_open+0x35a>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d05c      	beq.n	800eafe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	68da      	ldr	r2, [r3, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	895b      	ldrh	r3, [r3, #10]
 800ea50:	025b      	lsls	r3, r3, #9
 800ea52:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea60:	e016      	b.n	800ea90 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe fd25 	bl	800d4b6 <get_fat>
 800ea6c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ea6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d802      	bhi.n	800ea7a <f_open+0x2d6>
 800ea74:	2302      	movs	r3, #2
 800ea76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea80:	d102      	bne.n	800ea88 <f_open+0x2e4>
 800ea82:	2301      	movs	r3, #1
 800ea84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d103      	bne.n	800eaa0 <f_open+0x2fc>
 800ea98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d8e0      	bhi.n	800ea62 <f_open+0x2be>
				}
				fp->clust = clst;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaa4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eaa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d127      	bne.n	800eafe <f_open+0x35a>
 800eaae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d022      	beq.n	800eafe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fe fcdb 	bl	800d478 <clust2sect>
 800eac2:	6478      	str	r0, [r7, #68]	@ 0x44
 800eac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d103      	bne.n	800ead2 <f_open+0x32e>
						res = FR_INT_ERR;
 800eaca:	2302      	movs	r3, #2
 800eacc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ead0:	e015      	b.n	800eafe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ead2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead4:	0a5a      	lsrs	r2, r3, #9
 800ead6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ead8:	441a      	add	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	7858      	ldrb	r0, [r3, #1]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6a1a      	ldr	r2, [r3, #32]
 800eaec:	2301      	movs	r3, #1
 800eaee:	f7fe f919 	bl	800cd24 <disk_read>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <f_open+0x35a>
 800eaf8:	2301      	movs	r3, #1
 800eafa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eafe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <f_open+0x368>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3760      	adds	r7, #96	@ 0x60
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08e      	sub	sp, #56	@ 0x38
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f107 0214 	add.w	r2, r7, #20
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fdb7 	bl	800e6ac <validate>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d107      	bne.n	800eb5c <f_read+0x44>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	7d5b      	ldrb	r3, [r3, #21]
 800eb50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <f_read+0x4a>
 800eb5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb60:	e115      	b.n	800ed8e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	7d1b      	ldrb	r3, [r3, #20]
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d101      	bne.n	800eb72 <f_read+0x5a>
 800eb6e:	2307      	movs	r3, #7
 800eb70:	e10d      	b.n	800ed8e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	68da      	ldr	r2, [r3, #12]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	f240 80fe 	bls.w	800ed84 <f_read+0x26c>
 800eb88:	6a3b      	ldr	r3, [r7, #32]
 800eb8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb8c:	e0fa      	b.n	800ed84 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f040 80c6 	bne.w	800ed28 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	0a5b      	lsrs	r3, r3, #9
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	8952      	ldrh	r2, [r2, #10]
 800eba6:	3a01      	subs	r2, #1
 800eba8:	4013      	ands	r3, r2
 800ebaa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d12f      	bne.n	800ec12 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d103      	bne.n	800ebc2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebc0:	e013      	b.n	800ebea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d007      	beq.n	800ebda <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7fe fefe 	bl	800d9d2 <clmt_clust>
 800ebd6:	6338      	str	r0, [r7, #48]	@ 0x30
 800ebd8:	e007      	b.n	800ebea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	69db      	ldr	r3, [r3, #28]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	f7fe fc67 	bl	800d4b6 <get_fat>
 800ebe8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d804      	bhi.n	800ebfa <f_read+0xe2>
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	755a      	strb	r2, [r3, #21]
 800ebf6:	2302      	movs	r3, #2
 800ebf8:	e0c9      	b.n	800ed8e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec00:	d104      	bne.n	800ec0c <f_read+0xf4>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2201      	movs	r2, #1
 800ec06:	755a      	strb	r2, [r3, #21]
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e0c0      	b.n	800ed8e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec10:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	69db      	ldr	r3, [r3, #28]
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	f7fe fc2c 	bl	800d478 <clust2sect>
 800ec20:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d104      	bne.n	800ec32 <f_read+0x11a>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	755a      	strb	r2, [r3, #21]
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e0ad      	b.n	800ed8e <f_read+0x276>
			sect += csect;
 800ec32:	69ba      	ldr	r2, [r7, #24]
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	4413      	add	r3, r2
 800ec38:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	0a5b      	lsrs	r3, r3, #9
 800ec3e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d039      	beq.n	800ecba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec46:	69fa      	ldr	r2, [r7, #28]
 800ec48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec4a:	4413      	add	r3, r2
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	8952      	ldrh	r2, [r2, #10]
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d905      	bls.n	800ec60 <f_read+0x148>
					cc = fs->csize - csect;
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	895b      	ldrh	r3, [r3, #10]
 800ec58:	461a      	mov	r2, r3
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	7858      	ldrb	r0, [r3, #1]
 800ec64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec66:	69ba      	ldr	r2, [r7, #24]
 800ec68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec6a:	f7fe f85b 	bl	800cd24 <disk_read>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <f_read+0x166>
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2201      	movs	r2, #1
 800ec78:	755a      	strb	r2, [r3, #21]
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e087      	b.n	800ed8e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	7d1b      	ldrb	r3, [r3, #20]
 800ec82:	b25b      	sxtb	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da14      	bge.n	800ecb2 <f_read+0x19a>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6a1a      	ldr	r2, [r3, #32]
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d90d      	bls.n	800ecb2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6a1a      	ldr	r2, [r3, #32]
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	025b      	lsls	r3, r3, #9
 800eca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eca2:	18d0      	adds	r0, r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	3330      	adds	r3, #48	@ 0x30
 800eca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecac:	4619      	mov	r1, r3
 800ecae:	f7fe f919 	bl	800cee4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	025b      	lsls	r3, r3, #9
 800ecb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ecb8:	e050      	b.n	800ed5c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6a1b      	ldr	r3, [r3, #32]
 800ecbe:	69ba      	ldr	r2, [r7, #24]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d02e      	beq.n	800ed22 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	7d1b      	ldrb	r3, [r3, #20]
 800ecc8:	b25b      	sxtb	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	da18      	bge.n	800ed00 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	7858      	ldrb	r0, [r3, #1]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6a1a      	ldr	r2, [r3, #32]
 800ecdc:	2301      	movs	r3, #1
 800ecde:	f7fe f841 	bl	800cd64 <disk_write>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d004      	beq.n	800ecf2 <f_read+0x1da>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2201      	movs	r2, #1
 800ecec:	755a      	strb	r2, [r3, #21]
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e04d      	b.n	800ed8e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	7d1b      	ldrb	r3, [r3, #20]
 800ecf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	7858      	ldrb	r0, [r3, #1]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	69ba      	ldr	r2, [r7, #24]
 800ed0e:	f7fe f809 	bl	800cd24 <disk_read>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d004      	beq.n	800ed22 <f_read+0x20a>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	755a      	strb	r2, [r3, #21]
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e035      	b.n	800ed8e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	69ba      	ldr	r2, [r7, #24]
 800ed26:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed30:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ed34:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d901      	bls.n	800ed42 <f_read+0x22a>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed50:	4413      	add	r3, r2
 800ed52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed54:	4619      	mov	r1, r3
 800ed56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed58:	f7fe f8c4 	bl	800cee4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed60:	4413      	add	r3, r2
 800ed62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	699a      	ldr	r2, [r3, #24]
 800ed68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6a:	441a      	add	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	619a      	str	r2, [r3, #24]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed76:	441a      	add	r2, r3
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f47f af01 	bne.w	800eb8e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3738      	adds	r7, #56	@ 0x38
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b086      	sub	sp, #24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f107 0208 	add.w	r2, r7, #8
 800eda4:	4611      	mov	r1, r2
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff fc80 	bl	800e6ac <validate>
 800edac:	4603      	mov	r3, r0
 800edae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800edb0:	7dfb      	ldrb	r3, [r7, #23]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d168      	bne.n	800ee88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	7d1b      	ldrb	r3, [r3, #20]
 800edba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d062      	beq.n	800ee88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	7d1b      	ldrb	r3, [r3, #20]
 800edc6:	b25b      	sxtb	r3, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	da15      	bge.n	800edf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	7858      	ldrb	r0, [r3, #1]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a1a      	ldr	r2, [r3, #32]
 800edda:	2301      	movs	r3, #1
 800eddc:	f7fd ffc2 	bl	800cd64 <disk_write>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <f_sync+0x54>
 800ede6:	2301      	movs	r3, #1
 800ede8:	e04f      	b.n	800ee8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	7d1b      	ldrb	r3, [r3, #20]
 800edee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edf2:	b2da      	uxtb	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800edf8:	f7fd fd0c 	bl	800c814 <get_fattime>
 800edfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee04:	4619      	mov	r1, r3
 800ee06:	4610      	mov	r0, r2
 800ee08:	f7fe fa9a 	bl	800d340 <move_window>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee10:	7dfb      	ldrb	r3, [r7, #23]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d138      	bne.n	800ee88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	330b      	adds	r3, #11
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	330b      	adds	r3, #11
 800ee26:	f042 0220 	orr.w	r2, r2, #32
 800ee2a:	b2d2      	uxtb	r2, r2
 800ee2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6818      	ldr	r0, [r3, #0]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	461a      	mov	r2, r3
 800ee38:	68f9      	ldr	r1, [r7, #12]
 800ee3a:	f7fe ffa4 	bl	800dd86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f103 021c 	add.w	r2, r3, #28
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	f7fe f81e 	bl	800ce8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3316      	adds	r3, #22
 800ee54:	6939      	ldr	r1, [r7, #16]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fe f818 	bl	800ce8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3312      	adds	r3, #18
 800ee60:	2100      	movs	r1, #0
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fd fff7 	bl	800ce56 <st_word>
					fs->wflag = 1;
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fe fa93 	bl	800d39c <sync_fs>
 800ee76:	4603      	mov	r3, r0
 800ee78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7d1b      	ldrb	r3, [r3, #20]
 800ee7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff ff7b 	bl	800ed96 <f_sync>
 800eea0:	4603      	mov	r3, r0
 800eea2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d118      	bne.n	800eedc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f107 0208 	add.w	r2, r7, #8
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fbfa 	bl	800e6ac <validate>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10c      	bne.n	800eedc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fe f996 	bl	800d1f8 <dec_lock>
 800eecc:	4603      	mov	r3, r0
 800eece:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b090      	sub	sp, #64	@ 0x40
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f107 0208 	add.w	r2, r7, #8
 800eef6:	4611      	mov	r1, r2
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fbd7 	bl	800e6ac <validate>
 800eefe:	4603      	mov	r3, r0
 800ef00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d103      	bne.n	800ef14 <f_lseek+0x2e>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	7d5b      	ldrb	r3, [r3, #21]
 800ef10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ef14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d002      	beq.n	800ef22 <f_lseek+0x3c>
 800ef1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef20:	e1e6      	b.n	800f2f0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f000 80d1 	beq.w	800f0ce <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef32:	d15a      	bne.n	800efea <f_lseek+0x104>
			tbl = fp->cltbl;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef38:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3c:	1d1a      	adds	r2, r3, #4
 800ef3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	617b      	str	r3, [r7, #20]
 800ef44:	2302      	movs	r3, #2
 800ef46:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d03a      	beq.n	800efca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ef54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef56:	613b      	str	r3, [r7, #16]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5e:	3302      	adds	r3, #2
 800ef60:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ef62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef68:	3301      	adds	r3, #1
 800ef6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe faa0 	bl	800d4b6 <get_fat>
 800ef76:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ef78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d804      	bhi.n	800ef88 <f_lseek+0xa2>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2202      	movs	r2, #2
 800ef82:	755a      	strb	r2, [r3, #21]
 800ef84:	2302      	movs	r3, #2
 800ef86:	e1b3      	b.n	800f2f0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8e:	d104      	bne.n	800ef9a <f_lseek+0xb4>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	755a      	strb	r2, [r3, #21]
 800ef96:	2301      	movs	r3, #1
 800ef98:	e1aa      	b.n	800f2f0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d0de      	beq.n	800ef62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800efa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d809      	bhi.n	800efc0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800efac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efae:	1d1a      	adds	r2, r3, #4
 800efb0:	627a      	str	r2, [r7, #36]	@ 0x24
 800efb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb8:	1d1a      	adds	r2, r3, #4
 800efba:	627a      	str	r2, [r7, #36]	@ 0x24
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d3c4      	bcc.n	800ef54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efd0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800efd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d803      	bhi.n	800efe2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800efda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efdc:	2200      	movs	r2, #0
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	e184      	b.n	800f2ec <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800efe2:	2311      	movs	r3, #17
 800efe4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800efe8:	e180      	b.n	800f2ec <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d902      	bls.n	800effa <f_lseek+0x114>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	f000 8172 	beq.w	800f2ec <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	3b01      	subs	r3, #1
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7fe fcdf 	bl	800d9d2 <clmt_clust>
 800f014:	4602      	mov	r2, r0
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f7fe fa28 	bl	800d478 <clust2sect>
 800f028:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d104      	bne.n	800f03a <f_lseek+0x154>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2202      	movs	r2, #2
 800f034:	755a      	strb	r2, [r3, #21]
 800f036:	2302      	movs	r3, #2
 800f038:	e15a      	b.n	800f2f0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	0a5b      	lsrs	r3, r3, #9
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	8952      	ldrh	r2, [r2, #10]
 800f044:	3a01      	subs	r2, #1
 800f046:	4013      	ands	r3, r2
 800f048:	69ba      	ldr	r2, [r7, #24]
 800f04a:	4413      	add	r3, r2
 800f04c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	699b      	ldr	r3, [r3, #24]
 800f052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f056:	2b00      	cmp	r3, #0
 800f058:	f000 8148 	beq.w	800f2ec <f_lseek+0x406>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a1b      	ldr	r3, [r3, #32]
 800f060:	69ba      	ldr	r2, [r7, #24]
 800f062:	429a      	cmp	r2, r3
 800f064:	f000 8142 	beq.w	800f2ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	7d1b      	ldrb	r3, [r3, #20]
 800f06c:	b25b      	sxtb	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	da18      	bge.n	800f0a4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	7858      	ldrb	r0, [r3, #1]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a1a      	ldr	r2, [r3, #32]
 800f080:	2301      	movs	r3, #1
 800f082:	f7fd fe6f 	bl	800cd64 <disk_write>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d004      	beq.n	800f096 <f_lseek+0x1b0>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	755a      	strb	r2, [r3, #21]
 800f092:	2301      	movs	r3, #1
 800f094:	e12c      	b.n	800f2f0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	7d1b      	ldrb	r3, [r3, #20]
 800f09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	7858      	ldrb	r0, [r3, #1]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	69ba      	ldr	r2, [r7, #24]
 800f0b2:	f7fd fe37 	bl	800cd24 <disk_read>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d004      	beq.n	800f0c6 <f_lseek+0x1e0>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	755a      	strb	r2, [r3, #21]
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e114      	b.n	800f2f0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	69ba      	ldr	r2, [r7, #24]
 800f0ca:	621a      	str	r2, [r3, #32]
 800f0cc:	e10e      	b.n	800f2ec <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	683a      	ldr	r2, [r7, #0]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d908      	bls.n	800f0ea <f_lseek+0x204>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	7d1b      	ldrb	r3, [r3, #20]
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d102      	bne.n	800f0ea <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	699b      	ldr	r3, [r3, #24]
 800f0ee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0f8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f000 80a7 	beq.w	800f250 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	895b      	ldrh	r3, [r3, #10]
 800f106:	025b      	lsls	r3, r3, #9
 800f108:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d01b      	beq.n	800f148 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	1e5a      	subs	r2, r3, #1
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	fbb2 f2f3 	udiv	r2, r2, r3
 800f11a:	6a3b      	ldr	r3, [r7, #32]
 800f11c:	1e59      	subs	r1, r3, #1
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f124:	429a      	cmp	r2, r3
 800f126:	d30f      	bcc.n	800f148 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f128:	6a3b      	ldr	r3, [r7, #32]
 800f12a:	1e5a      	subs	r2, r3, #1
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	425b      	negs	r3, r3
 800f130:	401a      	ands	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	69db      	ldr	r3, [r3, #28]
 800f144:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f146:	e022      	b.n	800f18e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f150:	2b00      	cmp	r3, #0
 800f152:	d119      	bne.n	800f188 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2100      	movs	r1, #0
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fe fba2 	bl	800d8a2 <create_chain>
 800f15e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f162:	2b01      	cmp	r3, #1
 800f164:	d104      	bne.n	800f170 <f_lseek+0x28a>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2202      	movs	r2, #2
 800f16a:	755a      	strb	r2, [r3, #21]
 800f16c:	2302      	movs	r3, #2
 800f16e:	e0bf      	b.n	800f2f0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d104      	bne.n	800f182 <f_lseek+0x29c>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	755a      	strb	r2, [r3, #21]
 800f17e:	2301      	movs	r3, #1
 800f180:	e0b6      	b.n	800f2f0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f186:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f18c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f190:	2b00      	cmp	r3, #0
 800f192:	d05d      	beq.n	800f250 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f194:	e03a      	b.n	800f20c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	603b      	str	r3, [r7, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	699a      	ldr	r2, [r3, #24]
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	441a      	add	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	7d1b      	ldrb	r3, [r3, #20]
 800f1ae:	f003 0302 	and.w	r3, r3, #2
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00b      	beq.n	800f1ce <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe fb71 	bl	800d8a2 <create_chain>
 800f1c0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d108      	bne.n	800f1da <f_lseek+0x2f4>
							ofs = 0; break;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	603b      	str	r3, [r7, #0]
 800f1cc:	e022      	b.n	800f214 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fe f96f 	bl	800d4b6 <get_fat>
 800f1d8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e0:	d104      	bne.n	800f1ec <f_lseek+0x306>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	755a      	strb	r2, [r3, #21]
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e081      	b.n	800f2f0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d904      	bls.n	800f1fc <f_lseek+0x316>
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d304      	bcc.n	800f206 <f_lseek+0x320>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2202      	movs	r2, #2
 800f200:	755a      	strb	r2, [r3, #21]
 800f202:	2302      	movs	r3, #2
 800f204:	e074      	b.n	800f2f0 <f_lseek+0x40a>
					fp->clust = clst;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f20a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f20c:	683a      	ldr	r2, [r7, #0]
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	429a      	cmp	r2, r3
 800f212:	d8c0      	bhi.n	800f196 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	699a      	ldr	r2, [r3, #24]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	441a      	add	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f226:	2b00      	cmp	r3, #0
 800f228:	d012      	beq.n	800f250 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fe f922 	bl	800d478 <clust2sect>
 800f234:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d104      	bne.n	800f246 <f_lseek+0x360>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2202      	movs	r2, #2
 800f240:	755a      	strb	r2, [r3, #21]
 800f242:	2302      	movs	r3, #2
 800f244:	e054      	b.n	800f2f0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	0a5b      	lsrs	r3, r3, #9
 800f24a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f24c:	4413      	add	r3, r2
 800f24e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	699a      	ldr	r2, [r3, #24]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d90a      	bls.n	800f272 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	699a      	ldr	r2, [r3, #24]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	7d1b      	ldrb	r3, [r3, #20]
 800f268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f26c:	b2da      	uxtb	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	699b      	ldr	r3, [r3, #24]
 800f276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d036      	beq.n	800f2ec <f_lseek+0x406>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f284:	429a      	cmp	r2, r3
 800f286:	d031      	beq.n	800f2ec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	7d1b      	ldrb	r3, [r3, #20]
 800f28c:	b25b      	sxtb	r3, r3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	da18      	bge.n	800f2c4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	7858      	ldrb	r0, [r3, #1]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a1a      	ldr	r2, [r3, #32]
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	f7fd fd5f 	bl	800cd64 <disk_write>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d004      	beq.n	800f2b6 <f_lseek+0x3d0>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	755a      	strb	r2, [r3, #21]
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e01c      	b.n	800f2f0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	7858      	ldrb	r0, [r3, #1]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2d2:	f7fd fd27 	bl	800cd24 <disk_read>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d004      	beq.n	800f2e6 <f_lseek+0x400>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	755a      	strb	r2, [r3, #21]
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e004      	b.n	800f2f0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2ea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f2ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3740      	adds	r7, #64	@ 0x40
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b087      	sub	sp, #28
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	4613      	mov	r3, r2
 800f304:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f306:	2301      	movs	r3, #1
 800f308:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f30e:	4b1f      	ldr	r3, [pc, #124]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f310:	7a5b      	ldrb	r3, [r3, #9]
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b00      	cmp	r3, #0
 800f316:	d131      	bne.n	800f37c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f318:	4b1c      	ldr	r3, [pc, #112]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f31a:	7a5b      	ldrb	r3, [r3, #9]
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	461a      	mov	r2, r3
 800f320:	4b1a      	ldr	r3, [pc, #104]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f322:	2100      	movs	r1, #0
 800f324:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f326:	4b19      	ldr	r3, [pc, #100]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f328:	7a5b      	ldrb	r3, [r3, #9]
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	4a17      	ldr	r2, [pc, #92]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4413      	add	r3, r2
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f336:	4b15      	ldr	r3, [pc, #84]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f338:	7a5b      	ldrb	r3, [r3, #9]
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	461a      	mov	r2, r3
 800f33e:	4b13      	ldr	r3, [pc, #76]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f340:	4413      	add	r3, r2
 800f342:	79fa      	ldrb	r2, [r7, #7]
 800f344:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f346:	4b11      	ldr	r3, [pc, #68]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f348:	7a5b      	ldrb	r3, [r3, #9]
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	b2d1      	uxtb	r1, r2
 800f350:	4a0e      	ldr	r2, [pc, #56]	@ (800f38c <FATFS_LinkDriverEx+0x94>)
 800f352:	7251      	strb	r1, [r2, #9]
 800f354:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f356:	7dbb      	ldrb	r3, [r7, #22]
 800f358:	3330      	adds	r3, #48	@ 0x30
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	3301      	adds	r3, #1
 800f364:	223a      	movs	r2, #58	@ 0x3a
 800f366:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	3302      	adds	r3, #2
 800f36c:	222f      	movs	r2, #47	@ 0x2f
 800f36e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	3303      	adds	r3, #3
 800f374:	2200      	movs	r2, #0
 800f376:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	371c      	adds	r7, #28
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	24000808 	.word	0x24000808

0800f390 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f39a:	2200      	movs	r2, #0
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff ffaa 	bl	800f2f8 <FATFS_LinkDriverEx>
 800f3a4:	4603      	mov	r3, r0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
	...

0800f3b0 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	607b      	str	r3, [r7, #4]
 800f3ba:	e02e      	b.n	800f41a <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	3b80      	subs	r3, #128	@ 0x80
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800f3ca:	fb02 f303 	mul.w	r3, r2, r3
 800f3ce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3d2:	141a      	asrs	r2, r3, #16
 800f3d4:	4916      	ldr	r1, [pc, #88]	@ (800f430 <JPEG_InitPostProcColorTables+0x80>)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800f3e2:	fb02 f303 	mul.w	r3, r2, r3
 800f3e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3ea:	141a      	asrs	r2, r3, #16
 800f3ec:	4911      	ldr	r1, [pc, #68]	@ (800f434 <JPEG_InitPostProcColorTables+0x84>)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	4a10      	ldr	r2, [pc, #64]	@ (800f438 <JPEG_InitPostProcColorTables+0x88>)
 800f3f8:	fb03 f202 	mul.w	r2, r3, r2
 800f3fc:	490f      	ldr	r1, [pc, #60]	@ (800f43c <JPEG_InitPostProcColorTables+0x8c>)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	4a0e      	ldr	r2, [pc, #56]	@ (800f440 <JPEG_InitPostProcColorTables+0x90>)
 800f408:	fb03 f202 	mul.w	r2, r3, r2
 800f40c:	490d      	ldr	r1, [pc, #52]	@ (800f444 <JPEG_InitPostProcColorTables+0x94>)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3301      	adds	r3, #1
 800f418:	607b      	str	r3, [r7, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2bff      	cmp	r3, #255	@ 0xff
 800f41e:	ddcd      	ble.n	800f3bc <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	24000814 	.word	0x24000814
 800f434:	24000c14 	.word	0x24000c14
 800f438:	ffffa498 	.word	0xffffa498
 800f43c:	24001014 	.word	0x24001014
 800f440:	ffffd3f4 	.word	0xffffd3f4
 800f444:	24001414 	.word	0x24001414

0800f448 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800f44c:	f000 f806 	bl	800f45c <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800f450:	f000 f888 	bl	800f564 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800f454:	f7ff ffac 	bl	800f3b0 <JPEG_InitPostProcColorTables>
#endif

}
 800f458:	bf00      	nop
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800f462:	2300      	movs	r3, #0
 800f464:	607b      	str	r3, [r7, #4]
 800f466:	e05a      	b.n	800f51e <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800f46e:	fb02 f303 	mul.w	r3, r2, r3
 800f472:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f476:	141a      	asrs	r2, r3, #16
 800f478:	492e      	ldr	r1, [pc, #184]	@ (800f534 <JPEG_InitPreProcColorTables+0xd8>)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f249 6245 	movw	r2, #38469	@ 0x9645
 800f486:	fb02 f303 	mul.w	r3, r2, r3
 800f48a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f48e:	141a      	asrs	r2, r3, #16
 800f490:	4929      	ldr	r1, [pc, #164]	@ (800f538 <JPEG_InitPreProcColorTables+0xdc>)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800f49e:	fb02 f303 	mul.w	r3, r2, r3
 800f4a2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4a6:	141a      	asrs	r2, r3, #16
 800f4a8:	4924      	ldr	r1, [pc, #144]	@ (800f53c <JPEG_InitPreProcColorTables+0xe0>)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a23      	ldr	r2, [pc, #140]	@ (800f540 <JPEG_InitPreProcColorTables+0xe4>)
 800f4b4:	fb02 f303 	mul.w	r3, r2, r3
 800f4b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4bc:	141a      	asrs	r2, r3, #16
 800f4be:	4921      	ldr	r1, [pc, #132]	@ (800f544 <JPEG_InitPreProcColorTables+0xe8>)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a1f      	ldr	r2, [pc, #124]	@ (800f548 <JPEG_InitPreProcColorTables+0xec>)
 800f4ca:	fb02 f303 	mul.w	r3, r2, r3
 800f4ce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4d2:	141a      	asrs	r2, r3, #16
 800f4d4:	491d      	ldr	r1, [pc, #116]	@ (800f54c <JPEG_InitPreProcColorTables+0xf0>)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	03db      	lsls	r3, r3, #15
 800f4e2:	141a      	asrs	r2, r3, #16
 800f4e4:	491a      	ldr	r1, [pc, #104]	@ (800f550 <JPEG_InitPreProcColorTables+0xf4>)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a19      	ldr	r2, [pc, #100]	@ (800f554 <JPEG_InitPreProcColorTables+0xf8>)
 800f4f0:	fb02 f303 	mul.w	r3, r2, r3
 800f4f4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4f8:	141a      	asrs	r2, r3, #16
 800f4fa:	4917      	ldr	r1, [pc, #92]	@ (800f558 <JPEG_InitPreProcColorTables+0xfc>)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a15      	ldr	r2, [pc, #84]	@ (800f55c <JPEG_InitPreProcColorTables+0x100>)
 800f506:	fb02 f303 	mul.w	r3, r2, r3
 800f50a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f50e:	141a      	asrs	r2, r3, #16
 800f510:	4913      	ldr	r1, [pc, #76]	@ (800f560 <JPEG_InitPreProcColorTables+0x104>)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	3301      	adds	r3, #1
 800f51c:	607b      	str	r3, [r7, #4]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2bff      	cmp	r3, #255	@ 0xff
 800f522:	dda1      	ble.n	800f468 <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800f524:	bf00      	nop
 800f526:	bf00      	nop
 800f528:	370c      	adds	r7, #12
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	24001814 	.word	0x24001814
 800f538:	24002414 	.word	0x24002414
 800f53c:	24003014 	.word	0x24003014
 800f540:	ffffd4d1 	.word	0xffffd4d1
 800f544:	24001c14 	.word	0x24001c14
 800f548:	ffffab30 	.word	0xffffab30
 800f54c:	24002c14 	.word	0x24002c14
 800f550:	24002014 	.word	0x24002014
 800f554:	ffff94d1 	.word	0xffff94d1
 800f558:	24002814 	.word	0x24002814
 800f55c:	ffffeb30 	.word	0xffffeb30
 800f560:	24003414 	.word	0x24003414

0800f564 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800f56a:	2300      	movs	r3, #0
 800f56c:	60fb      	str	r3, [r7, #12]
 800f56e:	e036      	b.n	800f5de <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800f570:	2300      	movs	r3, #0
 800f572:	60bb      	str	r3, [r7, #8]
 800f574:	e02d      	b.n	800f5d2 <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	00db      	lsls	r3, r3, #3
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	4413      	add	r3, r2
 800f57e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2b07      	cmp	r3, #7
 800f584:	d906      	bls.n	800f594 <JPEG_Init_MCU_LUT+0x30>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2b07      	cmp	r3, #7
 800f58a:	d903      	bls.n	800f594 <JPEG_Init_MCU_LUT+0x30>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	3378      	adds	r3, #120	@ 0x78
 800f590:	607b      	str	r3, [r7, #4]
 800f592:	e012      	b.n	800f5ba <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b07      	cmp	r3, #7
 800f598:	d906      	bls.n	800f5a8 <JPEG_Init_MCU_LUT+0x44>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b07      	cmp	r3, #7
 800f59e:	d803      	bhi.n	800f5a8 <JPEG_Init_MCU_LUT+0x44>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3338      	adds	r3, #56	@ 0x38
 800f5a4:	607b      	str	r3, [r7, #4]
 800f5a6:	e008      	b.n	800f5ba <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	2b07      	cmp	r3, #7
 800f5ac:	d805      	bhi.n	800f5ba <JPEG_Init_MCU_LUT+0x56>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b07      	cmp	r3, #7
 800f5b2:	d902      	bls.n	800f5ba <JPEG_Init_MCU_LUT+0x56>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3340      	adds	r3, #64	@ 0x40
 800f5b8:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	011a      	lsls	r2, r3, #4
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	b291      	uxth	r1, r2
 800f5c6:	4a62      	ldr	r2, [pc, #392]	@ (800f750 <JPEG_Init_MCU_LUT+0x1ec>)
 800f5c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	60bb      	str	r3, [r7, #8]
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	2b0f      	cmp	r3, #15
 800f5d6:	d9ce      	bls.n	800f576 <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	60fb      	str	r3, [r7, #12]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b0f      	cmp	r3, #15
 800f5e2:	d9c5      	bls.n	800f570 <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	60fb      	str	r3, [r7, #12]
 800f5e8:	e072      	b.n	800f6d0 <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60bb      	str	r3, [r7, #8]
 800f5ee:	e069      	b.n	800f6c4 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	011b      	lsls	r3, r3, #4
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	085b      	lsrs	r3, r3, #1
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	085b      	lsrs	r3, r3, #1
 800f604:	b29b      	uxth	r3, r3
 800f606:	00db      	lsls	r3, r3, #3
 800f608:	b29b      	uxth	r3, r3
 800f60a:	4413      	add	r3, r2
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f612:	b299      	uxth	r1, r3
 800f614:	4a4f      	ldr	r2, [pc, #316]	@ (800f754 <JPEG_Init_MCU_LUT+0x1f0>)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	085b      	lsrs	r3, r3, #1
 800f620:	b29a      	uxth	r2, r3
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	b29b      	uxth	r3, r3
 800f626:	00db      	lsls	r3, r3, #3
 800f628:	b29b      	uxth	r3, r3
 800f62a:	4413      	add	r3, r2
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	3380      	adds	r3, #128	@ 0x80
 800f630:	b299      	uxth	r1, r3
 800f632:	4a49      	ldr	r2, [pc, #292]	@ (800f758 <JPEG_Init_MCU_LUT+0x1f4>)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	085b      	lsrs	r3, r3, #1
 800f63e:	b29a      	uxth	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	085b      	lsrs	r3, r3, #1
 800f644:	b29b      	uxth	r3, r3
 800f646:	00db      	lsls	r3, r3, #3
 800f648:	b29b      	uxth	r3, r3
 800f64a:	4413      	add	r3, r2
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f652:	b299      	uxth	r1, r3
 800f654:	4a41      	ldr	r2, [pc, #260]	@ (800f75c <JPEG_Init_MCU_LUT+0x1f8>)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	085b      	lsrs	r3, r3, #1
 800f660:	b29a      	uxth	r2, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	b29b      	uxth	r3, r3
 800f666:	00db      	lsls	r3, r3, #3
 800f668:	b29b      	uxth	r3, r3
 800f66a:	4413      	add	r3, r2
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	33c0      	adds	r3, #192	@ 0xc0
 800f670:	b299      	uxth	r1, r3
 800f672:	4a3b      	ldr	r2, [pc, #236]	@ (800f760 <JPEG_Init_MCU_LUT+0x1fc>)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	085b      	lsrs	r3, r3, #1
 800f67e:	b29a      	uxth	r2, r3
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	085b      	lsrs	r3, r3, #1
 800f684:	b29b      	uxth	r3, r3
 800f686:	00db      	lsls	r3, r3, #3
 800f688:	b29b      	uxth	r3, r3
 800f68a:	4413      	add	r3, r2
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f692:	b299      	uxth	r1, r3
 800f694:	4a33      	ldr	r2, [pc, #204]	@ (800f764 <JPEG_Init_MCU_LUT+0x200>)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	085b      	lsrs	r3, r3, #1
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	085b      	lsrs	r3, r3, #1
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	00db      	lsls	r3, r3, #3
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4413      	add	r3, r2
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f6b4:	b299      	uxth	r1, r3
 800f6b6:	4a2c      	ldr	r2, [pc, #176]	@ (800f768 <JPEG_Init_MCU_LUT+0x204>)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60bb      	str	r3, [r7, #8]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	2b0f      	cmp	r3, #15
 800f6c8:	d992      	bls.n	800f5f0 <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	60fb      	str	r3, [r7, #12]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2b0f      	cmp	r3, #15
 800f6d4:	d989      	bls.n	800f5ea <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60fb      	str	r3, [r7, #12]
 800f6da:	e02e      	b.n	800f73a <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60bb      	str	r3, [r7, #8]
 800f6e0:	e025      	b.n	800f72e <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	00db      	lsls	r3, r3, #3
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	b299      	uxth	r1, r3
 800f6f0:	4a1e      	ldr	r2, [pc, #120]	@ (800f76c <JPEG_Init_MCU_LUT+0x208>)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	3340      	adds	r3, #64	@ 0x40
 800f6fe:	b299      	uxth	r1, r3
 800f700:	4a1b      	ldr	r2, [pc, #108]	@ (800f770 <JPEG_Init_MCU_LUT+0x20c>)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	3380      	adds	r3, #128	@ 0x80
 800f70e:	b299      	uxth	r1, r3
 800f710:	4a18      	ldr	r2, [pc, #96]	@ (800f774 <JPEG_Init_MCU_LUT+0x210>)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	33c0      	adds	r3, #192	@ 0xc0
 800f71e:	b299      	uxth	r1, r3
 800f720:	4a15      	ldr	r2, [pc, #84]	@ (800f778 <JPEG_Init_MCU_LUT+0x214>)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	3301      	adds	r3, #1
 800f72c:	60bb      	str	r3, [r7, #8]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	2b07      	cmp	r3, #7
 800f732:	d9d6      	bls.n	800f6e2 <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3301      	adds	r3, #1
 800f738:	60fb      	str	r3, [r7, #12]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2b07      	cmp	r3, #7
 800f73e:	d9cd      	bls.n	800f6dc <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800f740:	bf00      	nop
 800f742:	bf00      	nop
 800f744:	3714      	adds	r7, #20
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	24003814 	.word	0x24003814
 800f754:	24003a94 	.word	0x24003a94
 800f758:	24003c94 	.word	0x24003c94
 800f75c:	24003f14 	.word	0x24003f14
 800f760:	24004114 	.word	0x24004114
 800f764:	24004394 	.word	0x24004394
 800f768:	24004594 	.word	0x24004594
 800f76c:	24003a14 	.word	0x24003a14
 800f770:	24003e94 	.word	0x24003e94
 800f774:	24004314 	.word	0x24004314
 800f778:	24004794 	.word	0x24004794

0800f77c <memset>:
 800f77c:	4402      	add	r2, r0
 800f77e:	4603      	mov	r3, r0
 800f780:	4293      	cmp	r3, r2
 800f782:	d100      	bne.n	800f786 <memset+0xa>
 800f784:	4770      	bx	lr
 800f786:	f803 1b01 	strb.w	r1, [r3], #1
 800f78a:	e7f9      	b.n	800f780 <memset+0x4>

0800f78c <__libc_init_array>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	4d0d      	ldr	r5, [pc, #52]	@ (800f7c4 <__libc_init_array+0x38>)
 800f790:	4c0d      	ldr	r4, [pc, #52]	@ (800f7c8 <__libc_init_array+0x3c>)
 800f792:	1b64      	subs	r4, r4, r5
 800f794:	10a4      	asrs	r4, r4, #2
 800f796:	2600      	movs	r6, #0
 800f798:	42a6      	cmp	r6, r4
 800f79a:	d109      	bne.n	800f7b0 <__libc_init_array+0x24>
 800f79c:	4d0b      	ldr	r5, [pc, #44]	@ (800f7cc <__libc_init_array+0x40>)
 800f79e:	4c0c      	ldr	r4, [pc, #48]	@ (800f7d0 <__libc_init_array+0x44>)
 800f7a0:	f000 f818 	bl	800f7d4 <_init>
 800f7a4:	1b64      	subs	r4, r4, r5
 800f7a6:	10a4      	asrs	r4, r4, #2
 800f7a8:	2600      	movs	r6, #0
 800f7aa:	42a6      	cmp	r6, r4
 800f7ac:	d105      	bne.n	800f7ba <__libc_init_array+0x2e>
 800f7ae:	bd70      	pop	{r4, r5, r6, pc}
 800f7b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7b4:	4798      	blx	r3
 800f7b6:	3601      	adds	r6, #1
 800f7b8:	e7ee      	b.n	800f798 <__libc_init_array+0xc>
 800f7ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7be:	4798      	blx	r3
 800f7c0:	3601      	adds	r6, #1
 800f7c2:	e7f2      	b.n	800f7aa <__libc_init_array+0x1e>
 800f7c4:	0800fb9c 	.word	0x0800fb9c
 800f7c8:	0800fb9c 	.word	0x0800fb9c
 800f7cc:	0800fb9c 	.word	0x0800fb9c
 800f7d0:	0800fba0 	.word	0x0800fba0

0800f7d4 <_init>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	bf00      	nop
 800f7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7da:	bc08      	pop	{r3}
 800f7dc:	469e      	mov	lr, r3
 800f7de:	4770      	bx	lr

0800f7e0 <_fini>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	bf00      	nop
 800f7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7e6:	bc08      	pop	{r3}
 800f7e8:	469e      	mov	lr, r3
 800f7ea:	4770      	bx	lr
