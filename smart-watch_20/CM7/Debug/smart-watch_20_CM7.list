
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f57c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800f814  0800f814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbbc  0800fbbc  0001101c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbbc  0800fbbc  00010bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbc4  0800fbc4  0001101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbc4  0800fbc4  00010bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fbc8  0800fbc8  00010bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  24000000  0800fbcc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005800  2400001c  0800fbe8  0001101c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400581c  0800fbe8  0001181c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241b7  00000000  00000000  0001104a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004724  00000000  00000000  00035201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00039928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f7  00000000  00000000  0003b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000449b8  00000000  00000000  0003c707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028da1  00000000  00000000  000810bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a66fd  00000000  00000000  000a9e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025055d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c08  00000000  00000000  002505a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  002571a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f7fc 	.word	0x0800f7fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	0800f7fc 	.word	0x0800f7fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b04      	subs	r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e02a      	b.n	8000762 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d11f      	bne.n	800075c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d115      	bne.n	800075c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	3302      	adds	r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d10b      	bne.n	800075c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3303      	adds	r3, #3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3303      	adds	r3, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <__AVI_SearchID+0x68>
            return i;  
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	e007      	b.n	800076c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8d0      	bhi.n	800070c <__AVI_SearchID+0x18>
  }
  return 0;    
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3303      	adds	r3, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	431a      	orrs	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3306      	adds	r3, #6
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3307      	adds	r3, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	4313      	orrs	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8bdb      	ldrh	r3, [r3, #30]
 80007e4:	f246 4263 	movw	r2, #25699	@ 0x6463
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d005      	beq.n	80007f8 <__AVI_GetStreamInfo+0x80>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8bdb      	ldrh	r3, [r3, #30]
 80007f0:	f247 7262 	movw	r2, #30562	@ 0x7762
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d101      	bne.n	80007fc <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80007fc:	230b      	movs	r3, #11
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <__AVI_Init+0x23c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d001      	beq.n	8000834 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 8000830:	2301      	movs	r3, #1
 8000832:	e170      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a84      	ldr	r2, [pc, #528]	@ (8000a4c <__AVI_Init+0x240>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d001      	beq.n	8000842 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800083e:	2302      	movs	r3, #2
 8000840:	e169      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330c      	adds	r3, #12
 8000846:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <__AVI_Init+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d001      	beq.n	800085a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000856:	2303      	movs	r3, #3
 8000858:	e15d      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a54 <__AVI_Init+0x248>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d001      	beq.n	8000868 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000864:	2304      	movs	r3, #4
 8000866:	e156      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a78      	ldr	r2, [pc, #480]	@ (8000a58 <__AVI_Init+0x24c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d001      	beq.n	8000880 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800087c:	2305      	movs	r3, #5
 800087e:	e14a      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	3308      	adds	r3, #8
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80008a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <__AVI_Init+0x244>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d001      	beq.n	80008ae <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e133      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <__AVI_Init+0x250>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 80008b8:	2306      	movs	r3, #6
 80008ba:	e12c      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	330c      	adds	r3, #12
 80008c0:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a66      	ldr	r2, [pc, #408]	@ (8000a60 <__AVI_Init+0x254>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d001      	beq.n	80008d0 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 80008cc:	2307      	movs	r3, #7
 80008ce:	e122      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	@ (8000a64 <__AVI_Init+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <__AVI_Init+0x25c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d001      	beq.n	80008e8 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 80008e4:	230a      	movs	r3, #10
 80008e6:	e116      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <__AVI_Init+0x260>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80008ee:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <__AVI_Init+0x264>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	3314      	adds	r3, #20
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a5b      	ldr	r2, [pc, #364]	@ (8000a74 <__AVI_Init+0x268>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d001      	beq.n	800090e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800090a:	2308      	movs	r3, #8
 800090c:	e103      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3308      	adds	r3, #8
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <__AVI_Init+0x244>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d009      	beq.n	800094c <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	839a      	strh	r2, [r3, #28]
 800094a:	e0b7      	b.n	8000abc <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <__AVI_Init+0x250>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d001      	beq.n	800095a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000956:	2306      	movs	r3, #6
 8000958:	e0dd      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <__AVI_Init+0x254>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d001      	beq.n	800096e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800096a:	2307      	movs	r3, #7
 800096c:	e0d3      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <__AVI_Init+0x26c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d001      	beq.n	800097c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000978:	230a      	movs	r3, #10
 800097a:	e0cc      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	3314      	adds	r3, #20
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <__AVI_Init+0x268>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d001      	beq.n	8000996 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 8000992:	2308      	movs	r3, #8
 8000994:	e0bf      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	895a      	ldrh	r2, [r3, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	891a      	ldrh	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	839a      	strh	r2, [r3, #28]
 80009ae:	e085      	b.n	8000abc <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <__AVI_Init+0x26c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 8080 	bne.w	8000abc <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <__AVI_Init+0x270>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <__AVI_Init+0x274>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3314      	adds	r3, #20
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <__AVI_Init+0x268>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d001      	beq.n	80009e2 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 80009de:	2308      	movs	r3, #8
 80009e0:	e099      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	895a      	ldrh	r2, [r3, #10]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	891a      	ldrh	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	3308      	adds	r3, #8
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <__AVI_Init+0x244>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d001      	beq.n	8000a18 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 8000a14:	2303      	movs	r3, #3
 8000a16:	e07e      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <__AVI_Init+0x250>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d001      	beq.n	8000a26 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 8000a22:	2306      	movs	r3, #6
 8000a24:	e077      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <__AVI_Init+0x254>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d001      	beq.n	8000a3a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 8000a36:	2307      	movs	r3, #7
 8000a38:	e06d      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <__AVI_Init+0x258>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 8000a44:	230a      	movs	r3, #10
 8000a46:	e066      	b.n	8000b16 <__AVI_Init+0x30a>
 8000a48:	46464952 	.word	0x46464952
 8000a4c:	20495641 	.word	0x20495641
 8000a50:	5453494c 	.word	0x5453494c
 8000a54:	6c726468 	.word	0x6c726468
 8000a58:	68697661 	.word	0x68697661
 8000a5c:	6c727473 	.word	0x6c727473
 8000a60:	68727473 	.word	0x68727473
 8000a64:	73646976 	.word	0x73646976
 8000a68:	47504a4d 	.word	0x47504a4d
 8000a6c:	0800f814 	.word	0x0800f814
 8000a70:	0800f82c 	.word	0x0800f82c
 8000a74:	66727473 	.word	0x66727473
 8000a78:	73647561 	.word	0x73647561
 8000a7c:	0800f81c 	.word	0x0800f81c
 8000a80:	0800f824 	.word	0x0800f824
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	3314      	adds	r3, #20
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <__AVI_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d001      	beq.n	8000a9e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	e03b      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <__AVI_Init+0x318>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d001      	beq.n	8000aac <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	e034      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <__AVI_Init+0x31c>)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac2:	f7ff fe17 	bl	80006f4 <__AVI_SearchID>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	e020      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01a      	beq.n	8000b12 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aee:	f7ff fe01 	bl	80006f4 <__AVI_SearchID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000afc:	230b      	movs	r3, #11
 8000afe:	e00a      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3304      	adds	r3, #4
 8000b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	@ 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	66727473 	.word	0x66727473
 8000b24:	47504a4d 	.word	0x47504a4d
 8000b28:	0800f834 	.word	0x0800f834

08000b2c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT *pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]

  UINT readSize= 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  

  // Initialize some parameters for the AVI file handler
  pavi->pVideoBuffer = pVideoBuffer;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38
  pavi->pAudioBuffer = pAudioBuffer;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
  
  // Go to the beginning of the file
  f_lseek(file, 0 );
 8000b56:	2100      	movs	r1, #0
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f00e f9ca 	bl	800eef2 <f_lseek>
  
  // Fill the videoBuffer with the first 96kB of the file
  f_read(file, pavi->pVideoBuffer, VideoBufferSize, &readSize);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f00d ffdb 	bl	800eb24 <f_read>

  // Manage the error if present
  if(readSize != VideoBufferSize)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d001      	beq.n	8000b7a <AVI_ParserInit+0x4e>
    return 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e013      	b.n	8000ba2 <AVI_ParserInit+0x76>
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe42 	bl	800080c <__AVI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <AVI_ParserInit+0x66>
    return 1;    
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e007      	b.n	8000ba2 <AVI_ParserInit+0x76>

  // Initialize other parameters for the AVI file handler
  pavi->FileSize= f_size(file);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 8000ba0:	2300      	movs	r3, #0

}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT *pavi, FIL *file)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]

  uint32_t  offset ;
  uint32_t readSize = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  

  if(pavi->CurrentImage== 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d124      	bne.n	8000c0c <AVI_GetFrame+0x60>
  {
    
	// Go to the beginning of the file
    f_lseek(file, 0 );
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f00e f994 	bl	800eef2 <f_lseek>

    // File the videoBuffer with the first 96kB of file data
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00d ffa4 	bl	800eb24 <f_read>
    
    // Check for "movi" tag
    offset = __AVI_SearchID(pavi->pVideoBuffer, pavi->VideoBufferSize, (uint8_t*)"movi");
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <AVI_GetFrame+0xe4>)
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__AVI_SearchID>
 8000bec:	60f8      	str	r0, [r7, #12]

    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdbc 	bl	8000778 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	330c      	adds	r3, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f00e f973 	bl	800eef2 <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8bdb      	ldrh	r3, [r3, #30]
 8000c18:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d115      	bne.n	8000c4c <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f103 0208 	add.w	r2, r3, #8
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f00d ff77 	bl	800eb24 <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fd98 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e01c      	b.n	8000c86 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8bdb      	ldrh	r3, [r3, #30]
 8000c50:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d115      	bne.n	8000c84 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f103 0208 	add.w	r2, r3, #8
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f00d ff5b 	bl	800eb24 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	4413      	add	r3, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fd7c 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 8000c80:	2302      	movs	r3, #2
 8000c82:	e000      	b.n	8000c86 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800f834 	.word	0x0800f834

08000c94 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000caa:	f002 fb6d 	bl	8003388 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 8000cae:	e004      	b.n	8000cba <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000cb6:	f002 fb67 	bl	8003388 <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58022400 	.word	0x58022400

08000cc8 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cde:	f002 fb53 	bl	8003388 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000ce2:	e004      	b.n	8000cee <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cea:	f002 fb4d 	bl	8003388 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58022400 	.word	0x58022400

08000cfc <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d12:	f002 fb39 	bl	8003388 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000d16:	e004      	b.n	8000d22 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d1e:	f002 fb33 	bl	8003388 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58022800 	.word	0x58022800

08000d30 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffc4 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ffdb 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa92 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffd3 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffad 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffc4 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa7a 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ffbb 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffde 	bl	8000d5e <GC9A01_write_data>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000db4:	202c      	movs	r0, #44	@ 0x2c
 8000db6:	f7ff ffbb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffce 	bl	8000d5e <GC9A01_write_data>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000dd4:	203c      	movs	r0, #60	@ 0x3c
 8000dd6:	f7ff ffab 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffbe 	bl	8000d5e <GC9A01_write_data>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <GC9A01_init>:

void GC9A01_init(void) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff84 	bl	8000cfc <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f001 fbe3 	bl	80025c0 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ff4a 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(10);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 fbdd 	bl	80025c0 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff ff44 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(120);
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f001 fbd7 	bl	80025c0 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000e12:	20ef      	movs	r0, #239	@ 0xef
 8000e14:	f7ff ff8c 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e18:	20eb      	movs	r0, #235	@ 0xeb
 8000e1a:	f7ff ff89 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f7ff ffb5 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000e24:	20fe      	movs	r0, #254	@ 0xfe
 8000e26:	f7ff ff83 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000e2a:	20ef      	movs	r0, #239	@ 0xef
 8000e2c:	f7ff ff80 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e30:	20eb      	movs	r0, #235	@ 0xeb
 8000e32:	f7ff ff7d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ffa9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000e3c:	2084      	movs	r0, #132	@ 0x84
 8000e3e:	f7ff ff77 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e42:	2040      	movs	r0, #64	@ 0x40
 8000e44:	f7ff ffa3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000e48:	2085      	movs	r0, #133	@ 0x85
 8000e4a:	f7ff ff71 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	f7ff ff9d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000e54:	2086      	movs	r0, #134	@ 0x86
 8000e56:	f7ff ff6b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	f7ff ff97 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000e60:	2087      	movs	r0, #135	@ 0x87
 8000e62:	f7ff ff65 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e66:	20ff      	movs	r0, #255	@ 0xff
 8000e68:	f7ff ff91 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000e6c:	2088      	movs	r0, #136	@ 0x88
 8000e6e:	f7ff ff5f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff8b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000e78:	2089      	movs	r0, #137	@ 0x89
 8000e7a:	f7ff ff59 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000e7e:	2021      	movs	r0, #33	@ 0x21
 8000e80:	f7ff ff85 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000e84:	208a      	movs	r0, #138	@ 0x8a
 8000e86:	f7ff ff53 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff7f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000e90:	208b      	movs	r0, #139	@ 0x8b
 8000e92:	f7ff ff4d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e96:	2080      	movs	r0, #128	@ 0x80
 8000e98:	f7ff ff79 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000e9c:	208c      	movs	r0, #140	@ 0x8c
 8000e9e:	f7ff ff47 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ff73 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000ea8:	208d      	movs	r0, #141	@ 0x8d
 8000eaa:	f7ff ff41 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff6d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000eb4:	208e      	movs	r0, #142	@ 0x8e
 8000eb6:	f7ff ff3b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000eba:	20ff      	movs	r0, #255	@ 0xff
 8000ebc:	f7ff ff67 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000ec0:	208f      	movs	r0, #143	@ 0x8f
 8000ec2:	f7ff ff35 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	f7ff ff61 	bl	8000d8e <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ecc:	20b6      	movs	r0, #182	@ 0xb6
 8000ece:	f7ff ff2f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff5b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff ff58 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000ede:	2036      	movs	r0, #54	@ 0x36
 8000ee0:	f7ff ff26 	bl	8000d30 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000ee4:	2048      	movs	r0, #72	@ 0x48
 8000ee6:	f7ff ff52 	bl	8000d8e <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000eea:	203a      	movs	r0, #58	@ 0x3a
 8000eec:	f7ff ff20 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f7ff ff4c 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000ef6:	2090      	movs	r0, #144	@ 0x90
 8000ef8:	f7ff ff1a 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff ff46 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f02:	2008      	movs	r0, #8
 8000f04:	f7ff ff43 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f08:	2008      	movs	r0, #8
 8000f0a:	f7ff ff40 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f7ff ff3d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000f14:	20bd      	movs	r0, #189	@ 0xbd
 8000f16:	f7ff ff0b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f7ff ff37 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000f20:	20bc      	movs	r0, #188	@ 0xbc
 8000f22:	f7ff ff05 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ff31 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000f2c:	20ff      	movs	r0, #255	@ 0xff
 8000f2e:	f7ff feff 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f32:	2060      	movs	r0, #96	@ 0x60
 8000f34:	f7ff ff2b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff28 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff25 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000f44:	20c3      	movs	r0, #195	@ 0xc3
 8000f46:	f7ff fef3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f7ff ff1f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000f50:	20c4      	movs	r0, #196	@ 0xc4
 8000f52:	f7ff feed 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f7ff ff19 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000f5c:	20c9      	movs	r0, #201	@ 0xc9
 8000f5e:	f7ff fee7 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f62:	2022      	movs	r0, #34	@ 0x22
 8000f64:	f7ff ff13 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000f68:	20be      	movs	r0, #190	@ 0xbe
 8000f6a:	f7ff fee1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f7ff ff0d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000f74:	20e1      	movs	r0, #225	@ 0xe1
 8000f76:	f7ff fedb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff07 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f7ff ff04 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000f86:	20df      	movs	r0, #223	@ 0xdf
 8000f88:	f7ff fed2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000f8c:	2021      	movs	r0, #33	@ 0x21
 8000f8e:	f7ff fefe 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fefb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fef8 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000f9e:	20f0      	movs	r0, #240	@ 0xf0
 8000fa0:	f7ff fec6 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f7ff fef2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000faa:	2009      	movs	r0, #9
 8000fac:	f7ff feef 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff feec 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff fee9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000fbc:	2026      	movs	r0, #38	@ 0x26
 8000fbe:	f7ff fee6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000fc2:	202a      	movs	r0, #42	@ 0x2a
 8000fc4:	f7ff fee3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000fc8:	20f1      	movs	r0, #241	@ 0xf1
 8000fca:	f7ff feb1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000fce:	2043      	movs	r0, #67	@ 0x43
 8000fd0:	f7ff fedd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000fd4:	2070      	movs	r0, #112	@ 0x70
 8000fd6:	f7ff feda 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000fda:	2072      	movs	r0, #114	@ 0x72
 8000fdc:	f7ff fed7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000fe0:	2036      	movs	r0, #54	@ 0x36
 8000fe2:	f7ff fed4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000fe6:	2037      	movs	r0, #55	@ 0x37
 8000fe8:	f7ff fed1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000fec:	206f      	movs	r0, #111	@ 0x6f
 8000fee:	f7ff fece 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000ff2:	20f2      	movs	r0, #242	@ 0xf2
 8000ff4:	f7ff fe9c 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000ff8:	2045      	movs	r0, #69	@ 0x45
 8000ffa:	f7ff fec8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000ffe:	2009      	movs	r0, #9
 8001000:	f7ff fec5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff fec2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800100a:	2008      	movs	r0, #8
 800100c:	f7ff febf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8001010:	2026      	movs	r0, #38	@ 0x26
 8001012:	f7ff febc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8001016:	202a      	movs	r0, #42	@ 0x2a
 8001018:	f7ff feb9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800101c:	20f3      	movs	r0, #243	@ 0xf3
 800101e:	f7ff fe87 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001022:	2043      	movs	r0, #67	@ 0x43
 8001024:	f7ff feb3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001028:	2070      	movs	r0, #112	@ 0x70
 800102a:	f7ff feb0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800102e:	2072      	movs	r0, #114	@ 0x72
 8001030:	f7ff fead 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8001034:	2036      	movs	r0, #54	@ 0x36
 8001036:	f7ff feaa 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fea7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8001040:	206f      	movs	r0, #111	@ 0x6f
 8001042:	f7ff fea4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8001046:	20ed      	movs	r0, #237	@ 0xed
 8001048:	f7ff fe72 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800104c:	201b      	movs	r0, #27
 800104e:	f7ff fe9e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fe9b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8001058:	20ae      	movs	r0, #174	@ 0xae
 800105a:	f7ff fe69 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800105e:	2077      	movs	r0, #119	@ 0x77
 8001060:	f7ff fe95 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8001064:	20cd      	movs	r0, #205	@ 0xcd
 8001066:	f7ff fe63 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800106a:	2063      	movs	r0, #99	@ 0x63
 800106c:	f7ff fe8f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8001070:	2070      	movs	r0, #112	@ 0x70
 8001072:	f7ff fe5d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fe89 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800107c:	2007      	movs	r0, #7
 800107e:	f7ff fe86 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff fe83 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8001088:	200e      	movs	r0, #14
 800108a:	f7ff fe80 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800108e:	200f      	movs	r0, #15
 8001090:	f7ff fe7d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fe7a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800109a:	2007      	movs	r0, #7
 800109c:	f7ff fe77 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe74 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fe71 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80010ac:	20e8      	movs	r0, #232	@ 0xe8
 80010ae:	f7ff fe3f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80010b2:	2034      	movs	r0, #52	@ 0x34
 80010b4:	f7ff fe6b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80010b8:	2062      	movs	r0, #98	@ 0x62
 80010ba:	f7ff fe39 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80010be:	2018      	movs	r0, #24
 80010c0:	f7ff fe65 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80010c4:	200d      	movs	r0, #13
 80010c6:	f7ff fe62 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ca:	2071      	movs	r0, #113	@ 0x71
 80010cc:	f7ff fe5f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 80010d0:	20ed      	movs	r0, #237	@ 0xed
 80010d2:	f7ff fe5c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010d6:	2070      	movs	r0, #112	@ 0x70
 80010d8:	f7ff fe59 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010dc:	2070      	movs	r0, #112	@ 0x70
 80010de:	f7ff fe56 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f7ff fe53 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f7ff fe50 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ee:	2071      	movs	r0, #113	@ 0x71
 80010f0:	f7ff fe4d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 80010f4:	20ef      	movs	r0, #239	@ 0xef
 80010f6:	f7ff fe4a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010fa:	2070      	movs	r0, #112	@ 0x70
 80010fc:	f7ff fe47 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001100:	2070      	movs	r0, #112	@ 0x70
 8001102:	f7ff fe44 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8001106:	2063      	movs	r0, #99	@ 0x63
 8001108:	f7ff fe12 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800110c:	2018      	movs	r0, #24
 800110e:	f7ff fe3e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8001112:	2011      	movs	r0, #17
 8001114:	f7ff fe3b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001118:	2071      	movs	r0, #113	@ 0x71
 800111a:	f7ff fe38 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800111e:	20f1      	movs	r0, #241	@ 0xf1
 8001120:	f7ff fe35 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001124:	2070      	movs	r0, #112	@ 0x70
 8001126:	f7ff fe32 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800112a:	2070      	movs	r0, #112	@ 0x70
 800112c:	f7ff fe2f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8001130:	2018      	movs	r0, #24
 8001132:	f7ff fe2c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8001136:	2013      	movs	r0, #19
 8001138:	f7ff fe29 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800113c:	2071      	movs	r0, #113	@ 0x71
 800113e:	f7ff fe26 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8001142:	20f3      	movs	r0, #243	@ 0xf3
 8001144:	f7ff fe23 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001148:	2070      	movs	r0, #112	@ 0x70
 800114a:	f7ff fe20 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800114e:	2070      	movs	r0, #112	@ 0x70
 8001150:	f7ff fe1d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f7ff fdeb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800115a:	2028      	movs	r0, #40	@ 0x28
 800115c:	f7ff fe17 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8001160:	2029      	movs	r0, #41	@ 0x29
 8001162:	f7ff fe14 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001166:	20f1      	movs	r0, #241	@ 0xf1
 8001168:	f7ff fe11 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fe0e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001172:	20f1      	movs	r0, #241	@ 0xf1
 8001174:	f7ff fe0b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe08 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800117e:	2007      	movs	r0, #7
 8001180:	f7ff fe05 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8001184:	2066      	movs	r0, #102	@ 0x66
 8001186:	f7ff fdd3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800118a:	203c      	movs	r0, #60	@ 0x3c
 800118c:	f7ff fdff 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fdfc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8001196:	20cd      	movs	r0, #205	@ 0xcd
 8001198:	f7ff fdf9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800119c:	2067      	movs	r0, #103	@ 0x67
 800119e:	f7ff fdf6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a2:	2045      	movs	r0, #69	@ 0x45
 80011a4:	f7ff fdf3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a8:	2045      	movs	r0, #69	@ 0x45
 80011aa:	f7ff fdf0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fded 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fdea 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fde7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fde4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80011c6:	2067      	movs	r0, #103	@ 0x67
 80011c8:	f7ff fdb2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdde 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 80011d2:	203c      	movs	r0, #60	@ 0x3c
 80011d4:	f7ff fddb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fdd8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fdd5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fdd2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fdcf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 80011f0:	2054      	movs	r0, #84	@ 0x54
 80011f2:	f7ff fdcc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff fdc9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f7ff fdc6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8001202:	2098      	movs	r0, #152	@ 0x98
 8001204:	f7ff fdc3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8001208:	2074      	movs	r0, #116	@ 0x74
 800120a:	f7ff fd91 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff fdbd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8001214:	2085      	movs	r0, #133	@ 0x85
 8001216:	f7ff fdba 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	f7ff fdb7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdb4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fdb1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800122c:	204e      	movs	r0, #78	@ 0x4e
 800122e:	f7ff fdae 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fdab 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8001238:	2098      	movs	r0, #152	@ 0x98
 800123a:	f7ff fd79 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800123e:	203e      	movs	r0, #62	@ 0x3e
 8001240:	f7ff fda5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fda2 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800124a:	2035      	movs	r0, #53	@ 0x35
 800124c:	f7ff fd70 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001250:	2021      	movs	r0, #33	@ 0x21
 8001252:	f7ff fd6d 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fd6a 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(120);
 800125c:	2078      	movs	r0, #120	@ 0x78
 800125e:	f001 f9af 	bl	80025c0 <HAL_Delay>
    GC9A01_write_command(0x29);
 8001262:	2029      	movs	r0, #41	@ 0x29
 8001264:	f7ff fd64 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(20);
 8001268:	2014      	movs	r0, #20
 800126a:	f001 f9a9 	bl	80025c0 <HAL_Delay>
    
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <GC9A01_spi_tx+0x30>)
 800128a:	f009 f939 	bl	800a500 <HAL_SPI_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001294:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
		return;

}
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	240016b8 	.word	0x240016b8
 80012a8:	24000038 	.word	0x24000038

080012ac <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, AVI_CONTEXT* AVI_Handel, uint32_t DestAddress)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]


  startSourceAddress = AVI_Handel->pVideoBuffer;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012bc:	4a18      	ldr	r2, [pc, #96]	@ (8001320 <JPEG_DecodePolling+0x74>)
 80012be:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <JPEG_DecodePolling+0x78>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  pVideoBuffer = AVI_Handel->pVideoBuffer;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ca:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <JPEG_DecodePolling+0x7c>)
 80012cc:	6013      	str	r3, [r2, #0]

  // Read from JPG file and fill the input buffer
  memcpy(JPEG_InBuffer.DataBuffer, AVI_Handel->pVideoBuffer, CHUNK_SIZE_IN*sizeof(uint8_t));
 80012ce:	4b17      	ldr	r3, [pc, #92]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012da:	4619      	mov	r1, r3
 80012dc:	f00e fa80 	bl	800f7e0 <memcpy>

  // Increment the input buffer pointer
  pVideoBuffer += CHUNK_SIZE_IN;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <JPEG_DecodePolling+0x7c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <JPEG_DecodePolling+0x7c>)
 80012ea:	6013      	str	r3, [r2, #0]

  // Update the file Offset
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <JPEG_DecodePolling+0x84>)
 80012f2:	6013      	str	r3, [r2, #0]

  //Start JPEG decoding with polling (Blocking) method
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT,HAL_MAX_DELAY);
 80012f4:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <JPEG_DecodePolling+0x78>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4603      	mov	r3, r0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f002 f998 	bl	8003646 <HAL_JPEG_Decode>

  return 0;
 8001316:	2300      	movs	r3, #0

}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	24001048 	.word	0x24001048
 8001324:	24001044 	.word	0x24001044
 8001328:	2400104c 	.word	0x2400104c
 800132c:	24000008 	.word	0x24000008
 8001330:	2400103c 	.word	0x2400103c

08001334 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]

  if(NbDecodedData != JPEG_InBuffer.DataBufferSize)
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_JPEG_GetDataCallback+0x6c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d00f      	beq.n	8001380 <HAL_JPEG_GetDataCallback+0x34>
  {

    Inputfile_Offset = Inputfile_Offset - JPEG_InBuffer.DataBufferSize + NbDecodedData;
 8001360:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <HAL_JPEG_GetDataCallback+0x70>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_JPEG_GetDataCallback+0x6c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	1ad2      	subs	r2, r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <HAL_JPEG_GetDataCallback+0x70>)
 8001370:	6013      	str	r3, [r2, #0]
    pVideoBuffer = ( startSourceAddress + Inputfile_Offset );
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_JPEG_GetDataCallback+0x74>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_JPEG_GetDataCallback+0x70>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <HAL_JPEG_GetDataCallback+0x78>)
 800137e:	6013      	str	r3, [r2, #0]

  }

  // Read from JPG file and fill the input buffer
  memcpy(JPEG_InBuffer.DataBuffer, pVideoBuffer, CHUNK_SIZE_IN*sizeof(uint8_t));
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <HAL_JPEG_GetDataCallback+0x6c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <HAL_JPEG_GetDataCallback+0x78>)
 8001386:	6811      	ldr	r1, [r2, #0]
 8001388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800138c:	4618      	mov	r0, r3
 800138e:	f00e fa27 	bl	800f7e0 <memcpy>

  Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_JPEG_GetDataCallback+0x6c>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_JPEG_GetDataCallback+0x70>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_JPEG_GetDataCallback+0x70>)
 800139e:	6013      	str	r3, [r2, #0]
  HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_JPEG_GetDataCallback+0x6c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_JPEG_GetDataCallback+0x6c>)
 80013a6:	6852      	ldr	r2, [r2, #4]
 80013a8:	4619      	mov	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f002 fa2b 	bl	8003806 <HAL_JPEG_ConfigInputBuffer>

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24000008 	.word	0x24000008
 80013bc:	2400103c 	.word	0x2400103c
 80013c0:	24001048 	.word	0x24001048
 80013c4:	2400104c 	.word	0x2400104c

080013c8 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/
  FrameBufferAddress += OutDataLength;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_JPEG_DataReadyCallback+0x30>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <HAL_JPEG_DataReadyCallback+0x30>)
 80013de:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT);
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <HAL_JPEG_DataReadyCallback+0x30>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013e8:	4619      	mov	r1, r3
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f002 fa1d 	bl	800382a <HAL_JPEG_ConfigOutputBuffer>

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	24001044 	.word	0x24001044

080013fc <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  Jpeg_Decoding_End = 1;
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	24001040 	.word	0x24001040

0800141c <lcd_init>:




void lcd_init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8001420:	f000 f99c 	bl	800175c <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 8001424:	f00e f816 	bl	800f454 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8001428:	f7ff fcdf 	bl	8000dea <GC9A01_init>

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <lcd_process>:


void lcd_process(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	//jpeg_demo();

	mjpeg_demo();
 8001434:	f000 f842 	bl	80014bc <mjpeg_demo>

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	80fb      	strh	r3, [r7, #6]
 800144e:	4603      	mov	r3, r0
 8001450:	80bb      	strh	r3, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e022      	b.n	80014a6 <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	e016      	b.n	8001494 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	429a      	cmp	r2, r3
 800146c:	d108      	bne.n	8001480 <lcd_draw+0x44>
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	d104      	bne.n	8001480 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8001476:	2102      	movs	r1, #2
 8001478:	6a38      	ldr	r0, [r7, #32]
 800147a:	f7ff fc96 	bl	8000daa <GC9A01_write>
 800147e:	e003      	b.n	8001488 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001480:	2102      	movs	r1, #2
 8001482:	6a38      	ldr	r0, [r7, #32]
 8001484:	f7ff fca1 	bl	8000dca <GC9A01_write_continue>

			}

			data += 2;
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	3302      	adds	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	3301      	adds	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	883a      	ldrh	r2, [r7, #0]
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbe2      	blt.n	8001466 <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4413      	add	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dbd6      	blt.n	8001460 <lcd_draw+0x24>

		}

	}

}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <mjpeg_demo>:
uint32_t startTime = 0;

#ifdef MJPEG_ON

void mjpeg_demo(void)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	f5ad 2dd8 	sub.w	sp, sp, #442368	@ 0x6c000
 80014c2:	f2ad 6d24 	subw	sp, sp, #1572	@ 0x624
 80014c6:	af02      	add	r7, sp, #8

	uint8_t JPEG_OutputBuffer_0[MAX_BUFFER_SIZE]; 					// RAW buffer 0
	//uint8_t JPEG_OutputBuffer_1[MAX_BUFFER_SIZE]; 				// RAW buffer 1
	uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer

	uint32_t jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80014c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001704 <mjpeg_demo+0x248>)
 80014ca:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 80014ce:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80014d2:	443b      	add	r3, r7
 80014d4:	4a8c      	ldr	r2, [pc, #560]	@ (8001708 <mjpeg_demo+0x24c>)
 80014d6:	443a      	add	r2, r7
 80014d8:	6013      	str	r3, [r2, #0]
	uint32_t FrameType = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	4a8b      	ldr	r2, [pc, #556]	@ (800170c <mjpeg_demo+0x250>)
 80014de:	443a      	add	r2, r7
 80014e0:	6013      	str	r3, [r2, #0]

	// Open the MJPEG avi file with read access
    if(f_open(&file, FILE_NAME, FA_READ) == FR_OK)
 80014e2:	2201      	movs	r2, #1
 80014e4:	498a      	ldr	r1, [pc, #552]	@ (8001710 <mjpeg_demo+0x254>)
 80014e6:	488b      	ldr	r0, [pc, #556]	@ (8001714 <mjpeg_demo+0x258>)
 80014e8:	f00d f962 	bl	800e7b0 <f_open>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 8101 	bne.w	80016f6 <mjpeg_demo+0x23a>
    {

    	isfirstFrame = 1; // First frame flag
 80014f4:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <mjpeg_demo+0x25c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
    	FrameRate = 0;
 80014fa:	4b88      	ldr	r3, [pc, #544]	@ (800171c <mjpeg_demo+0x260>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]

    	// Parse the AVI file Header
    	if(AVI_ParserInit(&AVI_Handel, &file, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001500:	4a87      	ldr	r2, [pc, #540]	@ (8001720 <mjpeg_demo+0x264>)
 8001502:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <mjpeg_demo+0x268>)
 8001504:	4413      	add	r3, r2
 8001506:	19da      	adds	r2, r3, r7
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4b84      	ldr	r3, [pc, #528]	@ (8001720 <mjpeg_demo+0x264>)
 800150e:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 8001512:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001516:	443b      	add	r3, r7
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800151e:	497d      	ldr	r1, [pc, #500]	@ (8001714 <mjpeg_demo+0x258>)
 8001520:	4881      	ldr	r0, [pc, #516]	@ (8001728 <mjpeg_demo+0x26c>)
 8001522:	f7ff fb03 	bl	8000b2c <AVI_ParserInit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <mjpeg_demo+0x74>
    		while(1);
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <mjpeg_demo+0x70>

    	// Get current tick to track the frame time
    	startTime = HAL_GetTick();
 8001530:	f001 f83a 	bl	80025a8 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a7d      	ldr	r2, [pc, #500]	@ (800172c <mjpeg_demo+0x270>)
 8001538:	6013      	str	r3, [r2, #0]

    	do
    	{

    		FrameType = AVI_GetFrame(&AVI_Handel, &file);
 800153a:	4976      	ldr	r1, [pc, #472]	@ (8001714 <mjpeg_demo+0x258>)
 800153c:	487a      	ldr	r0, [pc, #488]	@ (8001728 <mjpeg_demo+0x26c>)
 800153e:	f7ff fb35 	bl	8000bac <AVI_GetFrame>
 8001542:	4b72      	ldr	r3, [pc, #456]	@ (800170c <mjpeg_demo+0x250>)
 8001544:	443b      	add	r3, r7
 8001546:	6018      	str	r0, [r3, #0]

    		if(FrameType == AVI_VIDEO_FRAME)
 8001548:	4b70      	ldr	r3, [pc, #448]	@ (800170c <mjpeg_demo+0x250>)
 800154a:	443b      	add	r3, r7
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	f040 8096 	bne.w	8001680 <mjpeg_demo+0x1c4>
    		{

    			AVI_Handel.CurrentImage++;
 8001554:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <mjpeg_demo+0x26c>)
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	3301      	adds	r3, #1
 800155a:	4a73      	ldr	r2, [pc, #460]	@ (8001728 <mjpeg_demo+0x26c>)
 800155c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    			// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
    			JPEG_DecodePolling(&hjpeg, &AVI_Handel, (uint32_t)jpegOutDataAdreess);
 800155e:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <mjpeg_demo+0x24c>)
 8001560:	443b      	add	r3, r7
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4970      	ldr	r1, [pc, #448]	@ (8001728 <mjpeg_demo+0x26c>)
 8001566:	4872      	ldr	r0, [pc, #456]	@ (8001730 <mjpeg_demo+0x274>)
 8001568:	f7ff fea0 	bl	80012ac <JPEG_DecodePolling>

    			// Wait till end of JPEG decoding
    			while(Jpeg_Decoding_End == 0);
 800156c:	bf00      	nop
 800156e:	4b71      	ldr	r3, [pc, #452]	@ (8001734 <mjpeg_demo+0x278>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0fb      	beq.n	800156e <mjpeg_demo+0xb2>

    			if(isfirstFrame == 1)
 8001576:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <mjpeg_demo+0x25c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d111      	bne.n	80015a2 <mjpeg_demo+0xe6>
    			{

    				// First time

    				isfirstFrame = 0;
 800157e:	4b66      	ldr	r3, [pc, #408]	@ (8001718 <mjpeg_demo+0x25c>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]

    				// Get JPEG Info
    				HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8001584:	496c      	ldr	r1, [pc, #432]	@ (8001738 <mjpeg_demo+0x27c>)
 8001586:	486a      	ldr	r0, [pc, #424]	@ (8001730 <mjpeg_demo+0x274>)
 8001588:	f001 ffc8 	bl	800351c <HAL_JPEG_GetInfo>

    				// Initialize the DMA2D
    				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <mjpeg_demo+0x27c>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	b29b      	uxth	r3, r3
 8001592:	4a69      	ldr	r2, [pc, #420]	@ (8001738 <mjpeg_demo+0x27c>)
 8001594:	6892      	ldr	r2, [r2, #8]
 8001596:	b291      	uxth	r1, r2
 8001598:	4a67      	ldr	r2, [pc, #412]	@ (8001738 <mjpeg_demo+0x27c>)
 800159a:	6852      	ldr	r2, [r2, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f961 	bl	8001864 <DMA2D_Init>

    			}


    			// Copy the Decoded frame to the display frame buffer using the DMA2D
    			DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)DECODED_OutputBuffer, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80015a2:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <mjpeg_demo+0x24c>)
 80015a4:	443b      	add	r3, r7
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	4b63      	ldr	r3, [pc, #396]	@ (8001738 <mjpeg_demo+0x27c>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b62      	ldr	r3, [pc, #392]	@ (8001738 <mjpeg_demo+0x27c>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4961      	ldr	r1, [pc, #388]	@ (800173c <mjpeg_demo+0x280>)
 80015b6:	f501 21d8 	add.w	r1, r1, #442368	@ 0x6c000
 80015ba:	f501 61c3 	add.w	r1, r1, #1560	@ 0x618
 80015be:	4439      	add	r1, r7
 80015c0:	f000 f9cc 	bl	800195c <DMA2D_CopyBuffer>

    			// Change frame buffer
    			//jpegOutDataAdreess = (jpegOutDataAdreess == (uint32_t)JPEG_OutputBuffer_0) ? (uint32_t)JPEG_OutputBuffer_1 : (uint32_t)JPEG_OutputBuffer_0;
    			jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80015c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001704 <mjpeg_demo+0x248>)
 80015c6:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 80015ca:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80015ce:	443b      	add	r3, r7
 80015d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001708 <mjpeg_demo+0x24c>)
 80015d2:	443a      	add	r2, r7
 80015d4:	6013      	str	r3, [r2, #0]

//
    		    uint16_t width = JPEG_Info.ImageWidth;
 80015d6:	4b58      	ldr	r3, [pc, #352]	@ (8001738 <mjpeg_demo+0x27c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4a59      	ldr	r2, [pc, #356]	@ (8001740 <mjpeg_demo+0x284>)
 80015dc:	443a      	add	r2, r7
 80015de:	8013      	strh	r3, [r2, #0]
    			uint16_t height = JPEG_Info.ImageHeight;
 80015e0:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <mjpeg_demo+0x27c>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a57      	ldr	r2, [pc, #348]	@ (8001744 <mjpeg_demo+0x288>)
 80015e6:	443a      	add	r2, r7
 80015e8:	8013      	strh	r3, [r2, #0]

    		    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 80015ea:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <mjpeg_demo+0x284>)
 80015ec:	443b      	add	r3, r7
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da00      	bge.n	80015fa <mjpeg_demo+0x13e>
 80015f8:	3301      	adds	r3, #1
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <mjpeg_demo+0x28c>)
 80015fe:	443a      	add	r2, r7
 8001600:	8013      	strh	r3, [r2, #0]
    		    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 8001602:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <mjpeg_demo+0x288>)
 8001604:	443b      	add	r3, r7
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800160c:	2b00      	cmp	r3, #0
 800160e:	da00      	bge.n	8001612 <mjpeg_demo+0x156>
 8001610:	3301      	adds	r3, #1
 8001612:	105b      	asrs	r3, r3, #1
 8001614:	4a4d      	ldr	r2, [pc, #308]	@ (800174c <mjpeg_demo+0x290>)
 8001616:	443a      	add	r2, r7
 8001618:	8013      	strh	r3, [r2, #0]

    		    doubleFormat pOut;
    		    pOut.u8Arr = DECODED_OutputBuffer;
 800161a:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800161e:	f2a3 6214 	subw	r2, r3, #1556	@ 0x614
 8001622:	4b46      	ldr	r3, [pc, #280]	@ (800173c <mjpeg_demo+0x280>)
 8001624:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 8001628:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800162c:	443b      	add	r3, r7
 800162e:	6013      	str	r3, [r2, #0]

    		    depth24To16(&pOut, width*height, 3);
 8001630:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <mjpeg_demo+0x284>)
 8001632:	443b      	add	r3, r7
 8001634:	881a      	ldrh	r2, [r3, #0]
 8001636:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <mjpeg_demo+0x288>)
 8001638:	443b      	add	r3, r7
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	fb12 f303 	smulbb	r3, r2, r3
 8001640:	b299      	uxth	r1, r3
 8001642:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <mjpeg_demo+0x294>)
 8001644:	f503 23d8 	add.w	r3, r3, #442368	@ 0x6c000
 8001648:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800164c:	443b      	add	r3, r7
 800164e:	2203      	movs	r2, #3
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f899 	bl	8001788 <depth24To16>

    		    // Display the image
    		    lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 8001656:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800165a:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a38      	ldr	r2, [pc, #224]	@ (8001744 <mjpeg_demo+0x288>)
 8001662:	443a      	add	r2, r7
 8001664:	8814      	ldrh	r4, [r2, #0]
 8001666:	4a36      	ldr	r2, [pc, #216]	@ (8001740 <mjpeg_demo+0x284>)
 8001668:	443a      	add	r2, r7
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	4937      	ldr	r1, [pc, #220]	@ (800174c <mjpeg_demo+0x290>)
 800166e:	4439      	add	r1, r7
 8001670:	8809      	ldrh	r1, [r1, #0]
 8001672:	4835      	ldr	r0, [pc, #212]	@ (8001748 <mjpeg_demo+0x28c>)
 8001674:	4438      	add	r0, r7
 8001676:	8800      	ldrh	r0, [r0, #0]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4623      	mov	r3, r4
 800167c:	f7ff fede 	bl	800143c <lcd_draw>
    		}

#ifdef USE_FRAMERATE_REGULATION

              // Regulate the frame rate to the video native frame rate by inserting delays
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 8001680:	f000 ff92 	bl	80025a8 <HAL_GetTick>
 8001684:	4603      	mov	r3, r0
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <mjpeg_demo+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <mjpeg_demo+0x260>)
 8001698:	701a      	strb	r2, [r3, #0]

              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <mjpeg_demo+0x260>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <mjpeg_demo+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001754 <mjpeg_demo+0x298>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <mjpeg_demo+0x26c>)
 80016ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4299      	cmp	r1, r3
 80016b6:	d20f      	bcs.n	80016d8 <mjpeg_demo+0x21c>
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <mjpeg_demo+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a25      	ldr	r2, [pc, #148]	@ (8001754 <mjpeg_demo+0x298>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <mjpeg_demo+0x26c>)
 80016c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4a13      	ldr	r2, [pc, #76]	@ (800171c <mjpeg_demo+0x260>)
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 ff74 	bl	80025c0 <HAL_Delay>

#endif /* USE_FRAMERATE_REGULATION */

    	}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <mjpeg_demo+0x26c>)
 80016da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <mjpeg_demo+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f4ff af2a 	bcc.w	800153a <mjpeg_demo+0x7e>

    	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 80016e6:	2132      	movs	r1, #50	@ 0x32
 80016e8:	481b      	ldr	r0, [pc, #108]	@ (8001758 <mjpeg_demo+0x29c>)
 80016ea:	f001 f938 	bl	800295e <HAL_DMA2D_PollForTransfer>


      f_close(&file);
 80016ee:	4809      	ldr	r0, [pc, #36]	@ (8001714 <mjpeg_demo+0x258>)
 80016f0:	f00d fbd5 	bl	800ee9e <f_close>

      while(1);

    }

}
 80016f4:	e000      	b.n	80016f8 <mjpeg_demo+0x23c>
      while(1);
 80016f6:	e7fe      	b.n	80016f6 <mjpeg_demo+0x23a>
}
 80016f8:	f507 27d8 	add.w	r7, r7, #442368	@ 0x6c000
 80016fc:	f207 671c 	addw	r7, r7, #1564	@ 0x61c
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	fffbdcf0 	.word	0xfffbdcf0
 8001708:	0006c614 	.word	0x0006c614
 800170c:	0006c610 	.word	0x0006c610
 8001710:	0800f83c 	.word	0x0800f83c
 8001714:	24001280 	.word	0x24001280
 8001718:	24000010 	.word	0x24000010
 800171c:	24001574 	.word	0x24001574
 8001720:	fffe7ff0 	.word	0xfffe7ff0
 8001724:	0006c618 	.word	0x0006c618
 8001728:	2400152c 	.word	0x2400152c
 800172c:	24001578 	.word	0x24001578
 8001730:	240015e4 	.word	0x240015e4
 8001734:	24001040 	.word	0x24001040
 8001738:	24001518 	.word	0x24001518
 800173c:	fff939f0 	.word	0xfff939f0
 8001740:	0006c60e 	.word	0x0006c60e
 8001744:	0006c60c 	.word	0x0006c60c
 8001748:	0006c60a 	.word	0x0006c60a
 800174c:	0006c608 	.word	0x0006c608
 8001750:	fff939ec 	.word	0xfff939ec
 8001754:	10624dd3 	.word	0x10624dd3
 8001758:	240014b0 	.word	0x240014b0

0800175c <sd_init>:


// SD

static void sd_init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8001760:	2201      	movs	r2, #1
 8001762:	4905      	ldr	r1, [pc, #20]	@ (8001778 <sd_init+0x1c>)
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <sd_init+0x20>)
 8001766:	f00c ffdd 	bl	800e724 <f_mount>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <sd_init+0x18>
    	sd_error_handler();
 8001770:	f000 f806 	bl	8001780 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	0800f848 	.word	0x0800f848
 800177c:	24001050 	.word	0x24001050

08001780 <sd_error_handler>:


static void sd_error_handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

	while(1);
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <sd_error_handler+0x4>

08001788 <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e054      	b.n	8001848 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	787a      	ldrb	r2, [r7, #1]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	fb01 f202 	mul.w	r2, r1, r2
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	68f9      	ldr	r1, [r7, #12]
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	3302      	adds	r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 80017d8:	7a7b      	ldrb	r3, [r7, #9]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <depth24To16+0xd8>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	7abb      	ldrb	r3, [r7, #10]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b219      	sxth	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	b28a      	uxth	r2, r1
 800180c:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29b      	uxth	r3, r3
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b219      	sxth	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	b28a      	uxth	r2, r1
 8001840:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	dba6      	blt.n	800179e <depth24To16+0x16>

	}

}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	fffff800 	.word	0xfffff800

08001864 <DMA2D_Init>:
  * @param  xSize: image width
  * @param  ysize: image Height
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	603a      	str	r2, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	460b      	mov	r3, r1
 8001872:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 8001874:	2302      	movs	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]


  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10d      	bne.n	800189e <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 8001882:	2302      	movs	r3, #2
 8001884:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d025      	beq.n	80018e0 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f1c3 0310 	rsb	r3, r3, #16
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	e020      	b.n	80018e0 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d014      	beq.n	80018e0 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f1c3 0308 	rsb	r3, r3, #8
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	e00f      	b.n	80018e0 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d10c      	bne.n	80018e0 <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 80018c6:	2301      	movs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f1c3 0310 	rsb	r3, r3, #16
 80018de:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <DMA2D_Init+0xf0>)
 80018e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018e6:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <DMA2D_Init+0xf0>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <DMA2D_Init+0xf0>)
 80018f8:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <DMA2D_Init+0xf0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <DMA2D_Init+0xf0>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <DMA2D_Init+0xf0>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <DMA2D_Init+0xf0>)
 800190e:	2200      	movs	r2, #0
 8001910:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <DMA2D_Init+0xf0>)
 8001914:	22ff      	movs	r2, #255	@ 0xff
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <DMA2D_Init+0xf0>)
 800191a:	220b      	movs	r2, #11
 800191c:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800191e:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <DMA2D_Init+0xf0>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001924:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <DMA2D_Init+0xf0>)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <DMA2D_Init+0xf0>)
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <DMA2D_Init+0xf0>)
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <DMA2D_Init+0xf0>)
 8001938:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <DMA2D_Init+0xf4>)
 800193a:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <DMA2D_Init+0xf0>)
 800193e:	f000 ff7f 	bl	8002840 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001942:	2101      	movs	r1, #1
 8001944:	4803      	ldr	r0, [pc, #12]	@ (8001954 <DMA2D_Init+0xf0>)
 8001946:	f001 fa03 	bl	8002d50 <HAL_DMA2D_ConfigLayer>

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240014b0 	.word	0x240014b0
 8001958:	52001000 	.word	0x52001000

0800195c <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t xsize, uint16_t ysize)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	4611      	mov	r1, r2
 8001968:	461a      	mov	r2, r3
 800196a:	460b      	mov	r3, r1
 800196c:	80fb      	strh	r3, [r7, #6]
 800196e:	4613      	mov	r3, r2
 8001970:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]


  uint16_t x =  ( (LCD_WIDTH - xsize) / 2 );
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800197c:	2b00      	cmp	r3, #0
 800197e:	da00      	bge.n	8001982 <DMA2D_CopyBuffer+0x26>
 8001980:	3301      	adds	r3, #1
 8001982:	105b      	asrs	r3, r3, #1
 8001984:	827b      	strh	r3, [r7, #18]
  uint16_t y = ( (LCD_HEIGHT - ysize) / 2 );
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800198c:	2b00      	cmp	r3, #0
 800198e:	da00      	bge.n	8001992 <DMA2D_CopyBuffer+0x36>
 8001990:	3301      	adds	r3, #1
 8001992:	105b      	asrs	r3, r3, #1
 8001994:	823b      	strh	r3, [r7, #16]

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 8001996:	8a3a      	ldrh	r2, [r7, #16]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	461a      	mov	r2, r3
 80019a2:	8a7b      	ldrh	r3, [r7, #18]
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	88fa      	ldrh	r2, [r7, #6]
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <DMA2D_CopyBuffer+0x78>)
 80019be:	f000 ffa3 	bl	8002908 <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80019c2:	2119      	movs	r1, #25
 80019c4:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <DMA2D_CopyBuffer+0x78>)
 80019c6:	f000 ffca 	bl	800295e <HAL_DMA2D_PollForTransfer>

}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	240014b0 	.word	0x240014b0

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80019de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019e2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80019e4:	bf00      	nop
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <main+0xb8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <main+0x24>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dcf4      	bgt.n	80019e6 <main+0xe>
  if ( timeout < 0 )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da01      	bge.n	8001a06 <main+0x2e>
  {
  Error_Handler();
 8001a02:	f000 fad3 	bl	8001fac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a06:	f000 fd49 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0a:	f000 f843 	bl	8001a94 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a0e:	f000 f8c5 	bl	8001b9c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001a12:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <main+0xb8>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a18:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <main+0xb8>)
 8001a1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <main+0xb8>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f001 fcc3 	bl	80033bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f001 fcd9 	bl	80033f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a42:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001a44:	bf00      	nop
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <main+0xb8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d104      	bne.n	8001a5c <main+0x84>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dcf4      	bgt.n	8001a46 <main+0x6e>
if ( timeout < 0 )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da01      	bge.n	8001a66 <main+0x8e>
{
Error_Handler();
 8001a62:	f000 faa3 	bl	8001fac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f000 f9db 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001a6a:	f000 f8c7 	bl	8001bfc <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8001a6e:	f000 f913 	bl	8001c98 <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 8001a72:	f000 f935 	bl	8001ce0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001a76:	f000 f987 	bl	8001d88 <MX_USART1_UART_Init>
  MX_JPEG_Init();
 8001a7a:	f000 f8f9 	bl	8001c70 <MX_JPEG_Init>
  MX_FATFS_Init();
 8001a7e:	f00a febd 	bl	800c7fc <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001a82:	f00b f90b 	bl	800cc9c <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001a86:	f7ff fcc9 	bl	800141c <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8001a8a:	f7ff fcd1 	bl	8001430 <lcd_process>
 8001a8e:	e7fc      	b.n	8001a8a <main+0xb2>
 8001a90:	58024400 	.word	0x58024400

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b09c      	sub	sp, #112	@ 0x70
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	224c      	movs	r2, #76	@ 0x4c
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00d fe70 	bl	800f788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2220      	movs	r2, #32
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f00d fe6a 	bl	800f788 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ab4:	2004      	movs	r0, #4
 8001ab6:	f003 f9b3 	bl	8004e20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <SystemClock_Config+0x100>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	4a34      	ldr	r2, [pc, #208]	@ (8001b94 <SystemClock_Config+0x100>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001aca:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <SystemClock_Config+0x100>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <SystemClock_Config+0x104>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b98 <SystemClock_Config+0x104>)
 8001ada:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <SystemClock_Config+0x104>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001aec:	bf00      	nop
 8001aee:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <SystemClock_Config+0x104>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001afa:	d1f8      	bne.n	8001aee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001afc:	230a      	movs	r3, #10
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b04:	2340      	movs	r3, #64	@ 0x40
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b14:	2304      	movs	r3, #4
 8001b16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b18:	230c      	movs	r3, #12
 8001b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 f9ca 	bl	8004ed4 <HAL_RCC_OscConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b46:	f000 fa31 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	233f      	movs	r3, #63	@ 0x3f
 8001b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b5a:	2340      	movs	r3, #64	@ 0x40
 8001b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b5e:	2340      	movs	r3, #64	@ 0x40
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b68:	2340      	movs	r3, #64	@ 0x40
 8001b6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fe09 	bl	8005788 <HAL_RCC_ClockConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001b7c:	f000 fa16 	bl	8001fac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b80:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	f003 ffb4 	bl	8005af4 <HAL_RCC_MCOConfig>
}
 8001b8c:	bf00      	nop
 8001b8e:	3770      	adds	r7, #112	@ 0x70
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58000400 	.word	0x58000400
 8001b98:	58024800 	.word	0x58024800

08001b9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0b2      	sub	sp, #200	@ 0xc8
 8001ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	22c8      	movs	r2, #200	@ 0xc8
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00d fded 	bl	800f788 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001bbe:	2309      	movs	r3, #9
 8001bc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bce:	23c0      	movs	r3, #192	@ 0xc0
 8001bd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001bd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be2:	463b      	mov	r3, r7
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 f9c5 	bl	8005f74 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001bf0:	f000 f9dc 	bl	8001fac <Error_Handler>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	37c8      	adds	r7, #200	@ 0xc8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c02:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <MX_DMA2D_Init+0x70>)
 8001c04:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c42:	4809      	ldr	r0, [pc, #36]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c44:	f000 fdfc 	bl	8002840 <HAL_DMA2D_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c4e:	f000 f9ad 	bl	8001fac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c52:	2101      	movs	r1, #1
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <MX_DMA2D_Init+0x6c>)
 8001c56:	f001 f87b 	bl	8002d50 <HAL_DMA2D_ConfigLayer>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001c60:	f000 f9a4 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2400157c 	.word	0x2400157c
 8001c6c:	52001000 	.word	0x52001000

08001c70 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_JPEG_Init+0x20>)
 8001c76:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <MX_JPEG_Init+0x24>)
 8001c78:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_JPEG_Init+0x20>)
 8001c7c:	f001 fbcc 	bl	8003418 <HAL_JPEG_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001c86:	f000 f991 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	240015e4 	.word	0x240015e4
 8001c94:	52003000 	.word	0x52003000

08001c98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <MX_SDMMC1_SD_Init+0x44>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001cb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cb4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_SDMMC1_SD_Init+0x40>)
 8001cc4:	f006 fe94 	bl	80089f0 <HAL_SD_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001cce:	f000 f96d 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2400163c 	.word	0x2400163c
 8001cdc:	52007000 	.word	0x52007000

08001ce0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001ce6:	4a27      	ldr	r2, [pc, #156]	@ (8001d84 <MX_SPI5_Init+0xa4>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001cec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d10:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	@ (8001d80 <MX_SPI5_Init+0xa0>)
 8001d6e:	f008 faa3 	bl	800a2b8 <HAL_SPI_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001d78:	f000 f918 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	240016b8 	.word	0x240016b8
 8001d84:	40015000 	.word	0x40015000

08001d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d8c:	4b22      	ldr	r3, [pc, #136]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001d8e:	4a23      	ldr	r2, [pc, #140]	@ (8001e1c <MX_USART1_UART_Init+0x94>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd0:	4811      	ldr	r0, [pc, #68]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001dd2:	f008 fe6c 	bl	800aaae <HAL_UART_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ddc:	f000 f8e6 	bl	8001fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de0:	2100      	movs	r1, #0
 8001de2:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001de4:	f009 fe75 	bl	800bad2 <HAL_UARTEx_SetTxFifoThreshold>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001dee:	f000 f8dd 	bl	8001fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001df6:	f009 feaa 	bl	800bb4e <HAL_UARTEx_SetRxFifoThreshold>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e00:	f000 f8d4 	bl	8001fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <MX_USART1_UART_Init+0x90>)
 8001e06:	f009 fe2b 	bl	800ba60 <HAL_UARTEx_DisableFifoMode>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e10:	f000 f8cc 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	24001740 	.word	0x24001740
 8001e1c:	40011000 	.word	0x40011000

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	4b58      	ldr	r3, [pc, #352]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3c:	4a56      	ldr	r2, [pc, #344]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e46:	4b54      	ldr	r3, [pc, #336]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e54:	4b50      	ldr	r3, [pc, #320]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e64:	4b4c      	ldr	r3, [pc, #304]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b49      	ldr	r3, [pc, #292]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e78:	4a47      	ldr	r2, [pc, #284]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e82:	4b45      	ldr	r3, [pc, #276]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e90:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e96:	4a40      	ldr	r2, [pc, #256]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eae:	4b3a      	ldr	r3, [pc, #232]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb4:	4a38      	ldr	r2, [pc, #224]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ebe:	4b36      	ldr	r3, [pc, #216]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ecc:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed2:	4a31      	ldr	r2, [pc, #196]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001ed4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001edc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001eea:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef0:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efa:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <MX_GPIO_Init+0x178>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4823      	ldr	r0, [pc, #140]	@ (8001f9c <MX_GPIO_Init+0x17c>)
 8001f0e:	f001 fa3b 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2161      	movs	r1, #97	@ 0x61
 8001f16:	4822      	ldr	r0, [pc, #136]	@ (8001fa0 <MX_GPIO_Init+0x180>)
 8001f18:	f001 fa36 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	481c      	ldr	r0, [pc, #112]	@ (8001fa4 <MX_GPIO_Init+0x184>)
 8001f32:	f001 f861 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4815      	ldr	r0, [pc, #84]	@ (8001fa8 <MX_GPIO_Init+0x188>)
 8001f54:	f001 f850 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <MX_GPIO_Init+0x17c>)
 8001f70:	f001 f842 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001f74:	2361      	movs	r3, #97	@ 0x61
 8001f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_GPIO_Init+0x180>)
 8001f8c:	f001 f834 	bl	8002ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f90:	bf00      	nop
 8001f92:	3730      	adds	r7, #48	@ 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	58022800 	.word	0x58022800
 8001fa0:	58022400 	.word	0x58022400
 8001fa4:	58022000 	.word	0x58022000
 8001fa8:	58020000 	.word	0x58020000

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <Error_Handler+0x8>

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_MspInit+0x30>)
 8001fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc4:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_MspInit+0x30>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_MspInit+0x30>)
 8001fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58024400 	.word	0x58024400

08001fec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <HAL_DMA2D_MspInit+0x48>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d116      	bne.n	800202c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_DMA2D_MspInit+0x4c>)
 8002000:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002004:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <HAL_DMA2D_MspInit+0x4c>)
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_DMA2D_MspInit+0x4c>)
 8002010:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	205a      	movs	r0, #90	@ 0x5a
 8002022:	f000 fbd8 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002026:	205a      	movs	r0, #90	@ 0x5a
 8002028:	f000 fbef 	bl	800280a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	52001000 	.word	0x52001000
 8002038:	58024400 	.word	0x58024400

0800203c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <HAL_JPEG_MspInit+0x48>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d116      	bne.n	800207c <HAL_JPEG_MspInit+0x40>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_JPEG_MspInit+0x4c>)
 8002050:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002054:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_JPEG_MspInit+0x4c>)
 8002056:	f043 0320 	orr.w	r3, r3, #32
 800205a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_JPEG_MspInit+0x4c>)
 8002060:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2079      	movs	r0, #121	@ 0x79
 8002072:	f000 fbb0 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002076:	2079      	movs	r0, #121	@ 0x79
 8002078:	f000 fbc7 	bl	800280a <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	52003000 	.word	0x52003000
 8002088:	58024400 	.word	0x58024400

0800208c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0be      	sub	sp, #248	@ 0xf8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	22c8      	movs	r2, #200	@ 0xc8
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00d fb6b 	bl	800f788 <memset>
  if(hsd->Instance==SDMMC1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <HAL_SD_MspInit+0x11c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d171      	bne.n	80021a0 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 ff4f 	bl	8005f74 <HAL_RCCEx_PeriphCLKConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80020dc:	f7ff ff66 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020e0:	4b32      	ldr	r3, [pc, #200]	@ (80021ac <HAL_SD_MspInit+0x120>)
 80020e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020e6:	4a31      	ldr	r2, [pc, #196]	@ (80021ac <HAL_SD_MspInit+0x120>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020f0:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_SD_MspInit+0x120>)
 80020f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_SD_MspInit+0x120>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002104:	4a29      	ldr	r2, [pc, #164]	@ (80021ac <HAL_SD_MspInit+0x120>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210e:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <HAL_SD_MspInit+0x120>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_SD_MspInit+0x120>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002122:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_SD_MspInit+0x120>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_SD_MspInit+0x120>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 800213a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800213e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002154:	230c      	movs	r3, #12
 8002156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800215e:	4619      	mov	r1, r3
 8002160:	4813      	ldr	r0, [pc, #76]	@ (80021b0 <HAL_SD_MspInit+0x124>)
 8002162:	f000 ff49 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8002166:	2304      	movs	r3, #4
 8002168:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800217e:	230c      	movs	r3, #12
 8002180:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002188:	4619      	mov	r1, r3
 800218a:	480a      	ldr	r0, [pc, #40]	@ (80021b4 <HAL_SD_MspInit+0x128>)
 800218c:	f000 ff34 	bl	8002ff8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	2031      	movs	r0, #49	@ 0x31
 8002196:	f000 fb1e 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800219a:	2031      	movs	r0, #49	@ 0x31
 800219c:	f000 fb35 	bl	800280a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80021a0:	bf00      	nop
 80021a2:	37f8      	adds	r7, #248	@ 0xf8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	52007000 	.word	0x52007000
 80021ac:	58024400 	.word	0x58024400
 80021b0:	58020800 	.word	0x58020800
 80021b4:	58020c00 	.word	0x58020c00

080021b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0be      	sub	sp, #248	@ 0xf8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d0:	f107 0318 	add.w	r3, r7, #24
 80021d4:	22c8      	movs	r2, #200	@ 0xc8
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f00d fad5 	bl	800f788 <memset>
  if(hspi->Instance==SPI5)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a39      	ldr	r2, [pc, #228]	@ (80022c8 <HAL_SPI_MspInit+0x110>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d16a      	bne.n	80022be <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80021e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 feb8 	bl	8005f74 <HAL_RCCEx_PeriphCLKConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800220a:	f7ff fecf 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800220e:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 8002210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002214:	4a2d      	ldr	r2, [pc, #180]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 8002216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800221e:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 8002220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800222c:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 8002234:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800223c:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 800224c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002250:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <HAL_SPI_MspInit+0x114>)
 800225c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8002268:	2301      	movs	r3, #1
 800226a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002280:	2305      	movs	r3, #5
 8002282:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800228a:	4619      	mov	r1, r3
 800228c:	4810      	ldr	r0, [pc, #64]	@ (80022d0 <HAL_SPI_MspInit+0x118>)
 800228e:	f000 feb3 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002292:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022ac:	2305      	movs	r3, #5
 80022ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022b2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <HAL_SPI_MspInit+0x11c>)
 80022ba:	f000 fe9d 	bl	8002ff8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80022be:	bf00      	nop
 80022c0:	37f8      	adds	r7, #248	@ 0xf8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40015000 	.word	0x40015000
 80022cc:	58024400 	.word	0x58024400
 80022d0:	58022800 	.word	0x58022800
 80022d4:	58022400 	.word	0x58022400

080022d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0bc      	sub	sp, #240	@ 0xf0
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	22c8      	movs	r2, #200	@ 0xc8
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00d fa45 	bl	800f788 <memset>
  if(huart->Instance==USART1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	@ (80023a0 <HAL_UART_MspInit+0xc8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d146      	bne.n	8002396 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002308:	f04f 0201 	mov.w	r2, #1
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fe28 	bl	8005f74 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800232a:	f7ff fe3f 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <HAL_UART_MspInit+0xcc>)
 8002330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002334:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_UART_MspInit+0xcc>)
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_UART_MspInit+0xcc>)
 8002340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_UART_MspInit+0xcc>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <HAL_UART_MspInit+0xcc>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_UART_MspInit+0xcc>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800236a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800236e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002384:	2307      	movs	r3, #7
 8002386:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <HAL_UART_MspInit+0xd0>)
 8002392:	f000 fe31 	bl	8002ff8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002396:	bf00      	nop
 8002398:	37f0      	adds	r7, #240	@ 0xf0
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40011000 	.word	0x40011000
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58020000 	.word	0x58020000

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <NMI_Handler+0x4>

080023b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <MemManage_Handler+0x4>

080023c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002402:	f000 f8bd 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002410:	4802      	ldr	r0, [pc, #8]	@ (800241c <SDMMC1_IRQHandler+0x10>)
 8002412:	f006 fd5d 	bl	8008ed0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2400163c 	.word	0x2400163c

08002420 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <DMA2D_IRQHandler+0x10>)
 8002426:	f000 fb83 	bl	8002b30 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2400157c 	.word	0x2400157c

08002434 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <JPEG_IRQHandler+0x10>)
 800243a:	f001 fa12 	bl	8003862 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	240015e4 	.word	0x240015e4

08002448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800244c:	f7fe f8bc 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002476:	f00d f98f 	bl	800f798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7ff faad 	bl	80019d8 <main>
  bx  lr
 800247e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002480:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002484:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002488:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 800248c:	0800fbcc 	.word	0x0800fbcc
  ldr r2, =_sbss
 8002490:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8002494:	2400581c 	.word	0x2400581c

08002498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC3_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a2:	2003      	movs	r0, #3
 80024a4:	f000 f98c 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a8:	f003 fb8e 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_Init+0x68>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	4913      	ldr	r1, [pc, #76]	@ (8002508 <HAL_Init+0x6c>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_Init+0x68>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002508 <HAL_Init+0x6c>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_Init+0x70>)
 80024de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002510 <HAL_Init+0x74>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f814 	bl	8002514 <HAL_InitTick>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e002      	b.n	80024fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024f6:	f7ff fd5f 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	58024400 	.word	0x58024400
 8002508:	0800f890 	.word	0x0800f890
 800250c:	24000004 	.word	0x24000004
 8002510:	24000000 	.word	0x24000000

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800251c:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_InitTick+0x60>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e021      	b.n	800256c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002528:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <HAL_InitTick+0x64>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_InitTick+0x60>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f971 	bl	8002826 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f93b 	bl	80027d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	@ (800257c <HAL_InitTick+0x68>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	24000018 	.word	0x24000018
 8002578:	24000000 	.word	0x24000000
 800257c:	24000014 	.word	0x24000014

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	24000018 	.word	0x24000018
 80025a4:	240017d4 	.word	0x240017d4

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	240017d4 	.word	0x240017d4

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	24000018 	.word	0x24000018

08002608 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <HAL_GetREVID+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0c1b      	lsrs	r3, r3, #16
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	5c001000 	.word	0x5c001000

08002620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <__NVIC_SetPriorityGrouping+0x40>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <__NVIC_SetPriorityGrouping+0x40>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	05fa0000 	.word	0x05fa0000

08002668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4907      	ldr	r1, [pc, #28]	@ (80026bc <__NVIC_EnableIRQ+0x38>)
 800269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	@ (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	@ (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
         );
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800278c:	d301      	bcc.n	8002792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278e:	2301      	movs	r3, #1
 8002790:	e00f      	b.n	80027b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <SysTick_Config+0x40>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279a:	210f      	movs	r1, #15
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f7ff ff8e 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <SysTick_Config+0x40>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <SysTick_Config+0x40>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff29 	bl	8002620 <__NVIC_SetPriorityGrouping>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027e4:	f7ff ff40 	bl	8002668 <__NVIC_GetPriorityGrouping>
 80027e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7ff ff90 	bl	8002714 <NVIC_EncodePriority>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff5f 	bl	80026c0 <__NVIC_SetPriority>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff33 	bl	8002684 <__NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa4 	bl	800277c <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e04f      	b.n	80028f2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fbc0 	bl	8001fec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b20      	ldr	r3, [pc, #128]	@ (80028fc <HAL_DMA2D_Init+0xbc>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6851      	ldr	r1, [r2, #4]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	69d2      	ldr	r2, [r2, #28]
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002896:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <HAL_DMA2D_Init+0xc0>)
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6891      	ldr	r1, [r2, #8]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6992      	ldr	r2, [r2, #24]
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <HAL_DMA2D_Init+0xc4>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d1      	ldr	r1, [r2, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	430b      	orrs	r3, r1
 80028c0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	051a      	lsls	r2, r3, #20
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	055b      	lsls	r3, r3, #21
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	fff8ffbf 	.word	0xfff8ffbf
 8002900:	fffffef8 	.word	0xfffffef8
 8002904:	ffff0000 	.word	0xffff0000

08002908 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_DMA2D_Start+0x1c>
 8002920:	2302      	movs	r3, #2
 8002922:	e018      	b.n	8002956 <HAL_DMA2D_Start+0x4e>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fab4 	bl	8002eac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d056      	beq.n	8002a28 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800297a:	f7ff fe15 	bl	80025a8 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002980:	e04b      	b.n	8002a1a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002990:	2b00      	cmp	r3, #0
 8002992:	d023      	beq.n	80029dc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029a2:	f043 0202 	orr.w	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2221      	movs	r2, #33	@ 0x21
 80029c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2204      	movs	r2, #4
 80029cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0a5      	b.n	8002b28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d01a      	beq.n	8002a1a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029e4:	f7ff fde0 	bl	80025a8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d302      	bcc.n	80029fa <HAL_DMA2D_PollForTransfer+0x9c>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e086      	b.n	8002b28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ac      	beq.n	8002982 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d061      	beq.n	8002b0e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a4a:	f7ff fdad 	bl	80025a8 <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a50:	e056      	b.n	8002b00 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02e      	beq.n	8002ac2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a88:	f043 0202 	orr.w	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2229      	movs	r2, #41	@ 0x29
 8002aac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e032      	b.n	8002b28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d01a      	beq.n	8002b00 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7ff fd6d 	bl	80025a8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <HAL_DMA2D_PollForTransfer+0x182>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2203      	movs	r2, #3
 8002af0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e013      	b.n	8002b28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0a1      	beq.n	8002a52 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2212      	movs	r2, #18
 8002b14:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d026      	beq.n	8002ba0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d021      	beq.n	8002ba0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d026      	beq.n	8002bf8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d021      	beq.n	8002bf8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd0:	f043 0202 	orr.w	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d026      	beq.n	8002c50 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d021      	beq.n	8002c50 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2208      	movs	r2, #8
 8002c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2204      	movs	r2, #4
 8002c34:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c72:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f853 	bl	8002d28 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d024      	beq.n	8002cd6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01f      	beq.n	8002cd6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2202      	movs	r2, #2
 8002cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01f      	beq.n	8002d20 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01a      	beq.n	8002d20 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2210      	movs	r2, #16
 8002d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f80e 	bl	8002d3c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA2D_ConfigLayer+0x24>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e092      	b.n	8002e9a <HAL_DMA2D_ConfigLayer+0x14a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3328      	adds	r3, #40	@ 0x28
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002da8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002db4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <HAL_DMA2D_ConfigLayer+0x158>)
 8002db6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b0a      	cmp	r3, #10
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA2D_ConfigLayer+0x78>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d107      	bne.n	8002dd8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e005      	b.n	8002de4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d120      	bne.n	8002e2c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	ea02 0103 	and.w	r1, r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b0a      	cmp	r3, #10
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA2D_ConfigLayer+0xcc>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d135      	bne.n	8002e88 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e2a:	e02d      	b.n	8002e88 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b0b      	cmp	r3, #11
 8002e32:	d109      	bne.n	8002e48 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	049b      	lsls	r3, r3, #18
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002e46:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	ea02 0103 	and.w	r1, r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b0a      	cmp	r3, #10
 8002e70:	d003      	beq.n	8002e7a <HAL_DMA2D_ConfigLayer+0x12a>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	d106      	bne.n	8002e88 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e86:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	ff33000f 	.word	0xff33000f

08002eac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b08b      	sub	sp, #44	@ 0x2c
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	041a      	lsls	r2, r3, #16
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ee4:	d174      	bne.n	8002fd0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002eec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002ef4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002efc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d108      	bne.n	8002f1e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1c:	e053      	b.n	8002fc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d106      	bne.n	8002f34 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f32:	e048      	b.n	8002fc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d111      	bne.n	8002f60 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	0cdb      	lsrs	r3, r3, #19
 8002f40:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	0a9b      	lsrs	r3, r3, #10
 8002f46:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	08db      	lsrs	r3, r3, #3
 8002f4c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	02db      	lsls	r3, r3, #11
 8002f56:	4313      	orrs	r3, r2
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5e:	e032      	b.n	8002fc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d117      	bne.n	8002f98 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	0fdb      	lsrs	r3, r3, #31
 8002f6c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	0cdb      	lsrs	r3, r3, #19
 8002f72:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	0adb      	lsrs	r3, r3, #11
 8002f78:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	08db      	lsrs	r3, r3, #3
 8002f7e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	029b      	lsls	r3, r3, #10
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	03db      	lsls	r3, r3, #15
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f96:	e016      	b.n	8002fc6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	0d1b      	lsrs	r3, r3, #20
 8002fa2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	0b1b      	lsrs	r3, r3, #12
 8002fa8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	011a      	lsls	r2, r3, #4
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	031b      	lsls	r3, r3, #12
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002fce:	e00d      	b.n	8002fec <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fd8:	d104      	bne.n	8002fe4 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	e003      	b.n	8002fec <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	60da      	str	r2, [r3, #12]
}
 8002fec:	bf00      	nop
 8002fee:	372c      	adds	r7, #44	@ 0x2c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003006:	4b89      	ldr	r3, [pc, #548]	@ (800322c <HAL_GPIO_Init+0x234>)
 8003008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800300a:	e194      	b.n	8003336 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8186 	beq.w	8003330 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d005      	beq.n	800303c <HAL_GPIO_Init+0x44>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d130      	bne.n	800309e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003072:	2201      	movs	r2, #1
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0201 	and.w	r2, r3, #1
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d017      	beq.n	80030da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d123      	bne.n	800312e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	69b9      	ldr	r1, [r7, #24]
 800312a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0203 	and.w	r2, r3, #3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80e0 	beq.w	8003330 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003170:	4b2f      	ldr	r3, [pc, #188]	@ (8003230 <HAL_GPIO_Init+0x238>)
 8003172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003176:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <HAL_GPIO_Init+0x238>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <HAL_GPIO_Init+0x238>)
 8003182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a29      	ldr	r2, [pc, #164]	@ (8003234 <HAL_GPIO_Init+0x23c>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a20      	ldr	r2, [pc, #128]	@ (8003238 <HAL_GPIO_Init+0x240>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d052      	beq.n	8003260 <HAL_GPIO_Init+0x268>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <HAL_GPIO_Init+0x244>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d031      	beq.n	8003226 <HAL_GPIO_Init+0x22e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <HAL_GPIO_Init+0x248>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <HAL_GPIO_Init+0x22a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_GPIO_Init+0x24c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d025      	beq.n	800321e <HAL_GPIO_Init+0x226>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <HAL_GPIO_Init+0x250>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01f      	beq.n	800321a <HAL_GPIO_Init+0x222>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1b      	ldr	r2, [pc, #108]	@ (800324c <HAL_GPIO_Init+0x254>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_Init+0x21e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003250 <HAL_GPIO_Init+0x258>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_Init+0x21a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <HAL_GPIO_Init+0x25c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_Init+0x216>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a18      	ldr	r2, [pc, #96]	@ (8003258 <HAL_GPIO_Init+0x260>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x212>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a17      	ldr	r2, [pc, #92]	@ (800325c <HAL_GPIO_Init+0x264>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_Init+0x20e>
 8003202:	2309      	movs	r3, #9
 8003204:	e02d      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 8003206:	230a      	movs	r3, #10
 8003208:	e02b      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 800320a:	2308      	movs	r3, #8
 800320c:	e029      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 800320e:	2307      	movs	r3, #7
 8003210:	e027      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 8003212:	2306      	movs	r3, #6
 8003214:	e025      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 8003216:	2305      	movs	r3, #5
 8003218:	e023      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 800321a:	2304      	movs	r3, #4
 800321c:	e021      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 800321e:	2303      	movs	r3, #3
 8003220:	e01f      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 8003222:	2302      	movs	r3, #2
 8003224:	e01d      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 8003226:	2301      	movs	r3, #1
 8003228:	e01b      	b.n	8003262 <HAL_GPIO_Init+0x26a>
 800322a:	bf00      	nop
 800322c:	58000080 	.word	0x58000080
 8003230:	58024400 	.word	0x58024400
 8003234:	58000400 	.word	0x58000400
 8003238:	58020000 	.word	0x58020000
 800323c:	58020400 	.word	0x58020400
 8003240:	58020800 	.word	0x58020800
 8003244:	58020c00 	.word	0x58020c00
 8003248:	58021000 	.word	0x58021000
 800324c:	58021400 	.word	0x58021400
 8003250:	58021800 	.word	0x58021800
 8003254:	58021c00 	.word	0x58021c00
 8003258:	58022000 	.word	0x58022000
 800325c:	58022400 	.word	0x58022400
 8003260:	2300      	movs	r3, #0
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	f002 0203 	and.w	r2, r2, #3
 8003268:	0092      	lsls	r2, r2, #2
 800326a:	4093      	lsls	r3, r2
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003272:	4938      	ldr	r1, [pc, #224]	@ (8003354 <HAL_GPIO_Init+0x35c>)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3302      	adds	r3, #2
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3301      	adds	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	f47f ae63 	bne.w	800300c <HAL_GPIO_Init+0x14>
  }
}
 8003346:	bf00      	nop
 8003348:	bf00      	nop
 800334a:	3724      	adds	r7, #36	@ 0x24
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	58000400 	.word	0x58000400

08003358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e001      	b.n	800337a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033c4:	4a08      	ldr	r2, [pc, #32]	@ (80033e8 <HAL_HSEM_FastTake+0x2c>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3320      	adds	r3, #32
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	4a07      	ldr	r2, [pc, #28]	@ (80033ec <HAL_HSEM_FastTake+0x30>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	58026400 	.word	0x58026400
 80033ec:	80000300 	.word	0x80000300

080033f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80033fa:	4906      	ldr	r1, [pc, #24]	@ (8003414 <HAL_HSEM_Release+0x24>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	58026400 	.word	0x58026400

08003418 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e070      	b.n	800350c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fdfc 	bl	800203c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a19      	ldr	r2, [pc, #100]	@ (8003514 <HAL_JPEG_Init+0xfc>)
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a18      	ldr	r2, [pc, #96]	@ (8003518 <HAL_JPEG_Init+0x100>)
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fd01 	bl	8003ecc <JPEG_Set_HuffEnc_Mem>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e018      	b.n	800350c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e8:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0800fa80 	.word	0x0800fa80
 8003518:	0800fac0 	.word	0x0800fac0

0800351c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_JPEG_GetInfo+0x16>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e083      	b.n	800363e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d103      	bne.n	800354c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e017      	b.n	800357c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e00c      	b.n	800357c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d103      	bne.n	8003578 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2230      	movs	r2, #48	@ 0x30
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e001      	b.n	800357c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e060      	b.n	800363e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b29a      	uxth	r2, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b29a      	uxth	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b10      	cmp	r3, #16
 800359e:	d003      	beq.n	80035a8 <HAL_JPEG_GetInfo+0x8c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b30      	cmp	r3, #48	@ 0x30
 80035a6:	d140      	bne.n	800362a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d109      	bne.n	80035ec <HAL_JPEG_GetInfo+0xd0>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_JPEG_GetInfo+0xd0>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2202      	movs	r2, #2
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	e01d      	b.n	8003628 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_JPEG_GetInfo+0xea>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_JPEG_GetInfo+0xea>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	e010      	b.n	8003628 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d109      	bne.n	8003620 <HAL_JPEG_GetInfo+0x104>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_JPEG_GetInfo+0x104>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2201      	movs	r2, #1
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e003      	b.n	8003628 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003626:	e003      	b.n	8003630 <HAL_JPEG_GetInfo+0x114>
 8003628:	e002      	b.n	8003630 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f001 fb6f 	bl	8004d14 <JPEG_GetQuality>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_JPEG_Decode+0x20>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_JPEG_Decode+0x20>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e071      	b.n	800374e <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_JPEG_Decode+0x32>
 8003674:	2302      	movs	r3, #2
 8003676:	e06a      	b.n	800374e <HAL_JPEG_Decode+0x108>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8003680:	f7fe ff92 	bl	80025a8 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d158      	bne.n	8003744 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2204      	movs	r2, #4
 8003696:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0206 	orr.w	r2, r3, #6
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f023 0203 	bic.w	r2, r3, #3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fe76 	bl	80043d0 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80036e4:	e01e      	b.n	8003724 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d01a      	beq.n	8003724 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036ee:	f7fe ff5b 	bl	80025a8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <HAL_JPEG_Decode+0xbe>
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10f      	bne.n	8003724 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	f043 0208 	orr.w	r2, r3, #8
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e014      	b.n	800374e <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fec7 	bl	80044b8 <JPEG_Process>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0da      	beq.n	80036e6 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e004      	b.n	800374e <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 800374c:	2302      	movs	r3, #2
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d116      	bne.n	800379e <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d033      	beq.n	80037f8 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	@ 0x54
 800379c:	e02c      	b.n	80037f8 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d126      	bne.n	80037f8 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f043 0306 	orr.w	r3, r3, #6
 80037c6:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80037e4:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	400a      	ands	r2, r1
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3b03      	subs	r3, #3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d813      	bhi.n	80038a0 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d103      	bne.n	800388c <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fe17 	bl	80044b8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800388a:	e00b      	b.n	80038a4 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d105      	bne.n	80038a4 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f8bc 	bl	8004a16 <JPEG_DMA_ContinueProcess>
      break;
 800389e:	e001      	b.n	80038a4 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_JPEG_IRQHandler+0x44>
      break;
 80038a4:	bf00      	nop
  }
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b08b      	sub	sp, #44	@ 0x2c
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	e020      	b.n	8003908 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	4413      	add	r3, r2
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038da:	d90f      	bls.n	80038fc <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e055      	b.n	800398c <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	440b      	add	r3, r1
 80038ea:	3201      	adds	r2, #1
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
      p++;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	3301      	adds	r3, #1
 80038f4:	623b      	str	r3, [r7, #32]
      i--;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	3b01      	subs	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3301      	adds	r3, #1
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b0f      	cmp	r3, #15
 800390c:	d9db      	bls.n	80038c6 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	4413      	add	r3, r2
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	617b      	str	r3, [r7, #20]
  p = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800392c:	e027      	b.n	800397e <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	601a      	str	r2, [r3, #0]
      p++;
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	3301      	adds	r3, #1
 800393e:	623b      	str	r3, [r7, #32]
      code++;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	3301      	adds	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4293      	cmp	r3, r2
 8003954:	d0eb      	beq.n	800392e <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b1f      	cmp	r3, #31
 800395a:	d901      	bls.n	8003960 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e015      	b.n	800398c <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8003960:	2201      	movs	r2, #1
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	d301      	bcc.n	8003972 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e00c      	b.n	800398c <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	61bb      	str	r3, [r7, #24]
    si++;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3301      	adds	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1dd      	bne.n	8003946 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	372c      	adds	r7, #44	@ 0x2c
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800399e:	af00      	add	r7, sp, #0
 80039a0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039a4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039a8:	6018      	str	r0, [r3, #0]
 80039aa:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039ae:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80039b2:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80039b4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039b8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	f107 020c 	add.w	r2, r7, #12
 80039c6:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80039ca:	f7ff ff70 	bl	80038ae <JPEG_Bits_To_SizeCodes>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80039d4:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80039dc:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80039e0:	e075      	b.n	8003ace <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80039e8:	e067      	b.n	8003aba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80039ea:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039ee:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80039f8:	4413      	add	r3, r2
 80039fa:	3310      	adds	r3, #16
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8003a02:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8003a0a:	23a0      	movs	r3, #160	@ 0xa0
 8003a0c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a10:	e021      	b.n	8003a56 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8003a12:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a16:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a18:	d103      	bne.n	8003a22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8003a1a:	23a1      	movs	r3, #161	@ 0xa1
 8003a1c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a20:	e019      	b.n	8003a56 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8003a22:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8003a30:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8003a3c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b01      	subs	r3, #1
 8003a52:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8003a56:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a5a:	2ba1      	cmp	r3, #161	@ 0xa1
 8003a5c:	d901      	bls.n	8003a62 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e035      	b.n	8003ace <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003a62:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a66:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003a6a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a72:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a76:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a80:	3328      	adds	r3, #40	@ 0x28
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003a88:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a8c:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003a90:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2d9      	uxtb	r1, r3
 8003a9c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003aa0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003aaa:	4413      	add	r3, r2
 8003aac:	460a      	mov	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]
      k++;
 8003ab0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8003aba:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003abe:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d38e      	bcc.n	80039ea <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003ae4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003ae8:	6018      	str	r0, [r3, #0]
 8003aea:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003aee:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003af2:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003af4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003af8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003b02:	f107 0208 	add.w	r2, r7, #8
 8003b06:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8003b0a:	f7ff fed0 	bl	80038ae <JPEG_Bits_To_SizeCodes>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8003b14:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003b1c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b20:	e048      	b.n	8003bb4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8003b28:	e03d      	b.n	8003ba6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8003b2a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b2e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b38:	4413      	add	r3, r2
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8003b42:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b46:	2b0b      	cmp	r3, #11
 8003b48:	d901      	bls.n	8003b4e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e032      	b.n	8003bb4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003b4e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b52:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8003b56:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003b5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b5e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b62:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003b74:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b78:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003b7c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b2d9      	uxtb	r1, r3
 8003b88:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b8c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b96:	4413      	add	r3, r2
 8003b98:	460a      	mov	r2, r1
 8003b9a:	701a      	strb	r2, [r3, #0]
      k++;
 8003b9c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8003ba6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003baa:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3bb      	bcc.n	8003b2a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b09a      	sub	sp, #104	@ 0x68
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d106      	bne.n	8003be6 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003be0:	3318      	adds	r3, #24
 8003be2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003be4:	e00f      	b.n	8003c06 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d106      	bne.n	8003c02 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c00:	e001      	b.n	8003c06 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e059      	b.n	8003cba <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d055      	beq.n	8003cb8 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f7ff ff60 	bl	8003ad8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8003c26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c2a:	e046      	b.n	8003cba <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8003c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c32:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c36:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003c38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c40:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c44:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8003c46:	230c      	movs	r3, #12
 8003c48:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8003c4a:	e032      	b.n	8003cb2 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8003c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c54:	3b04      	subs	r3, #4
 8003c56:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003c58:	f107 0214 	add.w	r2, r7, #20
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	3368      	adds	r3, #104	@ 0x68
 8003c70:	443b      	add	r3, r7
 8003c72:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003c82:	f107 0214 	add.w	r2, r7, #20
 8003c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c88:	4413      	add	r3, r2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c94:	3302      	adds	r3, #2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	3368      	adds	r3, #104	@ 0x68
 8003c9a:	443b      	add	r3, r7
 8003c9c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca8:	041a      	lsls	r2, r3, #16
 8003caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cac:	431a      	orrs	r2, r3
 8003cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cb0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d8c9      	bhi.n	8003c4c <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3768      	adds	r7, #104	@ 0x68
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cd0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003cd4:	6018      	str	r0, [r3, #0]
 8003cd6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cda:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003cde:	6019      	str	r1, [r3, #0]
 8003ce0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ce4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003ce8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003cea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cee:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfa:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003cfe:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d10c      	bne.n	8003d22 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003d08:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d0c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d18:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d1c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d20:	e01d      	b.n	8003d5e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003d22:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d26:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d32:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003d36:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d10c      	bne.n	8003d5a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003d40:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d44:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d50:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d54:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d58:	e001      	b.n	8003d5e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0a8      	b.n	8003eb0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8003d5e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d62:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a0 	beq.w	8003eae <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003d6e:	f107 0214 	add.w	r2, r7, #20
 8003d72:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d76:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	f7ff fe0b 	bl	8003998 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003d88:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003d90:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003d94:	e08c      	b.n	8003eb0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003d96:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003d9a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003da4:	e00e      	b.n	8003dc4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8003da6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003daa:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003dae:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003db0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003db4:	3304      	adds	r3, #4
 8003db6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003dba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003dc4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d9ec      	bls.n	8003da6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003dcc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8003ebc <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003dd2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003dd4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dd8:	3304      	adds	r3, #4
 8003dda:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003dde:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003de2:	4a37      	ldr	r2, [pc, #220]	@ (8003ec0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003de4:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003de6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dea:	3304      	adds	r3, #4
 8003dec:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003df0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003df4:	4a33      	ldr	r2, [pc, #204]	@ (8003ec4 <JPEG_Set_HuffAC_Mem+0x200>)
 8003df6:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003df8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003e02:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003e06:	4a30      	ldr	r2, [pc, #192]	@ (8003ec8 <JPEG_Set_HuffAC_Mem+0x204>)
 8003e08:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003e0a:	23a2      	movs	r3, #162	@ 0xa2
 8003e0c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003e10:	e049      	b.n	8003ea6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003e12:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003e1c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e20:	3b04      	subs	r3, #4
 8003e22:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e26:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e2a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e2e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e32:	4413      	add	r3, r2
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e3c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e40:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003e44:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e48:	3328      	adds	r3, #40	@ 0x28
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8003e58:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e62:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e66:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e78:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e7c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003e80:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003e94:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003e98:	041a      	lsls	r2, r3, #16
 8003e9a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003ea4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003ea6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d8b1      	bhi.n	8003e12 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	0fd10fd0 	.word	0x0fd10fd0
 8003ec0:	0fd30fd2 	.word	0x0fd30fd2
 8003ec4:	0fd50fd4 	.word	0x0fd50fd4
 8003ec8:	0fd70fd6 	.word	0x0fd70fd6

08003ecc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f84d 	bl	8003f74 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	491f      	ldr	r1, [pc, #124]	@ (8003f64 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff feec 	bl	8003cc4 <JPEG_Set_HuffAC_Mem>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	e030      	b.n	8003f5c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003f02:	461a      	mov	r2, r3
 8003f04:	4918      	ldr	r1, [pc, #96]	@ (8003f68 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fedc 	bl	8003cc4 <JPEG_Set_HuffAC_Mem>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	e020      	b.n	8003f5c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003f22:	461a      	mov	r2, r3
 8003f24:	4911      	ldr	r1, [pc, #68]	@ (8003f6c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fe49 	bl	8003bbe <JPEG_Set_HuffDC_Mem>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	e010      	b.n	8003f5c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003f42:	461a      	mov	r2, r3
 8003f44:	490a      	ldr	r1, [pc, #40]	@ (8003f70 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fe39 	bl	8003bbe <JPEG_Set_HuffDC_Mem>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	e000      	b.n	8003f5c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	0800f8d8 	.word	0x0800f8d8
 8003f68:	0800f98c 	.word	0x0800f98c
 8003f6c:	0800f8a0 	.word	0x0800f8a0
 8003f70:	0800f8bc 	.word	0x0800f8bc

08003f74 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b08b      	sub	sp, #44	@ 0x2c
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003f7c:	4b80      	ldr	r3, [pc, #512]	@ (8004180 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003f7e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003f80:	4b80      	ldr	r3, [pc, #512]	@ (8004184 <JPEG_Set_Huff_DHTMem+0x210>)
 8003f82:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003f84:	4b80      	ldr	r3, [pc, #512]	@ (8004188 <JPEG_Set_Huff_DHTMem+0x214>)
 8003f86:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003f88:	4b80      	ldr	r3, [pc, #512]	@ (800418c <JPEG_Set_Huff_DHTMem+0x218>)
 8003f8a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f94:	330c      	adds	r3, #12
 8003f96:	623b      	str	r3, [r7, #32]
  index = 16;
 8003f98:	2310      	movs	r3, #16
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f9c:	e01d      	b.n	8003fda <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	3b02      	subs	r3, #2
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fb2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	3b03      	subs	r3, #3
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fbe:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc2:	3a04      	subs	r2, #4
 8003fc4:	6979      	ldr	r1, [r7, #20]
 8003fc6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fc8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	601a      	str	r2, [r3, #0]
    address--;
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	3b04      	subs	r3, #4
 8003fd2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	3b04      	subs	r3, #4
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d8de      	bhi.n	8003f9e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003fe8:	3318      	adds	r3, #24
 8003fea:	623b      	str	r3, [r7, #32]
  index = 12;
 8003fec:	230c      	movs	r3, #12
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003ff0:	e021      	b.n	8004036 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	7c1b      	ldrb	r3, [r3, #16]
 8003ffc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	3b02      	subs	r3, #2
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	440b      	add	r3, r1
 8004006:	7c1b      	ldrb	r3, [r3, #16]
 8004008:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800400a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	3b03      	subs	r3, #3
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	440b      	add	r3, r1
 8004014:	7c1b      	ldrb	r3, [r3, #16]
 8004016:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004018:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	3a04      	subs	r2, #4
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	440a      	add	r2, r1
 8004022:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004024:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	601a      	str	r2, [r3, #0]
    address--;
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	3b04      	subs	r3, #4
 800402e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	3b04      	subs	r3, #4
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	2b03      	cmp	r3, #3
 800403a:	d8da      	bhi.n	8003ff2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004044:	3328      	adds	r3, #40	@ 0x28
 8004046:	623b      	str	r3, [r7, #32]
  index = 16;
 8004048:	2310      	movs	r3, #16
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800404c:	e01d      	b.n	800408a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	3b01      	subs	r3, #1
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	3b02      	subs	r3, #2
 800405c:	69f9      	ldr	r1, [r7, #28]
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004062:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	3b03      	subs	r3, #3
 8004068:	69f9      	ldr	r1, [r7, #28]
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800406e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004072:	3a04      	subs	r2, #4
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004078:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	601a      	str	r2, [r3, #0]
    address--;
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	3b04      	subs	r3, #4
 8004082:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	3b04      	subs	r3, #4
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	2b03      	cmp	r3, #3
 800408e:	d8de      	bhi.n	800404e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004098:	33cc      	adds	r3, #204	@ 0xcc
 800409a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <JPEG_Set_Huff_DHTMem+0x21c>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80040ac:	021a      	lsls	r2, r3, #8
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  *address = value;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	3b04      	subs	r3, #4
 80040c6:	623b      	str	r3, [r7, #32]
  index = 160;
 80040c8:	23a0      	movs	r3, #160	@ 0xa0
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040cc:	e021      	b.n	8004112 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	3b01      	subs	r3, #1
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	7c1b      	ldrb	r3, [r3, #16]
 80040d8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	3b02      	subs	r3, #2
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	440b      	add	r3, r1
 80040e2:	7c1b      	ldrb	r3, [r3, #16]
 80040e4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040e6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	3b03      	subs	r3, #3
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	440b      	add	r3, r1
 80040f0:	7c1b      	ldrb	r3, [r3, #16]
 80040f2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80040f4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80040f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f8:	3a04      	subs	r2, #4
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	440a      	add	r2, r1
 80040fe:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004100:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	601a      	str	r2, [r3, #0]
    address--;
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	3b04      	subs	r3, #4
 800410a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	3b04      	subs	r3, #4
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b03      	cmp	r3, #3
 8004116:	d8da      	bhi.n	80040ce <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004120:	33cc      	adds	r3, #204	@ 0xcc
 8004122:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	061a      	lsls	r2, r3, #24
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	431a      	orrs	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800414e:	33dc      	adds	r3, #220	@ 0xdc
 8004150:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	7bdb      	ldrb	r3, [r3, #15]
 8004160:	021a      	lsls	r2, r3, #8
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	7b92      	ldrb	r2, [r2, #14]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	3b04      	subs	r3, #4
 8004178:	623b      	str	r3, [r7, #32]
  index = 12;
 800417a:	230c      	movs	r3, #12
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800417e:	e027      	b.n	80041d0 <JPEG_Set_Huff_DHTMem+0x25c>
 8004180:	0800f8d8 	.word	0x0800f8d8
 8004184:	0800f98c 	.word	0x0800f98c
 8004188:	0800f8a0 	.word	0x0800f8a0
 800418c:	0800f8bc 	.word	0x0800f8bc
 8004190:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	3301      	adds	r3, #1
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	440b      	add	r3, r1
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041a8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	3b01      	subs	r3, #1
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	5ccb      	ldrb	r3, [r1, r3]
 80041b2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80041b4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80041b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b8:	3a02      	subs	r2, #2
 80041ba:	6939      	ldr	r1, [r7, #16]
 80041bc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041be:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	601a      	str	r2, [r3, #0]
    address--;
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	3b04      	subs	r3, #4
 80041c8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	3b04      	subs	r3, #4
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d8de      	bhi.n	8004194 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041de:	33dc      	adds	r3, #220	@ 0xdc
 80041e0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	7c5b      	ldrb	r3, [r3, #17]
 80041ee:	061a      	lsls	r2, r3, #24
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	7c1b      	ldrb	r3, [r3, #16]
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800420c:	33e8      	adds	r3, #232	@ 0xe8
 800420e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b6d      	ldr	r3, [pc, #436]	@ (80043cc <JPEG_Set_Huff_DHTMem+0x458>)
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	7edb      	ldrb	r3, [r3, #27]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	7e92      	ldrb	r2, [r2, #26]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	3b04      	subs	r3, #4
 8004236:	623b      	str	r3, [r7, #32]
  index = 8;
 8004238:	2308      	movs	r3, #8
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800423c:	e021      	b.n	8004282 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	3301      	adds	r3, #1
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	7c1b      	ldrb	r3, [r3, #16]
 8004248:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	440b      	add	r3, r1
 8004250:	3310      	adds	r3, #16
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004256:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	3b01      	subs	r3, #1
 800425c:	6939      	ldr	r1, [r7, #16]
 800425e:	440b      	add	r3, r1
 8004260:	7c1b      	ldrb	r3, [r3, #16]
 8004262:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004264:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8004266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004268:	3a02      	subs	r2, #2
 800426a:	6939      	ldr	r1, [r7, #16]
 800426c:	440a      	add	r2, r1
 800426e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004270:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	601a      	str	r2, [r3, #0]
    address--;
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	3b04      	subs	r3, #4
 800427a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	3b04      	subs	r3, #4
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	2b03      	cmp	r3, #3
 8004286:	d8da      	bhi.n	800423e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004290:	33e8      	adds	r3, #232	@ 0xe8
 8004292:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	061a      	lsls	r2, r3, #24
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  *address = value;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80042be:	33f8      	adds	r3, #248	@ 0xf8
 80042c0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b41      	ldr	r3, [pc, #260]	@ (80043cc <JPEG_Set_Huff_DHTMem+0x458>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	7bdb      	ldrb	r3, [r3, #15]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	7b92      	ldrb	r2, [r2, #14]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  *address = value;
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	3b04      	subs	r3, #4
 80042e8:	623b      	str	r3, [r7, #32]
  index = 12;
 80042ea:	230c      	movs	r3, #12
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80042ee:	e01d      	b.n	800432c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	3301      	adds	r3, #1
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	440b      	add	r3, r1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004304:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	3b01      	subs	r3, #1
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004310:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	3a02      	subs	r2, #2
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800431a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	601a      	str	r2, [r3, #0]
    address--;
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	3b04      	subs	r3, #4
 8004324:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	3b04      	subs	r3, #4
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	2b03      	cmp	r3, #3
 8004330:	d8de      	bhi.n	80042f0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800433a:	33f8      	adds	r3, #248	@ 0xf8
 800433c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	7c5b      	ldrb	r3, [r3, #17]
 800434a:	061a      	lsls	r2, r3, #24
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	431a      	orrs	r2, r3
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	7c1b      	ldrb	r3, [r3, #16]
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004368:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800436c:	623b      	str	r3, [r7, #32]
  index = 160;
 800436e:	23a0      	movs	r3, #160	@ 0xa0
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004372:	e021      	b.n	80043b8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	3301      	adds	r3, #1
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4413      	add	r3, r2
 800437c:	7c1b      	ldrb	r3, [r3, #16]
 800437e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	440b      	add	r3, r1
 8004386:	3310      	adds	r3, #16
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800438c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	3b01      	subs	r3, #1
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	440b      	add	r3, r1
 8004396:	7c1b      	ldrb	r3, [r3, #16]
 8004398:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800439a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800439c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439e:	3a02      	subs	r2, #2
 80043a0:	69b9      	ldr	r1, [r7, #24]
 80043a2:	440a      	add	r2, r1
 80043a4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80043a6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	601a      	str	r2, [r3, #0]
    address--;
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	3b04      	subs	r3, #4
 80043b0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	3b04      	subs	r3, #4
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d8da      	bhi.n	8004374 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	372c      	adds	r7, #44	@ 0x2c
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	ffff0000 	.word	0xffff0000

080043d0 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d108      	bne.n	8004402 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0208 	orr.w	r2, r2, #8
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	e007      	b.n	8004412 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0208 	bic.w	r2, r2, #8
 8004410:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004460:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b08      	cmp	r3, #8
 800447c:	d108      	bne.n	8004490 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800448e:	e00d      	b.n	80044ac <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d107      	bne.n	80044ac <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d125      	bne.n	8004518 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff f81b 	bl	800351c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc ff1e 	bl	8001334 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d116      	bne.n	8004552 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004532:	2108      	movs	r1, #8
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f988 	bl	800484a <JPEG_ReadInputData>
 800453a:	e00a      	b.n	8004552 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800454a:	2101      	movs	r1, #1
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f97c 	bl	800484a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d116      	bne.n	800458c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800456c:	2108      	movs	r1, #8
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f864 	bl	800463c <JPEG_StoreOutputData>
 8004574:	e00a      	b.n	800458c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8004584:	2101      	movs	r1, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f858 	bl	800463c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004596:	2b20      	cmp	r3, #32
 8004598:	d14b      	bne.n	8004632 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d107      	bne.n	80045c6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69d9      	ldr	r1, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	461a      	mov	r2, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc feed 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fe:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d103      	bne.n	8004628 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fc feeb 	bl	80013fc <HAL_JPEG_DecodeCpltCallback>
 8004626:	e002      	b.n	800462e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff f910 	bl	800384e <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	429a      	cmp	r2, r3
 8004656:	d34b      	bcc.n	80046f0 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e031      	b.n	80046c2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004664:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	4413      	add	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	0a19      	lsrs	r1, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	3301      	adds	r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	b2ca      	uxtb	r2, r1
 8004688:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	0c19      	lsrs	r1, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	3302      	adds	r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	b2ca      	uxtb	r2, r1
 800469c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	0e19      	lsrs	r1, r3, #24
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	3303      	adds	r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	b2ca      	uxtb	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3301      	adds	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3c9      	bcc.n	800465e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	429a      	cmp	r2, r3
 80046d4:	f040 80b5 	bne.w	8004842 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	461a      	mov	r2, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fe70 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80046ee:	e0a8      	b.n	8004842 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	429a      	cmp	r2, r3
 80046fa:	f240 80a2 	bls.w	8004842 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e031      	b.n	8004776 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004718:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	4413      	add	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0a19      	lsrs	r1, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	3301      	adds	r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	b2ca      	uxtb	r2, r1
 800473c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	0c19      	lsrs	r1, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	3302      	adds	r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	b2ca      	uxtb	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0e19      	lsrs	r1, r3, #24
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	3303      	adds	r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	b2ca      	uxtb	r2, r1
 8004764:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	1d1a      	adds	r2, r3, #4
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3301      	adds	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3c9      	bcc.n	8004712 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	429a      	cmp	r2, r3
 8004788:	d10b      	bne.n	80047a2 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69d9      	ldr	r1, [r3, #28]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	461a      	mov	r2, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fc fe17 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80047a0:	e04f      	b.n	8004842 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e015      	b.n	80047e8 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	fa22 f103 	lsr.w	r1, r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	4413      	add	r3, r2
 80047d4:	b2ca      	uxtb	r2, r1
 80047d6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	3301      	adds	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3e5      	bcc.n	80047bc <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69d9      	ldr	r1, [r3, #28]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	461a      	mov	r2, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fde4 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f1c3 0304 	rsb	r3, r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e013      	b.n	800483c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	fa22 f103 	lsr.w	r1, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	4413      	add	r3, r2
 8004828:	b2ca      	uxtb	r2, r1
 800482a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d9e8      	bls.n	8004814 <JPEG_StoreOutputData+0x1d8>
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b088      	sub	sp, #32
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <JPEG_ReadInputData+0x1c>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8004866:	2101      	movs	r1, #1
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fe ff74 	bl	8003756 <HAL_JPEG_Pause>
 800486e:	e028      	b.n	80048c2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	429a      	cmp	r2, r3
 800487a:	d906      	bls.n	800488a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e01b      	b.n	80048c2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	429a      	cmp	r2, r3
 8004894:	d115      	bne.n	80048c2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc fd55 	bl	800134c <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d905      	bls.n	80048b6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	f023 0203 	bic.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 809f 	bne.w	8004a0e <JPEG_ReadInputData+0x1c4>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 809b 	beq.w	8004a0e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d335      	bcc.n	8004952 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e02d      	b.n	8004948 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800490c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6999      	ldr	r1, [r3, #24]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3302      	adds	r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800491e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3303      	adds	r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004934:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3301      	adds	r3, #1
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d3cd      	bcc.n	80048ec <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8004950:	e05d      	b.n	8004a0e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d035      	beq.n	80049c4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e02d      	b.n	80049ba <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800497e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6999      	ldr	r1, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3302      	adds	r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004990:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3303      	adds	r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80049a6:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3cd      	bcc.n	800495e <JPEG_ReadInputData+0x114>
}
 80049c2:	e024      	b.n	8004a0e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e017      	b.n	80049fe <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4413      	add	r3, r2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3e3      	bcc.n	80049ce <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004a0e:	bf00      	nop
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d125      	bne.n	8004a76 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01e      	beq.n	8004a76 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe fd6c 	bl	800351c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fc fc6f 	bl	8001334 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d039      	beq.n	8004af8 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004abe:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d104      	bne.n	8004ad8 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f97c 	bl	8004dd0 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d105      	bne.n	8004af2 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f970 	bl	8004dd0 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8004af0:	e002      	b.n	8004af8 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f804 	bl	8004b00 <JPEG_DMA_EndProcess>
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d10a      	bne.n	8004b40 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69d9      	ldr	r1, [r3, #28]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	461a      	mov	r2, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc fc47 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d134      	bne.n	8004bb8 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69d9      	ldr	r1, [r3, #28]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fc fc31 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b80:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d103      	bne.n	8004bb0 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc fc27 	bl	80013fc <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8004bae:	e00c      	b.n	8004bca <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fe fe4c 	bl	800384e <HAL_JPEG_EncodeCpltCallback>
}
 8004bb6:	e008      	b.n	8004bca <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f804 	bl	8004bd2 <JPEG_DMA_PollResidualData>
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004bda:	2310      	movs	r3, #16
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e04f      	b.n	8004c80 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d146      	bne.n	8004c7a <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03f      	beq.n	8004c7a <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c00:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	4413      	add	r3, r2
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0a19      	lsrs	r1, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	b2ca      	uxtb	r2, r1
 8004c24:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	0c19      	lsrs	r1, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	3302      	adds	r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	b2ca      	uxtb	r2, r1
 8004c38:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	0e19      	lsrs	r1, r3, #24
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	3303      	adds	r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	b2ca      	uxtb	r2, r1
 8004c4c:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d10a      	bne.n	8004c7a <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69d9      	ldr	r1, [r3, #28]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fbaa 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ac      	bne.n	8004be0 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <JPEG_DMA_PollResidualData+0xd2>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d133      	bne.n	8004d0c <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc fb7e 	bl	80013c8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fb7c 	bl	80013fc <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8004d04:	e002      	b.n	8004d0c <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fe fda1 	bl	800384e <HAL_JPEG_EncodeCpltCallback>
}
 8004d0c:	bf00      	nop
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b08b      	sub	sp, #44	@ 0x2c
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3350      	adds	r3, #80	@ 0x50
 8004d26:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d2c:	e042      	b.n	8004db4 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e033      	b.n	8004da2 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d103      	bne.n	8004d56 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	3364      	adds	r3, #100	@ 0x64
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d54:	e022      	b.n	8004d9c <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2264      	movs	r2, #100	@ 0x64
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d62:	6a38      	ldr	r0, [r7, #32]
 8004d64:	69f9      	ldr	r1, [r7, #28]
 8004d66:	4401      	add	r1, r0
 8004d68:	4818      	ldr	r0, [pc, #96]	@ (8004dcc <JPEG_GetQuality+0xb8>)
 8004d6a:	5c41      	ldrb	r1, [r0, r1]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b64      	cmp	r3, #100	@ 0x64
 8004d7a:	d807      	bhi.n	8004d8c <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d86:	4413      	add	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8a:	e007      	b.n	8004d9c <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d98:	4413      	add	r3, r2
 8004d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d9c8      	bls.n	8004d3a <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	3304      	adds	r3, #4
 8004dac:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3304      	adds	r3, #4
 8004db2:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2b3c      	cmp	r3, #60	@ 0x3c
 8004db8:	d9b9      	bls.n	8004d2e <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	099b      	lsrs	r3, r3, #6
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	372c      	adds	r7, #44	@ 0x2c
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	0800fa40 	.word	0x0800fa40

08004dd0 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e017      	b.n	8004e12 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d004      	beq.n	8004df8 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2280      	movs	r2, #128	@ 0x80
 8004df2:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e00c      	b.n	8004e12 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e28:	4b29      	ldr	r3, [pc, #164]	@ (8004ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d00a      	beq.n	8004e4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e34:	4b26      	ldr	r3, [pc, #152]	@ (8004ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d001      	beq.n	8004e46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e040      	b.n	8004ec8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e03e      	b.n	8004ec8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e4a:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004e52:	491f      	ldr	r1, [pc, #124]	@ (8004ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e5a:	f7fd fba5 	bl	80025a8 <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e60:	e009      	b.n	8004e76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e62:	f7fd fba1 	bl	80025a8 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e70:	d901      	bls.n	8004e76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e028      	b.n	8004ec8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e76:	4b16      	ldr	r3, [pc, #88]	@ (8004ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e82:	d1ee      	bne.n	8004e62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b1e      	cmp	r3, #30
 8004e88:	d008      	beq.n	8004e9c <HAL_PWREx_ConfigSupply+0x7c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e8e:	d005      	beq.n	8004e9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b1d      	cmp	r3, #29
 8004e94:	d002      	beq.n	8004e9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b2d      	cmp	r3, #45	@ 0x2d
 8004e9a:	d114      	bne.n	8004ec6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e9c:	f7fd fb84 	bl	80025a8 <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ea2:	e009      	b.n	8004eb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ea4:	f7fd fb80 	bl	80025a8 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eb2:	d901      	bls.n	8004eb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004eb8:	4b05      	ldr	r3, [pc, #20]	@ (8004ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d1ee      	bne.n	8004ea4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	58024800 	.word	0x58024800

08004ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08c      	sub	sp, #48	@ 0x30
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f000 bc48 	b.w	8005778 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8088 	beq.w	8005006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	4b99      	ldr	r3, [pc, #612]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f00:	4b96      	ldr	r3, [pc, #600]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d007      	beq.n	8004f1c <HAL_RCC_OscConfig+0x48>
 8004f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0e:	2b18      	cmp	r3, #24
 8004f10:	d111      	bne.n	8004f36 <HAL_RCC_OscConfig+0x62>
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d10c      	bne.n	8004f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	4b8f      	ldr	r3, [pc, #572]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d06d      	beq.n	8005004 <HAL_RCC_OscConfig+0x130>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d169      	bne.n	8005004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f000 bc21 	b.w	8005778 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x7a>
 8004f40:	4b86      	ldr	r3, [pc, #536]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a85      	ldr	r2, [pc, #532]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e02e      	b.n	8004fac <HAL_RCC_OscConfig+0xd8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x9c>
 8004f56:	4b81      	ldr	r3, [pc, #516]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a80      	ldr	r2, [pc, #512]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b7e      	ldr	r3, [pc, #504]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7d      	ldr	r2, [pc, #500]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e01d      	b.n	8004fac <HAL_RCC_OscConfig+0xd8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0xc0>
 8004f7a:	4b78      	ldr	r3, [pc, #480]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a77      	ldr	r2, [pc, #476]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b75      	ldr	r3, [pc, #468]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a74      	ldr	r2, [pc, #464]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0xd8>
 8004f94:	4b71      	ldr	r3, [pc, #452]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a70      	ldr	r2, [pc, #448]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b6e      	ldr	r3, [pc, #440]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fd faf8 	bl	80025a8 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fd faf4 	bl	80025a8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	@ 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e3d4      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fce:	4b63      	ldr	r3, [pc, #396]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0xe8>
 8004fda:	e014      	b.n	8005006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fd fae4 	bl	80025a8 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fd fae0 	bl	80025a8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e3c0      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ff6:	4b59      	ldr	r3, [pc, #356]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x110>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80ca 	beq.w	80051a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005014:	4b51      	ldr	r3, [pc, #324]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800501c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800501e:	4b4f      	ldr	r3, [pc, #316]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_RCC_OscConfig+0x166>
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b18      	cmp	r3, #24
 800502e:	d156      	bne.n	80050de <HAL_RCC_OscConfig+0x20a>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d151      	bne.n	80050de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800503a:	4b48      	ldr	r3, [pc, #288]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_RCC_OscConfig+0x17e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e392      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005052:	4b42      	ldr	r3, [pc, #264]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 0219 	bic.w	r2, r3, #25
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	493f      	ldr	r1, [pc, #252]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005060:	4313      	orrs	r3, r2
 8005062:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fd faa0 	bl	80025a8 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800506c:	f7fd fa9c 	bl	80025a8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e37c      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800507e:	4b37      	ldr	r3, [pc, #220]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508a:	f7fd fabd 	bl	8002608 <HAL_GetREVID>
 800508e:	4603      	mov	r3, r0
 8005090:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005094:	4293      	cmp	r3, r2
 8005096:	d817      	bhi.n	80050c8 <HAL_RCC_OscConfig+0x1f4>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d108      	bne.n	80050b2 <HAL_RCC_OscConfig+0x1de>
 80050a0:	4b2e      	ldr	r3, [pc, #184]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050a8:	4a2c      	ldr	r2, [pc, #176]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b0:	e07a      	b.n	80051a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b2:	4b2a      	ldr	r3, [pc, #168]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	031b      	lsls	r3, r3, #12
 80050c0:	4926      	ldr	r1, [pc, #152]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c6:	e06f      	b.n	80051a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	4921      	ldr	r1, [pc, #132]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050dc:	e064      	b.n	80051a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d047      	beq.n	8005176 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050e6:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 0219 	bic.w	r2, r3, #25
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	491a      	ldr	r1, [pc, #104]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd fa56 	bl	80025a8 <HAL_GetTick>
 80050fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005100:	f7fd fa52 	bl	80025a8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e332      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005112:	4b12      	ldr	r3, [pc, #72]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511e:	f7fd fa73 	bl	8002608 <HAL_GetREVID>
 8005122:	4603      	mov	r3, r0
 8005124:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005128:	4293      	cmp	r3, r2
 800512a:	d819      	bhi.n	8005160 <HAL_RCC_OscConfig+0x28c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d108      	bne.n	8005146 <HAL_RCC_OscConfig+0x272>
 8005134:	4b09      	ldr	r3, [pc, #36]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800513c:	4a07      	ldr	r2, [pc, #28]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 800513e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005142:	6053      	str	r3, [r2, #4]
 8005144:	e030      	b.n	80051a8 <HAL_RCC_OscConfig+0x2d4>
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	031b      	lsls	r3, r3, #12
 8005154:	4901      	ldr	r1, [pc, #4]	@ (800515c <HAL_RCC_OscConfig+0x288>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
 800515a:	e025      	b.n	80051a8 <HAL_RCC_OscConfig+0x2d4>
 800515c:	58024400 	.word	0x58024400
 8005160:	4b9a      	ldr	r3, [pc, #616]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	061b      	lsls	r3, r3, #24
 800516e:	4997      	ldr	r1, [pc, #604]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
 8005174:	e018      	b.n	80051a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005176:	4b95      	ldr	r3, [pc, #596]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a94      	ldr	r2, [pc, #592]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fd fa11 	bl	80025a8 <HAL_GetTick>
 8005186:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518a:	f7fd fa0d 	bl	80025a8 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e2ed      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800519c:	4b8b      	ldr	r3, [pc, #556]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a9 	beq.w	8005308 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b6:	4b85      	ldr	r3, [pc, #532]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051c0:	4b82      	ldr	r3, [pc, #520]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d007      	beq.n	80051dc <HAL_RCC_OscConfig+0x308>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b18      	cmp	r3, #24
 80051d0:	d13a      	bne.n	8005248 <HAL_RCC_OscConfig+0x374>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d135      	bne.n	8005248 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051dc:	4b7b      	ldr	r3, [pc, #492]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_OscConfig+0x320>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b80      	cmp	r3, #128	@ 0x80
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e2c1      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051f4:	f7fd fa08 	bl	8002608 <HAL_GetREVID>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051fe:	4293      	cmp	r3, r2
 8005200:	d817      	bhi.n	8005232 <HAL_RCC_OscConfig+0x35e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	2b20      	cmp	r3, #32
 8005208:	d108      	bne.n	800521c <HAL_RCC_OscConfig+0x348>
 800520a:	4b70      	ldr	r3, [pc, #448]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005212:	4a6e      	ldr	r2, [pc, #440]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005218:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800521a:	e075      	b.n	8005308 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800521c:	4b6b      	ldr	r3, [pc, #428]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	069b      	lsls	r3, r3, #26
 800522a:	4968      	ldr	r1, [pc, #416]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005230:	e06a      	b.n	8005308 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005232:	4b66      	ldr	r3, [pc, #408]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	4962      	ldr	r1, [pc, #392]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005246:	e05f      	b.n	8005308 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d042      	beq.n	80052d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005250:	4b5e      	ldr	r3, [pc, #376]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5d      	ldr	r2, [pc, #372]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800525a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd f9a4 	bl	80025a8 <HAL_GetTick>
 8005260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005264:	f7fd f9a0 	bl	80025a8 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e280      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005276:	4b55      	ldr	r3, [pc, #340]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005282:	f7fd f9c1 	bl	8002608 <HAL_GetREVID>
 8005286:	4603      	mov	r3, r0
 8005288:	f241 0203 	movw	r2, #4099	@ 0x1003
 800528c:	4293      	cmp	r3, r2
 800528e:	d817      	bhi.n	80052c0 <HAL_RCC_OscConfig+0x3ec>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	2b20      	cmp	r3, #32
 8005296:	d108      	bne.n	80052aa <HAL_RCC_OscConfig+0x3d6>
 8005298:	4b4c      	ldr	r3, [pc, #304]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80052a0:	4a4a      	ldr	r2, [pc, #296]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052a6:	6053      	str	r3, [r2, #4]
 80052a8:	e02e      	b.n	8005308 <HAL_RCC_OscConfig+0x434>
 80052aa:	4b48      	ldr	r3, [pc, #288]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	069b      	lsls	r3, r3, #26
 80052b8:	4944      	ldr	r1, [pc, #272]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
 80052be:	e023      	b.n	8005308 <HAL_RCC_OscConfig+0x434>
 80052c0:	4b42      	ldr	r3, [pc, #264]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	493f      	ldr	r1, [pc, #252]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60cb      	str	r3, [r1, #12]
 80052d4:	e018      	b.n	8005308 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052d6:	4b3d      	ldr	r3, [pc, #244]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3c      	ldr	r2, [pc, #240]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fd f961 	bl	80025a8 <HAL_GetTick>
 80052e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052ea:	f7fd f95d 	bl	80025a8 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e23d      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052fc:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d036      	beq.n	8005382 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d019      	beq.n	8005350 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531c:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	4a2a      	ldr	r2, [pc, #168]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fd f93e 	bl	80025a8 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005330:	f7fd f93a 	bl	80025a8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e21a      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005342:	4b22      	ldr	r3, [pc, #136]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x45c>
 800534e:	e018      	b.n	8005382 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005350:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005354:	4a1d      	ldr	r2, [pc, #116]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fd f924 	bl	80025a8 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005364:	f7fd f920 	bl	80025a8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e200      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d039      	beq.n	8005402 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a0c      	ldr	r2, [pc, #48]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 800539c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053a2:	f7fd f901 	bl	80025a8 <HAL_GetTick>
 80053a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053aa:	f7fd f8fd 	bl	80025a8 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e1dd      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053bc:	4b03      	ldr	r3, [pc, #12]	@ (80053cc <HAL_RCC_OscConfig+0x4f8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x4d6>
 80053c8:	e01b      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
 80053ca:	bf00      	nop
 80053cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053d0:	4b9b      	ldr	r3, [pc, #620]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a9a      	ldr	r2, [pc, #616]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80053d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053dc:	f7fd f8e4 	bl	80025a8 <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e4:	f7fd f8e0 	bl	80025a8 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e1c0      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053f6:	4b92      	ldr	r3, [pc, #584]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8081 	beq.w	8005512 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005410:	4b8c      	ldr	r3, [pc, #560]	@ (8005644 <HAL_RCC_OscConfig+0x770>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a8b      	ldr	r2, [pc, #556]	@ (8005644 <HAL_RCC_OscConfig+0x770>)
 8005416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800541a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800541c:	f7fd f8c4 	bl	80025a8 <HAL_GetTick>
 8005420:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fd f8c0 	bl	80025a8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	@ 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e1a0      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005436:	4b83      	ldr	r3, [pc, #524]	@ (8005644 <HAL_RCC_OscConfig+0x770>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x584>
 800544a:	4b7d      	ldr	r3, [pc, #500]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544e:	4a7c      	ldr	r2, [pc, #496]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6713      	str	r3, [r2, #112]	@ 0x70
 8005456:	e02d      	b.n	80054b4 <HAL_RCC_OscConfig+0x5e0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10c      	bne.n	800547a <HAL_RCC_OscConfig+0x5a6>
 8005460:	4b77      	ldr	r3, [pc, #476]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a76      	ldr	r2, [pc, #472]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	4b74      	ldr	r3, [pc, #464]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	4a73      	ldr	r2, [pc, #460]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005472:	f023 0304 	bic.w	r3, r3, #4
 8005476:	6713      	str	r3, [r2, #112]	@ 0x70
 8005478:	e01c      	b.n	80054b4 <HAL_RCC_OscConfig+0x5e0>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b05      	cmp	r3, #5
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x5c8>
 8005482:	4b6f      	ldr	r3, [pc, #444]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a6e      	ldr	r2, [pc, #440]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	4b6c      	ldr	r3, [pc, #432]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005492:	4a6b      	ldr	r2, [pc, #428]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6713      	str	r3, [r2, #112]	@ 0x70
 800549a:	e00b      	b.n	80054b4 <HAL_RCC_OscConfig+0x5e0>
 800549c:	4b68      	ldr	r3, [pc, #416]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	4a67      	ldr	r2, [pc, #412]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a8:	4b65      	ldr	r3, [pc, #404]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ac:	4a64      	ldr	r2, [pc, #400]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80054ae:	f023 0304 	bic.w	r3, r3, #4
 80054b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fd f874 	bl	80025a8 <HAL_GetTick>
 80054c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fd f870 	bl	80025a8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e14e      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054da:	4b59      	ldr	r3, [pc, #356]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ee      	beq.n	80054c4 <HAL_RCC_OscConfig+0x5f0>
 80054e6:	e014      	b.n	8005512 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fd f85e 	bl	80025a8 <HAL_GetTick>
 80054ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fd f85a 	bl	80025a8 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e138      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005506:	4b4e      	ldr	r3, [pc, #312]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1ee      	bne.n	80054f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 812d 	beq.w	8005776 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800551c:	4b48      	ldr	r3, [pc, #288]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005524:	2b18      	cmp	r3, #24
 8005526:	f000 80bd 	beq.w	80056a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	2b02      	cmp	r3, #2
 8005530:	f040 809e 	bne.w	8005670 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	4b42      	ldr	r3, [pc, #264]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a41      	ldr	r2, [pc, #260]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fd f832 	bl	80025a8 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fd f82e 	bl	80025a8 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e10e      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800555a:	4b39      	ldr	r3, [pc, #228]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005566:	4b36      	ldr	r3, [pc, #216]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800556a:	4b37      	ldr	r3, [pc, #220]	@ (8005648 <HAL_RCC_OscConfig+0x774>)
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	430a      	orrs	r2, r1
 800557a:	4931      	ldr	r1, [pc, #196]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005584:	3b01      	subs	r3, #1
 8005586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558e:	3b01      	subs	r3, #1
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	b29b      	uxth	r3, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	3b01      	subs	r3, #1
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	3b01      	subs	r3, #1
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055b0:	4923      	ldr	r1, [pc, #140]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055b6:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055c6:	4b21      	ldr	r3, [pc, #132]	@ (800564c <HAL_RCC_OscConfig+0x778>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055ce:	00d2      	lsls	r2, r2, #3
 80055d0:	491b      	ldr	r1, [pc, #108]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	f023 020c 	bic.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	4917      	ldr	r1, [pc, #92]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055e8:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	f023 0202 	bic.w	r2, r3, #2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f4:	4912      	ldr	r1, [pc, #72]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055fa:	4b11      	ldr	r3, [pc, #68]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	4a10      	ldr	r2, [pc, #64]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005606:	4b0e      	ldr	r3, [pc, #56]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	4a0d      	ldr	r2, [pc, #52]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800560c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005612:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800561c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800561e:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	4a07      	ldr	r2, [pc, #28]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800562a:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <HAL_RCC_OscConfig+0x76c>)
 8005630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc ffb7 	bl	80025a8 <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800563c:	e011      	b.n	8005662 <HAL_RCC_OscConfig+0x78e>
 800563e:	bf00      	nop
 8005640:	58024400 	.word	0x58024400
 8005644:	58024800 	.word	0x58024800
 8005648:	fffffc0c 	.word	0xfffffc0c
 800564c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005650:	f7fc ffaa 	bl	80025a8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e08a      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005662:	4b47      	ldr	r3, [pc, #284]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x77c>
 800566e:	e082      	b.n	8005776 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005670:	4b43      	ldr	r3, [pc, #268]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a42      	ldr	r2, [pc, #264]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fc ff94 	bl	80025a8 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005684:	f7fc ff90 	bl	80025a8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e070      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005696:	4b3a      	ldr	r3, [pc, #232]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x7b0>
 80056a2:	e068      	b.n	8005776 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056a4:	4b36      	ldr	r3, [pc, #216]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056aa:	4b35      	ldr	r3, [pc, #212]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d031      	beq.n	800571c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f003 0203 	and.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d12a      	bne.n	800571c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d122      	bne.n	800571c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d11a      	bne.n	800571c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	0a5b      	lsrs	r3, r3, #9
 80056ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d111      	bne.n	800571c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d108      	bne.n	800571c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	0e1b      	lsrs	r3, r3, #24
 800570e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e02b      	b.n	8005778 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005720:	4b17      	ldr	r3, [pc, #92]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800572a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	429a      	cmp	r2, r3
 8005734:	d01f      	beq.n	8005776 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	4a11      	ldr	r2, [pc, #68]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005742:	f7fc ff31 	bl	80025a8 <HAL_GetTick>
 8005746:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005748:	bf00      	nop
 800574a:	f7fc ff2d 	bl	80025a8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	4293      	cmp	r3, r2
 8005754:	d0f9      	beq.n	800574a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005756:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800575a:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <HAL_RCC_OscConfig+0x8b0>)
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005762:	00d2      	lsls	r2, r2, #3
 8005764:	4906      	ldr	r1, [pc, #24]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005766:	4313      	orrs	r3, r2
 8005768:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800576a:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <HAL_RCC_OscConfig+0x8ac>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3730      	adds	r7, #48	@ 0x30
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	58024400 	.word	0x58024400
 8005784:	ffff0007 	.word	0xffff0007

08005788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e19c      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b8a      	ldr	r3, [pc, #552]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d910      	bls.n	80057cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b87      	ldr	r3, [pc, #540]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 020f 	bic.w	r2, r3, #15
 80057b2:	4985      	ldr	r1, [pc, #532]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b83      	ldr	r3, [pc, #524]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e184      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	4b7b      	ldr	r3, [pc, #492]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d908      	bls.n	80057fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057e8:	4b78      	ldr	r3, [pc, #480]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	4975      	ldr	r1, [pc, #468]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d010      	beq.n	8005828 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	4b70      	ldr	r3, [pc, #448]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005812:	429a      	cmp	r2, r3
 8005814:	d908      	bls.n	8005828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005816:	4b6d      	ldr	r3, [pc, #436]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	496a      	ldr	r1, [pc, #424]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005824:	4313      	orrs	r3, r2
 8005826:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d010      	beq.n	8005856 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	4b64      	ldr	r3, [pc, #400]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005840:	429a      	cmp	r2, r3
 8005842:	d908      	bls.n	8005856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005844:	4b61      	ldr	r3, [pc, #388]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	495e      	ldr	r1, [pc, #376]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005852:	4313      	orrs	r3, r2
 8005854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d010      	beq.n	8005884 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	4b59      	ldr	r3, [pc, #356]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800586e:	429a      	cmp	r2, r3
 8005870:	d908      	bls.n	8005884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005872:	4b56      	ldr	r3, [pc, #344]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	4953      	ldr	r1, [pc, #332]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005880:	4313      	orrs	r3, r2
 8005882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	4b4d      	ldr	r3, [pc, #308]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	429a      	cmp	r2, r3
 800589e:	d908      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b4a      	ldr	r3, [pc, #296]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f023 020f 	bic.w	r2, r3, #15
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4947      	ldr	r1, [pc, #284]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d055      	beq.n	800596a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058be:	4b43      	ldr	r3, [pc, #268]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4940      	ldr	r1, [pc, #256]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d8:	4b3c      	ldr	r3, [pc, #240]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d121      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0f6      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058f0:	4b36      	ldr	r3, [pc, #216]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d115      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0ea      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005908:	4b30      	ldr	r3, [pc, #192]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0de      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005918:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0d6      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005928:	4b28      	ldr	r3, [pc, #160]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f023 0207 	bic.w	r2, r3, #7
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4925      	ldr	r1, [pc, #148]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593a:	f7fc fe35 	bl	80025a8 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005940:	e00a      	b.n	8005958 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005942:	f7fc fe31 	bl	80025a8 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e0be      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005958:	4b1c      	ldr	r3, [pc, #112]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	429a      	cmp	r2, r3
 8005968:	d1eb      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	429a      	cmp	r2, r3
 8005984:	d208      	bcs.n	8005998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005986:	4b11      	ldr	r3, [pc, #68]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f023 020f 	bic.w	r2, r3, #15
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	490e      	ldr	r1, [pc, #56]	@ (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005994:	4313      	orrs	r3, r2
 8005996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d214      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b08      	ldr	r3, [pc, #32]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 020f 	bic.w	r2, r3, #15
 80059ae:	4906      	ldr	r1, [pc, #24]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b04      	ldr	r3, [pc, #16]	@ (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e086      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
 80059c8:	52002000 	.word	0x52002000
 80059cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d208      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ec:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4939      	ldr	r1, [pc, #228]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4b34      	ldr	r3, [pc, #208]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d208      	bcs.n	8005a2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a1a:	4b31      	ldr	r3, [pc, #196]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	492e      	ldr	r1, [pc, #184]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d208      	bcs.n	8005a5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a48:	4b25      	ldr	r3, [pc, #148]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	4922      	ldr	r1, [pc, #136]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d208      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a76:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4917      	ldr	r1, [pc, #92]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a88:	f000 f89e 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b14      	ldr	r3, [pc, #80]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	4912      	ldr	r1, [pc, #72]	@ (8005ae4 <HAL_RCC_ClockConfig+0x35c>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae4 <HAL_RCC_ClockConfig+0x35c>)
 8005ab0:	5cd3      	ldrb	r3, [r2, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x360>)
 8005abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8005aec <HAL_RCC_ClockConfig+0x364>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <HAL_RCC_ClockConfig+0x368>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fc fd22 	bl	8002514 <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	0800f890 	.word	0x0800f890
 8005ae8:	24000004 	.word	0x24000004
 8005aec:	24000000 	.word	0x24000000
 8005af0:	24000014 	.word	0x24000014

08005af4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	@ 0x30
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d12a      	bne.n	8005b5c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005b06:	4b2d      	ldr	r3, [pc, #180]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b16:	4b29      	ldr	r3, [pc, #164]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b36:	2300      	movs	r3, #0
 8005b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b3a:	f107 031c 	add.w	r3, r7, #28
 8005b3e:	4619      	mov	r1, r3
 8005b40:	481f      	ldr	r0, [pc, #124]	@ (8005bc0 <HAL_RCC_MCOConfig+0xcc>)
 8005b42:	f7fd fa59 	bl	8002ff8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b46:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	430b      	orrs	r3, r1
 8005b54:	4919      	ldr	r1, [pc, #100]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005b5a:	e02a      	b.n	8005bb2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b5c:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b62:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b6c:	4b13      	ldr	r3, [pc, #76]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b80:	2302      	movs	r3, #2
 8005b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b84:	2303      	movs	r3, #3
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005b90:	f107 031c 	add.w	r3, r7, #28
 8005b94:	4619      	mov	r1, r3
 8005b96:	480b      	ldr	r0, [pc, #44]	@ (8005bc4 <HAL_RCC_MCOConfig+0xd0>)
 8005b98:	f7fd fa2e 	bl	8002ff8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005b9c:	4b07      	ldr	r3, [pc, #28]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	01d9      	lsls	r1, r3, #7
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	430b      	orrs	r3, r1
 8005bac:	4903      	ldr	r1, [pc, #12]	@ (8005bbc <HAL_RCC_MCOConfig+0xc8>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	610b      	str	r3, [r1, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	3730      	adds	r7, #48	@ 0x30
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	58020000 	.word	0x58020000
 8005bc4:	58020800 	.word	0x58020800

08005bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b089      	sub	sp, #36	@ 0x24
 8005bcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bce:	4bb3      	ldr	r3, [pc, #716]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd6:	2b18      	cmp	r3, #24
 8005bd8:	f200 8155 	bhi.w	8005e86 <HAL_RCC_GetSysClockFreq+0x2be>
 8005bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005e87 	.word	0x08005e87
 8005bec:	08005e87 	.word	0x08005e87
 8005bf0:	08005e87 	.word	0x08005e87
 8005bf4:	08005e87 	.word	0x08005e87
 8005bf8:	08005e87 	.word	0x08005e87
 8005bfc:	08005e87 	.word	0x08005e87
 8005c00:	08005e87 	.word	0x08005e87
 8005c04:	08005c6f 	.word	0x08005c6f
 8005c08:	08005e87 	.word	0x08005e87
 8005c0c:	08005e87 	.word	0x08005e87
 8005c10:	08005e87 	.word	0x08005e87
 8005c14:	08005e87 	.word	0x08005e87
 8005c18:	08005e87 	.word	0x08005e87
 8005c1c:	08005e87 	.word	0x08005e87
 8005c20:	08005e87 	.word	0x08005e87
 8005c24:	08005c75 	.word	0x08005c75
 8005c28:	08005e87 	.word	0x08005e87
 8005c2c:	08005e87 	.word	0x08005e87
 8005c30:	08005e87 	.word	0x08005e87
 8005c34:	08005e87 	.word	0x08005e87
 8005c38:	08005e87 	.word	0x08005e87
 8005c3c:	08005e87 	.word	0x08005e87
 8005c40:	08005e87 	.word	0x08005e87
 8005c44:	08005c7b 	.word	0x08005c7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c48:	4b94      	ldr	r3, [pc, #592]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c54:	4b91      	ldr	r3, [pc, #580]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	08db      	lsrs	r3, r3, #3
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	4a90      	ldr	r2, [pc, #576]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c66:	e111      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c68:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c6a:	61bb      	str	r3, [r7, #24]
      break;
 8005c6c:	e10e      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c70:	61bb      	str	r3, [r7, #24]
      break;
 8005c72:	e10b      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c74:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c76:	61bb      	str	r3, [r7, #24]
      break;
 8005c78:	e108      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c7a:	4b88      	ldr	r3, [pc, #544]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c84:	4b85      	ldr	r3, [pc, #532]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c90:	4b82      	ldr	r3, [pc, #520]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c9a:	4b80      	ldr	r3, [pc, #512]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	08db      	lsrs	r3, r3, #3
 8005ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80e1 	beq.w	8005e80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	f000 8083 	beq.w	8005dcc <HAL_RCC_GetSysClockFreq+0x204>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f200 80a1 	bhi.w	8005e10 <HAL_RCC_GetSysClockFreq+0x248>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x114>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d056      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cda:	e099      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02d      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	4b62      	ldr	r3, [pc, #392]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d42:	e087      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005eb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b51      	ldr	r3, [pc, #324]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d86:	e065      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005eb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b40      	ldr	r3, [pc, #256]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dca:	e043      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005eb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b2f      	ldr	r3, [pc, #188]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e0e:	e021      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005eb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b1e      	ldr	r3, [pc, #120]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e54:	4b11      	ldr	r3, [pc, #68]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	0a5b      	lsrs	r3, r3, #9
 8005e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e5e:	3301      	adds	r3, #1
 8005e60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e78:	ee17 3a90 	vmov	r3, s15
 8005e7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e7e:	e005      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
      break;
 8005e84:	e002      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e86:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e88:	61bb      	str	r3, [r7, #24]
      break;
 8005e8a:	bf00      	nop
  }

  return sysclockfreq;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3724      	adds	r7, #36	@ 0x24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	03d09000 	.word	0x03d09000
 8005ea4:	003d0900 	.word	0x003d0900
 8005ea8:	017d7840 	.word	0x017d7840
 8005eac:	46000000 	.word	0x46000000
 8005eb0:	4c742400 	.word	0x4c742400
 8005eb4:	4a742400 	.word	0x4a742400
 8005eb8:	4bbebc20 	.word	0x4bbebc20

08005ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ec2:	f7ff fe81 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	490f      	ldr	r1, [pc, #60]	@ (8005f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ed4:	5ccb      	ldrb	r3, [r1, r3]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	fa22 f303 	lsr.w	r3, r2, r3
 8005ede:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	4a09      	ldr	r2, [pc, #36]	@ (8005f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8005eea:	5cd3      	ldrb	r3, [r2, r3]
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef6:	4a07      	ldr	r2, [pc, #28]	@ (8005f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ef8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005efa:	4a07      	ldr	r2, [pc, #28]	@ (8005f18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f00:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f02:	681b      	ldr	r3, [r3, #0]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	0800f890 	.word	0x0800f890
 8005f14:	24000004 	.word	0x24000004
 8005f18:	24000000 	.word	0x24000000

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f20:	f7ff ffcc 	bl	8005ebc <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4904      	ldr	r1, [pc, #16]	@ (8005f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	58024400 	.word	0x58024400
 8005f44:	0800f890 	.word	0x0800f890

08005f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f4c:	f7ff ffb6 	bl	8005ebc <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b06      	ldr	r3, [pc, #24]	@ (8005f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4904      	ldr	r1, [pc, #16]	@ (8005f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	0800f890 	.word	0x0800f890

08005f74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b0cc      	sub	sp, #304	@ 0x130
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f98:	2500      	movs	r5, #0
 8005f9a:	ea54 0305 	orrs.w	r3, r4, r5
 8005f9e:	d049      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005fac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fb0:	d828      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fb6:	d01a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fbc:	d822      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc6:	d007      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fc8:	e01c      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fca:	4bb8      	ldr	r3, [pc, #736]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fce:	4ab7      	ldr	r2, [pc, #732]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fd6:	e01a      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fdc:	3308      	adds	r3, #8
 8005fde:	2102      	movs	r1, #2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 fba1 	bl	8008728 <RCCEx_PLL2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fec:	e00f      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff2:	3328      	adds	r3, #40	@ 0x28
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 fc48 	bl	800888c <RCCEx_PLL3_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006002:	e004      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800600a:	e000      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800600c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006016:	4ba5      	ldr	r3, [pc, #660]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800601e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006024:	4aa1      	ldr	r2, [pc, #644]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006026:	430b      	orrs	r3, r1
 8006028:	6513      	str	r3, [r2, #80]	@ 0x50
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006030:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006040:	f04f 0900 	mov.w	r9, #0
 8006044:	ea58 0309 	orrs.w	r3, r8, r9
 8006048:	d047      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800604a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	2b04      	cmp	r3, #4
 8006052:	d82a      	bhi.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006071 	.word	0x08006071
 8006060:	0800607f 	.word	0x0800607f
 8006064:	08006095 	.word	0x08006095
 8006068:	080060b3 	.word	0x080060b3
 800606c:	080060b3 	.word	0x080060b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006070:	4b8e      	ldr	r3, [pc, #568]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	4a8d      	ldr	r2, [pc, #564]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800607a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800607c:	e01a      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800607e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006082:	3308      	adds	r3, #8
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f002 fb4e 	bl	8008728 <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006092:	e00f      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006098:	3328      	adds	r3, #40	@ 0x28
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f002 fbf5 	bl	800888c <RCCEx_PLL3_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060a8:	e004      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060b0:	e000      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060bc:	4b7b      	ldr	r3, [pc, #492]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c0:	f023 0107 	bic.w	r1, r3, #7
 80060c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ca:	4a78      	ldr	r2, [pc, #480]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80060da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80060e6:	f04f 0b00 	mov.w	fp, #0
 80060ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80060ee:	d04c      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80060f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060fa:	d030      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80060fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006100:	d829      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006102:	2bc0      	cmp	r3, #192	@ 0xc0
 8006104:	d02d      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006106:	2bc0      	cmp	r3, #192	@ 0xc0
 8006108:	d825      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800610a:	2b80      	cmp	r3, #128	@ 0x80
 800610c:	d018      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800610e:	2b80      	cmp	r3, #128	@ 0x80
 8006110:	d821      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	d007      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800611a:	e01c      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611c:	4b63      	ldr	r3, [pc, #396]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	4a62      	ldr	r2, [pc, #392]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006128:	e01c      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612e:	3308      	adds	r3, #8
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f002 faf8 	bl	8008728 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800613e:	e011      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006140:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006144:	3328      	adds	r3, #40	@ 0x28
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f002 fb9f 	bl	800888c <RCCEx_PLL3_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800616c:	4b4f      	ldr	r3, [pc, #316]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006170:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617a:	4a4c      	ldr	r2, [pc, #304]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800617c:	430b      	orrs	r3, r1
 800617e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006186:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800618a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006196:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80061a0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d053      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061b6:	d035      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80061b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061bc:	d82e      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061c2:	d031      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80061c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061c8:	d828      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061ce:	d01a      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80061d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061d4:	d822      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80061da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061de:	d007      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80061e0:	e01c      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e2:	4b32      	ldr	r3, [pc, #200]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	4a31      	ldr	r2, [pc, #196]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061ee:	e01c      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f4:	3308      	adds	r3, #8
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f002 fa95 	bl	8008728 <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006204:	e011      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620a:	3328      	adds	r3, #40	@ 0x28
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f002 fb3c 	bl	800888c <RCCEx_PLL3_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800621a:	e006      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006222:	e002      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006232:	4b1e      	ldr	r3, [pc, #120]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006236:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800623a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800623e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006242:	4a1a      	ldr	r2, [pc, #104]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006244:	430b      	orrs	r3, r1
 8006246:	6593      	str	r3, [r2, #88]	@ 0x58
 8006248:	e003      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800624e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800625e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006262:	2300      	movs	r3, #0
 8006264:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006268:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800626c:	460b      	mov	r3, r1
 800626e:	4313      	orrs	r3, r2
 8006270:	d056      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800627a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800627e:	d038      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006284:	d831      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006286:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800628a:	d034      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800628c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006290:	d82b      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006292:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006296:	d01d      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800629c:	d825      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d006      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80062a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80062a8:	e01f      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062aa:	bf00      	nop
 80062ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b0:	4ba2      	ldr	r3, [pc, #648]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	4aa1      	ldr	r2, [pc, #644]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062bc:	e01c      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c2:	3308      	adds	r3, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f002 fa2e 	bl	8008728 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062d2:	e011      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d8:	3328      	adds	r3, #40	@ 0x28
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f002 fad5 	bl	800888c <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e8:	e006      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80062f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006300:	4b8e      	ldr	r3, [pc, #568]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006304:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800630c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006310:	4a8a      	ldr	r2, [pc, #552]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006312:	430b      	orrs	r3, r1
 8006314:	6593      	str	r3, [r2, #88]	@ 0x58
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800631c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006320:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800632c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006336:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d03a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006346:	2b30      	cmp	r3, #48	@ 0x30
 8006348:	d01f      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800634a:	2b30      	cmp	r3, #48	@ 0x30
 800634c:	d819      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800634e:	2b20      	cmp	r3, #32
 8006350:	d00c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d815      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d019      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800635a:	2b10      	cmp	r3, #16
 800635c:	d111      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635e:	4b77      	ldr	r3, [pc, #476]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a76      	ldr	r2, [pc, #472]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800636a:	e011      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800636c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006370:	3308      	adds	r3, #8
 8006372:	2102      	movs	r1, #2
 8006374:	4618      	mov	r0, r3
 8006376:	f002 f9d7 	bl	8008728 <RCCEx_PLL2_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800638e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006390:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006398:	4b68      	ldr	r3, [pc, #416]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a6:	4a65      	ldr	r2, [pc, #404]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80063c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063cc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d051      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80063d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e0:	d035      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80063e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e6:	d82e      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ec:	d031      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80063ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063f2:	d828      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f8:	d01a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	d822      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006408:	d007      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800640a:	e01c      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4b4b      	ldr	r3, [pc, #300]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a4a      	ldr	r2, [pc, #296]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006418:	e01c      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800641a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800641e:	3308      	adds	r3, #8
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f002 f980 	bl	8008728 <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800642e:	e011      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006434:	3328      	adds	r3, #40	@ 0x28
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f002 fa27 	bl	800888c <RCCEx_PLL3_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006454:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800645c:	4b37      	ldr	r3, [pc, #220]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006460:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006464:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800646a:	4a34      	ldr	r2, [pc, #208]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006470:	e003      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006476:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800647a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006486:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800648a:	2300      	movs	r3, #0
 800648c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006490:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006494:	460b      	mov	r3, r1
 8006496:	4313      	orrs	r3, r2
 8006498:	d056      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800649a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064a4:	d033      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064aa:	d82c      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b0:	d02f      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80064b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b6:	d826      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064bc:	d02b      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80064be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064c2:	d820      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c8:	d012      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80064ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ce:	d81a      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d022      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d8:	d115      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064de:	3308      	adds	r3, #8
 80064e0:	2101      	movs	r1, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f002 f920 	bl	8008728 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064ee:	e015      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064f4:	3328      	adds	r3, #40	@ 0x28
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f002 f9c7 	bl	800888c <RCCEx_PLL3_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006504:	e00a      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800650c:	e006      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800650e:	bf00      	nop
 8006510:	e004      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006512:	bf00      	nop
 8006514:	e002      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006516:	bf00      	nop
 8006518:	e000      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800651a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006524:	4b05      	ldr	r3, [pc, #20]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006528:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800652c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006532:	4a02      	ldr	r2, [pc, #8]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006534:	430b      	orrs	r3, r1
 8006536:	6513      	str	r3, [r2, #80]	@ 0x50
 8006538:	e006      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800653a:	bf00      	nop
 800653c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006540:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006544:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006554:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800655e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d055      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800656c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006574:	d033      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800657a:	d82c      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d02f      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	d826      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006588:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800658c:	d02b      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800658e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006592:	d820      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006598:	d012      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800659a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800659e:	d81a      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d022      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80065a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a8:	d115      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ae:	3308      	adds	r3, #8
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f002 f8b8 	bl	8008728 <RCCEx_PLL2_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065be:	e015      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c4:	3328      	adds	r3, #40	@ 0x28
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f002 f95f 	bl	800888c <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065d4:	e00a      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065dc:	e006      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065de:	bf00      	nop
 80065e0:	e004      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065e2:	bf00      	nop
 80065e4:	e002      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065e6:	bf00      	nop
 80065e8:	e000      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065f4:	4bb6      	ldr	r3, [pc, #728]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006600:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006604:	4ab2      	ldr	r2, [pc, #712]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006606:	430b      	orrs	r3, r1
 8006608:	6593      	str	r3, [r2, #88]	@ 0x58
 800660a:	e003      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006610:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800662a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d02a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8006634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663a:	2b00      	cmp	r3, #0
 800663c:	d011      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800663e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006642:	d10a      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006648:	3308      	adds	r3, #8
 800664a:	2101      	movs	r1, #1
 800664c:	4618      	mov	r0, r3
 800664e:	f002 f86b 	bl	8008728 <RCCEx_PLL2_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006658:	e004      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006660:	e000      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8006662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006664:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800666c:	4b98      	ldr	r3, [pc, #608]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800666e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006670:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667a:	4a95      	ldr	r2, [pc, #596]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800667c:	430b      	orrs	r3, r1
 800667e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006686:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800668a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d037      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b4:	d00e      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ba:	d816      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x776>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d018      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80066c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066c4:	d111      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c6:	4b82      	ldr	r3, [pc, #520]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	4a81      	ldr	r2, [pc, #516]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066d2:	e00f      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066d8:	3308      	adds	r3, #8
 80066da:	2101      	movs	r1, #1
 80066dc:	4618      	mov	r0, r3
 80066de:	f002 f823 	bl	8008728 <RCCEx_PLL2_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066e8:	e004      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80066f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066fc:	4b74      	ldr	r3, [pc, #464]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006700:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006704:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670a:	4a71      	ldr	r2, [pc, #452]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800670c:	430b      	orrs	r3, r1
 800670e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006710:	e003      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006712:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006716:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800671a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006726:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800672a:	2300      	movs	r3, #0
 800672c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006730:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006734:	460b      	mov	r3, r1
 8006736:	4313      	orrs	r3, r2
 8006738:	d03a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800673a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800673e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006740:	2b03      	cmp	r3, #3
 8006742:	d81d      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006744:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	08006789 	.word	0x08006789
 8006750:	0800675d 	.word	0x0800675d
 8006754:	0800676b 	.word	0x0800676b
 8006758:	08006789 	.word	0x08006789
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675c:	4b5c      	ldr	r3, [pc, #368]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800675e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006760:	4a5b      	ldr	r2, [pc, #364]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006768:	e00f      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800676a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800676e:	3308      	adds	r3, #8
 8006770:	2102      	movs	r1, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f001 ffd8 	bl	8008728 <RCCEx_PLL2_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800677e:	e004      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006786:	e000      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006792:	4b4f      	ldr	r3, [pc, #316]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006796:	f023 0103 	bic.w	r1, r3, #3
 800679a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800679e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a0:	4a4b      	ldr	r2, [pc, #300]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f000 80a0 	beq.w	8006912 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067d2:	4b40      	ldr	r3, [pc, #256]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a3f      	ldr	r2, [pc, #252]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067de:	f7fb fee3 	bl	80025a8 <HAL_GetTick>
 80067e2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e6:	e00b      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e8:	f7fb fede 	bl	80025a8 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b64      	cmp	r3, #100	@ 0x64
 80067f6:	d903      	bls.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067fe:	e005      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006800:	4b34      	ldr	r3, [pc, #208]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0ed      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800680c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006810:	2b00      	cmp	r3, #0
 8006812:	d17a      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006814:	4b2e      	ldr	r3, [pc, #184]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800681c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006820:	4053      	eors	r3, r2
 8006822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d015      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800682a:	4b29      	ldr	r3, [pc, #164]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006832:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006836:	4b26      	ldr	r3, [pc, #152]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683a:	4a25      	ldr	r2, [pc, #148]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006840:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006842:	4b23      	ldr	r3, [pc, #140]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006846:	4a22      	ldr	r2, [pc, #136]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800684c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800684e:	4a20      	ldr	r2, [pc, #128]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006850:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006854:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006856:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800685a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800685e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006862:	d118      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006864:	f7fb fea0 	bl	80025a8 <HAL_GetTick>
 8006868:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686c:	e00d      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686e:	f7fb fe9b 	bl	80025a8 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800687e:	429a      	cmp	r2, r3
 8006880:	d903      	bls.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006888:	e005      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800688a:	4b11      	ldr	r3, [pc, #68]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0eb      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006896:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800689a:	2b00      	cmp	r3, #0
 800689c:	d130      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800689e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ae:	d115      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x968>
 80068b0:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068c0:	091a      	lsrs	r2, r3, #4
 80068c2:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	4a02      	ldr	r2, [pc, #8]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6113      	str	r3, [r2, #16]
 80068cc:	e00c      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80068ce:	bf00      	nop
 80068d0:	58024400 	.word	0x58024400
 80068d4:	58024800 	.word	0x58024800
 80068d8:	00ffffcf 	.word	0x00ffffcf
 80068dc:	4bd4      	ldr	r3, [pc, #848]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	4ad3      	ldr	r2, [pc, #844]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068e6:	6113      	str	r3, [r2, #16]
 80068e8:	4bd1      	ldr	r3, [pc, #836]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	4acd      	ldr	r2, [pc, #820]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fe:	e008      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006900:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006904:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006908:	e003      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800690e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f002 0301 	and.w	r3, r2, #1
 800691e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800692c:	460b      	mov	r3, r1
 800692e:	4313      	orrs	r3, r2
 8006930:	f000 808b 	beq.w	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006934:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693c:	2b28      	cmp	r3, #40	@ 0x28
 800693e:	d86b      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006940:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	08006a21 	.word	0x08006a21
 800694c:	08006a19 	.word	0x08006a19
 8006950:	08006a19 	.word	0x08006a19
 8006954:	08006a19 	.word	0x08006a19
 8006958:	08006a19 	.word	0x08006a19
 800695c:	08006a19 	.word	0x08006a19
 8006960:	08006a19 	.word	0x08006a19
 8006964:	08006a19 	.word	0x08006a19
 8006968:	080069ed 	.word	0x080069ed
 800696c:	08006a19 	.word	0x08006a19
 8006970:	08006a19 	.word	0x08006a19
 8006974:	08006a19 	.word	0x08006a19
 8006978:	08006a19 	.word	0x08006a19
 800697c:	08006a19 	.word	0x08006a19
 8006980:	08006a19 	.word	0x08006a19
 8006984:	08006a19 	.word	0x08006a19
 8006988:	08006a03 	.word	0x08006a03
 800698c:	08006a19 	.word	0x08006a19
 8006990:	08006a19 	.word	0x08006a19
 8006994:	08006a19 	.word	0x08006a19
 8006998:	08006a19 	.word	0x08006a19
 800699c:	08006a19 	.word	0x08006a19
 80069a0:	08006a19 	.word	0x08006a19
 80069a4:	08006a19 	.word	0x08006a19
 80069a8:	08006a21 	.word	0x08006a21
 80069ac:	08006a19 	.word	0x08006a19
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006a19 	.word	0x08006a19
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006a21 	.word	0x08006a21
 80069cc:	08006a19 	.word	0x08006a19
 80069d0:	08006a19 	.word	0x08006a19
 80069d4:	08006a19 	.word	0x08006a19
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006a19 	.word	0x08006a19
 80069e0:	08006a19 	.word	0x08006a19
 80069e4:	08006a19 	.word	0x08006a19
 80069e8:	08006a21 	.word	0x08006a21
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069f0:	3308      	adds	r3, #8
 80069f2:	2101      	movs	r1, #1
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 fe97 	bl	8008728 <RCCEx_PLL2_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a00:	e00f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a06:	3328      	adds	r3, #40	@ 0x28
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 ff3e 	bl	800888c <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a16:	e004      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a2a:	4b81      	ldr	r3, [pc, #516]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3a:	4a7d      	ldr	r2, [pc, #500]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f002 0302 	and.w	r3, r2, #2
 8006a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d042      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d825      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006a74:	a201      	add	r2, pc, #4	@ (adr r2, 8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006ac9 	.word	0x08006ac9
 8006a80:	08006a95 	.word	0x08006a95
 8006a84:	08006aab 	.word	0x08006aab
 8006a88:	08006ac9 	.word	0x08006ac9
 8006a8c:	08006ac9 	.word	0x08006ac9
 8006a90:	08006ac9 	.word	0x08006ac9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a98:	3308      	adds	r3, #8
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fe43 	bl	8008728 <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006aa8:	e00f      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aae:	3328      	adds	r3, #40	@ 0x28
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 feea 	bl	800888c <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ad2:	4b57      	ldr	r3, [pc, #348]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad6:	f023 0107 	bic.w	r1, r3, #7
 8006ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ae0:	4a53      	ldr	r2, [pc, #332]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ae6:	e003      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006aec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f002 0304 	and.w	r3, r2, #4
 8006afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	d044      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b18:	2b05      	cmp	r3, #5
 8006b1a:	d825      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b24 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b71 	.word	0x08006b71
 8006b28:	08006b3d 	.word	0x08006b3d
 8006b2c:	08006b53 	.word	0x08006b53
 8006b30:	08006b71 	.word	0x08006b71
 8006b34:	08006b71 	.word	0x08006b71
 8006b38:	08006b71 	.word	0x08006b71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b40:	3308      	adds	r3, #8
 8006b42:	2101      	movs	r1, #1
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fdef 	bl	8008728 <RCCEx_PLL2_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b50:	e00f      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b56:	3328      	adds	r3, #40	@ 0x28
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 fe96 	bl	800888c <RCCEx_PLL3_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b66:	e004      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006b6e:	e000      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7e:	f023 0107 	bic.w	r1, r3, #7
 8006b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b8a:	4a29      	ldr	r2, [pc, #164]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f002 0320 	and.w	r3, r2, #32
 8006ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006baa:	2300      	movs	r3, #0
 8006bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	d057      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bc6:	d035      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bcc:	d82c      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd2:	d031      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd8:	d826      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bde:	d02d      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006be0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006be4:	d820      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bea:	d012      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf0:	d81a      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d024      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bfa:	d115      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c00:	3308      	adds	r3, #8
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fd8f 	bl	8008728 <RCCEx_PLL2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c10:	e017      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c16:	3328      	adds	r3, #40	@ 0x28
 8006c18:	2102      	movs	r1, #2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fe36 	bl	800888c <RCCEx_PLL3_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c26:	e00c      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c2e:	e008      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006c30:	58024400 	.word	0x58024400
        break;
 8006c34:	bf00      	nop
 8006c36:	e004      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c38:	bf00      	nop
 8006c3a:	e002      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c3c:	bf00      	nop
 8006c3e:	e000      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c4a:	4bc2      	ldr	r3, [pc, #776]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c5a:	4abe      	ldr	r2, [pc, #760]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d055      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c96:	d033      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006c98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c9c:	d82c      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca2:	d02f      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca8:	d826      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006caa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cae:	d02b      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cb4:	d820      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cba:	d012      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cc0:	d81a      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d022      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cca:	d115      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fd27 	bl	8008728 <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ce0:	e015      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ce6:	3328      	adds	r3, #40	@ 0x28
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fdce 	bl	800888c <RCCEx_PLL3_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006cfe:	e006      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d00:	bf00      	nop
 8006d02:	e004      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d16:	4b8f      	ldr	r3, [pc, #572]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d26:	4a8b      	ldr	r2, [pc, #556]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d2c:	e003      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d055      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d62:	d033      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006d64:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d68:	d82c      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d6e:	d02f      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d74:	d826      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d7a:	d02b      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006d7c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d80:	d820      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d86:	d012      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006d88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d8c:	d81a      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d022      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d96:	d115      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 fcc1 	bl	8008728 <RCCEx_PLL2_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dac:	e015      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006db2:	3328      	adds	r3, #40	@ 0x28
 8006db4:	2102      	movs	r1, #2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fd68 	bl	800888c <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e00a      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006dca:	e006      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dcc:	bf00      	nop
 8006dce:	e004      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dd0:	bf00      	nop
 8006dd2:	e002      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006de2:	4b5c      	ldr	r3, [pc, #368]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006df2:	4a58      	ldr	r2, [pc, #352]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df8:	e003      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f002 0308 	and.w	r3, r2, #8
 8006e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e12:	2300      	movs	r3, #0
 8006e14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e18:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	d01e      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2e:	d10c      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e34:	3328      	adds	r3, #40	@ 0x28
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 fd27 	bl	800888c <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e4a:	4b42      	ldr	r3, [pc, #264]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f002 0310 	and.w	r3, r2, #16
 8006e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e70:	2300      	movs	r3, #0
 8006e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	d01e      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e92:	3328      	adds	r3, #40	@ 0x28
 8006e94:	2102      	movs	r1, #2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fcf8 	bl	800888c <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eb8:	4a26      	ldr	r2, [pc, #152]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ed4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4313      	orrs	r3, r2
 8006edc:	d040      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eea:	d022      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ef0:	d81b      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efa:	d00b      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006efc:	e015      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f02:	3308      	adds	r3, #8
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 fc0e 	bl	8008728 <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f12:	e00f      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f18:	3328      	adds	r3, #40	@ 0x28
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 fcb5 	bl	800888c <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f28:	e004      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10d      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f3c:	4b05      	ldr	r3, [pc, #20]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f40:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f4c:	4a01      	ldr	r2, [pc, #4]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f52:	e005      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f6e:	2300      	movs	r3, #0
 8006f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f76:	460b      	mov	r3, r1
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	d03b      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f88:	d01f      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006f8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f8e:	d818      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f94:	d003      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f9a:	d007      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006f9c:	e011      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9e:	4b64      	ldr	r3, [pc, #400]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	4a63      	ldr	r2, [pc, #396]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006faa:	e00f      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fb0:	3328      	adds	r3, #40	@ 0x28
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 fc69 	bl	800888c <RCCEx_PLL3_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fc0:	e004      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006fc8:	e000      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fcc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fd4:	4b56      	ldr	r3, [pc, #344]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe4:	4a52      	ldr	r2, [pc, #328]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fea:	e003      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ff0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007000:	673b      	str	r3, [r7, #112]	@ 0x70
 8007002:	2300      	movs	r3, #0
 8007004:	677b      	str	r3, [r7, #116]	@ 0x74
 8007006:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800700a:	460b      	mov	r3, r1
 800700c:	4313      	orrs	r3, r2
 800700e:	d031      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701e:	d007      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007020:	e011      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007022:	4b43      	ldr	r3, [pc, #268]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a42      	ldr	r2, [pc, #264]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800702c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800702e:	e00e      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007034:	3308      	adds	r3, #8
 8007036:	2102      	movs	r1, #2
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fb75 	bl	8008728 <RCCEx_PLL2_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007044:	e003      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800704c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007056:	4b36      	ldr	r3, [pc, #216]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800705a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800705e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007064:	4a32      	ldr	r2, [pc, #200]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007066:	430b      	orrs	r3, r1
 8007068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800706a:	e003      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007070:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007074:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007082:	2300      	movs	r3, #0
 8007084:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007086:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800708a:	460b      	mov	r3, r1
 800708c:	4313      	orrs	r3, r2
 800708e:	d00c      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007090:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007094:	3328      	adds	r3, #40	@ 0x28
 8007096:	2102      	movs	r1, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fbf7 	bl	800888c <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80070b8:	2300      	movs	r3, #0
 80070ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80070bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070c0:	460b      	mov	r3, r1
 80070c2:	4313      	orrs	r3, r2
 80070c4:	d03a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070d2:	d018      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80070d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070d8:	d811      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80070da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070de:	d014      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80070e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070e4:	d80b      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d011      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80070ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ee:	d106      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f4:	4a0e      	ldr	r2, [pc, #56]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070fc:	e008      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007104:	e004      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007106:	bf00      	nop
 8007108:	e002      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800710e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007110:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10d      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800711a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007128:	4a01      	ldr	r2, [pc, #4]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800712a:	430b      	orrs	r3, r1
 800712c:	6553      	str	r3, [r2, #84]	@ 0x54
 800712e:	e005      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007134:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007138:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800713c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800714a:	2300      	movs	r3, #0
 800714c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800714e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007158:	4baa      	ldr	r3, [pc, #680]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800715a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007166:	4aa7      	ldr	r2, [pc, #668]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007168:	430b      	orrs	r3, r1
 800716a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800716c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007178:	653b      	str	r3, [r7, #80]	@ 0x50
 800717a:	2300      	movs	r3, #0
 800717c:	657b      	str	r3, [r7, #84]	@ 0x54
 800717e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007188:	4b9e      	ldr	r3, [pc, #632]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007194:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007198:	4a9a      	ldr	r2, [pc, #616]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800719a:	430b      	orrs	r3, r1
 800719c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800719e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80071aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071ac:	2300      	movs	r3, #0
 80071ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071b4:	460b      	mov	r3, r1
 80071b6:	4313      	orrs	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071ba:	4b92      	ldr	r3, [pc, #584]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071be:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c8:	4a8e      	ldr	r2, [pc, #568]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071ca:	430b      	orrs	r3, r1
 80071cc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071da:	643b      	str	r3, [r7, #64]	@ 0x40
 80071dc:	2300      	movs	r3, #0
 80071de:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071e4:	460b      	mov	r3, r1
 80071e6:	4313      	orrs	r3, r2
 80071e8:	d00e      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071ea:	4b86      	ldr	r3, [pc, #536]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	4a85      	ldr	r2, [pc, #532]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071f4:	6113      	str	r3, [r2, #16]
 80071f6:	4b83      	ldr	r3, [pc, #524]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071f8:	6919      	ldr	r1, [r3, #16]
 80071fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007202:	4a80      	ldr	r2, [pc, #512]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007204:	430b      	orrs	r3, r1
 8007206:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007216:	2300      	movs	r3, #0
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800721a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800721e:	460b      	mov	r3, r1
 8007220:	4313      	orrs	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007224:	4b77      	ldr	r3, [pc, #476]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800722c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	4a74      	ldr	r2, [pc, #464]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007234:	430b      	orrs	r3, r1
 8007236:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007244:	633b      	str	r3, [r7, #48]	@ 0x30
 8007246:	2300      	movs	r3, #0
 8007248:	637b      	str	r3, [r7, #52]	@ 0x34
 800724a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800724e:	460b      	mov	r3, r1
 8007250:	4313      	orrs	r3, r2
 8007252:	d00a      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007254:	4b6b      	ldr	r3, [pc, #428]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007258:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800725c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007264:	4a67      	ldr	r2, [pc, #412]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007266:	430b      	orrs	r3, r1
 8007268:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800726a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	2100      	movs	r1, #0
 8007274:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800727c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007280:	460b      	mov	r3, r1
 8007282:	4313      	orrs	r3, r2
 8007284:	d011      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800728a:	3308      	adds	r3, #8
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fa4a 	bl	8008728 <RCCEx_PLL2_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800729a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	2100      	movs	r1, #0
 80072b4:	6239      	str	r1, [r7, #32]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80072bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072c0:	460b      	mov	r3, r1
 80072c2:	4313      	orrs	r3, r2
 80072c4:	d011      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072ca:	3308      	adds	r3, #8
 80072cc:	2101      	movs	r1, #1
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 fa2a 	bl	8008728 <RCCEx_PLL2_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80072da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	2100      	movs	r1, #0
 80072f4:	61b9      	str	r1, [r7, #24]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	61fb      	str	r3, [r7, #28]
 80072fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007300:	460b      	mov	r3, r1
 8007302:	4313      	orrs	r3, r2
 8007304:	d011      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800730a:	3308      	adds	r3, #8
 800730c:	2102      	movs	r1, #2
 800730e:	4618      	mov	r0, r3
 8007310:	f001 fa0a 	bl	8008728 <RCCEx_PLL2_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800731a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007322:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007326:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800732a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	2100      	movs	r1, #0
 8007334:	6139      	str	r1, [r7, #16]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d011      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fa9c 	bl	800888c <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800735a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007366:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800736a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	2100      	movs	r1, #0
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007380:	460b      	mov	r3, r1
 8007382:	4313      	orrs	r3, r2
 8007384:	d011      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800738a:	3328      	adds	r3, #40	@ 0x28
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f001 fa7c 	bl	800888c <RCCEx_PLL3_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800739a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	2100      	movs	r1, #0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073c0:	460b      	mov	r3, r1
 80073c2:	4313      	orrs	r3, r2
 80073c4:	d011      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073ca:	3328      	adds	r3, #40	@ 0x28
 80073cc:	2102      	movs	r1, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 fa5c 	bl	800888c <RCCEx_PLL3_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80073da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80073ea:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e000      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80073fe:	46bd      	mov	sp, r7
 8007400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007404:	58024400 	.word	0x58024400

08007408 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b090      	sub	sp, #64	@ 0x40
 800740c:	af00      	add	r7, sp, #0
 800740e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007416:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800741a:	430b      	orrs	r3, r1
 800741c:	f040 8094 	bne.w	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007420:	4b9e      	ldr	r3, [pc, #632]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	2b04      	cmp	r3, #4
 800742e:	f200 8087 	bhi.w	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007432:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	0800744d 	.word	0x0800744d
 800743c:	08007475 	.word	0x08007475
 8007440:	0800749d 	.word	0x0800749d
 8007444:	08007539 	.word	0x08007539
 8007448:	080074c5 	.word	0x080074c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800744c:	4b93      	ldr	r3, [pc, #588]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007458:	d108      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800745a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800745e:	4618      	mov	r0, r3
 8007460:	f001 f810 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007468:	f000 bd45 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007470:	f000 bd41 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007474:	4b89      	ldr	r3, [pc, #548]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800747c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007480:	d108      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007482:	f107 0318 	add.w	r3, r7, #24
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fd54 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007490:	f000 bd31 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007498:	f000 bd2d 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800749c:	4b7f      	ldr	r3, [pc, #508]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074a8:	d108      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fe94 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074b8:	f000 bd1d 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c0:	f000 bd19 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074c4:	4b75      	ldr	r3, [pc, #468]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074ce:	4b73      	ldr	r3, [pc, #460]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d10c      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d109      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e0:	4b6e      	ldr	r3, [pc, #440]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	4a6d      	ldr	r2, [pc, #436]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f2:	e01f      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074f4:	4b69      	ldr	r3, [pc, #420]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007500:	d106      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007508:	d102      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800750a:	4b66      	ldr	r3, [pc, #408]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800750e:	e011      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007510:	4b62      	ldr	r3, [pc, #392]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751c:	d106      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800751e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007524:	d102      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007526:	4b60      	ldr	r3, [pc, #384]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007530:	f000 bce1 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007534:	f000 bcdf 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007538:	4b5c      	ldr	r3, [pc, #368]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753c:	f000 bcdb 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007544:	f000 bcd7 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007550:	430b      	orrs	r3, r1
 8007552:	f040 80ad 	bne.w	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007556:	4b51      	ldr	r3, [pc, #324]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800755a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800755e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007566:	d056      	beq.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800756e:	f200 8090 	bhi.w	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	2bc0      	cmp	r3, #192	@ 0xc0
 8007576:	f000 8088 	beq.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	2bc0      	cmp	r3, #192	@ 0xc0
 800757e:	f200 8088 	bhi.w	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007584:	2b80      	cmp	r3, #128	@ 0x80
 8007586:	d032      	beq.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	2b80      	cmp	r3, #128	@ 0x80
 800758c:	f200 8081 	bhi.w	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	2b40      	cmp	r3, #64	@ 0x40
 800759a:	d014      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800759c:	e079      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800759e:	4b3f      	ldr	r3, [pc, #252]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075aa:	d108      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 ff67 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ba:	f000 bc9c 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c2:	f000 bc98 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075c6:	4b35      	ldr	r3, [pc, #212]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075d2:	d108      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075d4:	f107 0318 	add.w	r3, r7, #24
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fcab 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e2:	f000 bc88 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ea:	f000 bc84 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075ee:	4b2b      	ldr	r3, [pc, #172]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fa:	d108      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075fc:	f107 030c 	add.w	r3, r7, #12
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fdeb 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800760a:	f000 bc74 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007612:	f000 bc70 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007616:	4b21      	ldr	r3, [pc, #132]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800761e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007620:	4b1e      	ldr	r3, [pc, #120]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b04      	cmp	r3, #4
 800762a:	d10c      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007632:	4b1a      	ldr	r3, [pc, #104]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	08db      	lsrs	r3, r3, #3
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	4a18      	ldr	r2, [pc, #96]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800763e:	fa22 f303 	lsr.w	r3, r2, r3
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007644:	e01f      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007646:	4b15      	ldr	r3, [pc, #84]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800764e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007652:	d106      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800765a:	d102      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800765c:	4b11      	ldr	r3, [pc, #68]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007660:	e011      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007662:	4b0e      	ldr	r3, [pc, #56]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800766a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800766e:	d106      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007676:	d102      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007678:	4b0b      	ldr	r3, [pc, #44]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800767c:	e003      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007682:	f000 bc38 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007686:	f000 bc36 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800768a:	4b08      	ldr	r3, [pc, #32]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800768c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768e:	f000 bc32 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007696:	f000 bc2e 	b.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
 80076a0:	03d09000 	.word	0x03d09000
 80076a4:	003d0900 	.word	0x003d0900
 80076a8:	017d7840 	.word	0x017d7840
 80076ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80076b8:	430b      	orrs	r3, r1
 80076ba:	f040 809c 	bne.w	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80076be:	4b9e      	ldr	r3, [pc, #632]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ce:	d054      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076d6:	f200 808b 	bhi.w	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076e0:	f000 8083 	beq.w	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076ea:	f200 8081 	bhi.w	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f4:	d02f      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fc:	d878      	bhi.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800770a:	d012      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800770c:	e070      	b.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800770e:	4b8a      	ldr	r3, [pc, #552]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800771a:	d107      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800771c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007720:	4618      	mov	r0, r3
 8007722:	f000 feaf 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772a:	e3e4      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007730:	e3e1      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007732:	4b81      	ldr	r3, [pc, #516]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800773a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800773e:	d107      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007740:	f107 0318 	add.w	r3, r7, #24
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fbf5 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800774e:	e3d2      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007754:	e3cf      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007756:	4b78      	ldr	r3, [pc, #480]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800775e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007762:	d107      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007764:	f107 030c 	add.w	r3, r7, #12
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fd37 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007772:	e3c0      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007778:	e3bd      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800777a:	4b6f      	ldr	r3, [pc, #444]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800777c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007784:	4b6c      	ldr	r3, [pc, #432]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b04      	cmp	r3, #4
 800778e:	d10c      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007796:	4b68      	ldr	r3, [pc, #416]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	4a66      	ldr	r2, [pc, #408]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077a2:	fa22 f303 	lsr.w	r3, r2, r3
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a8:	e01e      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077aa:	4b63      	ldr	r3, [pc, #396]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b6:	d106      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077be:	d102      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077c0:	4b5f      	ldr	r3, [pc, #380]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077c4:	e010      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077c6:	4b5c      	ldr	r3, [pc, #368]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077d2:	d106      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077dc:	4b59      	ldr	r3, [pc, #356]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077e0:	e002      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077e6:	e386      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077e8:	e385      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077ea:	4b57      	ldr	r3, [pc, #348]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ee:	e382      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f4:	e37f      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80077fe:	430b      	orrs	r3, r1
 8007800:	f040 80a7 	bne.w	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007804:	4b4c      	ldr	r3, [pc, #304]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007808:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800780c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007814:	d055      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781c:	f200 8096 	bhi.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007826:	f000 8084 	beq.w	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007830:	f200 808c 	bhi.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783a:	d030      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007842:	f200 8083 	bhi.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007852:	d012      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007854:	e07a      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007856:	4b38      	ldr	r3, [pc, #224]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800785e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007862:	d107      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fe0b 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800786e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007872:	e340      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007878:	e33d      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800787a:	4b2f      	ldr	r3, [pc, #188]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007886:	d107      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007888:	f107 0318 	add.w	r3, r7, #24
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fb51 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007896:	e32e      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789c:	e32b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800789e:	4b26      	ldr	r3, [pc, #152]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078aa:	d107      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ac:	f107 030c 	add.w	r3, r7, #12
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fc93 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ba:	e31c      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c0:	e319      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d10c      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078de:	4b16      	ldr	r3, [pc, #88]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	08db      	lsrs	r3, r3, #3
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	4a14      	ldr	r2, [pc, #80]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078ea:	fa22 f303 	lsr.w	r3, r2, r3
 80078ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f0:	e01e      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078f2:	4b11      	ldr	r3, [pc, #68]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078fe:	d106      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007906:	d102      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007908:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800790c:	e010      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800790e:	4b0a      	ldr	r3, [pc, #40]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800791a:	d106      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800791c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800791e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007922:	d102      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007924:	4b07      	ldr	r3, [pc, #28]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007928:	e002      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800792e:	e2e2      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007930:	e2e1      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007932:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007936:	e2de      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007938:	58024400 	.word	0x58024400
 800793c:	03d09000 	.word	0x03d09000
 8007940:	003d0900 	.word	0x003d0900
 8007944:	017d7840 	.word	0x017d7840
 8007948:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007950:	e2d1      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007956:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800795a:	430b      	orrs	r3, r1
 800795c:	f040 809c 	bne.w	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007960:	4b93      	ldr	r3, [pc, #588]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007964:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007968:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007970:	d054      	beq.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007978:	f200 808b 	bhi.w	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007982:	f000 8083 	beq.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800798c:	f200 8081 	bhi.w	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007996:	d02f      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800799e:	d878      	bhi.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80079a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ac:	d012      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80079ae:	e070      	b.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079b0:	4b7f      	ldr	r3, [pc, #508]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079bc:	d107      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fd5e 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079cc:	e293      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d2:	e290      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079d4:	4b76      	ldr	r3, [pc, #472]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e0:	d107      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e2:	f107 0318 	add.w	r3, r7, #24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 faa4 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f0:	e281      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f6:	e27e      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079f8:	4b6d      	ldr	r3, [pc, #436]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a04:	d107      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fbe6 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a14:	e26f      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1a:	e26c      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a1c:	4b64      	ldr	r3, [pc, #400]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a24:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a26:	4b62      	ldr	r3, [pc, #392]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d10c      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d109      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a38:	4b5d      	ldr	r3, [pc, #372]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	08db      	lsrs	r3, r3, #3
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	4a5c      	ldr	r2, [pc, #368]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
 8007a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a4a:	e01e      	b.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a4c:	4b58      	ldr	r3, [pc, #352]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a58:	d106      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a60:	d102      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a62:	4b55      	ldr	r3, [pc, #340]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a66:	e010      	b.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a68:	4b51      	ldr	r3, [pc, #324]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a74:	d106      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7c:	d102      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a82:	e002      	b.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a88:	e235      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a8a:	e234      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a90:	e231      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a96:	e22e      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a9c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	f040 808f 	bne.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007aa6:	4b42      	ldr	r3, [pc, #264]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aaa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ab6:	d06b      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007abe:	d874      	bhi.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ac6:	d056      	beq.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ace:	d86c      	bhi.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ad6:	d03b      	beq.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ade:	d864      	bhi.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ae6:	d021      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aee:	d85c      	bhi.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007afc:	d004      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007afe:	e054      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7fe fa0c 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007b04:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b06:	e1f6      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b08:	4b29      	ldr	r3, [pc, #164]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b14:	d107      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fa0a 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b24:	e1e7      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b2a:	e1e4      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b2c:	4b20      	ldr	r3, [pc, #128]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b38:	d107      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b3a:	f107 030c 	add.w	r3, r7, #12
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fb4c 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b48:	e1d5      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b4e:	e1d2      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b50:	4b17      	ldr	r3, [pc, #92]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d109      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b5c:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	08db      	lsrs	r3, r3, #3
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	4a13      	ldr	r2, [pc, #76]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b68:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b6e:	e1c2      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b74:	e1bf      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b76:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b82:	d102      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b88:	e1b5      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8e:	e1b2      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b9c:	d102      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b9e:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba2:	e1a8      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba8:	e1a5      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bae:	e1a2      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	03d09000 	.word	0x03d09000
 8007bb8:	003d0900 	.word	0x003d0900
 8007bbc:	017d7840 	.word	0x017d7840
 8007bc0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	d173      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007bd0:	4b9c      	ldr	r3, [pc, #624]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bd8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be0:	d02f      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be8:	d863      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf6:	d012      	beq.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bf8:	e05b      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bfa:	4b92      	ldr	r3, [pc, #584]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c06:	d107      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c08:	f107 0318 	add.w	r3, r7, #24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f991 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c16:	e16e      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c1c:	e16b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c1e:	4b89      	ldr	r3, [pc, #548]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c2a:	d107      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2c:	f107 030c 	add.w	r3, r7, #12
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fad3 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c3a:	e15c      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c40:	e159      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c42:	4b80      	ldr	r3, [pc, #512]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c4c:	4b7d      	ldr	r3, [pc, #500]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d10c      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c5e:	4b79      	ldr	r3, [pc, #484]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	08db      	lsrs	r3, r3, #3
 8007c64:	f003 0303 	and.w	r3, r3, #3
 8007c68:	4a77      	ldr	r2, [pc, #476]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c70:	e01e      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c72:	4b74      	ldr	r3, [pc, #464]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7e:	d106      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c86:	d102      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c88:	4b70      	ldr	r3, [pc, #448]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c8c:	e010      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c9a:	d106      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ca2:	d102      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca8:	e002      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cae:	e122      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cb0:	e121      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb6:	e11e      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cbc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	d133      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ccc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cda:	d012      	beq.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cdc:	e023      	b.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cde:	4b59      	ldr	r3, [pc, #356]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cea:	d107      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fbc7 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfa:	e0fc      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d00:	e0f9      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d02:	4b50      	ldr	r3, [pc, #320]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d0e:	d107      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d10:	f107 0318 	add.w	r3, r7, #24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f90d 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1e:	e0ea      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d24:	e0e7      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2a:	e0e4      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d30:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d34:	430b      	orrs	r3, r1
 8007d36:	f040 808d 	bne.w	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d3a:	4b42      	ldr	r3, [pc, #264]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d4a:	d06b      	beq.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d52:	d874      	bhi.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5a:	d056      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d62:	d86c      	bhi.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d6a:	d03b      	beq.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d72:	d864      	bhi.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d7a:	d021      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d82:	d85c      	bhi.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d90:	d004      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d92:	e054      	b.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d94:	f000 f8b8 	bl	8007f08 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d98:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d9a:	e0ac      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d9c:	4b29      	ldr	r3, [pc, #164]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007da8:	d107      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007daa:	f107 0318 	add.w	r3, r7, #24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f8c0 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db8:	e09d      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dbe:	e09a      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dc0:	4b20      	ldr	r3, [pc, #128]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dcc:	d107      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dce:	f107 030c 	add.w	r3, r7, #12
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fa02 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ddc:	e08b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de2:	e088      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007de4:	4b17      	ldr	r3, [pc, #92]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d109      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007df0:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	4a13      	ldr	r2, [pc, #76]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e02:	e078      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	e075      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e16:	d102      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007e18:	4b0c      	ldr	r3, [pc, #48]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1c:	e06b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e22:	e068      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e30:	d102      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e32:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e36:	e05e      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3c:	e05b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e42:	e058      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e44:	58024400 	.word	0x58024400
 8007e48:	03d09000 	.word	0x03d09000
 8007e4c:	003d0900 	.word	0x003d0900
 8007e50:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e58:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	d148      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e60:	4b27      	ldr	r3, [pc, #156]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e70:	d02a      	beq.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e78:	d838      	bhi.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e86:	d00d      	beq.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e88:	e030      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e96:	d102      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e98:	4b1a      	ldr	r3, [pc, #104]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9c:	e02b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea2:	e028      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ea4:	4b16      	ldr	r3, [pc, #88]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fae4 	bl	8008484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec0:	e019      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec6:	e016      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed4:	d107      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed6:	f107 0318 	add.w	r3, r7, #24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f82a 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ee4:	e007      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eea:	e004      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e001      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3740      	adds	r7, #64	@ 0x40
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	58024400 	.word	0x58024400
 8007f04:	017d7840 	.word	0x017d7840

08007f08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f0c:	f7fd ffd6 	bl	8005ebc <HAL_RCC_GetHCLKFreq>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	091b      	lsrs	r3, r3, #4
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	4904      	ldr	r1, [pc, #16]	@ (8007f30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f1e:	5ccb      	ldrb	r3, [r1, r3]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	0800f890 	.word	0x0800f890

08007f34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b089      	sub	sp, #36	@ 0x24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f3c:	4ba1      	ldr	r3, [pc, #644]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f46:	4b9f      	ldr	r3, [pc, #636]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4a:	0b1b      	lsrs	r3, r3, #12
 8007f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f52:	4b9c      	ldr	r3, [pc, #624]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f56:	091b      	lsrs	r3, r3, #4
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f5e:	4b99      	ldr	r3, [pc, #612]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f62:	08db      	lsrs	r3, r3, #3
 8007f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8111 	beq.w	80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	f000 8083 	beq.w	8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	f200 80a1 	bhi.w	80080d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d056      	beq.n	800804c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f9e:	e099      	b.n	80080d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fa0:	4b88      	ldr	r3, [pc, #544]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d02d      	beq.n	8008008 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fac:	4b85      	ldr	r3, [pc, #532]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	08db      	lsrs	r3, r3, #3
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	4a84      	ldr	r2, [pc, #528]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fde:	ee07 3a90 	vmov	s15, r3
 8007fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008006:	e087      	b.n	8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008012:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801a:	4b6a      	ldr	r3, [pc, #424]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802a:	ed97 6a03 	vldr	s12, [r7, #12]
 800802e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800803e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800804a:	e065      	b.n	8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	ee07 3a90 	vmov	s15, r3
 8008052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008056:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800805a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800805e:	4b59      	ldr	r3, [pc, #356]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800806e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008072:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800807e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800808e:	e043      	b.n	8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800809e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a2:	4b48      	ldr	r3, [pc, #288]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080d2:	e021      	b.n	8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e6:	4b37      	ldr	r3, [pc, #220]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800810a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008116:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008118:	4b2a      	ldr	r3, [pc, #168]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	0a5b      	lsrs	r3, r3, #9
 800811e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800812e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008132:	edd7 6a07 	vldr	s13, [r7, #28]
 8008136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800813a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800813e:	ee17 2a90 	vmov	r2, s15
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008146:	4b1f      	ldr	r3, [pc, #124]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814a:	0c1b      	lsrs	r3, r3, #16
 800814c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008150:	ee07 3a90 	vmov	s15, r3
 8008154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800815c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008160:	edd7 6a07 	vldr	s13, [r7, #28]
 8008164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800816c:	ee17 2a90 	vmov	r2, s15
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008174:	4b13      	ldr	r3, [pc, #76]	@ (80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	0e1b      	lsrs	r3, r3, #24
 800817a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800818a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800818e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800819a:	ee17 2a90 	vmov	r2, s15
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081a2:	e008      	b.n	80081b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	609a      	str	r2, [r3, #8]
}
 80081b6:	bf00      	nop
 80081b8:	3724      	adds	r7, #36	@ 0x24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400
 80081c8:	03d09000 	.word	0x03d09000
 80081cc:	46000000 	.word	0x46000000
 80081d0:	4c742400 	.word	0x4c742400
 80081d4:	4a742400 	.word	0x4a742400
 80081d8:	4bbebc20 	.word	0x4bbebc20

080081dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081dc:	b480      	push	{r7}
 80081de:	b089      	sub	sp, #36	@ 0x24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081e4:	4ba1      	ldr	r3, [pc, #644]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081ee:	4b9f      	ldr	r3, [pc, #636]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	0d1b      	lsrs	r3, r3, #20
 80081f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081fa:	4b9c      	ldr	r3, [pc, #624]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008206:	4b99      	ldr	r3, [pc, #612]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800820a:	08db      	lsrs	r3, r3, #3
 800820c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8111 	beq.w	800844c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f000 8083 	beq.w	8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b02      	cmp	r3, #2
 8008236:	f200 80a1 	bhi.w	800837c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d056      	beq.n	80082f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008246:	e099      	b.n	800837c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008248:	4b88      	ldr	r3, [pc, #544]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d02d      	beq.n	80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008254:	4b85      	ldr	r3, [pc, #532]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	08db      	lsrs	r3, r3, #3
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	4a84      	ldr	r2, [pc, #528]	@ (8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008260:	fa22 f303 	lsr.w	r3, r2, r3
 8008264:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b7b      	ldr	r3, [pc, #492]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008292:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082ae:	e087      	b.n	80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008478 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c2:	4b6a      	ldr	r3, [pc, #424]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082f2:	e065      	b.n	80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800847c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008306:	4b59      	ldr	r3, [pc, #356]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	ed97 6a03 	vldr	s12, [r7, #12]
 800831a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800831e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008336:	e043      	b.n	80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834a:	4b48      	ldr	r3, [pc, #288]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835a:	ed97 6a03 	vldr	s12, [r7, #12]
 800835e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800836e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800837a:	e021      	b.n	80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800847c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800838a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838e:	4b37      	ldr	r3, [pc, #220]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839e:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083c0:	4b2a      	ldr	r3, [pc, #168]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	0a5b      	lsrs	r3, r3, #9
 80083c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083da:	edd7 6a07 	vldr	s13, [r7, #28]
 80083de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e6:	ee17 2a90 	vmov	r2, s15
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083ee:	4b1f      	ldr	r3, [pc, #124]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008408:	edd7 6a07 	vldr	s13, [r7, #28]
 800840c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008414:	ee17 2a90 	vmov	r2, s15
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800841c:	4b13      	ldr	r3, [pc, #76]	@ (800846c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008420:	0e1b      	lsrs	r3, r3, #24
 8008422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008436:	edd7 6a07 	vldr	s13, [r7, #28]
 800843a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008442:	ee17 2a90 	vmov	r2, s15
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800844a:	e008      	b.n	800845e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
}
 800845e:	bf00      	nop
 8008460:	3724      	adds	r7, #36	@ 0x24
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
 8008470:	03d09000 	.word	0x03d09000
 8008474:	46000000 	.word	0x46000000
 8008478:	4c742400 	.word	0x4c742400
 800847c:	4a742400 	.word	0x4a742400
 8008480:	4bbebc20 	.word	0x4bbebc20

08008484 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008484:	b480      	push	{r7}
 8008486:	b089      	sub	sp, #36	@ 0x24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800848c:	4ba0      	ldr	r3, [pc, #640]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800848e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008496:	4b9e      	ldr	r3, [pc, #632]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849a:	091b      	lsrs	r3, r3, #4
 800849c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084ac:	4b98      	ldr	r3, [pc, #608]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b0:	08db      	lsrs	r3, r3, #3
 80084b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	fb02 f303 	mul.w	r3, r2, r3
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 8111 	beq.w	80086f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	f000 8083 	beq.w	80085de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	f200 80a1 	bhi.w	8008622 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d056      	beq.n	800859a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084ec:	e099      	b.n	8008622 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ee:	4b88      	ldr	r3, [pc, #544]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d02d      	beq.n	8008556 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084fa:	4b85      	ldr	r3, [pc, #532]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	4a83      	ldr	r2, [pc, #524]	@ (8008714 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008506:	fa22 f303 	lsr.w	r3, r2, r3
 800850a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008524:	4b7a      	ldr	r3, [pc, #488]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008534:	ed97 6a03 	vldr	s12, [r7, #12]
 8008538:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800853c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008550:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008554:	e087      	b.n	8008666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008560:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800871c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008568:	4b69      	ldr	r3, [pc, #420]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800856a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008578:	ed97 6a03 	vldr	s12, [r7, #12]
 800857c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800858c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008594:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008598:	e065      	b.n	8008666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	ee07 3a90 	vmov	s15, r3
 80085a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008720 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80085a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ac:	4b58      	ldr	r3, [pc, #352]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085dc:	e043      	b.n	8008666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	ee07 3a90 	vmov	s15, r3
 80085e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008724 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f0:	4b47      	ldr	r3, [pc, #284]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008600:	ed97 6a03 	vldr	s12, [r7, #12]
 8008604:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008610:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008620:	e021      	b.n	8008666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800871c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008634:	4b36      	ldr	r3, [pc, #216]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008644:	ed97 6a03 	vldr	s12, [r7, #12]
 8008648:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800864c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008660:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008664:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008666:	4b2a      	ldr	r3, [pc, #168]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866a:	0a5b      	lsrs	r3, r3, #9
 800866c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800867c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008680:	edd7 6a07 	vldr	s13, [r7, #28]
 8008684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868c:	ee17 2a90 	vmov	r2, s15
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008694:	4b1e      	ldr	r3, [pc, #120]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ba:	ee17 2a90 	vmov	r2, s15
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086c2:	4b13      	ldr	r3, [pc, #76]	@ (8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c6:	0e1b      	lsrs	r3, r3, #24
 80086c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e8:	ee17 2a90 	vmov	r2, s15
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086f0:	e008      	b.n	8008704 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	609a      	str	r2, [r3, #8]
}
 8008704:	bf00      	nop
 8008706:	3724      	adds	r7, #36	@ 0x24
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	58024400 	.word	0x58024400
 8008714:	03d09000 	.word	0x03d09000
 8008718:	46000000 	.word	0x46000000
 800871c:	4c742400 	.word	0x4c742400
 8008720:	4a742400 	.word	0x4a742400
 8008724:	4bbebc20 	.word	0x4bbebc20

08008728 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008736:	4b53      	ldr	r3, [pc, #332]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	2b03      	cmp	r3, #3
 8008740:	d101      	bne.n	8008746 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e099      	b.n	800887a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008746:	4b4f      	ldr	r3, [pc, #316]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a4e      	ldr	r2, [pc, #312]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800874c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008752:	f7f9 ff29 	bl	80025a8 <HAL_GetTick>
 8008756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008758:	e008      	b.n	800876c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800875a:	f7f9 ff25 	bl	80025a8 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e086      	b.n	800887a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800876c:	4b45      	ldr	r3, [pc, #276]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1f0      	bne.n	800875a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008778:	4b42      	ldr	r3, [pc, #264]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800877a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	031b      	lsls	r3, r3, #12
 8008786:	493f      	ldr	r1, [pc, #252]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008788:	4313      	orrs	r3, r2
 800878a:	628b      	str	r3, [r1, #40]	@ 0x28
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	3b01      	subs	r3, #1
 8008792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	3b01      	subs	r3, #1
 800879c:	025b      	lsls	r3, r3, #9
 800879e:	b29b      	uxth	r3, r3
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	041b      	lsls	r3, r3, #16
 80087aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	061b      	lsls	r3, r3, #24
 80087b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087bc:	4931      	ldr	r1, [pc, #196]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087c2:	4b30      	ldr	r3, [pc, #192]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	492d      	ldr	r1, [pc, #180]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	f023 0220 	bic.w	r2, r3, #32
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	4928      	ldr	r1, [pc, #160]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087e6:	4b27      	ldr	r3, [pc, #156]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	4a26      	ldr	r2, [pc, #152]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087ec:	f023 0310 	bic.w	r3, r3, #16
 80087f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087f2:	4b24      	ldr	r3, [pc, #144]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087f6:	4b24      	ldr	r3, [pc, #144]	@ (8008888 <RCCEx_PLL2_Config+0x160>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	69d2      	ldr	r2, [r2, #28]
 80087fe:	00d2      	lsls	r2, r2, #3
 8008800:	4920      	ldr	r1, [pc, #128]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008802:	4313      	orrs	r3, r2
 8008804:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008806:	4b1f      	ldr	r3, [pc, #124]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	4a1e      	ldr	r2, [pc, #120]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800880c:	f043 0310 	orr.w	r3, r3, #16
 8008810:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008818:	4b1a      	ldr	r3, [pc, #104]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800881a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881c:	4a19      	ldr	r2, [pc, #100]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800881e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008822:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008824:	e00f      	b.n	8008846 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d106      	bne.n	800883a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800882c:	4b15      	ldr	r3, [pc, #84]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800882e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008830:	4a14      	ldr	r2, [pc, #80]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008838:	e005      	b.n	8008846 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883e:	4a11      	ldr	r2, [pc, #68]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008844:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008846:	4b0f      	ldr	r3, [pc, #60]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a0e      	ldr	r2, [pc, #56]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800884c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008852:	f7f9 fea9 	bl	80025a8 <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008858:	e008      	b.n	800886c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800885a:	f7f9 fea5 	bl	80025a8 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e006      	b.n	800887a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800886c:	4b05      	ldr	r3, [pc, #20]	@ (8008884 <RCCEx_PLL2_Config+0x15c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0f0      	beq.n	800885a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	58024400 	.word	0x58024400
 8008888:	ffff0007 	.word	0xffff0007

0800888c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800889a:	4b53      	ldr	r3, [pc, #332]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 800889c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d101      	bne.n	80088aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e099      	b.n	80089de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088aa:	4b4f      	ldr	r3, [pc, #316]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a4e      	ldr	r2, [pc, #312]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80088b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b6:	f7f9 fe77 	bl	80025a8 <HAL_GetTick>
 80088ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088bc:	e008      	b.n	80088d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088be:	f7f9 fe73 	bl	80025a8 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e086      	b.n	80089de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088d0:	4b45      	ldr	r3, [pc, #276]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f0      	bne.n	80088be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088dc:	4b42      	ldr	r3, [pc, #264]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80088de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	051b      	lsls	r3, r3, #20
 80088ea:	493f      	ldr	r1, [pc, #252]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	3b01      	subs	r3, #1
 8008900:	025b      	lsls	r3, r3, #9
 8008902:	b29b      	uxth	r3, r3
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	3b01      	subs	r3, #1
 800890c:	041b      	lsls	r3, r3, #16
 800890e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	3b01      	subs	r3, #1
 800891a:	061b      	lsls	r3, r3, #24
 800891c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008920:	4931      	ldr	r1, [pc, #196]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008926:	4b30      	ldr	r3, [pc, #192]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	492d      	ldr	r1, [pc, #180]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008934:	4313      	orrs	r3, r2
 8008936:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008938:	4b2b      	ldr	r3, [pc, #172]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	4928      	ldr	r1, [pc, #160]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008946:	4313      	orrs	r3, r2
 8008948:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800894a:	4b27      	ldr	r3, [pc, #156]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	4a26      	ldr	r2, [pc, #152]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008956:	4b24      	ldr	r3, [pc, #144]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800895a:	4b24      	ldr	r3, [pc, #144]	@ (80089ec <RCCEx_PLL3_Config+0x160>)
 800895c:	4013      	ands	r3, r2
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	69d2      	ldr	r2, [r2, #28]
 8008962:	00d2      	lsls	r2, r2, #3
 8008964:	4920      	ldr	r1, [pc, #128]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800896a:	4b1f      	ldr	r3, [pc, #124]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 800896c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896e:	4a1e      	ldr	r2, [pc, #120]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008974:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800897c:	4b1a      	ldr	r3, [pc, #104]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	4a19      	ldr	r2, [pc, #100]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008988:	e00f      	b.n	80089aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d106      	bne.n	800899e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008990:	4b15      	ldr	r3, [pc, #84]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	4a14      	ldr	r2, [pc, #80]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 8008996:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800899a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800899c:	e005      	b.n	80089aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800899e:	4b12      	ldr	r3, [pc, #72]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	4a11      	ldr	r2, [pc, #68]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80089a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089aa:	4b0f      	ldr	r3, [pc, #60]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a0e      	ldr	r2, [pc, #56]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80089b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b6:	f7f9 fdf7 	bl	80025a8 <HAL_GetTick>
 80089ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089bc:	e008      	b.n	80089d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089be:	f7f9 fdf3 	bl	80025a8 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e006      	b.n	80089de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089d0:	4b05      	ldr	r3, [pc, #20]	@ (80089e8 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0f0      	beq.n	80089be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	58024400 	.word	0x58024400
 80089ec:	ffff0007 	.word	0xffff0007

080089f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	@ 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e075      	b.n	8008aee <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d105      	bne.n	8008a1a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7f9 fb39 	bl	800208c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f868 	bl	8008af8 <HAL_SD_InitCard>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e05d      	b.n	8008aee <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008a32:	f107 0308 	add.w	r3, r7, #8
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fdaf 	bl	800959c <HAL_SD_GetCardStatus>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e052      	b.n	8008aee <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a48:	7e3b      	ldrb	r3, [r7, #24]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a4e:	7e7b      	ldrb	r3, [r7, #25]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10a      	bne.n	8008a72 <HAL_SD_Init+0x82>
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <HAL_SD_Init+0x78>
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a70:	e00b      	b.n	8008a8a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d104      	bne.n	8008a84 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a80:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a82:	e002      	b.n	8008a8a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fe6d 	bl	8009770 <HAL_SD_ConfigWideBusOperation>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e026      	b.n	8008aee <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008aa0:	f7f9 fd82 	bl	80025a8 <HAL_GetTick>
 8008aa4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008aa6:	e011      	b.n	8008acc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008aa8:	f7f9 fd7e 	bl	80025a8 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d109      	bne.n	8008acc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008abe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e010      	b.n	8008aee <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 ff61 	bl	8009994 <HAL_SD_GetCardState>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d1e7      	bne.n	8008aa8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3728      	adds	r7, #40	@ 0x28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b08d      	sub	sp, #52	@ 0x34
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b10:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008b14:	f04f 0100 	mov.w	r1, #0
 8008b18:	f7fe fc76 	bl	8007408 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b1c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d109      	bne.n	8008b38 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b32:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e070      	b.n	8008c1a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	4a39      	ldr	r2, [pc, #228]	@ (8008c24 <HAL_SD_InitCard+0x12c>)
 8008b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b42:	091b      	lsrs	r3, r3, #4
 8008b44:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681c      	ldr	r4, [r3, #0]
 8008b4a:	466a      	mov	r2, sp
 8008b4c:	f107 0318 	add.w	r3, r7, #24
 8008b50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b54:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b58:	f107 030c 	add.w	r3, r7, #12
 8008b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f003 f882 	bl	800bc68 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f003 f8c5 	bl	800bcf8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008b86:	4a28      	ldr	r2, [pc, #160]	@ (8008c28 <HAL_SD_InitCard+0x130>)
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	3301      	adds	r3, #1
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f9 fd15 	bl	80025c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 ffea 	bl	8009b70 <SD_PowerON>
 8008b9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e02e      	b.n	8008c1a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 ff09 	bl	80099d4 <SD_InitCard>
 8008bc2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e01b      	b.n	8008c1a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008bea:	4618      	mov	r0, r3
 8008bec:	f003 f91a 	bl	800be24 <SDMMC_CmdBlockLength>
 8008bf0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00f      	beq.n	8008c18 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8008c2c <HAL_SD_InitCard+0x134>)
 8008bfe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	372c      	adds	r7, #44	@ 0x2c
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}
 8008c22:	bf00      	nop
 8008c24:	014f8b59 	.word	0x014f8b59
 8008c28:	00012110 	.word	0x00012110
 8008c2c:	1fe00fff 	.word	0x1fe00fff

08008c30 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08c      	sub	sp, #48	@ 0x30
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e08d      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	f040 8086 	bne.w	8008d72 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	441a      	add	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d907      	bls.n	8008c8a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c7e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e074      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2200      	movs	r2, #0
 8008c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	025a      	lsls	r2, r3, #9
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d002      	beq.n	8008cb6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb2:	025b      	lsls	r3, r3, #9
 8008cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	025b      	lsls	r3, r3, #9
 8008cc0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cc2:	2390      	movs	r3, #144	@ 0x90
 8008cc4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f107 0210 	add.w	r2, r7, #16
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f003 f875 	bl	800bdcc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cf0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d90a      	bls.n	8008d1e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2282      	movs	r2, #130	@ 0x82
 8008d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d14:	4618      	mov	r0, r3
 8008d16:	f003 f8cb 	bl	800beb0 <SDMMC_CmdReadMultiBlock>
 8008d1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d1c:	e009      	b.n	8008d32 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2281      	movs	r2, #129	@ 0x81
 8008d22:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f003 f89d 	bl	800be6a <SDMMC_CmdReadSingleBlock>
 8008d30:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d012      	beq.n	8008d5e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8008d7c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008d3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d46:	431a      	orrs	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e00a      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008d6c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e000      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008d72:	2302      	movs	r3, #2
  }
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3730      	adds	r7, #48	@ 0x30
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	1fe00fff 	.word	0x1fe00fff

08008d80 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	@ 0x30
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d107      	bne.n	8008da8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d9c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e08d      	b.n	8008ec4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	f040 8086 	bne.w	8008ec2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d907      	bls.n	8008dda <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dce:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e074      	b.n	8008ec4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2203      	movs	r2, #3
 8008dde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	025a      	lsls	r2, r3, #9
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d002      	beq.n	8008e06 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	025b      	lsls	r3, r3, #9
 8008e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e06:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	025b      	lsls	r3, r3, #9
 8008e10:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e12:	2390      	movs	r3, #144	@ 0x90
 8008e14:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f107 0210 	add.w	r2, r7, #16
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f002 ffcd 	bl	800bdcc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e40:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d90a      	bls.n	8008e6e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	22a0      	movs	r2, #160	@ 0xa0
 8008e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e64:	4618      	mov	r0, r3
 8008e66:	f003 f869 	bl	800bf3c <SDMMC_CmdWriteMultiBlock>
 8008e6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e6c:	e009      	b.n	8008e82 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2290      	movs	r2, #144	@ 0x90
 8008e72:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f003 f83b 	bl	800bef6 <SDMMC_CmdWriteSingleBlock>
 8008e80:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d012      	beq.n	8008eae <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8008ecc <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e96:	431a      	orrs	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e00a      	b.n	8008ec4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e000      	b.n	8008ec4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008ec2:	2302      	movs	r3, #2
  }
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3730      	adds	r7, #48	@ 0x30
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	1fe00fff 	.word	0x1fe00fff

08008ed0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_SD_IRQHandler+0x2e>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 f926 	bl	800a148 <SD_Read_IT>
 8008efc:	e19a      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 80ac 	beq.w	8009066 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f16:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b59      	ldr	r3, [pc, #356]	@ (8009088 <HAL_SD_IRQHandler+0x1b8>)
 8008f24:	400b      	ands	r3, r1
 8008f26:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008f36:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f46:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d038      	beq.n	8008fc4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <HAL_SD_IRQHandler+0x96>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d011      	beq.n	8008f8a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f003 f80a 	bl	800bf84 <SDMMC_CmdStopTransfer>
 8008f70:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f95b 	bl	8009240 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800908c <HAL_SD_IRQHandler+0x1bc>)
 8008f90:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <HAL_SD_IRQHandler+0xe4>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f003 0302 	and.w	r3, r3, #2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f003 fcbd 	bl	800c934 <HAL_SD_RxCpltCallback>
 8008fba:	e13b      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f003 fcaf 	bl	800c920 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fc2:	e137      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8132 	beq.w	8009234 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d104      	bne.n	8008ffc <HAL_SD_IRQHandler+0x12c>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d011      	beq.n	8009020 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f002 ffbf 	bl	800bf84 <SDMMC_CmdStopTransfer>
 8009006:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f910 	bl	8009240 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0310 	and.w	r3, r3, #16
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <HAL_SD_IRQHandler+0x172>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f003 fc6c 	bl	800c920 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <HAL_SD_IRQHandler+0x18e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80eb 	beq.w	8009234 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f003 fc68 	bl	800c934 <HAL_SD_RxCpltCallback>
}
 8009064:	e0e6      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00d      	beq.n	8009090 <HAL_SD_IRQHandler+0x1c0>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0308 	and.w	r3, r3, #8
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 f8a8 	bl	800a1d4 <SD_Write_IT>
 8009084:	e0d6      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
 8009086:	bf00      	nop
 8009088:	ffff3ec5 	.word	0xffff3ec5
 800908c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009096:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 809d 	beq.w	80091da <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b2:	f043 0202 	orr.w	r2, r3, #2
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090cc:	f043 0208 	orr.w	r2, r3, #8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090e6:	f043 0220 	orr.w	r2, r3, #32
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009100:	f043 0210 	orr.w	r2, r3, #16
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a4b      	ldr	r2, [pc, #300]	@ (800923c <HAL_SD_IRQHandler+0x36c>)
 800910e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800911e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800912e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800913e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800914e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f002 ff15 	bl	800bf84 <SDMMC_CmdStopTransfer>
 800915a:	4602      	mov	r2, r0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009174:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800917e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f851 	bl	8009240 <HAL_SD_ErrorCallback>
}
 800919e:	e049      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d044      	beq.n	8009234 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d040      	beq.n	8009234 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80091c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2200      	movs	r2, #0
 80091c8:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f834 	bl	8009240 <HAL_SD_ErrorCallback>
}
 80091d8:	e02c      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d025      	beq.n	8009234 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10c      	bne.n	800921a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0320 	and.w	r3, r3, #32
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 f84a 	bl	800a2a4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009210:	e010      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 f832 	bl	800a27c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009218:	e00c      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0320 	and.w	r3, r3, #32
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f833 	bl	800a290 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800922a:	e003      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f81b 	bl	800a268 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009232:	e7ff      	b.n	8009234 <HAL_SD_IRQHandler+0x364>
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	18000f3a 	.word	0x18000f3a

08009240 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009262:	0f9b      	lsrs	r3, r3, #30
 8009264:	b2da      	uxtb	r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800926e:	0e9b      	lsrs	r3, r3, #26
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	b2da      	uxtb	r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009280:	0e1b      	lsrs	r3, r3, #24
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 0303 	and.w	r3, r3, #3
 8009288:	b2da      	uxtb	r2, r3
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009292:	0c1b      	lsrs	r3, r3, #16
 8009294:	b2da      	uxtb	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092b4:	0d1b      	lsrs	r3, r3, #20
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c0:	0c1b      	lsrs	r3, r3, #16
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d2:	0bdb      	lsrs	r3, r3, #15
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e4:	0b9b      	lsrs	r3, r3, #14
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f6:	0b5b      	lsrs	r3, r3, #13
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009308:	0b1b      	lsrs	r3, r3, #12
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	b2da      	uxtb	r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d163      	bne.n	80093ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009328:	009a      	lsls	r2, r3, #2
 800932a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800932e:	4013      	ands	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009334:	0f92      	lsrs	r2, r2, #30
 8009336:	431a      	orrs	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009340:	0edb      	lsrs	r3, r3, #27
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 0307 	and.w	r3, r3, #7
 8009348:	b2da      	uxtb	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009352:	0e1b      	lsrs	r3, r3, #24
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009364:	0d5b      	lsrs	r3, r3, #21
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	b2da      	uxtb	r2, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009376:	0c9b      	lsrs	r3, r3, #18
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 0307 	and.w	r3, r3, #7
 800937e:	b2da      	uxtb	r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009388:	0bdb      	lsrs	r3, r3, #15
 800938a:	b2db      	uxtb	r3, r3
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	b2da      	uxtb	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	7e1b      	ldrb	r3, [r3, #24]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	3302      	adds	r3, #2
 80093ac:	2201      	movs	r2, #1
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80093b6:	fb03 f202 	mul.w	r2, r3, r2
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	7a1b      	ldrb	r3, [r3, #8]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 030f 	and.w	r3, r3, #15
 80093c8:	2201      	movs	r2, #1
 80093ca:	409a      	lsls	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80093d8:	0a52      	lsrs	r2, r2, #9
 80093da:	fb03 f202 	mul.w	r2, r3, r2
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80093ea:	e031      	b.n	8009450 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d11d      	bne.n	8009430 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f8:	041b      	lsls	r3, r3, #16
 80093fa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009402:	0c1b      	lsrs	r3, r3, #16
 8009404:	431a      	orrs	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	3301      	adds	r3, #1
 8009410:	029a      	lsls	r2, r3, #10
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009424:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	655a      	str	r2, [r3, #84]	@ 0x54
 800942e:	e00f      	b.n	8009450 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a58      	ldr	r2, [pc, #352]	@ (8009598 <HAL_SD_GetCardCSD+0x344>)
 8009436:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800943c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e09d      	b.n	800958c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009454:	0b9b      	lsrs	r3, r3, #14
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	b2da      	uxtb	r2, r3
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009466:	09db      	lsrs	r3, r3, #7
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946e:	b2da      	uxtb	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009478:	b2db      	uxtb	r3, r3
 800947a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800947e:	b2da      	uxtb	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009488:	0fdb      	lsrs	r3, r3, #31
 800948a:	b2da      	uxtb	r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009494:	0f5b      	lsrs	r3, r3, #29
 8009496:	b2db      	uxtb	r3, r3
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	b2da      	uxtb	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094a6:	0e9b      	lsrs	r3, r3, #26
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b8:	0d9b      	lsrs	r3, r3, #22
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ca:	0d5b      	lsrs	r3, r3, #21
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094fa:	0bdb      	lsrs	r3, r3, #15
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	b2da      	uxtb	r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800950e:	0b9b      	lsrs	r3, r3, #14
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009522:	0b5b      	lsrs	r3, r3, #13
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009536:	0b1b      	lsrs	r3, r3, #12
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800954a:	0a9b      	lsrs	r3, r3, #10
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	b2da      	uxtb	r2, r3
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	1fe00fff 	.word	0x1fe00fff

0800959c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b094      	sub	sp, #80	@ 0x50
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d101      	bne.n	80095bc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0a7      	b.n	800970c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095bc:	f107 0308 	add.w	r3, r7, #8
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fb62 	bl	8009c8c <SD_SendSDStatus>
 80095c8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d011      	beq.n	80095f4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a4f      	ldr	r2, [pc, #316]	@ (8009714 <HAL_SD_GetCardStatus+0x178>)
 80095d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80095f2:	e070      	b.n	80096d6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	099b      	lsrs	r3, r3, #6
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	b29b      	uxth	r3, r3
 800961a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800961e:	b29a      	uxth	r2, r3
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	b29b      	uxth	r3, r3
 8009626:	4313      	orrs	r3, r2
 8009628:	b29a      	uxth	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	061a      	lsls	r2, r3, #24
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800963a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009644:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	0e1b      	lsrs	r3, r3, #24
 800964a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	b2da      	uxtb	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b2da      	uxtb	r2, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	0d1b      	lsrs	r3, r3, #20
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 030f 	and.w	r3, r3, #15
 800966c:	b2da      	uxtb	r2, r3
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	0c1b      	lsrs	r3, r3, #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800967c:	b29a      	uxth	r2, r3
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	b29b      	uxth	r3, r3
 8009682:	b2db      	uxtb	r3, r3
 8009684:	b29b      	uxth	r3, r3
 8009686:	4313      	orrs	r3, r2
 8009688:	b29a      	uxth	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	0a9b      	lsrs	r3, r3, #10
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009698:	b2da      	uxtb	r2, r3
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	0a1b      	lsrs	r3, r3, #8
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0303 	and.w	r3, r3, #3
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	091b      	lsrs	r3, r3, #4
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 030f 	and.w	r3, r3, #15
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	0e1b      	lsrs	r3, r3, #24
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096de:	4618      	mov	r0, r3
 80096e0:	f002 fba0 	bl	800be24 <SDMMC_CmdBlockLength>
 80096e4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a08      	ldr	r2, [pc, #32]	@ (8009714 <HAL_SD_GetCardStatus+0x178>)
 80096f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096f8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009708:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800970c:	4618      	mov	r0, r3
 800970e:	3750      	adds	r7, #80	@ 0x50
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	1fe00fff 	.word	0x1fe00fff

08009718 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b08d      	sub	sp, #52	@ 0x34
 8009774:	af02      	add	r7, sp, #8
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2203      	movs	r2, #3
 8009784:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978c:	2b03      	cmp	r3, #3
 800978e:	d02e      	beq.n	80097ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009796:	d106      	bne.n	80097a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80097a4:	e029      	b.n	80097fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ac:	d10a      	bne.n	80097c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fb64 	bl	8009e7c <SD_WideBus_Enable>
 80097b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80097c2:	e01a      	b.n	80097fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fba1 	bl	8009f12 <SD_WideBus_Disable>
 80097d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80097de:	e00c      	b.n	80097fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80097ec:	e005      	b.n	80097fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a5f      	ldr	r2, [pc, #380]	@ (8009984 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009808:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009810:	e096      	b.n	8009940 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009812:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009816:	f04f 0100 	mov.w	r1, #0
 800981a:	f7fd fdf5 	bl	8007408 <HAL_RCCEx_GetPeriphCLKFreq>
 800981e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 8083 	beq.w	800992e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4950      	ldr	r1, [pc, #320]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009846:	fba1 1303 	umull	r1, r3, r1, r3
 800984a:	0e1b      	lsrs	r3, r3, #24
 800984c:	429a      	cmp	r2, r3
 800984e:	d303      	bcc.n	8009858 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	61bb      	str	r3, [r7, #24]
 8009856:	e05a      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009860:	d103      	bne.n	800986a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e051      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800986e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009872:	d126      	bne.n	80098c2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10e      	bne.n	800989a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	4a43      	ldr	r2, [pc, #268]	@ (800998c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d906      	bls.n	8009892 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4a40      	ldr	r2, [pc, #256]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	0e5b      	lsrs	r3, r3, #25
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e03d      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e039      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a6:	4a39      	ldr	r2, [pc, #228]	@ (800998c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d906      	bls.n	80098ba <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4a36      	ldr	r2, [pc, #216]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098b0:	fba2 2303 	umull	r2, r3, r2, r3
 80098b4:	0e5b      	lsrs	r3, r3, #25
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	e029      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	e025      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10e      	bne.n	80098e8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4a30      	ldr	r2, [pc, #192]	@ (8009990 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d906      	bls.n	80098e0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	0e1b      	lsrs	r3, r3, #24
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e016      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	e012      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f4:	4a26      	ldr	r2, [pc, #152]	@ (8009990 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d906      	bls.n	8009908 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4a22      	ldr	r2, [pc, #136]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	0e1b      	lsrs	r3, r3, #24
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	e002      	b.n	800990e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681c      	ldr	r4, [r3, #0]
 8009912:	466a      	mov	r2, sp
 8009914:	f107 0314 	add.w	r3, r7, #20
 8009918:	e893 0003 	ldmia.w	r3, {r0, r1}
 800991c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009920:	f107 0308 	add.w	r3, r7, #8
 8009924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009926:	4620      	mov	r0, r4
 8009928:	f002 f99e 	bl	800bc68 <SDMMC_Init>
 800992c:	e008      	b.n	8009940 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009932:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009948:	4618      	mov	r0, r3
 800994a:	f002 fa6b 	bl	800be24 <SDMMC_CmdBlockLength>
 800994e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00c      	beq.n	8009970 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a0a      	ldr	r2, [pc, #40]	@ (8009984 <HAL_SD_ConfigWideBusOperation+0x214>)
 800995c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	431a      	orrs	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800997c:	4618      	mov	r0, r3
 800997e:	372c      	adds	r7, #44	@ 0x2c
 8009980:	46bd      	mov	sp, r7
 8009982:	bd90      	pop	{r4, r7, pc}
 8009984:	1fe00fff 	.word	0x1fe00fff
 8009988:	55e63b89 	.word	0x55e63b89
 800998c:	02faf080 	.word	0x02faf080
 8009990:	017d7840 	.word	0x017d7840

08009994 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099a0:	f107 030c 	add.w	r3, r7, #12
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa40 	bl	8009e2c <SD_SendStatus>
 80099ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	0a5b      	lsrs	r3, r3, #9
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099ca:	693b      	ldr	r3, [r7, #16]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b090      	sub	sp, #64	@ 0x40
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80099e0:	f7f8 fde2 	bl	80025a8 <HAL_GetTick>
 80099e4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f002 f995 	bl	800bd1a <SDMMC_GetPowerState>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80099fa:	e0b5      	b.n	8009b68 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d02e      	beq.n	8009a62 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 fbe0 	bl	800c1ce <SDMMC_CmdSendCID>
 8009a0e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <SD_InitCard+0x46>
    {
      return errorstate;
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	e0a6      	b.n	8009b68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f002 f9c0 	bl	800bda6 <SDMMC_GetResponse>
 8009a26:	4602      	mov	r2, r0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2104      	movs	r1, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f002 f9b7 	bl	800bda6 <SDMMC_GetResponse>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2108      	movs	r1, #8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f002 f9ae 	bl	800bda6 <SDMMC_GetResponse>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	210c      	movs	r1, #12
 8009a56:	4618      	mov	r0, r3
 8009a58:	f002 f9a5 	bl	800bda6 <SDMMC_GetResponse>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d01d      	beq.n	8009aa6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a6a:	e019      	b.n	8009aa0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f107 020a 	add.w	r2, r7, #10
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f002 fbe8 	bl	800c24c <SDMMC_CmdSetRelAdd>
 8009a7c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a86:	e06f      	b.n	8009b68 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009a88:	f7f8 fd8e 	bl	80025a8 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d902      	bls.n	8009aa0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009a9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a9e:	e063      	b.n	8009b68 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009aa0:	897b      	ldrh	r3, [r7, #10]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0e2      	beq.n	8009a6c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d036      	beq.n	8009b1c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009aae:	897b      	ldrh	r3, [r7, #10]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009abe:	041b      	lsls	r3, r3, #16
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f002 fba2 	bl	800c20c <SDMMC_CmdSendCSD>
 8009ac8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <SD_InitCard+0x100>
    {
      return errorstate;
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad2:	e049      	b.n	8009b68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 f963 	bl	800bda6 <SDMMC_GetResponse>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2104      	movs	r1, #4
 8009aec:	4618      	mov	r0, r3
 8009aee:	f002 f95a 	bl	800bda6 <SDMMC_GetResponse>
 8009af2:	4602      	mov	r2, r0
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2108      	movs	r1, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f002 f951 	bl	800bda6 <SDMMC_GetResponse>
 8009b04:	4602      	mov	r2, r0
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	210c      	movs	r1, #12
 8009b10:	4618      	mov	r0, r3
 8009b12:	f002 f948 	bl	800bda6 <SDMMC_GetResponse>
 8009b16:	4602      	mov	r2, r0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2104      	movs	r1, #4
 8009b22:	4618      	mov	r0, r3
 8009b24:	f002 f93f 	bl	800bda6 <SDMMC_GetResponse>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	0d1a      	lsrs	r2, r3, #20
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b30:	f107 030c 	add.w	r3, r7, #12
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fb8c 	bl	8009254 <HAL_SD_GetCardCSD>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b46:	e00f      	b.n	8009b68 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b50:	041b      	lsls	r3, r3, #16
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f002 fa51 	bl	800bffc <SDMMC_CmdSelDesel>
 8009b5a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <SD_InitCard+0x192>
  {
    return errorstate;
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	e000      	b.n	8009b68 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3740      	adds	r7, #64	@ 0x40
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 fa5a 	bl	800c042 <SDMMC_CmdGoIdleState>
 8009b8e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	e072      	b.n	8009c80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f002 fa6d 	bl	800c07e <SDMMC_CmdOperCond>
 8009ba4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bac:	d10d      	bne.n	8009bca <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f002 fa42 	bl	800c042 <SDMMC_CmdGoIdleState>
 8009bbe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d004      	beq.n	8009bd0 <SD_PowerON+0x60>
    {
      return errorstate;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	e05a      	b.n	8009c80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d137      	bne.n	8009c48 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f002 fa6d 	bl	800c0be <SDMMC_CmdAppCommand>
 8009be4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02d      	beq.n	8009c48 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009bf0:	e046      	b.n	8009c80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 fa60 	bl	800c0be <SDMMC_CmdAppCommand>
 8009bfe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <SD_PowerON+0x9a>
    {
      return errorstate;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	e03a      	b.n	8009c80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	491e      	ldr	r1, [pc, #120]	@ (8009c88 <SD_PowerON+0x118>)
 8009c10:	4618      	mov	r0, r3
 8009c12:	f002 fa77 	bl	800c104 <SDMMC_CmdAppOperCommand>
 8009c16:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c22:	e02d      	b.n	8009c80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 f8bb 	bl	800bda6 <SDMMC_GetResponse>
 8009c30:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	0fdb      	lsrs	r3, r3, #31
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <SD_PowerON+0xce>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <SD_PowerON+0xd0>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]

    count++;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	3301      	adds	r3, #1
 8009c46:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d802      	bhi.n	8009c58 <SD_PowerON+0xe8>
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0cc      	beq.n	8009bf2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d902      	bls.n	8009c68 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c66:	e00b      	b.n	8009c80 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	c1100000 	.word	0xc1100000

08009c8c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08c      	sub	sp, #48	@ 0x30
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c96:	f7f8 fc87 	bl	80025a8 <HAL_GetTick>
 8009c9a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 f87d 	bl	800bda6 <SDMMC_GetResponse>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cb6:	d102      	bne.n	8009cbe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cbc:	e0b0      	b.n	8009e20 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2140      	movs	r1, #64	@ 0x40
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f002 f8ad 	bl	800be24 <SDMMC_CmdBlockLength>
 8009cca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	e0a0      	b.n	8009e20 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce6:	041b      	lsls	r3, r3, #16
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f002 f9e7 	bl	800c0be <SDMMC_CmdAppCommand>
 8009cf0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d005      	beq.n	8009d04 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	e08d      	b.n	8009e20 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d0a:	2340      	movs	r3, #64	@ 0x40
 8009d0c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d0e:	2360      	movs	r3, #96	@ 0x60
 8009d10:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d12:	2302      	movs	r3, #2
 8009d14:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f107 0208 	add.w	r2, r7, #8
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f002 f84f 	bl	800bdcc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f002 facf 	bl	800c2d6 <SDMMC_CmdStatusRegister>
 8009d38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d02b      	beq.n	8009d98 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	e069      	b.n	8009e20 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d013      	beq.n	8009d82 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d5e:	e00d      	b.n	8009d7c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 ffa9 	bl	800bcbc <SDMMC_ReadFIFO>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	601a      	str	r2, [r3, #0]
        pData++;
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	3304      	adds	r3, #4
 8009d74:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d78:	3301      	adds	r3, #1
 8009d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7e:	2b07      	cmp	r3, #7
 8009d80:	d9ee      	bls.n	8009d60 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d82:	f7f8 fc11 	bl	80025a8 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d90:	d102      	bne.n	8009d98 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d96:	e043      	b.n	8009e20 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0d2      	beq.n	8009d4c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009db4:	2308      	movs	r3, #8
 8009db6:	e033      	b.n	8009e20 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	e02a      	b.n	8009e20 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd0:	f003 0320 	and.w	r3, r3, #32
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d017      	beq.n	8009e08 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009dd8:	2320      	movs	r3, #32
 8009dda:	e021      	b.n	8009e20 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 ff6b 	bl	800bcbc <SDMMC_ReadFIFO>
 8009de6:	4602      	mov	r2, r0
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	601a      	str	r2, [r3, #0]
    pData++;
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	3304      	adds	r3, #4
 8009df0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009df2:	f7f8 fbd9 	bl	80025a8 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e00:	d102      	bne.n	8009e08 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e06:	e00b      	b.n	8009e20 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e2      	bne.n	8009ddc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a03      	ldr	r2, [pc, #12]	@ (8009e28 <SD_SendSDStatus+0x19c>)
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3730      	adds	r7, #48	@ 0x30
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	18000f3a 	.word	0x18000f3a

08009e2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e40:	e018      	b.n	8009e74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f002 fa1e 	bl	800c290 <SDMMC_CmdSendStatus>
 8009e54:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	e009      	b.n	8009e74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2100      	movs	r1, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 ff9d 	bl	800bda6 <SDMMC_GetResponse>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2100      	movs	r1, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 ff87 	bl	800bda6 <SDMMC_GetResponse>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ea2:	d102      	bne.n	8009eaa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ea4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ea8:	e02f      	b.n	8009f0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009eaa:	f107 030c 	add.w	r3, r7, #12
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f879 	bl	8009fa8 <SD_FindSCR>
 8009eb6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	e023      	b.n	8009f0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01c      	beq.n	8009f06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed4:	041b      	lsls	r3, r3, #16
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4610      	mov	r0, r2
 8009eda:	f002 f8f0 	bl	800c0be <SDMMC_CmdAppCommand>
 8009ede:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	e00f      	b.n	8009f0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2102      	movs	r1, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 f927 	bl	800c144 <SDMMC_CmdBusWidth>
 8009ef6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	e003      	b.n	8009f0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e001      	b.n	8009f0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f06:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b086      	sub	sp, #24
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 ff3c 	bl	800bda6 <SDMMC_GetResponse>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f38:	d102      	bne.n	8009f40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f3e:	e02f      	b.n	8009fa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f40:	f107 030c 	add.w	r3, r7, #12
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f82e 	bl	8009fa8 <SD_FindSCR>
 8009f4c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	e023      	b.n	8009fa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d01c      	beq.n	8009f9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f002 f8a5 	bl	800c0be <SDMMC_CmdAppCommand>
 8009f74:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	e00f      	b.n	8009fa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f002 f8dc 	bl	800c144 <SDMMC_CmdBusWidth>
 8009f8c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	e003      	b.n	8009fa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e001      	b.n	8009fa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	@ 0x38
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fb2:	f7f8 faf9 	bl	80025a8 <HAL_GetTick>
 8009fb6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60bb      	str	r3, [r7, #8]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2108      	movs	r1, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 ff28 	bl	800be24 <SDMMC_CmdBlockLength>
 8009fd4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fde:	e0ad      	b.n	800a13c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe8:	041b      	lsls	r3, r3, #16
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f002 f866 	bl	800c0be <SDMMC_CmdAppCommand>
 8009ff2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	e09e      	b.n	800a13c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ffe:	f04f 33ff 	mov.w	r3, #4294967295
 800a002:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a004:	2308      	movs	r3, #8
 800a006:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a008:	2330      	movs	r3, #48	@ 0x30
 800a00a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a00c:	2302      	movs	r3, #2
 800a00e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a010:	2300      	movs	r3, #0
 800a012:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a014:	2301      	movs	r3, #1
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f107 0210 	add.w	r2, r7, #16
 800a020:	4611      	mov	r1, r2
 800a022:	4618      	mov	r0, r3
 800a024:	f001 fed2 	bl	800bdcc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f002 f8ac 	bl	800c18a <SDMMC_CmdSendSCR>
 800a032:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d027      	beq.n	800a08a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03c:	e07e      	b.n	800a13c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a044:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d113      	bne.n	800a074 <SD_FindSCR+0xcc>
 800a04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d110      	bne.n	800a074 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4618      	mov	r0, r3
 800a058:	f001 fe30 	bl	800bcbc <SDMMC_ReadFIFO>
 800a05c:	4603      	mov	r3, r0
 800a05e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f001 fe29 	bl	800bcbc <SDMMC_ReadFIFO>
 800a06a:	4603      	mov	r3, r0
 800a06c:	60fb      	str	r3, [r7, #12]
      index++;
 800a06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a070:	3301      	adds	r3, #1
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a074:	f7f8 fa98 	bl	80025a8 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a082:	d102      	bne.n	800a08a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a084:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a088:	e058      	b.n	800a13c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a090:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a094:	4013      	ands	r3, r2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0d1      	beq.n	800a03e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d005      	beq.n	800a0b4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	e043      	b.n	800a13c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e036      	b.n	800a13c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	e029      	b.n	800a13c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a15      	ldr	r2, [pc, #84]	@ (800a144 <SD_FindSCR+0x19c>)
 800a0ee:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	061a      	lsls	r2, r3, #24
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	021b      	lsls	r3, r3, #8
 800a0f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	0a1b      	lsrs	r3, r3, #8
 800a102:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a106:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	0e1b      	lsrs	r3, r3, #24
 800a10c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a110:	601a      	str	r2, [r3, #0]
    scr++;
 800a112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a114:	3304      	adds	r3, #4
 800a116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	061a      	lsls	r2, r3, #24
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	021b      	lsls	r3, r3, #8
 800a120:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a124:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	0a1b      	lsrs	r3, r3, #8
 800a12a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a12e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	0e1b      	lsrs	r3, r3, #24
 800a134:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a138:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3738      	adds	r7, #56	@ 0x38
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	18000f3a 	.word	0x18000f3a

0800a148 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15a:	2b1f      	cmp	r3, #31
 800a15c:	d936      	bls.n	800a1cc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	e027      	b.n	800a1b4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fda7 	bl	800bcbc <SDMMC_ReadFIFO>
 800a16e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	b2da      	uxtb	r2, r3
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	3301      	adds	r3, #1
 800a17c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	b2da      	uxtb	r2, r3
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	3301      	adds	r3, #1
 800a18c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	0c1b      	lsrs	r3, r3, #16
 800a192:	b2da      	uxtb	r2, r3
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	3301      	adds	r3, #1
 800a19c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	0e1b      	lsrs	r3, r3, #24
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2b07      	cmp	r3, #7
 800a1b8:	d9d4      	bls.n	800a164 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c4:	f1a3 0220 	sub.w	r2, r3, #32
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a1cc:	bf00      	nop
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	2b1f      	cmp	r3, #31
 800a1e8:	d93a      	bls.n	800a260 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e02b      	b.n	800a248 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	021a      	lsls	r2, r3, #8
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	3301      	adds	r3, #1
 800a20c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	041a      	lsls	r2, r3, #16
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	3301      	adds	r3, #1
 800a21e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	061a      	lsls	r2, r3, #24
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	3301      	adds	r3, #1
 800a230:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f107 020c 	add.w	r2, r7, #12
 800a23a:	4611      	mov	r1, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f001 fd4a 	bl	800bcd6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	3301      	adds	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b07      	cmp	r3, #7
 800a24c:	d9d0      	bls.n	800a1f0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	f1a3 0220 	sub.w	r2, r3, #32
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	621a      	str	r2, [r3, #32]
  }
}
 800a260:	bf00      	nop
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e10f      	b.n	800a4ea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a87      	ldr	r2, [pc, #540]	@ (800a4f4 <HAL_SPI_Init+0x23c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00f      	beq.n	800a2fa <HAL_SPI_Init+0x42>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a86      	ldr	r2, [pc, #536]	@ (800a4f8 <HAL_SPI_Init+0x240>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00a      	beq.n	800a2fa <HAL_SPI_Init+0x42>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a84      	ldr	r2, [pc, #528]	@ (800a4fc <HAL_SPI_Init+0x244>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d005      	beq.n	800a2fa <HAL_SPI_Init+0x42>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	2b0f      	cmp	r3, #15
 800a2f4:	d901      	bls.n	800a2fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e0f7      	b.n	800a4ea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fbbc 	bl	800aa78 <SPI_GetPacketSize>
 800a300:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a7b      	ldr	r2, [pc, #492]	@ (800a4f4 <HAL_SPI_Init+0x23c>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00c      	beq.n	800a326 <HAL_SPI_Init+0x6e>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a79      	ldr	r2, [pc, #484]	@ (800a4f8 <HAL_SPI_Init+0x240>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d007      	beq.n	800a326 <HAL_SPI_Init+0x6e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a78      	ldr	r2, [pc, #480]	@ (800a4fc <HAL_SPI_Init+0x244>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d002      	beq.n	800a326 <HAL_SPI_Init+0x6e>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b08      	cmp	r3, #8
 800a324:	d811      	bhi.n	800a34a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a32a:	4a72      	ldr	r2, [pc, #456]	@ (800a4f4 <HAL_SPI_Init+0x23c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d009      	beq.n	800a344 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a70      	ldr	r2, [pc, #448]	@ (800a4f8 <HAL_SPI_Init+0x240>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d004      	beq.n	800a344 <HAL_SPI_Init+0x8c>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a6f      	ldr	r2, [pc, #444]	@ (800a4fc <HAL_SPI_Init+0x244>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d104      	bne.n	800a34e <HAL_SPI_Init+0x96>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b10      	cmp	r3, #16
 800a348:	d901      	bls.n	800a34e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e0cd      	b.n	800a4ea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d106      	bne.n	800a368 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7f7 ff28 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a38a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a394:	d119      	bne.n	800a3ca <HAL_SPI_Init+0x112>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a39e:	d103      	bne.n	800a3a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10c      	bne.n	800a3ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3b8:	d107      	bne.n	800a3ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00f      	beq.n	800a3f6 <HAL_SPI_Init+0x13e>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	2b06      	cmp	r3, #6
 800a3dc:	d90b      	bls.n	800a3f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e007      	b.n	800a406 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a404:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69da      	ldr	r2, [r3, #28]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40e:	431a      	orrs	r2, r3
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a418:	ea42 0103 	orr.w	r1, r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a430:	431a      	orrs	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	431a      	orrs	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a45a:	431a      	orrs	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a466:	ea42 0103 	orr.w	r1, r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d113      	bne.n	800a4a6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a490:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a4a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0201 	bic.w	r2, r2, #1
 800a4b4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40013000 	.word	0x40013000
 800a4f8:	40003800 	.word	0x40003800
 800a4fc:	40003c00 	.word	0x40003c00

0800a500 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af02      	add	r7, sp, #8
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3320      	adds	r3, #32
 800a516:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a518:	f7f8 f846 	bl	80025a8 <HAL_GetTick>
 800a51c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b01      	cmp	r3, #1
 800a528:	d001      	beq.n	800a52e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a52a:	2302      	movs	r3, #2
 800a52c:	e1d1      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <HAL_SPI_Transmit+0x3a>
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e1c9      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_SPI_Transmit+0x4c>
 800a548:	2302      	movs	r3, #2
 800a54a:	e1c2      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2203      	movs	r2, #3
 800a558:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	88fa      	ldrh	r2, [r7, #6]
 800a576:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a5a4:	d108      	bne.n	800a5b8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	e009      	b.n	800a5cc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a5ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	4b96      	ldr	r3, [pc, #600]	@ (800a82c <HAL_SPI_Transmit+0x32c>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	88f9      	ldrh	r1, [r7, #6]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	6812      	ldr	r2, [r2, #0]
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0201 	orr.w	r2, r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5f8:	d107      	bne.n	800a60a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	2b0f      	cmp	r3, #15
 800a610:	d947      	bls.n	800a6a2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a612:	e03f      	b.n	800a694 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d114      	bne.n	800a64c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6812      	ldr	r2, [r2, #0]
 800a62c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a632:	1d1a      	adds	r2, r3, #4
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a63e:	b29b      	uxth	r3, r3
 800a640:	3b01      	subs	r3, #1
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a64a:	e023      	b.n	800a694 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a64c:	f7f7 ffac 	bl	80025a8 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d803      	bhi.n	800a664 <HAL_SPI_Transmit+0x164>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d102      	bne.n	800a66a <HAL_SPI_Transmit+0x16a>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d114      	bne.n	800a694 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 f936 	bl	800a8dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a676:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e11e      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1b9      	bne.n	800a614 <HAL_SPI_Transmit+0x114>
 800a6a0:	e0f1      	b.n	800a886 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b07      	cmp	r3, #7
 800a6a8:	f240 80e6 	bls.w	800a878 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6ac:	e05d      	b.n	800a76a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d132      	bne.n	800a722 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d918      	bls.n	800a6fa <HAL_SPI_Transmit+0x1fa>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d014      	beq.n	800a6fa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6e0:	1d1a      	adds	r2, r3, #4
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	3b02      	subs	r3, #2
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a6f8:	e037      	b.n	800a76a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6fe:	881a      	ldrh	r2, [r3, #0]
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a708:	1c9a      	adds	r2, r3, #2
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a720:	e023      	b.n	800a76a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a722:	f7f7 ff41 	bl	80025a8 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d803      	bhi.n	800a73a <HAL_SPI_Transmit+0x23a>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d102      	bne.n	800a740 <HAL_SPI_Transmit+0x240>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d114      	bne.n	800a76a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f8cb 	bl	800a8dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a74c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e0b3      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a770:	b29b      	uxth	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d19b      	bne.n	800a6ae <HAL_SPI_Transmit+0x1ae>
 800a776:	e086      	b.n	800a886 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b02      	cmp	r3, #2
 800a784:	d154      	bne.n	800a830 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2b03      	cmp	r3, #3
 800a790:	d918      	bls.n	800a7c4 <HAL_SPI_Transmit+0x2c4>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a796:	2b40      	cmp	r3, #64	@ 0x40
 800a798:	d914      	bls.n	800a7c4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6812      	ldr	r2, [r2, #0]
 800a7a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7aa:	1d1a      	adds	r2, r3, #4
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7c2:	e059      	b.n	800a878 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d917      	bls.n	800a800 <HAL_SPI_Transmit+0x300>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7dc:	881a      	ldrh	r2, [r3, #0]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7e6:	1c9a      	adds	r2, r3, #2
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	3b02      	subs	r3, #2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7fe:	e03b      	b.n	800a878 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3320      	adds	r3, #32
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a82a:	e025      	b.n	800a878 <HAL_SPI_Transmit+0x378>
 800a82c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a830:	f7f7 feba 	bl	80025a8 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d803      	bhi.n	800a848 <HAL_SPI_Transmit+0x348>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d102      	bne.n	800a84e <HAL_SPI_Transmit+0x34e>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d114      	bne.n	800a878 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f844 	bl	800a8dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a85a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e02c      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a87e:	b29b      	uxth	r3, r3
 800a880:	2b00      	cmp	r3, #0
 800a882:	f47f af79 	bne.w	800a778 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2200      	movs	r2, #0
 800a88e:	2108      	movs	r1, #8
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f8c3 	bl	800aa1c <SPI_WaitOnFlagUntilTimeout>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d007      	beq.n	800a8ac <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8a2:	f043 0220 	orr.w	r2, r3, #32
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 f815 	bl	800a8dc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e000      	b.n	800a8d2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
  }
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop

0800a8dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0208 	orr.w	r2, r2, #8
 800a8fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699a      	ldr	r2, [r3, #24]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0210 	orr.w	r2, r2, #16
 800a90a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 0201 	bic.w	r2, r2, #1
 800a91a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6919      	ldr	r1, [r3, #16]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	4b3c      	ldr	r3, [pc, #240]	@ (800aa18 <SPI_CloseTransfer+0x13c>)
 800a928:	400b      	ands	r3, r1
 800a92a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689a      	ldr	r2, [r3, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a93a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b04      	cmp	r3, #4
 800a946:	d014      	beq.n	800a972 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00f      	beq.n	800a972 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a958:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	699a      	ldr	r2, [r3, #24]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f042 0220 	orr.w	r2, r2, #32
 800a970:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d014      	beq.n	800a9a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00f      	beq.n	800a9a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a98e:	f043 0204 	orr.w	r2, r3, #4
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	699a      	ldr	r2, [r3, #24]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00f      	beq.n	800a9d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9b8:	f043 0201 	orr.w	r2, r3, #1
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	699a      	ldr	r2, [r3, #24]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00f      	beq.n	800a9fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e2:	f043 0208 	orr.w	r2, r3, #8
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	699a      	ldr	r2, [r3, #24]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa0c:	bf00      	nop
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	fffffc90 	.word	0xfffffc90

0800aa1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa2c:	e010      	b.n	800aa50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa2e:	f7f7 fdbb 	bl	80025a8 <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d803      	bhi.n	800aa46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d102      	bne.n	800aa4c <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e00f      	b.n	800aa70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	695a      	ldr	r2, [r3, #20]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	bf0c      	ite	eq
 800aa60:	2301      	moveq	r3, #1
 800aa62:	2300      	movne	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	461a      	mov	r2, r3
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d0df      	beq.n	800aa2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa84:	095b      	lsrs	r3, r3, #5
 800aa86:	3301      	adds	r3, #1
 800aa88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	3307      	adds	r3, #7
 800aa96:	08db      	lsrs	r3, r3, #3
 800aa98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	fb02 f303 	mul.w	r3, r2, r3
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e042      	b.n	800ab46 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7f7 fc00 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2224      	movs	r2, #36	@ 0x24
 800aadc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f022 0201 	bic.w	r2, r2, #1
 800aaee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fd91 	bl	800b620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f826 	bl	800ab50 <UART_SetConfig>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d101      	bne.n	800ab0e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e01b      	b.n	800ab46 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	689a      	ldr	r2, [r3, #8]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0201 	orr.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fe10 	bl	800b764 <UART_CheckIdleState>
 800ab44:	4603      	mov	r3, r0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab54:	b092      	sub	sp, #72	@ 0x48
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	4bbe      	ldr	r3, [pc, #760]	@ (800ae78 <UART_SetConfig+0x328>)
 800ab80:	4013      	ands	r3, r2
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	6812      	ldr	r2, [r2, #0]
 800ab86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4ab3      	ldr	r2, [pc, #716]	@ (800ae7c <UART_SetConfig+0x32c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d004      	beq.n	800abbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abb8:	4313      	orrs	r3, r2
 800abba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689a      	ldr	r2, [r3, #8]
 800abc2:	4baf      	ldr	r3, [pc, #700]	@ (800ae80 <UART_SetConfig+0x330>)
 800abc4:	4013      	ands	r3, r2
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	6812      	ldr	r2, [r2, #0]
 800abca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abcc:	430b      	orrs	r3, r1
 800abce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd6:	f023 010f 	bic.w	r1, r3, #15
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4aa6      	ldr	r2, [pc, #664]	@ (800ae84 <UART_SetConfig+0x334>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d177      	bne.n	800ace0 <UART_SetConfig+0x190>
 800abf0:	4ba5      	ldr	r3, [pc, #660]	@ (800ae88 <UART_SetConfig+0x338>)
 800abf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abf8:	2b28      	cmp	r3, #40	@ 0x28
 800abfa:	d86d      	bhi.n	800acd8 <UART_SetConfig+0x188>
 800abfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <UART_SetConfig+0xb4>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800aca9 	.word	0x0800aca9
 800ac08:	0800acd9 	.word	0x0800acd9
 800ac0c:	0800acd9 	.word	0x0800acd9
 800ac10:	0800acd9 	.word	0x0800acd9
 800ac14:	0800acd9 	.word	0x0800acd9
 800ac18:	0800acd9 	.word	0x0800acd9
 800ac1c:	0800acd9 	.word	0x0800acd9
 800ac20:	0800acd9 	.word	0x0800acd9
 800ac24:	0800acb1 	.word	0x0800acb1
 800ac28:	0800acd9 	.word	0x0800acd9
 800ac2c:	0800acd9 	.word	0x0800acd9
 800ac30:	0800acd9 	.word	0x0800acd9
 800ac34:	0800acd9 	.word	0x0800acd9
 800ac38:	0800acd9 	.word	0x0800acd9
 800ac3c:	0800acd9 	.word	0x0800acd9
 800ac40:	0800acd9 	.word	0x0800acd9
 800ac44:	0800acb9 	.word	0x0800acb9
 800ac48:	0800acd9 	.word	0x0800acd9
 800ac4c:	0800acd9 	.word	0x0800acd9
 800ac50:	0800acd9 	.word	0x0800acd9
 800ac54:	0800acd9 	.word	0x0800acd9
 800ac58:	0800acd9 	.word	0x0800acd9
 800ac5c:	0800acd9 	.word	0x0800acd9
 800ac60:	0800acd9 	.word	0x0800acd9
 800ac64:	0800acc1 	.word	0x0800acc1
 800ac68:	0800acd9 	.word	0x0800acd9
 800ac6c:	0800acd9 	.word	0x0800acd9
 800ac70:	0800acd9 	.word	0x0800acd9
 800ac74:	0800acd9 	.word	0x0800acd9
 800ac78:	0800acd9 	.word	0x0800acd9
 800ac7c:	0800acd9 	.word	0x0800acd9
 800ac80:	0800acd9 	.word	0x0800acd9
 800ac84:	0800acc9 	.word	0x0800acc9
 800ac88:	0800acd9 	.word	0x0800acd9
 800ac8c:	0800acd9 	.word	0x0800acd9
 800ac90:	0800acd9 	.word	0x0800acd9
 800ac94:	0800acd9 	.word	0x0800acd9
 800ac98:	0800acd9 	.word	0x0800acd9
 800ac9c:	0800acd9 	.word	0x0800acd9
 800aca0:	0800acd9 	.word	0x0800acd9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e222      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800acb0:	2304      	movs	r3, #4
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e21e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800acb8:	2308      	movs	r3, #8
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e21a      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800acc0:	2310      	movs	r3, #16
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e216      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800acc8:	2320      	movs	r3, #32
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e212      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800acd0:	2340      	movs	r3, #64	@ 0x40
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e20e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800acd8:	2380      	movs	r3, #128	@ 0x80
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e20a      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a69      	ldr	r2, [pc, #420]	@ (800ae8c <UART_SetConfig+0x33c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d130      	bne.n	800ad4c <UART_SetConfig+0x1fc>
 800acea:	4b67      	ldr	r3, [pc, #412]	@ (800ae88 <UART_SetConfig+0x338>)
 800acec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d826      	bhi.n	800ad44 <UART_SetConfig+0x1f4>
 800acf6:	a201      	add	r2, pc, #4	@ (adr r2, 800acfc <UART_SetConfig+0x1ac>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad15 	.word	0x0800ad15
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad25 	.word	0x0800ad25
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e1ec      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e1e8      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e1e4      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e1e0      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad34:	2320      	movs	r3, #32
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e1dc      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad3c:	2340      	movs	r3, #64	@ 0x40
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e1d8      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad44:	2380      	movs	r3, #128	@ 0x80
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e1d4      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a4f      	ldr	r2, [pc, #316]	@ (800ae90 <UART_SetConfig+0x340>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d130      	bne.n	800adb8 <UART_SetConfig+0x268>
 800ad56:	4b4c      	ldr	r3, [pc, #304]	@ (800ae88 <UART_SetConfig+0x338>)
 800ad58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d826      	bhi.n	800adb0 <UART_SetConfig+0x260>
 800ad62:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <UART_SetConfig+0x218>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad81 	.word	0x0800ad81
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e1b6      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e1b2      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e1ae      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e1aa      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ada0:	2320      	movs	r3, #32
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e1a6      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ada8:	2340      	movs	r3, #64	@ 0x40
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e1a2      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800adb0:	2380      	movs	r3, #128	@ 0x80
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e19e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a35      	ldr	r2, [pc, #212]	@ (800ae94 <UART_SetConfig+0x344>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d130      	bne.n	800ae24 <UART_SetConfig+0x2d4>
 800adc2:	4b31      	ldr	r3, [pc, #196]	@ (800ae88 <UART_SetConfig+0x338>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b05      	cmp	r3, #5
 800adcc:	d826      	bhi.n	800ae1c <UART_SetConfig+0x2cc>
 800adce:	a201      	add	r2, pc, #4	@ (adr r2, 800add4 <UART_SetConfig+0x284>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800aded 	.word	0x0800aded
 800add8:	0800adf5 	.word	0x0800adf5
 800addc:	0800adfd 	.word	0x0800adfd
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae15 	.word	0x0800ae15
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e180      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800adf4:	2304      	movs	r3, #4
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e17c      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800adfc:	2308      	movs	r3, #8
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e178      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae04:	2310      	movs	r3, #16
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e174      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e170      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae14:	2340      	movs	r3, #64	@ 0x40
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e16c      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae1c:	2380      	movs	r3, #128	@ 0x80
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae22:	e168      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1b      	ldr	r2, [pc, #108]	@ (800ae98 <UART_SetConfig+0x348>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d142      	bne.n	800aeb4 <UART_SetConfig+0x364>
 800ae2e:	4b16      	ldr	r3, [pc, #88]	@ (800ae88 <UART_SetConfig+0x338>)
 800ae30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d838      	bhi.n	800aeac <UART_SetConfig+0x35c>
 800ae3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae40 <UART_SetConfig+0x2f0>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae61 	.word	0x0800ae61
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800ae9d 	.word	0x0800ae9d
 800ae54:	0800aea5 	.word	0x0800aea5
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e14a      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae60:	2304      	movs	r3, #4
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e146      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae68:	2308      	movs	r3, #8
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e142      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae70:	2310      	movs	r3, #16
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e13e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800ae78:	cfff69f3 	.word	0xcfff69f3
 800ae7c:	58000c00 	.word	0x58000c00
 800ae80:	11fff4ff 	.word	0x11fff4ff
 800ae84:	40011000 	.word	0x40011000
 800ae88:	58024400 	.word	0x58024400
 800ae8c:	40004400 	.word	0x40004400
 800ae90:	40004800 	.word	0x40004800
 800ae94:	40004c00 	.word	0x40004c00
 800ae98:	40005000 	.word	0x40005000
 800ae9c:	2320      	movs	r3, #32
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea2:	e128      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800aea4:	2340      	movs	r3, #64	@ 0x40
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e124      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800aeac:	2380      	movs	r3, #128	@ 0x80
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb2:	e120      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4acb      	ldr	r2, [pc, #812]	@ (800b1e8 <UART_SetConfig+0x698>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d176      	bne.n	800afac <UART_SetConfig+0x45c>
 800aebe:	4bcb      	ldr	r3, [pc, #812]	@ (800b1ec <UART_SetConfig+0x69c>)
 800aec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aec6:	2b28      	cmp	r3, #40	@ 0x28
 800aec8:	d86c      	bhi.n	800afa4 <UART_SetConfig+0x454>
 800aeca:	a201      	add	r2, pc, #4	@ (adr r2, 800aed0 <UART_SetConfig+0x380>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800af75 	.word	0x0800af75
 800aed4:	0800afa5 	.word	0x0800afa5
 800aed8:	0800afa5 	.word	0x0800afa5
 800aedc:	0800afa5 	.word	0x0800afa5
 800aee0:	0800afa5 	.word	0x0800afa5
 800aee4:	0800afa5 	.word	0x0800afa5
 800aee8:	0800afa5 	.word	0x0800afa5
 800aeec:	0800afa5 	.word	0x0800afa5
 800aef0:	0800af7d 	.word	0x0800af7d
 800aef4:	0800afa5 	.word	0x0800afa5
 800aef8:	0800afa5 	.word	0x0800afa5
 800aefc:	0800afa5 	.word	0x0800afa5
 800af00:	0800afa5 	.word	0x0800afa5
 800af04:	0800afa5 	.word	0x0800afa5
 800af08:	0800afa5 	.word	0x0800afa5
 800af0c:	0800afa5 	.word	0x0800afa5
 800af10:	0800af85 	.word	0x0800af85
 800af14:	0800afa5 	.word	0x0800afa5
 800af18:	0800afa5 	.word	0x0800afa5
 800af1c:	0800afa5 	.word	0x0800afa5
 800af20:	0800afa5 	.word	0x0800afa5
 800af24:	0800afa5 	.word	0x0800afa5
 800af28:	0800afa5 	.word	0x0800afa5
 800af2c:	0800afa5 	.word	0x0800afa5
 800af30:	0800af8d 	.word	0x0800af8d
 800af34:	0800afa5 	.word	0x0800afa5
 800af38:	0800afa5 	.word	0x0800afa5
 800af3c:	0800afa5 	.word	0x0800afa5
 800af40:	0800afa5 	.word	0x0800afa5
 800af44:	0800afa5 	.word	0x0800afa5
 800af48:	0800afa5 	.word	0x0800afa5
 800af4c:	0800afa5 	.word	0x0800afa5
 800af50:	0800af95 	.word	0x0800af95
 800af54:	0800afa5 	.word	0x0800afa5
 800af58:	0800afa5 	.word	0x0800afa5
 800af5c:	0800afa5 	.word	0x0800afa5
 800af60:	0800afa5 	.word	0x0800afa5
 800af64:	0800afa5 	.word	0x0800afa5
 800af68:	0800afa5 	.word	0x0800afa5
 800af6c:	0800afa5 	.word	0x0800afa5
 800af70:	0800af9d 	.word	0x0800af9d
 800af74:	2301      	movs	r3, #1
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7a:	e0bc      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af82:	e0b8      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e0b4      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af92:	e0b0      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800af94:	2320      	movs	r3, #32
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e0ac      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800af9c:	2340      	movs	r3, #64	@ 0x40
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e0a8      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800afa4:	2380      	movs	r3, #128	@ 0x80
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e0a4      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a8f      	ldr	r2, [pc, #572]	@ (800b1f0 <UART_SetConfig+0x6a0>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d130      	bne.n	800b018 <UART_SetConfig+0x4c8>
 800afb6:	4b8d      	ldr	r3, [pc, #564]	@ (800b1ec <UART_SetConfig+0x69c>)
 800afb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afba:	f003 0307 	and.w	r3, r3, #7
 800afbe:	2b05      	cmp	r3, #5
 800afc0:	d826      	bhi.n	800b010 <UART_SetConfig+0x4c0>
 800afc2:	a201      	add	r2, pc, #4	@ (adr r2, 800afc8 <UART_SetConfig+0x478>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800afe1 	.word	0x0800afe1
 800afcc:	0800afe9 	.word	0x0800afe9
 800afd0:	0800aff1 	.word	0x0800aff1
 800afd4:	0800aff9 	.word	0x0800aff9
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b009 	.word	0x0800b009
 800afe0:	2300      	movs	r3, #0
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e086      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800afe8:	2304      	movs	r3, #4
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e082      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800aff0:	2308      	movs	r3, #8
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e07e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800aff8:	2310      	movs	r3, #16
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e07a      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b000:	2320      	movs	r3, #32
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e076      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b008:	2340      	movs	r3, #64	@ 0x40
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e072      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b010:	2380      	movs	r3, #128	@ 0x80
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b016:	e06e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a75      	ldr	r2, [pc, #468]	@ (800b1f4 <UART_SetConfig+0x6a4>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d130      	bne.n	800b084 <UART_SetConfig+0x534>
 800b022:	4b72      	ldr	r3, [pc, #456]	@ (800b1ec <UART_SetConfig+0x69c>)
 800b024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b05      	cmp	r3, #5
 800b02c:	d826      	bhi.n	800b07c <UART_SetConfig+0x52c>
 800b02e:	a201      	add	r2, pc, #4	@ (adr r2, 800b034 <UART_SetConfig+0x4e4>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b04d 	.word	0x0800b04d
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b05d 	.word	0x0800b05d
 800b040:	0800b065 	.word	0x0800b065
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b075 	.word	0x0800b075
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b052:	e050      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05a:	e04c      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b062:	e048      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e044      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b06c:	2320      	movs	r3, #32
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e040      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b074:	2340      	movs	r3, #64	@ 0x40
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07a:	e03c      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b07c:	2380      	movs	r3, #128	@ 0x80
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b082:	e038      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a5b      	ldr	r2, [pc, #364]	@ (800b1f8 <UART_SetConfig+0x6a8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d130      	bne.n	800b0f0 <UART_SetConfig+0x5a0>
 800b08e:	4b57      	ldr	r3, [pc, #348]	@ (800b1ec <UART_SetConfig+0x69c>)
 800b090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b05      	cmp	r3, #5
 800b098:	d826      	bhi.n	800b0e8 <UART_SetConfig+0x598>
 800b09a:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <UART_SetConfig+0x550>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0b9 	.word	0x0800b0b9
 800b0a4:	0800b0c1 	.word	0x0800b0c1
 800b0a8:	0800b0c9 	.word	0x0800b0c9
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0d9 	.word	0x0800b0d9
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e01a      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e016      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0c8:	2308      	movs	r3, #8
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e012      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0d0:	2310      	movs	r3, #16
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e00e      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0d8:	2320      	movs	r3, #32
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e00a      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0e0:	2340      	movs	r3, #64	@ 0x40
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e006      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0e8:	2380      	movs	r3, #128	@ 0x80
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e002      	b.n	800b0f6 <UART_SetConfig+0x5a6>
 800b0f0:	2380      	movs	r3, #128	@ 0x80
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a3f      	ldr	r2, [pc, #252]	@ (800b1f8 <UART_SetConfig+0x6a8>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	f040 80f8 	bne.w	800b2f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b102:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b106:	2b20      	cmp	r3, #32
 800b108:	dc46      	bgt.n	800b198 <UART_SetConfig+0x648>
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	f2c0 8082 	blt.w	800b214 <UART_SetConfig+0x6c4>
 800b110:	3b02      	subs	r3, #2
 800b112:	2b1e      	cmp	r3, #30
 800b114:	d87e      	bhi.n	800b214 <UART_SetConfig+0x6c4>
 800b116:	a201      	add	r2, pc, #4	@ (adr r2, 800b11c <UART_SetConfig+0x5cc>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b19f 	.word	0x0800b19f
 800b120:	0800b215 	.word	0x0800b215
 800b124:	0800b1a7 	.word	0x0800b1a7
 800b128:	0800b215 	.word	0x0800b215
 800b12c:	0800b215 	.word	0x0800b215
 800b130:	0800b215 	.word	0x0800b215
 800b134:	0800b1b7 	.word	0x0800b1b7
 800b138:	0800b215 	.word	0x0800b215
 800b13c:	0800b215 	.word	0x0800b215
 800b140:	0800b215 	.word	0x0800b215
 800b144:	0800b215 	.word	0x0800b215
 800b148:	0800b215 	.word	0x0800b215
 800b14c:	0800b215 	.word	0x0800b215
 800b150:	0800b215 	.word	0x0800b215
 800b154:	0800b1c7 	.word	0x0800b1c7
 800b158:	0800b215 	.word	0x0800b215
 800b15c:	0800b215 	.word	0x0800b215
 800b160:	0800b215 	.word	0x0800b215
 800b164:	0800b215 	.word	0x0800b215
 800b168:	0800b215 	.word	0x0800b215
 800b16c:	0800b215 	.word	0x0800b215
 800b170:	0800b215 	.word	0x0800b215
 800b174:	0800b215 	.word	0x0800b215
 800b178:	0800b215 	.word	0x0800b215
 800b17c:	0800b215 	.word	0x0800b215
 800b180:	0800b215 	.word	0x0800b215
 800b184:	0800b215 	.word	0x0800b215
 800b188:	0800b215 	.word	0x0800b215
 800b18c:	0800b215 	.word	0x0800b215
 800b190:	0800b215 	.word	0x0800b215
 800b194:	0800b207 	.word	0x0800b207
 800b198:	2b40      	cmp	r3, #64	@ 0x40
 800b19a:	d037      	beq.n	800b20c <UART_SetConfig+0x6bc>
 800b19c:	e03a      	b.n	800b214 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b19e:	f7fc feb3 	bl	8007f08 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1a4:	e03c      	b.n	800b220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fc fec2 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b4:	e034      	b.n	800b220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1b6:	f107 0318 	add.w	r3, r7, #24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fd f80e 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c4:	e02c      	b.n	800b220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1c6:	4b09      	ldr	r3, [pc, #36]	@ (800b1ec <UART_SetConfig+0x69c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d016      	beq.n	800b200 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1d2:	4b06      	ldr	r3, [pc, #24]	@ (800b1ec <UART_SetConfig+0x69c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	08db      	lsrs	r3, r3, #3
 800b1d8:	f003 0303 	and.w	r3, r3, #3
 800b1dc:	4a07      	ldr	r2, [pc, #28]	@ (800b1fc <UART_SetConfig+0x6ac>)
 800b1de:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1e4:	e01c      	b.n	800b220 <UART_SetConfig+0x6d0>
 800b1e6:	bf00      	nop
 800b1e8:	40011400 	.word	0x40011400
 800b1ec:	58024400 	.word	0x58024400
 800b1f0:	40007800 	.word	0x40007800
 800b1f4:	40007c00 	.word	0x40007c00
 800b1f8:	58000c00 	.word	0x58000c00
 800b1fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b200:	4b9d      	ldr	r3, [pc, #628]	@ (800b478 <UART_SetConfig+0x928>)
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b204:	e00c      	b.n	800b220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b206:	4b9d      	ldr	r3, [pc, #628]	@ (800b47c <UART_SetConfig+0x92c>)
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20a:	e009      	b.n	800b220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b20c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b212:	e005      	b.n	800b220 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b214:	2300      	movs	r3, #0
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b21e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 81de 	beq.w	800b5e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22c:	4a94      	ldr	r2, [pc, #592]	@ (800b480 <UART_SetConfig+0x930>)
 800b22e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b232:	461a      	mov	r2, r3
 800b234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b236:	fbb3 f3f2 	udiv	r3, r3, r2
 800b23a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	4613      	mov	r3, r2
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	4413      	add	r3, r2
 800b246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b248:	429a      	cmp	r2, r3
 800b24a:	d305      	bcc.n	800b258 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b254:	429a      	cmp	r2, r3
 800b256:	d903      	bls.n	800b260 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b25e:	e1c1      	b.n	800b5e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b262:	2200      	movs	r2, #0
 800b264:	60bb      	str	r3, [r7, #8]
 800b266:	60fa      	str	r2, [r7, #12]
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26c:	4a84      	ldr	r2, [pc, #528]	@ (800b480 <UART_SetConfig+0x930>)
 800b26e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b272:	b29b      	uxth	r3, r3
 800b274:	2200      	movs	r2, #0
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b27e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b282:	f7f5 f829 	bl	80002d8 <__aeabi_uldivmod>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4610      	mov	r0, r2
 800b28c:	4619      	mov	r1, r3
 800b28e:	f04f 0200 	mov.w	r2, #0
 800b292:	f04f 0300 	mov.w	r3, #0
 800b296:	020b      	lsls	r3, r1, #8
 800b298:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b29c:	0202      	lsls	r2, r0, #8
 800b29e:	6979      	ldr	r1, [r7, #20]
 800b2a0:	6849      	ldr	r1, [r1, #4]
 800b2a2:	0849      	lsrs	r1, r1, #1
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	eb12 0804 	adds.w	r8, r2, r4
 800b2ae:	eb43 0905 	adc.w	r9, r3, r5
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	469a      	mov	sl, r3
 800b2ba:	4693      	mov	fp, r2
 800b2bc:	4652      	mov	r2, sl
 800b2be:	465b      	mov	r3, fp
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	f7f5 f808 	bl	80002d8 <__aeabi_uldivmod>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2d6:	d308      	bcc.n	800b2ea <UART_SetConfig+0x79a>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2de:	d204      	bcs.n	800b2ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2e6:	60da      	str	r2, [r3, #12]
 800b2e8:	e17c      	b.n	800b5e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2f0:	e178      	b.n	800b5e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	69db      	ldr	r3, [r3, #28]
 800b2f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2fa:	f040 80c5 	bne.w	800b488 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b2fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b302:	2b20      	cmp	r3, #32
 800b304:	dc48      	bgt.n	800b398 <UART_SetConfig+0x848>
 800b306:	2b00      	cmp	r3, #0
 800b308:	db7b      	blt.n	800b402 <UART_SetConfig+0x8b2>
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d879      	bhi.n	800b402 <UART_SetConfig+0x8b2>
 800b30e:	a201      	add	r2, pc, #4	@ (adr r2, 800b314 <UART_SetConfig+0x7c4>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b39f 	.word	0x0800b39f
 800b318:	0800b3a7 	.word	0x0800b3a7
 800b31c:	0800b403 	.word	0x0800b403
 800b320:	0800b403 	.word	0x0800b403
 800b324:	0800b3af 	.word	0x0800b3af
 800b328:	0800b403 	.word	0x0800b403
 800b32c:	0800b403 	.word	0x0800b403
 800b330:	0800b403 	.word	0x0800b403
 800b334:	0800b3bf 	.word	0x0800b3bf
 800b338:	0800b403 	.word	0x0800b403
 800b33c:	0800b403 	.word	0x0800b403
 800b340:	0800b403 	.word	0x0800b403
 800b344:	0800b403 	.word	0x0800b403
 800b348:	0800b403 	.word	0x0800b403
 800b34c:	0800b403 	.word	0x0800b403
 800b350:	0800b403 	.word	0x0800b403
 800b354:	0800b3cf 	.word	0x0800b3cf
 800b358:	0800b403 	.word	0x0800b403
 800b35c:	0800b403 	.word	0x0800b403
 800b360:	0800b403 	.word	0x0800b403
 800b364:	0800b403 	.word	0x0800b403
 800b368:	0800b403 	.word	0x0800b403
 800b36c:	0800b403 	.word	0x0800b403
 800b370:	0800b403 	.word	0x0800b403
 800b374:	0800b403 	.word	0x0800b403
 800b378:	0800b403 	.word	0x0800b403
 800b37c:	0800b403 	.word	0x0800b403
 800b380:	0800b403 	.word	0x0800b403
 800b384:	0800b403 	.word	0x0800b403
 800b388:	0800b403 	.word	0x0800b403
 800b38c:	0800b403 	.word	0x0800b403
 800b390:	0800b403 	.word	0x0800b403
 800b394:	0800b3f5 	.word	0x0800b3f5
 800b398:	2b40      	cmp	r3, #64	@ 0x40
 800b39a:	d02e      	beq.n	800b3fa <UART_SetConfig+0x8aa>
 800b39c:	e031      	b.n	800b402 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b39e:	f7fa fdbd 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 800b3a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3a4:	e033      	b.n	800b40e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3a6:	f7fa fdcf 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 800b3aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3ac:	e02f      	b.n	800b40e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fc fdbe 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3bc:	e027      	b.n	800b40e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3be:	f107 0318 	add.w	r3, r7, #24
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fc ff0a 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3cc:	e01f      	b.n	800b40e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ce:	4b2d      	ldr	r3, [pc, #180]	@ (800b484 <UART_SetConfig+0x934>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d009      	beq.n	800b3ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3da:	4b2a      	ldr	r3, [pc, #168]	@ (800b484 <UART_SetConfig+0x934>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	08db      	lsrs	r3, r3, #3
 800b3e0:	f003 0303 	and.w	r3, r3, #3
 800b3e4:	4a24      	ldr	r2, [pc, #144]	@ (800b478 <UART_SetConfig+0x928>)
 800b3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3ec:	e00f      	b.n	800b40e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3ee:	4b22      	ldr	r3, [pc, #136]	@ (800b478 <UART_SetConfig+0x928>)
 800b3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f2:	e00c      	b.n	800b40e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3f4:	4b21      	ldr	r3, [pc, #132]	@ (800b47c <UART_SetConfig+0x92c>)
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f8:	e009      	b.n	800b40e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b400:	e005      	b.n	800b40e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b40c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 80e7 	beq.w	800b5e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41a:	4a19      	ldr	r2, [pc, #100]	@ (800b480 <UART_SetConfig+0x930>)
 800b41c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b420:	461a      	mov	r2, r3
 800b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b424:	fbb3 f3f2 	udiv	r3, r3, r2
 800b428:	005a      	lsls	r2, r3, #1
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	441a      	add	r2, r3
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	2b0f      	cmp	r3, #15
 800b440:	d916      	bls.n	800b470 <UART_SetConfig+0x920>
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b448:	d212      	bcs.n	800b470 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	f023 030f 	bic.w	r3, r3, #15
 800b452:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b456:	085b      	lsrs	r3, r3, #1
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	b29a      	uxth	r2, r3
 800b460:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b462:	4313      	orrs	r3, r2
 800b464:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b46c:	60da      	str	r2, [r3, #12]
 800b46e:	e0b9      	b.n	800b5e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b476:	e0b5      	b.n	800b5e4 <UART_SetConfig+0xa94>
 800b478:	03d09000 	.word	0x03d09000
 800b47c:	003d0900 	.word	0x003d0900
 800b480:	0800fb00 	.word	0x0800fb00
 800b484:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b488:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	dc49      	bgt.n	800b524 <UART_SetConfig+0x9d4>
 800b490:	2b00      	cmp	r3, #0
 800b492:	db7c      	blt.n	800b58e <UART_SetConfig+0xa3e>
 800b494:	2b20      	cmp	r3, #32
 800b496:	d87a      	bhi.n	800b58e <UART_SetConfig+0xa3e>
 800b498:	a201      	add	r2, pc, #4	@ (adr r2, 800b4a0 <UART_SetConfig+0x950>)
 800b49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49e:	bf00      	nop
 800b4a0:	0800b52b 	.word	0x0800b52b
 800b4a4:	0800b533 	.word	0x0800b533
 800b4a8:	0800b58f 	.word	0x0800b58f
 800b4ac:	0800b58f 	.word	0x0800b58f
 800b4b0:	0800b53b 	.word	0x0800b53b
 800b4b4:	0800b58f 	.word	0x0800b58f
 800b4b8:	0800b58f 	.word	0x0800b58f
 800b4bc:	0800b58f 	.word	0x0800b58f
 800b4c0:	0800b54b 	.word	0x0800b54b
 800b4c4:	0800b58f 	.word	0x0800b58f
 800b4c8:	0800b58f 	.word	0x0800b58f
 800b4cc:	0800b58f 	.word	0x0800b58f
 800b4d0:	0800b58f 	.word	0x0800b58f
 800b4d4:	0800b58f 	.word	0x0800b58f
 800b4d8:	0800b58f 	.word	0x0800b58f
 800b4dc:	0800b58f 	.word	0x0800b58f
 800b4e0:	0800b55b 	.word	0x0800b55b
 800b4e4:	0800b58f 	.word	0x0800b58f
 800b4e8:	0800b58f 	.word	0x0800b58f
 800b4ec:	0800b58f 	.word	0x0800b58f
 800b4f0:	0800b58f 	.word	0x0800b58f
 800b4f4:	0800b58f 	.word	0x0800b58f
 800b4f8:	0800b58f 	.word	0x0800b58f
 800b4fc:	0800b58f 	.word	0x0800b58f
 800b500:	0800b58f 	.word	0x0800b58f
 800b504:	0800b58f 	.word	0x0800b58f
 800b508:	0800b58f 	.word	0x0800b58f
 800b50c:	0800b58f 	.word	0x0800b58f
 800b510:	0800b58f 	.word	0x0800b58f
 800b514:	0800b58f 	.word	0x0800b58f
 800b518:	0800b58f 	.word	0x0800b58f
 800b51c:	0800b58f 	.word	0x0800b58f
 800b520:	0800b581 	.word	0x0800b581
 800b524:	2b40      	cmp	r3, #64	@ 0x40
 800b526:	d02e      	beq.n	800b586 <UART_SetConfig+0xa36>
 800b528:	e031      	b.n	800b58e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b52a:	f7fa fcf7 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 800b52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b530:	e033      	b.n	800b59a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b532:	f7fa fd09 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 800b536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b538:	e02f      	b.n	800b59a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b53a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fc fcf8 	bl	8007f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b548:	e027      	b.n	800b59a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b54a:	f107 0318 	add.w	r3, r7, #24
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fc fe44 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b558:	e01f      	b.n	800b59a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b55a:	4b2d      	ldr	r3, [pc, #180]	@ (800b610 <UART_SetConfig+0xac0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b566:	4b2a      	ldr	r3, [pc, #168]	@ (800b610 <UART_SetConfig+0xac0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	08db      	lsrs	r3, r3, #3
 800b56c:	f003 0303 	and.w	r3, r3, #3
 800b570:	4a28      	ldr	r2, [pc, #160]	@ (800b614 <UART_SetConfig+0xac4>)
 800b572:	fa22 f303 	lsr.w	r3, r2, r3
 800b576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b578:	e00f      	b.n	800b59a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b57a:	4b26      	ldr	r3, [pc, #152]	@ (800b614 <UART_SetConfig+0xac4>)
 800b57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57e:	e00c      	b.n	800b59a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b580:	4b25      	ldr	r3, [pc, #148]	@ (800b618 <UART_SetConfig+0xac8>)
 800b582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b584:	e009      	b.n	800b59a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b58c:	e005      	b.n	800b59a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b598:	bf00      	nop
    }

    if (pclk != 0U)
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d021      	beq.n	800b5e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a4:	4a1d      	ldr	r2, [pc, #116]	@ (800b61c <UART_SetConfig+0xacc>)
 800b5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	085b      	lsrs	r3, r3, #1
 800b5b8:	441a      	add	r2, r3
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c6:	2b0f      	cmp	r3, #15
 800b5c8:	d909      	bls.n	800b5de <UART_SetConfig+0xa8e>
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5d0:	d205      	bcs.n	800b5de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	60da      	str	r2, [r3, #12]
 800b5dc:	e002      	b.n	800b5e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b600:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b604:	4618      	mov	r0, r3
 800b606:	3748      	adds	r7, #72	@ 0x48
 800b608:	46bd      	mov	sp, r7
 800b60a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b60e:	bf00      	nop
 800b610:	58024400 	.word	0x58024400
 800b614:	03d09000 	.word	0x03d09000
 800b618:	003d0900 	.word	0x003d0900
 800b61c:	0800fb00 	.word	0x0800fb00

0800b620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62c:	f003 0308 	and.w	r3, r3, #8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00a      	beq.n	800b68e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b692:	f003 0304 	and.w	r3, r3, #4
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00a      	beq.n	800b6b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00a      	beq.n	800b6d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	f003 0320 	and.w	r3, r3, #32
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d01a      	beq.n	800b736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b71a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b71e:	d10a      	bne.n	800b736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	430a      	orrs	r2, r1
 800b756:	605a      	str	r2, [r3, #4]
  }
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b098      	sub	sp, #96	@ 0x60
 800b768:	af02      	add	r7, sp, #8
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b774:	f7f6 ff18 	bl	80025a8 <HAL_GetTick>
 800b778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0308 	and.w	r3, r3, #8
 800b784:	2b08      	cmp	r3, #8
 800b786:	d12f      	bne.n	800b7e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b790:	2200      	movs	r2, #0
 800b792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f88e 	bl	800b8b8 <UART_WaitOnFlagUntilTimeout>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d022      	beq.n	800b7e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e6      	bne.n	800b7a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e063      	b.n	800b8b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 0304 	and.w	r3, r3, #4
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d149      	bne.n	800b88a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7fe:	2200      	movs	r2, #0
 800b800:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f857 	bl	800b8b8 <UART_WaitOnFlagUntilTimeout>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d03c      	beq.n	800b88a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	623b      	str	r3, [r7, #32]
   return(result);
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b82e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b830:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b836:	e841 2300 	strex	r3, r2, [r1]
 800b83a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1e6      	bne.n	800b810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	60fb      	str	r3, [r7, #12]
   return(result);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3308      	adds	r3, #8
 800b860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b862:	61fa      	str	r2, [r7, #28]
 800b864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	69b9      	ldr	r1, [r7, #24]
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	617b      	str	r3, [r7, #20]
   return(result);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e5      	bne.n	800b842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2220      	movs	r2, #32
 800b87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e012      	b.n	800b8b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3758      	adds	r7, #88	@ 0x58
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c8:	e04f      	b.n	800b96a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d0:	d04b      	beq.n	800b96a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8d2:	f7f6 fe69 	bl	80025a8 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d302      	bcc.n	800b8e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e04e      	b.n	800b98a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d037      	beq.n	800b96a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b80      	cmp	r3, #128	@ 0x80
 800b8fe:	d034      	beq.n	800b96a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b40      	cmp	r3, #64	@ 0x40
 800b904:	d031      	beq.n	800b96a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	f003 0308 	and.w	r3, r3, #8
 800b910:	2b08      	cmp	r3, #8
 800b912:	d110      	bne.n	800b936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2208      	movs	r2, #8
 800b91a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 f839 	bl	800b994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2208      	movs	r2, #8
 800b926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e029      	b.n	800b98a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b944:	d111      	bne.n	800b96a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b94e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 f81f 	bl	800b994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2220      	movs	r2, #32
 800b95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b966:	2303      	movs	r3, #3
 800b968:	e00f      	b.n	800b98a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69da      	ldr	r2, [r3, #28]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4013      	ands	r3, r2
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	429a      	cmp	r2, r3
 800b978:	bf0c      	ite	eq
 800b97a:	2301      	moveq	r3, #1
 800b97c:	2300      	movne	r3, #0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	429a      	cmp	r2, r3
 800b986:	d0a0      	beq.n	800b8ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b994:	b480      	push	{r7}
 800b996:	b095      	sub	sp, #84	@ 0x54
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9a4:	e853 3f00 	ldrex	r3, [r3]
 800b9a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9c2:	e841 2300 	strex	r3, r2, [r1]
 800b9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1e6      	bne.n	800b99c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	4b1e      	ldr	r3, [pc, #120]	@ (800ba5c <UART_EndRxTransfer+0xc8>)
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e5      	bne.n	800b9ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d118      	bne.n	800ba3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f023 0310 	bic.w	r3, r3, #16
 800ba1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	461a      	mov	r2, r3
 800ba26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba28:	61bb      	str	r3, [r7, #24]
 800ba2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2c:	6979      	ldr	r1, [r7, #20]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	e841 2300 	strex	r3, r2, [r1]
 800ba34:	613b      	str	r3, [r7, #16]
   return(result);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e6      	bne.n	800ba0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba50:	bf00      	nop
 800ba52:	3754      	adds	r7, #84	@ 0x54
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	effffffe 	.word	0xeffffffe

0800ba60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba72:	2302      	movs	r3, #2
 800ba74:	e027      	b.n	800bac6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2224      	movs	r2, #36	@ 0x24
 800ba82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0201 	bic.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800baa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bae6:	2302      	movs	r3, #2
 800bae8:	e02d      	b.n	800bb46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2224      	movs	r2, #36	@ 0x24
 800baf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0201 	bic.w	r2, r2, #1
 800bb10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	430a      	orrs	r2, r1
 800bb24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f850 	bl	800bbcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d101      	bne.n	800bb66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb62:	2302      	movs	r3, #2
 800bb64:	e02d      	b.n	800bbc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2224      	movs	r2, #36	@ 0x24
 800bb72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0201 	bic.w	r2, r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f812 	bl	800bbcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d108      	bne.n	800bbee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbec:	e031      	b.n	800bc52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbee:	2310      	movs	r3, #16
 800bbf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbf2:	2310      	movs	r3, #16
 800bbf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	0e5b      	lsrs	r3, r3, #25
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	f003 0307 	and.w	r3, r3, #7
 800bc04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	0f5b      	lsrs	r3, r3, #29
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0307 	and.w	r3, r3, #7
 800bc14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	7b3a      	ldrb	r2, [r7, #12]
 800bc1a:	4911      	ldr	r1, [pc, #68]	@ (800bc60 <UARTEx_SetNbDataToProcess+0x94>)
 800bc1c:	5c8a      	ldrb	r2, [r1, r2]
 800bc1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc22:	7b3a      	ldrb	r2, [r7, #12]
 800bc24:	490f      	ldr	r1, [pc, #60]	@ (800bc64 <UARTEx_SetNbDataToProcess+0x98>)
 800bc26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc28:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	7b7a      	ldrb	r2, [r7, #13]
 800bc38:	4909      	ldr	r1, [pc, #36]	@ (800bc60 <UARTEx_SetNbDataToProcess+0x94>)
 800bc3a:	5c8a      	ldrb	r2, [r1, r2]
 800bc3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc40:	7b7a      	ldrb	r2, [r7, #13]
 800bc42:	4908      	ldr	r1, [pc, #32]	@ (800bc64 <UARTEx_SetNbDataToProcess+0x98>)
 800bc44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc46:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	0800fb18 	.word	0x0800fb18
 800bc64:	0800fb20 	.word	0x0800fb20

0800bc68 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc68:	b084      	sub	sp, #16
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	f107 001c 	add.w	r0, r7, #28
 800bc76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bc7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bc80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bc82:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bc86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bc8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bc8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <SDMMC_Init+0x50>)
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	431a      	orrs	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	b004      	add	sp, #16
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	ffc02c00 	.word	0xffc02c00

0800bcbc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b083      	sub	sp, #12
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f043 0203 	orr.w	r2, r3, #3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 0303 	and.w	r3, r3, #3
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	370c      	adds	r7, #12
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
	...

0800bd38 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd56:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bd5c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bd62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68da      	ldr	r2, [r3, #12]
 800bd6e:	4b06      	ldr	r3, [pc, #24]	@ (800bd88 <SDMMC_SendCommand+0x50>)
 800bd70:	4013      	ands	r3, r2
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	431a      	orrs	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	fffee0c0 	.word	0xfffee0c0

0800bd8c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	b2db      	uxtb	r3, r3
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b085      	sub	sp, #20
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3314      	adds	r3, #20
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	4413      	add	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bdf2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bdf8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bdfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800be16:	2300      	movs	r3, #0

}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be32:	2310      	movs	r3, #16
 800be34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be46:	f107 0308 	add.w	r3, r7, #8
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff ff73 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800be52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be56:	2110      	movs	r1, #16
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fa5f 	bl	800c31c <SDMMC_GetCmdResp1>
 800be5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be60:	69fb      	ldr	r3, [r7, #28]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3720      	adds	r7, #32
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b088      	sub	sp, #32
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be78:	2311      	movs	r3, #17
 800be7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be82:	2300      	movs	r3, #0
 800be84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be8c:	f107 0308 	add.w	r3, r7, #8
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7ff ff50 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be9c:	2111      	movs	r1, #17
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fa3c 	bl	800c31c <SDMMC_GetCmdResp1>
 800bea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bea6:	69fb      	ldr	r3, [r7, #28]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3720      	adds	r7, #32
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bebe:	2312      	movs	r3, #18
 800bec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bec8:	2300      	movs	r3, #0
 800beca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800becc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bed2:	f107 0308 	add.w	r3, r7, #8
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ff2d 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bede:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bee2:	2112      	movs	r1, #18
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fa19 	bl	800c31c <SDMMC_GetCmdResp1>
 800beea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beec:	69fb      	ldr	r3, [r7, #28]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3720      	adds	r7, #32
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b088      	sub	sp, #32
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf04:	2318      	movs	r3, #24
 800bf06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf18:	f107 0308 	add.w	r3, r7, #8
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff ff0a 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf28:	2118      	movs	r1, #24
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f9f6 	bl	800c31c <SDMMC_GetCmdResp1>
 800bf30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf32:	69fb      	ldr	r3, [r7, #28]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3720      	adds	r7, #32
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf4a:	2319      	movs	r3, #25
 800bf4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf54:	2300      	movs	r3, #0
 800bf56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf5e:	f107 0308 	add.w	r3, r7, #8
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff fee7 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf6e:	2119      	movs	r1, #25
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 f9d3 	bl	800c31c <SDMMC_GetCmdResp1>
 800bf76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf78:	69fb      	ldr	r3, [r7, #28]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3720      	adds	r7, #32
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
	...

0800bf84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b088      	sub	sp, #32
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf90:	230c      	movs	r3, #12
 800bf92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfa2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff feb8 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bfc8:	4a0b      	ldr	r2, [pc, #44]	@ (800bff8 <SDMMC_CmdStopTransfer+0x74>)
 800bfca:	210c      	movs	r1, #12
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f9a5 	bl	800c31c <SDMMC_GetCmdResp1>
 800bfd2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfe6:	d101      	bne.n	800bfec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bfec:	69fb      	ldr	r3, [r7, #28]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3720      	adds	r7, #32
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	05f5e100 	.word	0x05f5e100

0800bffc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b088      	sub	sp, #32
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c00a:	2307      	movs	r3, #7
 800c00c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c00e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c01c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c01e:	f107 0308 	add.w	r3, r7, #8
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff fe87 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c02a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c02e:	2107      	movs	r1, #7
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f973 	bl	800c31c <SDMMC_GetCmdResp1>
 800c036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c038:	69fb      	ldr	r3, [r7, #28]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3720      	adds	r7, #32
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b088      	sub	sp, #32
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c04e:	2300      	movs	r3, #0
 800c050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c052:	2300      	movs	r3, #0
 800c054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c05a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fe66 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fb97 	bl	800c7a0 <SDMMC_GetCmdError>
 800c072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c074:	69fb      	ldr	r3, [r7, #28]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3720      	adds	r7, #32
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b088      	sub	sp, #32
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c086:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c08c:	2308      	movs	r3, #8
 800c08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c09a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c09e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff fe46 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fb29 	bl	800c704 <SDMMC_GetCmdResp7>
 800c0b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3720      	adds	r7, #32
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b088      	sub	sp, #32
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c0cc:	2337      	movs	r3, #55	@ 0x37
 800c0ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0e0:	f107 0308 	add.w	r3, r7, #8
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7ff fe26 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c0ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0f0:	2137      	movs	r1, #55	@ 0x37
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f912 	bl	800c31c <SDMMC_GetCmdResp1>
 800c0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0fa:	69fb      	ldr	r3, [r7, #28]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3720      	adds	r7, #32
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c112:	2329      	movs	r3, #41	@ 0x29
 800c114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c11a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c11c:	2300      	movs	r3, #0
 800c11e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c124:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c126:	f107 0308 	add.w	r3, r7, #8
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff fe03 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fa2e 	bl	800c594 <SDMMC_GetCmdResp3>
 800c138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c13a:	69fb      	ldr	r3, [r7, #28]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c152:	2306      	movs	r3, #6
 800c154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c156:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c15a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c15c:	2300      	movs	r3, #0
 800c15e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c164:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c166:	f107 0308 	add.w	r3, r7, #8
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff fde3 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c172:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c176:	2106      	movs	r1, #6
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f8cf 	bl	800c31c <SDMMC_GetCmdResp1>
 800c17e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c180:	69fb      	ldr	r3, [r7, #28]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b088      	sub	sp, #32
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c192:	2300      	movs	r3, #0
 800c194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c196:	2333      	movs	r3, #51	@ 0x33
 800c198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c19a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1aa:	f107 0308 	add.w	r3, r7, #8
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fdc1 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1ba:	2133      	movs	r1, #51	@ 0x33
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f8ad 	bl	800c31c <SDMMC_GetCmdResp1>
 800c1c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1c4:	69fb      	ldr	r3, [r7, #28]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3720      	adds	r7, #32
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b088      	sub	sp, #32
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c1da:	2302      	movs	r3, #2
 800c1dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c1e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fd9f 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f980 	bl	800c500 <SDMMC_GetCmdResp2>
 800c200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c202:	69fb      	ldr	r3, [r7, #28]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3720      	adds	r7, #32
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c21a:	2309      	movs	r3, #9
 800c21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c21e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c224:	2300      	movs	r3, #0
 800c226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c22c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c22e:	f107 0308 	add.w	r3, r7, #8
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff fd7f 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f960 	bl	800c500 <SDMMC_GetCmdResp2>
 800c240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c242:	69fb      	ldr	r3, [r7, #28]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3720      	adds	r7, #32
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c256:	2300      	movs	r3, #0
 800c258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c25a:	2303      	movs	r3, #3
 800c25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c25e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c26c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fd5f 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	2103      	movs	r1, #3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f9c8 	bl	800c614 <SDMMC_GetCmdResp6>
 800c284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c286:	69fb      	ldr	r3, [r7, #28]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c29e:	230d      	movs	r3, #13
 800c2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b2:	f107 0308 	add.w	r3, r7, #8
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff fd3d 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2c2:	210d      	movs	r1, #13
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f829 	bl	800c31c <SDMMC_GetCmdResp1>
 800c2ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3720      	adds	r7, #32
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b088      	sub	sp, #32
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c2e2:	230d      	movs	r3, #13
 800c2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f6:	f107 0308 	add.w	r3, r7, #8
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff fd1b 	bl	800bd38 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c302:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c306:	210d      	movs	r1, #13
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f807 	bl	800c31c <SDMMC_GetCmdResp1>
 800c30e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c310:	69fb      	ldr	r3, [r7, #28]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3720      	adds	r7, #32
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	460b      	mov	r3, r1
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c32a:	4b70      	ldr	r3, [pc, #448]	@ (800c4ec <SDMMC_GetCmdResp1+0x1d0>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a70      	ldr	r2, [pc, #448]	@ (800c4f0 <SDMMC_GetCmdResp1+0x1d4>)
 800c330:	fba2 2303 	umull	r2, r3, r2, r3
 800c334:	0a5a      	lsrs	r2, r3, #9
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	fb02 f303 	mul.w	r3, r2, r3
 800c33c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	1e5a      	subs	r2, r3, #1
 800c342:	61fa      	str	r2, [r7, #28]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c348:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c34c:	e0c9      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c352:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	4b67      	ldr	r3, [pc, #412]	@ (800c4f4 <SDMMC_GetCmdResp1+0x1d8>)
 800c358:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0ef      	beq.n	800c33e <SDMMC_GetCmdResp1+0x22>
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1ea      	bne.n	800c33e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36c:	f003 0304 	and.w	r3, r3, #4
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2204      	movs	r2, #4
 800c378:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c37a:	2304      	movs	r3, #4
 800c37c:	e0b1      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2201      	movs	r2, #1
 800c38e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c390:	2301      	movs	r3, #1
 800c392:	e0a6      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	4a58      	ldr	r2, [pc, #352]	@ (800c4f8 <SDMMC_GetCmdResp1+0x1dc>)
 800c398:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff fcf6 	bl	800bd8c <SDMMC_GetCommandResponse>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	7afb      	ldrb	r3, [r7, #11]
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d001      	beq.n	800c3ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e099      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fcf8 	bl	800bda6 <SDMMC_GetResponse>
 800c3b6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	4b50      	ldr	r3, [pc, #320]	@ (800c4fc <SDMMC_GetCmdResp1+0x1e0>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e08d      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	da02      	bge.n	800c3d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c3d0:	e087      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3dc:	2340      	movs	r3, #64	@ 0x40
 800c3de:	e080      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3ea:	2380      	movs	r3, #128	@ 0x80
 800c3ec:	e079      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3fc:	e071      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c40c:	e069      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c41c:	e061      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c428:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c42c:	e059      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c43c:	e051      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c44c:	e049      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c458:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c45c:	e041      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c46c:	e039      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c478:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c47c:	e031      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c488:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c48c:	e029      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c498:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c49c:	e021      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c4ac:	e019      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c4bc:	e011      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c4cc:	e009      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f003 0308 	and.w	r3, r3, #8
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c4dc:	e001      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3720      	adds	r7, #32
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	24000000 	.word	0x24000000
 800c4f0:	10624dd3 	.word	0x10624dd3
 800c4f4:	00200045 	.word	0x00200045
 800c4f8:	002000c5 	.word	0x002000c5
 800c4fc:	fdffe008 	.word	0xfdffe008

0800c500 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c508:	4b1f      	ldr	r3, [pc, #124]	@ (800c588 <SDMMC_GetCmdResp2+0x88>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a1f      	ldr	r2, [pc, #124]	@ (800c58c <SDMMC_GetCmdResp2+0x8c>)
 800c50e:	fba2 2303 	umull	r2, r3, r2, r3
 800c512:	0a5b      	lsrs	r3, r3, #9
 800c514:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c518:	fb02 f303 	mul.w	r3, r2, r3
 800c51c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	1e5a      	subs	r2, r3, #1
 800c522:	60fa      	str	r2, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d102      	bne.n	800c52e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c528:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c52c:	e026      	b.n	800c57c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c532:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0ef      	beq.n	800c51e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1ea      	bne.n	800c51e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2204      	movs	r2, #4
 800c558:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c55a:	2304      	movs	r3, #4
 800c55c:	e00e      	b.n	800c57c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c570:	2301      	movs	r3, #1
 800c572:	e003      	b.n	800c57c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a06      	ldr	r2, [pc, #24]	@ (800c590 <SDMMC_GetCmdResp2+0x90>)
 800c578:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	24000000 	.word	0x24000000
 800c58c:	10624dd3 	.word	0x10624dd3
 800c590:	002000c5 	.word	0x002000c5

0800c594 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c59c:	4b1a      	ldr	r3, [pc, #104]	@ (800c608 <SDMMC_GetCmdResp3+0x74>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a1a      	ldr	r2, [pc, #104]	@ (800c60c <SDMMC_GetCmdResp3+0x78>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	0a5b      	lsrs	r3, r3, #9
 800c5a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5ac:	fb02 f303 	mul.w	r3, r2, r3
 800c5b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	60fa      	str	r2, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d102      	bne.n	800c5c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c5c0:	e01b      	b.n	800c5fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0ef      	beq.n	800c5b2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1ea      	bne.n	800c5b2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5ee:	2304      	movs	r3, #4
 800c5f0:	e003      	b.n	800c5fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a06      	ldr	r2, [pc, #24]	@ (800c610 <SDMMC_GetCmdResp3+0x7c>)
 800c5f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	24000000 	.word	0x24000000
 800c60c:	10624dd3 	.word	0x10624dd3
 800c610:	002000c5 	.word	0x002000c5

0800c614 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	460b      	mov	r3, r1
 800c61e:	607a      	str	r2, [r7, #4]
 800c620:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c622:	4b35      	ldr	r3, [pc, #212]	@ (800c6f8 <SDMMC_GetCmdResp6+0xe4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a35      	ldr	r2, [pc, #212]	@ (800c6fc <SDMMC_GetCmdResp6+0xe8>)
 800c628:	fba2 2303 	umull	r2, r3, r2, r3
 800c62c:	0a5b      	lsrs	r3, r3, #9
 800c62e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c632:	fb02 f303 	mul.w	r3, r2, r3
 800c636:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	1e5a      	subs	r2, r3, #1
 800c63c:	61fa      	str	r2, [r7, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d102      	bne.n	800c648 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c642:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c646:	e052      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c654:	2b00      	cmp	r3, #0
 800c656:	d0ef      	beq.n	800c638 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1ea      	bne.n	800c638 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c666:	f003 0304 	and.w	r3, r3, #4
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d004      	beq.n	800c678 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2204      	movs	r2, #4
 800c672:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c674:	2304      	movs	r3, #4
 800c676:	e03a      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b00      	cmp	r3, #0
 800c682:	d004      	beq.n	800c68e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2201      	movs	r2, #1
 800c688:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e02f      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f7ff fb7c 	bl	800bd8c <SDMMC_GetCommandResponse>
 800c694:	4603      	mov	r3, r0
 800c696:	461a      	mov	r2, r3
 800c698:	7afb      	ldrb	r3, [r7, #11]
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d001      	beq.n	800c6a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e025      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	4a16      	ldr	r2, [pc, #88]	@ (800c700 <SDMMC_GetCmdResp6+0xec>)
 800c6a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff fb7b 	bl	800bda6 <SDMMC_GetResponse>
 800c6b0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	0c1b      	lsrs	r3, r3, #16
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e011      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c6d8:	e009      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6e8:	e001      	b.n	800c6ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3720      	adds	r7, #32
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	24000000 	.word	0x24000000
 800c6fc:	10624dd3 	.word	0x10624dd3
 800c700:	002000c5 	.word	0x002000c5

0800c704 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c70c:	4b22      	ldr	r3, [pc, #136]	@ (800c798 <SDMMC_GetCmdResp7+0x94>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a22      	ldr	r2, [pc, #136]	@ (800c79c <SDMMC_GetCmdResp7+0x98>)
 800c712:	fba2 2303 	umull	r2, r3, r2, r3
 800c716:	0a5b      	lsrs	r3, r3, #9
 800c718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c71c:	fb02 f303 	mul.w	r3, r2, r3
 800c720:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1e5a      	subs	r2, r3, #1
 800c726:	60fa      	str	r2, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c72c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c730:	e02c      	b.n	800c78c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c736:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d0ef      	beq.n	800c722 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1ea      	bne.n	800c722 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2204      	movs	r2, #4
 800c75c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c75e:	2304      	movs	r3, #4
 800c760:	e014      	b.n	800c78c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c774:	2301      	movs	r3, #1
 800c776:	e009      	b.n	800c78c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2240      	movs	r2, #64	@ 0x40
 800c788:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c78a:	2300      	movs	r3, #0

}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr
 800c798:	24000000 	.word	0x24000000
 800c79c:	10624dd3 	.word	0x10624dd3

0800c7a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c7a8:	4b11      	ldr	r3, [pc, #68]	@ (800c7f0 <SDMMC_GetCmdError+0x50>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a11      	ldr	r2, [pc, #68]	@ (800c7f4 <SDMMC_GetCmdError+0x54>)
 800c7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b2:	0a5b      	lsrs	r3, r3, #9
 800c7b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7b8:	fb02 f303 	mul.w	r3, r2, r3
 800c7bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	1e5a      	subs	r2, r3, #1
 800c7c2:	60fa      	str	r2, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d102      	bne.n	800c7ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7cc:	e009      	b.n	800c7e2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0f1      	beq.n	800c7be <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a06      	ldr	r2, [pc, #24]	@ (800c7f8 <SDMMC_GetCmdError+0x58>)
 800c7de:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3714      	adds	r7, #20
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	24000000 	.word	0x24000000
 800c7f4:	10624dd3 	.word	0x10624dd3
 800c7f8:	002000c5 	.word	0x002000c5

0800c7fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c800:	4904      	ldr	r1, [pc, #16]	@ (800c814 <MX_FATFS_Init+0x18>)
 800c802:	4805      	ldr	r0, [pc, #20]	@ (800c818 <MX_FATFS_Init+0x1c>)
 800c804:	f002 fdca 	bl	800f39c <FATFS_LinkDriver>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	4b03      	ldr	r3, [pc, #12]	@ (800c81c <MX_FATFS_Init+0x20>)
 800c80e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c810:	bf00      	nop
 800c812:	bd80      	pop	{r7, pc}
 800c814:	240017dc 	.word	0x240017dc
 800c818:	0800fb28 	.word	0x0800fb28
 800c81c:	240017d8 	.word	0x240017d8

0800c820 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c820:	b480      	push	{r7}
 800c822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c824:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c826:	4618      	mov	r0, r3
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c83a:	f000 f885 	bl	800c948 <BSP_SD_IsDetected>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b01      	cmp	r3, #1
 800c842:	d001      	beq.n	800c848 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c844:	2302      	movs	r3, #2
 800c846:	e012      	b.n	800c86e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c848:	480b      	ldr	r0, [pc, #44]	@ (800c878 <BSP_SD_Init+0x48>)
 800c84a:	f7fc f8d1 	bl	80089f0 <HAL_SD_Init>
 800c84e:	4603      	mov	r3, r0
 800c850:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d109      	bne.n	800c86c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c85c:	4806      	ldr	r0, [pc, #24]	@ (800c878 <BSP_SD_Init+0x48>)
 800c85e:	f7fc ff87 	bl	8009770 <HAL_SD_ConfigWideBusOperation>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c86c:	79fb      	ldrb	r3, [r7, #7]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	2400163c 	.word	0x2400163c

0800c87c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c888:	2300      	movs	r3, #0
 800c88a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	68f9      	ldr	r1, [r7, #12]
 800c892:	4806      	ldr	r0, [pc, #24]	@ (800c8ac <BSP_SD_ReadBlocks_DMA+0x30>)
 800c894:	f7fc f9cc 	bl	8008c30 <HAL_SD_ReadBlocks_DMA>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	2400163c 	.word	0x2400163c

0800c8b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	68f9      	ldr	r1, [r7, #12]
 800c8c6:	4806      	ldr	r0, [pc, #24]	@ (800c8e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c8c8:	f7fc fa5a 	bl	8008d80 <HAL_SD_WriteBlocks_DMA>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3718      	adds	r7, #24
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	2400163c 	.word	0x2400163c

0800c8e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c8e8:	4805      	ldr	r0, [pc, #20]	@ (800c900 <BSP_SD_GetCardState+0x1c>)
 800c8ea:	f7fd f853 	bl	8009994 <HAL_SD_GetCardState>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	bf14      	ite	ne
 800c8f4:	2301      	movne	r3, #1
 800c8f6:	2300      	moveq	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	2400163c 	.word	0x2400163c

0800c904 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c90c:	6879      	ldr	r1, [r7, #4]
 800c90e:	4803      	ldr	r0, [pc, #12]	@ (800c91c <BSP_SD_GetCardInfo+0x18>)
 800c910:	f7fc ff02 	bl	8009718 <HAL_SD_GetCardInfo>
}
 800c914:	bf00      	nop
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	2400163c 	.word	0x2400163c

0800c920 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c928:	f000 f9a0 	bl	800cc6c <BSP_SD_WriteCpltCallback>
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c93c:	f000 f9a2 	bl	800cc84 <BSP_SD_ReadCpltCallback>
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c94e:	2301      	movs	r3, #1
 800c950:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c952:	f000 f80b 	bl	800c96c <BSP_PlatformIsDetected>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c95c:	2300      	movs	r3, #0
 800c95e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c960:	79fb      	ldrb	r3, [r7, #7]
 800c962:	b2db      	uxtb	r3, r3
}
 800c964:	4618      	mov	r0, r3
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c972:	2301      	movs	r3, #1
 800c974:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c976:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c97a:	4806      	ldr	r0, [pc, #24]	@ (800c994 <BSP_PlatformIsDetected+0x28>)
 800c97c:	f7f6 fcec 	bl	8003358 <HAL_GPIO_ReadPin>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c986:	2300      	movs	r3, #0
 800c988:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c98a:	79fb      	ldrb	r3, [r7, #7]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	58022000 	.word	0x58022000

0800c998 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c9a0:	f7f5 fe02 	bl	80025a8 <HAL_GetTick>
 800c9a4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c9a6:	e006      	b.n	800c9b6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c9a8:	f7ff ff9c 	bl	800c8e4 <BSP_SD_GetCardState>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e009      	b.n	800c9ca <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c9b6:	f7f5 fdf7 	bl	80025a8 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d8f0      	bhi.n	800c9a8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c9c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c9de:	4b0b      	ldr	r3, [pc, #44]	@ (800ca0c <SD_CheckStatus+0x38>)
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c9e4:	f7ff ff7e 	bl	800c8e4 <BSP_SD_GetCardState>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d107      	bne.n	800c9fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c9ee:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <SD_CheckStatus+0x38>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	f023 0301 	bic.w	r3, r3, #1
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	4b04      	ldr	r3, [pc, #16]	@ (800ca0c <SD_CheckStatus+0x38>)
 800c9fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9fe:	4b03      	ldr	r3, [pc, #12]	@ (800ca0c <SD_CheckStatus+0x38>)
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	b2db      	uxtb	r3, r3
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	24000019 	.word	0x24000019

0800ca10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca1a:	f7ff ff09 	bl	800c830 <BSP_SD_Init>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d107      	bne.n	800ca34 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ca24:	79fb      	ldrb	r3, [r7, #7]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff ffd4 	bl	800c9d4 <SD_CheckStatus>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <SD_initialize+0x34>)
 800ca32:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ca34:	4b03      	ldr	r3, [pc, #12]	@ (800ca44 <SD_initialize+0x34>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	b2db      	uxtb	r3, r3
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	24000019 	.word	0x24000019

0800ca48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff ffbd 	bl	800c9d4 <SD_CheckStatus>
 800ca5a:	4603      	mov	r3, r0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca78:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ca7c:	f7ff ff8c 	bl	800c998 <SD_CheckStatusWithTimeout>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	da01      	bge.n	800ca8a <SD_read+0x26>
  {
    return res;
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
 800ca88:	e03b      	b.n	800cb02 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	68b8      	ldr	r0, [r7, #8]
 800ca90:	f7ff fef4 	bl	800c87c <BSP_SD_ReadBlocks_DMA>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d132      	bne.n	800cb00 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ca9a:	4b1c      	ldr	r3, [pc, #112]	@ (800cb0c <SD_read+0xa8>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800caa0:	f7f5 fd82 	bl	80025a8 <HAL_GetTick>
 800caa4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800caa6:	bf00      	nop
 800caa8:	4b18      	ldr	r3, [pc, #96]	@ (800cb0c <SD_read+0xa8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d108      	bne.n	800cac2 <SD_read+0x5e>
 800cab0:	f7f5 fd7a 	bl	80025a8 <HAL_GetTick>
 800cab4:	4602      	mov	r2, r0
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d9f2      	bls.n	800caa8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800cac2:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <SD_read+0xa8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	75fb      	strb	r3, [r7, #23]
 800cace:	e017      	b.n	800cb00 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800cad0:	4b0e      	ldr	r3, [pc, #56]	@ (800cb0c <SD_read+0xa8>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cad6:	f7f5 fd67 	bl	80025a8 <HAL_GetTick>
 800cada:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cadc:	e007      	b.n	800caee <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cade:	f7ff ff01 	bl	800c8e4 <BSP_SD_GetCardState>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <SD_read+0x8a>
          {
            res = RES_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800caec:	e008      	b.n	800cb00 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800caee:	f7f5 fd5b 	bl	80025a8 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d9ee      	bls.n	800cade <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	240017e4 	.word	0x240017e4

0800cb10 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	607a      	str	r2, [r7, #4]
 800cb1a:	603b      	str	r3, [r7, #0]
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800cb24:	4b24      	ldr	r3, [pc, #144]	@ (800cbb8 <SD_write+0xa8>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb2a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cb2e:	f7ff ff33 	bl	800c998 <SD_CheckStatusWithTimeout>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da01      	bge.n	800cb3c <SD_write+0x2c>
  {
    return res;
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	e038      	b.n	800cbae <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	68b8      	ldr	r0, [r7, #8]
 800cb42:	f7ff feb5 	bl	800c8b0 <BSP_SD_WriteBlocks_DMA>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d12f      	bne.n	800cbac <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cb4c:	f7f5 fd2c 	bl	80025a8 <HAL_GetTick>
 800cb50:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cb52:	bf00      	nop
 800cb54:	4b18      	ldr	r3, [pc, #96]	@ (800cbb8 <SD_write+0xa8>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d108      	bne.n	800cb6e <SD_write+0x5e>
 800cb5c:	f7f5 fd24 	bl	80025a8 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d9f2      	bls.n	800cb54 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800cb6e:	4b12      	ldr	r3, [pc, #72]	@ (800cbb8 <SD_write+0xa8>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d102      	bne.n	800cb7c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	75fb      	strb	r3, [r7, #23]
 800cb7a:	e017      	b.n	800cbac <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800cb7c:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb8 <SD_write+0xa8>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cb82:	f7f5 fd11 	bl	80025a8 <HAL_GetTick>
 800cb86:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb88:	e007      	b.n	800cb9a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb8a:	f7ff feab 	bl	800c8e4 <BSP_SD_GetCardState>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d102      	bne.n	800cb9a <SD_write+0x8a>
          {
            res = RES_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	75fb      	strb	r3, [r7, #23]
            break;
 800cb98:	e008      	b.n	800cbac <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb9a:	f7f5 fd05 	bl	80025a8 <HAL_GetTick>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d9ee      	bls.n	800cb8a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	240017e0 	.word	0x240017e0

0800cbbc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08c      	sub	sp, #48	@ 0x30
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	603a      	str	r2, [r7, #0]
 800cbc6:	71fb      	strb	r3, [r7, #7]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbd2:	4b25      	ldr	r3, [pc, #148]	@ (800cc68 <SD_ioctl+0xac>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <SD_ioctl+0x28>
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e03c      	b.n	800cc5e <SD_ioctl+0xa2>

  switch (cmd)
 800cbe4:	79bb      	ldrb	r3, [r7, #6]
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d834      	bhi.n	800cc54 <SD_ioctl+0x98>
 800cbea:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf0 <SD_ioctl+0x34>)
 800cbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf0:	0800cc01 	.word	0x0800cc01
 800cbf4:	0800cc09 	.word	0x0800cc09
 800cbf8:	0800cc21 	.word	0x0800cc21
 800cbfc:	0800cc3b 	.word	0x0800cc3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc06:	e028      	b.n	800cc5a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc08:	f107 0308 	add.w	r3, r7, #8
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff fe79 	bl	800c904 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc12:	6a3a      	ldr	r2, [r7, #32]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc1e:	e01c      	b.n	800cc5a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc20:	f107 0308 	add.w	r3, r7, #8
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff fe6d 	bl	800c904 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc38:	e00f      	b.n	800cc5a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff fe60 	bl	800c904 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	0a5a      	lsrs	r2, r3, #9
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc52:	e002      	b.n	800cc5a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc54:	2304      	movs	r3, #4
 800cc56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cc5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3730      	adds	r7, #48	@ 0x30
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	24000019 	.word	0x24000019

0800cc6c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cc70:	4b03      	ldr	r3, [pc, #12]	@ (800cc80 <BSP_SD_WriteCpltCallback+0x14>)
 800cc72:	2201      	movs	r2, #1
 800cc74:	601a      	str	r2, [r3, #0]
}
 800cc76:	bf00      	nop
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	240017e0 	.word	0x240017e0

0800cc84 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cc84:	b480      	push	{r7}
 800cc86:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cc88:	4b03      	ldr	r3, [pc, #12]	@ (800cc98 <BSP_SD_ReadCpltCallback+0x14>)
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	601a      	str	r2, [r3, #0]
}
 800cc8e:	bf00      	nop
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	240017e4 	.word	0x240017e4

0800cc9c <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cca0:	bf00      	nop
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	4a08      	ldr	r2, [pc, #32]	@ (800ccdc <disk_status+0x30>)
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	79fa      	ldrb	r2, [r7, #7]
 800ccc4:	4905      	ldr	r1, [pc, #20]	@ (800ccdc <disk_status+0x30>)
 800ccc6:	440a      	add	r2, r1
 800ccc8:	7a12      	ldrb	r2, [r2, #8]
 800ccca:	4610      	mov	r0, r2
 800cccc:	4798      	blx	r3
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	24001810 	.word	0x24001810

0800cce0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ccee:	79fb      	ldrb	r3, [r7, #7]
 800ccf0:	4a0e      	ldr	r2, [pc, #56]	@ (800cd2c <disk_initialize+0x4c>)
 800ccf2:	5cd3      	ldrb	r3, [r2, r3]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d114      	bne.n	800cd22 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	4a0c      	ldr	r2, [pc, #48]	@ (800cd2c <disk_initialize+0x4c>)
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	79fa      	ldrb	r2, [r7, #7]
 800cd06:	4909      	ldr	r1, [pc, #36]	@ (800cd2c <disk_initialize+0x4c>)
 800cd08:	440a      	add	r2, r1
 800cd0a:	7a12      	ldrb	r2, [r2, #8]
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
 800cd1c:	4a03      	ldr	r2, [pc, #12]	@ (800cd2c <disk_initialize+0x4c>)
 800cd1e:	2101      	movs	r1, #1
 800cd20:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	24001810 	.word	0x24001810

0800cd30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cd30:	b590      	push	{r4, r7, lr}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60b9      	str	r1, [r7, #8]
 800cd38:	607a      	str	r2, [r7, #4]
 800cd3a:	603b      	str	r3, [r7, #0]
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	4a0a      	ldr	r2, [pc, #40]	@ (800cd6c <disk_read+0x3c>)
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	689c      	ldr	r4, [r3, #8]
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	4a07      	ldr	r2, [pc, #28]	@ (800cd6c <disk_read+0x3c>)
 800cd50:	4413      	add	r3, r2
 800cd52:	7a18      	ldrb	r0, [r3, #8]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	68b9      	ldr	r1, [r7, #8]
 800cd5a:	47a0      	blx	r4
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	371c      	adds	r7, #28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd90      	pop	{r4, r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	24001810 	.word	0x24001810

0800cd70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd70:	b590      	push	{r4, r7, lr}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	607a      	str	r2, [r7, #4]
 800cd7a:	603b      	str	r3, [r7, #0]
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	4a0a      	ldr	r2, [pc, #40]	@ (800cdac <disk_write+0x3c>)
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	68dc      	ldr	r4, [r3, #12]
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	4a07      	ldr	r2, [pc, #28]	@ (800cdac <disk_write+0x3c>)
 800cd90:	4413      	add	r3, r2
 800cd92:	7a18      	ldrb	r0, [r3, #8]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	68b9      	ldr	r1, [r7, #8]
 800cd9a:	47a0      	blx	r4
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd90      	pop	{r4, r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	24001810 	.word	0x24001810

0800cdb0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	603a      	str	r2, [r7, #0]
 800cdba:	71fb      	strb	r3, [r7, #7]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	4a09      	ldr	r2, [pc, #36]	@ (800cde8 <disk_ioctl+0x38>)
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	79fa      	ldrb	r2, [r7, #7]
 800cdce:	4906      	ldr	r1, [pc, #24]	@ (800cde8 <disk_ioctl+0x38>)
 800cdd0:	440a      	add	r2, r1
 800cdd2:	7a10      	ldrb	r0, [r2, #8]
 800cdd4:	79b9      	ldrb	r1, [r7, #6]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4798      	blx	r3
 800cdda:	4603      	mov	r3, r0
 800cddc:	73fb      	strb	r3, [r7, #15]
  return res;
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	24001810 	.word	0x24001810

0800cdec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cdfc:	89fb      	ldrh	r3, [r7, #14]
 800cdfe:	021b      	lsls	r3, r3, #8
 800ce00:	b21a      	sxth	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	b21b      	sxth	r3, r3
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	b21b      	sxth	r3, r3
 800ce0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ce0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	3303      	adds	r3, #3
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	021b      	lsls	r3, r3, #8
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	3202      	adds	r2, #2
 800ce34:	7812      	ldrb	r2, [r2, #0]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	021b      	lsls	r3, r3, #8
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	3201      	adds	r2, #1
 800ce42:	7812      	ldrb	r2, [r2, #0]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	021b      	lsls	r3, r3, #8
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	7812      	ldrb	r2, [r2, #0]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce54:	68fb      	ldr	r3, [r7, #12]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce62:	b480      	push	{r7}
 800ce64:	b083      	sub	sp, #12
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	887a      	ldrh	r2, [r7, #2]
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	887b      	ldrh	r3, [r7, #2]
 800ce7c:	0a1b      	lsrs	r3, r3, #8
 800ce7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	607a      	str	r2, [r7, #4]
 800ce86:	887a      	ldrh	r2, [r7, #2]
 800ce88:	b2d2      	uxtb	r2, r2
 800ce8a:	701a      	strb	r2, [r3, #0]
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	1c5a      	adds	r2, r3, #1
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	b2d2      	uxtb	r2, r2
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	0a1b      	lsrs	r3, r3, #8
 800ceb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	b2d2      	uxtb	r2, r2
 800cebe:	701a      	strb	r2, [r3, #0]
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	0a1b      	lsrs	r3, r3, #8
 800cec4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	b2d2      	uxtb	r2, r2
 800ced0:	701a      	strb	r2, [r3, #0]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	0a1b      	lsrs	r3, r3, #8
 800ced6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	b2d2      	uxtb	r2, r2
 800cee2:	701a      	strb	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cef0:	b480      	push	{r7}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00d      	beq.n	800cf26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cf0a:	693a      	ldr	r2, [r7, #16]
 800cf0c:	1c53      	adds	r3, r2, #1
 800cf0e:	613b      	str	r3, [r7, #16]
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	1c59      	adds	r1, r3, #1
 800cf14:	6179      	str	r1, [r7, #20]
 800cf16:	7812      	ldrb	r2, [r2, #0]
 800cf18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	607b      	str	r3, [r7, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f1      	bne.n	800cf0a <mem_cpy+0x1a>
	}
}
 800cf26:	bf00      	nop
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cf32:	b480      	push	{r7}
 800cf34:	b087      	sub	sp, #28
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	617a      	str	r2, [r7, #20]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	b2d2      	uxtb	r2, r2
 800cf4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1f3      	bne.n	800cf42 <mem_set+0x10>
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	371c      	adds	r7, #28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf68:	b480      	push	{r7}
 800cf6a:	b089      	sub	sp, #36	@ 0x24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	61fb      	str	r3, [r7, #28]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	61fa      	str	r2, [r7, #28]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	61ba      	str	r2, [r7, #24]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	1acb      	subs	r3, r1, r3
 800cf94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <mem_cmp+0x40>
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0eb      	beq.n	800cf80 <mem_cmp+0x18>

	return r;
 800cfa8:	697b      	ldr	r3, [r7, #20]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3724      	adds	r7, #36	@ 0x24
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cfb6:	b480      	push	{r7}
 800cfb8:	b083      	sub	sp, #12
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cfc0:	e002      	b.n	800cfc8 <chk_chr+0x12>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	607b      	str	r3, [r7, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d005      	beq.n	800cfdc <chk_chr+0x26>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d1f2      	bne.n	800cfc2 <chk_chr+0xc>
	return *str;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	781b      	ldrb	r3, [r3, #0]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cff6:	2300      	movs	r3, #0
 800cff8:	60bb      	str	r3, [r7, #8]
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	e029      	b.n	800d054 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d000:	4a27      	ldr	r2, [pc, #156]	@ (800d0a0 <chk_lock+0xb4>)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	4413      	add	r3, r2
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d01d      	beq.n	800d04a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d00e:	4a24      	ldr	r2, [pc, #144]	@ (800d0a0 <chk_lock+0xb4>)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d116      	bne.n	800d04e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d020:	4a1f      	ldr	r2, [pc, #124]	@ (800d0a0 <chk_lock+0xb4>)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	011b      	lsls	r3, r3, #4
 800d026:	4413      	add	r3, r2
 800d028:	3304      	adds	r3, #4
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d030:	429a      	cmp	r2, r3
 800d032:	d10c      	bne.n	800d04e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d034:	4a1a      	ldr	r2, [pc, #104]	@ (800d0a0 <chk_lock+0xb4>)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	4413      	add	r3, r2
 800d03c:	3308      	adds	r3, #8
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d044:	429a      	cmp	r2, r3
 800d046:	d102      	bne.n	800d04e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d048:	e007      	b.n	800d05a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d04a:	2301      	movs	r3, #1
 800d04c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3301      	adds	r3, #1
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d9d2      	bls.n	800d000 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d109      	bne.n	800d074 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <chk_lock+0x80>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d101      	bne.n	800d070 <chk_lock+0x84>
 800d06c:	2300      	movs	r3, #0
 800d06e:	e010      	b.n	800d092 <chk_lock+0xa6>
 800d070:	2312      	movs	r3, #18
 800d072:	e00e      	b.n	800d092 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d108      	bne.n	800d08c <chk_lock+0xa0>
 800d07a:	4a09      	ldr	r2, [pc, #36]	@ (800d0a0 <chk_lock+0xb4>)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	4413      	add	r3, r2
 800d082:	330c      	adds	r3, #12
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d08a:	d101      	bne.n	800d090 <chk_lock+0xa4>
 800d08c:	2310      	movs	r3, #16
 800d08e:	e000      	b.n	800d092 <chk_lock+0xa6>
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	240017f0 	.word	0x240017f0

0800d0a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	607b      	str	r3, [r7, #4]
 800d0ae:	e002      	b.n	800d0b6 <enq_lock+0x12>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	607b      	str	r3, [r7, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d806      	bhi.n	800d0ca <enq_lock+0x26>
 800d0bc:	4a09      	ldr	r2, [pc, #36]	@ (800d0e4 <enq_lock+0x40>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	011b      	lsls	r3, r3, #4
 800d0c2:	4413      	add	r3, r2
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1f2      	bne.n	800d0b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	bf14      	ite	ne
 800d0d0:	2301      	movne	r3, #1
 800d0d2:	2300      	moveq	r3, #0
 800d0d4:	b2db      	uxtb	r3, r3
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	240017f0 	.word	0x240017f0

0800d0e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60fb      	str	r3, [r7, #12]
 800d0f6:	e01f      	b.n	800d138 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d0f8:	4a41      	ldr	r2, [pc, #260]	@ (800d200 <inc_lock+0x118>)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	011b      	lsls	r3, r3, #4
 800d0fe:	4413      	add	r3, r2
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	429a      	cmp	r2, r3
 800d108:	d113      	bne.n	800d132 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d10a:	4a3d      	ldr	r2, [pc, #244]	@ (800d200 <inc_lock+0x118>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	011b      	lsls	r3, r3, #4
 800d110:	4413      	add	r3, r2
 800d112:	3304      	adds	r3, #4
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d109      	bne.n	800d132 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d11e:	4a38      	ldr	r2, [pc, #224]	@ (800d200 <inc_lock+0x118>)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	011b      	lsls	r3, r3, #4
 800d124:	4413      	add	r3, r2
 800d126:	3308      	adds	r3, #8
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d12e:	429a      	cmp	r2, r3
 800d130:	d006      	beq.n	800d140 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3301      	adds	r3, #1
 800d136:	60fb      	str	r3, [r7, #12]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d9dc      	bls.n	800d0f8 <inc_lock+0x10>
 800d13e:	e000      	b.n	800d142 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d140:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d132      	bne.n	800d1ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d148:	2300      	movs	r3, #0
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	e002      	b.n	800d154 <inc_lock+0x6c>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3301      	adds	r3, #1
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b01      	cmp	r3, #1
 800d158:	d806      	bhi.n	800d168 <inc_lock+0x80>
 800d15a:	4a29      	ldr	r2, [pc, #164]	@ (800d200 <inc_lock+0x118>)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	011b      	lsls	r3, r3, #4
 800d160:	4413      	add	r3, r2
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1f2      	bne.n	800d14e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d101      	bne.n	800d172 <inc_lock+0x8a>
 800d16e:	2300      	movs	r3, #0
 800d170:	e040      	b.n	800d1f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	4922      	ldr	r1, [pc, #136]	@ (800d200 <inc_lock+0x118>)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	011b      	lsls	r3, r3, #4
 800d17c:	440b      	add	r3, r1
 800d17e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	689a      	ldr	r2, [r3, #8]
 800d184:	491e      	ldr	r1, [pc, #120]	@ (800d200 <inc_lock+0x118>)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	011b      	lsls	r3, r3, #4
 800d18a:	440b      	add	r3, r1
 800d18c:	3304      	adds	r3, #4
 800d18e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	695a      	ldr	r2, [r3, #20]
 800d194:	491a      	ldr	r1, [pc, #104]	@ (800d200 <inc_lock+0x118>)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	440b      	add	r3, r1
 800d19c:	3308      	adds	r3, #8
 800d19e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d1a0:	4a17      	ldr	r2, [pc, #92]	@ (800d200 <inc_lock+0x118>)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	011b      	lsls	r3, r3, #4
 800d1a6:	4413      	add	r3, r2
 800d1a8:	330c      	adds	r3, #12
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d009      	beq.n	800d1c8 <inc_lock+0xe0>
 800d1b4:	4a12      	ldr	r2, [pc, #72]	@ (800d200 <inc_lock+0x118>)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	011b      	lsls	r3, r3, #4
 800d1ba:	4413      	add	r3, r2
 800d1bc:	330c      	adds	r3, #12
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <inc_lock+0xe0>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e015      	b.n	800d1f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d108      	bne.n	800d1e0 <inc_lock+0xf8>
 800d1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800d200 <inc_lock+0x118>)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	011b      	lsls	r3, r3, #4
 800d1d4:	4413      	add	r3, r2
 800d1d6:	330c      	adds	r3, #12
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	e001      	b.n	800d1e4 <inc_lock+0xfc>
 800d1e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1e4:	4906      	ldr	r1, [pc, #24]	@ (800d200 <inc_lock+0x118>)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	440b      	add	r3, r1
 800d1ec:	330c      	adds	r3, #12
 800d1ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	3301      	adds	r3, #1
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	240017f0 	.word	0x240017f0

0800d204 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3b01      	subs	r3, #1
 800d210:	607b      	str	r3, [r7, #4]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d825      	bhi.n	800d264 <dec_lock+0x60>
		n = Files[i].ctr;
 800d218:	4a17      	ldr	r2, [pc, #92]	@ (800d278 <dec_lock+0x74>)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	4413      	add	r3, r2
 800d220:	330c      	adds	r3, #12
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d226:	89fb      	ldrh	r3, [r7, #14]
 800d228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d22c:	d101      	bne.n	800d232 <dec_lock+0x2e>
 800d22e:	2300      	movs	r3, #0
 800d230:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d232:	89fb      	ldrh	r3, [r7, #14]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <dec_lock+0x3a>
 800d238:	89fb      	ldrh	r3, [r7, #14]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d23e:	4a0e      	ldr	r2, [pc, #56]	@ (800d278 <dec_lock+0x74>)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	011b      	lsls	r3, r3, #4
 800d244:	4413      	add	r3, r2
 800d246:	330c      	adds	r3, #12
 800d248:	89fa      	ldrh	r2, [r7, #14]
 800d24a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d24c:	89fb      	ldrh	r3, [r7, #14]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d105      	bne.n	800d25e <dec_lock+0x5a>
 800d252:	4a09      	ldr	r2, [pc, #36]	@ (800d278 <dec_lock+0x74>)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	011b      	lsls	r3, r3, #4
 800d258:	4413      	add	r3, r2
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	737b      	strb	r3, [r7, #13]
 800d262:	e001      	b.n	800d268 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d264:	2302      	movs	r3, #2
 800d266:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d268:	7b7b      	ldrb	r3, [r7, #13]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3714      	adds	r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	240017f0 	.word	0x240017f0

0800d27c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d284:	2300      	movs	r3, #0
 800d286:	60fb      	str	r3, [r7, #12]
 800d288:	e010      	b.n	800d2ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d28a:	4a0d      	ldr	r2, [pc, #52]	@ (800d2c0 <clear_lock+0x44>)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	011b      	lsls	r3, r3, #4
 800d290:	4413      	add	r3, r2
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d105      	bne.n	800d2a6 <clear_lock+0x2a>
 800d29a:	4a09      	ldr	r2, [pc, #36]	@ (800d2c0 <clear_lock+0x44>)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	4413      	add	r3, r2
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d9eb      	bls.n	800d28a <clear_lock+0xe>
	}
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	240017f0 	.word	0x240017f0

0800d2c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	78db      	ldrb	r3, [r3, #3]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d034      	beq.n	800d342 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7858      	ldrb	r0, [r3, #1]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	697a      	ldr	r2, [r7, #20]
 800d2ec:	f7ff fd40 	bl	800cd70 <disk_write>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	73fb      	strb	r3, [r7, #15]
 800d2fa:	e022      	b.n	800d342 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	1ad2      	subs	r2, r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d217      	bcs.n	800d342 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	789b      	ldrb	r3, [r3, #2]
 800d316:	613b      	str	r3, [r7, #16]
 800d318:	e010      	b.n	800d33c <sync_window+0x78>
					wsect += fs->fsize;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	4413      	add	r3, r2
 800d322:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7858      	ldrb	r0, [r3, #1]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d32e:	2301      	movs	r3, #1
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	f7ff fd1d 	bl	800cd70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	3b01      	subs	r3, #1
 800d33a:	613b      	str	r3, [r7, #16]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d8eb      	bhi.n	800d31a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	429a      	cmp	r2, r3
 800d362:	d01b      	beq.n	800d39c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7ff ffad 	bl	800d2c4 <sync_window>
 800d36a:	4603      	mov	r3, r0
 800d36c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d113      	bne.n	800d39c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7858      	ldrb	r0, [r3, #1]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d37e:	2301      	movs	r3, #1
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	f7ff fcd5 	bl	800cd30 <disk_read>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d004      	beq.n	800d396 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d38c:	f04f 33ff 	mov.w	r3, #4294967295
 800d390:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d392:	2301      	movs	r3, #1
 800d394:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff ff87 	bl	800d2c4 <sync_window>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3ba:	7bfb      	ldrb	r3, [r7, #15]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d158      	bne.n	800d472 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d148      	bne.n	800d45a <sync_fs+0xb2>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	791b      	ldrb	r3, [r3, #4]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d144      	bne.n	800d45a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3330      	adds	r3, #48	@ 0x30
 800d3d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3d8:	2100      	movs	r1, #0
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff fda9 	bl	800cf32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3330      	adds	r3, #48	@ 0x30
 800d3e4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d3e8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff fd38 	bl	800ce62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3330      	adds	r3, #48	@ 0x30
 800d3f6:	4921      	ldr	r1, [pc, #132]	@ (800d47c <sync_fs+0xd4>)
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fd4d 	bl	800ce98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	3330      	adds	r3, #48	@ 0x30
 800d402:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d406:	491e      	ldr	r1, [pc, #120]	@ (800d480 <sync_fs+0xd8>)
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fd45 	bl	800ce98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	3330      	adds	r3, #48	@ 0x30
 800d412:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	4619      	mov	r1, r3
 800d41c:	4610      	mov	r0, r2
 800d41e:	f7ff fd3b 	bl	800ce98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	3330      	adds	r3, #48	@ 0x30
 800d426:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	4619      	mov	r1, r3
 800d430:	4610      	mov	r0, r2
 800d432:	f7ff fd31 	bl	800ce98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	7858      	ldrb	r0, [r3, #1]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d44e:	2301      	movs	r3, #1
 800d450:	f7ff fc8e 	bl	800cd70 <disk_write>
			fs->fsi_flag = 0;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	785b      	ldrb	r3, [r3, #1]
 800d45e:	2200      	movs	r2, #0
 800d460:	2100      	movs	r1, #0
 800d462:	4618      	mov	r0, r3
 800d464:	f7ff fca4 	bl	800cdb0 <disk_ioctl>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <sync_fs+0xca>
 800d46e:	2301      	movs	r3, #1
 800d470:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d472:	7bfb      	ldrb	r3, [r7, #15]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	41615252 	.word	0x41615252
 800d480:	61417272 	.word	0x61417272

0800d484 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	3b02      	subs	r3, #2
 800d492:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	3b02      	subs	r3, #2
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d301      	bcc.n	800d4a4 <clust2sect+0x20>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	e008      	b.n	800d4b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	895b      	ldrh	r3, [r3, #10]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	fb03 f202 	mul.w	r2, r3, r2
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b4:	4413      	add	r3, r2
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b086      	sub	sp, #24
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d904      	bls.n	800d4e2 <get_fat+0x20>
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d302      	bcc.n	800d4e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	617b      	str	r3, [r7, #20]
 800d4e6:	e08e      	b.n	800d606 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	2b03      	cmp	r3, #3
 800d4f4:	d061      	beq.n	800d5ba <get_fat+0xf8>
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	dc7b      	bgt.n	800d5f2 <get_fat+0x130>
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d002      	beq.n	800d504 <get_fat+0x42>
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d041      	beq.n	800d586 <get_fat+0xc4>
 800d502:	e076      	b.n	800d5f2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	60fb      	str	r3, [r7, #12]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	085b      	lsrs	r3, r3, #1
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	6a1a      	ldr	r2, [r3, #32]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	0a5b      	lsrs	r3, r3, #9
 800d51a:	4413      	add	r3, r2
 800d51c:	4619      	mov	r1, r3
 800d51e:	6938      	ldr	r0, [r7, #16]
 800d520:	f7ff ff14 	bl	800d34c <move_window>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d166      	bne.n	800d5f8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	60fa      	str	r2, [r7, #12]
 800d530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4413      	add	r3, r2
 800d538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d53c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	6a1a      	ldr	r2, [r3, #32]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	0a5b      	lsrs	r3, r3, #9
 800d546:	4413      	add	r3, r2
 800d548:	4619      	mov	r1, r3
 800d54a:	6938      	ldr	r0, [r7, #16]
 800d54c:	f7ff fefe 	bl	800d34c <move_window>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d152      	bne.n	800d5fc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	4413      	add	r3, r2
 800d560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d564:	021b      	lsls	r3, r3, #8
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	4313      	orrs	r3, r2
 800d56a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <get_fat+0xba>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	091b      	lsrs	r3, r3, #4
 800d57a:	e002      	b.n	800d582 <get_fat+0xc0>
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d582:	617b      	str	r3, [r7, #20]
			break;
 800d584:	e03f      	b.n	800d606 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	6a1a      	ldr	r2, [r3, #32]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	0a1b      	lsrs	r3, r3, #8
 800d58e:	4413      	add	r3, r2
 800d590:	4619      	mov	r1, r3
 800d592:	6938      	ldr	r0, [r7, #16]
 800d594:	f7ff feda 	bl	800d34c <move_window>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d130      	bne.n	800d600 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d5ac:	4413      	add	r3, r2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fc1c 	bl	800cdec <ld_word>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	617b      	str	r3, [r7, #20]
			break;
 800d5b8:	e025      	b.n	800d606 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	6a1a      	ldr	r2, [r3, #32]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	09db      	lsrs	r3, r3, #7
 800d5c2:	4413      	add	r3, r2
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6938      	ldr	r0, [r7, #16]
 800d5c8:	f7ff fec0 	bl	800d34c <move_window>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d118      	bne.n	800d604 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d5e0:	4413      	add	r3, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fc1a 	bl	800ce1c <ld_dword>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d5ee:	617b      	str	r3, [r7, #20]
			break;
 800d5f0:	e009      	b.n	800d606 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	617b      	str	r3, [r7, #20]
 800d5f6:	e006      	b.n	800d606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5f8:	bf00      	nop
 800d5fa:	e004      	b.n	800d606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5fc:	bf00      	nop
 800d5fe:	e002      	b.n	800d606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d600:	bf00      	nop
 800d602:	e000      	b.n	800d606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d604:	bf00      	nop
		}
	}

	return val;
 800d606:	697b      	ldr	r3, [r7, #20]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b089      	sub	sp, #36	@ 0x24
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d61c:	2302      	movs	r3, #2
 800d61e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	2b01      	cmp	r3, #1
 800d624:	f240 80d9 	bls.w	800d7da <put_fat+0x1ca>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	429a      	cmp	r2, r3
 800d630:	f080 80d3 	bcs.w	800d7da <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	2b03      	cmp	r3, #3
 800d63a:	f000 8096 	beq.w	800d76a <put_fat+0x15a>
 800d63e:	2b03      	cmp	r3, #3
 800d640:	f300 80cb 	bgt.w	800d7da <put_fat+0x1ca>
 800d644:	2b01      	cmp	r3, #1
 800d646:	d002      	beq.n	800d64e <put_fat+0x3e>
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d06e      	beq.n	800d72a <put_fat+0x11a>
 800d64c:	e0c5      	b.n	800d7da <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	61bb      	str	r3, [r7, #24]
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	085b      	lsrs	r3, r3, #1
 800d656:	69ba      	ldr	r2, [r7, #24]
 800d658:	4413      	add	r3, r2
 800d65a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a1a      	ldr	r2, [r3, #32]
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	0a5b      	lsrs	r3, r3, #9
 800d664:	4413      	add	r3, r2
 800d666:	4619      	mov	r1, r3
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff fe6f 	bl	800d34c <move_window>
 800d66e:	4603      	mov	r3, r0
 800d670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d672:	7ffb      	ldrb	r3, [r7, #31]
 800d674:	2b00      	cmp	r3, #0
 800d676:	f040 80a9 	bne.w	800d7cc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	61b9      	str	r1, [r7, #24]
 800d686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d68a:	4413      	add	r3, r2
 800d68c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00d      	beq.n	800d6b4 <put_fat+0xa4>
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	b25b      	sxtb	r3, r3
 800d69e:	f003 030f 	and.w	r3, r3, #15
 800d6a2:	b25a      	sxtb	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	011b      	lsls	r3, r3, #4
 800d6aa:	b25b      	sxtb	r3, r3
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	b25b      	sxtb	r3, r3
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	e001      	b.n	800d6b8 <put_fat+0xa8>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6a1a      	ldr	r2, [r3, #32]
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	0a5b      	lsrs	r3, r3, #9
 800d6ca:	4413      	add	r3, r2
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7ff fe3c 	bl	800d34c <move_window>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6d8:	7ffb      	ldrb	r3, [r7, #31]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d178      	bne.n	800d7d0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ea:	4413      	add	r3, r2
 800d6ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d003      	beq.n	800d700 <put_fat+0xf0>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	091b      	lsrs	r3, r3, #4
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	e00e      	b.n	800d71e <put_fat+0x10e>
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	b25b      	sxtb	r3, r3
 800d706:	f023 030f 	bic.w	r3, r3, #15
 800d70a:	b25a      	sxtb	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	0a1b      	lsrs	r3, r3, #8
 800d710:	b25b      	sxtb	r3, r3
 800d712:	f003 030f 	and.w	r3, r3, #15
 800d716:	b25b      	sxtb	r3, r3
 800d718:	4313      	orrs	r3, r2
 800d71a:	b25b      	sxtb	r3, r3
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2201      	movs	r2, #1
 800d726:	70da      	strb	r2, [r3, #3]
			break;
 800d728:	e057      	b.n	800d7da <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6a1a      	ldr	r2, [r3, #32]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	0a1b      	lsrs	r3, r3, #8
 800d732:	4413      	add	r3, r2
 800d734:	4619      	mov	r1, r3
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7ff fe08 	bl	800d34c <move_window>
 800d73c:	4603      	mov	r3, r0
 800d73e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d740:	7ffb      	ldrb	r3, [r7, #31]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d146      	bne.n	800d7d4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	005b      	lsls	r3, r3, #1
 800d750:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d754:	4413      	add	r3, r2
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	b292      	uxth	r2, r2
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fb80 	bl	800ce62 <st_word>
			fs->wflag = 1;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2201      	movs	r2, #1
 800d766:	70da      	strb	r2, [r3, #3]
			break;
 800d768:	e037      	b.n	800d7da <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6a1a      	ldr	r2, [r3, #32]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	09db      	lsrs	r3, r3, #7
 800d772:	4413      	add	r3, r2
 800d774:	4619      	mov	r1, r3
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff fde8 	bl	800d34c <move_window>
 800d77c:	4603      	mov	r3, r0
 800d77e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d780:	7ffb      	ldrb	r3, [r7, #31]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d128      	bne.n	800d7d8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d79a:	4413      	add	r3, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff fb3d 	bl	800ce1c <ld_dword>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d7a8:	4323      	orrs	r3, r4
 800d7aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d7ba:	4413      	add	r3, r2
 800d7bc:	6879      	ldr	r1, [r7, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff fb6a 	bl	800ce98 <st_dword>
			fs->wflag = 1;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	70da      	strb	r2, [r3, #3]
			break;
 800d7ca:	e006      	b.n	800d7da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7cc:	bf00      	nop
 800d7ce:	e004      	b.n	800d7da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7d0:	bf00      	nop
 800d7d2:	e002      	b.n	800d7da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7d4:	bf00      	nop
 800d7d6:	e000      	b.n	800d7da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7d8:	bf00      	nop
		}
	}
	return res;
 800d7da:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3724      	adds	r7, #36	@ 0x24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd90      	pop	{r4, r7, pc}

0800d7e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d904      	bls.n	800d80a <remove_chain+0x26>
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	429a      	cmp	r2, r3
 800d808:	d301      	bcc.n	800d80e <remove_chain+0x2a>
 800d80a:	2302      	movs	r3, #2
 800d80c:	e04b      	b.n	800d8a6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00c      	beq.n	800d82e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d814:	f04f 32ff 	mov.w	r2, #4294967295
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	69b8      	ldr	r0, [r7, #24]
 800d81c:	f7ff fef8 	bl	800d610 <put_fat>
 800d820:	4603      	mov	r3, r0
 800d822:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d824:	7ffb      	ldrb	r3, [r7, #31]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <remove_chain+0x4a>
 800d82a:	7ffb      	ldrb	r3, [r7, #31]
 800d82c:	e03b      	b.n	800d8a6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7ff fe46 	bl	800d4c2 <get_fat>
 800d836:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d031      	beq.n	800d8a2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2b01      	cmp	r3, #1
 800d842:	d101      	bne.n	800d848 <remove_chain+0x64>
 800d844:	2302      	movs	r3, #2
 800d846:	e02e      	b.n	800d8a6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	d101      	bne.n	800d854 <remove_chain+0x70>
 800d850:	2301      	movs	r3, #1
 800d852:	e028      	b.n	800d8a6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d854:	2200      	movs	r2, #0
 800d856:	68b9      	ldr	r1, [r7, #8]
 800d858:	69b8      	ldr	r0, [r7, #24]
 800d85a:	f7ff fed9 	bl	800d610 <put_fat>
 800d85e:	4603      	mov	r3, r0
 800d860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d862:	7ffb      	ldrb	r3, [r7, #31]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <remove_chain+0x88>
 800d868:	7ffb      	ldrb	r3, [r7, #31]
 800d86a:	e01c      	b.n	800d8a6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	3b02      	subs	r3, #2
 800d876:	429a      	cmp	r2, r3
 800d878:	d20b      	bcs.n	800d892 <remove_chain+0xae>
			fs->free_clst++;
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	1c5a      	adds	r2, r3, #1
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	791b      	ldrb	r3, [r3, #4]
 800d888:	f043 0301 	orr.w	r3, r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d3c6      	bcc.n	800d82e <remove_chain+0x4a>
 800d8a0:	e000      	b.n	800d8a4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d8a2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3720      	adds	r7, #32
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b088      	sub	sp, #32
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10d      	bne.n	800d8e0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d004      	beq.n	800d8da <create_chain+0x2c>
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	69ba      	ldr	r2, [r7, #24]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d31b      	bcc.n	800d912 <create_chain+0x64>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	61bb      	str	r3, [r7, #24]
 800d8de:	e018      	b.n	800d912 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff fded 	bl	800d4c2 <get_fat>
 800d8e8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d801      	bhi.n	800d8f4 <create_chain+0x46>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e070      	b.n	800d9d6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fa:	d101      	bne.n	800d900 <create_chain+0x52>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	e06a      	b.n	800d9d6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	695b      	ldr	r3, [r3, #20]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	429a      	cmp	r2, r3
 800d908:	d201      	bcs.n	800d90e <create_chain+0x60>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	e063      	b.n	800d9d6 <create_chain+0x128>
		scl = clst;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	3301      	adds	r3, #1
 800d91a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	69fa      	ldr	r2, [r7, #28]
 800d922:	429a      	cmp	r2, r3
 800d924:	d307      	bcc.n	800d936 <create_chain+0x88>
				ncl = 2;
 800d926:	2302      	movs	r3, #2
 800d928:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d901      	bls.n	800d936 <create_chain+0x88>
 800d932:	2300      	movs	r3, #0
 800d934:	e04f      	b.n	800d9d6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d936:	69f9      	ldr	r1, [r7, #28]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7ff fdc2 	bl	800d4c2 <get_fat>
 800d93e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00e      	beq.n	800d964 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d003      	beq.n	800d954 <create_chain+0xa6>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d952:	d101      	bne.n	800d958 <create_chain+0xaa>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	e03e      	b.n	800d9d6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d958:	69fa      	ldr	r2, [r7, #28]
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d1da      	bne.n	800d916 <create_chain+0x68>
 800d960:	2300      	movs	r3, #0
 800d962:	e038      	b.n	800d9d6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d964:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d966:	f04f 32ff 	mov.w	r2, #4294967295
 800d96a:	69f9      	ldr	r1, [r7, #28]
 800d96c:	6938      	ldr	r0, [r7, #16]
 800d96e:	f7ff fe4f 	bl	800d610 <put_fat>
 800d972:	4603      	mov	r3, r0
 800d974:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d976:	7dfb      	ldrb	r3, [r7, #23]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d109      	bne.n	800d990 <create_chain+0xe2>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d006      	beq.n	800d990 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d982:	69fa      	ldr	r2, [r7, #28]
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	6938      	ldr	r0, [r7, #16]
 800d988:	f7ff fe42 	bl	800d610 <put_fat>
 800d98c:	4603      	mov	r3, r0
 800d98e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d116      	bne.n	800d9c4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	69fa      	ldr	r2, [r7, #28]
 800d99a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	691a      	ldr	r2, [r3, #16]
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	3b02      	subs	r3, #2
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d804      	bhi.n	800d9b4 <create_chain+0x106>
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	1e5a      	subs	r2, r3, #1
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	791b      	ldrb	r3, [r3, #4]
 800d9b8:	f043 0301 	orr.w	r3, r3, #1
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	711a      	strb	r2, [r3, #4]
 800d9c2:	e007      	b.n	800d9d4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d102      	bne.n	800d9d0 <create_chain+0x122>
 800d9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ce:	e000      	b.n	800d9d2 <create_chain+0x124>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d9d4:	69fb      	ldr	r3, [r7, #28]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3720      	adds	r7, #32
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b087      	sub	sp, #28
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f2:	3304      	adds	r3, #4
 800d9f4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	0a5b      	lsrs	r3, r3, #9
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	8952      	ldrh	r2, [r2, #10]
 800d9fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800da02:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	1d1a      	adds	r2, r3, #4
 800da08:	613a      	str	r2, [r7, #16]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <clmt_clust+0x3a>
 800da14:	2300      	movs	r3, #0
 800da16:	e010      	b.n	800da3a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800da18:	697a      	ldr	r2, [r7, #20]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d307      	bcc.n	800da30 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	617b      	str	r3, [r7, #20]
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	3304      	adds	r3, #4
 800da2c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da2e:	e7e9      	b.n	800da04 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800da30:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	4413      	add	r3, r2
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b086      	sub	sp, #24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da5c:	d204      	bcs.n	800da68 <dir_sdi+0x22>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	f003 031f 	and.w	r3, r3, #31
 800da64:	2b00      	cmp	r3, #0
 800da66:	d001      	beq.n	800da6c <dir_sdi+0x26>
		return FR_INT_ERR;
 800da68:	2302      	movs	r3, #2
 800da6a:	e063      	b.n	800db34 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d106      	bne.n	800da8c <dir_sdi+0x46>
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d902      	bls.n	800da8c <dir_sdi+0x46>
		clst = fs->dirbase;
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da8a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10c      	bne.n	800daac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	095b      	lsrs	r3, r3, #5
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	8912      	ldrh	r2, [r2, #8]
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d301      	bcc.n	800daa2 <dir_sdi+0x5c>
 800da9e:	2302      	movs	r3, #2
 800daa0:	e048      	b.n	800db34 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	61da      	str	r2, [r3, #28]
 800daaa:	e029      	b.n	800db00 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	895b      	ldrh	r3, [r3, #10]
 800dab0:	025b      	lsls	r3, r3, #9
 800dab2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dab4:	e019      	b.n	800daea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6979      	ldr	r1, [r7, #20]
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff fd01 	bl	800d4c2 <get_fat>
 800dac0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac8:	d101      	bne.n	800dace <dir_sdi+0x88>
 800daca:	2301      	movs	r3, #1
 800dacc:	e032      	b.n	800db34 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d904      	bls.n	800dade <dir_sdi+0x98>
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	697a      	ldr	r2, [r7, #20]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d301      	bcc.n	800dae2 <dir_sdi+0x9c>
 800dade:	2302      	movs	r3, #2
 800dae0:	e028      	b.n	800db34 <dir_sdi+0xee>
			ofs -= csz;
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800daea:	683a      	ldr	r2, [r7, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d2e1      	bcs.n	800dab6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800daf2:	6979      	ldr	r1, [r7, #20]
 800daf4:	6938      	ldr	r0, [r7, #16]
 800daf6:	f7ff fcc5 	bl	800d484 <clust2sect>
 800dafa:	4602      	mov	r2, r0
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d101      	bne.n	800db12 <dir_sdi+0xcc>
 800db0e:	2302      	movs	r3, #2
 800db10:	e010      	b.n	800db34 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	69da      	ldr	r2, [r3, #28]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	0a5b      	lsrs	r3, r3, #9
 800db1a:	441a      	add	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db2c:	441a      	add	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	3320      	adds	r3, #32
 800db52:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	69db      	ldr	r3, [r3, #28]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <dir_next+0x28>
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db62:	d301      	bcc.n	800db68 <dir_next+0x2c>
 800db64:	2304      	movs	r3, #4
 800db66:	e0aa      	b.n	800dcbe <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f040 8098 	bne.w	800dca4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	69db      	ldr	r3, [r3, #28]
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10b      	bne.n	800db9e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	095b      	lsrs	r3, r3, #5
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	8912      	ldrh	r2, [r2, #8]
 800db8e:	4293      	cmp	r3, r2
 800db90:	f0c0 8088 	bcc.w	800dca4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	61da      	str	r2, [r3, #28]
 800db9a:	2304      	movs	r3, #4
 800db9c:	e08f      	b.n	800dcbe <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	0a5b      	lsrs	r3, r3, #9
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	8952      	ldrh	r2, [r2, #10]
 800dba6:	3a01      	subs	r2, #1
 800dba8:	4013      	ands	r3, r2
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d17a      	bne.n	800dca4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	4610      	mov	r0, r2
 800dbb8:	f7ff fc83 	bl	800d4c2 <get_fat>
 800dbbc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d801      	bhi.n	800dbc8 <dir_next+0x8c>
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	e07a      	b.n	800dcbe <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbce:	d101      	bne.n	800dbd4 <dir_next+0x98>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e074      	b.n	800dcbe <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	697a      	ldr	r2, [r7, #20]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d358      	bcc.n	800dc90 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d104      	bne.n	800dbee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	61da      	str	r2, [r3, #28]
 800dbea:	2304      	movs	r3, #4
 800dbec:	e067      	b.n	800dcbe <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	699b      	ldr	r3, [r3, #24]
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4610      	mov	r0, r2
 800dbf8:	f7ff fe59 	bl	800d8ae <create_chain>
 800dbfc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <dir_next+0xcc>
 800dc04:	2307      	movs	r3, #7
 800dc06:	e05a      	b.n	800dcbe <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d101      	bne.n	800dc12 <dir_next+0xd6>
 800dc0e:	2302      	movs	r3, #2
 800dc10:	e055      	b.n	800dcbe <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc18:	d101      	bne.n	800dc1e <dir_next+0xe2>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e04f      	b.n	800dcbe <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f7ff fb50 	bl	800d2c4 <sync_window>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d001      	beq.n	800dc2e <dir_next+0xf2>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e047      	b.n	800dcbe <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3330      	adds	r3, #48	@ 0x30
 800dc32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc36:	2100      	movs	r1, #0
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7ff f97a 	bl	800cf32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc3e:	2300      	movs	r3, #0
 800dc40:	613b      	str	r3, [r7, #16]
 800dc42:	6979      	ldr	r1, [r7, #20]
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f7ff fc1d 	bl	800d484 <clust2sect>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dc50:	e012      	b.n	800dc78 <dir_next+0x13c>
						fs->wflag = 1;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2201      	movs	r2, #1
 800dc56:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7ff fb33 	bl	800d2c4 <sync_window>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <dir_next+0x12c>
 800dc64:	2301      	movs	r3, #1
 800dc66:	e02a      	b.n	800dcbe <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	613b      	str	r3, [r7, #16]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	895b      	ldrh	r3, [r3, #10]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d3e6      	bcc.n	800dc52 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	1ad2      	subs	r2, r2, r3
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	697a      	ldr	r2, [r7, #20]
 800dc94:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dc96:	6979      	ldr	r1, [r7, #20]
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff fbf3 	bl	800d484 <clust2sect>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcb6:	441a      	add	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b086      	sub	sp, #24
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff feb4 	bl	800da46 <dir_sdi>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d12b      	bne.n	800dd40 <dir_alloc+0x7a>
		n = 0;
 800dce8:	2300      	movs	r3, #0
 800dcea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f7ff fb2a 	bl	800d34c <move_window>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d11d      	bne.n	800dd3e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2be5      	cmp	r3, #229	@ 0xe5
 800dd0a:	d004      	beq.n	800dd16 <dir_alloc+0x50>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6a1b      	ldr	r3, [r3, #32]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d107      	bne.n	800dd26 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	613b      	str	r3, [r7, #16]
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d102      	bne.n	800dd2a <dir_alloc+0x64>
 800dd24:	e00c      	b.n	800dd40 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dd26:	2300      	movs	r3, #0
 800dd28:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dd2a:	2101      	movs	r1, #1
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7ff ff05 	bl	800db3c <dir_next>
 800dd32:	4603      	mov	r3, r0
 800dd34:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0d7      	beq.n	800dcec <dir_alloc+0x26>
 800dd3c:	e000      	b.n	800dd40 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dd3e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd40:	7dfb      	ldrb	r3, [r7, #23]
 800dd42:	2b04      	cmp	r3, #4
 800dd44:	d101      	bne.n	800dd4a <dir_alloc+0x84>
 800dd46:	2307      	movs	r3, #7
 800dd48:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	331a      	adds	r3, #26
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7ff f842 	bl	800cdec <ld_word>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d109      	bne.n	800dd88 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	3314      	adds	r3, #20
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7ff f837 	bl	800cdec <ld_word>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	041b      	lsls	r3, r3, #16
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dd88:	68fb      	ldr	r3, [r7, #12]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	331a      	adds	r3, #26
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	b292      	uxth	r2, r2
 800dda6:	4611      	mov	r1, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff f85a 	bl	800ce62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d109      	bne.n	800ddca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	f103 0214 	add.w	r2, r3, #20
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	0c1b      	lsrs	r3, r3, #16
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	f7ff f84c 	bl	800ce62 <st_word>
	}
}
 800ddca:	bf00      	nop
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b086      	sub	sp, #24
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dde0:	2100      	movs	r1, #0
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fe2f 	bl	800da46 <dir_sdi>
 800dde8:	4603      	mov	r3, r0
 800ddea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <dir_find+0x24>
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	e03e      	b.n	800de74 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6938      	ldr	r0, [r7, #16]
 800ddfe:	f7ff faa5 	bl	800d34c <move_window>
 800de02:	4603      	mov	r3, r0
 800de04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800de06:	7dfb      	ldrb	r3, [r7, #23]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d12f      	bne.n	800de6c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a1b      	ldr	r3, [r3, #32]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de14:	7bfb      	ldrb	r3, [r7, #15]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d102      	bne.n	800de20 <dir_find+0x4e>
 800de1a:	2304      	movs	r3, #4
 800de1c:	75fb      	strb	r3, [r7, #23]
 800de1e:	e028      	b.n	800de72 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	330b      	adds	r3, #11
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a1b      	ldr	r3, [r3, #32]
 800de36:	330b      	adds	r3, #11
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	f003 0308 	and.w	r3, r3, #8
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <dir_find+0x86>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a18      	ldr	r0, [r3, #32]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	3324      	adds	r3, #36	@ 0x24
 800de4a:	220b      	movs	r2, #11
 800de4c:	4619      	mov	r1, r3
 800de4e:	f7ff f88b 	bl	800cf68 <mem_cmp>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800de58:	2100      	movs	r1, #0
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff fe6e 	bl	800db3c <dir_next>
 800de60:	4603      	mov	r3, r0
 800de62:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0c5      	beq.n	800ddf6 <dir_find+0x24>
 800de6a:	e002      	b.n	800de72 <dir_find+0xa0>
		if (res != FR_OK) break;
 800de6c:	bf00      	nop
 800de6e:	e000      	b.n	800de72 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de70:	bf00      	nop

	return res;
 800de72:	7dfb      	ldrb	r3, [r7, #23]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800de8a:	2101      	movs	r1, #1
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff ff1a 	bl	800dcc6 <dir_alloc>
 800de92:	4603      	mov	r3, r0
 800de94:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800de96:	7bfb      	ldrb	r3, [r7, #15]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d11c      	bne.n	800ded6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	69db      	ldr	r3, [r3, #28]
 800dea0:	4619      	mov	r1, r3
 800dea2:	68b8      	ldr	r0, [r7, #8]
 800dea4:	f7ff fa52 	bl	800d34c <move_window>
 800dea8:	4603      	mov	r3, r0
 800deaa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d111      	bne.n	800ded6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a1b      	ldr	r3, [r3, #32]
 800deb6:	2220      	movs	r2, #32
 800deb8:	2100      	movs	r1, #0
 800deba:	4618      	mov	r0, r3
 800debc:	f7ff f839 	bl	800cf32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6a18      	ldr	r0, [r3, #32]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3324      	adds	r3, #36	@ 0x24
 800dec8:	220b      	movs	r2, #11
 800deca:	4619      	mov	r1, r3
 800decc:	f7ff f810 	bl	800cef0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	2201      	movs	r2, #1
 800ded4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ded6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3710      	adds	r7, #16
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	60fb      	str	r3, [r7, #12]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3324      	adds	r3, #36	@ 0x24
 800def4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800def6:	220b      	movs	r2, #11
 800def8:	2120      	movs	r1, #32
 800defa:	68b8      	ldr	r0, [r7, #8]
 800defc:	f7ff f819 	bl	800cf32 <mem_set>
	si = i = 0; ni = 8;
 800df00:	2300      	movs	r3, #0
 800df02:	613b      	str	r3, [r7, #16]
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	61fb      	str	r3, [r7, #28]
 800df08:	2308      	movs	r3, #8
 800df0a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	1c5a      	adds	r2, r3, #1
 800df10:	61fa      	str	r2, [r7, #28]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	4413      	add	r3, r2
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800df1a:	7efb      	ldrb	r3, [r7, #27]
 800df1c:	2b20      	cmp	r3, #32
 800df1e:	d94e      	bls.n	800dfbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800df20:	7efb      	ldrb	r3, [r7, #27]
 800df22:	2b2f      	cmp	r3, #47	@ 0x2f
 800df24:	d006      	beq.n	800df34 <create_name+0x54>
 800df26:	7efb      	ldrb	r3, [r7, #27]
 800df28:	2b5c      	cmp	r3, #92	@ 0x5c
 800df2a:	d110      	bne.n	800df4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df2c:	e002      	b.n	800df34 <create_name+0x54>
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	3301      	adds	r3, #1
 800df32:	61fb      	str	r3, [r7, #28]
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b2f      	cmp	r3, #47	@ 0x2f
 800df3e:	d0f6      	beq.n	800df2e <create_name+0x4e>
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	4413      	add	r3, r2
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b5c      	cmp	r3, #92	@ 0x5c
 800df4a:	d0f0      	beq.n	800df2e <create_name+0x4e>
			break;
 800df4c:	e038      	b.n	800dfc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800df4e:	7efb      	ldrb	r3, [r7, #27]
 800df50:	2b2e      	cmp	r3, #46	@ 0x2e
 800df52:	d003      	beq.n	800df5c <create_name+0x7c>
 800df54:	693a      	ldr	r2, [r7, #16]
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d30c      	bcc.n	800df76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2b0b      	cmp	r3, #11
 800df60:	d002      	beq.n	800df68 <create_name+0x88>
 800df62:	7efb      	ldrb	r3, [r7, #27]
 800df64:	2b2e      	cmp	r3, #46	@ 0x2e
 800df66:	d001      	beq.n	800df6c <create_name+0x8c>
 800df68:	2306      	movs	r3, #6
 800df6a:	e044      	b.n	800dff6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800df6c:	2308      	movs	r3, #8
 800df6e:	613b      	str	r3, [r7, #16]
 800df70:	230b      	movs	r3, #11
 800df72:	617b      	str	r3, [r7, #20]
			continue;
 800df74:	e022      	b.n	800dfbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800df76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da04      	bge.n	800df88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800df7e:	7efb      	ldrb	r3, [r7, #27]
 800df80:	3b80      	subs	r3, #128	@ 0x80
 800df82:	4a1f      	ldr	r2, [pc, #124]	@ (800e000 <create_name+0x120>)
 800df84:	5cd3      	ldrb	r3, [r2, r3]
 800df86:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800df88:	7efb      	ldrb	r3, [r7, #27]
 800df8a:	4619      	mov	r1, r3
 800df8c:	481d      	ldr	r0, [pc, #116]	@ (800e004 <create_name+0x124>)
 800df8e:	f7ff f812 	bl	800cfb6 <chk_chr>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <create_name+0xbc>
 800df98:	2306      	movs	r3, #6
 800df9a:	e02c      	b.n	800dff6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800df9c:	7efb      	ldrb	r3, [r7, #27]
 800df9e:	2b60      	cmp	r3, #96	@ 0x60
 800dfa0:	d905      	bls.n	800dfae <create_name+0xce>
 800dfa2:	7efb      	ldrb	r3, [r7, #27]
 800dfa4:	2b7a      	cmp	r3, #122	@ 0x7a
 800dfa6:	d802      	bhi.n	800dfae <create_name+0xce>
 800dfa8:	7efb      	ldrb	r3, [r7, #27]
 800dfaa:	3b20      	subs	r3, #32
 800dfac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	613a      	str	r2, [r7, #16]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	7efa      	ldrb	r2, [r7, #27]
 800dfba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dfbc:	e7a6      	b.n	800df0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dfbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	441a      	add	r2, r3
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d101      	bne.n	800dfd4 <create_name+0xf4>
 800dfd0:	2306      	movs	r3, #6
 800dfd2:	e010      	b.n	800dff6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2be5      	cmp	r3, #229	@ 0xe5
 800dfda:	d102      	bne.n	800dfe2 <create_name+0x102>
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2205      	movs	r2, #5
 800dfe0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dfe2:	7efb      	ldrb	r3, [r7, #27]
 800dfe4:	2b20      	cmp	r3, #32
 800dfe6:	d801      	bhi.n	800dfec <create_name+0x10c>
 800dfe8:	2204      	movs	r2, #4
 800dfea:	e000      	b.n	800dfee <create_name+0x10e>
 800dfec:	2200      	movs	r2, #0
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	330b      	adds	r3, #11
 800dff2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dff4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3720      	adds	r7, #32
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	0800fb3c 	.word	0x0800fb3c
 800e004:	0800f84c 	.word	0x0800f84c

0800e008 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e01c:	e002      	b.n	800e024 <follow_path+0x1c>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	603b      	str	r3, [r7, #0]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	2b2f      	cmp	r3, #47	@ 0x2f
 800e02a:	d0f8      	beq.n	800e01e <follow_path+0x16>
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b5c      	cmp	r3, #92	@ 0x5c
 800e032:	d0f4      	beq.n	800e01e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	2200      	movs	r2, #0
 800e038:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b1f      	cmp	r3, #31
 800e040:	d80a      	bhi.n	800e058 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2280      	movs	r2, #128	@ 0x80
 800e046:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e04a:	2100      	movs	r1, #0
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff fcfa 	bl	800da46 <dir_sdi>
 800e052:	4603      	mov	r3, r0
 800e054:	75fb      	strb	r3, [r7, #23]
 800e056:	e043      	b.n	800e0e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e058:	463b      	mov	r3, r7
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff ff3f 	bl	800dee0 <create_name>
 800e062:	4603      	mov	r3, r0
 800e064:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e066:	7dfb      	ldrb	r3, [r7, #23]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d134      	bne.n	800e0d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff feb0 	bl	800ddd2 <dir_find>
 800e072:	4603      	mov	r3, r0
 800e074:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e07c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00a      	beq.n	800e09a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e084:	7dfb      	ldrb	r3, [r7, #23]
 800e086:	2b04      	cmp	r3, #4
 800e088:	d127      	bne.n	800e0da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e08a:	7afb      	ldrb	r3, [r7, #11]
 800e08c:	f003 0304 	and.w	r3, r3, #4
 800e090:	2b00      	cmp	r3, #0
 800e092:	d122      	bne.n	800e0da <follow_path+0xd2>
 800e094:	2305      	movs	r3, #5
 800e096:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e098:	e01f      	b.n	800e0da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e09a:	7afb      	ldrb	r3, [r7, #11]
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d11c      	bne.n	800e0de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	799b      	ldrb	r3, [r3, #6]
 800e0a8:	f003 0310 	and.w	r3, r3, #16
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d102      	bne.n	800e0b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0b0:	2305      	movs	r3, #5
 800e0b2:	75fb      	strb	r3, [r7, #23]
 800e0b4:	e014      	b.n	800e0e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0c4:	4413      	add	r3, r2
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff fe43 	bl	800dd54 <ld_clust>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e0d4:	e7c0      	b.n	800e058 <follow_path+0x50>
			if (res != FR_OK) break;
 800e0d6:	bf00      	nop
 800e0d8:	e002      	b.n	800e0e0 <follow_path+0xd8>
				break;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0de:	bf00      	nop
			}
		}
	}

	return res;
 800e0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e0ea:	b480      	push	{r7}
 800e0ec:	b087      	sub	sp, #28
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d031      	beq.n	800e164 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	e002      	b.n	800e10e <get_ldnumber+0x24>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	3301      	adds	r3, #1
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b20      	cmp	r3, #32
 800e114:	d903      	bls.n	800e11e <get_ldnumber+0x34>
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e11c:	d1f4      	bne.n	800e108 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b3a      	cmp	r3, #58	@ 0x3a
 800e124:	d11c      	bne.n	800e160 <get_ldnumber+0x76>
			tp = *path;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	1c5a      	adds	r2, r3, #1
 800e130:	60fa      	str	r2, [r7, #12]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	3b30      	subs	r3, #48	@ 0x30
 800e136:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	2b09      	cmp	r3, #9
 800e13c:	d80e      	bhi.n	800e15c <get_ldnumber+0x72>
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	429a      	cmp	r2, r3
 800e144:	d10a      	bne.n	800e15c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d107      	bne.n	800e15c <get_ldnumber+0x72>
					vol = (int)i;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	3301      	adds	r3, #1
 800e154:	617b      	str	r3, [r7, #20]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	e002      	b.n	800e166 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e160:	2300      	movs	r3, #0
 800e162:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e164:	693b      	ldr	r3, [r7, #16]
}
 800e166:	4618      	mov	r0, r3
 800e168:	371c      	adds	r7, #28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
	...

0800e174 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	70da      	strb	r2, [r3, #3]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f04f 32ff 	mov.w	r2, #4294967295
 800e18a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff f8dc 	bl	800d34c <move_window>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <check_fs+0x2a>
 800e19a:	2304      	movs	r3, #4
 800e19c:	e038      	b.n	800e210 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3330      	adds	r3, #48	@ 0x30
 800e1a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fe fe20 	bl	800cdec <ld_word>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d001      	beq.n	800e1bc <check_fs+0x48>
 800e1b8:	2303      	movs	r3, #3
 800e1ba:	e029      	b.n	800e210 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1c2:	2be9      	cmp	r3, #233	@ 0xe9
 800e1c4:	d009      	beq.n	800e1da <check_fs+0x66>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1cc:	2beb      	cmp	r3, #235	@ 0xeb
 800e1ce:	d11e      	bne.n	800e20e <check_fs+0x9a>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e1d6:	2b90      	cmp	r3, #144	@ 0x90
 800e1d8:	d119      	bne.n	800e20e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	3330      	adds	r3, #48	@ 0x30
 800e1de:	3336      	adds	r3, #54	@ 0x36
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe fe1b 	bl	800ce1c <ld_dword>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800e218 <check_fs+0xa4>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d101      	bne.n	800e1f6 <check_fs+0x82>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	e00c      	b.n	800e210 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3330      	adds	r3, #48	@ 0x30
 800e1fa:	3352      	adds	r3, #82	@ 0x52
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe fe0d 	bl	800ce1c <ld_dword>
 800e202:	4603      	mov	r3, r0
 800e204:	4a05      	ldr	r2, [pc, #20]	@ (800e21c <check_fs+0xa8>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d101      	bne.n	800e20e <check_fs+0x9a>
 800e20a:	2300      	movs	r3, #0
 800e20c:	e000      	b.n	800e210 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e20e:	2302      	movs	r3, #2
}
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	00544146 	.word	0x00544146
 800e21c:	33544146 	.word	0x33544146

0800e220 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b096      	sub	sp, #88	@ 0x58
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	4613      	mov	r3, r2
 800e22c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2200      	movs	r2, #0
 800e232:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7ff ff58 	bl	800e0ea <get_ldnumber>
 800e23a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	da01      	bge.n	800e246 <find_volume+0x26>
 800e242:	230b      	movs	r3, #11
 800e244:	e22d      	b.n	800e6a2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e246:	4aa1      	ldr	r2, [pc, #644]	@ (800e4cc <find_volume+0x2ac>)
 800e248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <find_volume+0x3a>
 800e256:	230c      	movs	r3, #12
 800e258:	e223      	b.n	800e6a2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e25e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e260:	79fb      	ldrb	r3, [r7, #7]
 800e262:	f023 0301 	bic.w	r3, r3, #1
 800e266:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01a      	beq.n	800e2a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e272:	785b      	ldrb	r3, [r3, #1]
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe fd19 	bl	800ccac <disk_status>
 800e27a:	4603      	mov	r3, r0
 800e27c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e280:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e284:	f003 0301 	and.w	r3, r3, #1
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10c      	bne.n	800e2a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e28c:	79fb      	ldrb	r3, [r7, #7]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d007      	beq.n	800e2a2 <find_volume+0x82>
 800e292:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e29e:	230a      	movs	r3, #10
 800e2a0:	e1ff      	b.n	800e6a2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	e1fd      	b.n	800e6a2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fd11 	bl	800cce0 <disk_initialize>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e1e6      	b.n	800e6a2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2d4:	79fb      	ldrb	r3, [r7, #7]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d007      	beq.n	800e2ea <find_volume+0xca>
 800e2da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2de:	f003 0304 	and.w	r3, r3, #4
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e2e6:	230a      	movs	r3, #10
 800e2e8:	e1db      	b.n	800e6a2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e2ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e2f2:	f7ff ff3f 	bl	800e174 <check_fs>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e300:	2b02      	cmp	r3, #2
 800e302:	d149      	bne.n	800e398 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e304:	2300      	movs	r3, #0
 800e306:	643b      	str	r3, [r7, #64]	@ 0x40
 800e308:	e01e      	b.n	800e348 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e312:	011b      	lsls	r3, r3, #4
 800e314:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e318:	4413      	add	r3, r2
 800e31a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	3304      	adds	r3, #4
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d006      	beq.n	800e334 <find_volume+0x114>
 800e326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e328:	3308      	adds	r3, #8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fd76 	bl	800ce1c <ld_dword>
 800e330:	4602      	mov	r2, r0
 800e332:	e000      	b.n	800e336 <find_volume+0x116>
 800e334:	2200      	movs	r2, #0
 800e336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	3358      	adds	r3, #88	@ 0x58
 800e33c:	443b      	add	r3, r7
 800e33e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e344:	3301      	adds	r3, #1
 800e346:	643b      	str	r3, [r7, #64]	@ 0x40
 800e348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e34a:	2b03      	cmp	r3, #3
 800e34c:	d9dd      	bls.n	800e30a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e34e:	2300      	movs	r3, #0
 800e350:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <find_volume+0x13e>
 800e358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e35a:	3b01      	subs	r3, #1
 800e35c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	3358      	adds	r3, #88	@ 0x58
 800e364:	443b      	add	r3, r7
 800e366:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e36a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e36c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d005      	beq.n	800e37e <find_volume+0x15e>
 800e372:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e374:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e376:	f7ff fefd 	bl	800e174 <check_fs>
 800e37a:	4603      	mov	r3, r0
 800e37c:	e000      	b.n	800e380 <find_volume+0x160>
 800e37e:	2303      	movs	r3, #3
 800e380:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e384:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d905      	bls.n	800e398 <find_volume+0x178>
 800e38c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e38e:	3301      	adds	r3, #1
 800e390:	643b      	str	r3, [r7, #64]	@ 0x40
 800e392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e394:	2b03      	cmp	r3, #3
 800e396:	d9e2      	bls.n	800e35e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e39c:	2b04      	cmp	r3, #4
 800e39e:	d101      	bne.n	800e3a4 <find_volume+0x184>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e17e      	b.n	800e6a2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d901      	bls.n	800e3b0 <find_volume+0x190>
 800e3ac:	230d      	movs	r3, #13
 800e3ae:	e178      	b.n	800e6a2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b2:	3330      	adds	r3, #48	@ 0x30
 800e3b4:	330b      	adds	r3, #11
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fe fd18 	bl	800cdec <ld_word>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3c2:	d001      	beq.n	800e3c8 <find_volume+0x1a8>
 800e3c4:	230d      	movs	r3, #13
 800e3c6:	e16c      	b.n	800e6a2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ca:	3330      	adds	r3, #48	@ 0x30
 800e3cc:	3316      	adds	r3, #22
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fd0c 	bl	800cdec <ld_word>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e3d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <find_volume+0x1cc>
 800e3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e0:	3330      	adds	r3, #48	@ 0x30
 800e3e2:	3324      	adds	r3, #36	@ 0x24
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe fd19 	bl	800ce1c <ld_dword>
 800e3ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e3f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fe:	789b      	ldrb	r3, [r3, #2]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d005      	beq.n	800e410 <find_volume+0x1f0>
 800e404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e406:	789b      	ldrb	r3, [r3, #2]
 800e408:	2b02      	cmp	r3, #2
 800e40a:	d001      	beq.n	800e410 <find_volume+0x1f0>
 800e40c:	230d      	movs	r3, #13
 800e40e:	e148      	b.n	800e6a2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e412:	789b      	ldrb	r3, [r3, #2]
 800e414:	461a      	mov	r2, r3
 800e416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e418:	fb02 f303 	mul.w	r3, r2, r3
 800e41c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e424:	461a      	mov	r2, r3
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42c:	895b      	ldrh	r3, [r3, #10]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d008      	beq.n	800e444 <find_volume+0x224>
 800e432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e434:	895b      	ldrh	r3, [r3, #10]
 800e436:	461a      	mov	r2, r3
 800e438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43a:	895b      	ldrh	r3, [r3, #10]
 800e43c:	3b01      	subs	r3, #1
 800e43e:	4013      	ands	r3, r2
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <find_volume+0x228>
 800e444:	230d      	movs	r3, #13
 800e446:	e12c      	b.n	800e6a2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44a:	3330      	adds	r3, #48	@ 0x30
 800e44c:	3311      	adds	r3, #17
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fe fccc 	bl	800cdec <ld_word>
 800e454:	4603      	mov	r3, r0
 800e456:	461a      	mov	r2, r3
 800e458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45e:	891b      	ldrh	r3, [r3, #8]
 800e460:	f003 030f 	and.w	r3, r3, #15
 800e464:	b29b      	uxth	r3, r3
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <find_volume+0x24e>
 800e46a:	230d      	movs	r3, #13
 800e46c:	e119      	b.n	800e6a2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e470:	3330      	adds	r3, #48	@ 0x30
 800e472:	3313      	adds	r3, #19
 800e474:	4618      	mov	r0, r3
 800e476:	f7fe fcb9 	bl	800cdec <ld_word>
 800e47a:	4603      	mov	r3, r0
 800e47c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e47e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e480:	2b00      	cmp	r3, #0
 800e482:	d106      	bne.n	800e492 <find_volume+0x272>
 800e484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e486:	3330      	adds	r3, #48	@ 0x30
 800e488:	3320      	adds	r3, #32
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe fcc6 	bl	800ce1c <ld_dword>
 800e490:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e494:	3330      	adds	r3, #48	@ 0x30
 800e496:	330e      	adds	r3, #14
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fe fca7 	bl	800cdec <ld_word>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d101      	bne.n	800e4ac <find_volume+0x28c>
 800e4a8:	230d      	movs	r3, #13
 800e4aa:	e0fa      	b.n	800e6a2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e4ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4b0:	4413      	add	r3, r2
 800e4b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4b4:	8912      	ldrh	r2, [r2, #8]
 800e4b6:	0912      	lsrs	r2, r2, #4
 800e4b8:	b292      	uxth	r2, r2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d204      	bcs.n	800e4d0 <find_volume+0x2b0>
 800e4c6:	230d      	movs	r3, #13
 800e4c8:	e0eb      	b.n	800e6a2 <find_volume+0x482>
 800e4ca:	bf00      	nop
 800e4cc:	240017e8 	.word	0x240017e8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4d8:	8952      	ldrh	r2, [r2, #10]
 800e4da:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d101      	bne.n	800e4ea <find_volume+0x2ca>
 800e4e6:	230d      	movs	r3, #13
 800e4e8:	e0db      	b.n	800e6a2 <find_volume+0x482>
		fmt = FS_FAT32;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d802      	bhi.n	800e500 <find_volume+0x2e0>
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e502:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e506:	4293      	cmp	r3, r2
 800e508:	d802      	bhi.n	800e510 <find_volume+0x2f0>
 800e50a:	2301      	movs	r3, #1
 800e50c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e512:	1c9a      	adds	r2, r3, #2
 800e514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e516:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e51c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e51e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e522:	441a      	add	r2, r3
 800e524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e526:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e528:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52c:	441a      	add	r2, r3
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e532:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e536:	2b03      	cmp	r3, #3
 800e538:	d11e      	bne.n	800e578 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e53c:	3330      	adds	r3, #48	@ 0x30
 800e53e:	332a      	adds	r3, #42	@ 0x2a
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fc53 	bl	800cdec <ld_word>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <find_volume+0x330>
 800e54c:	230d      	movs	r3, #13
 800e54e:	e0a8      	b.n	800e6a2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e552:	891b      	ldrh	r3, [r3, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <find_volume+0x33c>
 800e558:	230d      	movs	r3, #13
 800e55a:	e0a2      	b.n	800e6a2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55e:	3330      	adds	r3, #48	@ 0x30
 800e560:	332c      	adds	r3, #44	@ 0x2c
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fc5a 	bl	800ce1c <ld_dword>
 800e568:	4602      	mov	r2, r0
 800e56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	647b      	str	r3, [r7, #68]	@ 0x44
 800e576:	e01f      	b.n	800e5b8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57a:	891b      	ldrh	r3, [r3, #8]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <find_volume+0x364>
 800e580:	230d      	movs	r3, #13
 800e582:	e08e      	b.n	800e6a2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e586:	6a1a      	ldr	r2, [r3, #32]
 800e588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e58a:	441a      	add	r2, r3
 800e58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e590:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e594:	2b02      	cmp	r3, #2
 800e596:	d103      	bne.n	800e5a0 <find_volume+0x380>
 800e598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59a:	695b      	ldr	r3, [r3, #20]
 800e59c:	005b      	lsls	r3, r3, #1
 800e59e:	e00a      	b.n	800e5b6 <find_volume+0x396>
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a2:	695a      	ldr	r2, [r3, #20]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	4413      	add	r3, r2
 800e5aa:	085a      	lsrs	r2, r3, #1
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ae:	695b      	ldr	r3, [r3, #20]
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5b6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ba:	699a      	ldr	r2, [r3, #24]
 800e5bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5be:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e5c2:	0a5b      	lsrs	r3, r3, #9
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d201      	bcs.n	800e5cc <find_volume+0x3ac>
 800e5c8:	230d      	movs	r3, #13
 800e5ca:	e06a      	b.n	800e6a2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d2:	611a      	str	r2, [r3, #16]
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	691a      	ldr	r2, [r3, #16]
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5da:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5de:	2280      	movs	r2, #128	@ 0x80
 800e5e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e5e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d149      	bne.n	800e67e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ec:	3330      	adds	r3, #48	@ 0x30
 800e5ee:	3330      	adds	r3, #48	@ 0x30
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fe fbfb 	bl	800cdec <ld_word>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d140      	bne.n	800e67e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e5fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5fe:	3301      	adds	r3, #1
 800e600:	4619      	mov	r1, r3
 800e602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e604:	f7fe fea2 	bl	800d34c <move_window>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d137      	bne.n	800e67e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e610:	2200      	movs	r2, #0
 800e612:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e616:	3330      	adds	r3, #48	@ 0x30
 800e618:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fe fbe5 	bl	800cdec <ld_word>
 800e622:	4603      	mov	r3, r0
 800e624:	461a      	mov	r2, r3
 800e626:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d127      	bne.n	800e67e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e630:	3330      	adds	r3, #48	@ 0x30
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe fbf2 	bl	800ce1c <ld_dword>
 800e638:	4603      	mov	r3, r0
 800e63a:	4a1c      	ldr	r2, [pc, #112]	@ (800e6ac <find_volume+0x48c>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d11e      	bne.n	800e67e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e642:	3330      	adds	r3, #48	@ 0x30
 800e644:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fbe7 	bl	800ce1c <ld_dword>
 800e64e:	4603      	mov	r3, r0
 800e650:	4a17      	ldr	r2, [pc, #92]	@ (800e6b0 <find_volume+0x490>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d113      	bne.n	800e67e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e658:	3330      	adds	r3, #48	@ 0x30
 800e65a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fe fbdc 	bl	800ce1c <ld_dword>
 800e664:	4602      	mov	r2, r0
 800e666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e668:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66c:	3330      	adds	r3, #48	@ 0x30
 800e66e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe fbd2 	bl	800ce1c <ld_dword>
 800e678:	4602      	mov	r2, r0
 800e67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e680:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e684:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e686:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b4 <find_volume+0x494>)
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	3301      	adds	r3, #1
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	4b09      	ldr	r3, [pc, #36]	@ (800e6b4 <find_volume+0x494>)
 800e690:	801a      	strh	r2, [r3, #0]
 800e692:	4b08      	ldr	r3, [pc, #32]	@ (800e6b4 <find_volume+0x494>)
 800e694:	881a      	ldrh	r2, [r3, #0]
 800e696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e698:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e69a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e69c:	f7fe fdee 	bl	800d27c <clear_lock>
#endif
	return FR_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3758      	adds	r7, #88	@ 0x58
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	41615252 	.word	0x41615252
 800e6b0:	61417272 	.word	0x61417272
 800e6b4:	240017ec 	.word	0x240017ec

0800e6b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e6c2:	2309      	movs	r3, #9
 800e6c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d01c      	beq.n	800e706 <validate+0x4e>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d018      	beq.n	800e706 <validate+0x4e>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d013      	beq.n	800e706 <validate+0x4e>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	889a      	ldrh	r2, [r3, #4]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	88db      	ldrh	r3, [r3, #6]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d10c      	bne.n	800e706 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	785b      	ldrb	r3, [r3, #1]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe fada 	bl	800ccac <disk_status>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d101      	bne.n	800e706 <validate+0x4e>
			res = FR_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e706:	7bfb      	ldrb	r3, [r7, #15]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <validate+0x5a>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	e000      	b.n	800e714 <validate+0x5c>
 800e712:	2300      	movs	r3, #0
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	6013      	str	r3, [r2, #0]
	return res;
 800e718:	7bfb      	ldrb	r3, [r7, #15]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
	...

0800e724 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e736:	f107 0310 	add.w	r3, r7, #16
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7ff fcd5 	bl	800e0ea <get_ldnumber>
 800e740:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	2b00      	cmp	r3, #0
 800e746:	da01      	bge.n	800e74c <f_mount+0x28>
 800e748:	230b      	movs	r3, #11
 800e74a:	e02b      	b.n	800e7a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e74c:	4a17      	ldr	r2, [pc, #92]	@ (800e7ac <f_mount+0x88>)
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e754:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d005      	beq.n	800e768 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e75c:	69b8      	ldr	r0, [r7, #24]
 800e75e:	f7fe fd8d 	bl	800d27c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	2200      	movs	r2, #0
 800e766:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d002      	beq.n	800e774 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	490d      	ldr	r1, [pc, #52]	@ (800e7ac <f_mount+0x88>)
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <f_mount+0x66>
 800e784:	79fb      	ldrb	r3, [r7, #7]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d001      	beq.n	800e78e <f_mount+0x6a>
 800e78a:	2300      	movs	r3, #0
 800e78c:	e00a      	b.n	800e7a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e78e:	f107 010c 	add.w	r1, r7, #12
 800e792:	f107 0308 	add.w	r3, r7, #8
 800e796:	2200      	movs	r2, #0
 800e798:	4618      	mov	r0, r3
 800e79a:	f7ff fd41 	bl	800e220 <find_volume>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3720      	adds	r7, #32
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	240017e8 	.word	0x240017e8

0800e7b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b098      	sub	sp, #96	@ 0x60
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d101      	bne.n	800e7c8 <f_open+0x18>
 800e7c4:	2309      	movs	r3, #9
 800e7c6:	e1a9      	b.n	800eb1c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e7d0:	79fa      	ldrb	r2, [r7, #7]
 800e7d2:	f107 0110 	add.w	r1, r7, #16
 800e7d6:	f107 0308 	add.w	r3, r7, #8
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7ff fd20 	bl	800e220 <find_volume>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e7e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f040 818d 	bne.w	800eb0a <f_open+0x35a>
		dj.obj.fs = fs;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	f107 0314 	add.w	r3, r7, #20
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff fc03 	bl	800e008 <follow_path>
 800e802:	4603      	mov	r3, r0
 800e804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d118      	bne.n	800e842 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e810:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e814:	b25b      	sxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	da03      	bge.n	800e822 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e81a:	2306      	movs	r3, #6
 800e81c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e820:	e00f      	b.n	800e842 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	2b01      	cmp	r3, #1
 800e826:	bf8c      	ite	hi
 800e828:	2301      	movhi	r3, #1
 800e82a:	2300      	movls	r3, #0
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	461a      	mov	r2, r3
 800e830:	f107 0314 	add.w	r3, r7, #20
 800e834:	4611      	mov	r1, r2
 800e836:	4618      	mov	r0, r3
 800e838:	f7fe fbd8 	bl	800cfec <chk_lock>
 800e83c:	4603      	mov	r3, r0
 800e83e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e842:	79fb      	ldrb	r3, [r7, #7]
 800e844:	f003 031c 	and.w	r3, r3, #28
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d07f      	beq.n	800e94c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e84c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e850:	2b00      	cmp	r3, #0
 800e852:	d017      	beq.n	800e884 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e854:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e858:	2b04      	cmp	r3, #4
 800e85a:	d10e      	bne.n	800e87a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e85c:	f7fe fc22 	bl	800d0a4 <enq_lock>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <f_open+0xc4>
 800e866:	f107 0314 	add.w	r3, r7, #20
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff fb06 	bl	800de7c <dir_register>
 800e870:	4603      	mov	r3, r0
 800e872:	e000      	b.n	800e876 <f_open+0xc6>
 800e874:	2312      	movs	r3, #18
 800e876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	f043 0308 	orr.w	r3, r3, #8
 800e880:	71fb      	strb	r3, [r7, #7]
 800e882:	e010      	b.n	800e8a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e884:	7ebb      	ldrb	r3, [r7, #26]
 800e886:	f003 0311 	and.w	r3, r3, #17
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <f_open+0xe6>
					res = FR_DENIED;
 800e88e:	2307      	movs	r3, #7
 800e890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e894:	e007      	b.n	800e8a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e896:	79fb      	ldrb	r3, [r7, #7]
 800e898:	f003 0304 	and.w	r3, r3, #4
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <f_open+0xf6>
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d168      	bne.n	800e980 <f_open+0x1d0>
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	f003 0308 	and.w	r3, r3, #8
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d063      	beq.n	800e980 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e8b8:	f7fd ffb2 	bl	800c820 <get_fattime>
 800e8bc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c0:	330e      	adds	r3, #14
 800e8c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe fae7 	bl	800ce98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8cc:	3316      	adds	r3, #22
 800e8ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe fae1 	bl	800ce98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d8:	330b      	adds	r3, #11
 800e8da:	2220      	movs	r2, #32
 800e8dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7ff fa35 	bl	800dd54 <ld_clust>
 800e8ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fa4d 	bl	800dd92 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8fa:	331c      	adds	r3, #28
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe faca 	bl	800ce98 <st_dword>
					fs->wflag = 1;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	2201      	movs	r2, #1
 800e908:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e90a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d037      	beq.n	800e980 <f_open+0x1d0>
						dw = fs->winsect;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e914:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e916:	f107 0314 	add.w	r3, r7, #20
 800e91a:	2200      	movs	r2, #0
 800e91c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe ff60 	bl	800d7e4 <remove_chain>
 800e924:	4603      	mov	r3, r0
 800e926:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e92a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d126      	bne.n	800e980 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fd08 	bl	800d34c <move_window>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e946:	3a01      	subs	r2, #1
 800e948:	60da      	str	r2, [r3, #12]
 800e94a:	e019      	b.n	800e980 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e94c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e950:	2b00      	cmp	r3, #0
 800e952:	d115      	bne.n	800e980 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e954:	7ebb      	ldrb	r3, [r7, #26]
 800e956:	f003 0310 	and.w	r3, r3, #16
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e95e:	2304      	movs	r3, #4
 800e960:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e964:	e00c      	b.n	800e980 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	f003 0302 	and.w	r3, r3, #2
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d007      	beq.n	800e980 <f_open+0x1d0>
 800e970:	7ebb      	ldrb	r3, [r7, #26]
 800e972:	f003 0301 	and.w	r3, r3, #1
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <f_open+0x1d0>
						res = FR_DENIED;
 800e97a:	2307      	movs	r3, #7
 800e97c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e984:	2b00      	cmp	r3, #0
 800e986:	d126      	bne.n	800e9d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	f003 0308 	and.w	r3, r3, #8
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e998:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e9a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9a8:	79fb      	ldrb	r3, [r7, #7]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	bf8c      	ite	hi
 800e9ae:	2301      	movhi	r3, #1
 800e9b0:	2300      	movls	r3, #0
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	f107 0314 	add.w	r3, r7, #20
 800e9ba:	4611      	mov	r1, r2
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fb93 	bl	800d0e8 <inc_lock>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <f_open+0x226>
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e9d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f040 8095 	bne.w	800eb0a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff f9b4 	bl	800dd54 <ld_clust>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9f4:	331c      	adds	r3, #28
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe fa10 	bl	800ce1c <ld_dword>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	88da      	ldrh	r2, [r3, #6]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	79fa      	ldrb	r2, [r7, #7]
 800ea1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	3330      	adds	r3, #48	@ 0x30
 800ea32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea36:	2100      	movs	r1, #0
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fe fa7a 	bl	800cf32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea3e:	79fb      	ldrb	r3, [r7, #7]
 800ea40:	f003 0320 	and.w	r3, r3, #32
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d060      	beq.n	800eb0a <f_open+0x35a>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d05c      	beq.n	800eb0a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	68da      	ldr	r2, [r3, #12]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	895b      	ldrh	r3, [r3, #10]
 800ea5c:	025b      	lsls	r3, r3, #9
 800ea5e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea6c:	e016      	b.n	800ea9c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fd25 	bl	800d4c2 <get_fat>
 800ea78:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ea7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d802      	bhi.n	800ea86 <f_open+0x2d6>
 800ea80:	2302      	movs	r3, #2
 800ea82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea8c:	d102      	bne.n	800ea94 <f_open+0x2e4>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d103      	bne.n	800eaac <f_open+0x2fc>
 800eaa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eaa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d8e0      	bhi.n	800ea6e <f_open+0x2be>
				}
				fp->clust = clst;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eab0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d127      	bne.n	800eb0a <f_open+0x35a>
 800eaba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d022      	beq.n	800eb0a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7fe fcdb 	bl	800d484 <clust2sect>
 800eace:	6478      	str	r0, [r7, #68]	@ 0x44
 800ead0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d103      	bne.n	800eade <f_open+0x32e>
						res = FR_INT_ERR;
 800ead6:	2302      	movs	r3, #2
 800ead8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eadc:	e015      	b.n	800eb0a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eae0:	0a5a      	lsrs	r2, r3, #9
 800eae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	7858      	ldrb	r0, [r3, #1]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6a1a      	ldr	r2, [r3, #32]
 800eaf8:	2301      	movs	r3, #1
 800eafa:	f7fe f919 	bl	800cd30 <disk_read>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <f_open+0x35a>
 800eb04:	2301      	movs	r3, #1
 800eb06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <f_open+0x368>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3760      	adds	r7, #96	@ 0x60
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08e      	sub	sp, #56	@ 0x38
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f107 0214 	add.w	r2, r7, #20
 800eb42:	4611      	mov	r1, r2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fdb7 	bl	800e6b8 <validate>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d107      	bne.n	800eb68 <f_read+0x44>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	7d5b      	ldrb	r3, [r3, #21]
 800eb5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d002      	beq.n	800eb6e <f_read+0x4a>
 800eb68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb6c:	e115      	b.n	800ed9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	7d1b      	ldrb	r3, [r3, #20]
 800eb72:	f003 0301 	and.w	r3, r3, #1
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <f_read+0x5a>
 800eb7a:	2307      	movs	r3, #7
 800eb7c:	e10d      	b.n	800ed9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	68da      	ldr	r2, [r3, #12]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	6a3b      	ldr	r3, [r7, #32]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	f240 80fe 	bls.w	800ed90 <f_read+0x26c>
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb98:	e0fa      	b.n	800ed90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f040 80c6 	bne.w	800ed34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	699b      	ldr	r3, [r3, #24]
 800ebac:	0a5b      	lsrs	r3, r3, #9
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	8952      	ldrh	r2, [r2, #10]
 800ebb2:	3a01      	subs	r2, #1
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d12f      	bne.n	800ec1e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	699b      	ldr	r3, [r3, #24]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d103      	bne.n	800ebce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebcc:	e013      	b.n	800ebf6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d007      	beq.n	800ebe6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	4619      	mov	r1, r3
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f7fe fefe 	bl	800d9de <clmt_clust>
 800ebe2:	6338      	str	r0, [r7, #48]	@ 0x30
 800ebe4:	e007      	b.n	800ebf6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	69db      	ldr	r3, [r3, #28]
 800ebec:	4619      	mov	r1, r3
 800ebee:	4610      	mov	r0, r2
 800ebf0:	f7fe fc67 	bl	800d4c2 <get_fat>
 800ebf4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d804      	bhi.n	800ec06 <f_read+0xe2>
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2202      	movs	r2, #2
 800ec00:	755a      	strb	r2, [r3, #21]
 800ec02:	2302      	movs	r3, #2
 800ec04:	e0c9      	b.n	800ed9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0c:	d104      	bne.n	800ec18 <f_read+0xf4>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2201      	movs	r2, #1
 800ec12:	755a      	strb	r2, [r3, #21]
 800ec14:	2301      	movs	r3, #1
 800ec16:	e0c0      	b.n	800ed9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	4619      	mov	r1, r3
 800ec26:	4610      	mov	r0, r2
 800ec28:	f7fe fc2c 	bl	800d484 <clust2sect>
 800ec2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d104      	bne.n	800ec3e <f_read+0x11a>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2202      	movs	r2, #2
 800ec38:	755a      	strb	r2, [r3, #21]
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	e0ad      	b.n	800ed9a <f_read+0x276>
			sect += csect;
 800ec3e:	69ba      	ldr	r2, [r7, #24]
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	4413      	add	r3, r2
 800ec44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	0a5b      	lsrs	r3, r3, #9
 800ec4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d039      	beq.n	800ecc6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec56:	4413      	add	r3, r2
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	8952      	ldrh	r2, [r2, #10]
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d905      	bls.n	800ec6c <f_read+0x148>
					cc = fs->csize - csect;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	895b      	ldrh	r3, [r3, #10]
 800ec64:	461a      	mov	r2, r3
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	7858      	ldrb	r0, [r3, #1]
 800ec70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec72:	69ba      	ldr	r2, [r7, #24]
 800ec74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec76:	f7fe f85b 	bl	800cd30 <disk_read>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d004      	beq.n	800ec8a <f_read+0x166>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2201      	movs	r2, #1
 800ec84:	755a      	strb	r2, [r3, #21]
 800ec86:	2301      	movs	r3, #1
 800ec88:	e087      	b.n	800ed9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	7d1b      	ldrb	r3, [r3, #20]
 800ec8e:	b25b      	sxtb	r3, r3
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da14      	bge.n	800ecbe <f_read+0x19a>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6a1a      	ldr	r2, [r3, #32]
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d90d      	bls.n	800ecbe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6a1a      	ldr	r2, [r3, #32]
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	025b      	lsls	r3, r3, #9
 800ecac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecae:	18d0      	adds	r0, r2, r3
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3330      	adds	r3, #48	@ 0x30
 800ecb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecb8:	4619      	mov	r1, r3
 800ecba:	f7fe f919 	bl	800cef0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	025b      	lsls	r3, r3, #9
 800ecc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ecc4:	e050      	b.n	800ed68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6a1b      	ldr	r3, [r3, #32]
 800ecca:	69ba      	ldr	r2, [r7, #24]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d02e      	beq.n	800ed2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	7d1b      	ldrb	r3, [r3, #20]
 800ecd4:	b25b      	sxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	da18      	bge.n	800ed0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	7858      	ldrb	r0, [r3, #1]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6a1a      	ldr	r2, [r3, #32]
 800ece8:	2301      	movs	r3, #1
 800ecea:	f7fe f841 	bl	800cd70 <disk_write>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d004      	beq.n	800ecfe <f_read+0x1da>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	755a      	strb	r2, [r3, #21]
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e04d      	b.n	800ed9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	7d1b      	ldrb	r3, [r3, #20]
 800ed02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	7858      	ldrb	r0, [r3, #1]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed16:	2301      	movs	r3, #1
 800ed18:	69ba      	ldr	r2, [r7, #24]
 800ed1a:	f7fe f809 	bl	800cd30 <disk_read>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d004      	beq.n	800ed2e <f_read+0x20a>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2201      	movs	r2, #1
 800ed28:	755a      	strb	r2, [r3, #21]
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e035      	b.n	800ed9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	69ba      	ldr	r2, [r7, #24]
 800ed32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	699b      	ldr	r3, [r3, #24]
 800ed38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ed40:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d901      	bls.n	800ed4e <f_read+0x22a>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	699b      	ldr	r3, [r3, #24]
 800ed58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed5c:	4413      	add	r3, r2
 800ed5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed60:	4619      	mov	r1, r3
 800ed62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed64:	f7fe f8c4 	bl	800cef0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6c:	4413      	add	r3, r2
 800ed6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	699a      	ldr	r2, [r3, #24]
 800ed74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed76:	441a      	add	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	619a      	str	r2, [r3, #24]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed82:	441a      	add	r2, r3
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f47f af01 	bne.w	800eb9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3738      	adds	r7, #56	@ 0x38
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b086      	sub	sp, #24
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f107 0208 	add.w	r2, r7, #8
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff fc80 	bl	800e6b8 <validate>
 800edb8:	4603      	mov	r3, r0
 800edba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800edbc:	7dfb      	ldrb	r3, [r7, #23]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d168      	bne.n	800ee94 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	7d1b      	ldrb	r3, [r3, #20]
 800edc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d062      	beq.n	800ee94 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	7d1b      	ldrb	r3, [r3, #20]
 800edd2:	b25b      	sxtb	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	da15      	bge.n	800ee04 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	7858      	ldrb	r0, [r3, #1]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6a1a      	ldr	r2, [r3, #32]
 800ede6:	2301      	movs	r3, #1
 800ede8:	f7fd ffc2 	bl	800cd70 <disk_write>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <f_sync+0x54>
 800edf2:	2301      	movs	r3, #1
 800edf4:	e04f      	b.n	800ee96 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	7d1b      	ldrb	r3, [r3, #20]
 800edfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ee04:	f7fd fd0c 	bl	800c820 <get_fattime>
 800ee08:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee10:	4619      	mov	r1, r3
 800ee12:	4610      	mov	r0, r2
 800ee14:	f7fe fa9a 	bl	800d34c <move_window>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee1c:	7dfb      	ldrb	r3, [r7, #23]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d138      	bne.n	800ee94 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	330b      	adds	r3, #11
 800ee2c:	781a      	ldrb	r2, [r3, #0]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	330b      	adds	r3, #11
 800ee32:	f042 0220 	orr.w	r2, r2, #32
 800ee36:	b2d2      	uxtb	r2, r2
 800ee38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6818      	ldr	r0, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	461a      	mov	r2, r3
 800ee44:	68f9      	ldr	r1, [r7, #12]
 800ee46:	f7fe ffa4 	bl	800dd92 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f103 021c 	add.w	r2, r3, #28
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	4619      	mov	r1, r3
 800ee56:	4610      	mov	r0, r2
 800ee58:	f7fe f81e 	bl	800ce98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3316      	adds	r3, #22
 800ee60:	6939      	ldr	r1, [r7, #16]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fe f818 	bl	800ce98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3312      	adds	r3, #18
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fd fff7 	bl	800ce62 <st_word>
					fs->wflag = 1;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	2201      	movs	r2, #1
 800ee78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe fa93 	bl	800d3a8 <sync_fs>
 800ee82:	4603      	mov	r3, r0
 800ee84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	7d1b      	ldrb	r3, [r3, #20]
 800ee8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ee94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3718      	adds	r7, #24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7ff ff7b 	bl	800eda2 <f_sync>
 800eeac:	4603      	mov	r3, r0
 800eeae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eeb0:	7bfb      	ldrb	r3, [r7, #15]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d118      	bne.n	800eee8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f107 0208 	add.w	r2, r7, #8
 800eebc:	4611      	mov	r1, r2
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff fbfa 	bl	800e6b8 <validate>
 800eec4:	4603      	mov	r3, r0
 800eec6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d10c      	bne.n	800eee8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe f996 	bl	800d204 <dec_lock>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d102      	bne.n	800eee8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b090      	sub	sp, #64	@ 0x40
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f107 0208 	add.w	r2, r7, #8
 800ef02:	4611      	mov	r1, r2
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff fbd7 	bl	800e6b8 <validate>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d103      	bne.n	800ef20 <f_lseek+0x2e>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	7d5b      	ldrb	r3, [r3, #21]
 800ef1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ef20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <f_lseek+0x3c>
 800ef28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef2c:	e1e6      	b.n	800f2fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f000 80d1 	beq.w	800f0da <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3e:	d15a      	bne.n	800eff6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef44:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ef46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef48:	1d1a      	adds	r2, r3, #4
 800ef4a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	2302      	movs	r3, #2
 800ef52:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d03a      	beq.n	800efd6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ef60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef62:	613b      	str	r3, [r7, #16]
 800ef64:	2300      	movs	r3, #0
 800ef66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef6a:	3302      	adds	r3, #2
 800ef6c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef70:	60fb      	str	r3, [r7, #12]
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	3301      	adds	r3, #1
 800ef76:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fe faa0 	bl	800d4c2 <get_fat>
 800ef82:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ef84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d804      	bhi.n	800ef94 <f_lseek+0xa2>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	755a      	strb	r2, [r3, #21]
 800ef90:	2302      	movs	r3, #2
 800ef92:	e1b3      	b.n	800f2fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9a:	d104      	bne.n	800efa6 <f_lseek+0xb4>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	755a      	strb	r2, [r3, #21]
 800efa2:	2301      	movs	r3, #1
 800efa4:	e1aa      	b.n	800f2fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3301      	adds	r3, #1
 800efaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efac:	429a      	cmp	r2, r3
 800efae:	d0de      	beq.n	800ef6e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800efb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d809      	bhi.n	800efcc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800efb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efba:	1d1a      	adds	r2, r3, #4
 800efbc:	627a      	str	r2, [r7, #36]	@ 0x24
 800efbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efc0:	601a      	str	r2, [r3, #0]
 800efc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc4:	1d1a      	adds	r2, r3, #4
 800efc6:	627a      	str	r2, [r7, #36]	@ 0x24
 800efc8:	693a      	ldr	r2, [r7, #16]
 800efca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	695b      	ldr	r3, [r3, #20]
 800efd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d3c4      	bcc.n	800ef60 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efdc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800efde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d803      	bhi.n	800efee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800efe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	e184      	b.n	800f2f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800efee:	2311      	movs	r3, #17
 800eff0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800eff4:	e180      	b.n	800f2f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	683a      	ldr	r2, [r7, #0]
 800effc:	429a      	cmp	r2, r3
 800effe:	d902      	bls.n	800f006 <f_lseek+0x114>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f000 8172 	beq.w	800f2f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	3b01      	subs	r3, #1
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7fe fcdf 	bl	800d9de <clmt_clust>
 800f020:	4602      	mov	r2, r0
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	69db      	ldr	r3, [r3, #28]
 800f02c:	4619      	mov	r1, r3
 800f02e:	4610      	mov	r0, r2
 800f030:	f7fe fa28 	bl	800d484 <clust2sect>
 800f034:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d104      	bne.n	800f046 <f_lseek+0x154>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2202      	movs	r2, #2
 800f040:	755a      	strb	r2, [r3, #21]
 800f042:	2302      	movs	r3, #2
 800f044:	e15a      	b.n	800f2fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	3b01      	subs	r3, #1
 800f04a:	0a5b      	lsrs	r3, r3, #9
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	8952      	ldrh	r2, [r2, #10]
 800f050:	3a01      	subs	r2, #1
 800f052:	4013      	ands	r3, r2
 800f054:	69ba      	ldr	r2, [r7, #24]
 800f056:	4413      	add	r3, r2
 800f058:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f062:	2b00      	cmp	r3, #0
 800f064:	f000 8148 	beq.w	800f2f8 <f_lseek+0x406>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6a1b      	ldr	r3, [r3, #32]
 800f06c:	69ba      	ldr	r2, [r7, #24]
 800f06e:	429a      	cmp	r2, r3
 800f070:	f000 8142 	beq.w	800f2f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7d1b      	ldrb	r3, [r3, #20]
 800f078:	b25b      	sxtb	r3, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	da18      	bge.n	800f0b0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	7858      	ldrb	r0, [r3, #1]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a1a      	ldr	r2, [r3, #32]
 800f08c:	2301      	movs	r3, #1
 800f08e:	f7fd fe6f 	bl	800cd70 <disk_write>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d004      	beq.n	800f0a2 <f_lseek+0x1b0>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	755a      	strb	r2, [r3, #21]
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e12c      	b.n	800f2fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	7d1b      	ldrb	r3, [r3, #20]
 800f0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	7858      	ldrb	r0, [r3, #1]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	69ba      	ldr	r2, [r7, #24]
 800f0be:	f7fd fe37 	bl	800cd30 <disk_read>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d004      	beq.n	800f0d2 <f_lseek+0x1e0>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	755a      	strb	r2, [r3, #21]
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e114      	b.n	800f2fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	69ba      	ldr	r2, [r7, #24]
 800f0d6:	621a      	str	r2, [r3, #32]
 800f0d8:	e10e      	b.n	800f2f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d908      	bls.n	800f0f6 <f_lseek+0x204>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7d1b      	ldrb	r3, [r3, #20]
 800f0e8:	f003 0302 	and.w	r3, r3, #2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f104:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f000 80a7 	beq.w	800f25c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	895b      	ldrh	r3, [r3, #10]
 800f112:	025b      	lsls	r3, r3, #9
 800f114:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d01b      	beq.n	800f154 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	1e5a      	subs	r2, r3, #1
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	fbb2 f2f3 	udiv	r2, r2, r3
 800f126:	6a3b      	ldr	r3, [r7, #32]
 800f128:	1e59      	subs	r1, r3, #1
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f130:	429a      	cmp	r2, r3
 800f132:	d30f      	bcc.n	800f154 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	1e5a      	subs	r2, r3, #1
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	425b      	negs	r3, r3
 800f13c:	401a      	ands	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	69db      	ldr	r3, [r3, #28]
 800f150:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f152:	e022      	b.n	800f19a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d119      	bne.n	800f194 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2100      	movs	r1, #0
 800f164:	4618      	mov	r0, r3
 800f166:	f7fe fba2 	bl	800d8ae <create_chain>
 800f16a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d104      	bne.n	800f17c <f_lseek+0x28a>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2202      	movs	r2, #2
 800f176:	755a      	strb	r2, [r3, #21]
 800f178:	2302      	movs	r3, #2
 800f17a:	e0bf      	b.n	800f2fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f182:	d104      	bne.n	800f18e <f_lseek+0x29c>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2201      	movs	r2, #1
 800f188:	755a      	strb	r2, [r3, #21]
 800f18a:	2301      	movs	r3, #1
 800f18c:	e0b6      	b.n	800f2fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f192:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f198:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d05d      	beq.n	800f25c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f1a0:	e03a      	b.n	800f218 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f1a2:	683a      	ldr	r2, [r7, #0]
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	603b      	str	r3, [r7, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	441a      	add	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ba:	f003 0302 	and.w	r3, r3, #2
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00b      	beq.n	800f1da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fe fb71 	bl	800d8ae <create_chain>
 800f1cc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d108      	bne.n	800f1e6 <f_lseek+0x2f4>
							ofs = 0; break;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	603b      	str	r3, [r7, #0]
 800f1d8:	e022      	b.n	800f220 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fe f96f 	bl	800d4c2 <get_fat>
 800f1e4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ec:	d104      	bne.n	800f1f8 <f_lseek+0x306>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	755a      	strb	r2, [r3, #21]
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e081      	b.n	800f2fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d904      	bls.n	800f208 <f_lseek+0x316>
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	695b      	ldr	r3, [r3, #20]
 800f202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f204:	429a      	cmp	r2, r3
 800f206:	d304      	bcc.n	800f212 <f_lseek+0x320>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2202      	movs	r2, #2
 800f20c:	755a      	strb	r2, [r3, #21]
 800f20e:	2302      	movs	r3, #2
 800f210:	e074      	b.n	800f2fc <f_lseek+0x40a>
					fp->clust = clst;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f216:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d8c0      	bhi.n	800f1a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	699a      	ldr	r2, [r3, #24]
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	441a      	add	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f232:	2b00      	cmp	r3, #0
 800f234:	d012      	beq.n	800f25c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fe f922 	bl	800d484 <clust2sect>
 800f240:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <f_lseek+0x360>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2202      	movs	r2, #2
 800f24c:	755a      	strb	r2, [r3, #21]
 800f24e:	2302      	movs	r3, #2
 800f250:	e054      	b.n	800f2fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	0a5b      	lsrs	r3, r3, #9
 800f256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f258:	4413      	add	r3, r2
 800f25a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	699a      	ldr	r2, [r3, #24]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	429a      	cmp	r2, r3
 800f266:	d90a      	bls.n	800f27e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	699a      	ldr	r2, [r3, #24]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7d1b      	ldrb	r3, [r3, #20]
 800f274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f278:	b2da      	uxtb	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	699b      	ldr	r3, [r3, #24]
 800f282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f286:	2b00      	cmp	r3, #0
 800f288:	d036      	beq.n	800f2f8 <f_lseek+0x406>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f290:	429a      	cmp	r2, r3
 800f292:	d031      	beq.n	800f2f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7d1b      	ldrb	r3, [r3, #20]
 800f298:	b25b      	sxtb	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	da18      	bge.n	800f2d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	7858      	ldrb	r0, [r3, #1]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6a1a      	ldr	r2, [r3, #32]
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	f7fd fd5f 	bl	800cd70 <disk_write>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d004      	beq.n	800f2c2 <f_lseek+0x3d0>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	755a      	strb	r2, [r3, #21]
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e01c      	b.n	800f2fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	7d1b      	ldrb	r3, [r3, #20]
 800f2c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	7858      	ldrb	r0, [r3, #1]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f2da:	2301      	movs	r3, #1
 800f2dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2de:	f7fd fd27 	bl	800cd30 <disk_read>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d004      	beq.n	800f2f2 <f_lseek+0x400>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	755a      	strb	r2, [r3, #21]
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e004      	b.n	800f2fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f2f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3740      	adds	r7, #64	@ 0x40
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f304:	b480      	push	{r7}
 800f306:	b087      	sub	sp, #28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	4613      	mov	r3, r2
 800f310:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f312:	2301      	movs	r3, #1
 800f314:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f31a:	4b1f      	ldr	r3, [pc, #124]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f31c:	7a5b      	ldrb	r3, [r3, #9]
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	2b00      	cmp	r3, #0
 800f322:	d131      	bne.n	800f388 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f324:	4b1c      	ldr	r3, [pc, #112]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f326:	7a5b      	ldrb	r3, [r3, #9]
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	461a      	mov	r2, r3
 800f32c:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f32e:	2100      	movs	r1, #0
 800f330:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f332:	4b19      	ldr	r3, [pc, #100]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f334:	7a5b      	ldrb	r3, [r3, #9]
 800f336:	b2db      	uxtb	r3, r3
 800f338:	4a17      	ldr	r2, [pc, #92]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	4413      	add	r3, r2
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f342:	4b15      	ldr	r3, [pc, #84]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f344:	7a5b      	ldrb	r3, [r3, #9]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	461a      	mov	r2, r3
 800f34a:	4b13      	ldr	r3, [pc, #76]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f34c:	4413      	add	r3, r2
 800f34e:	79fa      	ldrb	r2, [r7, #7]
 800f350:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f352:	4b11      	ldr	r3, [pc, #68]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f354:	7a5b      	ldrb	r3, [r3, #9]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	1c5a      	adds	r2, r3, #1
 800f35a:	b2d1      	uxtb	r1, r2
 800f35c:	4a0e      	ldr	r2, [pc, #56]	@ (800f398 <FATFS_LinkDriverEx+0x94>)
 800f35e:	7251      	strb	r1, [r2, #9]
 800f360:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f362:	7dbb      	ldrb	r3, [r7, #22]
 800f364:	3330      	adds	r3, #48	@ 0x30
 800f366:	b2da      	uxtb	r2, r3
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	3301      	adds	r3, #1
 800f370:	223a      	movs	r2, #58	@ 0x3a
 800f372:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	3302      	adds	r3, #2
 800f378:	222f      	movs	r2, #47	@ 0x2f
 800f37a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	3303      	adds	r3, #3
 800f380:	2200      	movs	r2, #0
 800f382:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f388:	7dfb      	ldrb	r3, [r7, #23]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	371c      	adds	r7, #28
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	24001810 	.word	0x24001810

0800f39c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff ffaa 	bl	800f304 <FATFS_LinkDriverEx>
 800f3b0:	4603      	mov	r3, r0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3708      	adds	r7, #8
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
	...

0800f3bc <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	607b      	str	r3, [r7, #4]
 800f3c6:	e02e      	b.n	800f426 <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3b80      	subs	r3, #128	@ 0x80
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800f3d6:	fb02 f303 	mul.w	r3, r2, r3
 800f3da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3de:	141a      	asrs	r2, r3, #16
 800f3e0:	4916      	ldr	r1, [pc, #88]	@ (800f43c <JPEG_InitPostProcColorTables+0x80>)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800f3ee:	fb02 f303 	mul.w	r3, r2, r3
 800f3f2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3f6:	141a      	asrs	r2, r3, #16
 800f3f8:	4911      	ldr	r1, [pc, #68]	@ (800f440 <JPEG_InitPostProcColorTables+0x84>)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	4a10      	ldr	r2, [pc, #64]	@ (800f444 <JPEG_InitPostProcColorTables+0x88>)
 800f404:	fb03 f202 	mul.w	r2, r3, r2
 800f408:	490f      	ldr	r1, [pc, #60]	@ (800f448 <JPEG_InitPostProcColorTables+0x8c>)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	4a0e      	ldr	r2, [pc, #56]	@ (800f44c <JPEG_InitPostProcColorTables+0x90>)
 800f414:	fb03 f202 	mul.w	r2, r3, r2
 800f418:	490d      	ldr	r1, [pc, #52]	@ (800f450 <JPEG_InitPostProcColorTables+0x94>)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	3301      	adds	r3, #1
 800f424:	607b      	str	r3, [r7, #4]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2bff      	cmp	r3, #255	@ 0xff
 800f42a:	ddcd      	ble.n	800f3c8 <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800f42c:	bf00      	nop
 800f42e:	bf00      	nop
 800f430:	370c      	adds	r7, #12
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	2400181c 	.word	0x2400181c
 800f440:	24001c1c 	.word	0x24001c1c
 800f444:	ffffa498 	.word	0xffffa498
 800f448:	2400201c 	.word	0x2400201c
 800f44c:	ffffd3f4 	.word	0xffffd3f4
 800f450:	2400241c 	.word	0x2400241c

0800f454 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800f458:	f000 f806 	bl	800f468 <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800f45c:	f000 f888 	bl	800f570 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800f460:	f7ff ffac 	bl	800f3bc <JPEG_InitPostProcColorTables>
#endif

}
 800f464:	bf00      	nop
 800f466:	bd80      	pop	{r7, pc}

0800f468 <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800f46e:	2300      	movs	r3, #0
 800f470:	607b      	str	r3, [r7, #4]
 800f472:	e05a      	b.n	800f52a <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800f47a:	fb02 f303 	mul.w	r3, r2, r3
 800f47e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f482:	141a      	asrs	r2, r3, #16
 800f484:	492e      	ldr	r1, [pc, #184]	@ (800f540 <JPEG_InitPreProcColorTables+0xd8>)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f249 6245 	movw	r2, #38469	@ 0x9645
 800f492:	fb02 f303 	mul.w	r3, r2, r3
 800f496:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f49a:	141a      	asrs	r2, r3, #16
 800f49c:	4929      	ldr	r1, [pc, #164]	@ (800f544 <JPEG_InitPreProcColorTables+0xdc>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800f4aa:	fb02 f303 	mul.w	r3, r2, r3
 800f4ae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4b2:	141a      	asrs	r2, r3, #16
 800f4b4:	4924      	ldr	r1, [pc, #144]	@ (800f548 <JPEG_InitPreProcColorTables+0xe0>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a23      	ldr	r2, [pc, #140]	@ (800f54c <JPEG_InitPreProcColorTables+0xe4>)
 800f4c0:	fb02 f303 	mul.w	r3, r2, r3
 800f4c4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4c8:	141a      	asrs	r2, r3, #16
 800f4ca:	4921      	ldr	r1, [pc, #132]	@ (800f550 <JPEG_InitPreProcColorTables+0xe8>)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a1f      	ldr	r2, [pc, #124]	@ (800f554 <JPEG_InitPreProcColorTables+0xec>)
 800f4d6:	fb02 f303 	mul.w	r3, r2, r3
 800f4da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4de:	141a      	asrs	r2, r3, #16
 800f4e0:	491d      	ldr	r1, [pc, #116]	@ (800f558 <JPEG_InitPreProcColorTables+0xf0>)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	03db      	lsls	r3, r3, #15
 800f4ee:	141a      	asrs	r2, r3, #16
 800f4f0:	491a      	ldr	r1, [pc, #104]	@ (800f55c <JPEG_InitPreProcColorTables+0xf4>)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a19      	ldr	r2, [pc, #100]	@ (800f560 <JPEG_InitPreProcColorTables+0xf8>)
 800f4fc:	fb02 f303 	mul.w	r3, r2, r3
 800f500:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f504:	141a      	asrs	r2, r3, #16
 800f506:	4917      	ldr	r1, [pc, #92]	@ (800f564 <JPEG_InitPreProcColorTables+0xfc>)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a15      	ldr	r2, [pc, #84]	@ (800f568 <JPEG_InitPreProcColorTables+0x100>)
 800f512:	fb02 f303 	mul.w	r3, r2, r3
 800f516:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f51a:	141a      	asrs	r2, r3, #16
 800f51c:	4913      	ldr	r1, [pc, #76]	@ (800f56c <JPEG_InitPreProcColorTables+0x104>)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3301      	adds	r3, #1
 800f528:	607b      	str	r3, [r7, #4]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2bff      	cmp	r3, #255	@ 0xff
 800f52e:	dda1      	ble.n	800f474 <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	370c      	adds	r7, #12
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	2400281c 	.word	0x2400281c
 800f544:	2400341c 	.word	0x2400341c
 800f548:	2400401c 	.word	0x2400401c
 800f54c:	ffffd4d1 	.word	0xffffd4d1
 800f550:	24002c1c 	.word	0x24002c1c
 800f554:	ffffab30 	.word	0xffffab30
 800f558:	24003c1c 	.word	0x24003c1c
 800f55c:	2400301c 	.word	0x2400301c
 800f560:	ffff94d1 	.word	0xffff94d1
 800f564:	2400381c 	.word	0x2400381c
 800f568:	ffffeb30 	.word	0xffffeb30
 800f56c:	2400441c 	.word	0x2400441c

0800f570 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800f576:	2300      	movs	r3, #0
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	e036      	b.n	800f5ea <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800f57c:	2300      	movs	r3, #0
 800f57e:	60bb      	str	r3, [r7, #8]
 800f580:	e02d      	b.n	800f5de <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	00db      	lsls	r3, r3, #3
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	4413      	add	r3, r2
 800f58a:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b07      	cmp	r3, #7
 800f590:	d906      	bls.n	800f5a0 <JPEG_Init_MCU_LUT+0x30>
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2b07      	cmp	r3, #7
 800f596:	d903      	bls.n	800f5a0 <JPEG_Init_MCU_LUT+0x30>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3378      	adds	r3, #120	@ 0x78
 800f59c:	607b      	str	r3, [r7, #4]
 800f59e:	e012      	b.n	800f5c6 <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	2b07      	cmp	r3, #7
 800f5a4:	d906      	bls.n	800f5b4 <JPEG_Init_MCU_LUT+0x44>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2b07      	cmp	r3, #7
 800f5aa:	d803      	bhi.n	800f5b4 <JPEG_Init_MCU_LUT+0x44>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3338      	adds	r3, #56	@ 0x38
 800f5b0:	607b      	str	r3, [r7, #4]
 800f5b2:	e008      	b.n	800f5c6 <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2b07      	cmp	r3, #7
 800f5b8:	d805      	bhi.n	800f5c6 <JPEG_Init_MCU_LUT+0x56>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b07      	cmp	r3, #7
 800f5be:	d902      	bls.n	800f5c6 <JPEG_Init_MCU_LUT+0x56>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3340      	adds	r3, #64	@ 0x40
 800f5c4:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	011a      	lsls	r2, r3, #4
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	b291      	uxth	r1, r2
 800f5d2:	4a62      	ldr	r2, [pc, #392]	@ (800f75c <JPEG_Init_MCU_LUT+0x1ec>)
 800f5d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	60bb      	str	r3, [r7, #8]
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	2b0f      	cmp	r3, #15
 800f5e2:	d9ce      	bls.n	800f582 <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	60fb      	str	r3, [r7, #12]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2b0f      	cmp	r3, #15
 800f5ee:	d9c5      	bls.n	800f57c <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	e072      	b.n	800f6dc <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	60bb      	str	r3, [r7, #8]
 800f5fa:	e069      	b.n	800f6d0 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	011b      	lsls	r3, r3, #4
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	4413      	add	r3, r2
 800f604:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	085b      	lsrs	r3, r3, #1
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	085b      	lsrs	r3, r3, #1
 800f610:	b29b      	uxth	r3, r3
 800f612:	00db      	lsls	r3, r3, #3
 800f614:	b29b      	uxth	r3, r3
 800f616:	4413      	add	r3, r2
 800f618:	b29b      	uxth	r3, r3
 800f61a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f61e:	b299      	uxth	r1, r3
 800f620:	4a4f      	ldr	r2, [pc, #316]	@ (800f760 <JPEG_Init_MCU_LUT+0x1f0>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	085b      	lsrs	r3, r3, #1
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	b29b      	uxth	r3, r3
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	b29b      	uxth	r3, r3
 800f636:	4413      	add	r3, r2
 800f638:	b29b      	uxth	r3, r3
 800f63a:	3380      	adds	r3, #128	@ 0x80
 800f63c:	b299      	uxth	r1, r3
 800f63e:	4a49      	ldr	r2, [pc, #292]	@ (800f764 <JPEG_Init_MCU_LUT+0x1f4>)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	085b      	lsrs	r3, r3, #1
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	085b      	lsrs	r3, r3, #1
 800f650:	b29b      	uxth	r3, r3
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	b29b      	uxth	r3, r3
 800f656:	4413      	add	r3, r2
 800f658:	b29b      	uxth	r3, r3
 800f65a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f65e:	b299      	uxth	r1, r3
 800f660:	4a41      	ldr	r2, [pc, #260]	@ (800f768 <JPEG_Init_MCU_LUT+0x1f8>)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	085b      	lsrs	r3, r3, #1
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	b29b      	uxth	r3, r3
 800f672:	00db      	lsls	r3, r3, #3
 800f674:	b29b      	uxth	r3, r3
 800f676:	4413      	add	r3, r2
 800f678:	b29b      	uxth	r3, r3
 800f67a:	33c0      	adds	r3, #192	@ 0xc0
 800f67c:	b299      	uxth	r1, r3
 800f67e:	4a3b      	ldr	r2, [pc, #236]	@ (800f76c <JPEG_Init_MCU_LUT+0x1fc>)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	085b      	lsrs	r3, r3, #1
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	085b      	lsrs	r3, r3, #1
 800f690:	b29b      	uxth	r3, r3
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	b29b      	uxth	r3, r3
 800f696:	4413      	add	r3, r2
 800f698:	b29b      	uxth	r3, r3
 800f69a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f69e:	b299      	uxth	r1, r3
 800f6a0:	4a33      	ldr	r2, [pc, #204]	@ (800f770 <JPEG_Init_MCU_LUT+0x200>)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	085b      	lsrs	r3, r3, #1
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	085b      	lsrs	r3, r3, #1
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	00db      	lsls	r3, r3, #3
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4413      	add	r3, r2
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f6c0:	b299      	uxth	r1, r3
 800f6c2:	4a2c      	ldr	r2, [pc, #176]	@ (800f774 <JPEG_Init_MCU_LUT+0x204>)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	60bb      	str	r3, [r7, #8]
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2b0f      	cmp	r3, #15
 800f6d4:	d992      	bls.n	800f5fc <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2b0f      	cmp	r3, #15
 800f6e0:	d989      	bls.n	800f5f6 <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	60fb      	str	r3, [r7, #12]
 800f6e6:	e02e      	b.n	800f746 <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60bb      	str	r3, [r7, #8]
 800f6ec:	e025      	b.n	800f73a <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	00db      	lsls	r3, r3, #3
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	b299      	uxth	r1, r3
 800f6fc:	4a1e      	ldr	r2, [pc, #120]	@ (800f778 <JPEG_Init_MCU_LUT+0x208>)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	b29b      	uxth	r3, r3
 800f708:	3340      	adds	r3, #64	@ 0x40
 800f70a:	b299      	uxth	r1, r3
 800f70c:	4a1b      	ldr	r2, [pc, #108]	@ (800f77c <JPEG_Init_MCU_LUT+0x20c>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	b29b      	uxth	r3, r3
 800f718:	3380      	adds	r3, #128	@ 0x80
 800f71a:	b299      	uxth	r1, r3
 800f71c:	4a18      	ldr	r2, [pc, #96]	@ (800f780 <JPEG_Init_MCU_LUT+0x210>)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	b29b      	uxth	r3, r3
 800f728:	33c0      	adds	r3, #192	@ 0xc0
 800f72a:	b299      	uxth	r1, r3
 800f72c:	4a15      	ldr	r2, [pc, #84]	@ (800f784 <JPEG_Init_MCU_LUT+0x214>)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	3301      	adds	r3, #1
 800f738:	60bb      	str	r3, [r7, #8]
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	2b07      	cmp	r3, #7
 800f73e:	d9d6      	bls.n	800f6ee <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	3301      	adds	r3, #1
 800f744:	60fb      	str	r3, [r7, #12]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2b07      	cmp	r3, #7
 800f74a:	d9cd      	bls.n	800f6e8 <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800f74c:	bf00      	nop
 800f74e:	bf00      	nop
 800f750:	3714      	adds	r7, #20
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	2400481c 	.word	0x2400481c
 800f760:	24004a9c 	.word	0x24004a9c
 800f764:	24004c9c 	.word	0x24004c9c
 800f768:	24004f1c 	.word	0x24004f1c
 800f76c:	2400511c 	.word	0x2400511c
 800f770:	2400539c 	.word	0x2400539c
 800f774:	2400559c 	.word	0x2400559c
 800f778:	24004a1c 	.word	0x24004a1c
 800f77c:	24004e9c 	.word	0x24004e9c
 800f780:	2400531c 	.word	0x2400531c
 800f784:	2400579c 	.word	0x2400579c

0800f788 <memset>:
 800f788:	4402      	add	r2, r0
 800f78a:	4603      	mov	r3, r0
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d100      	bne.n	800f792 <memset+0xa>
 800f790:	4770      	bx	lr
 800f792:	f803 1b01 	strb.w	r1, [r3], #1
 800f796:	e7f9      	b.n	800f78c <memset+0x4>

0800f798 <__libc_init_array>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	4d0d      	ldr	r5, [pc, #52]	@ (800f7d0 <__libc_init_array+0x38>)
 800f79c:	4c0d      	ldr	r4, [pc, #52]	@ (800f7d4 <__libc_init_array+0x3c>)
 800f79e:	1b64      	subs	r4, r4, r5
 800f7a0:	10a4      	asrs	r4, r4, #2
 800f7a2:	2600      	movs	r6, #0
 800f7a4:	42a6      	cmp	r6, r4
 800f7a6:	d109      	bne.n	800f7bc <__libc_init_array+0x24>
 800f7a8:	4d0b      	ldr	r5, [pc, #44]	@ (800f7d8 <__libc_init_array+0x40>)
 800f7aa:	4c0c      	ldr	r4, [pc, #48]	@ (800f7dc <__libc_init_array+0x44>)
 800f7ac:	f000 f826 	bl	800f7fc <_init>
 800f7b0:	1b64      	subs	r4, r4, r5
 800f7b2:	10a4      	asrs	r4, r4, #2
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	42a6      	cmp	r6, r4
 800f7b8:	d105      	bne.n	800f7c6 <__libc_init_array+0x2e>
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
 800f7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c0:	4798      	blx	r3
 800f7c2:	3601      	adds	r6, #1
 800f7c4:	e7ee      	b.n	800f7a4 <__libc_init_array+0xc>
 800f7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7ca:	4798      	blx	r3
 800f7cc:	3601      	adds	r6, #1
 800f7ce:	e7f2      	b.n	800f7b6 <__libc_init_array+0x1e>
 800f7d0:	0800fbc4 	.word	0x0800fbc4
 800f7d4:	0800fbc4 	.word	0x0800fbc4
 800f7d8:	0800fbc4 	.word	0x0800fbc4
 800f7dc:	0800fbc8 	.word	0x0800fbc8

0800f7e0 <memcpy>:
 800f7e0:	440a      	add	r2, r1
 800f7e2:	4291      	cmp	r1, r2
 800f7e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7e8:	d100      	bne.n	800f7ec <memcpy+0xc>
 800f7ea:	4770      	bx	lr
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7f6:	4291      	cmp	r1, r2
 800f7f8:	d1f9      	bne.n	800f7ee <memcpy+0xe>
 800f7fa:	bd10      	pop	{r4, pc}

0800f7fc <_init>:
 800f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fe:	bf00      	nop
 800f800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f802:	bc08      	pop	{r3}
 800f804:	469e      	mov	lr, r3
 800f806:	4770      	bx	lr

0800f808 <_fini>:
 800f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80a:	bf00      	nop
 800f80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80e:	bc08      	pop	{r3}
 800f810:	469e      	mov	lr, r3
 800f812:	4770      	bx	lr
